// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Backtrace::Unity::Json
namespace Backtrace::Unity::Json {
  // Forward declaring type: BacktraceJObject
  class BacktraceJObject;
}
// Completed forward declares
// Type namespace: Backtrace.Unity.Model
namespace Backtrace::Unity::Model {
  // Forward declaring type: BacktraceSourceCode
  class BacktraceSourceCode;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Backtrace::Unity::Model::BacktraceSourceCode);
DEFINE_IL2CPP_ARG_TYPE(::Backtrace::Unity::Model::BacktraceSourceCode*, "Backtrace.Unity.Model", "BacktraceSourceCode");
// Type namespace: Backtrace.Unity.Model
namespace Backtrace::Unity::Model {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Backtrace.Unity.Model.BacktraceSourceCode
  // [TokenAttribute] Offset: FFFFFFFF
  class BacktraceSourceCode : public ::Il2CppObject {
    public:
    public:
    // public readonly System.String Type
    // Size: 0x8
    // Offset: 0x10
    ::StringW Type;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public readonly System.String Title
    // Size: 0x8
    // Offset: 0x18
    ::StringW Title;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String <Text>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    ::StringW Text;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get static field: static System.String SOURCE_CODE_PROPERTY
    static ::StringW _get_SOURCE_CODE_PROPERTY();
    // Set static field: static System.String SOURCE_CODE_PROPERTY
    static void _set_SOURCE_CODE_PROPERTY(::StringW value);
    // Get instance field reference: public readonly System.String Type
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Type();
    // Get instance field reference: public readonly System.String Title
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Title();
    // Get instance field reference: private System.String <Text>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$Text$k__BackingField();
    // public System.String get_Text()
    // Offset: 0x2A63EAC
    ::StringW get_Text();
    // public System.Void set_Text(System.String value)
    // Offset: 0x2A63EB4
    void set_Text(::StringW value);
    // Backtrace.Unity.Json.BacktraceJObject ToJson()
    // Offset: 0x2A62464
    ::Backtrace::Unity::Json::BacktraceJObject* ToJson();
    // public System.Void .ctor()
    // Offset: 0x2A63BF8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BacktraceSourceCode* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Backtrace::Unity::Model::BacktraceSourceCode::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BacktraceSourceCode*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x2A63EBC
    static void _cctor();
  }; // Backtrace.Unity.Model.BacktraceSourceCode
  #pragma pack(pop)
  static check_size<sizeof(BacktraceSourceCode), 32 + sizeof(::StringW)> __Backtrace_Unity_Model_BacktraceSourceCodeSizeCheck;
  static_assert(sizeof(BacktraceSourceCode) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceSourceCode::get_Text
// Il2CppName: get_Text
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Backtrace::Unity::Model::BacktraceSourceCode::*)()>(&Backtrace::Unity::Model::BacktraceSourceCode::get_Text)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceSourceCode*), "get_Text", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceSourceCode::set_Text
// Il2CppName: set_Text
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Model::BacktraceSourceCode::*)(::StringW)>(&Backtrace::Unity::Model::BacktraceSourceCode::set_Text)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceSourceCode*), "set_Text", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceSourceCode::ToJson
// Il2CppName: ToJson
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Backtrace::Unity::Json::BacktraceJObject* (Backtrace::Unity::Model::BacktraceSourceCode::*)()>(&Backtrace::Unity::Model::BacktraceSourceCode::ToJson)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceSourceCode*), "ToJson", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceSourceCode::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceSourceCode::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Backtrace::Unity::Model::BacktraceSourceCode::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceSourceCode*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
