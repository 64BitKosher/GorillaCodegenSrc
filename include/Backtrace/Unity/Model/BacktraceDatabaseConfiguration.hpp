// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Backtrace.Unity.Model.BacktraceClientConfiguration
#include "Backtrace/Unity/Model/BacktraceClientConfiguration.hpp"
// Including type: Backtrace.Unity.Types.DeduplicationStrategy
#include "Backtrace/Unity/Types/DeduplicationStrategy.hpp"
// Including type: Backtrace.Unity.Types.RetryOrder
#include "Backtrace/Unity/Types/RetryOrder.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: Backtrace.Unity.Model
namespace Backtrace::Unity::Model {
  // Forward declaring type: BacktraceDatabaseConfiguration
  class BacktraceDatabaseConfiguration;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Backtrace::Unity::Model::BacktraceDatabaseConfiguration);
DEFINE_IL2CPP_ARG_TYPE(::Backtrace::Unity::Model::BacktraceDatabaseConfiguration*, "Backtrace.Unity.Model", "BacktraceDatabaseConfiguration");
// Type namespace: Backtrace.Unity.Model
namespace Backtrace::Unity::Model {
  // Size: 0x64
  #pragma pack(push, 1)
  // Autogenerated type: Backtrace.Unity.Model.BacktraceDatabaseConfiguration
  // [TokenAttribute] Offset: FFFFFFFF
  class BacktraceDatabaseConfiguration : public ::Backtrace::Unity::Model::BacktraceClientConfiguration {
    public:
    public:
    // public System.Boolean Enabled
    // Size: 0x1
    // Offset: 0x34
    bool Enabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: Enabled and: DatabasePath
    char __padding0[0x3] = {};
    // public System.String DatabasePath
    // Size: 0x8
    // Offset: 0x38
    ::StringW DatabasePath;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Boolean AutoSendMode
    // Size: 0x1
    // Offset: 0x40
    bool AutoSendMode;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean CreateDatabase
    // Size: 0x1
    // Offset: 0x41
    bool CreateDatabase;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean GenerateScreenshotOnException
    // Size: 0x1
    // Offset: 0x42
    bool GenerateScreenshotOnException;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: GenerateScreenshotOnException and: DeduplicationStrategy
    char __padding4[0x1] = {};
    // public Backtrace.Unity.Types.DeduplicationStrategy DeduplicationStrategy
    // Size: 0x4
    // Offset: 0x44
    ::Backtrace::Unity::Types::DeduplicationStrategy DeduplicationStrategy;
    // Field size check
    static_assert(sizeof(::Backtrace::Unity::Types::DeduplicationStrategy) == 0x4);
    // public System.Int32 MaxRecordCount
    // Size: 0x4
    // Offset: 0x48
    int MaxRecordCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: MaxRecordCount and: MaxDatabaseSize
    char __padding6[0x4] = {};
    // public System.Int64 MaxDatabaseSize
    // Size: 0x8
    // Offset: 0x50
    int64_t MaxDatabaseSize;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // public System.Int32 RetryInterval
    // Size: 0x4
    // Offset: 0x58
    int RetryInterval;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 RetryLimit
    // Size: 0x4
    // Offset: 0x5C
    int RetryLimit;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public Backtrace.Unity.Types.RetryOrder RetryOrder
    // Size: 0x4
    // Offset: 0x60
    ::Backtrace::Unity::Types::RetryOrder RetryOrder;
    // Field size check
    static_assert(sizeof(::Backtrace::Unity::Types::RetryOrder) == 0x4);
    public:
    // Get instance field reference: public System.Boolean Enabled
    [[deprecated("Use field access instead!")]] bool& dyn_Enabled();
    // Get instance field reference: public System.String DatabasePath
    [[deprecated("Use field access instead!")]] ::StringW& dyn_DatabasePath();
    // Get instance field reference: public System.Boolean AutoSendMode
    [[deprecated("Use field access instead!")]] bool& dyn_AutoSendMode();
    // Get instance field reference: public System.Boolean CreateDatabase
    [[deprecated("Use field access instead!")]] bool& dyn_CreateDatabase();
    // Get instance field reference: public System.Boolean GenerateScreenshotOnException
    [[deprecated("Use field access instead!")]] bool& dyn_GenerateScreenshotOnException();
    // Get instance field reference: public Backtrace.Unity.Types.DeduplicationStrategy DeduplicationStrategy
    [[deprecated("Use field access instead!")]] ::Backtrace::Unity::Types::DeduplicationStrategy& dyn_DeduplicationStrategy();
    // Get instance field reference: public System.Int32 MaxRecordCount
    [[deprecated("Use field access instead!")]] int& dyn_MaxRecordCount();
    // Get instance field reference: public System.Int64 MaxDatabaseSize
    [[deprecated("Use field access instead!")]] int64_t& dyn_MaxDatabaseSize();
    // Get instance field reference: public System.Int32 RetryInterval
    [[deprecated("Use field access instead!")]] int& dyn_RetryInterval();
    // Get instance field reference: public System.Int32 RetryLimit
    [[deprecated("Use field access instead!")]] int& dyn_RetryLimit();
    // Get instance field reference: public Backtrace.Unity.Types.RetryOrder RetryOrder
    [[deprecated("Use field access instead!")]] ::Backtrace::Unity::Types::RetryOrder& dyn_RetryOrder();
    // public System.Boolean ValidDatabasePath()
    // Offset: 0x2A6265C
    bool ValidDatabasePath();
    // public System.Void .ctor()
    // Offset: 0x2A62758
    // Implemented from: Backtrace.Unity.Model.BacktraceClientConfiguration
    // Base method: System.Void BacktraceClientConfiguration::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BacktraceDatabaseConfiguration* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Backtrace::Unity::Model::BacktraceDatabaseConfiguration::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BacktraceDatabaseConfiguration*, creationType>()));
    }
  }; // Backtrace.Unity.Model.BacktraceDatabaseConfiguration
  #pragma pack(pop)
  static check_size<sizeof(BacktraceDatabaseConfiguration), 96 + sizeof(::Backtrace::Unity::Types::RetryOrder)> __Backtrace_Unity_Model_BacktraceDatabaseConfigurationSizeCheck;
  static_assert(sizeof(BacktraceDatabaseConfiguration) == 0x64);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceDatabaseConfiguration::ValidDatabasePath
// Il2CppName: ValidDatabasePath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Backtrace::Unity::Model::BacktraceDatabaseConfiguration::*)()>(&Backtrace::Unity::Model::BacktraceDatabaseConfiguration::ValidDatabasePath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceDatabaseConfiguration*), "ValidDatabasePath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceDatabaseConfiguration::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
