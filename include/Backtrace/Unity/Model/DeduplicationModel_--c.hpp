// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Backtrace.Unity.Model.DeduplicationModel
#include "Backtrace/Unity/Model/DeduplicationModel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`2<T, TResult>
  template<typename T, typename TResult>
  class Func_2;
}
// Forward declaring namespace: Backtrace::Unity::Model
namespace Backtrace::Unity::Model {
  // Forward declaring type: BacktraceStackFrame
  class BacktraceStackFrame;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Backtrace::Unity::Model::DeduplicationModel::$$c);
DEFINE_IL2CPP_ARG_TYPE(::Backtrace::Unity::Model::DeduplicationModel::$$c*, "Backtrace.Unity.Model", "DeduplicationModel/<>c");
// Type namespace: Backtrace.Unity.Model
namespace Backtrace::Unity::Model {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Backtrace.Unity.Model.DeduplicationModel/<>c
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  class DeduplicationModel::$$c : public ::Il2CppObject {
    public:
    // Get static field: static public readonly Backtrace.Unity.Model.DeduplicationModel/<>c <>9
    static ::Backtrace::Unity::Model::DeduplicationModel::$$c* _get_$$9();
    // Set static field: static public readonly Backtrace.Unity.Model.DeduplicationModel/<>c <>9
    static void _set_$$9(::Backtrace::Unity::Model::DeduplicationModel::$$c* value);
    // Get static field: static public System.Func`2<Backtrace.Unity.Model.BacktraceStackFrame,System.String> <>9__4_0
    static ::System::Func_2<::Backtrace::Unity::Model::BacktraceStackFrame*, ::StringW>* _get_$$9__4_0();
    // Set static field: static public System.Func`2<Backtrace.Unity.Model.BacktraceStackFrame,System.String> <>9__4_0
    static void _set_$$9__4_0(::System::Func_2<::Backtrace::Unity::Model::BacktraceStackFrame*, ::StringW>* value);
    // Get static field: static public System.Func`2<System.String,System.String> <>9__4_1
    static ::System::Func_2<::StringW, ::StringW>* _get_$$9__4_1();
    // Set static field: static public System.Func`2<System.String,System.String> <>9__4_1
    static void _set_$$9__4_1(::System::Func_2<::StringW, ::StringW>* value);
    // static private System.Void .cctor()
    // Offset: 0x2A66CE0
    static void _cctor();
    // public System.Void .ctor()
    // Offset: 0x2A66D48
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DeduplicationModel::$$c* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Backtrace::Unity::Model::DeduplicationModel::$$c::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DeduplicationModel::$$c*, creationType>()));
    }
    // System.String <get_StackTrace>b__4_0(Backtrace.Unity.Model.BacktraceStackFrame n)
    // Offset: 0x2A66D50
    ::StringW $get_StackTrace$b__4_0(::Backtrace::Unity::Model::BacktraceStackFrame* n);
    // System.String <get_StackTrace>b__4_1(System.String n)
    // Offset: 0x2A66D68
    ::StringW $get_StackTrace$b__4_1(::StringW n);
  }; // Backtrace.Unity.Model.DeduplicationModel/<>c
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Backtrace::Unity::Model::DeduplicationModel::$$c::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Backtrace::Unity::Model::DeduplicationModel::$$c::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::DeduplicationModel::$$c*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::DeduplicationModel::$$c::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Backtrace::Unity::Model::DeduplicationModel::$$c::$get_StackTrace$b__4_0
// Il2CppName: <get_StackTrace>b__4_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Backtrace::Unity::Model::DeduplicationModel::$$c::*)(::Backtrace::Unity::Model::BacktraceStackFrame*)>(&Backtrace::Unity::Model::DeduplicationModel::$$c::$get_StackTrace$b__4_0)> {
  static const MethodInfo* get() {
    static auto* n = &::il2cpp_utils::GetClassFromName("Backtrace.Unity.Model", "BacktraceStackFrame")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::DeduplicationModel::$$c*), "<get_StackTrace>b__4_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{n});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::DeduplicationModel::$$c::$get_StackTrace$b__4_1
// Il2CppName: <get_StackTrace>b__4_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Backtrace::Unity::Model::DeduplicationModel::$$c::*)(::StringW)>(&Backtrace::Unity::Model::DeduplicationModel::$$c::$get_StackTrace$b__4_1)> {
  static const MethodInfo* get() {
    static auto* n = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::DeduplicationModel::$$c*), "<get_StackTrace>b__4_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{n});
  }
};
