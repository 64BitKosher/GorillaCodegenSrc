// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
// Including type: Backtrace.Unity.Types.ReportFilterType
#include "Backtrace/Unity/Types/ReportFilterType.hpp"
// Including type: Backtrace.Unity.Types.DeduplicationStrategy
#include "Backtrace/Unity/Types/DeduplicationStrategy.hpp"
// Including type: Backtrace.Unity.Model.Breadcrumbs.BacktraceBreadcrumbType
#include "Backtrace/Unity/Model/Breadcrumbs/BacktraceBreadcrumbType.hpp"
// Including type: Backtrace.Unity.Model.Breadcrumbs.UnityEngineLogLevel
#include "Backtrace/Unity/Model/Breadcrumbs/UnityEngineLogLevel.hpp"
// Including type: Backtrace.Unity.Types.MiniDumpType
#include "Backtrace/Unity/Types/MiniDumpType.hpp"
// Including type: Backtrace.Unity.Types.RetryOrder
#include "Backtrace/Unity/Types/RetryOrder.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Forward declaring namespace: Backtrace::Unity::Model
namespace Backtrace::Unity::Model {
  // Forward declaring type: BacktraceCredentials
  class BacktraceCredentials;
}
// Completed forward declares
// Type namespace: Backtrace.Unity.Model
namespace Backtrace::Unity::Model {
  // Forward declaring type: BacktraceConfiguration
  class BacktraceConfiguration;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Backtrace::Unity::Model::BacktraceConfiguration);
DEFINE_IL2CPP_ARG_TYPE(::Backtrace::Unity::Model::BacktraceConfiguration*, "Backtrace.Unity.Model", "BacktraceConfiguration");
// Type namespace: Backtrace.Unity.Model
namespace Backtrace::Unity::Model {
  // Size: 0xAC
  #pragma pack(push, 1)
  // Autogenerated type: Backtrace.Unity.Model.BacktraceConfiguration
  // [TokenAttribute] Offset: FFFFFFFF
  // [CreateAssetMenuAttribute] Offset: FFFFFFFF
  class BacktraceConfiguration : public ::UnityEngine::ScriptableObject {
    public:
    public:
    // public System.String ServerUrl
    // Size: 0x8
    // Offset: 0x18
    ::StringW ServerUrl;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String Token
    // Size: 0x8
    // Offset: 0x20
    ::StringW Token;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Int32 ReportPerMin
    // Size: 0x4
    // Offset: 0x28
    int ReportPerMin;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean DisableInEditor
    // Size: 0x1
    // Offset: 0x2C
    bool DisableInEditor;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean HandleUnhandledExceptions
    // Size: 0x1
    // Offset: 0x2D
    bool HandleUnhandledExceptions;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean IgnoreSslValidation
    // Size: 0x1
    // Offset: 0x2E
    bool IgnoreSslValidation;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean DestroyOnLoad
    // Size: 0x1
    // Offset: 0x2F
    bool DestroyOnLoad;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Double Sampling
    // Size: 0x8
    // Offset: 0x30
    double Sampling;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // public Backtrace.Unity.Types.ReportFilterType ReportFilterType
    // Size: 0x4
    // Offset: 0x38
    ::Backtrace::Unity::Types::ReportFilterType ReportFilterType;
    // Field size check
    static_assert(sizeof(::Backtrace::Unity::Types::ReportFilterType) == 0x4);
    // public System.Int32 GameObjectDepth
    // Size: 0x4
    // Offset: 0x3C
    int GameObjectDepth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.UInt32 NumberOfLogs
    // Size: 0x4
    // Offset: 0x40
    uint NumberOfLogs;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.Boolean PerformanceStatistics
    // Size: 0x1
    // Offset: 0x44
    bool PerformanceStatistics;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean SendUnhandledGameCrashesOnGameStartup
    // Size: 0x1
    // Offset: 0x45
    bool SendUnhandledGameCrashesOnGameStartup;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean CaptureNativeCrashes
    // Size: 0x1
    // Offset: 0x46
    bool CaptureNativeCrashes;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean HandleANR
    // Size: 0x1
    // Offset: 0x47
    bool HandleANR;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Int32 AnrWatchdogTimeout
    // Size: 0x4
    // Offset: 0x48
    int AnrWatchdogTimeout;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean OomReports
    // Size: 0x1
    // Offset: 0x4C
    bool OomReports;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean ClientSideUnwinding
    // Size: 0x1
    // Offset: 0x4D
    bool ClientSideUnwinding;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: ClientSideUnwinding and: SymbolsUploadToken
    char __padding17[0x2] = {};
    // public System.String SymbolsUploadToken
    // Size: 0x8
    // Offset: 0x50
    ::StringW SymbolsUploadToken;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public Backtrace.Unity.Types.DeduplicationStrategy DeduplicationStrategy
    // Size: 0x4
    // Offset: 0x58
    ::Backtrace::Unity::Types::DeduplicationStrategy DeduplicationStrategy;
    // Field size check
    static_assert(sizeof(::Backtrace::Unity::Types::DeduplicationStrategy) == 0x4);
    // public System.Boolean EnableBreadcrumbsSupport
    // Size: 0x1
    // Offset: 0x5C
    bool EnableBreadcrumbsSupport;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: EnableBreadcrumbsSupport and: BacktraceBreadcrumbsLevel
    char __padding20[0x3] = {};
    // public Backtrace.Unity.Model.Breadcrumbs.BacktraceBreadcrumbType BacktraceBreadcrumbsLevel
    // Size: 0x4
    // Offset: 0x60
    ::Backtrace::Unity::Model::Breadcrumbs::BacktraceBreadcrumbType BacktraceBreadcrumbsLevel;
    // Field size check
    static_assert(sizeof(::Backtrace::Unity::Model::Breadcrumbs::BacktraceBreadcrumbType) == 0x4);
    // public Backtrace.Unity.Model.Breadcrumbs.UnityEngineLogLevel LogLevel
    // Size: 0x4
    // Offset: 0x64
    ::Backtrace::Unity::Model::Breadcrumbs::UnityEngineLogLevel LogLevel;
    // Field size check
    static_assert(sizeof(::Backtrace::Unity::Model::Breadcrumbs::UnityEngineLogLevel) == 0x4);
    // public System.Boolean UseNormalizedExceptionMessage
    // Size: 0x1
    // Offset: 0x68
    bool UseNormalizedExceptionMessage;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: UseNormalizedExceptionMessage and: MinidumpType
    char __padding23[0x3] = {};
    // public Backtrace.Unity.Types.MiniDumpType MinidumpType
    // Size: 0x4
    // Offset: 0x6C
    ::Backtrace::Unity::Types::MiniDumpType MinidumpType;
    // Field size check
    static_assert(sizeof(::Backtrace::Unity::Types::MiniDumpType) == 0x4);
    // public System.Boolean GenerateScreenshotOnException
    // Size: 0x1
    // Offset: 0x70
    bool GenerateScreenshotOnException;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: GenerateScreenshotOnException and: AttachmentPaths
    char __padding25[0x7] = {};
    // public System.String[] AttachmentPaths
    // Size: 0x8
    // Offset: 0x78
    ::ArrayW<::StringW> AttachmentPaths;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // public System.String DatabasePath
    // Size: 0x8
    // Offset: 0x80
    ::StringW DatabasePath;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Boolean EnableMetricsSupport
    // Size: 0x1
    // Offset: 0x88
    bool EnableMetricsSupport;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: EnableMetricsSupport and: TimeIntervalInMin
    char __padding28[0x3] = {};
    // public System.UInt32 TimeIntervalInMin
    // Size: 0x4
    // Offset: 0x8C
    uint TimeIntervalInMin;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.Boolean Enabled
    // Size: 0x1
    // Offset: 0x90
    bool Enabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean AddUnityLogToReport
    // Size: 0x1
    // Offset: 0x91
    bool AddUnityLogToReport;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean AutoSendMode
    // Size: 0x1
    // Offset: 0x92
    bool AutoSendMode;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean CreateDatabase
    // Size: 0x1
    // Offset: 0x93
    bool CreateDatabase;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Int32 MaxRecordCount
    // Size: 0x4
    // Offset: 0x94
    int MaxRecordCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int64 MaxDatabaseSize
    // Size: 0x8
    // Offset: 0x98
    int64_t MaxDatabaseSize;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // public System.Int32 RetryInterval
    // Size: 0x4
    // Offset: 0xA0
    int RetryInterval;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 RetryLimit
    // Size: 0x4
    // Offset: 0xA4
    int RetryLimit;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public Backtrace.Unity.Types.RetryOrder RetryOrder
    // Size: 0x4
    // Offset: 0xA8
    ::Backtrace::Unity::Types::RetryOrder RetryOrder;
    // Field size check
    static_assert(sizeof(::Backtrace::Unity::Types::RetryOrder) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // static field const value: static private Backtrace.Unity.Model.Breadcrumbs.BacktraceBreadcrumbType AllBreadcrumbsTypes
    static constexpr const int AllBreadcrumbsTypes = 127;
    // Get static field: static private Backtrace.Unity.Model.Breadcrumbs.BacktraceBreadcrumbType AllBreadcrumbsTypes
    static ::Backtrace::Unity::Model::Breadcrumbs::BacktraceBreadcrumbType _get_AllBreadcrumbsTypes();
    // Set static field: static private Backtrace.Unity.Model.Breadcrumbs.BacktraceBreadcrumbType AllBreadcrumbsTypes
    static void _set_AllBreadcrumbsTypes(::Backtrace::Unity::Model::Breadcrumbs::BacktraceBreadcrumbType value);
    // static field const value: static private Backtrace.Unity.Model.Breadcrumbs.UnityEngineLogLevel AllLogTypes
    static constexpr const int AllLogTypes = 31;
    // Get static field: static private Backtrace.Unity.Model.Breadcrumbs.UnityEngineLogLevel AllLogTypes
    static ::Backtrace::Unity::Model::Breadcrumbs::UnityEngineLogLevel _get_AllLogTypes();
    // Set static field: static private Backtrace.Unity.Model.Breadcrumbs.UnityEngineLogLevel AllLogTypes
    static void _set_AllLogTypes(::Backtrace::Unity::Model::Breadcrumbs::UnityEngineLogLevel value);
    // static field const value: static public System.Int32 DefaultAnrWatchdogTimeout
    static constexpr const int DefaultAnrWatchdogTimeout = 5000;
    // Get static field: static public System.Int32 DefaultAnrWatchdogTimeout
    static int _get_DefaultAnrWatchdogTimeout();
    // Set static field: static public System.Int32 DefaultAnrWatchdogTimeout
    static void _set_DefaultAnrWatchdogTimeout(int value);
    // static field const value: static public System.Int32 DefaultRetryLimit
    static constexpr const int DefaultRetryLimit = 3;
    // Get static field: static public System.Int32 DefaultRetryLimit
    static int _get_DefaultRetryLimit();
    // Set static field: static public System.Int32 DefaultRetryLimit
    static void _set_DefaultRetryLimit(int value);
    // static field const value: static public System.Int32 DefaultReportPerMin
    static constexpr const int DefaultReportPerMin = 50;
    // Get static field: static public System.Int32 DefaultReportPerMin
    static int _get_DefaultReportPerMin();
    // Set static field: static public System.Int32 DefaultReportPerMin
    static void _set_DefaultReportPerMin(int value);
    // static field const value: static public System.Int32 DefaultGameObjectDepth
    static constexpr const int DefaultGameObjectDepth = -1;
    // Get static field: static public System.Int32 DefaultGameObjectDepth
    static int _get_DefaultGameObjectDepth();
    // Set static field: static public System.Int32 DefaultGameObjectDepth
    static void _set_DefaultGameObjectDepth(int value);
    // static field const value: static public System.Int32 DefaultNumberOfLogs
    static constexpr const int DefaultNumberOfLogs = 10;
    // Get static field: static public System.Int32 DefaultNumberOfLogs
    static int _get_DefaultNumberOfLogs();
    // Set static field: static public System.Int32 DefaultNumberOfLogs
    static void _set_DefaultNumberOfLogs(int value);
    // static field const value: static public System.Int32 DefaultMaxRecordCount
    static constexpr const int DefaultMaxRecordCount = 8;
    // Get static field: static public System.Int32 DefaultMaxRecordCount
    static int _get_DefaultMaxRecordCount();
    // Set static field: static public System.Int32 DefaultMaxRecordCount
    static void _set_DefaultMaxRecordCount(int value);
    // static field const value: static public System.Int32 DefaultMaxDatabaseSize
    static constexpr const int DefaultMaxDatabaseSize = 0;
    // Get static field: static public System.Int32 DefaultMaxDatabaseSize
    static int _get_DefaultMaxDatabaseSize();
    // Set static field: static public System.Int32 DefaultMaxDatabaseSize
    static void _set_DefaultMaxDatabaseSize(int value);
    // static field const value: static public System.Int32 DefaultRetryInterval
    static constexpr const int DefaultRetryInterval = 60;
    // Get static field: static public System.Int32 DefaultRetryInterval
    static int _get_DefaultRetryInterval();
    // Set static field: static public System.Int32 DefaultRetryInterval
    static void _set_DefaultRetryInterval(int value);
    // Get instance field reference: public System.String ServerUrl
    [[deprecated("Use field access instead!")]] ::StringW& dyn_ServerUrl();
    // Get instance field reference: public System.String Token
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Token();
    // Get instance field reference: public System.Int32 ReportPerMin
    [[deprecated("Use field access instead!")]] int& dyn_ReportPerMin();
    // Get instance field reference: public System.Boolean DisableInEditor
    [[deprecated("Use field access instead!")]] bool& dyn_DisableInEditor();
    // Get instance field reference: public System.Boolean HandleUnhandledExceptions
    [[deprecated("Use field access instead!")]] bool& dyn_HandleUnhandledExceptions();
    // Get instance field reference: public System.Boolean IgnoreSslValidation
    [[deprecated("Use field access instead!")]] bool& dyn_IgnoreSslValidation();
    // Get instance field reference: public System.Boolean DestroyOnLoad
    [[deprecated("Use field access instead!")]] bool& dyn_DestroyOnLoad();
    // Get instance field reference: public System.Double Sampling
    [[deprecated("Use field access instead!")]] double& dyn_Sampling();
    // Get instance field reference: public Backtrace.Unity.Types.ReportFilterType ReportFilterType
    [[deprecated("Use field access instead!")]] ::Backtrace::Unity::Types::ReportFilterType& dyn_ReportFilterType();
    // Get instance field reference: public System.Int32 GameObjectDepth
    [[deprecated("Use field access instead!")]] int& dyn_GameObjectDepth();
    // Get instance field reference: public System.UInt32 NumberOfLogs
    [[deprecated("Use field access instead!")]] uint& dyn_NumberOfLogs();
    // Get instance field reference: public System.Boolean PerformanceStatistics
    [[deprecated("Use field access instead!")]] bool& dyn_PerformanceStatistics();
    // Get instance field reference: public System.Boolean SendUnhandledGameCrashesOnGameStartup
    [[deprecated("Use field access instead!")]] bool& dyn_SendUnhandledGameCrashesOnGameStartup();
    // Get instance field reference: public System.Boolean CaptureNativeCrashes
    [[deprecated("Use field access instead!")]] bool& dyn_CaptureNativeCrashes();
    // Get instance field reference: public System.Boolean HandleANR
    [[deprecated("Use field access instead!")]] bool& dyn_HandleANR();
    // Get instance field reference: public System.Int32 AnrWatchdogTimeout
    [[deprecated("Use field access instead!")]] int& dyn_AnrWatchdogTimeout();
    // Get instance field reference: public System.Boolean OomReports
    [[deprecated("Use field access instead!")]] bool& dyn_OomReports();
    // Get instance field reference: public System.Boolean ClientSideUnwinding
    [[deprecated("Use field access instead!")]] bool& dyn_ClientSideUnwinding();
    // Get instance field reference: public System.String SymbolsUploadToken
    [[deprecated("Use field access instead!")]] ::StringW& dyn_SymbolsUploadToken();
    // Get instance field reference: public Backtrace.Unity.Types.DeduplicationStrategy DeduplicationStrategy
    [[deprecated("Use field access instead!")]] ::Backtrace::Unity::Types::DeduplicationStrategy& dyn_DeduplicationStrategy();
    // Get instance field reference: public System.Boolean EnableBreadcrumbsSupport
    [[deprecated("Use field access instead!")]] bool& dyn_EnableBreadcrumbsSupport();
    // Get instance field reference: public Backtrace.Unity.Model.Breadcrumbs.BacktraceBreadcrumbType BacktraceBreadcrumbsLevel
    [[deprecated("Use field access instead!")]] ::Backtrace::Unity::Model::Breadcrumbs::BacktraceBreadcrumbType& dyn_BacktraceBreadcrumbsLevel();
    // Get instance field reference: public Backtrace.Unity.Model.Breadcrumbs.UnityEngineLogLevel LogLevel
    [[deprecated("Use field access instead!")]] ::Backtrace::Unity::Model::Breadcrumbs::UnityEngineLogLevel& dyn_LogLevel();
    // Get instance field reference: public System.Boolean UseNormalizedExceptionMessage
    [[deprecated("Use field access instead!")]] bool& dyn_UseNormalizedExceptionMessage();
    // Get instance field reference: public Backtrace.Unity.Types.MiniDumpType MinidumpType
    [[deprecated("Use field access instead!")]] ::Backtrace::Unity::Types::MiniDumpType& dyn_MinidumpType();
    // Get instance field reference: public System.Boolean GenerateScreenshotOnException
    [[deprecated("Use field access instead!")]] bool& dyn_GenerateScreenshotOnException();
    // Get instance field reference: public System.String[] AttachmentPaths
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn_AttachmentPaths();
    // Get instance field reference: public System.String DatabasePath
    [[deprecated("Use field access instead!")]] ::StringW& dyn_DatabasePath();
    // Get instance field reference: public System.Boolean EnableMetricsSupport
    [[deprecated("Use field access instead!")]] bool& dyn_EnableMetricsSupport();
    // Get instance field reference: public System.UInt32 TimeIntervalInMin
    [[deprecated("Use field access instead!")]] uint& dyn_TimeIntervalInMin();
    // Get instance field reference: public System.Boolean Enabled
    [[deprecated("Use field access instead!")]] bool& dyn_Enabled();
    // Get instance field reference: public System.Boolean AddUnityLogToReport
    [[deprecated("Use field access instead!")]] bool& dyn_AddUnityLogToReport();
    // Get instance field reference: public System.Boolean AutoSendMode
    [[deprecated("Use field access instead!")]] bool& dyn_AutoSendMode();
    // Get instance field reference: public System.Boolean CreateDatabase
    [[deprecated("Use field access instead!")]] bool& dyn_CreateDatabase();
    // Get instance field reference: public System.Int32 MaxRecordCount
    [[deprecated("Use field access instead!")]] int& dyn_MaxRecordCount();
    // Get instance field reference: public System.Int64 MaxDatabaseSize
    [[deprecated("Use field access instead!")]] int64_t& dyn_MaxDatabaseSize();
    // Get instance field reference: public System.Int32 RetryInterval
    [[deprecated("Use field access instead!")]] int& dyn_RetryInterval();
    // Get instance field reference: public System.Int32 RetryLimit
    [[deprecated("Use field access instead!")]] int& dyn_RetryLimit();
    // Get instance field reference: public Backtrace.Unity.Types.RetryOrder RetryOrder
    [[deprecated("Use field access instead!")]] ::Backtrace::Unity::Types::RetryOrder& dyn_RetryOrder();
    // public System.Collections.Generic.HashSet`1<System.String> GetAttachmentPaths()
    // Offset: 0x2A4FF64
    ::System::Collections::Generic::HashSet_1<::StringW>* GetAttachmentPaths();
    // public System.String GetUniverseName()
    // Offset: 0x2A4E008
    ::StringW GetUniverseName();
    // public System.String GetToken()
    // Offset: 0x2A4E194
    ::StringW GetToken();
    // public System.String GetFullDatabasePath()
    // Offset: 0x2A546FC
    ::StringW GetFullDatabasePath();
    // public System.String get_CrashpadDatabasePath()
    // Offset: 0x2A60A7C
    ::StringW get_CrashpadDatabasePath();
    // public System.String GetValidServerUrl()
    // Offset: 0x2A50068
    ::StringW GetValidServerUrl();
    // static public System.String UpdateServerUrl(System.String value)
    // Offset: 0x2A61960
    static ::StringW UpdateServerUrl(::StringW value);
    // static public System.Boolean ValidateServerUrl(System.String value)
    // Offset: 0x2A61B18
    static bool ValidateServerUrl(::StringW value);
    // public System.Boolean IsValid()
    // Offset: 0x2A4FCAC
    bool IsValid();
    // public System.UInt32 GetEventAggregationIntervalTimerInMs()
    // Offset: 0x2A4E264
    uint GetEventAggregationIntervalTimerInMs();
    // public Backtrace.Unity.Model.BacktraceCredentials ToCredentials()
    // Offset: 0x2A552AC
    ::Backtrace::Unity::Model::BacktraceCredentials* ToCredentials();
    // public System.Void .ctor()
    // Offset: 0x2A61B84
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BacktraceConfiguration* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Backtrace::Unity::Model::BacktraceConfiguration::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BacktraceConfiguration*, creationType>()));
    }
  }; // Backtrace.Unity.Model.BacktraceConfiguration
  #pragma pack(pop)
  static check_size<sizeof(BacktraceConfiguration), 168 + sizeof(::Backtrace::Unity::Types::RetryOrder)> __Backtrace_Unity_Model_BacktraceConfigurationSizeCheck;
  static_assert(sizeof(BacktraceConfiguration) == 0xAC);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceConfiguration::GetAttachmentPaths
// Il2CppName: GetAttachmentPaths
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::HashSet_1<::StringW>* (Backtrace::Unity::Model::BacktraceConfiguration::*)()>(&Backtrace::Unity::Model::BacktraceConfiguration::GetAttachmentPaths)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceConfiguration*), "GetAttachmentPaths", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceConfiguration::GetUniverseName
// Il2CppName: GetUniverseName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Backtrace::Unity::Model::BacktraceConfiguration::*)()>(&Backtrace::Unity::Model::BacktraceConfiguration::GetUniverseName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceConfiguration*), "GetUniverseName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceConfiguration::GetToken
// Il2CppName: GetToken
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Backtrace::Unity::Model::BacktraceConfiguration::*)()>(&Backtrace::Unity::Model::BacktraceConfiguration::GetToken)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceConfiguration*), "GetToken", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceConfiguration::GetFullDatabasePath
// Il2CppName: GetFullDatabasePath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Backtrace::Unity::Model::BacktraceConfiguration::*)()>(&Backtrace::Unity::Model::BacktraceConfiguration::GetFullDatabasePath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceConfiguration*), "GetFullDatabasePath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceConfiguration::get_CrashpadDatabasePath
// Il2CppName: get_CrashpadDatabasePath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Backtrace::Unity::Model::BacktraceConfiguration::*)()>(&Backtrace::Unity::Model::BacktraceConfiguration::get_CrashpadDatabasePath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceConfiguration*), "get_CrashpadDatabasePath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceConfiguration::GetValidServerUrl
// Il2CppName: GetValidServerUrl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Backtrace::Unity::Model::BacktraceConfiguration::*)()>(&Backtrace::Unity::Model::BacktraceConfiguration::GetValidServerUrl)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceConfiguration*), "GetValidServerUrl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceConfiguration::UpdateServerUrl
// Il2CppName: UpdateServerUrl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW)>(&Backtrace::Unity::Model::BacktraceConfiguration::UpdateServerUrl)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceConfiguration*), "UpdateServerUrl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceConfiguration::ValidateServerUrl
// Il2CppName: ValidateServerUrl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW)>(&Backtrace::Unity::Model::BacktraceConfiguration::ValidateServerUrl)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceConfiguration*), "ValidateServerUrl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceConfiguration::IsValid
// Il2CppName: IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Backtrace::Unity::Model::BacktraceConfiguration::*)()>(&Backtrace::Unity::Model::BacktraceConfiguration::IsValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceConfiguration*), "IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceConfiguration::GetEventAggregationIntervalTimerInMs
// Il2CppName: GetEventAggregationIntervalTimerInMs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (Backtrace::Unity::Model::BacktraceConfiguration::*)()>(&Backtrace::Unity::Model::BacktraceConfiguration::GetEventAggregationIntervalTimerInMs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceConfiguration*), "GetEventAggregationIntervalTimerInMs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceConfiguration::ToCredentials
// Il2CppName: ToCredentials
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Backtrace::Unity::Model::BacktraceCredentials* (Backtrace::Unity::Model::BacktraceConfiguration::*)()>(&Backtrace::Unity::Model::BacktraceConfiguration::ToCredentials)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceConfiguration*), "ToCredentials", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceConfiguration::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
