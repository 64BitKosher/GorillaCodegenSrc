// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Forward declaring namespace: Backtrace::Unity::Model
namespace Backtrace::Unity::Model {
  // Forward declaring type: BacktraceStackFrame
  class BacktraceStackFrame;
}
// Forward declaring namespace: Backtrace::Unity::Json
namespace Backtrace::Unity::Json {
  // Forward declaring type: BacktraceJObject
  class BacktraceJObject;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: Thread
  class Thread;
}
// Completed forward declares
// Type namespace: Backtrace.Unity.Model.JsonData
namespace Backtrace::Unity::Model::JsonData {
  // Forward declaring type: ThreadInformation
  class ThreadInformation;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Backtrace::Unity::Model::JsonData::ThreadInformation);
DEFINE_IL2CPP_ARG_TYPE(::Backtrace::Unity::Model::JsonData::ThreadInformation*, "Backtrace.Unity.Model.JsonData", "ThreadInformation");
// Type namespace: Backtrace.Unity.Model.JsonData
namespace Backtrace::Unity::Model::JsonData {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Backtrace.Unity.Model.JsonData.ThreadInformation
  // [TokenAttribute] Offset: FFFFFFFF
  class ThreadInformation : public ::Il2CppObject {
    public:
    public:
    // private System.String <Name>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::StringW Name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean <Fault>k__BackingField
    // Size: 0x1
    // Offset: 0x18
    bool Fault;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: Fault and: Stack
    char __padding1[0x7] = {};
    // System.Collections.Generic.IEnumerable`1<Backtrace.Unity.Model.BacktraceStackFrame> Stack
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::IEnumerable_1<::Backtrace::Unity::Model::BacktraceStackFrame*>* Stack;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::IEnumerable_1<::Backtrace::Unity::Model::BacktraceStackFrame*>*) == 0x8);
    public:
    // Get instance field reference: private System.String <Name>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$Name$k__BackingField();
    // Get instance field reference: private System.Boolean <Fault>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$Fault$k__BackingField();
    // Get instance field reference: System.Collections.Generic.IEnumerable`1<Backtrace.Unity.Model.BacktraceStackFrame> Stack
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::IEnumerable_1<::Backtrace::Unity::Model::BacktraceStackFrame*>*& dyn_Stack();
    // public System.String get_Name()
    // Offset: 0x2A6CD08
    ::StringW get_Name();
    // private System.Void set_Name(System.String value)
    // Offset: 0x2A6CD10
    void set_Name(::StringW value);
    // public System.Boolean get_Fault()
    // Offset: 0x2A6CD18
    bool get_Fault();
    // private System.Void set_Fault(System.Boolean value)
    // Offset: 0x2A6CD20
    void set_Fault(bool value);
    // public Backtrace.Unity.Json.BacktraceJObject ToJson()
    // Offset: 0x2A6CA98
    ::Backtrace::Unity::Json::BacktraceJObject* ToJson();
    // public System.Void .ctor(System.String threadName, System.Boolean fault, System.Collections.Generic.IEnumerable`1<Backtrace.Unity.Model.BacktraceStackFrame> stack)
    // Offset: 0x2A6CDE8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ThreadInformation* New_ctor(::StringW threadName, bool fault, ::System::Collections::Generic::IEnumerable_1<::Backtrace::Unity::Model::BacktraceStackFrame*>* stack) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Backtrace::Unity::Model::JsonData::ThreadInformation::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ThreadInformation*, creationType>(threadName, fault, stack)));
    }
    // public System.Void .ctor(System.Threading.Thread thread, System.Collections.Generic.IEnumerable`1<Backtrace.Unity.Model.BacktraceStackFrame> stack, System.Boolean faultingThread)
    // Offset: 0x2A6C8AC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ThreadInformation* New_ctor(::System::Threading::Thread* thread, ::System::Collections::Generic::IEnumerable_1<::Backtrace::Unity::Model::BacktraceStackFrame*>* stack, bool faultingThread) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Backtrace::Unity::Model::JsonData::ThreadInformation::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ThreadInformation*, creationType>(thread, stack, faultingThread)));
    }
    // private System.Void .ctor()
    // Offset: 0x2A6CED4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ThreadInformation* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Backtrace::Unity::Model::JsonData::ThreadInformation::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ThreadInformation*, creationType>()));
    }
  }; // Backtrace.Unity.Model.JsonData.ThreadInformation
  #pragma pack(pop)
  static check_size<sizeof(ThreadInformation), 32 + sizeof(::System::Collections::Generic::IEnumerable_1<::Backtrace::Unity::Model::BacktraceStackFrame*>*)> __Backtrace_Unity_Model_JsonData_ThreadInformationSizeCheck;
  static_assert(sizeof(ThreadInformation) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Backtrace::Unity::Model::JsonData::ThreadInformation::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Backtrace::Unity::Model::JsonData::ThreadInformation::*)()>(&Backtrace::Unity::Model::JsonData::ThreadInformation::get_Name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::JsonData::ThreadInformation*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::JsonData::ThreadInformation::set_Name
// Il2CppName: set_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Model::JsonData::ThreadInformation::*)(::StringW)>(&Backtrace::Unity::Model::JsonData::ThreadInformation::set_Name)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::JsonData::ThreadInformation*), "set_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::JsonData::ThreadInformation::get_Fault
// Il2CppName: get_Fault
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Backtrace::Unity::Model::JsonData::ThreadInformation::*)()>(&Backtrace::Unity::Model::JsonData::ThreadInformation::get_Fault)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::JsonData::ThreadInformation*), "get_Fault", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::JsonData::ThreadInformation::set_Fault
// Il2CppName: set_Fault
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Model::JsonData::ThreadInformation::*)(bool)>(&Backtrace::Unity::Model::JsonData::ThreadInformation::set_Fault)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::JsonData::ThreadInformation*), "set_Fault", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::JsonData::ThreadInformation::ToJson
// Il2CppName: ToJson
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Backtrace::Unity::Json::BacktraceJObject* (Backtrace::Unity::Model::JsonData::ThreadInformation::*)()>(&Backtrace::Unity::Model::JsonData::ThreadInformation::ToJson)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::JsonData::ThreadInformation*), "ToJson", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::JsonData::ThreadInformation::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Backtrace::Unity::Model::JsonData::ThreadInformation::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Backtrace::Unity::Model::JsonData::ThreadInformation::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
