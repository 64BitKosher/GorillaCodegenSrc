// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: Backtrace::Unity::Model
namespace Backtrace::Unity::Model {
  // Forward declaring type: BacktraceStackFrame
  class BacktraceStackFrame;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Exception
  class Exception;
}
// Forward declaring namespace: System::Diagnostics
namespace System::Diagnostics {
  // Forward declaring type: StackFrame
  class StackFrame;
}
// Completed forward declares
// Type namespace: Backtrace.Unity.Model
namespace Backtrace::Unity::Model {
  // Forward declaring type: BacktraceStackTrace
  class BacktraceStackTrace;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Backtrace::Unity::Model::BacktraceStackTrace);
DEFINE_IL2CPP_ARG_TYPE(::Backtrace::Unity::Model::BacktraceStackTrace*, "Backtrace.Unity.Model", "BacktraceStackTrace");
// Type namespace: Backtrace.Unity.Model
namespace Backtrace::Unity::Model {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Backtrace.Unity.Model.BacktraceStackTrace
  // [TokenAttribute] Offset: FFFFFFFF
  class BacktraceStackTrace : public ::Il2CppObject {
    public:
    public:
    // public readonly System.Collections.Generic.List`1<Backtrace.Unity.Model.BacktraceStackFrame> StackFrames
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::List_1<::Backtrace::Unity::Model::BacktraceStackFrame*>* StackFrames;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Backtrace::Unity::Model::BacktraceStackFrame*>*) == 0x8);
    // private readonly System.Exception _exception
    // Size: 0x8
    // Offset: 0x18
    ::System::Exception* exception;
    // Field size check
    static_assert(sizeof(::System::Exception*) == 0x8);
    public:
    // Get instance field reference: public readonly System.Collections.Generic.List`1<Backtrace.Unity.Model.BacktraceStackFrame> StackFrames
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Backtrace::Unity::Model::BacktraceStackFrame*>*& dyn_StackFrames();
    // Get instance field reference: private readonly System.Exception _exception
    [[deprecated("Use field access instead!")]] ::System::Exception*& dyn__exception();
    // public System.Void .ctor(System.Exception exception)
    // Offset: 0x2A63C7C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BacktraceStackTrace* New_ctor(::System::Exception* exception) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Backtrace::Unity::Model::BacktraceStackTrace::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BacktraceStackTrace*, creationType>(exception)));
    }
    // private System.Void Initialize()
    // Offset: 0x2A64CFC
    void Initialize();
    // private System.Void SetStacktraceInformation(System.Diagnostics.StackFrame[] frames, System.Boolean generatedByException)
    // Offset: 0x2A64E7C
    void SetStacktraceInformation(::ArrayW<::System::Diagnostics::StackFrame*> frames, bool generatedByException);
  }; // Backtrace.Unity.Model.BacktraceStackTrace
  #pragma pack(pop)
  static check_size<sizeof(BacktraceStackTrace), 24 + sizeof(::System::Exception*)> __Backtrace_Unity_Model_BacktraceStackTraceSizeCheck;
  static_assert(sizeof(BacktraceStackTrace) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceStackTrace::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceStackTrace::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Model::BacktraceStackTrace::*)()>(&Backtrace::Unity::Model::BacktraceStackTrace::Initialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceStackTrace*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceStackTrace::SetStacktraceInformation
// Il2CppName: SetStacktraceInformation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Model::BacktraceStackTrace::*)(::ArrayW<::System::Diagnostics::StackFrame*>, bool)>(&Backtrace::Unity::Model::BacktraceStackTrace::SetStacktraceInformation)> {
  static const MethodInfo* get() {
    static auto* frames = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System.Diagnostics", "StackFrame"), 1)->byval_arg;
    static auto* generatedByException = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceStackTrace*), "SetStacktraceInformation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{frames, generatedByException});
  }
};
