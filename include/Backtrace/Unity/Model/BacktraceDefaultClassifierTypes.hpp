// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Completed forward declares
// Type namespace: Backtrace.Unity.Model
namespace Backtrace::Unity::Model {
  // Forward declaring type: BacktraceDefaultClassifierTypes
  class BacktraceDefaultClassifierTypes;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Backtrace::Unity::Model::BacktraceDefaultClassifierTypes);
DEFINE_IL2CPP_ARG_TYPE(::Backtrace::Unity::Model::BacktraceDefaultClassifierTypes*, "Backtrace.Unity.Model", "BacktraceDefaultClassifierTypes");
// Type namespace: Backtrace.Unity.Model
namespace Backtrace::Unity::Model {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Backtrace.Unity.Model.BacktraceDefaultClassifierTypes
  // [TokenAttribute] Offset: FFFFFFFF
  class BacktraceDefaultClassifierTypes : public ::Il2CppObject {
    public:
    // static field const value: static System.String MessageType
    static constexpr const char* MessageType = "Message";
    // Get static field: static System.String MessageType
    static ::StringW _get_MessageType();
    // Set static field: static System.String MessageType
    static void _set_MessageType(::StringW value);
    // static field const value: static System.String ExceptionType
    static constexpr const char* ExceptionType = "Exception";
    // Get static field: static System.String ExceptionType
    static ::StringW _get_ExceptionType();
    // Set static field: static System.String ExceptionType
    static void _set_ExceptionType(::StringW value);
    // static field const value: static System.String UnhandledExceptionType
    static constexpr const char* UnhandledExceptionType = "Unhandled exception";
    // Get static field: static System.String UnhandledExceptionType
    static ::StringW _get_UnhandledExceptionType();
    // Set static field: static System.String UnhandledExceptionType
    static void _set_UnhandledExceptionType(::StringW value);
    // static field const value: static System.String OOMExceptionType
    static constexpr const char* OOMExceptionType = "OOMException";
    // Get static field: static System.String OOMExceptionType
    static ::StringW _get_OOMExceptionType();
    // Set static field: static System.String OOMExceptionType
    static void _set_OOMExceptionType(::StringW value);
    // static field const value: static System.String AnrExceptionType
    static constexpr const char* AnrExceptionType = "Hang";
    // Get static field: static System.String AnrExceptionType
    static ::StringW _get_AnrExceptionType();
    // Set static field: static System.String AnrExceptionType
    static void _set_AnrExceptionType(::StringW value);
    // public System.Void .ctor()
    // Offset: 0x2A62788
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BacktraceDefaultClassifierTypes* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Backtrace::Unity::Model::BacktraceDefaultClassifierTypes::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BacktraceDefaultClassifierTypes*, creationType>()));
    }
  }; // Backtrace.Unity.Model.BacktraceDefaultClassifierTypes
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceDefaultClassifierTypes::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
