// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Uri
  class Uri;
}
// Completed forward declares
// Type namespace: Backtrace.Unity.Model
namespace Backtrace::Unity::Model {
  // Forward declaring type: BacktraceCredentials
  class BacktraceCredentials;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Backtrace::Unity::Model::BacktraceCredentials);
DEFINE_IL2CPP_ARG_TYPE(::Backtrace::Unity::Model::BacktraceCredentials*, "Backtrace.Unity.Model", "BacktraceCredentials");
// Type namespace: Backtrace.Unity.Model
namespace Backtrace::Unity::Model {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: Backtrace.Unity.Model.BacktraceCredentials
  // [TokenAttribute] Offset: FFFFFFFF
  class BacktraceCredentials : public ::Il2CppObject {
    public:
    public:
    // private System.Uri <BacktraceHostUri>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::System::Uri* BacktraceHostUri;
    // Field size check
    static_assert(sizeof(::System::Uri*) == 0x8);
    public:
    // Creating conversion operator: operator ::System::Uri*
    constexpr operator ::System::Uri*() const noexcept {
      return BacktraceHostUri;
    }
    // Get instance field reference: private System.Uri <BacktraceHostUri>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Uri*& dyn_$BacktraceHostUri$k__BackingField();
    // public System.Uri get_BacktraceHostUri()
    // Offset: 0x2A61C8C
    ::System::Uri* get_BacktraceHostUri();
    // private System.Void set_BacktraceHostUri(System.Uri value)
    // Offset: 0x2A61C94
    void set_BacktraceHostUri(::System::Uri* value);
    // public System.Uri GetSubmissionUrl()
    // Offset: 0x2A581B4
    ::System::Uri* GetSubmissionUrl();
    // public System.Uri GetPlCrashReporterSubmissionUrl()
    // Offset: 0x2A61C9C
    ::System::Uri* GetPlCrashReporterSubmissionUrl();
    // public System.Uri GetMinidumpSubmissionUrl()
    // Offset: 0x2A58280
    ::System::Uri* GetMinidumpSubmissionUrl();
    // public System.Uri GetSymbolsSubmissionUrl(System.String token)
    // Offset: 0x2A61DCC
    ::System::Uri* GetSymbolsSubmissionUrl(::StringW token);
    // public System.Void .ctor(System.String backtraceSubmitUrl)
    // Offset: 0x2A50070
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BacktraceCredentials* New_ctor(::StringW backtraceSubmitUrl) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Backtrace::Unity::Model::BacktraceCredentials::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BacktraceCredentials*, creationType>(backtraceSubmitUrl)));
    }
    // public System.Void .ctor(System.Uri backtraceSubmitUrl)
    // Offset: 0x2A6200C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BacktraceCredentials* New_ctor(::System::Uri* backtraceSubmitUrl) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Backtrace::Unity::Model::BacktraceCredentials::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BacktraceCredentials*, creationType>(backtraceSubmitUrl)));
    }
    // System.Boolean IsValid(System.Uri uri, System.Byte[] token)
    // Offset: 0x2A6203C
    bool IsValid(::System::Uri* uri, ::ArrayW<uint8_t> token);
  }; // Backtrace.Unity.Model.BacktraceCredentials
  #pragma pack(pop)
  static check_size<sizeof(BacktraceCredentials), 16 + sizeof(::System::Uri*)> __Backtrace_Unity_Model_BacktraceCredentialsSizeCheck;
  static_assert(sizeof(BacktraceCredentials) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceCredentials::get_BacktraceHostUri
// Il2CppName: get_BacktraceHostUri
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Uri* (Backtrace::Unity::Model::BacktraceCredentials::*)()>(&Backtrace::Unity::Model::BacktraceCredentials::get_BacktraceHostUri)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceCredentials*), "get_BacktraceHostUri", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceCredentials::set_BacktraceHostUri
// Il2CppName: set_BacktraceHostUri
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Model::BacktraceCredentials::*)(::System::Uri*)>(&Backtrace::Unity::Model::BacktraceCredentials::set_BacktraceHostUri)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Uri")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceCredentials*), "set_BacktraceHostUri", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceCredentials::GetSubmissionUrl
// Il2CppName: GetSubmissionUrl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Uri* (Backtrace::Unity::Model::BacktraceCredentials::*)()>(&Backtrace::Unity::Model::BacktraceCredentials::GetSubmissionUrl)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceCredentials*), "GetSubmissionUrl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceCredentials::GetPlCrashReporterSubmissionUrl
// Il2CppName: GetPlCrashReporterSubmissionUrl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Uri* (Backtrace::Unity::Model::BacktraceCredentials::*)()>(&Backtrace::Unity::Model::BacktraceCredentials::GetPlCrashReporterSubmissionUrl)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceCredentials*), "GetPlCrashReporterSubmissionUrl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceCredentials::GetMinidumpSubmissionUrl
// Il2CppName: GetMinidumpSubmissionUrl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Uri* (Backtrace::Unity::Model::BacktraceCredentials::*)()>(&Backtrace::Unity::Model::BacktraceCredentials::GetMinidumpSubmissionUrl)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceCredentials*), "GetMinidumpSubmissionUrl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceCredentials::GetSymbolsSubmissionUrl
// Il2CppName: GetSymbolsSubmissionUrl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Uri* (Backtrace::Unity::Model::BacktraceCredentials::*)(::StringW)>(&Backtrace::Unity::Model::BacktraceCredentials::GetSymbolsSubmissionUrl)> {
  static const MethodInfo* get() {
    static auto* token = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceCredentials*), "GetSymbolsSubmissionUrl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{token});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceCredentials::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceCredentials::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceCredentials::IsValid
// Il2CppName: IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Backtrace::Unity::Model::BacktraceCredentials::*)(::System::Uri*, ::ArrayW<uint8_t>)>(&Backtrace::Unity::Model::BacktraceCredentials::IsValid)> {
  static const MethodInfo* get() {
    static auto* uri = &::il2cpp_utils::GetClassFromName("System", "Uri")->byval_arg;
    static auto* token = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceCredentials*), "IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uri, token});
  }
};
