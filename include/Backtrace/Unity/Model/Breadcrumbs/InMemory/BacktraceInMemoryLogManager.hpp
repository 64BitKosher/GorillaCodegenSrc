// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Backtrace.Unity.Model.Breadcrumbs.IBacktraceLogManager
#include "Backtrace/Unity/Model/Breadcrumbs/IBacktraceLogManager.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Queue`1<T>
  template<typename T>
  class Queue_1;
  // Forward declaring type: IDictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class IDictionary_2;
}
// Forward declaring namespace: Backtrace::Unity::Model::Breadcrumbs::InMemory
namespace Backtrace::Unity::Model::Breadcrumbs::InMemory {
  // Forward declaring type: InMemoryBreadcrumb
  class InMemoryBreadcrumb;
}
// Forward declaring namespace: Backtrace::Unity::Model::Breadcrumbs
namespace Backtrace::Unity::Model::Breadcrumbs {
  // Forward declaring type: BreadcrumbLevel
  struct BreadcrumbLevel;
  // Forward declaring type: UnityEngineLogLevel
  struct UnityEngineLogLevel;
}
// Completed forward declares
// Type namespace: Backtrace.Unity.Model.Breadcrumbs.InMemory
namespace Backtrace::Unity::Model::Breadcrumbs::InMemory {
  // Forward declaring type: BacktraceInMemoryLogManager
  class BacktraceInMemoryLogManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Backtrace::Unity::Model::Breadcrumbs::InMemory::BacktraceInMemoryLogManager);
DEFINE_IL2CPP_ARG_TYPE(::Backtrace::Unity::Model::Breadcrumbs::InMemory::BacktraceInMemoryLogManager*, "Backtrace.Unity.Model.Breadcrumbs.InMemory", "BacktraceInMemoryLogManager");
// Type namespace: Backtrace.Unity.Model.Breadcrumbs.InMemory
namespace Backtrace::Unity::Model::Breadcrumbs::InMemory {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: Backtrace.Unity.Model.Breadcrumbs.InMemory.BacktraceInMemoryLogManager
  // [TokenAttribute] Offset: FFFFFFFF
  class BacktraceInMemoryLogManager : public ::Il2CppObject/*, public ::Backtrace::Unity::Model::Breadcrumbs::IBacktraceLogManager*/ {
    public:
    public:
    // private System.Int32 <MaximumNumberOfBreadcrumbs>k__BackingField
    // Size: 0x4
    // Offset: 0x10
    int MaximumNumberOfBreadcrumbs;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: MaximumNumberOfBreadcrumbs and: lockObject
    char __padding0[0x4] = {};
    // private System.Object _lockObject
    // Size: 0x8
    // Offset: 0x18
    ::Il2CppObject* lockObject;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // readonly System.Collections.Generic.Queue`1<Backtrace.Unity.Model.Breadcrumbs.InMemory.InMemoryBreadcrumb> Breadcrumbs
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::Queue_1<::Backtrace::Unity::Model::Breadcrumbs::InMemory::InMemoryBreadcrumb*>* Breadcrumbs;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Queue_1<::Backtrace::Unity::Model::Breadcrumbs::InMemory::InMemoryBreadcrumb*>*) == 0x8);
    // private System.Double _breadcrumbId
    // Size: 0x8
    // Offset: 0x28
    double breadcrumbId;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Backtrace::Unity::Model::Breadcrumbs::IBacktraceLogManager
    operator ::Backtrace::Unity::Model::Breadcrumbs::IBacktraceLogManager() noexcept {
      return *reinterpret_cast<::Backtrace::Unity::Model::Breadcrumbs::IBacktraceLogManager*>(this);
    }
    // static field const value: static public System.Int32 DefaultMaximumNumberOfInMemoryBreadcrumbs
    static constexpr const int DefaultMaximumNumberOfInMemoryBreadcrumbs = 100;
    // Get static field: static public System.Int32 DefaultMaximumNumberOfInMemoryBreadcrumbs
    static int _get_DefaultMaximumNumberOfInMemoryBreadcrumbs();
    // Set static field: static public System.Int32 DefaultMaximumNumberOfInMemoryBreadcrumbs
    static void _set_DefaultMaximumNumberOfInMemoryBreadcrumbs(int value);
    // Get instance field reference: private System.Int32 <MaximumNumberOfBreadcrumbs>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$MaximumNumberOfBreadcrumbs$k__BackingField();
    // Get instance field reference: private System.Object _lockObject
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn__lockObject();
    // Get instance field reference: readonly System.Collections.Generic.Queue`1<Backtrace.Unity.Model.Breadcrumbs.InMemory.InMemoryBreadcrumb> Breadcrumbs
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Queue_1<::Backtrace::Unity::Model::Breadcrumbs::InMemory::InMemoryBreadcrumb*>*& dyn_Breadcrumbs();
    // Get instance field reference: private System.Double _breadcrumbId
    [[deprecated("Use field access instead!")]] double& dyn__breadcrumbId();
    // public System.Int32 get_MaximumNumberOfBreadcrumbs()
    // Offset: 0x2A719B8
    int get_MaximumNumberOfBreadcrumbs();
    // public System.Void set_MaximumNumberOfBreadcrumbs(System.Int32 value)
    // Offset: 0x2A719C0
    void set_MaximumNumberOfBreadcrumbs(int value);
    // public System.Void .ctor()
    // Offset: 0x2A719C8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BacktraceInMemoryLogManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Backtrace::Unity::Model::Breadcrumbs::InMemory::BacktraceInMemoryLogManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BacktraceInMemoryLogManager*, creationType>()));
    }
    // public System.String get_BreadcrumbsFilePath()
    // Offset: 0x2A71AB8
    ::StringW get_BreadcrumbsFilePath();
    // public System.Boolean Add(System.String message, Backtrace.Unity.Model.Breadcrumbs.BreadcrumbLevel type, Backtrace.Unity.Model.Breadcrumbs.UnityEngineLogLevel level, System.Collections.Generic.IDictionary`2<System.String,System.String> attributes)
    // Offset: 0x2A71B00
    bool Add(::StringW message, ::Backtrace::Unity::Model::Breadcrumbs::BreadcrumbLevel type, ::Backtrace::Unity::Model::Breadcrumbs::UnityEngineLogLevel level, ::System::Collections::Generic::IDictionary_2<::StringW, ::StringW>* attributes);
    // public System.Boolean Clear()
    // Offset: 0x2A71FFC
    bool Clear();
    // public System.Boolean Enable()
    // Offset: 0x2A72054
    bool Enable();
    // public System.Int32 Length()
    // Offset: 0x2A7205C
    int Length();
    // public System.Double BreadcrumbId()
    // Offset: 0x2A720A4
    double BreadcrumbId();
  }; // Backtrace.Unity.Model.Breadcrumbs.InMemory.BacktraceInMemoryLogManager
  #pragma pack(pop)
  static check_size<sizeof(BacktraceInMemoryLogManager), 40 + sizeof(double)> __Backtrace_Unity_Model_Breadcrumbs_InMemory_BacktraceInMemoryLogManagerSizeCheck;
  static_assert(sizeof(BacktraceInMemoryLogManager) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Backtrace::Unity::Model::Breadcrumbs::InMemory::BacktraceInMemoryLogManager::get_MaximumNumberOfBreadcrumbs
// Il2CppName: get_MaximumNumberOfBreadcrumbs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Backtrace::Unity::Model::Breadcrumbs::InMemory::BacktraceInMemoryLogManager::*)()>(&Backtrace::Unity::Model::Breadcrumbs::InMemory::BacktraceInMemoryLogManager::get_MaximumNumberOfBreadcrumbs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::Breadcrumbs::InMemory::BacktraceInMemoryLogManager*), "get_MaximumNumberOfBreadcrumbs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::Breadcrumbs::InMemory::BacktraceInMemoryLogManager::set_MaximumNumberOfBreadcrumbs
// Il2CppName: set_MaximumNumberOfBreadcrumbs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Model::Breadcrumbs::InMemory::BacktraceInMemoryLogManager::*)(int)>(&Backtrace::Unity::Model::Breadcrumbs::InMemory::BacktraceInMemoryLogManager::set_MaximumNumberOfBreadcrumbs)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::Breadcrumbs::InMemory::BacktraceInMemoryLogManager*), "set_MaximumNumberOfBreadcrumbs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::Breadcrumbs::InMemory::BacktraceInMemoryLogManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Backtrace::Unity::Model::Breadcrumbs::InMemory::BacktraceInMemoryLogManager::get_BreadcrumbsFilePath
// Il2CppName: get_BreadcrumbsFilePath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Backtrace::Unity::Model::Breadcrumbs::InMemory::BacktraceInMemoryLogManager::*)()>(&Backtrace::Unity::Model::Breadcrumbs::InMemory::BacktraceInMemoryLogManager::get_BreadcrumbsFilePath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::Breadcrumbs::InMemory::BacktraceInMemoryLogManager*), "get_BreadcrumbsFilePath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::Breadcrumbs::InMemory::BacktraceInMemoryLogManager::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Backtrace::Unity::Model::Breadcrumbs::InMemory::BacktraceInMemoryLogManager::*)(::StringW, ::Backtrace::Unity::Model::Breadcrumbs::BreadcrumbLevel, ::Backtrace::Unity::Model::Breadcrumbs::UnityEngineLogLevel, ::System::Collections::Generic::IDictionary_2<::StringW, ::StringW>*)>(&Backtrace::Unity::Model::Breadcrumbs::InMemory::BacktraceInMemoryLogManager::Add)> {
  static const MethodInfo* get() {
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("Backtrace.Unity.Model.Breadcrumbs", "BreadcrumbLevel")->byval_arg;
    static auto* level = &::il2cpp_utils::GetClassFromName("Backtrace.Unity.Model.Breadcrumbs", "UnityEngineLogLevel")->byval_arg;
    static auto* attributes = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IDictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::Breadcrumbs::InMemory::BacktraceInMemoryLogManager*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message, type, level, attributes});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::Breadcrumbs::InMemory::BacktraceInMemoryLogManager::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Backtrace::Unity::Model::Breadcrumbs::InMemory::BacktraceInMemoryLogManager::*)()>(&Backtrace::Unity::Model::Breadcrumbs::InMemory::BacktraceInMemoryLogManager::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::Breadcrumbs::InMemory::BacktraceInMemoryLogManager*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::Breadcrumbs::InMemory::BacktraceInMemoryLogManager::Enable
// Il2CppName: Enable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Backtrace::Unity::Model::Breadcrumbs::InMemory::BacktraceInMemoryLogManager::*)()>(&Backtrace::Unity::Model::Breadcrumbs::InMemory::BacktraceInMemoryLogManager::Enable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::Breadcrumbs::InMemory::BacktraceInMemoryLogManager*), "Enable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::Breadcrumbs::InMemory::BacktraceInMemoryLogManager::Length
// Il2CppName: Length
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Backtrace::Unity::Model::Breadcrumbs::InMemory::BacktraceInMemoryLogManager::*)()>(&Backtrace::Unity::Model::Breadcrumbs::InMemory::BacktraceInMemoryLogManager::Length)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::Breadcrumbs::InMemory::BacktraceInMemoryLogManager*), "Length", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::Breadcrumbs::InMemory::BacktraceInMemoryLogManager::BreadcrumbId
// Il2CppName: BreadcrumbId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (Backtrace::Unity::Model::Breadcrumbs::InMemory::BacktraceInMemoryLogManager::*)()>(&Backtrace::Unity::Model::Breadcrumbs::InMemory::BacktraceInMemoryLogManager::BreadcrumbId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::Breadcrumbs::InMemory::BacktraceInMemoryLogManager*), "BreadcrumbId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
