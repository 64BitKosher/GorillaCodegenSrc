// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Backtrace::Unity::Model
namespace Backtrace::Unity::Model {
  // Forward declaring type: BacktraceConfiguration
  class BacktraceConfiguration;
}
// Forward declaring namespace: Backtrace::Unity::Types
namespace Backtrace::Unity::Types {
  // Forward declaring type: DeduplicationStrategy
  struct DeduplicationStrategy;
  // Forward declaring type: RetryOrder
  struct RetryOrder;
  // Forward declaring type: MiniDumpType
  struct MiniDumpType;
}
// Completed forward declares
// Type namespace: Backtrace.Unity.Model.Database
namespace Backtrace::Unity::Model::Database {
  // Forward declaring type: BacktraceDatabaseSettings
  class BacktraceDatabaseSettings;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Backtrace::Unity::Model::Database::BacktraceDatabaseSettings);
DEFINE_IL2CPP_ARG_TYPE(::Backtrace::Unity::Model::Database::BacktraceDatabaseSettings*, "Backtrace.Unity.Model.Database", "BacktraceDatabaseSettings");
// Type namespace: Backtrace.Unity.Model.Database
namespace Backtrace::Unity::Model::Database {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Backtrace.Unity.Model.Database.BacktraceDatabaseSettings
  // [TokenAttribute] Offset: FFFFFFFF
  class BacktraceDatabaseSettings : public ::Il2CppObject {
    public:
    public:
    // private readonly Backtrace.Unity.Model.BacktraceConfiguration _configuration
    // Size: 0x8
    // Offset: 0x10
    ::Backtrace::Unity::Model::BacktraceConfiguration* configuration;
    // Field size check
    static_assert(sizeof(::Backtrace::Unity::Model::BacktraceConfiguration*) == 0x8);
    // private readonly System.UInt32 _retryInterval
    // Size: 0x4
    // Offset: 0x18
    uint retryInterval;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // Padding between fields: retryInterval and: DatabasePath
    char __padding1[0x4] = {};
    // private System.String <DatabasePath>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    ::StringW DatabasePath;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: private readonly Backtrace.Unity.Model.BacktraceConfiguration _configuration
    [[deprecated("Use field access instead!")]] ::Backtrace::Unity::Model::BacktraceConfiguration*& dyn__configuration();
    // Get instance field reference: private readonly System.UInt32 _retryInterval
    [[deprecated("Use field access instead!")]] uint& dyn__retryInterval();
    // Get instance field reference: private System.String <DatabasePath>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$DatabasePath$k__BackingField();
    // public System.Void .ctor(System.String databasePath, Backtrace.Unity.Model.BacktraceConfiguration configuration)
    // Offset: 0x2A6E32C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BacktraceDatabaseSettings* New_ctor(::StringW databasePath, ::Backtrace::Unity::Model::BacktraceConfiguration* configuration) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Backtrace::Unity::Model::Database::BacktraceDatabaseSettings::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BacktraceDatabaseSettings*, creationType>(databasePath, configuration)));
    }
    // public System.String get_DatabasePath()
    // Offset: 0x2A6E40C
    ::StringW get_DatabasePath();
    // private System.Void set_DatabasePath(System.String value)
    // Offset: 0x2A6E414
    void set_DatabasePath(::StringW value);
    // public System.UInt32 get_MaxRecordCount()
    // Offset: 0x2A6E41C
    uint get_MaxRecordCount();
    // public System.Int64 get_MaxDatabaseSize()
    // Offset: 0x2A6E484
    int64_t get_MaxDatabaseSize();
    // public System.Boolean get_AutoSendMode()
    // Offset: 0x2A6E4AC
    bool get_AutoSendMode();
    // public System.UInt32 get_RetryInterval()
    // Offset: 0x2A6E4C8
    uint get_RetryInterval();
    // public System.UInt32 get_RetryLimit()
    // Offset: 0x2A6E4D0
    uint get_RetryLimit();
    // public Backtrace.Unity.Types.DeduplicationStrategy get_DeduplicationStrategy()
    // Offset: 0x2A6E538
    ::Backtrace::Unity::Types::DeduplicationStrategy get_DeduplicationStrategy();
    // public System.Boolean get_GenerateScreenshotOnException()
    // Offset: 0x2A6DBF8
    bool get_GenerateScreenshotOnException();
    // public System.Boolean get_AddUnityLogToReport()
    // Offset: 0x2A6DC14
    bool get_AddUnityLogToReport();
    // public Backtrace.Unity.Types.RetryOrder get_RetryOrder()
    // Offset: 0x2A6E554
    ::Backtrace::Unity::Types::RetryOrder get_RetryOrder();
    // public Backtrace.Unity.Types.MiniDumpType get_MinidumpType()
    // Offset: 0x2A6D8F0
    ::Backtrace::Unity::Types::MiniDumpType get_MinidumpType();
  }; // Backtrace.Unity.Model.Database.BacktraceDatabaseSettings
  #pragma pack(pop)
  static check_size<sizeof(BacktraceDatabaseSettings), 32 + sizeof(::StringW)> __Backtrace_Unity_Model_Database_BacktraceDatabaseSettingsSizeCheck;
  static_assert(sizeof(BacktraceDatabaseSettings) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Backtrace::Unity::Model::Database::BacktraceDatabaseSettings::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Backtrace::Unity::Model::Database::BacktraceDatabaseSettings::get_DatabasePath
// Il2CppName: get_DatabasePath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Backtrace::Unity::Model::Database::BacktraceDatabaseSettings::*)()>(&Backtrace::Unity::Model::Database::BacktraceDatabaseSettings::get_DatabasePath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::Database::BacktraceDatabaseSettings*), "get_DatabasePath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::Database::BacktraceDatabaseSettings::set_DatabasePath
// Il2CppName: set_DatabasePath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Model::Database::BacktraceDatabaseSettings::*)(::StringW)>(&Backtrace::Unity::Model::Database::BacktraceDatabaseSettings::set_DatabasePath)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::Database::BacktraceDatabaseSettings*), "set_DatabasePath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::Database::BacktraceDatabaseSettings::get_MaxRecordCount
// Il2CppName: get_MaxRecordCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (Backtrace::Unity::Model::Database::BacktraceDatabaseSettings::*)()>(&Backtrace::Unity::Model::Database::BacktraceDatabaseSettings::get_MaxRecordCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::Database::BacktraceDatabaseSettings*), "get_MaxRecordCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::Database::BacktraceDatabaseSettings::get_MaxDatabaseSize
// Il2CppName: get_MaxDatabaseSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (Backtrace::Unity::Model::Database::BacktraceDatabaseSettings::*)()>(&Backtrace::Unity::Model::Database::BacktraceDatabaseSettings::get_MaxDatabaseSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::Database::BacktraceDatabaseSettings*), "get_MaxDatabaseSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::Database::BacktraceDatabaseSettings::get_AutoSendMode
// Il2CppName: get_AutoSendMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Backtrace::Unity::Model::Database::BacktraceDatabaseSettings::*)()>(&Backtrace::Unity::Model::Database::BacktraceDatabaseSettings::get_AutoSendMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::Database::BacktraceDatabaseSettings*), "get_AutoSendMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::Database::BacktraceDatabaseSettings::get_RetryInterval
// Il2CppName: get_RetryInterval
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (Backtrace::Unity::Model::Database::BacktraceDatabaseSettings::*)()>(&Backtrace::Unity::Model::Database::BacktraceDatabaseSettings::get_RetryInterval)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::Database::BacktraceDatabaseSettings*), "get_RetryInterval", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::Database::BacktraceDatabaseSettings::get_RetryLimit
// Il2CppName: get_RetryLimit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (Backtrace::Unity::Model::Database::BacktraceDatabaseSettings::*)()>(&Backtrace::Unity::Model::Database::BacktraceDatabaseSettings::get_RetryLimit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::Database::BacktraceDatabaseSettings*), "get_RetryLimit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::Database::BacktraceDatabaseSettings::get_DeduplicationStrategy
// Il2CppName: get_DeduplicationStrategy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Backtrace::Unity::Types::DeduplicationStrategy (Backtrace::Unity::Model::Database::BacktraceDatabaseSettings::*)()>(&Backtrace::Unity::Model::Database::BacktraceDatabaseSettings::get_DeduplicationStrategy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::Database::BacktraceDatabaseSettings*), "get_DeduplicationStrategy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::Database::BacktraceDatabaseSettings::get_GenerateScreenshotOnException
// Il2CppName: get_GenerateScreenshotOnException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Backtrace::Unity::Model::Database::BacktraceDatabaseSettings::*)()>(&Backtrace::Unity::Model::Database::BacktraceDatabaseSettings::get_GenerateScreenshotOnException)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::Database::BacktraceDatabaseSettings*), "get_GenerateScreenshotOnException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::Database::BacktraceDatabaseSettings::get_AddUnityLogToReport
// Il2CppName: get_AddUnityLogToReport
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Backtrace::Unity::Model::Database::BacktraceDatabaseSettings::*)()>(&Backtrace::Unity::Model::Database::BacktraceDatabaseSettings::get_AddUnityLogToReport)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::Database::BacktraceDatabaseSettings*), "get_AddUnityLogToReport", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::Database::BacktraceDatabaseSettings::get_RetryOrder
// Il2CppName: get_RetryOrder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Backtrace::Unity::Types::RetryOrder (Backtrace::Unity::Model::Database::BacktraceDatabaseSettings::*)()>(&Backtrace::Unity::Model::Database::BacktraceDatabaseSettings::get_RetryOrder)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::Database::BacktraceDatabaseSettings*), "get_RetryOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::Database::BacktraceDatabaseSettings::get_MinidumpType
// Il2CppName: get_MinidumpType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Backtrace::Unity::Types::MiniDumpType (Backtrace::Unity::Model::Database::BacktraceDatabaseSettings::*)()>(&Backtrace::Unity::Model::Database::BacktraceDatabaseSettings::get_MinidumpType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::Database::BacktraceDatabaseSettings*), "get_MinidumpType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
