// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Guid
#include "System/Guid.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: FileInfo
  class FileInfo;
}
// Forward declaring namespace: Backtrace::Unity::Model
namespace Backtrace::Unity::Model {
  // Forward declaring type: BacktraceData
  class BacktraceData;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: ICollection`1<T>
  template<typename T>
  class ICollection_1;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: Backtrace.Unity.Model.Database
namespace Backtrace::Unity::Model::Database {
  // Forward declaring type: BacktraceDatabaseRecord
  class BacktraceDatabaseRecord;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord);
DEFINE_IL2CPP_ARG_TYPE(::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord*, "Backtrace.Unity.Model.Database", "BacktraceDatabaseRecord");
// Type namespace: Backtrace.Unity.Model.Database
namespace Backtrace::Unity::Model::Database {
  // Size: 0x64
  #pragma pack(push, 1)
  // Autogenerated type: Backtrace.Unity.Model.Database.BacktraceDatabaseRecord
  // [TokenAttribute] Offset: FFFFFFFF
  class BacktraceDatabaseRecord : public ::Il2CppObject {
    public:
    // Nested type: ::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord::BacktraceDatabaseRawRecord
    struct BacktraceDatabaseRawRecord;
    // Size: 0x30
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Backtrace.Unity.Model.Database.BacktraceDatabaseRecord/BacktraceDatabaseRawRecord
    // [TokenAttribute] Offset: FFFFFFFF
    struct BacktraceDatabaseRawRecord/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.String Id
      // Size: 0x8
      // Offset: 0x0
      ::StringW Id;
      // Field size check
      static_assert(sizeof(::StringW) == 0x8);
      // public System.String recordName
      // Size: 0x8
      // Offset: 0x8
      ::StringW recordName;
      // Field size check
      static_assert(sizeof(::StringW) == 0x8);
      // public System.String dataPath
      // Size: 0x8
      // Offset: 0x10
      ::StringW dataPath;
      // Field size check
      static_assert(sizeof(::StringW) == 0x8);
      // public System.Int64 size
      // Size: 0x8
      // Offset: 0x18
      int64_t size;
      // Field size check
      static_assert(sizeof(int64_t) == 0x8);
      // public System.String hash
      // Size: 0x8
      // Offset: 0x20
      ::StringW hash;
      // Field size check
      static_assert(sizeof(::StringW) == 0x8);
      // public System.Collections.Generic.List`1<System.String> attachments
      // Size: 0x8
      // Offset: 0x28
      ::System::Collections::Generic::List_1<::StringW>* attachments;
      // Field size check
      static_assert(sizeof(::System::Collections::Generic::List_1<::StringW>*) == 0x8);
      public:
      // Creating value type constructor for type: BacktraceDatabaseRawRecord
      constexpr BacktraceDatabaseRawRecord(::StringW Id_ = {}, ::StringW recordName_ = {}, ::StringW dataPath_ = {}, int64_t size_ = {}, ::StringW hash_ = {}, ::System::Collections::Generic::List_1<::StringW>* attachments_ = {}) noexcept : Id{Id_}, recordName{recordName_}, dataPath{dataPath_}, size{size_}, hash{hash_}, attachments{attachments_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.String Id
      [[deprecated("Use field access instead!")]] ::StringW& dyn_Id();
      // Get instance field reference: public System.String recordName
      [[deprecated("Use field access instead!")]] ::StringW& dyn_recordName();
      // Get instance field reference: public System.String dataPath
      [[deprecated("Use field access instead!")]] ::StringW& dyn_dataPath();
      // Get instance field reference: public System.Int64 size
      [[deprecated("Use field access instead!")]] int64_t& dyn_size();
      // Get instance field reference: public System.String hash
      [[deprecated("Use field access instead!")]] ::StringW& dyn_hash();
      // Get instance field reference: public System.Collections.Generic.List`1<System.String> attachments
      [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& dyn_attachments();
    }; // Backtrace.Unity.Model.Database.BacktraceDatabaseRecord/BacktraceDatabaseRawRecord
    #pragma pack(pop)
    static check_size<sizeof(BacktraceDatabaseRecord::BacktraceDatabaseRawRecord), 40 + sizeof(::System::Collections::Generic::List_1<::StringW>*)> __Backtrace_Unity_Model_Database_BacktraceDatabaseRecord_BacktraceDatabaseRawRecordSizeCheck;
    static_assert(sizeof(BacktraceDatabaseRecord::BacktraceDatabaseRawRecord) == 0x30);
    public:
    // public System.Guid Id
    // Size: 0x10
    // Offset: 0x10
    ::System::Guid Id;
    // Field size check
    static_assert(sizeof(::System::Guid) == 0x10);
    // System.Boolean Locked
    // Size: 0x1
    // Offset: 0x20
    bool Locked;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: Locked and: RecordPath
    char __padding1[0x7] = {};
    // private System.String <RecordPath>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    ::StringW RecordPath;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String <DiagnosticDataPath>k__BackingField
    // Size: 0x8
    // Offset: 0x30
    ::StringW DiagnosticDataPath;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Int64 <Size>k__BackingField
    // Size: 0x8
    // Offset: 0x38
    int64_t Size;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // public System.String Hash
    // Size: 0x8
    // Offset: 0x40
    ::StringW Hash;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private Backtrace.Unity.Model.BacktraceData <Record>k__BackingField
    // Size: 0x8
    // Offset: 0x48
    ::Backtrace::Unity::Model::BacktraceData* Record;
    // Field size check
    static_assert(sizeof(::Backtrace::Unity::Model::BacktraceData*) == 0x8);
    // private System.Collections.Generic.ICollection`1<System.String> <Attachments>k__BackingField
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::Generic::ICollection_1<::StringW>* Attachments;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::ICollection_1<::StringW>*) == 0x8);
    // private System.String <DiagnosticDataJson>k__BackingField
    // Size: 0x8
    // Offset: 0x58
    ::StringW DiagnosticDataJson;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Int32 _count
    // Size: 0x4
    // Offset: 0x60
    int count;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: public System.Guid Id
    [[deprecated("Use field access instead!")]] ::System::Guid& dyn_Id();
    // Get instance field reference: System.Boolean Locked
    [[deprecated("Use field access instead!")]] bool& dyn_Locked();
    // Get instance field reference: private System.String <RecordPath>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$RecordPath$k__BackingField();
    // Get instance field reference: private System.String <DiagnosticDataPath>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$DiagnosticDataPath$k__BackingField();
    // Get instance field reference: private System.Int64 <Size>k__BackingField
    [[deprecated("Use field access instead!")]] int64_t& dyn_$Size$k__BackingField();
    // Get instance field reference: public System.String Hash
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Hash();
    // Get instance field reference: private Backtrace.Unity.Model.BacktraceData <Record>k__BackingField
    [[deprecated("Use field access instead!")]] ::Backtrace::Unity::Model::BacktraceData*& dyn_$Record$k__BackingField();
    // Get instance field reference: private System.Collections.Generic.ICollection`1<System.String> <Attachments>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::ICollection_1<::StringW>*& dyn_$Attachments$k__BackingField();
    // Get instance field reference: private System.String <DiagnosticDataJson>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$DiagnosticDataJson$k__BackingField();
    // Get instance field reference: private System.Int32 _count
    [[deprecated("Use field access instead!")]] int& dyn__count();
    // System.String get_RecordPath()
    // Offset: 0x2A6DC1C
    ::StringW get_RecordPath();
    // System.Void set_RecordPath(System.String value)
    // Offset: 0x2A6DC24
    void set_RecordPath(::StringW value);
    // System.String get_DiagnosticDataPath()
    // Offset: 0x2A6DC2C
    ::StringW get_DiagnosticDataPath();
    // System.Void set_DiagnosticDataPath(System.String value)
    // Offset: 0x2A6DC34
    void set_DiagnosticDataPath(::StringW value);
    // System.Int64 get_Size()
    // Offset: 0x2A6DC3C
    int64_t get_Size();
    // System.Void set_Size(System.Int64 value)
    // Offset: 0x2A6DC44
    void set_Size(int64_t value);
    // Backtrace.Unity.Model.BacktraceData get_Record()
    // Offset: 0x2A6DC4C
    ::Backtrace::Unity::Model::BacktraceData* get_Record();
    // System.Void set_Record(Backtrace.Unity.Model.BacktraceData value)
    // Offset: 0x2A6DC54
    void set_Record(::Backtrace::Unity::Model::BacktraceData* value);
    // public System.Collections.Generic.ICollection`1<System.String> get_Attachments()
    // Offset: 0x2A6DC5C
    ::System::Collections::Generic::ICollection_1<::StringW>* get_Attachments();
    // private System.Void set_Attachments(System.Collections.Generic.ICollection`1<System.String> value)
    // Offset: 0x2A6DC64
    void set_Attachments(::System::Collections::Generic::ICollection_1<::StringW>* value);
    // System.String get_DiagnosticDataJson()
    // Offset: 0x2A6DC6C
    ::StringW get_DiagnosticDataJson();
    // System.Void set_DiagnosticDataJson(System.String value)
    // Offset: 0x2A6DC74
    void set_DiagnosticDataJson(::StringW value);
    // public System.Boolean get_Duplicated()
    // Offset: 0x2A6DC7C
    bool get_Duplicated();
    // public System.Int32 get_Count()
    // Offset: 0x2A6DC8C
    int get_Count();
    // public System.String BacktraceDataJson()
    // Offset: 0x2A6DC94
    ::StringW BacktraceDataJson();
    // public Backtrace.Unity.Model.BacktraceData get_BacktraceData()
    // Offset: 0x2A6DD30
    ::Backtrace::Unity::Model::BacktraceData* get_BacktraceData();
    // public System.String ToJson()
    // Offset: 0x2A6DD48
    ::StringW ToJson();
    // static public Backtrace.Unity.Model.Database.BacktraceDatabaseRecord Deserialize(System.String json)
    // Offset: 0x2A6DE80
    static ::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord* Deserialize(::StringW json);
    // private System.Void .ctor(Backtrace.Unity.Model.Database.BacktraceDatabaseRecord/BacktraceDatabaseRawRecord rawRecord)
    // Offset: 0x2A6DF1C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BacktraceDatabaseRecord* New_ctor(::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord::BacktraceDatabaseRawRecord rawRecord) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BacktraceDatabaseRecord*, creationType>(rawRecord)));
    }
    // public System.Void .ctor(Backtrace.Unity.Model.BacktraceData data)
    // Offset: 0x2A6E010
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BacktraceDatabaseRecord* New_ctor(::Backtrace::Unity::Model::BacktraceData* data) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BacktraceDatabaseRecord*, creationType>(data)));
    }
    // public System.Void Increment()
    // Offset: 0x2A6E0C0
    void Increment();
    // static Backtrace.Unity.Model.Database.BacktraceDatabaseRecord ReadFromFile(System.IO.FileInfo file)
    // Offset: 0x2A6E0D0
    static ::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord* ReadFromFile(::System::IO::FileInfo* file);
    // public System.Void Unlock()
    // Offset: 0x2A6E31C
    void Unlock();
  }; // Backtrace.Unity.Model.Database.BacktraceDatabaseRecord
  #pragma pack(pop)
  static check_size<sizeof(BacktraceDatabaseRecord), 96 + sizeof(int)> __Backtrace_Unity_Model_Database_BacktraceDatabaseRecordSizeCheck;
  static_assert(sizeof(BacktraceDatabaseRecord) == 0x64);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord::BacktraceDatabaseRawRecord, "Backtrace.Unity.Model.Database", "BacktraceDatabaseRecord/BacktraceDatabaseRawRecord");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Backtrace::Unity::Model::Database::BacktraceDatabaseRecord::get_RecordPath
// Il2CppName: get_RecordPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Backtrace::Unity::Model::Database::BacktraceDatabaseRecord::*)()>(&Backtrace::Unity::Model::Database::BacktraceDatabaseRecord::get_RecordPath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::Database::BacktraceDatabaseRecord*), "get_RecordPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::Database::BacktraceDatabaseRecord::set_RecordPath
// Il2CppName: set_RecordPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Model::Database::BacktraceDatabaseRecord::*)(::StringW)>(&Backtrace::Unity::Model::Database::BacktraceDatabaseRecord::set_RecordPath)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::Database::BacktraceDatabaseRecord*), "set_RecordPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::Database::BacktraceDatabaseRecord::get_DiagnosticDataPath
// Il2CppName: get_DiagnosticDataPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Backtrace::Unity::Model::Database::BacktraceDatabaseRecord::*)()>(&Backtrace::Unity::Model::Database::BacktraceDatabaseRecord::get_DiagnosticDataPath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::Database::BacktraceDatabaseRecord*), "get_DiagnosticDataPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::Database::BacktraceDatabaseRecord::set_DiagnosticDataPath
// Il2CppName: set_DiagnosticDataPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Model::Database::BacktraceDatabaseRecord::*)(::StringW)>(&Backtrace::Unity::Model::Database::BacktraceDatabaseRecord::set_DiagnosticDataPath)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::Database::BacktraceDatabaseRecord*), "set_DiagnosticDataPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::Database::BacktraceDatabaseRecord::get_Size
// Il2CppName: get_Size
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (Backtrace::Unity::Model::Database::BacktraceDatabaseRecord::*)()>(&Backtrace::Unity::Model::Database::BacktraceDatabaseRecord::get_Size)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::Database::BacktraceDatabaseRecord*), "get_Size", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::Database::BacktraceDatabaseRecord::set_Size
// Il2CppName: set_Size
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Model::Database::BacktraceDatabaseRecord::*)(int64_t)>(&Backtrace::Unity::Model::Database::BacktraceDatabaseRecord::set_Size)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::Database::BacktraceDatabaseRecord*), "set_Size", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::Database::BacktraceDatabaseRecord::get_Record
// Il2CppName: get_Record
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Backtrace::Unity::Model::BacktraceData* (Backtrace::Unity::Model::Database::BacktraceDatabaseRecord::*)()>(&Backtrace::Unity::Model::Database::BacktraceDatabaseRecord::get_Record)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::Database::BacktraceDatabaseRecord*), "get_Record", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::Database::BacktraceDatabaseRecord::set_Record
// Il2CppName: set_Record
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Model::Database::BacktraceDatabaseRecord::*)(::Backtrace::Unity::Model::BacktraceData*)>(&Backtrace::Unity::Model::Database::BacktraceDatabaseRecord::set_Record)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Backtrace.Unity.Model", "BacktraceData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::Database::BacktraceDatabaseRecord*), "set_Record", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::Database::BacktraceDatabaseRecord::get_Attachments
// Il2CppName: get_Attachments
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::ICollection_1<::StringW>* (Backtrace::Unity::Model::Database::BacktraceDatabaseRecord::*)()>(&Backtrace::Unity::Model::Database::BacktraceDatabaseRecord::get_Attachments)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::Database::BacktraceDatabaseRecord*), "get_Attachments", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::Database::BacktraceDatabaseRecord::set_Attachments
// Il2CppName: set_Attachments
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Model::Database::BacktraceDatabaseRecord::*)(::System::Collections::Generic::ICollection_1<::StringW>*)>(&Backtrace::Unity::Model::Database::BacktraceDatabaseRecord::set_Attachments)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "ICollection`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::Database::BacktraceDatabaseRecord*), "set_Attachments", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::Database::BacktraceDatabaseRecord::get_DiagnosticDataJson
// Il2CppName: get_DiagnosticDataJson
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Backtrace::Unity::Model::Database::BacktraceDatabaseRecord::*)()>(&Backtrace::Unity::Model::Database::BacktraceDatabaseRecord::get_DiagnosticDataJson)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::Database::BacktraceDatabaseRecord*), "get_DiagnosticDataJson", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::Database::BacktraceDatabaseRecord::set_DiagnosticDataJson
// Il2CppName: set_DiagnosticDataJson
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Model::Database::BacktraceDatabaseRecord::*)(::StringW)>(&Backtrace::Unity::Model::Database::BacktraceDatabaseRecord::set_DiagnosticDataJson)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::Database::BacktraceDatabaseRecord*), "set_DiagnosticDataJson", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::Database::BacktraceDatabaseRecord::get_Duplicated
// Il2CppName: get_Duplicated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Backtrace::Unity::Model::Database::BacktraceDatabaseRecord::*)()>(&Backtrace::Unity::Model::Database::BacktraceDatabaseRecord::get_Duplicated)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::Database::BacktraceDatabaseRecord*), "get_Duplicated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::Database::BacktraceDatabaseRecord::get_Count
// Il2CppName: get_Count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Backtrace::Unity::Model::Database::BacktraceDatabaseRecord::*)()>(&Backtrace::Unity::Model::Database::BacktraceDatabaseRecord::get_Count)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::Database::BacktraceDatabaseRecord*), "get_Count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::Database::BacktraceDatabaseRecord::BacktraceDataJson
// Il2CppName: BacktraceDataJson
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Backtrace::Unity::Model::Database::BacktraceDatabaseRecord::*)()>(&Backtrace::Unity::Model::Database::BacktraceDatabaseRecord::BacktraceDataJson)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::Database::BacktraceDatabaseRecord*), "BacktraceDataJson", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::Database::BacktraceDatabaseRecord::get_BacktraceData
// Il2CppName: get_BacktraceData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Backtrace::Unity::Model::BacktraceData* (Backtrace::Unity::Model::Database::BacktraceDatabaseRecord::*)()>(&Backtrace::Unity::Model::Database::BacktraceDatabaseRecord::get_BacktraceData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::Database::BacktraceDatabaseRecord*), "get_BacktraceData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::Database::BacktraceDatabaseRecord::ToJson
// Il2CppName: ToJson
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Backtrace::Unity::Model::Database::BacktraceDatabaseRecord::*)()>(&Backtrace::Unity::Model::Database::BacktraceDatabaseRecord::ToJson)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::Database::BacktraceDatabaseRecord*), "ToJson", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::Database::BacktraceDatabaseRecord::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord* (*)(::StringW)>(&Backtrace::Unity::Model::Database::BacktraceDatabaseRecord::Deserialize)> {
  static const MethodInfo* get() {
    static auto* json = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::Database::BacktraceDatabaseRecord*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{json});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::Database::BacktraceDatabaseRecord::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Backtrace::Unity::Model::Database::BacktraceDatabaseRecord::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Backtrace::Unity::Model::Database::BacktraceDatabaseRecord::Increment
// Il2CppName: Increment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Model::Database::BacktraceDatabaseRecord::*)()>(&Backtrace::Unity::Model::Database::BacktraceDatabaseRecord::Increment)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::Database::BacktraceDatabaseRecord*), "Increment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::Database::BacktraceDatabaseRecord::ReadFromFile
// Il2CppName: ReadFromFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Backtrace::Unity::Model::Database::BacktraceDatabaseRecord* (*)(::System::IO::FileInfo*)>(&Backtrace::Unity::Model::Database::BacktraceDatabaseRecord::ReadFromFile)> {
  static const MethodInfo* get() {
    static auto* file = &::il2cpp_utils::GetClassFromName("System.IO", "FileInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::Database::BacktraceDatabaseRecord*), "ReadFromFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{file});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::Database::BacktraceDatabaseRecord::Unlock
// Il2CppName: Unlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Model::Database::BacktraceDatabaseRecord::*)()>(&Backtrace::Unity::Model::Database::BacktraceDatabaseRecord::Unlock)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::Database::BacktraceDatabaseRecord*), "Unlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
