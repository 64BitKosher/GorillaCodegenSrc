// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Backtrace::Unity::Model::Database
namespace Backtrace::Unity::Model::Database {
  // Forward declaring type: BacktraceDatabaseSettings
  class BacktraceDatabaseSettings;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: Backtrace::Unity::Model
namespace Backtrace::Unity::Model {
  // Forward declaring type: BacktraceData
  class BacktraceData;
}
// Completed forward declares
// Type namespace: Backtrace.Unity.Model.Database
namespace Backtrace::Unity::Model::Database {
  // Forward declaring type: BacktraceDatabaseAttachmentManager
  class BacktraceDatabaseAttachmentManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Backtrace::Unity::Model::Database::BacktraceDatabaseAttachmentManager);
DEFINE_IL2CPP_ARG_TYPE(::Backtrace::Unity::Model::Database::BacktraceDatabaseAttachmentManager*, "Backtrace.Unity.Model.Database", "BacktraceDatabaseAttachmentManager");
// Type namespace: Backtrace.Unity.Model.Database
namespace Backtrace::Unity::Model::Database {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: Backtrace.Unity.Model.Database.BacktraceDatabaseAttachmentManager
  // [TokenAttribute] Offset: FFFFFFFF
  class BacktraceDatabaseAttachmentManager : public ::Il2CppObject {
    public:
    public:
    // private System.Int32 <ScreenshotMaxHeight>k__BackingField
    // Size: 0x4
    // Offset: 0x10
    int ScreenshotMaxHeight;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 <ScreenshotQuality>k__BackingField
    // Size: 0x4
    // Offset: 0x14
    int ScreenshotQuality;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly Backtrace.Unity.Model.Database.BacktraceDatabaseSettings _settings
    // Size: 0x8
    // Offset: 0x18
    ::Backtrace::Unity::Model::Database::BacktraceDatabaseSettings* settings;
    // Field size check
    static_assert(sizeof(::Backtrace::Unity::Model::Database::BacktraceDatabaseSettings*) == 0x8);
    // private System.Single _lastScreenTime
    // Size: 0x4
    // Offset: 0x20
    float lastScreenTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: lastScreenTime and: lastScreenPath
    char __padding3[0x4] = {};
    // private System.String _lastScreenPath
    // Size: 0x8
    // Offset: 0x28
    ::StringW lastScreenPath;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private readonly System.Object _lock
    // Size: 0x8
    // Offset: 0x30
    ::Il2CppObject* lock;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    public:
    // Get instance field reference: private System.Int32 <ScreenshotMaxHeight>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$ScreenshotMaxHeight$k__BackingField();
    // Get instance field reference: private System.Int32 <ScreenshotQuality>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$ScreenshotQuality$k__BackingField();
    // Get instance field reference: private readonly Backtrace.Unity.Model.Database.BacktraceDatabaseSettings _settings
    [[deprecated("Use field access instead!")]] ::Backtrace::Unity::Model::Database::BacktraceDatabaseSettings*& dyn__settings();
    // Get instance field reference: private System.Single _lastScreenTime
    [[deprecated("Use field access instead!")]] float& dyn__lastScreenTime();
    // Get instance field reference: private System.String _lastScreenPath
    [[deprecated("Use field access instead!")]] ::StringW& dyn__lastScreenPath();
    // Get instance field reference: private readonly System.Object _lock
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn__lock();
    // System.Int32 get_ScreenshotMaxHeight()
    // Offset: 0x2A6CF5C
    int get_ScreenshotMaxHeight();
    // System.Void set_ScreenshotMaxHeight(System.Int32 value)
    // Offset: 0x2A6CF64
    void set_ScreenshotMaxHeight(int value);
    // System.Int32 get_ScreenshotQuality()
    // Offset: 0x2A6CF6C
    int get_ScreenshotQuality();
    // System.Void set_ScreenshotQuality(System.Int32 value)
    // Offset: 0x2A6CF74
    void set_ScreenshotQuality(int value);
    // public System.Void .ctor(Backtrace.Unity.Model.Database.BacktraceDatabaseSettings settings)
    // Offset: 0x2A6CF7C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BacktraceDatabaseAttachmentManager* New_ctor(::Backtrace::Unity::Model::Database::BacktraceDatabaseSettings* settings) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Backtrace::Unity::Model::Database::BacktraceDatabaseAttachmentManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BacktraceDatabaseAttachmentManager*, creationType>(settings)));
    }
    // public System.Collections.Generic.IEnumerable`1<System.String> GetReportAttachments(Backtrace.Unity.Model.BacktraceData data)
    // Offset: 0x2A6D018
    ::System::Collections::Generic::IEnumerable_1<::StringW>* GetReportAttachments(::Backtrace::Unity::Model::BacktraceData* data);
    // private System.Void AddIfPathIsNotEmpty(System.Collections.Generic.List`1<System.String> source, System.String attachmentPath)
    // Offset: 0x2A6D740
    void AddIfPathIsNotEmpty(::System::Collections::Generic::List_1<::StringW>* source, ::StringW attachmentPath);
    // private System.String GetMinidumpPath(Backtrace.Unity.Model.BacktraceData backtraceData, System.String dataPrefix)
    // Offset: 0x2A6D874
    ::StringW GetMinidumpPath(::Backtrace::Unity::Model::BacktraceData* backtraceData, ::StringW dataPrefix);
    // private System.String GetScreenshotPath(System.String dataPrefix)
    // Offset: 0x2A6D1C0
    ::StringW GetScreenshotPath(::StringW dataPrefix);
    // private System.String GetUnityPlayerLogFile(Backtrace.Unity.Model.BacktraceData backtraceData, System.String dataPrefix)
    // Offset: 0x2A6D804
    ::StringW GetUnityPlayerLogFile(::Backtrace::Unity::Model::BacktraceData* backtraceData, ::StringW dataPrefix);
  }; // Backtrace.Unity.Model.Database.BacktraceDatabaseAttachmentManager
  #pragma pack(pop)
  static check_size<sizeof(BacktraceDatabaseAttachmentManager), 48 + sizeof(::Il2CppObject*)> __Backtrace_Unity_Model_Database_BacktraceDatabaseAttachmentManagerSizeCheck;
  static_assert(sizeof(BacktraceDatabaseAttachmentManager) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Backtrace::Unity::Model::Database::BacktraceDatabaseAttachmentManager::get_ScreenshotMaxHeight
// Il2CppName: get_ScreenshotMaxHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Backtrace::Unity::Model::Database::BacktraceDatabaseAttachmentManager::*)()>(&Backtrace::Unity::Model::Database::BacktraceDatabaseAttachmentManager::get_ScreenshotMaxHeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::Database::BacktraceDatabaseAttachmentManager*), "get_ScreenshotMaxHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::Database::BacktraceDatabaseAttachmentManager::set_ScreenshotMaxHeight
// Il2CppName: set_ScreenshotMaxHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Model::Database::BacktraceDatabaseAttachmentManager::*)(int)>(&Backtrace::Unity::Model::Database::BacktraceDatabaseAttachmentManager::set_ScreenshotMaxHeight)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::Database::BacktraceDatabaseAttachmentManager*), "set_ScreenshotMaxHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::Database::BacktraceDatabaseAttachmentManager::get_ScreenshotQuality
// Il2CppName: get_ScreenshotQuality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Backtrace::Unity::Model::Database::BacktraceDatabaseAttachmentManager::*)()>(&Backtrace::Unity::Model::Database::BacktraceDatabaseAttachmentManager::get_ScreenshotQuality)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::Database::BacktraceDatabaseAttachmentManager*), "get_ScreenshotQuality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::Database::BacktraceDatabaseAttachmentManager::set_ScreenshotQuality
// Il2CppName: set_ScreenshotQuality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Model::Database::BacktraceDatabaseAttachmentManager::*)(int)>(&Backtrace::Unity::Model::Database::BacktraceDatabaseAttachmentManager::set_ScreenshotQuality)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::Database::BacktraceDatabaseAttachmentManager*), "set_ScreenshotQuality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::Database::BacktraceDatabaseAttachmentManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Backtrace::Unity::Model::Database::BacktraceDatabaseAttachmentManager::GetReportAttachments
// Il2CppName: GetReportAttachments
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerable_1<::StringW>* (Backtrace::Unity::Model::Database::BacktraceDatabaseAttachmentManager::*)(::Backtrace::Unity::Model::BacktraceData*)>(&Backtrace::Unity::Model::Database::BacktraceDatabaseAttachmentManager::GetReportAttachments)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("Backtrace.Unity.Model", "BacktraceData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::Database::BacktraceDatabaseAttachmentManager*), "GetReportAttachments", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::Database::BacktraceDatabaseAttachmentManager::AddIfPathIsNotEmpty
// Il2CppName: AddIfPathIsNotEmpty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Model::Database::BacktraceDatabaseAttachmentManager::*)(::System::Collections::Generic::List_1<::StringW>*, ::StringW)>(&Backtrace::Unity::Model::Database::BacktraceDatabaseAttachmentManager::AddIfPathIsNotEmpty)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    static auto* attachmentPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::Database::BacktraceDatabaseAttachmentManager*), "AddIfPathIsNotEmpty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, attachmentPath});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::Database::BacktraceDatabaseAttachmentManager::GetMinidumpPath
// Il2CppName: GetMinidumpPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Backtrace::Unity::Model::Database::BacktraceDatabaseAttachmentManager::*)(::Backtrace::Unity::Model::BacktraceData*, ::StringW)>(&Backtrace::Unity::Model::Database::BacktraceDatabaseAttachmentManager::GetMinidumpPath)> {
  static const MethodInfo* get() {
    static auto* backtraceData = &::il2cpp_utils::GetClassFromName("Backtrace.Unity.Model", "BacktraceData")->byval_arg;
    static auto* dataPrefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::Database::BacktraceDatabaseAttachmentManager*), "GetMinidumpPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{backtraceData, dataPrefix});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::Database::BacktraceDatabaseAttachmentManager::GetScreenshotPath
// Il2CppName: GetScreenshotPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Backtrace::Unity::Model::Database::BacktraceDatabaseAttachmentManager::*)(::StringW)>(&Backtrace::Unity::Model::Database::BacktraceDatabaseAttachmentManager::GetScreenshotPath)> {
  static const MethodInfo* get() {
    static auto* dataPrefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::Database::BacktraceDatabaseAttachmentManager*), "GetScreenshotPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dataPrefix});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::Database::BacktraceDatabaseAttachmentManager::GetUnityPlayerLogFile
// Il2CppName: GetUnityPlayerLogFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Backtrace::Unity::Model::Database::BacktraceDatabaseAttachmentManager::*)(::Backtrace::Unity::Model::BacktraceData*, ::StringW)>(&Backtrace::Unity::Model::Database::BacktraceDatabaseAttachmentManager::GetUnityPlayerLogFile)> {
  static const MethodInfo* get() {
    static auto* backtraceData = &::il2cpp_utils::GetClassFromName("Backtrace.Unity.Model", "BacktraceData")->byval_arg;
    static auto* dataPrefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::Database::BacktraceDatabaseAttachmentManager*), "GetUnityPlayerLogFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{backtraceData, dataPrefix});
  }
};
