// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Guid
#include "System/Guid.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: ICollection`1<T>
  template<typename T>
  class ICollection_1;
}
// Forward declaring namespace: Backtrace::Unity::Model::JsonData
namespace Backtrace::Unity::Model::JsonData {
  // Forward declaring type: ThreadInformation
  class ThreadInformation;
  // Forward declaring type: BacktraceAttributes
  class BacktraceAttributes;
  // Forward declaring type: Annotations
  class Annotations;
  // Forward declaring type: ThreadData
  class ThreadData;
}
// Forward declaring namespace: Backtrace::Unity::Model
namespace Backtrace::Unity::Model {
  // Forward declaring type: BacktraceSourceCode
  class BacktraceSourceCode;
  // Forward declaring type: BacktraceReport
  class BacktraceReport;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Completed forward declares
// Type namespace: Backtrace.Unity.Model
namespace Backtrace::Unity::Model {
  // Forward declaring type: BacktraceData
  class BacktraceData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Backtrace::Unity::Model::BacktraceData);
DEFINE_IL2CPP_ARG_TYPE(::Backtrace::Unity::Model::BacktraceData*, "Backtrace.Unity.Model", "BacktraceData");
// Type namespace: Backtrace.Unity.Model
namespace Backtrace::Unity::Model {
  // Size: 0x84
  #pragma pack(push, 1)
  // Autogenerated type: Backtrace.Unity.Model.BacktraceData
  // [TokenAttribute] Offset: FFFFFFFF
  class BacktraceData : public ::Il2CppObject {
    public:
    public:
    // private System.Guid <Uuid>k__BackingField
    // Size: 0x10
    // Offset: 0x10
    ::System::Guid Uuid;
    // Field size check
    static_assert(sizeof(::System::Guid) == 0x10);
    // private System.String _uuidString
    // Size: 0x8
    // Offset: 0x20
    ::StringW uuidString;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Int64 <Timestamp>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    int64_t Timestamp;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // public readonly System.String LangVersion
    // Size: 0x8
    // Offset: 0x30
    ::StringW LangVersion;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Collections.Generic.Dictionary`2<System.String,Backtrace.Unity.Model.JsonData.ThreadInformation> ThreadInformations
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::Dictionary_2<::StringW, ::Backtrace::Unity::Model::JsonData::ThreadInformation*>* ThreadInformations;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::Backtrace::Unity::Model::JsonData::ThreadInformation*>*) == 0x8);
    // public System.String MainThread
    // Size: 0x8
    // Offset: 0x40
    ::StringW MainThread;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String[] Classifier
    // Size: 0x8
    // Offset: 0x48
    ::ArrayW<::StringW> Classifier;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // public Backtrace.Unity.Model.BacktraceSourceCode SourceCode
    // Size: 0x8
    // Offset: 0x50
    ::Backtrace::Unity::Model::BacktraceSourceCode* SourceCode;
    // Field size check
    static_assert(sizeof(::Backtrace::Unity::Model::BacktraceSourceCode*) == 0x8);
    // public System.Collections.Generic.ICollection`1<System.String> Attachments
    // Size: 0x8
    // Offset: 0x58
    ::System::Collections::Generic::ICollection_1<::StringW>* Attachments;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::ICollection_1<::StringW>*) == 0x8);
    // private Backtrace.Unity.Model.BacktraceReport <Report>k__BackingField
    // Size: 0x8
    // Offset: 0x60
    ::Backtrace::Unity::Model::BacktraceReport* Report;
    // Field size check
    static_assert(sizeof(::Backtrace::Unity::Model::BacktraceReport*) == 0x8);
    // public Backtrace.Unity.Model.JsonData.BacktraceAttributes Attributes
    // Size: 0x8
    // Offset: 0x68
    ::Backtrace::Unity::Model::JsonData::BacktraceAttributes* Attributes;
    // Field size check
    static_assert(sizeof(::Backtrace::Unity::Model::JsonData::BacktraceAttributes*) == 0x8);
    // public Backtrace.Unity.Model.JsonData.Annotations Annotation
    // Size: 0x8
    // Offset: 0x70
    ::Backtrace::Unity::Model::JsonData::Annotations* Annotation;
    // Field size check
    static_assert(sizeof(::Backtrace::Unity::Model::JsonData::Annotations*) == 0x8);
    // public Backtrace.Unity.Model.JsonData.ThreadData ThreadData
    // Size: 0x8
    // Offset: 0x78
    ::Backtrace::Unity::Model::JsonData::ThreadData* ThreadData;
    // Field size check
    static_assert(sizeof(::Backtrace::Unity::Model::JsonData::ThreadData*) == 0x8);
    // public System.Int32 Deduplication
    // Size: 0x4
    // Offset: 0x80
    int Deduplication;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // static field const value: static public System.String Lang
    static constexpr const char* Lang = "csharp";
    // Get static field: static public System.String Lang
    static ::StringW _get_Lang();
    // Set static field: static public System.String Lang
    static void _set_Lang(::StringW value);
    // static field const value: static public System.String Agent
    static constexpr const char* Agent = "backtrace-unity";
    // Get static field: static public System.String Agent
    static ::StringW _get_Agent();
    // Set static field: static public System.String Agent
    static void _set_Agent(::StringW value);
    // static field const value: static public System.String AgentVersion
    static constexpr const char* AgentVersion = "3.7.8";
    // Get static field: static public System.String AgentVersion
    static ::StringW _get_AgentVersion();
    // Set static field: static public System.String AgentVersion
    static void _set_AgentVersion(::StringW value);
    // Get instance field reference: private System.Guid <Uuid>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Guid& dyn_$Uuid$k__BackingField();
    // Get instance field reference: private System.String _uuidString
    [[deprecated("Use field access instead!")]] ::StringW& dyn__uuidString();
    // Get instance field reference: private System.Int64 <Timestamp>k__BackingField
    [[deprecated("Use field access instead!")]] int64_t& dyn_$Timestamp$k__BackingField();
    // Get instance field reference: public readonly System.String LangVersion
    [[deprecated("Use field access instead!")]] ::StringW& dyn_LangVersion();
    // Get instance field reference: public System.Collections.Generic.Dictionary`2<System.String,Backtrace.Unity.Model.JsonData.ThreadInformation> ThreadInformations
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::Backtrace::Unity::Model::JsonData::ThreadInformation*>*& dyn_ThreadInformations();
    // Get instance field reference: public System.String MainThread
    [[deprecated("Use field access instead!")]] ::StringW& dyn_MainThread();
    // Get instance field reference: public System.String[] Classifier
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn_Classifier();
    // Get instance field reference: public Backtrace.Unity.Model.BacktraceSourceCode SourceCode
    [[deprecated("Use field access instead!")]] ::Backtrace::Unity::Model::BacktraceSourceCode*& dyn_SourceCode();
    // Get instance field reference: public System.Collections.Generic.ICollection`1<System.String> Attachments
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::ICollection_1<::StringW>*& dyn_Attachments();
    // Get instance field reference: private Backtrace.Unity.Model.BacktraceReport <Report>k__BackingField
    [[deprecated("Use field access instead!")]] ::Backtrace::Unity::Model::BacktraceReport*& dyn_$Report$k__BackingField();
    // Get instance field reference: public Backtrace.Unity.Model.JsonData.BacktraceAttributes Attributes
    [[deprecated("Use field access instead!")]] ::Backtrace::Unity::Model::JsonData::BacktraceAttributes*& dyn_Attributes();
    // Get instance field reference: public Backtrace.Unity.Model.JsonData.Annotations Annotation
    [[deprecated("Use field access instead!")]] ::Backtrace::Unity::Model::JsonData::Annotations*& dyn_Annotation();
    // Get instance field reference: public Backtrace.Unity.Model.JsonData.ThreadData ThreadData
    [[deprecated("Use field access instead!")]] ::Backtrace::Unity::Model::JsonData::ThreadData*& dyn_ThreadData();
    // Get instance field reference: public System.Int32 Deduplication
    [[deprecated("Use field access instead!")]] int& dyn_Deduplication();
    // public System.Guid get_Uuid()
    // Offset: 0x2A62070
    ::System::Guid get_Uuid();
    // private System.Void set_Uuid(System.Guid value)
    // Offset: 0x2A6207C
    void set_Uuid(::System::Guid value);
    // System.String get_UuidString()
    // Offset: 0x2A5D09C
    ::StringW get_UuidString();
    // public System.Int64 get_Timestamp()
    // Offset: 0x2A62084
    int64_t get_Timestamp();
    // private System.Void set_Timestamp(System.Int64 value)
    // Offset: 0x2A6208C
    void set_Timestamp(int64_t value);
    // public Backtrace.Unity.Model.BacktraceReport get_Report()
    // Offset: 0x2A62094
    ::Backtrace::Unity::Model::BacktraceReport* get_Report();
    // public System.Void set_Report(Backtrace.Unity.Model.BacktraceReport value)
    // Offset: 0x2A6209C
    void set_Report(::Backtrace::Unity::Model::BacktraceReport* value);
    // public System.Void .ctor(Backtrace.Unity.Model.BacktraceReport report, System.Collections.Generic.Dictionary`2<System.String,System.String> clientAttributes, System.Int32 gameObjectDepth)
    // Offset: 0x2A620A4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BacktraceData* New_ctor(::Backtrace::Unity::Model::BacktraceReport* report, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* clientAttributes, int gameObjectDepth) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Backtrace::Unity::Model::BacktraceData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BacktraceData*, creationType>(report, clientAttributes, gameObjectDepth)));
    }
    // public System.String ToJson()
    // Offset: 0x2A5426C
    ::StringW ToJson();
    // private System.Void SetThreadInformations()
    // Offset: 0x2A62324
    void SetThreadInformations();
    // private System.Void SetAttributes(System.Collections.Generic.Dictionary`2<System.String,System.String> clientAttributes, System.Int32 gameObjectDepth)
    // Offset: 0x2A62248
    void SetAttributes(::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* clientAttributes, int gameObjectDepth);
  }; // Backtrace.Unity.Model.BacktraceData
  #pragma pack(pop)
  static check_size<sizeof(BacktraceData), 128 + sizeof(int)> __Backtrace_Unity_Model_BacktraceDataSizeCheck;
  static_assert(sizeof(BacktraceData) == 0x84);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceData::get_Uuid
// Il2CppName: get_Uuid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Guid (Backtrace::Unity::Model::BacktraceData::*)()>(&Backtrace::Unity::Model::BacktraceData::get_Uuid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceData*), "get_Uuid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceData::set_Uuid
// Il2CppName: set_Uuid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Model::BacktraceData::*)(::System::Guid)>(&Backtrace::Unity::Model::BacktraceData::set_Uuid)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Guid")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceData*), "set_Uuid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceData::get_UuidString
// Il2CppName: get_UuidString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Backtrace::Unity::Model::BacktraceData::*)()>(&Backtrace::Unity::Model::BacktraceData::get_UuidString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceData*), "get_UuidString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceData::get_Timestamp
// Il2CppName: get_Timestamp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (Backtrace::Unity::Model::BacktraceData::*)()>(&Backtrace::Unity::Model::BacktraceData::get_Timestamp)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceData*), "get_Timestamp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceData::set_Timestamp
// Il2CppName: set_Timestamp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Model::BacktraceData::*)(int64_t)>(&Backtrace::Unity::Model::BacktraceData::set_Timestamp)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceData*), "set_Timestamp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceData::get_Report
// Il2CppName: get_Report
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Backtrace::Unity::Model::BacktraceReport* (Backtrace::Unity::Model::BacktraceData::*)()>(&Backtrace::Unity::Model::BacktraceData::get_Report)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceData*), "get_Report", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceData::set_Report
// Il2CppName: set_Report
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Model::BacktraceData::*)(::Backtrace::Unity::Model::BacktraceReport*)>(&Backtrace::Unity::Model::BacktraceData::set_Report)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Backtrace.Unity.Model", "BacktraceReport")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceData*), "set_Report", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceData::ToJson
// Il2CppName: ToJson
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Backtrace::Unity::Model::BacktraceData::*)()>(&Backtrace::Unity::Model::BacktraceData::ToJson)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceData*), "ToJson", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceData::SetThreadInformations
// Il2CppName: SetThreadInformations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Model::BacktraceData::*)()>(&Backtrace::Unity::Model::BacktraceData::SetThreadInformations)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceData*), "SetThreadInformations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceData::SetAttributes
// Il2CppName: SetAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Model::BacktraceData::*)(::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*, int)>(&Backtrace::Unity::Model::BacktraceData::SetAttributes)> {
  static const MethodInfo* get() {
    static auto* clientAttributes = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    static auto* gameObjectDepth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceData*), "SetAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clientAttributes, gameObjectDepth});
  }
};
