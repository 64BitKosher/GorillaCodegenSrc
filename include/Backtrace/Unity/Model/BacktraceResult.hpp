// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Backtrace.Unity.Types.BacktraceResultStatus
#include "Backtrace/Unity/Types/BacktraceResultStatus.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Backtrace::Unity::Model
namespace Backtrace::Unity::Model {
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Exception
  class Exception;
}
// Completed forward declares
// Type namespace: Backtrace.Unity.Model
namespace Backtrace::Unity::Model {
  // Forward declaring type: BacktraceResult
  class BacktraceResult;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Backtrace::Unity::Model::BacktraceResult);
DEFINE_IL2CPP_ARG_TYPE(::Backtrace::Unity::Model::BacktraceResult*, "Backtrace.Unity.Model", "BacktraceResult");
// Type namespace: Backtrace.Unity.Model
namespace Backtrace::Unity::Model {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: Backtrace.Unity.Model.BacktraceResult
  // [TokenAttribute] Offset: FFFFFFFF
  class BacktraceResult : public ::Il2CppObject {
    public:
    // Nested type: ::Backtrace::Unity::Model::BacktraceResult::BacktraceRawResult
    class BacktraceRawResult;
    public:
    // public Backtrace.Unity.Model.BacktraceResult InnerExceptionResult
    // Size: 0x8
    // Offset: 0x10
    ::Backtrace::Unity::Model::BacktraceResult* InnerExceptionResult;
    // Field size check
    static_assert(sizeof(::Backtrace::Unity::Model::BacktraceResult*) == 0x8);
    // public System.String message
    // Size: 0x8
    // Offset: 0x18
    ::StringW message;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String response
    // Size: 0x8
    // Offset: 0x20
    ::StringW response;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public Backtrace.Unity.Types.BacktraceResultStatus Status
    // Size: 0x4
    // Offset: 0x28
    ::Backtrace::Unity::Types::BacktraceResultStatus Status;
    // Field size check
    static_assert(sizeof(::Backtrace::Unity::Types::BacktraceResultStatus) == 0x4);
    // Padding between fields: Status and: object
    char __padding3[0x4] = {};
    // private System.String object
    // Size: 0x8
    // Offset: 0x30
    ::StringW object;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String _rxId
    // Size: 0x8
    // Offset: 0x38
    ::StringW rxId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: public Backtrace.Unity.Model.BacktraceResult InnerExceptionResult
    [[deprecated("Use field access instead!")]] ::Backtrace::Unity::Model::BacktraceResult*& dyn_InnerExceptionResult();
    // Get instance field reference: public System.String message
    [[deprecated("Use field access instead!")]] ::StringW& dyn_message();
    // Get instance field reference: public System.String response
    [[deprecated("Use field access instead!")]] ::StringW& dyn_response();
    // Get instance field reference: public Backtrace.Unity.Types.BacktraceResultStatus Status
    [[deprecated("Use field access instead!")]] ::Backtrace::Unity::Types::BacktraceResultStatus& dyn_Status();
    // Get instance field reference: private System.String object
    [[deprecated("Use field access instead!")]] ::StringW& dyn_object();
    // Get instance field reference: public System.String _rxId
    [[deprecated("Use field access instead!")]] ::StringW& dyn__rxId();
    // public System.String get_Message()
    // Offset: 0x2A63D20
    ::StringW get_Message();
    // public System.Void set_Message(System.String value)
    // Offset: 0x2A63D28
    void set_Message(::StringW value);
    // public System.String get_Object()
    // Offset: 0x2A63D30
    ::StringW get_Object();
    // public System.Void set_Object(System.String value)
    // Offset: 0x2A63D38
    void set_Object(::StringW value);
    // public System.String get_RxId()
    // Offset: 0x2A63D5C
    ::StringW get_RxId();
    // public System.Void set_RxId(System.String value)
    // Offset: 0x2A63D64
    void set_RxId(::StringW value);
    // static Backtrace.Unity.Model.BacktraceResult OnLimitReached()
    // Offset: 0x2A63D88
    static ::Backtrace::Unity::Model::BacktraceResult* OnLimitReached();
    // static Backtrace.Unity.Model.BacktraceResult OnNetworkError(System.Exception exception)
    // Offset: 0x2A59250
    static ::Backtrace::Unity::Model::BacktraceResult* OnNetworkError(::System::Exception* exception);
    // System.Void AddInnerResult(Backtrace.Unity.Model.BacktraceResult innerResult)
    // Offset: 0x2A63E0C
    void AddInnerResult(::Backtrace::Unity::Model::BacktraceResult* innerResult);
    // static public Backtrace.Unity.Model.BacktraceResult FromJson(System.String json)
    // Offset: 0x2A590A8
    static ::Backtrace::Unity::Model::BacktraceResult* FromJson(::StringW json);
    // public System.Void .ctor()
    // Offset: 0x2A59098
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BacktraceResult* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Backtrace::Unity::Model::BacktraceResult::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BacktraceResult*, creationType>()));
    }
  }; // Backtrace.Unity.Model.BacktraceResult
  #pragma pack(pop)
  static check_size<sizeof(BacktraceResult), 56 + sizeof(::StringW)> __Backtrace_Unity_Model_BacktraceResultSizeCheck;
  static_assert(sizeof(BacktraceResult) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceResult::get_Message
// Il2CppName: get_Message
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Backtrace::Unity::Model::BacktraceResult::*)()>(&Backtrace::Unity::Model::BacktraceResult::get_Message)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceResult*), "get_Message", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceResult::set_Message
// Il2CppName: set_Message
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Model::BacktraceResult::*)(::StringW)>(&Backtrace::Unity::Model::BacktraceResult::set_Message)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceResult*), "set_Message", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceResult::get_Object
// Il2CppName: get_Object
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Backtrace::Unity::Model::BacktraceResult::*)()>(&Backtrace::Unity::Model::BacktraceResult::get_Object)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceResult*), "get_Object", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceResult::set_Object
// Il2CppName: set_Object
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Model::BacktraceResult::*)(::StringW)>(&Backtrace::Unity::Model::BacktraceResult::set_Object)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceResult*), "set_Object", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceResult::get_RxId
// Il2CppName: get_RxId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Backtrace::Unity::Model::BacktraceResult::*)()>(&Backtrace::Unity::Model::BacktraceResult::get_RxId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceResult*), "get_RxId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceResult::set_RxId
// Il2CppName: set_RxId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Model::BacktraceResult::*)(::StringW)>(&Backtrace::Unity::Model::BacktraceResult::set_RxId)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceResult*), "set_RxId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceResult::OnLimitReached
// Il2CppName: OnLimitReached
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Backtrace::Unity::Model::BacktraceResult* (*)()>(&Backtrace::Unity::Model::BacktraceResult::OnLimitReached)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceResult*), "OnLimitReached", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceResult::OnNetworkError
// Il2CppName: OnNetworkError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Backtrace::Unity::Model::BacktraceResult* (*)(::System::Exception*)>(&Backtrace::Unity::Model::BacktraceResult::OnNetworkError)> {
  static const MethodInfo* get() {
    static auto* exception = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceResult*), "OnNetworkError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{exception});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceResult::AddInnerResult
// Il2CppName: AddInnerResult
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Model::BacktraceResult::*)(::Backtrace::Unity::Model::BacktraceResult*)>(&Backtrace::Unity::Model::BacktraceResult::AddInnerResult)> {
  static const MethodInfo* get() {
    static auto* innerResult = &::il2cpp_utils::GetClassFromName("Backtrace.Unity.Model", "BacktraceResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceResult*), "AddInnerResult", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{innerResult});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceResult::FromJson
// Il2CppName: FromJson
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Backtrace::Unity::Model::BacktraceResult* (*)(::StringW)>(&Backtrace::Unity::Model::BacktraceResult::FromJson)> {
  static const MethodInfo* get() {
    static auto* json = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceResult*), "FromJson", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{json});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceResult::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
