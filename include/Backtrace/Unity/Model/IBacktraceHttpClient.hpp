// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Backtrace::Unity::Json
namespace Backtrace::Unity::Json {
  // Forward declaring type: BacktraceJObject
  class BacktraceJObject;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`3<T1, T2, T3>
  template<typename T1, typename T2, typename T3>
  class Action_3;
}
// Forward declaring namespace: UnityEngine::Networking
namespace UnityEngine::Networking {
  // Forward declaring type: UnityWebRequest
  class UnityWebRequest;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
  // Forward declaring type: IDictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class IDictionary_2;
}
// Completed forward declares
// Type namespace: Backtrace.Unity.Model
namespace Backtrace::Unity::Model {
  // Forward declaring type: IBacktraceHttpClient
  class IBacktraceHttpClient;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Backtrace::Unity::Model::IBacktraceHttpClient);
DEFINE_IL2CPP_ARG_TYPE(::Backtrace::Unity::Model::IBacktraceHttpClient*, "Backtrace.Unity.Model", "IBacktraceHttpClient");
// Type namespace: Backtrace.Unity.Model
namespace Backtrace::Unity::Model {
  // Size: 0x0
  #pragma pack(push, 1)
  // Autogenerated type: Backtrace.Unity.Model.IBacktraceHttpClient
  // [TokenAttribute] Offset: FFFFFFFF
  class IBacktraceHttpClient {
    public:
    // public System.Boolean get_IgnoreSslValidation()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_IgnoreSslValidation();
    // public System.Void set_IgnoreSslValidation(System.Boolean value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_IgnoreSslValidation(bool value);
    // public System.Void Post(System.String submissionUrl, Backtrace.Unity.Json.BacktraceJObject jObject, System.Action`3<System.Int64,System.Boolean,System.String> onComplete)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Post(::StringW submissionUrl, ::Backtrace::Unity::Json::BacktraceJObject* jObject, ::System::Action_3<int64_t, bool, ::StringW>* onComplete);
    // public UnityEngine.Networking.UnityWebRequest Post(System.String submissionUrl, System.String json, System.Collections.Generic.IEnumerable`1<System.String> attachments, System.Collections.Generic.IDictionary`2<System.String,System.String> attributes)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::UnityEngine::Networking::UnityWebRequest* Post(::StringW submissionUrl, ::StringW json, ::System::Collections::Generic::IEnumerable_1<::StringW>* attachments, ::System::Collections::Generic::IDictionary_2<::StringW, ::StringW>* attributes);
    // public UnityEngine.Networking.UnityWebRequest Post(System.String submissionUrl, System.Byte[] minidump, System.Collections.Generic.IEnumerable`1<System.String> attachments, System.Collections.Generic.IDictionary`2<System.String,System.String> attributes)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::UnityEngine::Networking::UnityWebRequest* Post(::StringW submissionUrl, ::ArrayW<uint8_t> minidump, ::System::Collections::Generic::IEnumerable_1<::StringW>* attachments, ::System::Collections::Generic::IDictionary_2<::StringW, ::StringW>* attributes);
  }; // Backtrace.Unity.Model.IBacktraceHttpClient
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Backtrace::Unity::Model::IBacktraceHttpClient::get_IgnoreSslValidation
// Il2CppName: get_IgnoreSslValidation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Backtrace::Unity::Model::IBacktraceHttpClient::*)()>(&Backtrace::Unity::Model::IBacktraceHttpClient::get_IgnoreSslValidation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::IBacktraceHttpClient*), "get_IgnoreSslValidation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::IBacktraceHttpClient::set_IgnoreSslValidation
// Il2CppName: set_IgnoreSslValidation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Model::IBacktraceHttpClient::*)(bool)>(&Backtrace::Unity::Model::IBacktraceHttpClient::set_IgnoreSslValidation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::IBacktraceHttpClient*), "set_IgnoreSslValidation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::IBacktraceHttpClient::Post
// Il2CppName: Post
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Model::IBacktraceHttpClient::*)(::StringW, ::Backtrace::Unity::Json::BacktraceJObject*, ::System::Action_3<int64_t, bool, ::StringW>*)>(&Backtrace::Unity::Model::IBacktraceHttpClient::Post)> {
  static const MethodInfo* get() {
    static auto* submissionUrl = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* jObject = &::il2cpp_utils::GetClassFromName("Backtrace.Unity.Json", "BacktraceJObject")->byval_arg;
    static auto* onComplete = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`3"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int64"), ::il2cpp_utils::GetClassFromName("System", "Boolean"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::IBacktraceHttpClient*), "Post", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{submissionUrl, jObject, onComplete});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::IBacktraceHttpClient::Post
// Il2CppName: Post
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Networking::UnityWebRequest* (Backtrace::Unity::Model::IBacktraceHttpClient::*)(::StringW, ::StringW, ::System::Collections::Generic::IEnumerable_1<::StringW>*, ::System::Collections::Generic::IDictionary_2<::StringW, ::StringW>*)>(&Backtrace::Unity::Model::IBacktraceHttpClient::Post)> {
  static const MethodInfo* get() {
    static auto* submissionUrl = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* json = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* attachments = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IEnumerable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    static auto* attributes = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IDictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::IBacktraceHttpClient*), "Post", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{submissionUrl, json, attachments, attributes});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::IBacktraceHttpClient::Post
// Il2CppName: Post
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Networking::UnityWebRequest* (Backtrace::Unity::Model::IBacktraceHttpClient::*)(::StringW, ::ArrayW<uint8_t>, ::System::Collections::Generic::IEnumerable_1<::StringW>*, ::System::Collections::Generic::IDictionary_2<::StringW, ::StringW>*)>(&Backtrace::Unity::Model::IBacktraceHttpClient::Post)> {
  static const MethodInfo* get() {
    static auto* submissionUrl = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* minidump = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* attachments = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IEnumerable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    static auto* attributes = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IDictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::IBacktraceHttpClient*), "Post", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{submissionUrl, minidump, attachments, attributes});
  }
};
