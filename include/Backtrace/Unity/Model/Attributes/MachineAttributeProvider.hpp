// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Backtrace.Unity.Model.Attributes.IScopeAttributeProvider
#include "Backtrace/Unity/Model/Attributes/IScopeAttributeProvider.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Backtrace::Unity::Model
namespace Backtrace::Unity::Model {
  // Forward declaring type: MachineIdStorage
  class MachineIdStorage;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IDictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class IDictionary_2;
}
// Completed forward declares
// Type namespace: Backtrace.Unity.Model.Attributes
namespace Backtrace::Unity::Model::Attributes {
  // Forward declaring type: MachineAttributeProvider
  class MachineAttributeProvider;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Backtrace::Unity::Model::Attributes::MachineAttributeProvider);
DEFINE_IL2CPP_ARG_TYPE(::Backtrace::Unity::Model::Attributes::MachineAttributeProvider*, "Backtrace.Unity.Model.Attributes", "MachineAttributeProvider");
// Type namespace: Backtrace.Unity.Model.Attributes
namespace Backtrace::Unity::Model::Attributes {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: Backtrace.Unity.Model.Attributes.MachineAttributeProvider
  // [TokenAttribute] Offset: FFFFFFFF
  class MachineAttributeProvider : public ::Il2CppObject/*, public ::Backtrace::Unity::Model::Attributes::IScopeAttributeProvider*/ {
    public:
    public:
    // private readonly Backtrace.Unity.Model.MachineIdStorage _machineIdStorage
    // Size: 0x8
    // Offset: 0x10
    ::Backtrace::Unity::Model::MachineIdStorage* machineIdStorage;
    // Field size check
    static_assert(sizeof(::Backtrace::Unity::Model::MachineIdStorage*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Backtrace::Unity::Model::Attributes::IScopeAttributeProvider
    operator ::Backtrace::Unity::Model::Attributes::IScopeAttributeProvider() noexcept {
      return *reinterpret_cast<::Backtrace::Unity::Model::Attributes::IScopeAttributeProvider*>(this);
    }
    // Creating conversion operator: operator ::Backtrace::Unity::Model::MachineIdStorage*
    constexpr operator ::Backtrace::Unity::Model::MachineIdStorage*() const noexcept {
      return machineIdStorage;
    }
    // Get instance field reference: private readonly Backtrace.Unity.Model.MachineIdStorage _machineIdStorage
    [[deprecated("Use field access instead!")]] ::Backtrace::Unity::Model::MachineIdStorage*& dyn__machineIdStorage();
    // public System.Void GetAttributes(System.Collections.Generic.IDictionary`2<System.String,System.String> attributes)
    // Offset: 0x2A72318
    void GetAttributes(::System::Collections::Generic::IDictionary_2<::StringW, ::StringW>* attributes);
    // private System.Void IncludeOsInformation(System.Collections.Generic.IDictionary`2<System.String,System.String> attributes)
    // Offset: 0x2A72AC8
    void IncludeOsInformation(::System::Collections::Generic::IDictionary_2<::StringW, ::StringW>* attributes);
    // private System.Void IncludeGraphicCardInformation(System.Collections.Generic.IDictionary`2<System.String,System.String> attributes)
    // Offset: 0x2A7240C
    void IncludeGraphicCardInformation(::System::Collections::Generic::IDictionary_2<::StringW, ::StringW>* attributes);
    // public System.Void .ctor()
    // Offset: 0x2A6B0F0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MachineAttributeProvider* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Backtrace::Unity::Model::Attributes::MachineAttributeProvider::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MachineAttributeProvider*, creationType>()));
    }
  }; // Backtrace.Unity.Model.Attributes.MachineAttributeProvider
  #pragma pack(pop)
  static check_size<sizeof(MachineAttributeProvider), 16 + sizeof(::Backtrace::Unity::Model::MachineIdStorage*)> __Backtrace_Unity_Model_Attributes_MachineAttributeProviderSizeCheck;
  static_assert(sizeof(MachineAttributeProvider) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Backtrace::Unity::Model::Attributes::MachineAttributeProvider::GetAttributes
// Il2CppName: GetAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Model::Attributes::MachineAttributeProvider::*)(::System::Collections::Generic::IDictionary_2<::StringW, ::StringW>*)>(&Backtrace::Unity::Model::Attributes::MachineAttributeProvider::GetAttributes)> {
  static const MethodInfo* get() {
    static auto* attributes = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IDictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::Attributes::MachineAttributeProvider*), "GetAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributes});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::Attributes::MachineAttributeProvider::IncludeOsInformation
// Il2CppName: IncludeOsInformation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Model::Attributes::MachineAttributeProvider::*)(::System::Collections::Generic::IDictionary_2<::StringW, ::StringW>*)>(&Backtrace::Unity::Model::Attributes::MachineAttributeProvider::IncludeOsInformation)> {
  static const MethodInfo* get() {
    static auto* attributes = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IDictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::Attributes::MachineAttributeProvider*), "IncludeOsInformation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributes});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::Attributes::MachineAttributeProvider::IncludeGraphicCardInformation
// Il2CppName: IncludeGraphicCardInformation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Model::Attributes::MachineAttributeProvider::*)(::System::Collections::Generic::IDictionary_2<::StringW, ::StringW>*)>(&Backtrace::Unity::Model::Attributes::MachineAttributeProvider::IncludeGraphicCardInformation)> {
  static const MethodInfo* get() {
    static auto* attributes = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IDictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::Attributes::MachineAttributeProvider*), "IncludeGraphicCardInformation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributes});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::Attributes::MachineAttributeProvider::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
