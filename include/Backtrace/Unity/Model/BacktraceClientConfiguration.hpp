// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
// Including type: Backtrace.Unity.Types.MiniDumpType
#include "Backtrace/Unity/Types/MiniDumpType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: Backtrace.Unity.Model
namespace Backtrace::Unity::Model {
  // Forward declaring type: BacktraceClientConfiguration
  class BacktraceClientConfiguration;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Backtrace::Unity::Model::BacktraceClientConfiguration);
DEFINE_IL2CPP_ARG_TYPE(::Backtrace::Unity::Model::BacktraceClientConfiguration*, "Backtrace.Unity.Model", "BacktraceClientConfiguration");
// Type namespace: Backtrace.Unity.Model
namespace Backtrace::Unity::Model {
  // Size: 0x34
  #pragma pack(push, 1)
  // Autogenerated type: Backtrace.Unity.Model.BacktraceClientConfiguration
  // [TokenAttribute] Offset: FFFFFFFF
  class BacktraceClientConfiguration : public ::UnityEngine::ScriptableObject {
    public:
    public:
    // public System.String ServerUrl
    // Size: 0x8
    // Offset: 0x18
    ::StringW ServerUrl;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Int32 ReportPerMin
    // Size: 0x4
    // Offset: 0x20
    int ReportPerMin;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean HandleUnhandledExceptions
    // Size: 0x1
    // Offset: 0x24
    bool HandleUnhandledExceptions;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean IgnoreSslValidation
    // Size: 0x1
    // Offset: 0x25
    bool IgnoreSslValidation;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean DestroyOnLoad
    // Size: 0x1
    // Offset: 0x26
    bool DestroyOnLoad;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean HandleANR
    // Size: 0x1
    // Offset: 0x27
    bool HandleANR;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean OomReports
    // Size: 0x1
    // Offset: 0x28
    bool OomReports;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: OomReports and: GameObjectDepth
    char __padding6[0x3] = {};
    // public System.Int32 GameObjectDepth
    // Size: 0x4
    // Offset: 0x2C
    int GameObjectDepth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public Backtrace.Unity.Types.MiniDumpType MinidumpType
    // Size: 0x4
    // Offset: 0x30
    ::Backtrace::Unity::Types::MiniDumpType MinidumpType;
    // Field size check
    static_assert(sizeof(::Backtrace::Unity::Types::MiniDumpType) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.String ServerUrl
    [[deprecated("Use field access instead!")]] ::StringW& dyn_ServerUrl();
    // Get instance field reference: public System.Int32 ReportPerMin
    [[deprecated("Use field access instead!")]] int& dyn_ReportPerMin();
    // Get instance field reference: public System.Boolean HandleUnhandledExceptions
    [[deprecated("Use field access instead!")]] bool& dyn_HandleUnhandledExceptions();
    // Get instance field reference: public System.Boolean IgnoreSslValidation
    [[deprecated("Use field access instead!")]] bool& dyn_IgnoreSslValidation();
    // Get instance field reference: public System.Boolean DestroyOnLoad
    [[deprecated("Use field access instead!")]] bool& dyn_DestroyOnLoad();
    // Get instance field reference: public System.Boolean HandleANR
    [[deprecated("Use field access instead!")]] bool& dyn_HandleANR();
    // Get instance field reference: public System.Boolean OomReports
    [[deprecated("Use field access instead!")]] bool& dyn_OomReports();
    // Get instance field reference: public System.Int32 GameObjectDepth
    [[deprecated("Use field access instead!")]] int& dyn_GameObjectDepth();
    // Get instance field reference: public Backtrace.Unity.Types.MiniDumpType MinidumpType
    [[deprecated("Use field access instead!")]] ::Backtrace::Unity::Types::MiniDumpType& dyn_MinidumpType();
    // public System.Void UpdateServerUrl()
    // Offset: 0x2A6156C
    void UpdateServerUrl();
    // public System.Boolean ValidateServerUrl()
    // Offset: 0x2A61744
    bool ValidateServerUrl();
    // public System.Void .ctor()
    // Offset: 0x2A61940
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BacktraceClientConfiguration* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Backtrace::Unity::Model::BacktraceClientConfiguration::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BacktraceClientConfiguration*, creationType>()));
    }
  }; // Backtrace.Unity.Model.BacktraceClientConfiguration
  #pragma pack(pop)
  static check_size<sizeof(BacktraceClientConfiguration), 48 + sizeof(::Backtrace::Unity::Types::MiniDumpType)> __Backtrace_Unity_Model_BacktraceClientConfigurationSizeCheck;
  static_assert(sizeof(BacktraceClientConfiguration) == 0x34);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceClientConfiguration::UpdateServerUrl
// Il2CppName: UpdateServerUrl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Backtrace::Unity::Model::BacktraceClientConfiguration::*)()>(&Backtrace::Unity::Model::BacktraceClientConfiguration::UpdateServerUrl)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceClientConfiguration*), "UpdateServerUrl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceClientConfiguration::ValidateServerUrl
// Il2CppName: ValidateServerUrl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Backtrace::Unity::Model::BacktraceClientConfiguration::*)()>(&Backtrace::Unity::Model::BacktraceClientConfiguration::ValidateServerUrl)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::BacktraceClientConfiguration*), "ValidateServerUrl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::BacktraceClientConfiguration::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
