// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Backtrace.Unity.Types.DeduplicationStrategy
#include "Backtrace/Unity/Types/DeduplicationStrategy.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Backtrace::Unity::Model
namespace Backtrace::Unity::Model {
  // Forward declaring type: BacktraceData
  class BacktraceData;
}
// Completed forward declares
// Type namespace: Backtrace.Unity.Model
namespace Backtrace::Unity::Model {
  // Forward declaring type: DeduplicationModel
  class DeduplicationModel;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Backtrace::Unity::Model::DeduplicationModel);
DEFINE_IL2CPP_ARG_TYPE(::Backtrace::Unity::Model::DeduplicationModel*, "Backtrace.Unity.Model", "DeduplicationModel");
// Type namespace: Backtrace.Unity.Model
namespace Backtrace::Unity::Model {
  // Size: 0x1C
  #pragma pack(push, 1)
  // Autogenerated type: Backtrace.Unity.Model.DeduplicationModel
  // [TokenAttribute] Offset: FFFFFFFF
  class DeduplicationModel : public ::Il2CppObject {
    public:
    // Nested type: ::Backtrace::Unity::Model::DeduplicationModel::$$c
    class $$c;
    public:
    // private readonly Backtrace.Unity.Model.BacktraceData _backtraceData
    // Size: 0x8
    // Offset: 0x10
    ::Backtrace::Unity::Model::BacktraceData* backtraceData;
    // Field size check
    static_assert(sizeof(::Backtrace::Unity::Model::BacktraceData*) == 0x8);
    // private readonly Backtrace.Unity.Types.DeduplicationStrategy _strategy
    // Size: 0x4
    // Offset: 0x18
    ::Backtrace::Unity::Types::DeduplicationStrategy strategy;
    // Field size check
    static_assert(sizeof(::Backtrace::Unity::Types::DeduplicationStrategy) == 0x4);
    public:
    // Get instance field reference: private readonly Backtrace.Unity.Model.BacktraceData _backtraceData
    [[deprecated("Use field access instead!")]] ::Backtrace::Unity::Model::BacktraceData*& dyn__backtraceData();
    // Get instance field reference: private readonly Backtrace.Unity.Types.DeduplicationStrategy _strategy
    [[deprecated("Use field access instead!")]] ::Backtrace::Unity::Types::DeduplicationStrategy& dyn__strategy();
    // public System.Void .ctor(Backtrace.Unity.Model.BacktraceData backtraceData, Backtrace.Unity.Types.DeduplicationStrategy strategy)
    // Offset: 0x2A59C6C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DeduplicationModel* New_ctor(::Backtrace::Unity::Model::BacktraceData* backtraceData, ::Backtrace::Unity::Types::DeduplicationStrategy strategy) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Backtrace::Unity::Model::DeduplicationModel::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DeduplicationModel*, creationType>(backtraceData, strategy)));
    }
    // public System.String get_StackTrace()
    // Offset: 0x2A668A0
    ::StringW get_StackTrace();
    // public System.String get_Classifier()
    // Offset: 0x2A66B34
    ::StringW get_Classifier();
    // public System.String get_ExceptionMessage()
    // Offset: 0x2A66BDC
    ::StringW get_ExceptionMessage();
    // public System.String get_Factor()
    // Offset: 0x2A66C78
    ::StringW get_Factor();
    // public System.String GetSha()
    // Offset: 0x2A59CA8
    ::StringW GetSha();
  }; // Backtrace.Unity.Model.DeduplicationModel
  #pragma pack(pop)
  static check_size<sizeof(DeduplicationModel), 24 + sizeof(::Backtrace::Unity::Types::DeduplicationStrategy)> __Backtrace_Unity_Model_DeduplicationModelSizeCheck;
  static_assert(sizeof(DeduplicationModel) == 0x1C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Backtrace::Unity::Model::DeduplicationModel::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Backtrace::Unity::Model::DeduplicationModel::get_StackTrace
// Il2CppName: get_StackTrace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Backtrace::Unity::Model::DeduplicationModel::*)()>(&Backtrace::Unity::Model::DeduplicationModel::get_StackTrace)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::DeduplicationModel*), "get_StackTrace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::DeduplicationModel::get_Classifier
// Il2CppName: get_Classifier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Backtrace::Unity::Model::DeduplicationModel::*)()>(&Backtrace::Unity::Model::DeduplicationModel::get_Classifier)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::DeduplicationModel*), "get_Classifier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::DeduplicationModel::get_ExceptionMessage
// Il2CppName: get_ExceptionMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Backtrace::Unity::Model::DeduplicationModel::*)()>(&Backtrace::Unity::Model::DeduplicationModel::get_ExceptionMessage)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::DeduplicationModel*), "get_ExceptionMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::DeduplicationModel::get_Factor
// Il2CppName: get_Factor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Backtrace::Unity::Model::DeduplicationModel::*)()>(&Backtrace::Unity::Model::DeduplicationModel::get_Factor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::DeduplicationModel*), "get_Factor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Model::DeduplicationModel::GetSha
// Il2CppName: GetSha
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Backtrace::Unity::Model::DeduplicationModel::*)()>(&Backtrace::Unity::Model::DeduplicationModel::GetSha)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Model::DeduplicationModel*), "GetSha", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
