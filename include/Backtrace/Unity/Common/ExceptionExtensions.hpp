// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Backtrace::Unity::Model
namespace Backtrace::Unity::Model {
  // Forward declaring type: BacktraceReport
  class BacktraceReport;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Exception
  class Exception;
}
// Completed forward declares
// Type namespace: Backtrace.Unity.Common
namespace Backtrace::Unity::Common {
  // Forward declaring type: ExceptionExtensions
  class ExceptionExtensions;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Backtrace::Unity::Common::ExceptionExtensions);
DEFINE_IL2CPP_ARG_TYPE(::Backtrace::Unity::Common::ExceptionExtensions*, "Backtrace.Unity.Common", "ExceptionExtensions");
// Type namespace: Backtrace.Unity.Common
namespace Backtrace::Unity::Common {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Backtrace.Unity.Common.ExceptionExtensions
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExtensionAttribute] Offset: FFFFFFFF
  class ExceptionExtensions : public ::Il2CppObject {
    public:
    // static public Backtrace.Unity.Model.BacktraceReport ToBacktraceReport(System.Exception source)
    // Offset: 0x2A78C20
    static ::Backtrace::Unity::Model::BacktraceReport* ToBacktraceReport(::System::Exception* source);
  }; // Backtrace.Unity.Common.ExceptionExtensions
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Backtrace::Unity::Common::ExceptionExtensions::ToBacktraceReport
// Il2CppName: ToBacktraceReport
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Backtrace::Unity::Model::BacktraceReport* (*)(::System::Exception*)>(&Backtrace::Unity::Common::ExceptionExtensions::ToBacktraceReport)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Common::ExceptionExtensions*), "ToBacktraceReport", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source});
  }
};
