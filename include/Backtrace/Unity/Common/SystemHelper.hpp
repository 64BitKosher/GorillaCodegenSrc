// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Backtrace::Unity::Common
namespace Backtrace::Unity::Common {
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IntPtr
  struct IntPtr;
}
// Completed forward declares
// Type namespace: Backtrace.Unity.Common
namespace Backtrace::Unity::Common {
  // Forward declaring type: SystemHelper
  class SystemHelper;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Backtrace::Unity::Common::SystemHelper);
DEFINE_IL2CPP_ARG_TYPE(::Backtrace::Unity::Common::SystemHelper*, "Backtrace.Unity.Common", "SystemHelper");
// Type namespace: Backtrace.Unity.Common
namespace Backtrace::Unity::Common {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Backtrace.Unity.Common.SystemHelper
  // [TokenAttribute] Offset: FFFFFFFF
  class SystemHelper : public ::Il2CppObject {
    public:
    // Nested type: ::Backtrace::Unity::Common::SystemHelper::$$c
    class $$c;
    // static System.UInt32 GetCurrentThreadId()
    // Offset: 0x2A7811C
    static uint GetCurrentThreadId();
    // static System.IntPtr LoadLibrary(System.String lpFileName)
    // Offset: 0x2A786B0
    static ::System::IntPtr LoadLibrary(::StringW lpFileName);
    // static System.Boolean IsLibraryAvailable(System.String libraryName)
    // Offset: 0x2A78748
    static bool IsLibraryAvailable(::StringW libraryName);
    // static System.Boolean IsLibraryAvailable(System.String[] libraries)
    // Offset: 0x2A78244
    static bool IsLibraryAvailable(::ArrayW<::StringW> libraries);
    // static System.String Name()
    // Offset: 0x2A73270
    static ::StringW Name();
    // static System.String CpuArchitecture()
    // Offset: 0x2A73214
    static ::StringW CpuArchitecture();
  }; // Backtrace.Unity.Common.SystemHelper
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Backtrace::Unity::Common::SystemHelper::GetCurrentThreadId
// Il2CppName: GetCurrentThreadId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)()>(&Backtrace::Unity::Common::SystemHelper::GetCurrentThreadId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Common::SystemHelper*), "GetCurrentThreadId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Common::SystemHelper::LoadLibrary
// Il2CppName: LoadLibrary
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (*)(::StringW)>(&Backtrace::Unity::Common::SystemHelper::LoadLibrary)> {
  static const MethodInfo* get() {
    static auto* lpFileName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Common::SystemHelper*), "LoadLibrary", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lpFileName});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Common::SystemHelper::IsLibraryAvailable
// Il2CppName: IsLibraryAvailable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW)>(&Backtrace::Unity::Common::SystemHelper::IsLibraryAvailable)> {
  static const MethodInfo* get() {
    static auto* libraryName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Common::SystemHelper*), "IsLibraryAvailable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{libraryName});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Common::SystemHelper::IsLibraryAvailable
// Il2CppName: IsLibraryAvailable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::ArrayW<::StringW>)>(&Backtrace::Unity::Common::SystemHelper::IsLibraryAvailable)> {
  static const MethodInfo* get() {
    static auto* libraries = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Common::SystemHelper*), "IsLibraryAvailable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{libraries});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Common::SystemHelper::Name
// Il2CppName: Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)()>(&Backtrace::Unity::Common::SystemHelper::Name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Common::SystemHelper*), "Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Common::SystemHelper::CpuArchitecture
// Il2CppName: CpuArchitecture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)()>(&Backtrace::Unity::Common::SystemHelper::CpuArchitecture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Common::SystemHelper*), "CpuArchitecture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
