// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: Backtrace.Unity.Common
namespace Backtrace::Unity::Common {
  // Forward declaring type: TypeHelper
  class TypeHelper;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Backtrace::Unity::Common::TypeHelper);
DEFINE_IL2CPP_ARG_TYPE(::Backtrace::Unity::Common::TypeHelper*, "Backtrace.Unity.Common", "TypeHelper");
// Type namespace: Backtrace.Unity.Common
namespace Backtrace::Unity::Common {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Backtrace.Unity.Common.TypeHelper
  // [TokenAttribute] Offset: FFFFFFFF
  class TypeHelper : public ::Il2CppObject {
    public:
    // Get static field: static private readonly System.Collections.Generic.HashSet`1<System.Type> NumericTypes
    static ::System::Collections::Generic::HashSet_1<::System::Type*>* _get_NumericTypes();
    // Set static field: static private readonly System.Collections.Generic.HashSet`1<System.Type> NumericTypes
    static void _set_NumericTypes(::System::Collections::Generic::HashSet_1<::System::Type*>* value);
    // static public System.Boolean IsNumeric(System.Type myType)
    // Offset: 0x2A78888
    static bool IsNumeric(::System::Type* myType);
    // static private System.Void .cctor()
    // Offset: 0x2A7891C
    static void _cctor();
  }; // Backtrace.Unity.Common.TypeHelper
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Backtrace::Unity::Common::TypeHelper::IsNumeric
// Il2CppName: IsNumeric
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Type*)>(&Backtrace::Unity::Common::TypeHelper::IsNumeric)> {
  static const MethodInfo* get() {
    static auto* myType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Common::TypeHelper*), "IsNumeric", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{myType});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Common::TypeHelper::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Backtrace::Unity::Common::TypeHelper::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Common::TypeHelper*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
