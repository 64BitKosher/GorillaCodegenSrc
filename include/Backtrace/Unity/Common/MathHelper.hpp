// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Type namespace: Backtrace.Unity.Common
namespace Backtrace::Unity::Common {
  // Forward declaring type: MathHelper
  class MathHelper;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Backtrace::Unity::Common::MathHelper);
DEFINE_IL2CPP_ARG_TYPE(::Backtrace::Unity::Common::MathHelper*, "Backtrace.Unity.Common", "MathHelper");
// Type namespace: Backtrace.Unity.Common
namespace Backtrace::Unity::Common {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Backtrace.Unity.Common.MathHelper
  // [TokenAttribute] Offset: FFFFFFFF
  class MathHelper : public ::Il2CppObject {
    public:
    // static public System.Double Clamp(System.Double value, System.Double minimum, System.Double maximum)
    // Offset: 0x2A77EB0
    static double Clamp(double value, double minimum, double maximum);
    // static public System.Double Uniform(System.Double minimum, System.Double maximum)
    // Offset: 0x2A77F34
    static double Uniform(double minimum, double maximum);
  }; // Backtrace.Unity.Common.MathHelper
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Backtrace::Unity::Common::MathHelper::Clamp
// Il2CppName: Clamp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)(double, double, double)>(&Backtrace::Unity::Common::MathHelper::Clamp)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* minimum = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* maximum = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Common::MathHelper*), "Clamp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, minimum, maximum});
  }
};
// Writing MetadataGetter for method: Backtrace::Unity::Common::MathHelper::Uniform
// Il2CppName: Uniform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)(double, double)>(&Backtrace::Unity::Common::MathHelper::Uniform)> {
  static const MethodInfo* get() {
    static auto* minimum = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* maximum = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Backtrace::Unity::Common::MathHelper*), "Uniform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{minimum, maximum});
  }
};
