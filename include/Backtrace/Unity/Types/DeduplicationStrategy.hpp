// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: Backtrace.Unity.Types
namespace Backtrace::Unity::Types {
  // Forward declaring type: DeduplicationStrategy
  struct DeduplicationStrategy;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Backtrace::Unity::Types::DeduplicationStrategy, "Backtrace.Unity.Types", "DeduplicationStrategy");
// Type namespace: Backtrace.Unity.Types
namespace Backtrace::Unity::Types {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: Backtrace.Unity.Types.DeduplicationStrategy
  // [TokenAttribute] Offset: FFFFFFFF
  // [FlagsAttribute] Offset: FFFFFFFF
  struct DeduplicationStrategy/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: DeduplicationStrategy
    constexpr DeduplicationStrategy(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public Backtrace.Unity.Types.DeduplicationStrategy None
    static constexpr const int None = 0;
    // Get static field: static public Backtrace.Unity.Types.DeduplicationStrategy None
    static ::Backtrace::Unity::Types::DeduplicationStrategy _get_None();
    // Set static field: static public Backtrace.Unity.Types.DeduplicationStrategy None
    static void _set_None(::Backtrace::Unity::Types::DeduplicationStrategy value);
    // static field const value: static public Backtrace.Unity.Types.DeduplicationStrategy Default
    static constexpr const int Default = 1;
    // Get static field: static public Backtrace.Unity.Types.DeduplicationStrategy Default
    static ::Backtrace::Unity::Types::DeduplicationStrategy _get_Default();
    // Set static field: static public Backtrace.Unity.Types.DeduplicationStrategy Default
    static void _set_Default(::Backtrace::Unity::Types::DeduplicationStrategy value);
    // static field const value: static public Backtrace.Unity.Types.DeduplicationStrategy Classifier
    static constexpr const int Classifier = 2;
    // Get static field: static public Backtrace.Unity.Types.DeduplicationStrategy Classifier
    static ::Backtrace::Unity::Types::DeduplicationStrategy _get_Classifier();
    // Set static field: static public Backtrace.Unity.Types.DeduplicationStrategy Classifier
    static void _set_Classifier(::Backtrace::Unity::Types::DeduplicationStrategy value);
    // static field const value: static public Backtrace.Unity.Types.DeduplicationStrategy Message
    static constexpr const int Message = 4;
    // Get static field: static public Backtrace.Unity.Types.DeduplicationStrategy Message
    static ::Backtrace::Unity::Types::DeduplicationStrategy _get_Message();
    // Set static field: static public Backtrace.Unity.Types.DeduplicationStrategy Message
    static void _set_Message(::Backtrace::Unity::Types::DeduplicationStrategy value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // Backtrace.Unity.Types.DeduplicationStrategy
  #pragma pack(pop)
  static check_size<sizeof(DeduplicationStrategy), 0 + sizeof(int)> __Backtrace_Unity_Types_DeduplicationStrategySizeCheck;
  static_assert(sizeof(DeduplicationStrategy) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
