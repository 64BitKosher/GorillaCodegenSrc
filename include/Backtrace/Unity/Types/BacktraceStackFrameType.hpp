// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: Backtrace.Unity.Types
namespace Backtrace::Unity::Types {
  // Forward declaring type: BacktraceStackFrameType
  struct BacktraceStackFrameType;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Backtrace::Unity::Types::BacktraceStackFrameType, "Backtrace.Unity.Types", "BacktraceStackFrameType");
// Type namespace: Backtrace.Unity.Types
namespace Backtrace::Unity::Types {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: Backtrace.Unity.Types.BacktraceStackFrameType
  // [TokenAttribute] Offset: FFFFFFFF
  struct BacktraceStackFrameType/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: BacktraceStackFrameType
    constexpr BacktraceStackFrameType(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public Backtrace.Unity.Types.BacktraceStackFrameType Unknown
    static constexpr const int Unknown = 0;
    // Get static field: static public Backtrace.Unity.Types.BacktraceStackFrameType Unknown
    static ::Backtrace::Unity::Types::BacktraceStackFrameType _get_Unknown();
    // Set static field: static public Backtrace.Unity.Types.BacktraceStackFrameType Unknown
    static void _set_Unknown(::Backtrace::Unity::Types::BacktraceStackFrameType value);
    // static field const value: static public Backtrace.Unity.Types.BacktraceStackFrameType Dotnet
    static constexpr const int Dotnet = 1;
    // Get static field: static public Backtrace.Unity.Types.BacktraceStackFrameType Dotnet
    static ::Backtrace::Unity::Types::BacktraceStackFrameType _get_Dotnet();
    // Set static field: static public Backtrace.Unity.Types.BacktraceStackFrameType Dotnet
    static void _set_Dotnet(::Backtrace::Unity::Types::BacktraceStackFrameType value);
    // static field const value: static public Backtrace.Unity.Types.BacktraceStackFrameType Android
    static constexpr const int Android = 2;
    // Get static field: static public Backtrace.Unity.Types.BacktraceStackFrameType Android
    static ::Backtrace::Unity::Types::BacktraceStackFrameType _get_Android();
    // Set static field: static public Backtrace.Unity.Types.BacktraceStackFrameType Android
    static void _set_Android(::Backtrace::Unity::Types::BacktraceStackFrameType value);
    // static field const value: static public Backtrace.Unity.Types.BacktraceStackFrameType Native
    static constexpr const int Native = 3;
    // Get static field: static public Backtrace.Unity.Types.BacktraceStackFrameType Native
    static ::Backtrace::Unity::Types::BacktraceStackFrameType _get_Native();
    // Set static field: static public Backtrace.Unity.Types.BacktraceStackFrameType Native
    static void _set_Native(::Backtrace::Unity::Types::BacktraceStackFrameType value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // Backtrace.Unity.Types.BacktraceStackFrameType
  #pragma pack(pop)
  static check_size<sizeof(BacktraceStackFrameType), 0 + sizeof(int)> __Backtrace_Unity_Types_BacktraceStackFrameTypeSizeCheck;
  static_assert(sizeof(BacktraceStackFrameType) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
