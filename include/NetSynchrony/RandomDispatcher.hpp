// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: NetSynchrony
namespace NetSynchrony {
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: NetSynchrony
namespace NetSynchrony {
  // Forward declaring type: RandomDispatcher
  class RandomDispatcher;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::NetSynchrony::RandomDispatcher);
DEFINE_IL2CPP_ARG_TYPE(::NetSynchrony::RandomDispatcher*, "NetSynchrony", "RandomDispatcher");
// Type namespace: NetSynchrony
namespace NetSynchrony {
  // Size: 0x3C
  #pragma pack(push, 1)
  // Autogenerated type: NetSynchrony.RandomDispatcher
  // [TokenAttribute] Offset: FFFFFFFF
  // [CreateAssetMenuAttribute] Offset: FFFFFFFF
  class RandomDispatcher : public ::UnityEngine::ScriptableObject {
    public:
    // Nested type: ::NetSynchrony::RandomDispatcher::RandomDispatcherEvent
    class RandomDispatcherEvent;
    public:
    // private NetSynchrony.RandomDispatcher/RandomDispatcherEvent Dispatch
    // Size: 0x8
    // Offset: 0x18
    ::NetSynchrony::RandomDispatcher::RandomDispatcherEvent* Dispatch;
    // Field size check
    static_assert(sizeof(::NetSynchrony::RandomDispatcher::RandomDispatcherEvent*) == 0x8);
    // private System.Single minWaitTime
    // Size: 0x4
    // Offset: 0x20
    float minWaitTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single maxWaitTime
    // Size: 0x4
    // Offset: 0x24
    float maxWaitTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single totalMinutes
    // Size: 0x4
    // Offset: 0x28
    float totalMinutes;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: totalMinutes and: dispatchTimes
    char __padding3[0x4] = {};
    // private System.Collections.Generic.List`1<System.Single> dispatchTimes
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::List_1<float>* dispatchTimes;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<float>*) == 0x8);
    // private System.Int32 index
    // Size: 0x4
    // Offset: 0x38
    int index;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private NetSynchrony.RandomDispatcher/RandomDispatcherEvent Dispatch
    [[deprecated("Use field access instead!")]] ::NetSynchrony::RandomDispatcher::RandomDispatcherEvent*& dyn_Dispatch();
    // Get instance field reference: private System.Single minWaitTime
    [[deprecated("Use field access instead!")]] float& dyn_minWaitTime();
    // Get instance field reference: private System.Single maxWaitTime
    [[deprecated("Use field access instead!")]] float& dyn_maxWaitTime();
    // Get instance field reference: private System.Single totalMinutes
    [[deprecated("Use field access instead!")]] float& dyn_totalMinutes();
    // Get instance field reference: private System.Collections.Generic.List`1<System.Single> dispatchTimes
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<float>*& dyn_dispatchTimes();
    // Get instance field reference: private System.Int32 index
    [[deprecated("Use field access instead!")]] int& dyn_index();
    // public System.Void add_Dispatch(NetSynchrony.RandomDispatcher/RandomDispatcherEvent value)
    // Offset: 0x286B14C
    void add_Dispatch(::NetSynchrony::RandomDispatcher::RandomDispatcherEvent* value);
    // public System.Void remove_Dispatch(NetSynchrony.RandomDispatcher/RandomDispatcherEvent value)
    // Offset: 0x286B1E8
    void remove_Dispatch(::NetSynchrony::RandomDispatcher::RandomDispatcherEvent* value);
    // public System.Void Init(System.Double seconds)
    // Offset: 0x286B284
    void Init(double seconds);
    // public System.Void Sync(System.Double seconds)
    // Offset: 0x286B548
    void Sync(double seconds);
    // public System.Void Tick(System.Double seconds)
    // Offset: 0x286B608
    void Tick(double seconds);
    // public System.Void .ctor()
    // Offset: 0x286B700
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RandomDispatcher* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::NetSynchrony::RandomDispatcher::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RandomDispatcher*, creationType>()));
    }
  }; // NetSynchrony.RandomDispatcher
  #pragma pack(pop)
  static check_size<sizeof(RandomDispatcher), 56 + sizeof(int)> __NetSynchrony_RandomDispatcherSizeCheck;
  static_assert(sizeof(RandomDispatcher) == 0x3C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: NetSynchrony::RandomDispatcher::add_Dispatch
// Il2CppName: add_Dispatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NetSynchrony::RandomDispatcher::*)(::NetSynchrony::RandomDispatcher::RandomDispatcherEvent*)>(&NetSynchrony::RandomDispatcher::add_Dispatch)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("NetSynchrony", "RandomDispatcher/RandomDispatcherEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(NetSynchrony::RandomDispatcher*), "add_Dispatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: NetSynchrony::RandomDispatcher::remove_Dispatch
// Il2CppName: remove_Dispatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NetSynchrony::RandomDispatcher::*)(::NetSynchrony::RandomDispatcher::RandomDispatcherEvent*)>(&NetSynchrony::RandomDispatcher::remove_Dispatch)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("NetSynchrony", "RandomDispatcher/RandomDispatcherEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(NetSynchrony::RandomDispatcher*), "remove_Dispatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: NetSynchrony::RandomDispatcher::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NetSynchrony::RandomDispatcher::*)(double)>(&NetSynchrony::RandomDispatcher::Init)> {
  static const MethodInfo* get() {
    static auto* seconds = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(NetSynchrony::RandomDispatcher*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{seconds});
  }
};
// Writing MetadataGetter for method: NetSynchrony::RandomDispatcher::Sync
// Il2CppName: Sync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NetSynchrony::RandomDispatcher::*)(double)>(&NetSynchrony::RandomDispatcher::Sync)> {
  static const MethodInfo* get() {
    static auto* seconds = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(NetSynchrony::RandomDispatcher*), "Sync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{seconds});
  }
};
// Writing MetadataGetter for method: NetSynchrony::RandomDispatcher::Tick
// Il2CppName: Tick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NetSynchrony::RandomDispatcher::*)(double)>(&NetSynchrony::RandomDispatcher::Tick)> {
  static const MethodInfo* get() {
    static auto* seconds = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(NetSynchrony::RandomDispatcher*), "Tick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{seconds});
  }
};
// Writing MetadataGetter for method: NetSynchrony::RandomDispatcher::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
