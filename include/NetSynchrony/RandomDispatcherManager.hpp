// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: NetSynchrony
namespace NetSynchrony {
  // Forward declaring type: RandomDispatcher
  class RandomDispatcher;
}
// Completed forward declares
// Type namespace: NetSynchrony
namespace NetSynchrony {
  // Forward declaring type: RandomDispatcherManager
  class RandomDispatcherManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::NetSynchrony::RandomDispatcherManager);
DEFINE_IL2CPP_ARG_TYPE(::NetSynchrony::RandomDispatcherManager*, "NetSynchrony", "RandomDispatcherManager");
// Type namespace: NetSynchrony
namespace NetSynchrony {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: NetSynchrony.RandomDispatcherManager
  // [TokenAttribute] Offset: FFFFFFFF
  class RandomDispatcherManager : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private NetSynchrony.RandomDispatcher[] randomDispatchers
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::NetSynchrony::RandomDispatcher*> randomDispatchers;
    // Field size check
    static_assert(sizeof(::ArrayW<::NetSynchrony::RandomDispatcher*>) == 0x8);
    // private System.Double serverTime
    // Size: 0x8
    // Offset: 0x28
    double serverTime;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    public:
    // Get static field: static private NetSynchrony.RandomDispatcherManager __instance
    static ::NetSynchrony::RandomDispatcherManager* _get___instance();
    // Set static field: static private NetSynchrony.RandomDispatcherManager __instance
    static void _set___instance(::NetSynchrony::RandomDispatcherManager* value);
    // Get instance field reference: private NetSynchrony.RandomDispatcher[] randomDispatchers
    [[deprecated("Use field access instead!")]] ::ArrayW<::NetSynchrony::RandomDispatcher*>& dyn_randomDispatchers();
    // Get instance field reference: private System.Double serverTime
    [[deprecated("Use field access instead!")]] double& dyn_serverTime();
    // private System.Void OnDisable()
    // Offset: 0x286B86C
    void OnDisable();
    // private System.Void OnTimeChanged()
    // Offset: 0x286B9F4
    void OnTimeChanged();
    // private System.Void AdjustedServerTime()
    // Offset: 0x286BA58
    void AdjustedServerTime();
    // private System.Void Start()
    // Offset: 0x286BB1C
    void Start();
    // private System.Void Update()
    // Offset: 0x286BC5C
    void Update();
    // public System.Void .ctor()
    // Offset: 0x286BCDC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RandomDispatcherManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::NetSynchrony::RandomDispatcherManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RandomDispatcherManager*, creationType>()));
    }
  }; // NetSynchrony.RandomDispatcherManager
  #pragma pack(pop)
  static check_size<sizeof(RandomDispatcherManager), 40 + sizeof(double)> __NetSynchrony_RandomDispatcherManagerSizeCheck;
  static_assert(sizeof(RandomDispatcherManager) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: NetSynchrony::RandomDispatcherManager::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NetSynchrony::RandomDispatcherManager::*)()>(&NetSynchrony::RandomDispatcherManager::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NetSynchrony::RandomDispatcherManager*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NetSynchrony::RandomDispatcherManager::OnTimeChanged
// Il2CppName: OnTimeChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NetSynchrony::RandomDispatcherManager::*)()>(&NetSynchrony::RandomDispatcherManager::OnTimeChanged)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NetSynchrony::RandomDispatcherManager*), "OnTimeChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NetSynchrony::RandomDispatcherManager::AdjustedServerTime
// Il2CppName: AdjustedServerTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NetSynchrony::RandomDispatcherManager::*)()>(&NetSynchrony::RandomDispatcherManager::AdjustedServerTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NetSynchrony::RandomDispatcherManager*), "AdjustedServerTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NetSynchrony::RandomDispatcherManager::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NetSynchrony::RandomDispatcherManager::*)()>(&NetSynchrony::RandomDispatcherManager::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NetSynchrony::RandomDispatcherManager*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NetSynchrony::RandomDispatcherManager::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NetSynchrony::RandomDispatcherManager::*)()>(&NetSynchrony::RandomDispatcherManager::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NetSynchrony::RandomDispatcherManager*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NetSynchrony::RandomDispatcherManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
