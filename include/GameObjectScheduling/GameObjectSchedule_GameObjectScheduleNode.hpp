// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: GameObjectScheduling.GameObjectSchedule
#include "GameObjectScheduling/GameObjectSchedule.hpp"
// Including type: System.DateTime
#include "System/DateTime.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GameObjectScheduling::GameObjectSchedule::GameObjectScheduleNode);
DEFINE_IL2CPP_ARG_TYPE(::GameObjectScheduling::GameObjectSchedule::GameObjectScheduleNode*, "GameObjectScheduling", "GameObjectSchedule/GameObjectScheduleNode");
// Type namespace: GameObjectScheduling
namespace GameObjectScheduling {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: GameObjectScheduling.GameObjectSchedule/GameObjectScheduleNode
  // [TokenAttribute] Offset: FFFFFFFF
  class GameObjectSchedule::GameObjectScheduleNode : public ::Il2CppObject {
    public:
    public:
    // private System.String activeDateTime
    // Size: 0x8
    // Offset: 0x10
    ::StringW activeDateTime;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean activeState
    // Size: 0x1
    // Offset: 0x18
    bool activeState;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: activeState and: dateTime
    char __padding1[0x7] = {};
    // private System.DateTime dateTime
    // Size: 0x8
    // Offset: 0x20
    ::System::DateTime dateTime;
    // Field size check
    static_assert(sizeof(::System::DateTime) == 0x8);
    public:
    // Get instance field reference: private System.String activeDateTime
    [[deprecated("Use field access instead!")]] ::StringW& dyn_activeDateTime();
    // Get instance field reference: private System.Boolean activeState
    [[deprecated("Use field access instead!")]] bool& dyn_activeState();
    // Get instance field reference: private System.DateTime dateTime
    [[deprecated("Use field access instead!")]] ::System::DateTime& dyn_dateTime();
    // public System.Boolean get_ActiveState()
    // Offset: 0x28CE7BC
    bool get_ActiveState();
    // public System.DateTime get_DateTime()
    // Offset: 0x28CE7C4
    ::System::DateTime get_DateTime();
    // public System.Void Validate()
    // Offset: 0x28CE678
    void Validate();
    // public System.Void .ctor()
    // Offset: 0x28CE7CC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GameObjectSchedule::GameObjectScheduleNode* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GameObjectScheduling::GameObjectSchedule::GameObjectScheduleNode::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GameObjectSchedule::GameObjectScheduleNode*, creationType>()));
    }
  }; // GameObjectScheduling.GameObjectSchedule/GameObjectScheduleNode
  #pragma pack(pop)
  static check_size<sizeof(GameObjectSchedule::GameObjectScheduleNode), 32 + sizeof(::System::DateTime)> __GameObjectScheduling_GameObjectSchedule_GameObjectScheduleNodeSizeCheck;
  static_assert(sizeof(GameObjectSchedule::GameObjectScheduleNode) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GameObjectScheduling::GameObjectSchedule::GameObjectScheduleNode::get_ActiveState
// Il2CppName: get_ActiveState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GameObjectScheduling::GameObjectSchedule::GameObjectScheduleNode::*)()>(&GameObjectScheduling::GameObjectSchedule::GameObjectScheduleNode::get_ActiveState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObjectScheduling::GameObjectSchedule::GameObjectScheduleNode*), "get_ActiveState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameObjectScheduling::GameObjectSchedule::GameObjectScheduleNode::get_DateTime
// Il2CppName: get_DateTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTime (GameObjectScheduling::GameObjectSchedule::GameObjectScheduleNode::*)()>(&GameObjectScheduling::GameObjectSchedule::GameObjectScheduleNode::get_DateTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObjectScheduling::GameObjectSchedule::GameObjectScheduleNode*), "get_DateTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameObjectScheduling::GameObjectSchedule::GameObjectScheduleNode::Validate
// Il2CppName: Validate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameObjectScheduling::GameObjectSchedule::GameObjectScheduleNode::*)()>(&GameObjectScheduling::GameObjectSchedule::GameObjectScheduleNode::Validate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObjectScheduling::GameObjectSchedule::GameObjectScheduleNode*), "Validate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameObjectScheduling::GameObjectSchedule::GameObjectScheduleNode::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
