// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GameObjectScheduling
namespace GameObjectScheduling {
  // Forward declaring type: CountdownTextDate
  class CountdownTextDate;
}
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TMP_Text
  class TMP_Text;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Coroutine
  class Coroutine;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: DateTime
  struct DateTime;
}
// Completed forward declares
// Type namespace: GameObjectScheduling
namespace GameObjectScheduling {
  // Forward declaring type: CountdownText
  class CountdownText;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GameObjectScheduling::CountdownText);
DEFINE_IL2CPP_ARG_TYPE(::GameObjectScheduling::CountdownText*, "GameObjectScheduling", "CountdownText");
// Type namespace: GameObjectScheduling
namespace GameObjectScheduling {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: GameObjectScheduling.CountdownText
  // [TokenAttribute] Offset: FFFFFFFF
  class CountdownText : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GameObjectScheduling::CountdownText::TimeChunk
    struct TimeChunk;
    // Nested type: ::GameObjectScheduling::CountdownText::$MonitorTime$d__8
    class $MonitorTime$d__8;
    public:
    // private GameObjectScheduling.CountdownTextDate CountdownTo
    // Size: 0x8
    // Offset: 0x20
    ::GameObjectScheduling::CountdownTextDate* CountdownTo;
    // Field size check
    static_assert(sizeof(::GameObjectScheduling::CountdownTextDate*) == 0x8);
    // private TMPro.TMP_Text displayText
    // Size: 0x8
    // Offset: 0x28
    ::TMPro::TMP_Text* displayText;
    // Field size check
    static_assert(sizeof(::TMPro::TMP_Text*) == 0x8);
    // private System.String displayTextFormat
    // Size: 0x8
    // Offset: 0x30
    ::StringW displayTextFormat;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private UnityEngine.Coroutine monitor
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Coroutine* monitor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Coroutine*) == 0x8);
    public:
    // Get instance field reference: private GameObjectScheduling.CountdownTextDate CountdownTo
    [[deprecated("Use field access instead!")]] ::GameObjectScheduling::CountdownTextDate*& dyn_CountdownTo();
    // Get instance field reference: private TMPro.TMP_Text displayText
    [[deprecated("Use field access instead!")]] ::TMPro::TMP_Text*& dyn_displayText();
    // Get instance field reference: private System.String displayTextFormat
    [[deprecated("Use field access instead!")]] ::StringW& dyn_displayTextFormat();
    // Get instance field reference: private UnityEngine.Coroutine monitor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Coroutine*& dyn_monitor();
    // private System.Void Awake()
    // Offset: 0x28CDBAC
    void Awake();
    // private System.Void OnEnable()
    // Offset: 0x28CDC94
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0x28CDD50
    void OnDisable();
    // private System.Collections.IEnumerator MonitorTime()
    // Offset: 0x28CDCE4
    ::System::Collections::IEnumerator* MonitorTime();
    // private System.String getTimeChunkString(GameObjectScheduling.CountdownText/TimeChunk chunk, System.Int32 n)
    // Offset: 0x28CDDA4
    ::StringW getTimeChunkString(::GameObjectScheduling::CountdownText::TimeChunk chunk, int n);
    // private System.DateTime TryParseDateTime()
    // Offset: 0x28CDE94
    ::System::DateTime TryParseDateTime();
    // public System.Void .ctor()
    // Offset: 0x28CDFDC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CountdownText* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GameObjectScheduling::CountdownText::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CountdownText*, creationType>()));
    }
  }; // GameObjectScheduling.CountdownText
  #pragma pack(pop)
  static check_size<sizeof(CountdownText), 56 + sizeof(::UnityEngine::Coroutine*)> __GameObjectScheduling_CountdownTextSizeCheck;
  static_assert(sizeof(CountdownText) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GameObjectScheduling::CountdownText::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameObjectScheduling::CountdownText::*)()>(&GameObjectScheduling::CountdownText::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObjectScheduling::CountdownText*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameObjectScheduling::CountdownText::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameObjectScheduling::CountdownText::*)()>(&GameObjectScheduling::CountdownText::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObjectScheduling::CountdownText*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameObjectScheduling::CountdownText::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameObjectScheduling::CountdownText::*)()>(&GameObjectScheduling::CountdownText::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObjectScheduling::CountdownText*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameObjectScheduling::CountdownText::MonitorTime
// Il2CppName: MonitorTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GameObjectScheduling::CountdownText::*)()>(&GameObjectScheduling::CountdownText::MonitorTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObjectScheduling::CountdownText*), "MonitorTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameObjectScheduling::CountdownText::getTimeChunkString
// Il2CppName: getTimeChunkString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GameObjectScheduling::CountdownText::*)(::GameObjectScheduling::CountdownText::TimeChunk, int)>(&GameObjectScheduling::CountdownText::getTimeChunkString)> {
  static const MethodInfo* get() {
    static auto* chunk = &::il2cpp_utils::GetClassFromName("GameObjectScheduling", "CountdownText/TimeChunk")->byval_arg;
    static auto* n = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GameObjectScheduling::CountdownText*), "getTimeChunkString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{chunk, n});
  }
};
// Writing MetadataGetter for method: GameObjectScheduling::CountdownText::TryParseDateTime
// Il2CppName: TryParseDateTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTime (GameObjectScheduling::CountdownText::*)()>(&GameObjectScheduling::CountdownText::TryParseDateTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObjectScheduling::CountdownText*), "TryParseDateTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameObjectScheduling::CountdownText::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
