// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GameObjectScheduling
namespace GameObjectScheduling {
  // Forward declaring type: SchedulingOptions
  class SchedulingOptions;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: DateTime
  struct DateTime;
}
// Completed forward declares
// Type namespace: GameObjectScheduling
namespace GameObjectScheduling {
  // Forward declaring type: GameObjectSchedule
  class GameObjectSchedule;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GameObjectScheduling::GameObjectSchedule);
DEFINE_IL2CPP_ARG_TYPE(::GameObjectScheduling::GameObjectSchedule*, "GameObjectScheduling", "GameObjectSchedule");
// Type namespace: GameObjectScheduling
namespace GameObjectScheduling {
  // Size: 0x31
  #pragma pack(push, 1)
  // Autogenerated type: GameObjectScheduling.GameObjectSchedule
  // [TokenAttribute] Offset: FFFFFFFF
  // [CreateAssetMenuAttribute] Offset: FFFFFFFF
  class GameObjectSchedule : public ::UnityEngine::ScriptableObject {
    public:
    // Nested type: ::GameObjectScheduling::GameObjectSchedule::GameObjectScheduleNode
    class GameObjectScheduleNode;
    // Nested type: ::GameObjectScheduling::GameObjectSchedule::$$c
    class $$c;
    public:
    // private System.Boolean initialState
    // Size: 0x1
    // Offset: 0x18
    bool initialState;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: initialState and: nodes
    char __padding0[0x7] = {};
    // private GameObjectScheduling.GameObjectSchedule/GameObjectScheduleNode[] nodes
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::GameObjectScheduling::GameObjectSchedule::GameObjectScheduleNode*> nodes;
    // Field size check
    static_assert(sizeof(::ArrayW<::GameObjectScheduling::GameObjectSchedule::GameObjectScheduleNode*>) == 0x8);
    // private GameObjectScheduling.SchedulingOptions options
    // Size: 0x8
    // Offset: 0x28
    ::GameObjectScheduling::SchedulingOptions* options;
    // Field size check
    static_assert(sizeof(::GameObjectScheduling::SchedulingOptions*) == 0x8);
    // private System.Boolean validated
    // Size: 0x1
    // Offset: 0x30
    bool validated;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private System.Boolean initialState
    [[deprecated("Use field access instead!")]] bool& dyn_initialState();
    // Get instance field reference: private GameObjectScheduling.GameObjectSchedule/GameObjectScheduleNode[] nodes
    [[deprecated("Use field access instead!")]] ::ArrayW<::GameObjectScheduling::GameObjectSchedule::GameObjectScheduleNode*>& dyn_nodes();
    // Get instance field reference: private GameObjectScheduling.SchedulingOptions options
    [[deprecated("Use field access instead!")]] ::GameObjectScheduling::SchedulingOptions*& dyn_options();
    // Get instance field reference: private System.Boolean validated
    [[deprecated("Use field access instead!")]] bool& dyn_validated();
    // public GameObjectScheduling.GameObjectSchedule/GameObjectScheduleNode[] get_Nodes()
    // Offset: 0x28CE3AC
    ::ArrayW<::GameObjectScheduling::GameObjectSchedule::GameObjectScheduleNode*> get_Nodes();
    // public System.Boolean get_InitialState()
    // Offset: 0x28CE3B4
    bool get_InitialState();
    // public System.Int32 GetCurrentNodeIndex(System.DateTime currentDate, System.Int32 startFrom)
    // Offset: 0x28CE3BC
    int GetCurrentNodeIndex(::System::DateTime currentDate, int startFrom);
    // public System.Void Validate()
    // Offset: 0x28CE494
    void Validate();
    // private System.Void _validate()
    // Offset: 0x28CE4B8
    void _validate();
    // public System.Void .ctor()
    // Offset: 0x28CE7B4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GameObjectSchedule* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GameObjectScheduling::GameObjectSchedule::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GameObjectSchedule*, creationType>()));
    }
  }; // GameObjectScheduling.GameObjectSchedule
  #pragma pack(pop)
  static check_size<sizeof(GameObjectSchedule), 48 + sizeof(bool)> __GameObjectScheduling_GameObjectScheduleSizeCheck;
  static_assert(sizeof(GameObjectSchedule) == 0x31);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GameObjectScheduling::GameObjectSchedule::get_Nodes
// Il2CppName: get_Nodes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::GameObjectScheduling::GameObjectSchedule::GameObjectScheduleNode*> (GameObjectScheduling::GameObjectSchedule::*)()>(&GameObjectScheduling::GameObjectSchedule::get_Nodes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObjectScheduling::GameObjectSchedule*), "get_Nodes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameObjectScheduling::GameObjectSchedule::get_InitialState
// Il2CppName: get_InitialState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GameObjectScheduling::GameObjectSchedule::*)()>(&GameObjectScheduling::GameObjectSchedule::get_InitialState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObjectScheduling::GameObjectSchedule*), "get_InitialState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameObjectScheduling::GameObjectSchedule::GetCurrentNodeIndex
// Il2CppName: GetCurrentNodeIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GameObjectScheduling::GameObjectSchedule::*)(::System::DateTime, int)>(&GameObjectScheduling::GameObjectSchedule::GetCurrentNodeIndex)> {
  static const MethodInfo* get() {
    static auto* currentDate = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* startFrom = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GameObjectScheduling::GameObjectSchedule*), "GetCurrentNodeIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currentDate, startFrom});
  }
};
// Writing MetadataGetter for method: GameObjectScheduling::GameObjectSchedule::Validate
// Il2CppName: Validate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameObjectScheduling::GameObjectSchedule::*)()>(&GameObjectScheduling::GameObjectSchedule::Validate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObjectScheduling::GameObjectSchedule*), "Validate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameObjectScheduling::GameObjectSchedule::_validate
// Il2CppName: _validate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameObjectScheduling::GameObjectSchedule::*)()>(&GameObjectScheduling::GameObjectSchedule::_validate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObjectScheduling::GameObjectSchedule*), "_validate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameObjectScheduling::GameObjectSchedule::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
