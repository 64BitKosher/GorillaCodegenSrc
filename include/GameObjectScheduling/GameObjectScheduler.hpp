// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GameObjectScheduling
namespace GameObjectScheduling {
  // Forward declaring type: GameObjectSchedule
  class GameObjectSchedule;
  // Forward declaring type: GameObjectSchedulerEventDispatcher
  class GameObjectSchedulerEventDispatcher;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Coroutine
  class Coroutine;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: DateTime
  struct DateTime;
}
// Completed forward declares
// Type namespace: GameObjectScheduling
namespace GameObjectScheduling {
  // Forward declaring type: GameObjectScheduler
  class GameObjectScheduler;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GameObjectScheduling::GameObjectScheduler);
DEFINE_IL2CPP_ARG_TYPE(::GameObjectScheduling::GameObjectScheduler*, "GameObjectScheduling", "GameObjectScheduler");
// Type namespace: GameObjectScheduling
namespace GameObjectScheduling {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: GameObjectScheduling.GameObjectScheduler
  // [TokenAttribute] Offset: FFFFFFFF
  class GameObjectScheduler : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GameObjectScheduling::GameObjectScheduler::$MonitorTime$d__8
    class $MonitorTime$d__8;
    public:
    // private GameObjectScheduling.GameObjectSchedule schedule
    // Size: 0x8
    // Offset: 0x20
    ::GameObjectScheduling::GameObjectSchedule* schedule;
    // Field size check
    static_assert(sizeof(::GameObjectScheduling::GameObjectSchedule*) == 0x8);
    // private UnityEngine.GameObject[] scheduledGameObject
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::UnityEngine::GameObject*> scheduledGameObject;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::GameObject*>) == 0x8);
    // private GameObjectScheduling.GameObjectSchedulerEventDispatcher dispatcher
    // Size: 0x8
    // Offset: 0x30
    ::GameObjectScheduling::GameObjectSchedulerEventDispatcher* dispatcher;
    // Field size check
    static_assert(sizeof(::GameObjectScheduling::GameObjectSchedulerEventDispatcher*) == 0x8);
    // private System.Int32 currentNodeIndex
    // Size: 0x4
    // Offset: 0x38
    int currentNodeIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: currentNodeIndex and: monitor
    char __padding3[0x4] = {};
    // private UnityEngine.Coroutine monitor
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Coroutine* monitor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Coroutine*) == 0x8);
    public:
    // Get instance field reference: private GameObjectScheduling.GameObjectSchedule schedule
    [[deprecated("Use field access instead!")]] ::GameObjectScheduling::GameObjectSchedule*& dyn_schedule();
    // Get instance field reference: private UnityEngine.GameObject[] scheduledGameObject
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& dyn_scheduledGameObject();
    // Get instance field reference: private GameObjectScheduling.GameObjectSchedulerEventDispatcher dispatcher
    [[deprecated("Use field access instead!")]] ::GameObjectScheduling::GameObjectSchedulerEventDispatcher*& dyn_dispatcher();
    // Get instance field reference: private System.Int32 currentNodeIndex
    [[deprecated("Use field access instead!")]] int& dyn_currentNodeIndex();
    // Get instance field reference: private UnityEngine.Coroutine monitor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Coroutine*& dyn_monitor();
    // private System.Void Start()
    // Offset: 0x28CE8CC
    void Start();
    // private System.Void OnEnable()
    // Offset: 0x28CEB7C
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0x28CEBD8
    void OnDisable();
    // private System.Collections.IEnumerator MonitorTime()
    // Offset: 0x28CEB10
    ::System::Collections::IEnumerator* MonitorTime();
    // private System.Boolean getActiveState()
    // Offset: 0x28CEC2C
    bool getActiveState();
    // private System.DateTime getServerTime()
    // Offset: 0x28CECB8
    ::System::DateTime getServerTime();
    // private System.Void changeActiveState(System.Boolean state)
    // Offset: 0x28CED14
    void changeActiveState(bool state);
    // public System.Void .ctor()
    // Offset: 0x28CEE7C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GameObjectScheduler* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GameObjectScheduling::GameObjectScheduler::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GameObjectScheduler*, creationType>()));
    }
  }; // GameObjectScheduling.GameObjectScheduler
  #pragma pack(pop)
  static check_size<sizeof(GameObjectScheduler), 64 + sizeof(::UnityEngine::Coroutine*)> __GameObjectScheduling_GameObjectSchedulerSizeCheck;
  static_assert(sizeof(GameObjectScheduler) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GameObjectScheduling::GameObjectScheduler::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameObjectScheduling::GameObjectScheduler::*)()>(&GameObjectScheduling::GameObjectScheduler::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObjectScheduling::GameObjectScheduler*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameObjectScheduling::GameObjectScheduler::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameObjectScheduling::GameObjectScheduler::*)()>(&GameObjectScheduling::GameObjectScheduler::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObjectScheduling::GameObjectScheduler*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameObjectScheduling::GameObjectScheduler::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameObjectScheduling::GameObjectScheduler::*)()>(&GameObjectScheduling::GameObjectScheduler::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObjectScheduling::GameObjectScheduler*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameObjectScheduling::GameObjectScheduler::MonitorTime
// Il2CppName: MonitorTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GameObjectScheduling::GameObjectScheduler::*)()>(&GameObjectScheduling::GameObjectScheduler::MonitorTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObjectScheduling::GameObjectScheduler*), "MonitorTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameObjectScheduling::GameObjectScheduler::getActiveState
// Il2CppName: getActiveState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GameObjectScheduling::GameObjectScheduler::*)()>(&GameObjectScheduling::GameObjectScheduler::getActiveState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObjectScheduling::GameObjectScheduler*), "getActiveState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameObjectScheduling::GameObjectScheduler::getServerTime
// Il2CppName: getServerTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTime (GameObjectScheduling::GameObjectScheduler::*)()>(&GameObjectScheduling::GameObjectScheduler::getServerTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObjectScheduling::GameObjectScheduler*), "getServerTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameObjectScheduling::GameObjectScheduler::changeActiveState
// Il2CppName: changeActiveState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameObjectScheduling::GameObjectScheduler::*)(bool)>(&GameObjectScheduling::GameObjectScheduler::changeActiveState)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GameObjectScheduling::GameObjectScheduler*), "changeActiveState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state});
  }
};
// Writing MetadataGetter for method: GameObjectScheduling::GameObjectScheduler::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
