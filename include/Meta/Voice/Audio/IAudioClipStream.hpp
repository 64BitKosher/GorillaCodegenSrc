// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Meta::Voice::Audio
namespace Meta::Voice::Audio {
  // Forward declaring type: AudioClipStreamDelegate
  class AudioClipStreamDelegate;
}
// Completed forward declares
// Type namespace: Meta.Voice.Audio
namespace Meta::Voice::Audio {
  // Forward declaring type: IAudioClipStream
  class IAudioClipStream;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::Voice::Audio::IAudioClipStream);
DEFINE_IL2CPP_ARG_TYPE(::Meta::Voice::Audio::IAudioClipStream*, "Meta.Voice.Audio", "IAudioClipStream");
// Type namespace: Meta.Voice.Audio
namespace Meta::Voice::Audio {
  // Size: 0x0
  #pragma pack(push, 1)
  // Autogenerated type: Meta.Voice.Audio.IAudioClipStream
  // [TokenAttribute] Offset: FFFFFFFF
  class IAudioClipStream {
    public:
    // public System.Boolean get_IsReady()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_IsReady();
    // public System.Boolean get_IsComplete()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_IsComplete();
    // public System.Int32 get_Channels()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_Channels();
    // public System.Int32 get_SampleRate()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_SampleRate();
    // public System.Int32 get_AddedSamples()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_AddedSamples();
    // public System.Int32 get_TotalSamples()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_TotalSamples();
    // public System.Single get_Length()
    // Offset: 0xFFFFFFFFFFFFFFFF
    float get_Length();
    // public System.Single get_StreamReadyLength()
    // Offset: 0xFFFFFFFFFFFFFFFF
    float get_StreamReadyLength();
    // public System.Void set_OnStreamReady(Meta.Voice.Audio.AudioClipStreamDelegate value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_OnStreamReady(::Meta::Voice::Audio::AudioClipStreamDelegate* value);
    // public System.Void set_OnStreamUpdated(Meta.Voice.Audio.AudioClipStreamDelegate value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_OnStreamUpdated(::Meta::Voice::Audio::AudioClipStreamDelegate* value);
    // public System.Void set_OnStreamComplete(Meta.Voice.Audio.AudioClipStreamDelegate value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_OnStreamComplete(::Meta::Voice::Audio::AudioClipStreamDelegate* value);
    // public System.Void AddSamples(System.Single[] samples)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void AddSamples(::ArrayW<float> samples);
    // public System.Void SetTotalSamples(System.Int32 totalSamples)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SetTotalSamples(int totalSamples);
    // public System.Void UpdateState()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void UpdateState();
    // public System.Void Unload()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Unload();
  }; // Meta.Voice.Audio.IAudioClipStream
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::Voice::Audio::IAudioClipStream::get_IsReady
// Il2CppName: get_IsReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::Voice::Audio::IAudioClipStream::*)()>(&Meta::Voice::Audio::IAudioClipStream::get_IsReady)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Audio::IAudioClipStream*), "get_IsReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Audio::IAudioClipStream::get_IsComplete
// Il2CppName: get_IsComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::Voice::Audio::IAudioClipStream::*)()>(&Meta::Voice::Audio::IAudioClipStream::get_IsComplete)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Audio::IAudioClipStream*), "get_IsComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Audio::IAudioClipStream::get_Channels
// Il2CppName: get_Channels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Meta::Voice::Audio::IAudioClipStream::*)()>(&Meta::Voice::Audio::IAudioClipStream::get_Channels)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Audio::IAudioClipStream*), "get_Channels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Audio::IAudioClipStream::get_SampleRate
// Il2CppName: get_SampleRate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Meta::Voice::Audio::IAudioClipStream::*)()>(&Meta::Voice::Audio::IAudioClipStream::get_SampleRate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Audio::IAudioClipStream*), "get_SampleRate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Audio::IAudioClipStream::get_AddedSamples
// Il2CppName: get_AddedSamples
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Meta::Voice::Audio::IAudioClipStream::*)()>(&Meta::Voice::Audio::IAudioClipStream::get_AddedSamples)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Audio::IAudioClipStream*), "get_AddedSamples", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Audio::IAudioClipStream::get_TotalSamples
// Il2CppName: get_TotalSamples
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Meta::Voice::Audio::IAudioClipStream::*)()>(&Meta::Voice::Audio::IAudioClipStream::get_TotalSamples)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Audio::IAudioClipStream*), "get_TotalSamples", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Audio::IAudioClipStream::get_Length
// Il2CppName: get_Length
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Meta::Voice::Audio::IAudioClipStream::*)()>(&Meta::Voice::Audio::IAudioClipStream::get_Length)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Audio::IAudioClipStream*), "get_Length", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Audio::IAudioClipStream::get_StreamReadyLength
// Il2CppName: get_StreamReadyLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Meta::Voice::Audio::IAudioClipStream::*)()>(&Meta::Voice::Audio::IAudioClipStream::get_StreamReadyLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Audio::IAudioClipStream*), "get_StreamReadyLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Audio::IAudioClipStream::set_OnStreamReady
// Il2CppName: set_OnStreamReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Audio::IAudioClipStream::*)(::Meta::Voice::Audio::AudioClipStreamDelegate*)>(&Meta::Voice::Audio::IAudioClipStream::set_OnStreamReady)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Meta.Voice.Audio", "AudioClipStreamDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Audio::IAudioClipStream*), "set_OnStreamReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Audio::IAudioClipStream::set_OnStreamUpdated
// Il2CppName: set_OnStreamUpdated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Audio::IAudioClipStream::*)(::Meta::Voice::Audio::AudioClipStreamDelegate*)>(&Meta::Voice::Audio::IAudioClipStream::set_OnStreamUpdated)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Meta.Voice.Audio", "AudioClipStreamDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Audio::IAudioClipStream*), "set_OnStreamUpdated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Audio::IAudioClipStream::set_OnStreamComplete
// Il2CppName: set_OnStreamComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Audio::IAudioClipStream::*)(::Meta::Voice::Audio::AudioClipStreamDelegate*)>(&Meta::Voice::Audio::IAudioClipStream::set_OnStreamComplete)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Meta.Voice.Audio", "AudioClipStreamDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Audio::IAudioClipStream*), "set_OnStreamComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Audio::IAudioClipStream::AddSamples
// Il2CppName: AddSamples
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Audio::IAudioClipStream::*)(::ArrayW<float>)>(&Meta::Voice::Audio::IAudioClipStream::AddSamples)> {
  static const MethodInfo* get() {
    static auto* samples = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Audio::IAudioClipStream*), "AddSamples", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{samples});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Audio::IAudioClipStream::SetTotalSamples
// Il2CppName: SetTotalSamples
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Audio::IAudioClipStream::*)(int)>(&Meta::Voice::Audio::IAudioClipStream::SetTotalSamples)> {
  static const MethodInfo* get() {
    static auto* totalSamples = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Audio::IAudioClipStream*), "SetTotalSamples", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{totalSamples});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Audio::IAudioClipStream::UpdateState
// Il2CppName: UpdateState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Audio::IAudioClipStream::*)()>(&Meta::Voice::Audio::IAudioClipStream::UpdateState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Audio::IAudioClipStream*), "UpdateState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Audio::IAudioClipStream::Unload
// Il2CppName: Unload
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Audio::IAudioClipStream::*)()>(&Meta::Voice::Audio::IAudioClipStream::Unload)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Audio::IAudioClipStream*), "Unload", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
