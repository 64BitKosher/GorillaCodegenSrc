// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Meta.Voice.Audio.IAudioPlayer
#include "Meta/Voice/Audio/IAudioPlayer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Meta::Voice::Audio
namespace Meta::Voice::Audio {
  // Forward declaring type: IAudioClipStream
  class IAudioClipStream;
}
// Completed forward declares
// Type namespace: Meta.Voice.Audio
namespace Meta::Voice::Audio {
  // Forward declaring type: AudioPlayer
  class AudioPlayer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::Voice::Audio::AudioPlayer);
DEFINE_IL2CPP_ARG_TYPE(::Meta::Voice::Audio::AudioPlayer*, "Meta.Voice.Audio", "AudioPlayer");
// Type namespace: Meta.Voice.Audio
namespace Meta::Voice::Audio {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Meta.Voice.Audio.AudioPlayer
  // [TokenAttribute] Offset: FFFFFFFF
  class AudioPlayer : public ::UnityEngine::MonoBehaviour/*, public ::Meta::Voice::Audio::IAudioPlayer*/ {
    public:
    public:
    // private Meta.Voice.Audio.IAudioClipStream <ClipStream>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    ::Meta::Voice::Audio::IAudioClipStream* ClipStream;
    // Field size check
    static_assert(sizeof(::Meta::Voice::Audio::IAudioClipStream*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Meta::Voice::Audio::IAudioPlayer
    operator ::Meta::Voice::Audio::IAudioPlayer() noexcept {
      return *reinterpret_cast<::Meta::Voice::Audio::IAudioPlayer*>(this);
    }
    // Get instance field reference: private Meta.Voice.Audio.IAudioClipStream <ClipStream>k__BackingField
    [[deprecated("Use field access instead!")]] ::Meta::Voice::Audio::IAudioClipStream*& dyn_$ClipStream$k__BackingField();
    // public Meta.Voice.Audio.IAudioClipStream get_ClipStream()
    // Offset: 0x443D4B4
    ::Meta::Voice::Audio::IAudioClipStream* get_ClipStream();
    // private System.Void set_ClipStream(Meta.Voice.Audio.IAudioClipStream value)
    // Offset: 0x443D4BC
    void set_ClipStream(::Meta::Voice::Audio::IAudioClipStream* value);
    // public System.Boolean get_IsPlaying()
    // Offset: 0x443D4C4
    bool get_IsPlaying();
    // public System.Int32 get_ElapsedSamples()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_ElapsedSamples();
    // public System.Void Init()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Init();
    // public System.String GetPlaybackErrors()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::StringW GetPlaybackErrors();
    // public System.Void Play(Meta.Voice.Audio.IAudioClipStream clipStream, System.Int32 offsetSamples)
    // Offset: 0x443D4D4
    void Play(::Meta::Voice::Audio::IAudioClipStream* clipStream, int offsetSamples);
    // protected System.Void Play(System.Int32 offsetSamples)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Play(int offsetSamples);
    // public System.Void Pause()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Pause();
    // public System.Void Resume()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Resume();
    // public System.Void Stop()
    // Offset: 0x443D52C
    void Stop();
    // protected System.Void .ctor()
    // Offset: 0x443D538
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AudioPlayer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::Voice::Audio::AudioPlayer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AudioPlayer*, creationType>()));
    }
  }; // Meta.Voice.Audio.AudioPlayer
  #pragma pack(pop)
  static check_size<sizeof(AudioPlayer), 32 + sizeof(::Meta::Voice::Audio::IAudioClipStream*)> __Meta_Voice_Audio_AudioPlayerSizeCheck;
  static_assert(sizeof(AudioPlayer) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::Voice::Audio::AudioPlayer::get_ClipStream
// Il2CppName: get_ClipStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::Voice::Audio::IAudioClipStream* (Meta::Voice::Audio::AudioPlayer::*)()>(&Meta::Voice::Audio::AudioPlayer::get_ClipStream)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Audio::AudioPlayer*), "get_ClipStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Audio::AudioPlayer::set_ClipStream
// Il2CppName: set_ClipStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Audio::AudioPlayer::*)(::Meta::Voice::Audio::IAudioClipStream*)>(&Meta::Voice::Audio::AudioPlayer::set_ClipStream)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Meta.Voice.Audio", "IAudioClipStream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Audio::AudioPlayer*), "set_ClipStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Audio::AudioPlayer::get_IsPlaying
// Il2CppName: get_IsPlaying
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::Voice::Audio::AudioPlayer::*)()>(&Meta::Voice::Audio::AudioPlayer::get_IsPlaying)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Audio::AudioPlayer*), "get_IsPlaying", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Audio::AudioPlayer::get_ElapsedSamples
// Il2CppName: get_ElapsedSamples
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Meta::Voice::Audio::AudioPlayer::*)()>(&Meta::Voice::Audio::AudioPlayer::get_ElapsedSamples)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Audio::AudioPlayer*), "get_ElapsedSamples", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Audio::AudioPlayer::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Audio::AudioPlayer::*)()>(&Meta::Voice::Audio::AudioPlayer::Init)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Audio::AudioPlayer*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Audio::AudioPlayer::GetPlaybackErrors
// Il2CppName: GetPlaybackErrors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Meta::Voice::Audio::AudioPlayer::*)()>(&Meta::Voice::Audio::AudioPlayer::GetPlaybackErrors)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Audio::AudioPlayer*), "GetPlaybackErrors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Audio::AudioPlayer::Play
// Il2CppName: Play
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Audio::AudioPlayer::*)(::Meta::Voice::Audio::IAudioClipStream*, int)>(&Meta::Voice::Audio::AudioPlayer::Play)> {
  static const MethodInfo* get() {
    static auto* clipStream = &::il2cpp_utils::GetClassFromName("Meta.Voice.Audio", "IAudioClipStream")->byval_arg;
    static auto* offsetSamples = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Audio::AudioPlayer*), "Play", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clipStream, offsetSamples});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Audio::AudioPlayer::Play
// Il2CppName: Play
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Audio::AudioPlayer::*)(int)>(&Meta::Voice::Audio::AudioPlayer::Play)> {
  static const MethodInfo* get() {
    static auto* offsetSamples = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Audio::AudioPlayer*), "Play", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{offsetSamples});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Audio::AudioPlayer::Pause
// Il2CppName: Pause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Audio::AudioPlayer::*)()>(&Meta::Voice::Audio::AudioPlayer::Pause)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Audio::AudioPlayer*), "Pause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Audio::AudioPlayer::Resume
// Il2CppName: Resume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Audio::AudioPlayer::*)()>(&Meta::Voice::Audio::AudioPlayer::Resume)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Audio::AudioPlayer*), "Resume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Audio::AudioPlayer::Stop
// Il2CppName: Stop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Audio::AudioPlayer::*)()>(&Meta::Voice::Audio::AudioPlayer::Stop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Audio::AudioPlayer*), "Stop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Audio::AudioPlayer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
