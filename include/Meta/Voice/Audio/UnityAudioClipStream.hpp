// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Meta.Voice.Audio.AudioClipStream
#include "Meta/Voice/Audio/AudioClipStream.hpp"
// Including type: Meta.Voice.Audio.IAudioClipProvider
#include "Meta/Voice/Audio/IAudioClipProvider.hpp"
// Including type: System.Single
#include "System/Single.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Meta::Voice::Audio
namespace Meta::Voice::Audio {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioClip
  class AudioClip;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: Meta.Voice.Audio
namespace Meta::Voice::Audio {
  // Forward declaring type: UnityAudioClipStream
  class UnityAudioClipStream;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::Voice::Audio::UnityAudioClipStream);
DEFINE_IL2CPP_ARG_TYPE(::Meta::Voice::Audio::UnityAudioClipStream*, "Meta.Voice.Audio", "UnityAudioClipStream");
// Type namespace: Meta.Voice.Audio
namespace Meta::Voice::Audio {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: Meta.Voice.Audio.UnityAudioClipStream
  // [TokenAttribute] Offset: FFFFFFFF
  class UnityAudioClipStream : public ::Meta::Voice::Audio::AudioClipStream/*, public ::Meta::Voice::Audio::IAudioClipProvider*/ {
    public:
    // Nested type: ::Meta::Voice::Audio::UnityAudioClipStream::$$c__DisplayClass18_0
    class $$c__DisplayClass18_0;
    public:
    // private UnityEngine.AudioClip <Clip>k__BackingField
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::AudioClip* Clip;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // private System.Boolean _streamable
    // Size: 0x1
    // Offset: 0x48
    bool streamable;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: streamable and: chunkSize
    char __padding1[0x3] = {};
    // private System.Int32 _chunkSize
    // Size: 0x4
    // Offset: 0x4C
    int chunkSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating interface conversion operator: operator ::Meta::Voice::Audio::IAudioClipProvider
    operator ::Meta::Voice::Audio::IAudioClipProvider() noexcept {
      return *reinterpret_cast<::Meta::Voice::Audio::IAudioClipProvider*>(this);
    }
    // static field const value: static public System.Single DEFAULT_CHUNK_LENGTH
    static constexpr const float DEFAULT_CHUNK_LENGTH = 5;
    // Get static field: static public System.Single DEFAULT_CHUNK_LENGTH
    static float _get_DEFAULT_CHUNK_LENGTH();
    // Set static field: static public System.Single DEFAULT_CHUNK_LENGTH
    static void _set_DEFAULT_CHUNK_LENGTH(float value);
    // Get static field: static private System.Int32 ClipsGenerated
    static int _get_ClipsGenerated();
    // Set static field: static private System.Int32 ClipsGenerated
    static void _set_ClipsGenerated(int value);
    // Get static field: static private System.Collections.Generic.List`1<UnityEngine.AudioClip> Clips
    static ::System::Collections::Generic::List_1<::UnityEngine::AudioClip*>* _get_Clips();
    // Set static field: static private System.Collections.Generic.List`1<UnityEngine.AudioClip> Clips
    static void _set_Clips(::System::Collections::Generic::List_1<::UnityEngine::AudioClip*>* value);
    // Get instance field reference: private UnityEngine.AudioClip <Clip>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_$Clip$k__BackingField();
    // Get instance field reference: private System.Boolean _streamable
    [[deprecated("Use field access instead!")]] bool& dyn__streamable();
    // Get instance field reference: private System.Int32 _chunkSize
    [[deprecated("Use field access instead!")]] int& dyn__chunkSize();
    // public UnityEngine.AudioClip get_Clip()
    // Offset: 0x443D688
    ::UnityEngine::AudioClip* get_Clip();
    // private System.Void set_Clip(UnityEngine.AudioClip value)
    // Offset: 0x443D690
    void set_Clip(::UnityEngine::AudioClip* value);
    // public System.Void .ctor(System.Int32 newChannels, System.Int32 newSampleRate, System.Single newStreamReadyLength, System.Single newChunkLength)
    // Offset: 0x443D750
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UnityAudioClipStream* New_ctor(int newChannels, int newSampleRate, float newStreamReadyLength, float newChunkLength) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::Voice::Audio::UnityAudioClipStream::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UnityAudioClipStream*, creationType>(newChannels, newSampleRate, newStreamReadyLength, newChunkLength)));
    }
    // public System.Void .ctor(UnityEngine.AudioClip newClip)
    // Offset: 0x443D814
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UnityAudioClipStream* New_ctor(::UnityEngine::AudioClip* newClip) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::Voice::Audio::UnityAudioClipStream::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UnityAudioClipStream*, creationType>(newClip)));
    }
    // private System.Void UpdateClip(System.Int32 samples)
    // Offset: 0x443DAF0
    void UpdateClip(int samples);
    // static public System.Void PreloadCachedClips(System.Int32 total, System.Int32 lengthSamples, System.Int32 channels, System.Int32 frequency)
    // Offset: 0x443E1CC
    static void PreloadCachedClips(int total, int lengthSamples, int channels, int frequency);
    // static private System.Void GenerateCacheClip(System.Int32 lengthSamples, System.Int32 channels, System.Int32 frequency)
    // Offset: 0x443E250
    static void GenerateCacheClip(int lengthSamples, int channels, int frequency);
    // static private UnityEngine.AudioClip GetCachedClip(System.Int32 lengthSamples, System.Int32 channels, System.Int32 frequency)
    // Offset: 0x443DF14
    static ::UnityEngine::AudioClip* GetCachedClip(int lengthSamples, int channels, int frequency);
    // static private System.Boolean DoesClipMatch(UnityEngine.AudioClip clip, System.Int32 lengthSamples, System.Int32 channels, System.Int32 frequency)
    // Offset: 0x443E3B8
    static bool DoesClipMatch(::UnityEngine::AudioClip* clip, int lengthSamples, int channels, int frequency);
    // static private System.Void ReuseCachedClip(UnityEngine.AudioClip clip)
    // Offset: 0x443E0F8
    static void ReuseCachedClip(::UnityEngine::AudioClip* clip);
    // static public System.Void DestroyCachedClips()
    // Offset: 0x443E42C
    static void DestroyCachedClips();
    // static private System.Void .cctor()
    // Offset: 0x443E5E0
    static void _cctor();
    // public System.Void .ctor(System.Int32 newChannels, System.Int32 newSampleRate, System.Single newStreamReadyLength)
    // Offset: 0x443D698
    // Implemented from: Meta.Voice.Audio.AudioClipStream
    // Base method: System.Void AudioClipStream::.ctor(System.Int32 newChannels, System.Int32 newSampleRate, System.Single newStreamReadyLength)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UnityAudioClipStream* New_ctor(int newChannels, int newSampleRate, float newStreamReadyLength) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::Voice::Audio::UnityAudioClipStream::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UnityAudioClipStream*, creationType>(newChannels, newSampleRate, newStreamReadyLength)));
    }
    // public override System.Void AddSamples(System.Single[] newSamples)
    // Offset: 0x443D990
    // Implemented from: Meta.Voice.Audio.AudioClipStream
    // Base method: System.Void AudioClipStream::AddSamples(System.Single[] newSamples)
    void AddSamples(::ArrayW<float> newSamples);
    // public override System.Void SetTotalSamples(System.Int32 totalSamples)
    // Offset: 0x443DD58
    // Implemented from: Meta.Voice.Audio.AudioClipStream
    // Base method: System.Void AudioClipStream::SetTotalSamples(System.Int32 totalSamples)
    void SetTotalSamples(int totalSamples);
    // public override System.Void Unload()
    // Offset: 0x443DDFC
    // Implemented from: Meta.Voice.Audio.AudioClipStream
    // Base method: System.Void AudioClipStream::Unload()
    void Unload();
  }; // Meta.Voice.Audio.UnityAudioClipStream
  #pragma pack(pop)
  static check_size<sizeof(UnityAudioClipStream), 76 + sizeof(int)> __Meta_Voice_Audio_UnityAudioClipStreamSizeCheck;
  static_assert(sizeof(UnityAudioClipStream) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::Voice::Audio::UnityAudioClipStream::get_Clip
// Il2CppName: get_Clip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AudioClip* (Meta::Voice::Audio::UnityAudioClipStream::*)()>(&Meta::Voice::Audio::UnityAudioClipStream::get_Clip)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Audio::UnityAudioClipStream*), "get_Clip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Audio::UnityAudioClipStream::set_Clip
// Il2CppName: set_Clip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Audio::UnityAudioClipStream::*)(::UnityEngine::AudioClip*)>(&Meta::Voice::Audio::UnityAudioClipStream::set_Clip)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioClip")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Audio::UnityAudioClipStream*), "set_Clip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Audio::UnityAudioClipStream::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Meta::Voice::Audio::UnityAudioClipStream::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Meta::Voice::Audio::UnityAudioClipStream::UpdateClip
// Il2CppName: UpdateClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Audio::UnityAudioClipStream::*)(int)>(&Meta::Voice::Audio::UnityAudioClipStream::UpdateClip)> {
  static const MethodInfo* get() {
    static auto* samples = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Audio::UnityAudioClipStream*), "UpdateClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{samples});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Audio::UnityAudioClipStream::PreloadCachedClips
// Il2CppName: PreloadCachedClips
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, int, int, int)>(&Meta::Voice::Audio::UnityAudioClipStream::PreloadCachedClips)> {
  static const MethodInfo* get() {
    static auto* total = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* lengthSamples = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* channels = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* frequency = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Audio::UnityAudioClipStream*), "PreloadCachedClips", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{total, lengthSamples, channels, frequency});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Audio::UnityAudioClipStream::GenerateCacheClip
// Il2CppName: GenerateCacheClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, int, int)>(&Meta::Voice::Audio::UnityAudioClipStream::GenerateCacheClip)> {
  static const MethodInfo* get() {
    static auto* lengthSamples = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* channels = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* frequency = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Audio::UnityAudioClipStream*), "GenerateCacheClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lengthSamples, channels, frequency});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Audio::UnityAudioClipStream::GetCachedClip
// Il2CppName: GetCachedClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AudioClip* (*)(int, int, int)>(&Meta::Voice::Audio::UnityAudioClipStream::GetCachedClip)> {
  static const MethodInfo* get() {
    static auto* lengthSamples = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* channels = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* frequency = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Audio::UnityAudioClipStream*), "GetCachedClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lengthSamples, channels, frequency});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Audio::UnityAudioClipStream::DoesClipMatch
// Il2CppName: DoesClipMatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::AudioClip*, int, int, int)>(&Meta::Voice::Audio::UnityAudioClipStream::DoesClipMatch)> {
  static const MethodInfo* get() {
    static auto* clip = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioClip")->byval_arg;
    static auto* lengthSamples = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* channels = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* frequency = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Audio::UnityAudioClipStream*), "DoesClipMatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clip, lengthSamples, channels, frequency});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Audio::UnityAudioClipStream::ReuseCachedClip
// Il2CppName: ReuseCachedClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::AudioClip*)>(&Meta::Voice::Audio::UnityAudioClipStream::ReuseCachedClip)> {
  static const MethodInfo* get() {
    static auto* clip = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioClip")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Audio::UnityAudioClipStream*), "ReuseCachedClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clip});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Audio::UnityAudioClipStream::DestroyCachedClips
// Il2CppName: DestroyCachedClips
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Meta::Voice::Audio::UnityAudioClipStream::DestroyCachedClips)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Audio::UnityAudioClipStream*), "DestroyCachedClips", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Audio::UnityAudioClipStream::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Meta::Voice::Audio::UnityAudioClipStream::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Audio::UnityAudioClipStream*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Audio::UnityAudioClipStream::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Meta::Voice::Audio::UnityAudioClipStream::AddSamples
// Il2CppName: AddSamples
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Audio::UnityAudioClipStream::*)(::ArrayW<float>)>(&Meta::Voice::Audio::UnityAudioClipStream::AddSamples)> {
  static const MethodInfo* get() {
    static auto* newSamples = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Audio::UnityAudioClipStream*), "AddSamples", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newSamples});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Audio::UnityAudioClipStream::SetTotalSamples
// Il2CppName: SetTotalSamples
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Audio::UnityAudioClipStream::*)(int)>(&Meta::Voice::Audio::UnityAudioClipStream::SetTotalSamples)> {
  static const MethodInfo* get() {
    static auto* totalSamples = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Audio::UnityAudioClipStream*), "SetTotalSamples", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{totalSamples});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Audio::UnityAudioClipStream::Unload
// Il2CppName: Unload
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Audio::UnityAudioClipStream::*)()>(&Meta::Voice::Audio::UnityAudioClipStream::Unload)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Audio::UnityAudioClipStream*), "Unload", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
