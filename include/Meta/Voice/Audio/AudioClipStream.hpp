// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Meta.Voice.Audio.IAudioClipStream
#include "Meta/Voice/Audio/IAudioClipStream.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Meta::Voice::Audio
namespace Meta::Voice::Audio {
  // Forward declaring type: AudioClipStreamDelegate
  class AudioClipStreamDelegate;
}
// Completed forward declares
// Type namespace: Meta.Voice.Audio
namespace Meta::Voice::Audio {
  // Forward declaring type: AudioClipStream
  class AudioClipStream;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::Voice::Audio::AudioClipStream);
DEFINE_IL2CPP_ARG_TYPE(::Meta::Voice::Audio::AudioClipStream*, "Meta.Voice.Audio", "AudioClipStream");
// Type namespace: Meta.Voice.Audio
namespace Meta::Voice::Audio {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: Meta.Voice.Audio.AudioClipStream
  // [TokenAttribute] Offset: FFFFFFFF
  class AudioClipStream : public ::Il2CppObject/*, public ::Meta::Voice::Audio::IAudioClipStream*/ {
    public:
    public:
    // private System.Boolean <IsReady>k__BackingField
    // Size: 0x1
    // Offset: 0x10
    bool IsReady;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <IsComplete>k__BackingField
    // Size: 0x1
    // Offset: 0x11
    bool IsComplete;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: IsComplete and: Channels
    char __padding1[0x2] = {};
    // private System.Int32 <Channels>k__BackingField
    // Size: 0x4
    // Offset: 0x14
    int Channels;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 <SampleRate>k__BackingField
    // Size: 0x4
    // Offset: 0x18
    int SampleRate;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 <AddedSamples>k__BackingField
    // Size: 0x4
    // Offset: 0x1C
    int AddedSamples;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 <TotalSamples>k__BackingField
    // Size: 0x4
    // Offset: 0x20
    int TotalSamples;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single <StreamReadyLength>k__BackingField
    // Size: 0x4
    // Offset: 0x24
    float StreamReadyLength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private Meta.Voice.Audio.AudioClipStreamDelegate <OnStreamReady>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    ::Meta::Voice::Audio::AudioClipStreamDelegate* OnStreamReady;
    // Field size check
    static_assert(sizeof(::Meta::Voice::Audio::AudioClipStreamDelegate*) == 0x8);
    // private Meta.Voice.Audio.AudioClipStreamDelegate <OnStreamUpdated>k__BackingField
    // Size: 0x8
    // Offset: 0x30
    ::Meta::Voice::Audio::AudioClipStreamDelegate* OnStreamUpdated;
    // Field size check
    static_assert(sizeof(::Meta::Voice::Audio::AudioClipStreamDelegate*) == 0x8);
    // private Meta.Voice.Audio.AudioClipStreamDelegate <OnStreamComplete>k__BackingField
    // Size: 0x8
    // Offset: 0x38
    ::Meta::Voice::Audio::AudioClipStreamDelegate* OnStreamComplete;
    // Field size check
    static_assert(sizeof(::Meta::Voice::Audio::AudioClipStreamDelegate*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Meta::Voice::Audio::IAudioClipStream
    operator ::Meta::Voice::Audio::IAudioClipStream() noexcept {
      return *reinterpret_cast<::Meta::Voice::Audio::IAudioClipStream*>(this);
    }
    // Get instance field reference: private System.Boolean <IsReady>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$IsReady$k__BackingField();
    // Get instance field reference: private System.Boolean <IsComplete>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$IsComplete$k__BackingField();
    // Get instance field reference: private System.Int32 <Channels>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$Channels$k__BackingField();
    // Get instance field reference: private System.Int32 <SampleRate>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$SampleRate$k__BackingField();
    // Get instance field reference: private System.Int32 <AddedSamples>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$AddedSamples$k__BackingField();
    // Get instance field reference: private System.Int32 <TotalSamples>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$TotalSamples$k__BackingField();
    // Get instance field reference: private System.Single <StreamReadyLength>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$StreamReadyLength$k__BackingField();
    // Get instance field reference: private Meta.Voice.Audio.AudioClipStreamDelegate <OnStreamReady>k__BackingField
    [[deprecated("Use field access instead!")]] ::Meta::Voice::Audio::AudioClipStreamDelegate*& dyn_$OnStreamReady$k__BackingField();
    // Get instance field reference: private Meta.Voice.Audio.AudioClipStreamDelegate <OnStreamUpdated>k__BackingField
    [[deprecated("Use field access instead!")]] ::Meta::Voice::Audio::AudioClipStreamDelegate*& dyn_$OnStreamUpdated$k__BackingField();
    // Get instance field reference: private Meta.Voice.Audio.AudioClipStreamDelegate <OnStreamComplete>k__BackingField
    [[deprecated("Use field access instead!")]] ::Meta::Voice::Audio::AudioClipStreamDelegate*& dyn_$OnStreamComplete$k__BackingField();
    // public System.Boolean get_IsReady()
    // Offset: 0x443D1FC
    bool get_IsReady();
    // private System.Void set_IsReady(System.Boolean value)
    // Offset: 0x443D204
    void set_IsReady(bool value);
    // public System.Boolean get_IsComplete()
    // Offset: 0x443D210
    bool get_IsComplete();
    // private System.Void set_IsComplete(System.Boolean value)
    // Offset: 0x443D218
    void set_IsComplete(bool value);
    // public System.Int32 get_Channels()
    // Offset: 0x443D224
    int get_Channels();
    // private System.Void set_Channels(System.Int32 value)
    // Offset: 0x443D22C
    void set_Channels(int value);
    // public System.Int32 get_SampleRate()
    // Offset: 0x443D234
    int get_SampleRate();
    // private System.Void set_SampleRate(System.Int32 value)
    // Offset: 0x443D23C
    void set_SampleRate(int value);
    // public System.Int32 get_AddedSamples()
    // Offset: 0x443D244
    int get_AddedSamples();
    // protected System.Void set_AddedSamples(System.Int32 value)
    // Offset: 0x443D24C
    void set_AddedSamples(int value);
    // public System.Int32 get_TotalSamples()
    // Offset: 0x443D254
    int get_TotalSamples();
    // protected System.Void set_TotalSamples(System.Int32 value)
    // Offset: 0x443D25C
    void set_TotalSamples(int value);
    // public System.Single get_Length()
    // Offset: 0x443D264
    float get_Length();
    // public System.Single get_StreamReadyLength()
    // Offset: 0x443D2A0
    float get_StreamReadyLength();
    // private System.Void set_StreamReadyLength(System.Single value)
    // Offset: 0x443D2A8
    void set_StreamReadyLength(float value);
    // public Meta.Voice.Audio.AudioClipStreamDelegate get_OnStreamReady()
    // Offset: 0x443D2B0
    ::Meta::Voice::Audio::AudioClipStreamDelegate* get_OnStreamReady();
    // public System.Void set_OnStreamReady(Meta.Voice.Audio.AudioClipStreamDelegate value)
    // Offset: 0x443D2B8
    void set_OnStreamReady(::Meta::Voice::Audio::AudioClipStreamDelegate* value);
    // public Meta.Voice.Audio.AudioClipStreamDelegate get_OnStreamUpdated()
    // Offset: 0x443D2C0
    ::Meta::Voice::Audio::AudioClipStreamDelegate* get_OnStreamUpdated();
    // public System.Void set_OnStreamUpdated(Meta.Voice.Audio.AudioClipStreamDelegate value)
    // Offset: 0x443D2C8
    void set_OnStreamUpdated(::Meta::Voice::Audio::AudioClipStreamDelegate* value);
    // public Meta.Voice.Audio.AudioClipStreamDelegate get_OnStreamComplete()
    // Offset: 0x443D2D0
    ::Meta::Voice::Audio::AudioClipStreamDelegate* get_OnStreamComplete();
    // public System.Void set_OnStreamComplete(Meta.Voice.Audio.AudioClipStreamDelegate value)
    // Offset: 0x443D2D8
    void set_OnStreamComplete(::Meta::Voice::Audio::AudioClipStreamDelegate* value);
    // protected System.Void .ctor(System.Int32 newChannels, System.Int32 newSampleRate, System.Single newStreamReadyLength)
    // Offset: 0x443D2E0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AudioClipStream* New_ctor(int newChannels, int newSampleRate, float newStreamReadyLength) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::Voice::Audio::AudioClipStream::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AudioClipStream*, creationType>(newChannels, newSampleRate, newStreamReadyLength)));
    }
    // public System.Void AddSamples(System.Single[] samples)
    // Offset: 0x443D324
    void AddSamples(::ArrayW<float> samples);
    // public System.Void SetTotalSamples(System.Int32 totalSamples)
    // Offset: 0x443D354
    void SetTotalSamples(int totalSamples);
    // public System.Void UpdateState()
    // Offset: 0x443D368
    void UpdateState();
    // protected System.Void HandleStreamReady()
    // Offset: 0x443D3E0
    void HandleStreamReady();
    // protected System.Void HandleStreamUpdated()
    // Offset: 0x443D410
    void HandleStreamUpdated();
    // protected System.Void HandleStreamComplete()
    // Offset: 0x443D438
    void HandleStreamComplete();
    // public System.Void Unload()
    // Offset: 0x443D468
    void Unload();
    // private System.Single GetSampleLength(System.Int32 totalSamples)
    // Offset: 0x443D288
    float GetSampleLength(int totalSamples);
    // static public System.Single GetLength(System.Int32 totalSamples, System.Int32 channels, System.Int32 samplesPerSecond)
    // Offset: 0x443D4A0
    static float GetLength(int totalSamples, int channels, int samplesPerSecond);
  }; // Meta.Voice.Audio.AudioClipStream
  #pragma pack(pop)
  static check_size<sizeof(AudioClipStream), 56 + sizeof(::Meta::Voice::Audio::AudioClipStreamDelegate*)> __Meta_Voice_Audio_AudioClipStreamSizeCheck;
  static_assert(sizeof(AudioClipStream) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::Voice::Audio::AudioClipStream::get_IsReady
// Il2CppName: get_IsReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::Voice::Audio::AudioClipStream::*)()>(&Meta::Voice::Audio::AudioClipStream::get_IsReady)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Audio::AudioClipStream*), "get_IsReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Audio::AudioClipStream::set_IsReady
// Il2CppName: set_IsReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Audio::AudioClipStream::*)(bool)>(&Meta::Voice::Audio::AudioClipStream::set_IsReady)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Audio::AudioClipStream*), "set_IsReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Audio::AudioClipStream::get_IsComplete
// Il2CppName: get_IsComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::Voice::Audio::AudioClipStream::*)()>(&Meta::Voice::Audio::AudioClipStream::get_IsComplete)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Audio::AudioClipStream*), "get_IsComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Audio::AudioClipStream::set_IsComplete
// Il2CppName: set_IsComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Audio::AudioClipStream::*)(bool)>(&Meta::Voice::Audio::AudioClipStream::set_IsComplete)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Audio::AudioClipStream*), "set_IsComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Audio::AudioClipStream::get_Channels
// Il2CppName: get_Channels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Meta::Voice::Audio::AudioClipStream::*)()>(&Meta::Voice::Audio::AudioClipStream::get_Channels)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Audio::AudioClipStream*), "get_Channels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Audio::AudioClipStream::set_Channels
// Il2CppName: set_Channels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Audio::AudioClipStream::*)(int)>(&Meta::Voice::Audio::AudioClipStream::set_Channels)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Audio::AudioClipStream*), "set_Channels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Audio::AudioClipStream::get_SampleRate
// Il2CppName: get_SampleRate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Meta::Voice::Audio::AudioClipStream::*)()>(&Meta::Voice::Audio::AudioClipStream::get_SampleRate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Audio::AudioClipStream*), "get_SampleRate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Audio::AudioClipStream::set_SampleRate
// Il2CppName: set_SampleRate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Audio::AudioClipStream::*)(int)>(&Meta::Voice::Audio::AudioClipStream::set_SampleRate)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Audio::AudioClipStream*), "set_SampleRate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Audio::AudioClipStream::get_AddedSamples
// Il2CppName: get_AddedSamples
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Meta::Voice::Audio::AudioClipStream::*)()>(&Meta::Voice::Audio::AudioClipStream::get_AddedSamples)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Audio::AudioClipStream*), "get_AddedSamples", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Audio::AudioClipStream::set_AddedSamples
// Il2CppName: set_AddedSamples
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Audio::AudioClipStream::*)(int)>(&Meta::Voice::Audio::AudioClipStream::set_AddedSamples)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Audio::AudioClipStream*), "set_AddedSamples", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Audio::AudioClipStream::get_TotalSamples
// Il2CppName: get_TotalSamples
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Meta::Voice::Audio::AudioClipStream::*)()>(&Meta::Voice::Audio::AudioClipStream::get_TotalSamples)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Audio::AudioClipStream*), "get_TotalSamples", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Audio::AudioClipStream::set_TotalSamples
// Il2CppName: set_TotalSamples
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Audio::AudioClipStream::*)(int)>(&Meta::Voice::Audio::AudioClipStream::set_TotalSamples)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Audio::AudioClipStream*), "set_TotalSamples", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Audio::AudioClipStream::get_Length
// Il2CppName: get_Length
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Meta::Voice::Audio::AudioClipStream::*)()>(&Meta::Voice::Audio::AudioClipStream::get_Length)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Audio::AudioClipStream*), "get_Length", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Audio::AudioClipStream::get_StreamReadyLength
// Il2CppName: get_StreamReadyLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Meta::Voice::Audio::AudioClipStream::*)()>(&Meta::Voice::Audio::AudioClipStream::get_StreamReadyLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Audio::AudioClipStream*), "get_StreamReadyLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Audio::AudioClipStream::set_StreamReadyLength
// Il2CppName: set_StreamReadyLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Audio::AudioClipStream::*)(float)>(&Meta::Voice::Audio::AudioClipStream::set_StreamReadyLength)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Audio::AudioClipStream*), "set_StreamReadyLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Audio::AudioClipStream::get_OnStreamReady
// Il2CppName: get_OnStreamReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::Voice::Audio::AudioClipStreamDelegate* (Meta::Voice::Audio::AudioClipStream::*)()>(&Meta::Voice::Audio::AudioClipStream::get_OnStreamReady)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Audio::AudioClipStream*), "get_OnStreamReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Audio::AudioClipStream::set_OnStreamReady
// Il2CppName: set_OnStreamReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Audio::AudioClipStream::*)(::Meta::Voice::Audio::AudioClipStreamDelegate*)>(&Meta::Voice::Audio::AudioClipStream::set_OnStreamReady)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Meta.Voice.Audio", "AudioClipStreamDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Audio::AudioClipStream*), "set_OnStreamReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Audio::AudioClipStream::get_OnStreamUpdated
// Il2CppName: get_OnStreamUpdated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::Voice::Audio::AudioClipStreamDelegate* (Meta::Voice::Audio::AudioClipStream::*)()>(&Meta::Voice::Audio::AudioClipStream::get_OnStreamUpdated)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Audio::AudioClipStream*), "get_OnStreamUpdated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Audio::AudioClipStream::set_OnStreamUpdated
// Il2CppName: set_OnStreamUpdated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Audio::AudioClipStream::*)(::Meta::Voice::Audio::AudioClipStreamDelegate*)>(&Meta::Voice::Audio::AudioClipStream::set_OnStreamUpdated)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Meta.Voice.Audio", "AudioClipStreamDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Audio::AudioClipStream*), "set_OnStreamUpdated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Audio::AudioClipStream::get_OnStreamComplete
// Il2CppName: get_OnStreamComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::Voice::Audio::AudioClipStreamDelegate* (Meta::Voice::Audio::AudioClipStream::*)()>(&Meta::Voice::Audio::AudioClipStream::get_OnStreamComplete)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Audio::AudioClipStream*), "get_OnStreamComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Audio::AudioClipStream::set_OnStreamComplete
// Il2CppName: set_OnStreamComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Audio::AudioClipStream::*)(::Meta::Voice::Audio::AudioClipStreamDelegate*)>(&Meta::Voice::Audio::AudioClipStream::set_OnStreamComplete)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Meta.Voice.Audio", "AudioClipStreamDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Audio::AudioClipStream*), "set_OnStreamComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Audio::AudioClipStream::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Meta::Voice::Audio::AudioClipStream::AddSamples
// Il2CppName: AddSamples
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Audio::AudioClipStream::*)(::ArrayW<float>)>(&Meta::Voice::Audio::AudioClipStream::AddSamples)> {
  static const MethodInfo* get() {
    static auto* samples = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Audio::AudioClipStream*), "AddSamples", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{samples});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Audio::AudioClipStream::SetTotalSamples
// Il2CppName: SetTotalSamples
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Audio::AudioClipStream::*)(int)>(&Meta::Voice::Audio::AudioClipStream::SetTotalSamples)> {
  static const MethodInfo* get() {
    static auto* totalSamples = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Audio::AudioClipStream*), "SetTotalSamples", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{totalSamples});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Audio::AudioClipStream::UpdateState
// Il2CppName: UpdateState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Audio::AudioClipStream::*)()>(&Meta::Voice::Audio::AudioClipStream::UpdateState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Audio::AudioClipStream*), "UpdateState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Audio::AudioClipStream::HandleStreamReady
// Il2CppName: HandleStreamReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Audio::AudioClipStream::*)()>(&Meta::Voice::Audio::AudioClipStream::HandleStreamReady)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Audio::AudioClipStream*), "HandleStreamReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Audio::AudioClipStream::HandleStreamUpdated
// Il2CppName: HandleStreamUpdated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Audio::AudioClipStream::*)()>(&Meta::Voice::Audio::AudioClipStream::HandleStreamUpdated)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Audio::AudioClipStream*), "HandleStreamUpdated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Audio::AudioClipStream::HandleStreamComplete
// Il2CppName: HandleStreamComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Audio::AudioClipStream::*)()>(&Meta::Voice::Audio::AudioClipStream::HandleStreamComplete)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Audio::AudioClipStream*), "HandleStreamComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Audio::AudioClipStream::Unload
// Il2CppName: Unload
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Audio::AudioClipStream::*)()>(&Meta::Voice::Audio::AudioClipStream::Unload)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Audio::AudioClipStream*), "Unload", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Audio::AudioClipStream::GetSampleLength
// Il2CppName: GetSampleLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Meta::Voice::Audio::AudioClipStream::*)(int)>(&Meta::Voice::Audio::AudioClipStream::GetSampleLength)> {
  static const MethodInfo* get() {
    static auto* totalSamples = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Audio::AudioClipStream*), "GetSampleLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{totalSamples});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Audio::AudioClipStream::GetLength
// Il2CppName: GetLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(int, int, int)>(&Meta::Voice::Audio::AudioClipStream::GetLength)> {
  static const MethodInfo* get() {
    static auto* totalSamples = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* channels = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* samplesPerSecond = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Audio::AudioClipStream*), "GetLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{totalSamples, channels, samplesPerSecond});
  }
};
