// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Attribute
#include "System/Attribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: Meta.Voice.Hub.Attributes
namespace Meta::Voice::Hub::Attributes {
  // Forward declaring type: MetaHubContextAttribute
  class MetaHubContextAttribute;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::Voice::Hub::Attributes::MetaHubContextAttribute);
DEFINE_IL2CPP_ARG_TYPE(::Meta::Voice::Hub::Attributes::MetaHubContextAttribute*, "Meta.Voice.Hub.Attributes", "MetaHubContextAttribute");
// Type namespace: Meta.Voice.Hub.Attributes
namespace Meta::Voice::Hub::Attributes {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Meta.Voice.Hub.Attributes.MetaHubContextAttribute
  // [TokenAttribute] Offset: FFFFFFFF
  // [AttributeUsageAttribute] Offset: FFFFFFFF
  class MetaHubContextAttribute : public ::System::Attribute {
    public:
    public:
    // private System.String <Context>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::StringW Context;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Int32 <Priority>k__BackingField
    // Size: 0x4
    // Offset: 0x18
    int Priority;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: Priority and: LogoPath
    char __padding1[0x4] = {};
    // private System.String <LogoPath>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    ::StringW LogoPath;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: private System.String <Context>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$Context$k__BackingField();
    // Get instance field reference: private System.Int32 <Priority>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$Priority$k__BackingField();
    // Get instance field reference: private System.String <LogoPath>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$LogoPath$k__BackingField();
    // public System.String get_Context()
    // Offset: 0x440F550
    ::StringW get_Context();
    // private System.Void set_Context(System.String value)
    // Offset: 0x440F558
    void set_Context(::StringW value);
    // public System.Int32 get_Priority()
    // Offset: 0x440F560
    int get_Priority();
    // private System.Void set_Priority(System.Int32 value)
    // Offset: 0x440F568
    void set_Priority(int value);
    // public System.String get_LogoPath()
    // Offset: 0x440F570
    ::StringW get_LogoPath();
    // private System.Void set_LogoPath(System.String value)
    // Offset: 0x440F578
    void set_LogoPath(::StringW value);
    // public System.Void .ctor(System.String context, System.Int32 priority, System.String pathToLogo)
    // Offset: 0x440F580
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MetaHubContextAttribute* New_ctor(::StringW context, int priority, ::StringW pathToLogo) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::Voice::Hub::Attributes::MetaHubContextAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MetaHubContextAttribute*, creationType>(context, priority, pathToLogo)));
    }
  }; // Meta.Voice.Hub.Attributes.MetaHubContextAttribute
  #pragma pack(pop)
  static check_size<sizeof(MetaHubContextAttribute), 32 + sizeof(::StringW)> __Meta_Voice_Hub_Attributes_MetaHubContextAttributeSizeCheck;
  static_assert(sizeof(MetaHubContextAttribute) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::Voice::Hub::Attributes::MetaHubContextAttribute::get_Context
// Il2CppName: get_Context
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Meta::Voice::Hub::Attributes::MetaHubContextAttribute::*)()>(&Meta::Voice::Hub::Attributes::MetaHubContextAttribute::get_Context)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Hub::Attributes::MetaHubContextAttribute*), "get_Context", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Hub::Attributes::MetaHubContextAttribute::set_Context
// Il2CppName: set_Context
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Hub::Attributes::MetaHubContextAttribute::*)(::StringW)>(&Meta::Voice::Hub::Attributes::MetaHubContextAttribute::set_Context)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Hub::Attributes::MetaHubContextAttribute*), "set_Context", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Hub::Attributes::MetaHubContextAttribute::get_Priority
// Il2CppName: get_Priority
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Meta::Voice::Hub::Attributes::MetaHubContextAttribute::*)()>(&Meta::Voice::Hub::Attributes::MetaHubContextAttribute::get_Priority)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Hub::Attributes::MetaHubContextAttribute*), "get_Priority", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Hub::Attributes::MetaHubContextAttribute::set_Priority
// Il2CppName: set_Priority
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Hub::Attributes::MetaHubContextAttribute::*)(int)>(&Meta::Voice::Hub::Attributes::MetaHubContextAttribute::set_Priority)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Hub::Attributes::MetaHubContextAttribute*), "set_Priority", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Hub::Attributes::MetaHubContextAttribute::get_LogoPath
// Il2CppName: get_LogoPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Meta::Voice::Hub::Attributes::MetaHubContextAttribute::*)()>(&Meta::Voice::Hub::Attributes::MetaHubContextAttribute::get_LogoPath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Hub::Attributes::MetaHubContextAttribute*), "get_LogoPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Hub::Attributes::MetaHubContextAttribute::set_LogoPath
// Il2CppName: set_LogoPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Hub::Attributes::MetaHubContextAttribute::*)(::StringW)>(&Meta::Voice::Hub::Attributes::MetaHubContextAttribute::set_LogoPath)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Hub::Attributes::MetaHubContextAttribute*), "set_LogoPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Hub::Attributes::MetaHubContextAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
