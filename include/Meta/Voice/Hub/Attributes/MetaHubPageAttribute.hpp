// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Attribute
#include "System/Attribute.hpp"
// Including type: Meta.Voice.Hub.Interfaces.IPageInfo
#include "Meta/Voice/Hub/Interfaces/IPageInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: Meta.Voice.Hub.Attributes
namespace Meta::Voice::Hub::Attributes {
  // Forward declaring type: MetaHubPageAttribute
  class MetaHubPageAttribute;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::Voice::Hub::Attributes::MetaHubPageAttribute);
DEFINE_IL2CPP_ARG_TYPE(::Meta::Voice::Hub::Attributes::MetaHubPageAttribute*, "Meta.Voice.Hub.Attributes", "MetaHubPageAttribute");
// Type namespace: Meta.Voice.Hub.Attributes
namespace Meta::Voice::Hub::Attributes {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: Meta.Voice.Hub.Attributes.MetaHubPageAttribute
  // [TokenAttribute] Offset: FFFFFFFF
  class MetaHubPageAttribute : public ::System::Attribute/*, public ::Meta::Voice::Hub::Interfaces::IPageInfo*/ {
    public:
    public:
    // private System.String <Name>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::StringW Name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String <Context>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::StringW Context;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Int32 <Priority>k__BackingField
    // Size: 0x4
    // Offset: 0x20
    int Priority;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: Priority and: Prefix
    char __padding2[0x4] = {};
    // private System.String <Prefix>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    ::StringW Prefix;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Meta::Voice::Hub::Interfaces::IPageInfo
    operator ::Meta::Voice::Hub::Interfaces::IPageInfo() noexcept {
      return *reinterpret_cast<::Meta::Voice::Hub::Interfaces::IPageInfo*>(this);
    }
    // Get instance field reference: private System.String <Name>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$Name$k__BackingField();
    // Get instance field reference: private System.String <Context>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$Context$k__BackingField();
    // Get instance field reference: private System.Int32 <Priority>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$Priority$k__BackingField();
    // Get instance field reference: private System.String <Prefix>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$Prefix$k__BackingField();
    // public System.String get_Name()
    // Offset: 0x440F5D4
    ::StringW get_Name();
    // private System.Void set_Name(System.String value)
    // Offset: 0x440F5DC
    void set_Name(::StringW value);
    // public System.String get_Context()
    // Offset: 0x440F5E4
    ::StringW get_Context();
    // private System.Void set_Context(System.String value)
    // Offset: 0x440F5EC
    void set_Context(::StringW value);
    // public System.Int32 get_Priority()
    // Offset: 0x440F5F4
    int get_Priority();
    // private System.Void set_Priority(System.Int32 value)
    // Offset: 0x440F5FC
    void set_Priority(int value);
    // public System.String get_Prefix()
    // Offset: 0x440F604
    ::StringW get_Prefix();
    // private System.Void set_Prefix(System.String value)
    // Offset: 0x440F60C
    void set_Prefix(::StringW value);
    // public System.Void .ctor(System.String name, System.String context, System.String prefix, System.Int32 priority)
    // Offset: 0x440F614
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MetaHubPageAttribute* New_ctor(::StringW name, ::StringW context, ::StringW prefix, int priority) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::Voice::Hub::Attributes::MetaHubPageAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MetaHubPageAttribute*, creationType>(name, context, prefix, priority)));
    }
  }; // Meta.Voice.Hub.Attributes.MetaHubPageAttribute
  #pragma pack(pop)
  static check_size<sizeof(MetaHubPageAttribute), 40 + sizeof(::StringW)> __Meta_Voice_Hub_Attributes_MetaHubPageAttributeSizeCheck;
  static_assert(sizeof(MetaHubPageAttribute) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::Voice::Hub::Attributes::MetaHubPageAttribute::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Meta::Voice::Hub::Attributes::MetaHubPageAttribute::*)()>(&Meta::Voice::Hub::Attributes::MetaHubPageAttribute::get_Name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Hub::Attributes::MetaHubPageAttribute*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Hub::Attributes::MetaHubPageAttribute::set_Name
// Il2CppName: set_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Hub::Attributes::MetaHubPageAttribute::*)(::StringW)>(&Meta::Voice::Hub::Attributes::MetaHubPageAttribute::set_Name)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Hub::Attributes::MetaHubPageAttribute*), "set_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Hub::Attributes::MetaHubPageAttribute::get_Context
// Il2CppName: get_Context
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Meta::Voice::Hub::Attributes::MetaHubPageAttribute::*)()>(&Meta::Voice::Hub::Attributes::MetaHubPageAttribute::get_Context)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Hub::Attributes::MetaHubPageAttribute*), "get_Context", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Hub::Attributes::MetaHubPageAttribute::set_Context
// Il2CppName: set_Context
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Hub::Attributes::MetaHubPageAttribute::*)(::StringW)>(&Meta::Voice::Hub::Attributes::MetaHubPageAttribute::set_Context)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Hub::Attributes::MetaHubPageAttribute*), "set_Context", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Hub::Attributes::MetaHubPageAttribute::get_Priority
// Il2CppName: get_Priority
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Meta::Voice::Hub::Attributes::MetaHubPageAttribute::*)()>(&Meta::Voice::Hub::Attributes::MetaHubPageAttribute::get_Priority)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Hub::Attributes::MetaHubPageAttribute*), "get_Priority", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Hub::Attributes::MetaHubPageAttribute::set_Priority
// Il2CppName: set_Priority
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Hub::Attributes::MetaHubPageAttribute::*)(int)>(&Meta::Voice::Hub::Attributes::MetaHubPageAttribute::set_Priority)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Hub::Attributes::MetaHubPageAttribute*), "set_Priority", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Hub::Attributes::MetaHubPageAttribute::get_Prefix
// Il2CppName: get_Prefix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Meta::Voice::Hub::Attributes::MetaHubPageAttribute::*)()>(&Meta::Voice::Hub::Attributes::MetaHubPageAttribute::get_Prefix)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Hub::Attributes::MetaHubPageAttribute*), "get_Prefix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Hub::Attributes::MetaHubPageAttribute::set_Prefix
// Il2CppName: set_Prefix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Hub::Attributes::MetaHubPageAttribute::*)(::StringW)>(&Meta::Voice::Hub::Attributes::MetaHubPageAttribute::set_Prefix)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Hub::Attributes::MetaHubPageAttribute*), "set_Prefix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Hub::Attributes::MetaHubPageAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
