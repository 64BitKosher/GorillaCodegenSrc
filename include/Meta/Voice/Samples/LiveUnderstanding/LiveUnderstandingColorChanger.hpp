// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Color
  struct Color;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Forward declaring namespace: Meta::WitAi::Data
namespace Meta::WitAi::Data {
  // Forward declaring type: VoiceSession
  class VoiceSession;
}
// Completed forward declares
// Type namespace: Meta.Voice.Samples.LiveUnderstanding
namespace Meta::Voice::Samples::LiveUnderstanding {
  // Forward declaring type: LiveUnderstandingColorChanger
  class LiveUnderstandingColorChanger;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::Voice::Samples::LiveUnderstanding::LiveUnderstandingColorChanger);
DEFINE_IL2CPP_ARG_TYPE(::Meta::Voice::Samples::LiveUnderstanding::LiveUnderstandingColorChanger*, "Meta.Voice.Samples.LiveUnderstanding", "LiveUnderstandingColorChanger");
// Type namespace: Meta.Voice.Samples.LiveUnderstanding
namespace Meta::Voice::Samples::LiveUnderstanding {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Meta.Voice.Samples.LiveUnderstanding.LiveUnderstandingColorChanger
  // [TokenAttribute] Offset: FFFFFFFF
  class LiveUnderstandingColorChanger : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.Transform _container
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Transform* container;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    public:
    // static field const value: static private System.String COLOR_SET_INTENT_ID
    static constexpr const char* COLOR_SET_INTENT_ID = "change_color";
    // Get static field: static private System.String COLOR_SET_INTENT_ID
    static ::StringW _get_COLOR_SET_INTENT_ID();
    // Set static field: static private System.String COLOR_SET_INTENT_ID
    static void _set_COLOR_SET_INTENT_ID(::StringW value);
    // static field const value: static private System.String COLOR_ENTITY_ID
    static constexpr const char* COLOR_ENTITY_ID = "color:color";
    // Get static field: static private System.String COLOR_ENTITY_ID
    static ::StringW _get_COLOR_ENTITY_ID();
    // Set static field: static private System.String COLOR_ENTITY_ID
    static void _set_COLOR_ENTITY_ID(::StringW value);
    // Get instance field reference: private UnityEngine.Transform _container
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__container();
    // public System.Void OnValidatePartialResponse(Meta.WitAi.Data.VoiceSession sessionData)
    // Offset: 0x4410F1C
    void OnValidatePartialResponse(::Meta::WitAi::Data::VoiceSession* sessionData);
    // public System.Void OnValidateColorSet(Meta.WitAi.Data.VoiceSession sessionData, System.String color)
    // Offset: 0x4410FD4
    void OnValidateColorSet(::Meta::WitAi::Data::VoiceSession* sessionData, ::StringW color);
    // private System.Boolean TryGetColor(System.String colorName, out UnityEngine.Color color)
    // Offset: 0x4411030
    bool TryGetColor(::StringW colorName, ByRef<::UnityEngine::Color> color);
    // public System.Void SetColor(UnityEngine.Color newColor)
    // Offset: 0x4411040
    void SetColor(::UnityEngine::Color newColor);
    // public System.Void .ctor()
    // Offset: 0x441111C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LiveUnderstandingColorChanger* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::Voice::Samples::LiveUnderstanding::LiveUnderstandingColorChanger::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LiveUnderstandingColorChanger*, creationType>()));
    }
  }; // Meta.Voice.Samples.LiveUnderstanding.LiveUnderstandingColorChanger
  #pragma pack(pop)
  static check_size<sizeof(LiveUnderstandingColorChanger), 32 + sizeof(::UnityEngine::Transform*)> __Meta_Voice_Samples_LiveUnderstanding_LiveUnderstandingColorChangerSizeCheck;
  static_assert(sizeof(LiveUnderstandingColorChanger) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::Voice::Samples::LiveUnderstanding::LiveUnderstandingColorChanger::OnValidatePartialResponse
// Il2CppName: OnValidatePartialResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Samples::LiveUnderstanding::LiveUnderstandingColorChanger::*)(::Meta::WitAi::Data::VoiceSession*)>(&Meta::Voice::Samples::LiveUnderstanding::LiveUnderstandingColorChanger::OnValidatePartialResponse)> {
  static const MethodInfo* get() {
    static auto* sessionData = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Data", "VoiceSession")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Samples::LiveUnderstanding::LiveUnderstandingColorChanger*), "OnValidatePartialResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sessionData});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Samples::LiveUnderstanding::LiveUnderstandingColorChanger::OnValidateColorSet
// Il2CppName: OnValidateColorSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Samples::LiveUnderstanding::LiveUnderstandingColorChanger::*)(::Meta::WitAi::Data::VoiceSession*, ::StringW)>(&Meta::Voice::Samples::LiveUnderstanding::LiveUnderstandingColorChanger::OnValidateColorSet)> {
  static const MethodInfo* get() {
    static auto* sessionData = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Data", "VoiceSession")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Samples::LiveUnderstanding::LiveUnderstandingColorChanger*), "OnValidateColorSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sessionData, color});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Samples::LiveUnderstanding::LiveUnderstandingColorChanger::TryGetColor
// Il2CppName: TryGetColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::Voice::Samples::LiveUnderstanding::LiveUnderstandingColorChanger::*)(::StringW, ByRef<::UnityEngine::Color>)>(&Meta::Voice::Samples::LiveUnderstanding::LiveUnderstandingColorChanger::TryGetColor)> {
  static const MethodInfo* get() {
    static auto* colorName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Samples::LiveUnderstanding::LiveUnderstandingColorChanger*), "TryGetColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colorName, color});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Samples::LiveUnderstanding::LiveUnderstandingColorChanger::SetColor
// Il2CppName: SetColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Samples::LiveUnderstanding::LiveUnderstandingColorChanger::*)(::UnityEngine::Color)>(&Meta::Voice::Samples::LiveUnderstanding::LiveUnderstandingColorChanger::SetColor)> {
  static const MethodInfo* get() {
    static auto* newColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Samples::LiveUnderstanding::LiveUnderstandingColorChanger*), "SetColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newColor});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Samples::LiveUnderstanding::LiveUnderstandingColorChanger::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
