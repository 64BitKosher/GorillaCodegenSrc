// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Text
  class Text;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioClip
  class AudioClip;
}
// Completed forward declares
// Type namespace: Meta.Voice.Samples.BuiltInTimer
namespace Meta::Voice::Samples::BuiltInTimer {
  // Forward declaring type: TimerController
  class TimerController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::Voice::Samples::BuiltInTimer::TimerController);
DEFINE_IL2CPP_ARG_TYPE(::Meta::Voice::Samples::BuiltInTimer::TimerController*, "Meta.Voice.Samples.BuiltInTimer", "TimerController");
// Type namespace: Meta.Voice.Samples.BuiltInTimer
namespace Meta::Voice::Samples::BuiltInTimer {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: Meta.Voice.Samples.BuiltInTimer.TimerController
  // [TokenAttribute] Offset: FFFFFFFF
  class TimerController : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private System.Double _time
    // Size: 0x8
    // Offset: 0x20
    double time;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Boolean _timerExist
    // Size: 0x1
    // Offset: 0x28
    bool timerExist;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _timerRunning
    // Size: 0x1
    // Offset: 0x29
    bool timerRunning;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: timerRunning and: logText
    char __padding2[0x6] = {};
    // public UnityEngine.UI.Text logText
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::UI::Text* logText;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // public UnityEngine.AudioClip[] timesUpSounds
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<::UnityEngine::AudioClip*> timesUpSounds;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::AudioClip*>) == 0x8);
    public:
    // Get instance field reference: private System.Double _time
    [[deprecated("Use field access instead!")]] double& dyn__time();
    // Get instance field reference: private System.Boolean _timerExist
    [[deprecated("Use field access instead!")]] bool& dyn__timerExist();
    // Get instance field reference: private System.Boolean _timerRunning
    [[deprecated("Use field access instead!")]] bool& dyn__timerRunning();
    // Get instance field reference: public UnityEngine.UI.Text logText
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_logText();
    // Get instance field reference: public UnityEngine.AudioClip[] timesUpSounds
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::AudioClip*>& dyn_timesUpSounds();
    // private System.Void Update()
    // Offset: 0x440F7D8
    void Update();
    // private System.Void Log(System.String msg)
    // Offset: 0x440F8F8
    void Log(::StringW msg);
    // private System.Void OnElapsedTime()
    // Offset: 0x440F830
    void OnElapsedTime();
    // public System.Void DeleteTimer()
    // Offset: 0x440F97C
    void DeleteTimer();
    // public System.Void CreateTimer(System.String[] entityValues)
    // Offset: 0x440F9EC
    void CreateTimer(::ArrayW<::StringW> entityValues);
    // public System.Void GetTimerIntent()
    // Offset: 0x440FD10
    void GetTimerIntent();
    // public System.Void PauseTimer()
    // Offset: 0x4410034
    void PauseTimer();
    // public System.Void ResumeTimer()
    // Offset: 0x4410080
    void ResumeTimer();
    // public System.Void SubtractTimeTimer(System.String[] entityValues)
    // Offset: 0x44100D0
    void SubtractTimeTimer(::ArrayW<::StringW> entityValues);
    // public System.Void AddTimeToTimer(System.String[] entityValues)
    // Offset: 0x44101DC
    void AddTimeToTimer(::ArrayW<::StringW> entityValues);
    // public System.Double GetRemainingTime()
    // Offset: 0x44102DC
    double GetRemainingTime();
    // public System.String GetFormattedTimeFromSeconds()
    // Offset: 0x440FD14
    ::StringW GetFormattedTimeFromSeconds();
    // private System.Boolean ParseTime(System.String[] entityValues, out System.Double time)
    // Offset: 0x440FBAC
    bool ParseTime(::ArrayW<::StringW> entityValues, ByRef<double> time);
    // public System.Void .ctor()
    // Offset: 0x44102E4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TimerController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::Voice::Samples::BuiltInTimer::TimerController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TimerController*, creationType>()));
    }
  }; // Meta.Voice.Samples.BuiltInTimer.TimerController
  #pragma pack(pop)
  static check_size<sizeof(TimerController), 56 + sizeof(::ArrayW<::UnityEngine::AudioClip*>)> __Meta_Voice_Samples_BuiltInTimer_TimerControllerSizeCheck;
  static_assert(sizeof(TimerController) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::Voice::Samples::BuiltInTimer::TimerController::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Samples::BuiltInTimer::TimerController::*)()>(&Meta::Voice::Samples::BuiltInTimer::TimerController::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Samples::BuiltInTimer::TimerController*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Samples::BuiltInTimer::TimerController::Log
// Il2CppName: Log
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Samples::BuiltInTimer::TimerController::*)(::StringW)>(&Meta::Voice::Samples::BuiltInTimer::TimerController::Log)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Samples::BuiltInTimer::TimerController*), "Log", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Samples::BuiltInTimer::TimerController::OnElapsedTime
// Il2CppName: OnElapsedTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Samples::BuiltInTimer::TimerController::*)()>(&Meta::Voice::Samples::BuiltInTimer::TimerController::OnElapsedTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Samples::BuiltInTimer::TimerController*), "OnElapsedTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Samples::BuiltInTimer::TimerController::DeleteTimer
// Il2CppName: DeleteTimer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Samples::BuiltInTimer::TimerController::*)()>(&Meta::Voice::Samples::BuiltInTimer::TimerController::DeleteTimer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Samples::BuiltInTimer::TimerController*), "DeleteTimer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Samples::BuiltInTimer::TimerController::CreateTimer
// Il2CppName: CreateTimer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Samples::BuiltInTimer::TimerController::*)(::ArrayW<::StringW>)>(&Meta::Voice::Samples::BuiltInTimer::TimerController::CreateTimer)> {
  static const MethodInfo* get() {
    static auto* entityValues = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Samples::BuiltInTimer::TimerController*), "CreateTimer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{entityValues});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Samples::BuiltInTimer::TimerController::GetTimerIntent
// Il2CppName: GetTimerIntent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Samples::BuiltInTimer::TimerController::*)()>(&Meta::Voice::Samples::BuiltInTimer::TimerController::GetTimerIntent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Samples::BuiltInTimer::TimerController*), "GetTimerIntent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Samples::BuiltInTimer::TimerController::PauseTimer
// Il2CppName: PauseTimer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Samples::BuiltInTimer::TimerController::*)()>(&Meta::Voice::Samples::BuiltInTimer::TimerController::PauseTimer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Samples::BuiltInTimer::TimerController*), "PauseTimer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Samples::BuiltInTimer::TimerController::ResumeTimer
// Il2CppName: ResumeTimer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Samples::BuiltInTimer::TimerController::*)()>(&Meta::Voice::Samples::BuiltInTimer::TimerController::ResumeTimer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Samples::BuiltInTimer::TimerController*), "ResumeTimer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Samples::BuiltInTimer::TimerController::SubtractTimeTimer
// Il2CppName: SubtractTimeTimer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Samples::BuiltInTimer::TimerController::*)(::ArrayW<::StringW>)>(&Meta::Voice::Samples::BuiltInTimer::TimerController::SubtractTimeTimer)> {
  static const MethodInfo* get() {
    static auto* entityValues = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Samples::BuiltInTimer::TimerController*), "SubtractTimeTimer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{entityValues});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Samples::BuiltInTimer::TimerController::AddTimeToTimer
// Il2CppName: AddTimeToTimer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Samples::BuiltInTimer::TimerController::*)(::ArrayW<::StringW>)>(&Meta::Voice::Samples::BuiltInTimer::TimerController::AddTimeToTimer)> {
  static const MethodInfo* get() {
    static auto* entityValues = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Samples::BuiltInTimer::TimerController*), "AddTimeToTimer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{entityValues});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Samples::BuiltInTimer::TimerController::GetRemainingTime
// Il2CppName: GetRemainingTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (Meta::Voice::Samples::BuiltInTimer::TimerController::*)()>(&Meta::Voice::Samples::BuiltInTimer::TimerController::GetRemainingTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Samples::BuiltInTimer::TimerController*), "GetRemainingTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Samples::BuiltInTimer::TimerController::GetFormattedTimeFromSeconds
// Il2CppName: GetFormattedTimeFromSeconds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Meta::Voice::Samples::BuiltInTimer::TimerController::*)()>(&Meta::Voice::Samples::BuiltInTimer::TimerController::GetFormattedTimeFromSeconds)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Samples::BuiltInTimer::TimerController*), "GetFormattedTimeFromSeconds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Samples::BuiltInTimer::TimerController::ParseTime
// Il2CppName: ParseTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::Voice::Samples::BuiltInTimer::TimerController::*)(::ArrayW<::StringW>, ByRef<double>)>(&Meta::Voice::Samples::BuiltInTimer::TimerController::ParseTime)> {
  static const MethodInfo* get() {
    static auto* entityValues = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Double")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Samples::BuiltInTimer::TimerController*), "ParseTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{entityValues, time});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Samples::BuiltInTimer::TimerController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
