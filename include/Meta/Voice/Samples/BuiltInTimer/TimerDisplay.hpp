// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Meta::Voice::Samples::BuiltInTimer
namespace Meta::Voice::Samples::BuiltInTimer {
  // Forward declaring type: TimerController
  class TimerController;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Text
  class Text;
}
// Completed forward declares
// Type namespace: Meta.Voice.Samples.BuiltInTimer
namespace Meta::Voice::Samples::BuiltInTimer {
  // Forward declaring type: TimerDisplay
  class TimerDisplay;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::Voice::Samples::BuiltInTimer::TimerDisplay);
DEFINE_IL2CPP_ARG_TYPE(::Meta::Voice::Samples::BuiltInTimer::TimerDisplay*, "Meta.Voice.Samples.BuiltInTimer", "TimerDisplay");
// Type namespace: Meta.Voice.Samples.BuiltInTimer
namespace Meta::Voice::Samples::BuiltInTimer {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: Meta.Voice.Samples.BuiltInTimer.TimerDisplay
  // [TokenAttribute] Offset: FFFFFFFF
  class TimerDisplay : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public Meta.Voice.Samples.BuiltInTimer.TimerController timer
    // Size: 0x8
    // Offset: 0x20
    ::Meta::Voice::Samples::BuiltInTimer::TimerController* timer;
    // Field size check
    static_assert(sizeof(::Meta::Voice::Samples::BuiltInTimer::TimerController*) == 0x8);
    // private UnityEngine.UI.Text _uiText
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::UI::Text* uiText;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    public:
    // Get instance field reference: public Meta.Voice.Samples.BuiltInTimer.TimerController timer
    [[deprecated("Use field access instead!")]] ::Meta::Voice::Samples::BuiltInTimer::TimerController*& dyn_timer();
    // Get instance field reference: private UnityEngine.UI.Text _uiText
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn__uiText();
    // private System.Void Start()
    // Offset: 0x44102EC
    void Start();
    // private System.Void Update()
    // Offset: 0x4410344
    void Update();
    // public System.Void .ctor()
    // Offset: 0x4410380
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TimerDisplay* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::Voice::Samples::BuiltInTimer::TimerDisplay::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TimerDisplay*, creationType>()));
    }
  }; // Meta.Voice.Samples.BuiltInTimer.TimerDisplay
  #pragma pack(pop)
  static check_size<sizeof(TimerDisplay), 40 + sizeof(::UnityEngine::UI::Text*)> __Meta_Voice_Samples_BuiltInTimer_TimerDisplaySizeCheck;
  static_assert(sizeof(TimerDisplay) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::Voice::Samples::BuiltInTimer::TimerDisplay::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Samples::BuiltInTimer::TimerDisplay::*)()>(&Meta::Voice::Samples::BuiltInTimer::TimerDisplay::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Samples::BuiltInTimer::TimerDisplay*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Samples::BuiltInTimer::TimerDisplay::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Samples::BuiltInTimer::TimerDisplay::*)()>(&Meta::Voice::Samples::BuiltInTimer::TimerDisplay::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Samples::BuiltInTimer::TimerDisplay*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Samples::BuiltInTimer::TimerDisplay::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
