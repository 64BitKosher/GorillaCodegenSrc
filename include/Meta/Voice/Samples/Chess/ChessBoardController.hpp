// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Meta::Voice::Samples::Chess
namespace Meta::Voice::Samples::Chess {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Text
  class Text;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Exception
  class Exception;
}
// Completed forward declares
// Type namespace: Meta.Voice.Samples.Chess
namespace Meta::Voice::Samples::Chess {
  // Forward declaring type: ChessBoardController
  class ChessBoardController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::Voice::Samples::Chess::ChessBoardController);
DEFINE_IL2CPP_ARG_TYPE(::Meta::Voice::Samples::Chess::ChessBoardController*, "Meta.Voice.Samples.Chess", "ChessBoardController");
// Type namespace: Meta.Voice.Samples.Chess
namespace Meta::Voice::Samples::Chess {
  // Size: 0x4C
  #pragma pack(push, 1)
  // Autogenerated type: Meta.Voice.Samples.Chess.ChessBoardController
  // [TokenAttribute] Offset: FFFFFFFF
  class ChessBoardController : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::Meta::Voice::Samples::Chess::ChessBoardController::ChessBoardLetter
    struct ChessBoardLetter;
    public:
    // public UnityEngine.GameObject letters
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::GameObject* letters;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject numbers
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::GameObject* numbers;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject chessPiece
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::GameObject* chessPiece;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.UI.Text errorText
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::UI::Text* errorText;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // private UnityEngine.Vector3 _targetPosition
    // Size: 0xC
    // Offset: 0x40
    ::UnityEngine::Vector3 targetPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    public:
    // Get instance field reference: public UnityEngine.GameObject letters
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_letters();
    // Get instance field reference: public UnityEngine.GameObject numbers
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_numbers();
    // Get instance field reference: public UnityEngine.GameObject chessPiece
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_chessPiece();
    // Get instance field reference: public UnityEngine.UI.Text errorText
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_errorText();
    // Get instance field reference: private UnityEngine.Vector3 _targetPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__targetPosition();
    // private System.Void Awake()
    // Offset: 0x4410484
    void Awake();
    // private System.Void Update()
    // Offset: 0x44104BC
    void Update();
    // public System.Void MoveChessPiece(Meta.Voice.Samples.Chess.ChessBoardController/ChessBoardLetter letter, System.Int32 number)
    // Offset: 0x4410584
    void MoveChessPiece(::Meta::Voice::Samples::Chess::ChessBoardController::ChessBoardLetter letter, int number);
    // public System.Void OnHandleEntityResolutionFailure(System.String intent, System.Exception ex)
    // Offset: 0x44106EC
    void OnHandleEntityResolutionFailure(::StringW intent, ::System::Exception* ex);
    // public System.Void .ctor()
    // Offset: 0x44107F0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ChessBoardController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::Voice::Samples::Chess::ChessBoardController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ChessBoardController*, creationType>()));
    }
  }; // Meta.Voice.Samples.Chess.ChessBoardController
  #pragma pack(pop)
  static check_size<sizeof(ChessBoardController), 64 + sizeof(::UnityEngine::Vector3)> __Meta_Voice_Samples_Chess_ChessBoardControllerSizeCheck;
  static_assert(sizeof(ChessBoardController) == 0x4C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::Voice::Samples::Chess::ChessBoardController::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Samples::Chess::ChessBoardController::*)()>(&Meta::Voice::Samples::Chess::ChessBoardController::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Samples::Chess::ChessBoardController*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Samples::Chess::ChessBoardController::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Samples::Chess::ChessBoardController::*)()>(&Meta::Voice::Samples::Chess::ChessBoardController::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Samples::Chess::ChessBoardController*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Samples::Chess::ChessBoardController::MoveChessPiece
// Il2CppName: MoveChessPiece
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Samples::Chess::ChessBoardController::*)(::Meta::Voice::Samples::Chess::ChessBoardController::ChessBoardLetter, int)>(&Meta::Voice::Samples::Chess::ChessBoardController::MoveChessPiece)> {
  static const MethodInfo* get() {
    static auto* letter = &::il2cpp_utils::GetClassFromName("Meta.Voice.Samples.Chess", "ChessBoardController/ChessBoardLetter")->byval_arg;
    static auto* number = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Samples::Chess::ChessBoardController*), "MoveChessPiece", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{letter, number});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Samples::Chess::ChessBoardController::OnHandleEntityResolutionFailure
// Il2CppName: OnHandleEntityResolutionFailure
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Samples::Chess::ChessBoardController::*)(::StringW, ::System::Exception*)>(&Meta::Voice::Samples::Chess::ChessBoardController::OnHandleEntityResolutionFailure)> {
  static const MethodInfo* get() {
    static auto* intent = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ex = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Samples::Chess::ChessBoardController*), "OnHandleEntityResolutionFailure", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{intent, ex});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Samples::Chess::ChessBoardController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
