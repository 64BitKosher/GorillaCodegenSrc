// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Color
  struct Color;
}
// Forward declaring namespace: Meta::Voice::Samples::ShapesConduit
namespace Meta::Voice::Samples::ShapesConduit {
  // Forward declaring type: ColorName
  struct ColorName;
  // Forward declaring type: ShapeName
  struct ShapeName;
}
// Completed forward declares
// Type namespace: Meta.Voice.Samples.ShapesConduit
namespace Meta::Voice::Samples::ShapesConduit {
  // Forward declaring type: ColorChangerConduit
  class ColorChangerConduit;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::Voice::Samples::ShapesConduit::ColorChangerConduit);
DEFINE_IL2CPP_ARG_TYPE(::Meta::Voice::Samples::ShapesConduit::ColorChangerConduit*, "Meta.Voice.Samples.ShapesConduit", "ColorChangerConduit");
// Type namespace: Meta.Voice.Samples.ShapesConduit
namespace Meta::Voice::Samples::ShapesConduit {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Meta.Voice.Samples.ShapesConduit.ColorChangerConduit
  // [TokenAttribute] Offset: FFFFFFFF
  class ColorChangerConduit : public ::UnityEngine::MonoBehaviour {
    public:
    // private System.Void SetColor(UnityEngine.Transform trans, UnityEngine.Color color)
    // Offset: 0x4411A00
    void SetColor(::UnityEngine::Transform* trans, ::UnityEngine::Color color);
    // private System.Void ChangeColor(Meta.Voice.Samples.ShapesConduit.ColorName color, Meta.Voice.Samples.ShapesConduit.ShapeName shape)
    // Offset: 0x4411A98
    void ChangeColor(::Meta::Voice::Samples::ShapesConduit::ColorName color, ::Meta::Voice::Samples::ShapesConduit::ShapeName shape);
    // public System.Void .ctor()
    // Offset: 0x4411BF0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ColorChangerConduit* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::Voice::Samples::ShapesConduit::ColorChangerConduit::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ColorChangerConduit*, creationType>()));
    }
  }; // Meta.Voice.Samples.ShapesConduit.ColorChangerConduit
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::Voice::Samples::ShapesConduit::ColorChangerConduit::SetColor
// Il2CppName: SetColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Samples::ShapesConduit::ColorChangerConduit::*)(::UnityEngine::Transform*, ::UnityEngine::Color)>(&Meta::Voice::Samples::ShapesConduit::ColorChangerConduit::SetColor)> {
  static const MethodInfo* get() {
    static auto* trans = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Samples::ShapesConduit::ColorChangerConduit*), "SetColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trans, color});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Samples::ShapesConduit::ColorChangerConduit::ChangeColor
// Il2CppName: ChangeColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Samples::ShapesConduit::ColorChangerConduit::*)(::Meta::Voice::Samples::ShapesConduit::ColorName, ::Meta::Voice::Samples::ShapesConduit::ShapeName)>(&Meta::Voice::Samples::ShapesConduit::ColorChangerConduit::ChangeColor)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("Meta.Voice.Samples.ShapesConduit", "ColorName")->byval_arg;
    static auto* shape = &::il2cpp_utils::GetClassFromName("Meta.Voice.Samples.ShapesConduit", "ShapeName")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Samples::ShapesConduit::ColorChangerConduit*), "ChangeColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color, shape});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Samples::ShapesConduit::ColorChangerConduit::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
