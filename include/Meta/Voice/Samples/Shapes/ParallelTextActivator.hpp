// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Meta::WitAi
namespace Meta::WitAi {
  // Forward declaring type: VoiceService
  class VoiceService;
}
// Completed forward declares
// Type namespace: Meta.Voice.Samples.Shapes
namespace Meta::Voice::Samples::Shapes {
  // Forward declaring type: ParallelTextActivator
  class ParallelTextActivator;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::Voice::Samples::Shapes::ParallelTextActivator);
DEFINE_IL2CPP_ARG_TYPE(::Meta::Voice::Samples::Shapes::ParallelTextActivator*, "Meta.Voice.Samples.Shapes", "ParallelTextActivator");
// Type namespace: Meta.Voice.Samples.Shapes
namespace Meta::Voice::Samples::Shapes {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: Meta.Voice.Samples.Shapes.ParallelTextActivator
  // [TokenAttribute] Offset: FFFFFFFF
  class ParallelTextActivator : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private Meta.WitAi.VoiceService _voiceService
    // Size: 0x8
    // Offset: 0x20
    ::Meta::WitAi::VoiceService* voiceService;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::VoiceService*) == 0x8);
    // private System.String[] _requests
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::StringW> requests;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    public:
    // Get instance field reference: private Meta.WitAi.VoiceService _voiceService
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::VoiceService*& dyn__voiceService();
    // Get instance field reference: private System.String[] _requests
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn__requests();
    // public System.Void SendParallelRequests()
    // Offset: 0x44115F8
    void SendParallelRequests();
    // public System.Void .ctor()
    // Offset: 0x441166C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ParallelTextActivator* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::Voice::Samples::Shapes::ParallelTextActivator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ParallelTextActivator*, creationType>()));
    }
  }; // Meta.Voice.Samples.Shapes.ParallelTextActivator
  #pragma pack(pop)
  static check_size<sizeof(ParallelTextActivator), 40 + sizeof(::ArrayW<::StringW>)> __Meta_Voice_Samples_Shapes_ParallelTextActivatorSizeCheck;
  static_assert(sizeof(ParallelTextActivator) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::Voice::Samples::Shapes::ParallelTextActivator::SendParallelRequests
// Il2CppName: SendParallelRequests
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Samples::Shapes::ParallelTextActivator::*)()>(&Meta::Voice::Samples::Shapes::ParallelTextActivator::SendParallelRequests)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Samples::Shapes::ParallelTextActivator*), "SendParallelRequests", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Samples::Shapes::ParallelTextActivator::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
