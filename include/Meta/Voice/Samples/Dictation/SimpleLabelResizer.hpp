// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TextMeshProUGUI
  class TextMeshProUGUI;
}
// Completed forward declares
// Type namespace: Meta.Voice.Samples.Dictation
namespace Meta::Voice::Samples::Dictation {
  // Forward declaring type: SimpleLabelResizer
  class SimpleLabelResizer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::Voice::Samples::Dictation::SimpleLabelResizer);
DEFINE_IL2CPP_ARG_TYPE(::Meta::Voice::Samples::Dictation::SimpleLabelResizer*, "Meta.Voice.Samples.Dictation", "SimpleLabelResizer");
// Type namespace: Meta.Voice.Samples.Dictation
namespace Meta::Voice::Samples::Dictation {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: Meta.Voice.Samples.Dictation.SimpleLabelResizer
  // [TokenAttribute] Offset: FFFFFFFF
  class SimpleLabelResizer : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private TMPro.TextMeshProUGUI _label
    // Size: 0x8
    // Offset: 0x20
    ::TMPro::TextMeshProUGUI* label;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshProUGUI*) == 0x8);
    // private System.String _text
    // Size: 0x8
    // Offset: 0x28
    ::StringW text;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: private TMPro.TextMeshProUGUI _label
    [[deprecated("Use field access instead!")]] ::TMPro::TextMeshProUGUI*& dyn__label();
    // Get instance field reference: private System.String _text
    [[deprecated("Use field access instead!")]] ::StringW& dyn__text();
    // private System.Void Reset()
    // Offset: 0x4410954
    void Reset();
    // private System.Void Awake()
    // Offset: 0x44109BC
    void Awake();
    // private System.Void Update()
    // Offset: 0x4410A7C
    void Update();
    // public System.Void RefreshSize()
    // Offset: 0x4410AD8
    void RefreshSize();
    // public System.Void .ctor()
    // Offset: 0x4410B64
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SimpleLabelResizer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::Voice::Samples::Dictation::SimpleLabelResizer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SimpleLabelResizer*, creationType>()));
    }
  }; // Meta.Voice.Samples.Dictation.SimpleLabelResizer
  #pragma pack(pop)
  static check_size<sizeof(SimpleLabelResizer), 40 + sizeof(::StringW)> __Meta_Voice_Samples_Dictation_SimpleLabelResizerSizeCheck;
  static_assert(sizeof(SimpleLabelResizer) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::Voice::Samples::Dictation::SimpleLabelResizer::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Samples::Dictation::SimpleLabelResizer::*)()>(&Meta::Voice::Samples::Dictation::SimpleLabelResizer::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Samples::Dictation::SimpleLabelResizer*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Samples::Dictation::SimpleLabelResizer::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Samples::Dictation::SimpleLabelResizer::*)()>(&Meta::Voice::Samples::Dictation::SimpleLabelResizer::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Samples::Dictation::SimpleLabelResizer*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Samples::Dictation::SimpleLabelResizer::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Samples::Dictation::SimpleLabelResizer::*)()>(&Meta::Voice::Samples::Dictation::SimpleLabelResizer::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Samples::Dictation::SimpleLabelResizer*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Samples::Dictation::SimpleLabelResizer::RefreshSize
// Il2CppName: RefreshSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Samples::Dictation::SimpleLabelResizer::*)()>(&Meta::Voice::Samples::Dictation::SimpleLabelResizer::RefreshSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Samples::Dictation::SimpleLabelResizer*), "RefreshSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Samples::Dictation::SimpleLabelResizer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
