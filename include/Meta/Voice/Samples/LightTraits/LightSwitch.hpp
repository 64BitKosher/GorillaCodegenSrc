// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Renderer
  class Renderer;
  // Forward declaring type: Material
  class Material;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Forward declaring namespace: Meta::WitAi::Json
namespace Meta::WitAi::Json {
  // Forward declaring type: WitResponseNode
  class WitResponseNode;
}
// Completed forward declares
// Type namespace: Meta.Voice.Samples.LightTraits
namespace Meta::Voice::Samples::LightTraits {
  // Forward declaring type: LightSwitch
  class LightSwitch;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::Voice::Samples::LightTraits::LightSwitch);
DEFINE_IL2CPP_ARG_TYPE(::Meta::Voice::Samples::LightTraits::LightSwitch*, "Meta.Voice.Samples.LightTraits", "LightSwitch");
// Type namespace: Meta.Voice.Samples.LightTraits
namespace Meta::Voice::Samples::LightTraits {
  // Size: 0x39
  #pragma pack(push, 1)
  // Autogenerated type: Meta.Voice.Samples.LightTraits.LightSwitch
  // [TokenAttribute] Offset: FFFFFFFF
  class LightSwitch : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.Renderer[] _renderers
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::UnityEngine::Renderer*> renderers;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Renderer*>) == 0x8);
    // private UnityEngine.Material[] _offMaterials
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::UnityEngine::Material*> offMaterials;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Material*>) == 0x8);
    // private UnityEngine.Material[] _onMaterials
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::UnityEngine::Material*> onMaterials;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Material*>) == 0x8);
    // private System.Boolean <IsOn>k__BackingField
    // Size: 0x1
    // Offset: 0x38
    bool IsOn;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // static field const value: static public System.String TRAIT_ID
    static constexpr const char* TRAIT_ID = "wit$on_off";
    // Get static field: static public System.String TRAIT_ID
    static ::StringW _get_TRAIT_ID();
    // Set static field: static public System.String TRAIT_ID
    static void _set_TRAIT_ID(::StringW value);
    // static field const value: static public System.String TRAIT_ON_VALUE
    static constexpr const char* TRAIT_ON_VALUE = "on";
    // Get static field: static public System.String TRAIT_ON_VALUE
    static ::StringW _get_TRAIT_ON_VALUE();
    // Set static field: static public System.String TRAIT_ON_VALUE
    static void _set_TRAIT_ON_VALUE(::StringW value);
    // Get instance field reference: private UnityEngine.Renderer[] _renderers
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Renderer*>& dyn__renderers();
    // Get instance field reference: private UnityEngine.Material[] _offMaterials
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Material*>& dyn__offMaterials();
    // Get instance field reference: private UnityEngine.Material[] _onMaterials
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Material*>& dyn__onMaterials();
    // Get instance field reference: private System.Boolean <IsOn>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$IsOn$k__BackingField();
    // public System.Boolean get_IsOn()
    // Offset: 0x4410C68
    bool get_IsOn();
    // private System.Void set_IsOn(System.Boolean value)
    // Offset: 0x4410C70
    void set_IsOn(bool value);
    // private System.Void OnEnable()
    // Offset: 0x4410C7C
    void OnEnable();
    // public System.Void OnResponse(Meta.WitAi.Json.WitResponseNode commandResult)
    // Offset: 0x4410D0C
    void OnResponse(::Meta::WitAi::Json::WitResponseNode* commandResult);
    // public System.Void SetLight(System.Boolean toOn)
    // Offset: 0x4410C84
    void SetLight(bool toOn);
    // public System.Void .ctor()
    // Offset: 0x4410E18
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LightSwitch* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::Voice::Samples::LightTraits::LightSwitch::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LightSwitch*, creationType>()));
    }
  }; // Meta.Voice.Samples.LightTraits.LightSwitch
  #pragma pack(pop)
  static check_size<sizeof(LightSwitch), 56 + sizeof(bool)> __Meta_Voice_Samples_LightTraits_LightSwitchSizeCheck;
  static_assert(sizeof(LightSwitch) == 0x39);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::Voice::Samples::LightTraits::LightSwitch::get_IsOn
// Il2CppName: get_IsOn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::Voice::Samples::LightTraits::LightSwitch::*)()>(&Meta::Voice::Samples::LightTraits::LightSwitch::get_IsOn)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Samples::LightTraits::LightSwitch*), "get_IsOn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Samples::LightTraits::LightSwitch::set_IsOn
// Il2CppName: set_IsOn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Samples::LightTraits::LightSwitch::*)(bool)>(&Meta::Voice::Samples::LightTraits::LightSwitch::set_IsOn)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Samples::LightTraits::LightSwitch*), "set_IsOn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Samples::LightTraits::LightSwitch::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Samples::LightTraits::LightSwitch::*)()>(&Meta::Voice::Samples::LightTraits::LightSwitch::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Samples::LightTraits::LightSwitch*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Samples::LightTraits::LightSwitch::OnResponse
// Il2CppName: OnResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Samples::LightTraits::LightSwitch::*)(::Meta::WitAi::Json::WitResponseNode*)>(&Meta::Voice::Samples::LightTraits::LightSwitch::OnResponse)> {
  static const MethodInfo* get() {
    static auto* commandResult = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Json", "WitResponseNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Samples::LightTraits::LightSwitch*), "OnResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{commandResult});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Samples::LightTraits::LightSwitch::SetLight
// Il2CppName: SetLight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Samples::LightTraits::LightSwitch::*)(bool)>(&Meta::Voice::Samples::LightTraits::LightSwitch::SetLight)> {
  static const MethodInfo* get() {
    static auto* toOn = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Samples::LightTraits::LightSwitch*), "SetLight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{toOn});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Samples::LightTraits::LightSwitch::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
