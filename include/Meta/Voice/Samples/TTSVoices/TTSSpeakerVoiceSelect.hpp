// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Meta.Voice.Samples.TTSVoices.TTSSpeakerObserver
#include "Meta/Voice/Samples/TTSVoices/TTSSpeakerObserver.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Meta::Voice::Samples::TTSVoices
namespace Meta::Voice::Samples::TTSVoices {
  // Forward declaring type: SimpleDropdownList
  class SimpleDropdownList;
}
// Completed forward declares
// Type namespace: Meta.Voice.Samples.TTSVoices
namespace Meta::Voice::Samples::TTSVoices {
  // Forward declaring type: TTSSpeakerVoiceSelect
  class TTSSpeakerVoiceSelect;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::Voice::Samples::TTSVoices::TTSSpeakerVoiceSelect);
DEFINE_IL2CPP_ARG_TYPE(::Meta::Voice::Samples::TTSVoices::TTSSpeakerVoiceSelect*, "Meta.Voice.Samples.TTSVoices", "TTSSpeakerVoiceSelect");
// Type namespace: Meta.Voice.Samples.TTSVoices
namespace Meta::Voice::Samples::TTSVoices {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: Meta.Voice.Samples.TTSVoices.TTSSpeakerVoiceSelect
  // [TokenAttribute] Offset: FFFFFFFF
  class TTSSpeakerVoiceSelect : public ::Meta::Voice::Samples::TTSVoices::TTSSpeakerObserver {
    public:
    // Nested type: ::Meta::Voice::Samples::TTSVoices::TTSSpeakerVoiceSelect::$$c
    class $$c;
    public:
    // private Meta.Voice.Samples.TTSVoices.SimpleDropdownList _dropdown
    // Size: 0x8
    // Offset: 0x28
    ::Meta::Voice::Samples::TTSVoices::SimpleDropdownList* dropdown;
    // Field size check
    static_assert(sizeof(::Meta::Voice::Samples::TTSVoices::SimpleDropdownList*) == 0x8);
    public:
    // Get instance field reference: private Meta.Voice.Samples.TTSVoices.SimpleDropdownList _dropdown
    [[deprecated("Use field access instead!")]] ::Meta::Voice::Samples::TTSVoices::SimpleDropdownList*& dyn__dropdown();
    // private System.Void Update()
    // Offset: 0x4416268
    void Update();
    // private System.Void RefreshDropdown()
    // Offset: 0x4415F50
    void RefreshDropdown();
    // private System.Void OnOptionSelected(System.String newOption)
    // Offset: 0x4416304
    void OnOptionSelected(::StringW newOption);
    // protected override System.Void Awake()
    // Offset: 0x4415E40
    // Implemented from: Meta.Voice.Samples.TTSVoices.TTSSpeakerObserver
    // Base method: System.Void TTSSpeakerObserver::Awake()
    void Awake();
    // protected override System.Void OnEnable()
    // Offset: 0x4415E9C
    // Implemented from: Meta.Voice.Samples.TTSVoices.TTSSpeakerObserver
    // Base method: System.Void TTSSpeakerObserver::OnEnable()
    void OnEnable();
    // protected override System.Void OnDisable()
    // Offset: 0x44161BC
    // Implemented from: Meta.Voice.Samples.TTSVoices.TTSSpeakerObserver
    // Base method: System.Void TTSSpeakerObserver::OnDisable()
    void OnDisable();
    // public System.Void .ctor()
    // Offset: 0x44163B4
    // Implemented from: Meta.Voice.Samples.TTSVoices.TTSSpeakerObserver
    // Base method: System.Void TTSSpeakerObserver::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TTSSpeakerVoiceSelect* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::Voice::Samples::TTSVoices::TTSSpeakerVoiceSelect::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TTSSpeakerVoiceSelect*, creationType>()));
    }
  }; // Meta.Voice.Samples.TTSVoices.TTSSpeakerVoiceSelect
  #pragma pack(pop)
  static check_size<sizeof(TTSSpeakerVoiceSelect), 40 + sizeof(::Meta::Voice::Samples::TTSVoices::SimpleDropdownList*)> __Meta_Voice_Samples_TTSVoices_TTSSpeakerVoiceSelectSizeCheck;
  static_assert(sizeof(TTSSpeakerVoiceSelect) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::Voice::Samples::TTSVoices::TTSSpeakerVoiceSelect::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Samples::TTSVoices::TTSSpeakerVoiceSelect::*)()>(&Meta::Voice::Samples::TTSVoices::TTSSpeakerVoiceSelect::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Samples::TTSVoices::TTSSpeakerVoiceSelect*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Samples::TTSVoices::TTSSpeakerVoiceSelect::RefreshDropdown
// Il2CppName: RefreshDropdown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Samples::TTSVoices::TTSSpeakerVoiceSelect::*)()>(&Meta::Voice::Samples::TTSVoices::TTSSpeakerVoiceSelect::RefreshDropdown)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Samples::TTSVoices::TTSSpeakerVoiceSelect*), "RefreshDropdown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Samples::TTSVoices::TTSSpeakerVoiceSelect::OnOptionSelected
// Il2CppName: OnOptionSelected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Samples::TTSVoices::TTSSpeakerVoiceSelect::*)(::StringW)>(&Meta::Voice::Samples::TTSVoices::TTSSpeakerVoiceSelect::OnOptionSelected)> {
  static const MethodInfo* get() {
    static auto* newOption = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Samples::TTSVoices::TTSSpeakerVoiceSelect*), "OnOptionSelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newOption});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Samples::TTSVoices::TTSSpeakerVoiceSelect::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Samples::TTSVoices::TTSSpeakerVoiceSelect::*)()>(&Meta::Voice::Samples::TTSVoices::TTSSpeakerVoiceSelect::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Samples::TTSVoices::TTSSpeakerVoiceSelect*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Samples::TTSVoices::TTSSpeakerVoiceSelect::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Samples::TTSVoices::TTSSpeakerVoiceSelect::*)()>(&Meta::Voice::Samples::TTSVoices::TTSSpeakerVoiceSelect::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Samples::TTSVoices::TTSSpeakerVoiceSelect*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Samples::TTSVoices::TTSSpeakerVoiceSelect::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Samples::TTSVoices::TTSSpeakerVoiceSelect::*)()>(&Meta::Voice::Samples::TTSVoices::TTSSpeakerVoiceSelect::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Samples::TTSVoices::TTSSpeakerVoiceSelect*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Samples::TTSVoices::TTSSpeakerVoiceSelect::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
