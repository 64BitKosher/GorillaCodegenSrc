// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Meta.WitAi.Requests.TTSWitAudioType
#include "Meta/WitAi/Requests/TTSWitAudioType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Meta::WitAi::TTS::Integrations
namespace Meta::WitAi::TTS::Integrations {
  // Forward declaring type: TTSWit
  class TTSWit;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Button
  class Button;
  // Forward declaring type: Text
  class Text;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: Meta.Voice.Samples.TTSVoices
namespace Meta::Voice::Samples::TTSVoices {
  // Forward declaring type: TTSFileToggle
  class TTSFileToggle;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::Voice::Samples::TTSVoices::TTSFileToggle);
DEFINE_IL2CPP_ARG_TYPE(::Meta::Voice::Samples::TTSVoices::TTSFileToggle*, "Meta.Voice.Samples.TTSVoices", "TTSFileToggle");
// Type namespace: Meta.Voice.Samples.TTSVoices
namespace Meta::Voice::Samples::TTSVoices {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: Meta.Voice.Samples.TTSVoices.TTSFileToggle
  // [TokenAttribute] Offset: FFFFFFFF
  class TTSFileToggle : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private Meta.WitAi.TTS.Integrations.TTSWit _service
    // Size: 0x8
    // Offset: 0x20
    ::Meta::WitAi::TTS::Integrations::TTSWit* service;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::TTS::Integrations::TTSWit*) == 0x8);
    // private UnityEngine.UI.Button _button
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::UI::Button* button;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Button*) == 0x8);
    // private UnityEngine.UI.Text _label
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::UI::Text* label;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // private System.String _labelFormat
    // Size: 0x8
    // Offset: 0x38
    ::StringW labelFormat;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private Meta.WitAi.Requests.TTSWitAudioType _fileType
    // Size: 0x4
    // Offset: 0x40
    ::Meta::WitAi::Requests::TTSWitAudioType fileType;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::Requests::TTSWitAudioType) == 0x4);
    // Padding between fields: fileType and: fileTypes
    char __padding4[0x4] = {};
    // private System.Collections.Generic.List`1<Meta.WitAi.Requests.TTSWitAudioType> _fileTypes
    // Size: 0x8
    // Offset: 0x48
    ::System::Collections::Generic::List_1<::Meta::WitAi::Requests::TTSWitAudioType>* fileTypes;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Meta::WitAi::Requests::TTSWitAudioType>*) == 0x8);
    public:
    // Get instance field reference: private Meta.WitAi.TTS.Integrations.TTSWit _service
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::TTS::Integrations::TTSWit*& dyn__service();
    // Get instance field reference: private UnityEngine.UI.Button _button
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Button*& dyn__button();
    // Get instance field reference: private UnityEngine.UI.Text _label
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn__label();
    // Get instance field reference: private System.String _labelFormat
    [[deprecated("Use field access instead!")]] ::StringW& dyn__labelFormat();
    // Get instance field reference: private Meta.WitAi.Requests.TTSWitAudioType _fileType
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::Requests::TTSWitAudioType& dyn__fileType();
    // Get instance field reference: private System.Collections.Generic.List`1<Meta.WitAi.Requests.TTSWitAudioType> _fileTypes
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Meta::WitAi::Requests::TTSWitAudioType>*& dyn__fileTypes();
    // private System.Void OnEnable()
    // Offset: 0x44138B8
    void OnEnable();
    // private System.Void Update()
    // Offset: 0x44139CC
    void Update();
    // private System.Void OnDisable()
    // Offset: 0x4413AA4
    void OnDisable();
    // private System.Void Toggle()
    // Offset: 0x4413B34
    void Toggle();
    // private System.Void Refresh()
    // Offset: 0x44139FC
    void Refresh();
    // public System.Void .ctor()
    // Offset: 0x4413BF0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TTSFileToggle* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::Voice::Samples::TTSVoices::TTSFileToggle::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TTSFileToggle*, creationType>()));
    }
  }; // Meta.Voice.Samples.TTSVoices.TTSFileToggle
  #pragma pack(pop)
  static check_size<sizeof(TTSFileToggle), 72 + sizeof(::System::Collections::Generic::List_1<::Meta::WitAi::Requests::TTSWitAudioType>*)> __Meta_Voice_Samples_TTSVoices_TTSFileToggleSizeCheck;
  static_assert(sizeof(TTSFileToggle) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::Voice::Samples::TTSVoices::TTSFileToggle::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Samples::TTSVoices::TTSFileToggle::*)()>(&Meta::Voice::Samples::TTSVoices::TTSFileToggle::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Samples::TTSVoices::TTSFileToggle*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Samples::TTSVoices::TTSFileToggle::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Samples::TTSVoices::TTSFileToggle::*)()>(&Meta::Voice::Samples::TTSVoices::TTSFileToggle::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Samples::TTSVoices::TTSFileToggle*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Samples::TTSVoices::TTSFileToggle::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Samples::TTSVoices::TTSFileToggle::*)()>(&Meta::Voice::Samples::TTSVoices::TTSFileToggle::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Samples::TTSVoices::TTSFileToggle*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Samples::TTSVoices::TTSFileToggle::Toggle
// Il2CppName: Toggle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Samples::TTSVoices::TTSFileToggle::*)()>(&Meta::Voice::Samples::TTSVoices::TTSFileToggle::Toggle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Samples::TTSVoices::TTSFileToggle*), "Toggle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Samples::TTSVoices::TTSFileToggle::Refresh
// Il2CppName: Refresh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Samples::TTSVoices::TTSFileToggle::*)()>(&Meta::Voice::Samples::TTSVoices::TTSFileToggle::Refresh)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Samples::TTSVoices::TTSFileToggle*), "Refresh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Samples::TTSVoices::TTSFileToggle::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
