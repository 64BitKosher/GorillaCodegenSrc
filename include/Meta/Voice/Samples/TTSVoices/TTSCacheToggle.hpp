// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Meta.WitAi.TTS.Data.TTSDiskCacheLocation
#include "Meta/WitAi/TTS/Data/TTSDiskCacheLocation.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Meta::WitAi::TTS::Integrations
namespace Meta::WitAi::TTS::Integrations {
  // Forward declaring type: TTSDiskCache
  class TTSDiskCache;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Text
  class Text;
  // Forward declaring type: Button
  class Button;
}
// Completed forward declares
// Type namespace: Meta.Voice.Samples.TTSVoices
namespace Meta::Voice::Samples::TTSVoices {
  // Forward declaring type: TTSCacheToggle
  class TTSCacheToggle;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::Voice::Samples::TTSVoices::TTSCacheToggle);
DEFINE_IL2CPP_ARG_TYPE(::Meta::Voice::Samples::TTSVoices::TTSCacheToggle*, "Meta.Voice.Samples.TTSVoices", "TTSCacheToggle");
// Type namespace: Meta.Voice.Samples.TTSVoices
namespace Meta::Voice::Samples::TTSVoices {
  // Size: 0x3C
  #pragma pack(push, 1)
  // Autogenerated type: Meta.Voice.Samples.TTSVoices.TTSCacheToggle
  // [TokenAttribute] Offset: FFFFFFFF
  class TTSCacheToggle : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private Meta.WitAi.TTS.Integrations.TTSDiskCache _diskCache
    // Size: 0x8
    // Offset: 0x20
    ::Meta::WitAi::TTS::Integrations::TTSDiskCache* diskCache;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::TTS::Integrations::TTSDiskCache*) == 0x8);
    // private UnityEngine.UI.Text _cacheLabel
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::UI::Text* cacheLabel;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // private UnityEngine.UI.Button _button
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::UI::Button* button;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Button*) == 0x8);
    // private Meta.WitAi.TTS.Data.TTSDiskCacheLocation _cacheLocation
    // Size: 0x4
    // Offset: 0x38
    ::Meta::WitAi::TTS::Data::TTSDiskCacheLocation cacheLocation;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::TTS::Data::TTSDiskCacheLocation) == 0x4);
    public:
    // Get instance field reference: private Meta.WitAi.TTS.Integrations.TTSDiskCache _diskCache
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::TTS::Integrations::TTSDiskCache*& dyn__diskCache();
    // Get instance field reference: private UnityEngine.UI.Text _cacheLabel
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn__cacheLabel();
    // Get instance field reference: private UnityEngine.UI.Button _button
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Button*& dyn__button();
    // Get instance field reference: private Meta.WitAi.TTS.Data.TTSDiskCacheLocation _cacheLocation
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::TTS::Data::TTSDiskCacheLocation& dyn__cacheLocation();
    // private System.Void OnEnable()
    // Offset: 0x4413380
    void OnEnable();
    // private Meta.WitAi.TTS.Data.TTSDiskCacheLocation GetCurrentCacheLocation()
    // Offset: 0x4413550
    ::Meta::WitAi::TTS::Data::TTSDiskCacheLocation GetCurrentCacheLocation();
    // private System.Void Update()
    // Offset: 0x44135D8
    void Update();
    // private System.Void RefreshLocation()
    // Offset: 0x441349C
    void RefreshLocation();
    // private System.Void OnDisable()
    // Offset: 0x4413610
    void OnDisable();
    // public System.Void ToggleCache()
    // Offset: 0x44136A0
    void ToggleCache();
    // public System.Void .ctor()
    // Offset: 0x4413700
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TTSCacheToggle* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::Voice::Samples::TTSVoices::TTSCacheToggle::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TTSCacheToggle*, creationType>()));
    }
  }; // Meta.Voice.Samples.TTSVoices.TTSCacheToggle
  #pragma pack(pop)
  static check_size<sizeof(TTSCacheToggle), 56 + sizeof(::Meta::WitAi::TTS::Data::TTSDiskCacheLocation)> __Meta_Voice_Samples_TTSVoices_TTSCacheToggleSizeCheck;
  static_assert(sizeof(TTSCacheToggle) == 0x3C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::Voice::Samples::TTSVoices::TTSCacheToggle::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Samples::TTSVoices::TTSCacheToggle::*)()>(&Meta::Voice::Samples::TTSVoices::TTSCacheToggle::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Samples::TTSVoices::TTSCacheToggle*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Samples::TTSVoices::TTSCacheToggle::GetCurrentCacheLocation
// Il2CppName: GetCurrentCacheLocation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::TTS::Data::TTSDiskCacheLocation (Meta::Voice::Samples::TTSVoices::TTSCacheToggle::*)()>(&Meta::Voice::Samples::TTSVoices::TTSCacheToggle::GetCurrentCacheLocation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Samples::TTSVoices::TTSCacheToggle*), "GetCurrentCacheLocation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Samples::TTSVoices::TTSCacheToggle::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Samples::TTSVoices::TTSCacheToggle::*)()>(&Meta::Voice::Samples::TTSVoices::TTSCacheToggle::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Samples::TTSVoices::TTSCacheToggle*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Samples::TTSVoices::TTSCacheToggle::RefreshLocation
// Il2CppName: RefreshLocation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Samples::TTSVoices::TTSCacheToggle::*)()>(&Meta::Voice::Samples::TTSVoices::TTSCacheToggle::RefreshLocation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Samples::TTSVoices::TTSCacheToggle*), "RefreshLocation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Samples::TTSVoices::TTSCacheToggle::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Samples::TTSVoices::TTSCacheToggle::*)()>(&Meta::Voice::Samples::TTSVoices::TTSCacheToggle::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Samples::TTSVoices::TTSCacheToggle*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Samples::TTSVoices::TTSCacheToggle::ToggleCache
// Il2CppName: ToggleCache
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Voice::Samples::TTSVoices::TTSCacheToggle::*)()>(&Meta::Voice::Samples::TTSVoices::TTSCacheToggle::ToggleCache)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Voice::Samples::TTSVoices::TTSCacheToggle*), "ToggleCache", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Voice::Samples::TTSVoices::TTSCacheToggle::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
