// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: Meta::Conduit
namespace Meta::Conduit {
  // Forward declaring type: WitKeyword
  class WitKeyword;
}
// Forward declaring namespace: Meta::WitAi::Data::Info
namespace Meta::WitAi::Data::Info {
  // Forward declaring type: WitEntityInfo
  struct WitEntityInfo;
}
// Completed forward declares
// Type namespace: Meta.Conduit
namespace Meta::Conduit {
  // Forward declaring type: ManifestEntity
  class ManifestEntity;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::Conduit::ManifestEntity);
DEFINE_IL2CPP_ARG_TYPE(::Meta::Conduit::ManifestEntity*, "Meta.Conduit", "ManifestEntity");
// Type namespace: Meta.Conduit
namespace Meta::Conduit {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: Meta.Conduit.ManifestEntity
  // [TokenAttribute] Offset: FFFFFFFF
  class ManifestEntity : public ::Il2CppObject {
    public:
    public:
    // private System.String <ID>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::StringW _ID;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String <Namespace>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::StringW Namespace;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String <Type>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    ::StringW Type;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String <Name>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    ::StringW Name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Collections.Generic.List`1<Meta.Conduit.WitKeyword> <Values>k__BackingField
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::List_1<::Meta::Conduit::WitKeyword*>* Values;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Meta::Conduit::WitKeyword*>*) == 0x8);
    // private System.String <Assembly>k__BackingField
    // Size: 0x8
    // Offset: 0x38
    ::StringW Assembly;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: private System.String <ID>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$ID$k__BackingField();
    // Get instance field reference: private System.String <Namespace>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$Namespace$k__BackingField();
    // Get instance field reference: private System.String <Type>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$Type$k__BackingField();
    // Get instance field reference: private System.String <Name>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$Name$k__BackingField();
    // Get instance field reference: private System.Collections.Generic.List`1<Meta.Conduit.WitKeyword> <Values>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Meta::Conduit::WitKeyword*>*& dyn_$Values$k__BackingField();
    // Get instance field reference: private System.String <Assembly>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$Assembly$k__BackingField();
    // public System.Void .ctor()
    // Offset: 0x441F368
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ManifestEntity* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::Conduit::ManifestEntity::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ManifestEntity*, creationType>()));
    }
    // public System.String get_ID()
    // Offset: 0x441F3F0
    ::StringW get_ID();
    // public System.Void set_ID(System.String value)
    // Offset: 0x441F3F8
    void set_ID(::StringW value);
    // public System.String get_Namespace()
    // Offset: 0x441F400
    ::StringW get_Namespace();
    // public System.Void set_Namespace(System.String value)
    // Offset: 0x441F408
    void set_Namespace(::StringW value);
    // public System.String get_Type()
    // Offset: 0x441F410
    ::StringW get_Type();
    // public System.Void set_Type(System.String value)
    // Offset: 0x441F418
    void set_Type(::StringW value);
    // public System.String get_Name()
    // Offset: 0x441F420
    ::StringW get_Name();
    // public System.Void set_Name(System.String value)
    // Offset: 0x441F428
    void set_Name(::StringW value);
    // public System.Collections.Generic.List`1<Meta.Conduit.WitKeyword> get_Values()
    // Offset: 0x441F430
    ::System::Collections::Generic::List_1<::Meta::Conduit::WitKeyword*>* get_Values();
    // public System.Void set_Values(System.Collections.Generic.List`1<Meta.Conduit.WitKeyword> value)
    // Offset: 0x441F438
    void set_Values(::System::Collections::Generic::List_1<::Meta::Conduit::WitKeyword*>* value);
    // public System.String get_Assembly()
    // Offset: 0x441F440
    ::StringW get_Assembly();
    // public System.Void set_Assembly(System.String value)
    // Offset: 0x441F448
    void set_Assembly(::StringW value);
    // public Meta.WitAi.Data.Info.WitEntityInfo GetAsInfo()
    // Offset: 0x441F450
    ::Meta::WitAi::Data::Info::WitEntityInfo GetAsInfo();
    // public System.String GetQualifiedTypeName()
    // Offset: 0x441F620
    ::StringW GetQualifiedTypeName();
    // private System.Boolean Equals(Meta.Conduit.ManifestEntity other)
    // Offset: 0x441F738
    bool Equals(::Meta::Conduit::ManifestEntity* other);
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x441F6AC
    // Implemented from: System.Object
    // Base method: System.Boolean Object::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0x441F804
    // Implemented from: System.Object
    // Base method: System.Int32 Object::GetHashCode()
    int GetHashCode();
  }; // Meta.Conduit.ManifestEntity
  #pragma pack(pop)
  static check_size<sizeof(ManifestEntity), 56 + sizeof(::StringW)> __Meta_Conduit_ManifestEntitySizeCheck;
  static_assert(sizeof(ManifestEntity) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::Conduit::ManifestEntity::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Meta::Conduit::ManifestEntity::get_ID
// Il2CppName: get_ID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Meta::Conduit::ManifestEntity::*)()>(&Meta::Conduit::ManifestEntity::get_ID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ManifestEntity*), "get_ID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::ManifestEntity::set_ID
// Il2CppName: set_ID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Conduit::ManifestEntity::*)(::StringW)>(&Meta::Conduit::ManifestEntity::set_ID)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ManifestEntity*), "set_ID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::ManifestEntity::get_Namespace
// Il2CppName: get_Namespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Meta::Conduit::ManifestEntity::*)()>(&Meta::Conduit::ManifestEntity::get_Namespace)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ManifestEntity*), "get_Namespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::ManifestEntity::set_Namespace
// Il2CppName: set_Namespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Conduit::ManifestEntity::*)(::StringW)>(&Meta::Conduit::ManifestEntity::set_Namespace)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ManifestEntity*), "set_Namespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::ManifestEntity::get_Type
// Il2CppName: get_Type
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Meta::Conduit::ManifestEntity::*)()>(&Meta::Conduit::ManifestEntity::get_Type)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ManifestEntity*), "get_Type", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::ManifestEntity::set_Type
// Il2CppName: set_Type
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Conduit::ManifestEntity::*)(::StringW)>(&Meta::Conduit::ManifestEntity::set_Type)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ManifestEntity*), "set_Type", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::ManifestEntity::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Meta::Conduit::ManifestEntity::*)()>(&Meta::Conduit::ManifestEntity::get_Name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ManifestEntity*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::ManifestEntity::set_Name
// Il2CppName: set_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Conduit::ManifestEntity::*)(::StringW)>(&Meta::Conduit::ManifestEntity::set_Name)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ManifestEntity*), "set_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::ManifestEntity::get_Values
// Il2CppName: get_Values
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::Meta::Conduit::WitKeyword*>* (Meta::Conduit::ManifestEntity::*)()>(&Meta::Conduit::ManifestEntity::get_Values)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ManifestEntity*), "get_Values", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::ManifestEntity::set_Values
// Il2CppName: set_Values
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Conduit::ManifestEntity::*)(::System::Collections::Generic::List_1<::Meta::Conduit::WitKeyword*>*)>(&Meta::Conduit::ManifestEntity::set_Values)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Meta.Conduit", "WitKeyword")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ManifestEntity*), "set_Values", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::ManifestEntity::get_Assembly
// Il2CppName: get_Assembly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Meta::Conduit::ManifestEntity::*)()>(&Meta::Conduit::ManifestEntity::get_Assembly)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ManifestEntity*), "get_Assembly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::ManifestEntity::set_Assembly
// Il2CppName: set_Assembly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Conduit::ManifestEntity::*)(::StringW)>(&Meta::Conduit::ManifestEntity::set_Assembly)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ManifestEntity*), "set_Assembly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::ManifestEntity::GetAsInfo
// Il2CppName: GetAsInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Data::Info::WitEntityInfo (Meta::Conduit::ManifestEntity::*)()>(&Meta::Conduit::ManifestEntity::GetAsInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ManifestEntity*), "GetAsInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::ManifestEntity::GetQualifiedTypeName
// Il2CppName: GetQualifiedTypeName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Meta::Conduit::ManifestEntity::*)()>(&Meta::Conduit::ManifestEntity::GetQualifiedTypeName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ManifestEntity*), "GetQualifiedTypeName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::ManifestEntity::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::Conduit::ManifestEntity::*)(::Meta::Conduit::ManifestEntity*)>(&Meta::Conduit::ManifestEntity::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("Meta.Conduit", "ManifestEntity")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ManifestEntity*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::ManifestEntity::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::Conduit::ManifestEntity::*)(::Il2CppObject*)>(&Meta::Conduit::ManifestEntity::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ManifestEntity*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::ManifestEntity::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Meta::Conduit::ManifestEntity::*)()>(&Meta::Conduit::ManifestEntity::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ManifestEntity*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
