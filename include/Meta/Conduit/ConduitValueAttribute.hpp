// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Attribute
#include "System/Attribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: Meta.Conduit
namespace Meta::Conduit {
  // Forward declaring type: ConduitValueAttribute
  class ConduitValueAttribute;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::Conduit::ConduitValueAttribute);
DEFINE_IL2CPP_ARG_TYPE(::Meta::Conduit::ConduitValueAttribute*, "Meta.Conduit", "ConduitValueAttribute");
// Type namespace: Meta.Conduit
namespace Meta::Conduit {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: Meta.Conduit.ConduitValueAttribute
  // [TokenAttribute] Offset: FFFFFFFF
  // [AttributeUsageAttribute] Offset: FFFFFFFF
  class ConduitValueAttribute : public ::System::Attribute {
    public:
    public:
    // private readonly System.String[] <Aliases>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<::StringW> Aliases;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    public:
    // Creating conversion operator: operator ::ArrayW<::StringW>
    constexpr operator ::ArrayW<::StringW>() const noexcept {
      return Aliases;
    }
    // Get instance field reference: private readonly System.String[] <Aliases>k__BackingField
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn_$Aliases$k__BackingField();
    // public System.Void .ctor(params System.String[] aliases)
    // Offset: 0x4419BA0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ConduitValueAttribute* New_ctor(::ArrayW<::StringW> aliases) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::Conduit::ConduitValueAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ConduitValueAttribute*, creationType>(aliases)));
    }
    // public System.String[] get_Aliases()
    // Offset: 0x4419BD0
    ::ArrayW<::StringW> get_Aliases();
  }; // Meta.Conduit.ConduitValueAttribute
  #pragma pack(pop)
  static check_size<sizeof(ConduitValueAttribute), 16 + sizeof(::ArrayW<::StringW>)> __Meta_Conduit_ConduitValueAttributeSizeCheck;
  static_assert(sizeof(ConduitValueAttribute) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::Conduit::ConduitValueAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Meta::Conduit::ConduitValueAttribute::get_Aliases
// Il2CppName: get_Aliases
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::StringW> (Meta::Conduit::ConduitValueAttribute::*)()>(&Meta::Conduit::ConduitValueAttribute::get_Aliases)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ConduitValueAttribute*), "get_Aliases", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
