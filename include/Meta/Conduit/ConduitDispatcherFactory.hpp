// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Meta::Conduit
namespace Meta::Conduit {
  // Forward declaring type: IInstanceResolver
  class IInstanceResolver;
  // Forward declaring type: IParameterProvider
  class IParameterProvider;
  // Forward declaring type: IConduitDispatcher
  class IConduitDispatcher;
}
// Completed forward declares
// Type namespace: Meta.Conduit
namespace Meta::Conduit {
  // Forward declaring type: ConduitDispatcherFactory
  class ConduitDispatcherFactory;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::Conduit::ConduitDispatcherFactory);
DEFINE_IL2CPP_ARG_TYPE(::Meta::Conduit::ConduitDispatcherFactory*, "Meta.Conduit", "ConduitDispatcherFactory");
// Type namespace: Meta.Conduit
namespace Meta::Conduit {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Meta.Conduit.ConduitDispatcherFactory
  // [TokenAttribute] Offset: FFFFFFFF
  class ConduitDispatcherFactory : public ::Il2CppObject {
    public:
    public:
    // private readonly Meta.Conduit.IInstanceResolver _instanceResolver
    // Size: 0x8
    // Offset: 0x10
    ::Meta::Conduit::IInstanceResolver* instanceResolver;
    // Field size check
    static_assert(sizeof(::Meta::Conduit::IInstanceResolver*) == 0x8);
    // private readonly Meta.Conduit.IParameterProvider _parameterProvider
    // Size: 0x8
    // Offset: 0x18
    ::Meta::Conduit::IParameterProvider* parameterProvider;
    // Field size check
    static_assert(sizeof(::Meta::Conduit::IParameterProvider*) == 0x8);
    public:
    // Get static field: static private Meta.Conduit.IConduitDispatcher Instance
    static ::Meta::Conduit::IConduitDispatcher* _get_Instance();
    // Set static field: static private Meta.Conduit.IConduitDispatcher Instance
    static void _set_Instance(::Meta::Conduit::IConduitDispatcher* value);
    // Get instance field reference: private readonly Meta.Conduit.IInstanceResolver _instanceResolver
    [[deprecated("Use field access instead!")]] ::Meta::Conduit::IInstanceResolver*& dyn__instanceResolver();
    // Get instance field reference: private readonly Meta.Conduit.IParameterProvider _parameterProvider
    [[deprecated("Use field access instead!")]] ::Meta::Conduit::IParameterProvider*& dyn__parameterProvider();
    // public System.Void .ctor(Meta.Conduit.IInstanceResolver instanceResolver)
    // Offset: 0x441C398
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ConduitDispatcherFactory* New_ctor(::Meta::Conduit::IInstanceResolver* instanceResolver) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::Conduit::ConduitDispatcherFactory::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ConduitDispatcherFactory*, creationType>(instanceResolver)));
    }
    // public Meta.Conduit.IConduitDispatcher GetDispatcher()
    // Offset: 0x441C3C8
    ::Meta::Conduit::IConduitDispatcher* GetDispatcher();
  }; // Meta.Conduit.ConduitDispatcherFactory
  #pragma pack(pop)
  static check_size<sizeof(ConduitDispatcherFactory), 24 + sizeof(::Meta::Conduit::IParameterProvider*)> __Meta_Conduit_ConduitDispatcherFactorySizeCheck;
  static_assert(sizeof(ConduitDispatcherFactory) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::Conduit::ConduitDispatcherFactory::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Meta::Conduit::ConduitDispatcherFactory::GetDispatcher
// Il2CppName: GetDispatcher
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::Conduit::IConduitDispatcher* (Meta::Conduit::ConduitDispatcherFactory::*)()>(&Meta::Conduit::ConduitDispatcherFactory::GetDispatcher)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ConduitDispatcherFactory*), "GetDispatcher", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
