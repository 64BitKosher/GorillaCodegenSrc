// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Attribute
#include "System/Attribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: Meta.Conduit
namespace Meta::Conduit {
  // Forward declaring type: ConduitEntityAttribute
  class ConduitEntityAttribute;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::Conduit::ConduitEntityAttribute);
DEFINE_IL2CPP_ARG_TYPE(::Meta::Conduit::ConduitEntityAttribute*, "Meta.Conduit", "ConduitEntityAttribute");
// Type namespace: Meta.Conduit
namespace Meta::Conduit {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Meta.Conduit.ConduitEntityAttribute
  // [TokenAttribute] Offset: FFFFFFFF
  // [AttributeUsageAttribute] Offset: FFFFFFFF
  class ConduitEntityAttribute : public ::System::Attribute {
    public:
    public:
    // private readonly System.String <Name>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::StringW Name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private readonly System.String <ID>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::StringW _ID;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: private readonly System.String <Name>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$Name$k__BackingField();
    // Get instance field reference: private readonly System.String <ID>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$ID$k__BackingField();
    // public System.String get_Name()
    // Offset: 0x44199E8
    ::StringW get_Name();
    // public System.String get_ID()
    // Offset: 0x44199F0
    ::StringW get_ID();
    // public System.Void .ctor(System.String name, System.String id)
    // Offset: 0x44199F8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ConduitEntityAttribute* New_ctor(::StringW name, ::StringW id) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::Conduit::ConduitEntityAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ConduitEntityAttribute*, creationType>(name, id)));
    }
  }; // Meta.Conduit.ConduitEntityAttribute
  #pragma pack(pop)
  static check_size<sizeof(ConduitEntityAttribute), 24 + sizeof(::StringW)> __Meta_Conduit_ConduitEntityAttributeSizeCheck;
  static_assert(sizeof(ConduitEntityAttribute) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::Conduit::ConduitEntityAttribute::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Meta::Conduit::ConduitEntityAttribute::*)()>(&Meta::Conduit::ConduitEntityAttribute::get_Name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ConduitEntityAttribute*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::ConduitEntityAttribute::get_ID
// Il2CppName: get_ID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Meta::Conduit::ConduitEntityAttribute::*)()>(&Meta::Conduit::ConduitEntityAttribute::get_ID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ConduitEntityAttribute*), "get_ID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::ConduitEntityAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
