// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Meta.Conduit.ConduitDispatcher
#include "Meta/Conduit/ConduitDispatcher.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Meta::Conduit
namespace Meta::Conduit {
  // Forward declaring type: InvocationContext
  class InvocationContext;
  // Forward declaring type: IParameterProvider
  class IParameterProvider;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::Conduit::ConduitDispatcher::InvocationContextFilter);
DEFINE_IL2CPP_ARG_TYPE(::Meta::Conduit::ConduitDispatcher::InvocationContextFilter*, "Meta.Conduit", "ConduitDispatcher/InvocationContextFilter");
// Type namespace: Meta.Conduit
namespace Meta::Conduit {
  // Size: 0x21
  #pragma pack(push, 1)
  // Autogenerated type: Meta.Conduit.ConduitDispatcher/InvocationContextFilter
  // [TokenAttribute] Offset: FFFFFFFF
  class ConduitDispatcher::InvocationContextFilter : public ::Il2CppObject {
    public:
    // Nested type: ::Meta::Conduit::ConduitDispatcher::InvocationContextFilter::$$c__DisplayClass4_0
    class $$c__DisplayClass4_0;
    // Nested type: ::Meta::Conduit::ConduitDispatcher::InvocationContextFilter::$$c__DisplayClass5_0
    class $$c__DisplayClass5_0;
    public:
    // private readonly System.Collections.Generic.List`1<Meta.Conduit.InvocationContext> _actionContexts
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::List_1<::Meta::Conduit::InvocationContext*>* actionContexts;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Meta::Conduit::InvocationContext*>*) == 0x8);
    // private readonly Meta.Conduit.IParameterProvider _parameterProvider
    // Size: 0x8
    // Offset: 0x18
    ::Meta::Conduit::IParameterProvider* parameterProvider;
    // Field size check
    static_assert(sizeof(::Meta::Conduit::IParameterProvider*) == 0x8);
    // private readonly System.Boolean _relaxed
    // Size: 0x1
    // Offset: 0x20
    bool relaxed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private readonly System.Collections.Generic.List`1<Meta.Conduit.InvocationContext> _actionContexts
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Meta::Conduit::InvocationContext*>*& dyn__actionContexts();
    // Get instance field reference: private readonly Meta.Conduit.IParameterProvider _parameterProvider
    [[deprecated("Use field access instead!")]] ::Meta::Conduit::IParameterProvider*& dyn__parameterProvider();
    // Get instance field reference: private readonly System.Boolean _relaxed
    [[deprecated("Use field access instead!")]] bool& dyn__relaxed();
    // public System.Void .ctor(Meta.Conduit.IParameterProvider parameterProvider, System.Collections.Generic.List`1<Meta.Conduit.InvocationContext> actionContexts, System.Boolean relaxed)
    // Offset: 0x441AAE0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ConduitDispatcher::InvocationContextFilter* New_ctor(::Meta::Conduit::IParameterProvider* parameterProvider, ::System::Collections::Generic::List_1<::Meta::Conduit::InvocationContext*>* actionContexts, bool relaxed) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::Conduit::ConduitDispatcher::InvocationContextFilter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ConduitDispatcher::InvocationContextFilter*, creationType>(parameterProvider, actionContexts, relaxed)));
    }
    // public System.Collections.Generic.List`1<Meta.Conduit.InvocationContext> ResolveInvocationContexts(System.String actionId, System.Single confidence, System.Boolean partial)
    // Offset: 0x441AB38
    ::System::Collections::Generic::List_1<::Meta::Conduit::InvocationContext*>* ResolveInvocationContexts(::StringW actionId, float confidence, bool partial);
    // private System.Boolean CompatibleInvocationContext(Meta.Conduit.InvocationContext invocationContext, System.Single confidence, System.Boolean partial)
    // Offset: 0x441BC1C
    bool CompatibleInvocationContext(::Meta::Conduit::InvocationContext* invocationContext, float confidence, bool partial);
  }; // Meta.Conduit.ConduitDispatcher/InvocationContextFilter
  #pragma pack(pop)
  static check_size<sizeof(ConduitDispatcher::InvocationContextFilter), 32 + sizeof(bool)> __Meta_Conduit_ConduitDispatcher_InvocationContextFilterSizeCheck;
  static_assert(sizeof(ConduitDispatcher::InvocationContextFilter) == 0x21);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::Conduit::ConduitDispatcher::InvocationContextFilter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Meta::Conduit::ConduitDispatcher::InvocationContextFilter::ResolveInvocationContexts
// Il2CppName: ResolveInvocationContexts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::Meta::Conduit::InvocationContext*>* (Meta::Conduit::ConduitDispatcher::InvocationContextFilter::*)(::StringW, float, bool)>(&Meta::Conduit::ConduitDispatcher::InvocationContextFilter::ResolveInvocationContexts)> {
  static const MethodInfo* get() {
    static auto* actionId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* confidence = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* partial = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ConduitDispatcher::InvocationContextFilter*), "ResolveInvocationContexts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{actionId, confidence, partial});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::ConduitDispatcher::InvocationContextFilter::CompatibleInvocationContext
// Il2CppName: CompatibleInvocationContext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::Conduit::ConduitDispatcher::InvocationContextFilter::*)(::Meta::Conduit::InvocationContext*, float, bool)>(&Meta::Conduit::ConduitDispatcher::InvocationContextFilter::CompatibleInvocationContext)> {
  static const MethodInfo* get() {
    static auto* invocationContext = &::il2cpp_utils::GetClassFromName("Meta.Conduit", "InvocationContext")->byval_arg;
    static auto* confidence = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* partial = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ConduitDispatcher::InvocationContextFilter*), "CompatibleInvocationContext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{invocationContext, confidence, partial});
  }
};
