// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Attribute
#include "System/Attribute.hpp"
// Including type: System.Single
#include "System/Single.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: Meta.Conduit
namespace Meta::Conduit {
  // Forward declaring type: ConduitActionAttribute
  class ConduitActionAttribute;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::Conduit::ConduitActionAttribute);
DEFINE_IL2CPP_ARG_TYPE(::Meta::Conduit::ConduitActionAttribute*, "Meta.Conduit", "ConduitActionAttribute");
// Type namespace: Meta.Conduit
namespace Meta::Conduit {
  // Size: 0x29
  #pragma pack(push, 1)
  // Autogenerated type: Meta.Conduit.ConduitActionAttribute
  // [TokenAttribute] Offset: FFFFFFFF
  // [AttributeUsageAttribute] Offset: FFFFFFFF
  class ConduitActionAttribute : public ::System::Attribute {
    public:
    public:
    // private System.String <Intent>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::StringW Intent;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Single <MinConfidence>k__BackingField
    // Size: 0x4
    // Offset: 0x18
    float MinConfidence;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single <MaxConfidence>k__BackingField
    // Size: 0x4
    // Offset: 0x1C
    float MaxConfidence;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Collections.Generic.List`1<System.String> <Aliases>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::StringW>* Aliases;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::StringW>*) == 0x8);
    // private System.Boolean <ValidatePartial>k__BackingField
    // Size: 0x1
    // Offset: 0x28
    bool ValidatePartial;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // static field const value: static protected System.Single DEFAULT_MIN_CONFIDENCE
    static constexpr const float DEFAULT_MIN_CONFIDENCE = 0.51;
    // Get static field: static protected System.Single DEFAULT_MIN_CONFIDENCE
    static float _get_DEFAULT_MIN_CONFIDENCE();
    // Set static field: static protected System.Single DEFAULT_MIN_CONFIDENCE
    static void _set_DEFAULT_MIN_CONFIDENCE(float value);
    // static field const value: static protected System.Single DEFAULT_MAX_CONFIDENCE
    static constexpr const float DEFAULT_MAX_CONFIDENCE = 1;
    // Get static field: static protected System.Single DEFAULT_MAX_CONFIDENCE
    static float _get_DEFAULT_MAX_CONFIDENCE();
    // Set static field: static protected System.Single DEFAULT_MAX_CONFIDENCE
    static void _set_DEFAULT_MAX_CONFIDENCE(float value);
    // Get instance field reference: private System.String <Intent>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$Intent$k__BackingField();
    // Get instance field reference: private System.Single <MinConfidence>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$MinConfidence$k__BackingField();
    // Get instance field reference: private System.Single <MaxConfidence>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$MaxConfidence$k__BackingField();
    // Get instance field reference: private System.Collections.Generic.List`1<System.String> <Aliases>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& dyn_$Aliases$k__BackingField();
    // Get instance field reference: private System.Boolean <ValidatePartial>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$ValidatePartial$k__BackingField();
    // public System.String get_Intent()
    // Offset: 0x441985C
    ::StringW get_Intent();
    // private System.Void set_Intent(System.String value)
    // Offset: 0x4419864
    void set_Intent(::StringW value);
    // public System.Single get_MinConfidence()
    // Offset: 0x441986C
    float get_MinConfidence();
    // protected System.Void set_MinConfidence(System.Single value)
    // Offset: 0x4419874
    void set_MinConfidence(float value);
    // public System.Single get_MaxConfidence()
    // Offset: 0x441987C
    float get_MaxConfidence();
    // protected System.Void set_MaxConfidence(System.Single value)
    // Offset: 0x4419884
    void set_MaxConfidence(float value);
    // public System.Collections.Generic.List`1<System.String> get_Aliases()
    // Offset: 0x441988C
    ::System::Collections::Generic::List_1<::StringW>* get_Aliases();
    // private System.Void set_Aliases(System.Collections.Generic.List`1<System.String> value)
    // Offset: 0x4419894
    void set_Aliases(::System::Collections::Generic::List_1<::StringW>* value);
    // public System.Boolean get_ValidatePartial()
    // Offset: 0x441989C
    bool get_ValidatePartial();
    // private System.Void set_ValidatePartial(System.Boolean value)
    // Offset: 0x44198A4
    void set_ValidatePartial(bool value);
    // protected System.Void .ctor(System.String intent, params System.String[] aliases)
    // Offset: 0x44198B0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ConduitActionAttribute* New_ctor(::StringW intent, ::ArrayW<::StringW> aliases) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::Conduit::ConduitActionAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ConduitActionAttribute*, creationType>(intent, aliases)));
    }
    // protected System.Void .ctor(System.String intent, System.Single minConfidence, System.Single maxConfidence, System.Boolean validatePartial, params System.String[] aliases)
    // Offset: 0x4419934
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ConduitActionAttribute* New_ctor(::StringW intent, float minConfidence, float maxConfidence, bool validatePartial, ::ArrayW<::StringW> aliases) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::Conduit::ConduitActionAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ConduitActionAttribute*, creationType>(intent, minConfidence, maxConfidence, validatePartial, aliases)));
    }
  }; // Meta.Conduit.ConduitActionAttribute
  #pragma pack(pop)
  static check_size<sizeof(ConduitActionAttribute), 40 + sizeof(bool)> __Meta_Conduit_ConduitActionAttributeSizeCheck;
  static_assert(sizeof(ConduitActionAttribute) == 0x29);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::Conduit::ConduitActionAttribute::get_Intent
// Il2CppName: get_Intent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Meta::Conduit::ConduitActionAttribute::*)()>(&Meta::Conduit::ConduitActionAttribute::get_Intent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ConduitActionAttribute*), "get_Intent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::ConduitActionAttribute::set_Intent
// Il2CppName: set_Intent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Conduit::ConduitActionAttribute::*)(::StringW)>(&Meta::Conduit::ConduitActionAttribute::set_Intent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ConduitActionAttribute*), "set_Intent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::ConduitActionAttribute::get_MinConfidence
// Il2CppName: get_MinConfidence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Meta::Conduit::ConduitActionAttribute::*)()>(&Meta::Conduit::ConduitActionAttribute::get_MinConfidence)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ConduitActionAttribute*), "get_MinConfidence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::ConduitActionAttribute::set_MinConfidence
// Il2CppName: set_MinConfidence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Conduit::ConduitActionAttribute::*)(float)>(&Meta::Conduit::ConduitActionAttribute::set_MinConfidence)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ConduitActionAttribute*), "set_MinConfidence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::ConduitActionAttribute::get_MaxConfidence
// Il2CppName: get_MaxConfidence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Meta::Conduit::ConduitActionAttribute::*)()>(&Meta::Conduit::ConduitActionAttribute::get_MaxConfidence)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ConduitActionAttribute*), "get_MaxConfidence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::ConduitActionAttribute::set_MaxConfidence
// Il2CppName: set_MaxConfidence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Conduit::ConduitActionAttribute::*)(float)>(&Meta::Conduit::ConduitActionAttribute::set_MaxConfidence)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ConduitActionAttribute*), "set_MaxConfidence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::ConduitActionAttribute::get_Aliases
// Il2CppName: get_Aliases
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::StringW>* (Meta::Conduit::ConduitActionAttribute::*)()>(&Meta::Conduit::ConduitActionAttribute::get_Aliases)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ConduitActionAttribute*), "get_Aliases", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::ConduitActionAttribute::set_Aliases
// Il2CppName: set_Aliases
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Conduit::ConduitActionAttribute::*)(::System::Collections::Generic::List_1<::StringW>*)>(&Meta::Conduit::ConduitActionAttribute::set_Aliases)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ConduitActionAttribute*), "set_Aliases", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::ConduitActionAttribute::get_ValidatePartial
// Il2CppName: get_ValidatePartial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::Conduit::ConduitActionAttribute::*)()>(&Meta::Conduit::ConduitActionAttribute::get_ValidatePartial)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ConduitActionAttribute*), "get_ValidatePartial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::ConduitActionAttribute::set_ValidatePartial
// Il2CppName: set_ValidatePartial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Conduit::ConduitActionAttribute::*)(bool)>(&Meta::Conduit::ConduitActionAttribute::set_ValidatePartial)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ConduitActionAttribute*), "set_ValidatePartial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::ConduitActionAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Meta::Conduit::ConduitActionAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
