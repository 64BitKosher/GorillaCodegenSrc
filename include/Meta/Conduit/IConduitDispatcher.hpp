// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Meta::Conduit
namespace Meta::Conduit {
  // Forward declaring type: Manifest
  class Manifest;
  // Forward declaring type: IParameterProvider
  class IParameterProvider;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Exception
  class Exception;
}
// Completed forward declares
// Type namespace: Meta.Conduit
namespace Meta::Conduit {
  // Forward declaring type: IConduitDispatcher
  class IConduitDispatcher;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::Conduit::IConduitDispatcher);
DEFINE_IL2CPP_ARG_TYPE(::Meta::Conduit::IConduitDispatcher*, "Meta.Conduit", "IConduitDispatcher");
// Type namespace: Meta.Conduit
namespace Meta::Conduit {
  // Size: 0x0
  #pragma pack(push, 1)
  // Autogenerated type: Meta.Conduit.IConduitDispatcher
  // [TokenAttribute] Offset: FFFFFFFF
  class IConduitDispatcher {
    public:
    // public Meta.Conduit.Manifest get_Manifest()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Meta::Conduit::Manifest* get_Manifest();
    // public System.Void Initialize(System.String manifestFilePath)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Initialize(::StringW manifestFilePath);
    // public System.Boolean InvokeAction(Meta.Conduit.IParameterProvider parameterProvider, System.String actionId, System.Boolean relaxed, System.Single confidence, System.Boolean partial)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool InvokeAction(::Meta::Conduit::IParameterProvider* parameterProvider, ::StringW actionId, bool relaxed, float confidence, bool partial);
    // public System.Boolean InvokeError(System.String actionId, System.Exception exception)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool InvokeError(::StringW actionId, ::System::Exception* exception);
  }; // Meta.Conduit.IConduitDispatcher
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::Conduit::IConduitDispatcher::get_Manifest
// Il2CppName: get_Manifest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::Conduit::Manifest* (Meta::Conduit::IConduitDispatcher::*)()>(&Meta::Conduit::IConduitDispatcher::get_Manifest)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::IConduitDispatcher*), "get_Manifest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::IConduitDispatcher::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Conduit::IConduitDispatcher::*)(::StringW)>(&Meta::Conduit::IConduitDispatcher::Initialize)> {
  static const MethodInfo* get() {
    static auto* manifestFilePath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::IConduitDispatcher*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{manifestFilePath});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::IConduitDispatcher::InvokeAction
// Il2CppName: InvokeAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::Conduit::IConduitDispatcher::*)(::Meta::Conduit::IParameterProvider*, ::StringW, bool, float, bool)>(&Meta::Conduit::IConduitDispatcher::InvokeAction)> {
  static const MethodInfo* get() {
    static auto* parameterProvider = &::il2cpp_utils::GetClassFromName("Meta.Conduit", "IParameterProvider")->byval_arg;
    static auto* actionId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* relaxed = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* confidence = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* partial = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::IConduitDispatcher*), "InvokeAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parameterProvider, actionId, relaxed, confidence, partial});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::IConduitDispatcher::InvokeError
// Il2CppName: InvokeError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::Conduit::IConduitDispatcher::*)(::StringW, ::System::Exception*)>(&Meta::Conduit::IConduitDispatcher::InvokeError)> {
  static const MethodInfo* get() {
    static auto* actionId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* exception = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::IConduitDispatcher*), "InvokeError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{actionId, exception});
  }
};
