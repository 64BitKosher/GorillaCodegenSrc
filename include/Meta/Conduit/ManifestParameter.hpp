// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: Meta.Conduit
namespace Meta::Conduit {
  // Forward declaring type: ManifestParameter
  class ManifestParameter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::Conduit::ManifestParameter);
DEFINE_IL2CPP_ARG_TYPE(::Meta::Conduit::ManifestParameter*, "Meta.Conduit", "ManifestParameter");
// Type namespace: Meta.Conduit
namespace Meta::Conduit {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: Meta.Conduit.ManifestParameter
  // [TokenAttribute] Offset: FFFFFFFF
  class ManifestParameter : public ::Il2CppObject {
    public:
    public:
    // private System.String _name
    // Size: 0x8
    // Offset: 0x10
    ::StringW name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String <InternalName>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::StringW InternalName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String <QualifiedName>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    ::StringW QualifiedName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String <TypeAssembly>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    ::StringW TypeAssembly;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String <QualifiedTypeName>k__BackingField
    // Size: 0x8
    // Offset: 0x30
    ::StringW QualifiedTypeName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Collections.Generic.List`1<System.String> <Aliases>k__BackingField
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::List_1<::StringW>* Aliases;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::StringW>*) == 0x8);
    // private System.Collections.Generic.List`1<System.String> <Examples>k__BackingField
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::Generic::List_1<::StringW>* Examples;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::StringW>*) == 0x8);
    public:
    // Get instance field reference: private System.String _name
    [[deprecated("Use field access instead!")]] ::StringW& dyn__name();
    // Get instance field reference: private System.String <InternalName>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$InternalName$k__BackingField();
    // Get instance field reference: private System.String <QualifiedName>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$QualifiedName$k__BackingField();
    // Get instance field reference: private System.String <TypeAssembly>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$TypeAssembly$k__BackingField();
    // Get instance field reference: private System.String <QualifiedTypeName>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$QualifiedTypeName$k__BackingField();
    // Get instance field reference: private System.Collections.Generic.List`1<System.String> <Aliases>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& dyn_$Aliases$k__BackingField();
    // Get instance field reference: private System.Collections.Generic.List`1<System.String> <Examples>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& dyn_$Examples$k__BackingField();
    // public System.Void .ctor()
    // Offset: 0x441FDE4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ManifestParameter* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::Conduit::ManifestParameter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ManifestParameter*, creationType>()));
    }
    // public System.String get_Name()
    // Offset: 0x441FDEC
    ::StringW get_Name();
    // public System.Void set_Name(System.String value)
    // Offset: 0x441FDF4
    void set_Name(::StringW value);
    // public System.String get_InternalName()
    // Offset: 0x441FE64
    ::StringW get_InternalName();
    // public System.Void set_InternalName(System.String value)
    // Offset: 0x441FE6C
    void set_InternalName(::StringW value);
    // public System.String get_QualifiedName()
    // Offset: 0x441FE74
    ::StringW get_QualifiedName();
    // public System.Void set_QualifiedName(System.String value)
    // Offset: 0x441FE7C
    void set_QualifiedName(::StringW value);
    // public System.String get_EntityType()
    // Offset: 0x441FE84
    ::StringW get_EntityType();
    // public System.String get_TypeAssembly()
    // Offset: 0x441FEF8
    ::StringW get_TypeAssembly();
    // public System.Void set_TypeAssembly(System.String value)
    // Offset: 0x441FF00
    void set_TypeAssembly(::StringW value);
    // public System.String get_QualifiedTypeName()
    // Offset: 0x441FF08
    ::StringW get_QualifiedTypeName();
    // public System.Void set_QualifiedTypeName(System.String value)
    // Offset: 0x441FF10
    void set_QualifiedTypeName(::StringW value);
    // public System.Collections.Generic.List`1<System.String> get_Aliases()
    // Offset: 0x441FF18
    ::System::Collections::Generic::List_1<::StringW>* get_Aliases();
    // public System.Void set_Aliases(System.Collections.Generic.List`1<System.String> value)
    // Offset: 0x441FF20
    void set_Aliases(::System::Collections::Generic::List_1<::StringW>* value);
    // public System.Collections.Generic.List`1<System.String> get_Examples()
    // Offset: 0x441FF28
    ::System::Collections::Generic::List_1<::StringW>* get_Examples();
    // public System.Void set_Examples(System.Collections.Generic.List`1<System.String> value)
    // Offset: 0x441FF30
    void set_Examples(::System::Collections::Generic::List_1<::StringW>* value);
    // private System.Boolean Equals(Meta.Conduit.ManifestParameter other)
    // Offset: 0x441FFC4
    bool Equals(::Meta::Conduit::ManifestParameter* other);
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x441FF38
    // Implemented from: System.Object
    // Base method: System.Boolean Object::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0x44200A4
    // Implemented from: System.Object
    // Base method: System.Int32 Object::GetHashCode()
    int GetHashCode();
  }; // Meta.Conduit.ManifestParameter
  #pragma pack(pop)
  static check_size<sizeof(ManifestParameter), 64 + sizeof(::System::Collections::Generic::List_1<::StringW>*)> __Meta_Conduit_ManifestParameterSizeCheck;
  static_assert(sizeof(ManifestParameter) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::Conduit::ManifestParameter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Meta::Conduit::ManifestParameter::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Meta::Conduit::ManifestParameter::*)()>(&Meta::Conduit::ManifestParameter::get_Name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ManifestParameter*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::ManifestParameter::set_Name
// Il2CppName: set_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Conduit::ManifestParameter::*)(::StringW)>(&Meta::Conduit::ManifestParameter::set_Name)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ManifestParameter*), "set_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::ManifestParameter::get_InternalName
// Il2CppName: get_InternalName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Meta::Conduit::ManifestParameter::*)()>(&Meta::Conduit::ManifestParameter::get_InternalName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ManifestParameter*), "get_InternalName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::ManifestParameter::set_InternalName
// Il2CppName: set_InternalName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Conduit::ManifestParameter::*)(::StringW)>(&Meta::Conduit::ManifestParameter::set_InternalName)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ManifestParameter*), "set_InternalName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::ManifestParameter::get_QualifiedName
// Il2CppName: get_QualifiedName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Meta::Conduit::ManifestParameter::*)()>(&Meta::Conduit::ManifestParameter::get_QualifiedName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ManifestParameter*), "get_QualifiedName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::ManifestParameter::set_QualifiedName
// Il2CppName: set_QualifiedName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Conduit::ManifestParameter::*)(::StringW)>(&Meta::Conduit::ManifestParameter::set_QualifiedName)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ManifestParameter*), "set_QualifiedName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::ManifestParameter::get_EntityType
// Il2CppName: get_EntityType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Meta::Conduit::ManifestParameter::*)()>(&Meta::Conduit::ManifestParameter::get_EntityType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ManifestParameter*), "get_EntityType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::ManifestParameter::get_TypeAssembly
// Il2CppName: get_TypeAssembly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Meta::Conduit::ManifestParameter::*)()>(&Meta::Conduit::ManifestParameter::get_TypeAssembly)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ManifestParameter*), "get_TypeAssembly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::ManifestParameter::set_TypeAssembly
// Il2CppName: set_TypeAssembly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Conduit::ManifestParameter::*)(::StringW)>(&Meta::Conduit::ManifestParameter::set_TypeAssembly)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ManifestParameter*), "set_TypeAssembly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::ManifestParameter::get_QualifiedTypeName
// Il2CppName: get_QualifiedTypeName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Meta::Conduit::ManifestParameter::*)()>(&Meta::Conduit::ManifestParameter::get_QualifiedTypeName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ManifestParameter*), "get_QualifiedTypeName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::ManifestParameter::set_QualifiedTypeName
// Il2CppName: set_QualifiedTypeName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Conduit::ManifestParameter::*)(::StringW)>(&Meta::Conduit::ManifestParameter::set_QualifiedTypeName)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ManifestParameter*), "set_QualifiedTypeName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::ManifestParameter::get_Aliases
// Il2CppName: get_Aliases
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::StringW>* (Meta::Conduit::ManifestParameter::*)()>(&Meta::Conduit::ManifestParameter::get_Aliases)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ManifestParameter*), "get_Aliases", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::ManifestParameter::set_Aliases
// Il2CppName: set_Aliases
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Conduit::ManifestParameter::*)(::System::Collections::Generic::List_1<::StringW>*)>(&Meta::Conduit::ManifestParameter::set_Aliases)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ManifestParameter*), "set_Aliases", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::ManifestParameter::get_Examples
// Il2CppName: get_Examples
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::StringW>* (Meta::Conduit::ManifestParameter::*)()>(&Meta::Conduit::ManifestParameter::get_Examples)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ManifestParameter*), "get_Examples", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::ManifestParameter::set_Examples
// Il2CppName: set_Examples
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Conduit::ManifestParameter::*)(::System::Collections::Generic::List_1<::StringW>*)>(&Meta::Conduit::ManifestParameter::set_Examples)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ManifestParameter*), "set_Examples", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::ManifestParameter::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::Conduit::ManifestParameter::*)(::Meta::Conduit::ManifestParameter*)>(&Meta::Conduit::ManifestParameter::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("Meta.Conduit", "ManifestParameter")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ManifestParameter*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::ManifestParameter::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::Conduit::ManifestParameter::*)(::Il2CppObject*)>(&Meta::Conduit::ManifestParameter::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ManifestParameter*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::ManifestParameter::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Meta::Conduit::ManifestParameter::*)()>(&Meta::Conduit::ManifestParameter::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ManifestParameter*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
