// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: Meta::WitAi::Json
namespace Meta::WitAi::Json {
  // Forward declaring type: WitResponseNode
  class WitResponseNode;
}
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: ParameterInfo
  class ParameterInfo;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Begin il2cpp-utils forward declares
struct Il2CppObject;
// Completed il2cpp-utils forward declares
// Type namespace: Meta.Conduit
namespace Meta::Conduit {
  // Forward declaring type: IParameterProvider
  class IParameterProvider;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::Conduit::IParameterProvider);
DEFINE_IL2CPP_ARG_TYPE(::Meta::Conduit::IParameterProvider*, "Meta.Conduit", "IParameterProvider");
// Type namespace: Meta.Conduit
namespace Meta::Conduit {
  // Size: 0x0
  #pragma pack(push, 1)
  // Autogenerated type: Meta.Conduit.IParameterProvider
  // [TokenAttribute] Offset: FFFFFFFF
  class IParameterProvider {
    public:
    // public System.Collections.Generic.List`1<System.String> get_AllParameterNames()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::Generic::List_1<::StringW>* get_AllParameterNames();
    // public System.Void PopulateParametersFromNode(Meta.WitAi.Json.WitResponseNode responseNode)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void PopulateParametersFromNode(::Meta::WitAi::Json::WitResponseNode* responseNode);
    // public System.Void PopulateRoles(System.Collections.Generic.Dictionary`2<System.String,System.String> parameterToRoleMap)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void PopulateRoles(::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* parameterToRoleMap);
    // public System.Void AddParameter(System.String parameterName, System.Object value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void AddParameter(::StringW parameterName, ::Il2CppObject* value);
    // public System.Boolean ContainsParameter(System.Reflection.ParameterInfo parameter, System.Text.StringBuilder log)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool ContainsParameter(::System::Reflection::ParameterInfo* parameter, ::System::Text::StringBuilder* log);
    // public System.Void AddCustomType(System.String name, System.Type type)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void AddCustomType(::StringW name, ::System::Type* type);
    // public System.Object GetParameterValue(System.Reflection.ParameterInfo formalParameter, System.Collections.Generic.Dictionary`2<System.String,System.String> parameterMap, System.Boolean relaxed)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Il2CppObject* GetParameterValue(::System::Reflection::ParameterInfo* formalParameter, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* parameterMap, bool relaxed);
    // public System.Collections.Generic.List`1<System.String> GetParameterNamesOfType(System.Type targetType)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::Generic::List_1<::StringW>* GetParameterNamesOfType(::System::Type* targetType);
    // public System.Void SetSpecializedParameter(System.String reservedParameterName, System.Type parameterType)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SetSpecializedParameter(::StringW reservedParameterName, ::System::Type* parameterType);
  }; // Meta.Conduit.IParameterProvider
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::Conduit::IParameterProvider::get_AllParameterNames
// Il2CppName: get_AllParameterNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::StringW>* (Meta::Conduit::IParameterProvider::*)()>(&Meta::Conduit::IParameterProvider::get_AllParameterNames)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::IParameterProvider*), "get_AllParameterNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::IParameterProvider::PopulateParametersFromNode
// Il2CppName: PopulateParametersFromNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Conduit::IParameterProvider::*)(::Meta::WitAi::Json::WitResponseNode*)>(&Meta::Conduit::IParameterProvider::PopulateParametersFromNode)> {
  static const MethodInfo* get() {
    static auto* responseNode = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Json", "WitResponseNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::IParameterProvider*), "PopulateParametersFromNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{responseNode});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::IParameterProvider::PopulateRoles
// Il2CppName: PopulateRoles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Conduit::IParameterProvider::*)(::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&Meta::Conduit::IParameterProvider::PopulateRoles)> {
  static const MethodInfo* get() {
    static auto* parameterToRoleMap = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::IParameterProvider*), "PopulateRoles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parameterToRoleMap});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::IParameterProvider::AddParameter
// Il2CppName: AddParameter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Conduit::IParameterProvider::*)(::StringW, ::Il2CppObject*)>(&Meta::Conduit::IParameterProvider::AddParameter)> {
  static const MethodInfo* get() {
    static auto* parameterName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::IParameterProvider*), "AddParameter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parameterName, value});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::IParameterProvider::ContainsParameter
// Il2CppName: ContainsParameter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::Conduit::IParameterProvider::*)(::System::Reflection::ParameterInfo*, ::System::Text::StringBuilder*)>(&Meta::Conduit::IParameterProvider::ContainsParameter)> {
  static const MethodInfo* get() {
    static auto* parameter = &::il2cpp_utils::GetClassFromName("System.Reflection", "ParameterInfo")->byval_arg;
    static auto* log = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::IParameterProvider*), "ContainsParameter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parameter, log});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::IParameterProvider::AddCustomType
// Il2CppName: AddCustomType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Conduit::IParameterProvider::*)(::StringW, ::System::Type*)>(&Meta::Conduit::IParameterProvider::AddCustomType)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::IParameterProvider*), "AddCustomType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, type});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::IParameterProvider::GetParameterValue
// Il2CppName: GetParameterValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (Meta::Conduit::IParameterProvider::*)(::System::Reflection::ParameterInfo*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*, bool)>(&Meta::Conduit::IParameterProvider::GetParameterValue)> {
  static const MethodInfo* get() {
    static auto* formalParameter = &::il2cpp_utils::GetClassFromName("System.Reflection", "ParameterInfo")->byval_arg;
    static auto* parameterMap = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    static auto* relaxed = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::IParameterProvider*), "GetParameterValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{formalParameter, parameterMap, relaxed});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::IParameterProvider::GetParameterNamesOfType
// Il2CppName: GetParameterNamesOfType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::StringW>* (Meta::Conduit::IParameterProvider::*)(::System::Type*)>(&Meta::Conduit::IParameterProvider::GetParameterNamesOfType)> {
  static const MethodInfo* get() {
    static auto* targetType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::IParameterProvider*), "GetParameterNamesOfType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetType});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::IParameterProvider::SetSpecializedParameter
// Il2CppName: SetSpecializedParameter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Conduit::IParameterProvider::*)(::StringW, ::System::Type*)>(&Meta::Conduit::IParameterProvider::SetSpecializedParameter)> {
  static const MethodInfo* get() {
    static auto* reservedParameterName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* parameterType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::IParameterProvider*), "SetSpecializedParameter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reservedParameterName, parameterType});
  }
};
