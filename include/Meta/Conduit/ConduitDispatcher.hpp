// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Meta.Conduit.IConduitDispatcher
#include "Meta/Conduit/IConduitDispatcher.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Meta::Conduit
namespace Meta::Conduit {
  // Forward declaring type: Manifest
  class Manifest;
  // Forward declaring type: IManifestLoader
  class IManifestLoader;
  // Forward declaring type: IInstanceResolver
  class IInstanceResolver;
  // Forward declaring type: IParameterProvider
  class IParameterProvider;
  // Forward declaring type: InvocationContext
  class InvocationContext;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Exception
  class Exception;
}
// Completed forward declares
// Type namespace: Meta.Conduit
namespace Meta::Conduit {
  // Forward declaring type: ConduitDispatcher
  class ConduitDispatcher;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::Conduit::ConduitDispatcher);
DEFINE_IL2CPP_ARG_TYPE(::Meta::Conduit::ConduitDispatcher*, "Meta.Conduit", "ConduitDispatcher");
// Type namespace: Meta.Conduit
namespace Meta::Conduit {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: Meta.Conduit.ConduitDispatcher
  // [TokenAttribute] Offset: FFFFFFFF
  class ConduitDispatcher : public ::Il2CppObject/*, public ::Meta::Conduit::IConduitDispatcher*/ {
    public:
    // Nested type: ::Meta::Conduit::ConduitDispatcher::InvocationContextFilter
    class InvocationContextFilter;
    public:
    // private Meta.Conduit.Manifest <Manifest>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::Meta::Conduit::Manifest* Manifest;
    // Field size check
    static_assert(sizeof(::Meta::Conduit::Manifest*) == 0x8);
    // private readonly Meta.Conduit.IManifestLoader _manifestLoader
    // Size: 0x8
    // Offset: 0x18
    ::Meta::Conduit::IManifestLoader* manifestLoader;
    // Field size check
    static_assert(sizeof(::Meta::Conduit::IManifestLoader*) == 0x8);
    // private readonly Meta.Conduit.IInstanceResolver _instanceResolver
    // Size: 0x8
    // Offset: 0x20
    ::Meta::Conduit::IInstanceResolver* instanceResolver;
    // Field size check
    static_assert(sizeof(::Meta::Conduit::IInstanceResolver*) == 0x8);
    // private readonly System.Collections.Generic.Dictionary`2<System.String,System.String> _parameterToRoleMap
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* parameterToRoleMap;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*) == 0x8);
    // private readonly System.Collections.Generic.HashSet`1<System.String> _ignoredActionIds
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::HashSet_1<::StringW>* ignoredActionIds;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<::StringW>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Meta::Conduit::IConduitDispatcher
    operator ::Meta::Conduit::IConduitDispatcher() noexcept {
      return *reinterpret_cast<::Meta::Conduit::IConduitDispatcher*>(this);
    }
    // Get instance field reference: private Meta.Conduit.Manifest <Manifest>k__BackingField
    [[deprecated("Use field access instead!")]] ::Meta::Conduit::Manifest*& dyn_$Manifest$k__BackingField();
    // Get instance field reference: private readonly Meta.Conduit.IManifestLoader _manifestLoader
    [[deprecated("Use field access instead!")]] ::Meta::Conduit::IManifestLoader*& dyn__manifestLoader();
    // Get instance field reference: private readonly Meta.Conduit.IInstanceResolver _instanceResolver
    [[deprecated("Use field access instead!")]] ::Meta::Conduit::IInstanceResolver*& dyn__instanceResolver();
    // Get instance field reference: private readonly System.Collections.Generic.Dictionary`2<System.String,System.String> _parameterToRoleMap
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*& dyn__parameterToRoleMap();
    // Get instance field reference: private readonly System.Collections.Generic.HashSet`1<System.String> _ignoredActionIds
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::StringW>*& dyn__ignoredActionIds();
    // public Meta.Conduit.Manifest get_Manifest()
    // Offset: 0x4419BE0
    ::Meta::Conduit::Manifest* get_Manifest();
    // private System.Void set_Manifest(Meta.Conduit.Manifest value)
    // Offset: 0x4419BE8
    void set_Manifest(::Meta::Conduit::Manifest* value);
    // public System.Void .ctor(Meta.Conduit.IManifestLoader manifestLoader, Meta.Conduit.IInstanceResolver instanceResolver)
    // Offset: 0x4419BF0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ConduitDispatcher* New_ctor(::Meta::Conduit::IManifestLoader* manifestLoader, ::Meta::Conduit::IInstanceResolver* instanceResolver) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::Conduit::ConduitDispatcher::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ConduitDispatcher*, creationType>(manifestLoader, instanceResolver)));
    }
    // public System.Void Initialize(System.String manifestFilePath)
    // Offset: 0x4419CFC
    void Initialize(::StringW manifestFilePath);
    // public System.Boolean InvokeAction(Meta.Conduit.IParameterProvider parameterProvider, System.String actionId, System.Boolean relaxed, System.Single confidence, System.Boolean partial)
    // Offset: 0x441A090
    bool InvokeAction(::Meta::Conduit::IParameterProvider* parameterProvider, ::StringW actionId, bool relaxed, float confidence, bool partial);
    // public System.Boolean InvokeError(System.String actionId, System.Exception exception)
    // Offset: 0x441A858
    bool InvokeError(::StringW actionId, ::System::Exception* exception);
    // private System.Boolean InvokeMethod(Meta.Conduit.InvocationContext invocationContext, Meta.Conduit.IParameterProvider parameterProvider, System.Boolean relaxed)
    // Offset: 0x441ACA8
    bool InvokeMethod(::Meta::Conduit::InvocationContext* invocationContext, ::Meta::Conduit::IParameterProvider* parameterProvider, bool relaxed);
  }; // Meta.Conduit.ConduitDispatcher
  #pragma pack(pop)
  static check_size<sizeof(ConduitDispatcher), 48 + sizeof(::System::Collections::Generic::HashSet_1<::StringW>*)> __Meta_Conduit_ConduitDispatcherSizeCheck;
  static_assert(sizeof(ConduitDispatcher) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::Conduit::ConduitDispatcher::get_Manifest
// Il2CppName: get_Manifest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::Conduit::Manifest* (Meta::Conduit::ConduitDispatcher::*)()>(&Meta::Conduit::ConduitDispatcher::get_Manifest)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ConduitDispatcher*), "get_Manifest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::ConduitDispatcher::set_Manifest
// Il2CppName: set_Manifest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Conduit::ConduitDispatcher::*)(::Meta::Conduit::Manifest*)>(&Meta::Conduit::ConduitDispatcher::set_Manifest)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Meta.Conduit", "Manifest")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ConduitDispatcher*), "set_Manifest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::ConduitDispatcher::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Meta::Conduit::ConduitDispatcher::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Conduit::ConduitDispatcher::*)(::StringW)>(&Meta::Conduit::ConduitDispatcher::Initialize)> {
  static const MethodInfo* get() {
    static auto* manifestFilePath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ConduitDispatcher*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{manifestFilePath});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::ConduitDispatcher::InvokeAction
// Il2CppName: InvokeAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::Conduit::ConduitDispatcher::*)(::Meta::Conduit::IParameterProvider*, ::StringW, bool, float, bool)>(&Meta::Conduit::ConduitDispatcher::InvokeAction)> {
  static const MethodInfo* get() {
    static auto* parameterProvider = &::il2cpp_utils::GetClassFromName("Meta.Conduit", "IParameterProvider")->byval_arg;
    static auto* actionId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* relaxed = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* confidence = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* partial = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ConduitDispatcher*), "InvokeAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parameterProvider, actionId, relaxed, confidence, partial});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::ConduitDispatcher::InvokeError
// Il2CppName: InvokeError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::Conduit::ConduitDispatcher::*)(::StringW, ::System::Exception*)>(&Meta::Conduit::ConduitDispatcher::InvokeError)> {
  static const MethodInfo* get() {
    static auto* actionId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* exception = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ConduitDispatcher*), "InvokeError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{actionId, exception});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::ConduitDispatcher::InvokeMethod
// Il2CppName: InvokeMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::Conduit::ConduitDispatcher::*)(::Meta::Conduit::InvocationContext*, ::Meta::Conduit::IParameterProvider*, bool)>(&Meta::Conduit::ConduitDispatcher::InvokeMethod)> {
  static const MethodInfo* get() {
    static auto* invocationContext = &::il2cpp_utils::GetClassFromName("Meta.Conduit", "InvocationContext")->byval_arg;
    static auto* parameterProvider = &::il2cpp_utils::GetClassFromName("Meta.Conduit", "IParameterProvider")->byval_arg;
    static auto* relaxed = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ConduitDispatcher*), "InvokeMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{invocationContext, parameterProvider, relaxed});
  }
};
