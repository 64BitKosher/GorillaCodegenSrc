// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Meta.Conduit.IManifestLoader
#include "Meta/Conduit/IManifestLoader.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Meta::Conduit
namespace Meta::Conduit {
  // Forward declaring type: Manifest
  class Manifest;
}
// Completed forward declares
// Type namespace: Meta.Conduit
namespace Meta::Conduit {
  // Forward declaring type: ManifestLoader
  class ManifestLoader;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::Conduit::ManifestLoader);
DEFINE_IL2CPP_ARG_TYPE(::Meta::Conduit::ManifestLoader*, "Meta.Conduit", "ManifestLoader");
// Type namespace: Meta.Conduit
namespace Meta::Conduit {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Meta.Conduit.ManifestLoader
  // [TokenAttribute] Offset: FFFFFFFF
  class ManifestLoader : public ::Il2CppObject/*, public ::Meta::Conduit::IManifestLoader*/ {
    public:
    // Creating interface conversion operator: operator ::Meta::Conduit::IManifestLoader
    operator ::Meta::Conduit::IManifestLoader() noexcept {
      return *reinterpret_cast<::Meta::Conduit::IManifestLoader*>(this);
    }
    // public Meta.Conduit.Manifest LoadManifest(System.String manifestLocalPath)
    // Offset: 0x441FBF4
    ::Meta::Conduit::Manifest* LoadManifest(::StringW manifestLocalPath);
    // public Meta.Conduit.Manifest LoadManifestFromString(System.String manifestText)
    // Offset: 0x441FD04
    ::Meta::Conduit::Manifest* LoadManifestFromString(::StringW manifestText);
    // public System.Void .ctor()
    // Offset: 0x441C498
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ManifestLoader* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::Conduit::ManifestLoader::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ManifestLoader*, creationType>()));
    }
  }; // Meta.Conduit.ManifestLoader
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::Conduit::ManifestLoader::LoadManifest
// Il2CppName: LoadManifest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::Conduit::Manifest* (Meta::Conduit::ManifestLoader::*)(::StringW)>(&Meta::Conduit::ManifestLoader::LoadManifest)> {
  static const MethodInfo* get() {
    static auto* manifestLocalPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ManifestLoader*), "LoadManifest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{manifestLocalPath});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::ManifestLoader::LoadManifestFromString
// Il2CppName: LoadManifestFromString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::Conduit::Manifest* (Meta::Conduit::ManifestLoader::*)(::StringW)>(&Meta::Conduit::ManifestLoader::LoadManifestFromString)> {
  static const MethodInfo* get() {
    static auto* manifestText = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ManifestLoader*), "LoadManifestFromString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{manifestText});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::ManifestLoader::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
