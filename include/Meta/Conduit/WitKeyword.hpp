// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Meta.WitAi.Data.Info.WitEntityKeywordInfo
#include "Meta/WitAi/Data/Info/WitEntityKeywordInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: Meta.Conduit
namespace Meta::Conduit {
  // Forward declaring type: WitKeyword
  class WitKeyword;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::Conduit::WitKeyword);
DEFINE_IL2CPP_ARG_TYPE(::Meta::Conduit::WitKeyword*, "Meta.Conduit", "WitKeyword");
// Type namespace: Meta.Conduit
namespace Meta::Conduit {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Meta.Conduit.WitKeyword
  // [TokenAttribute] Offset: FFFFFFFF
  class WitKeyword : public ::Il2CppObject {
    public:
    public:
    // public readonly System.String keyword
    // Size: 0x8
    // Offset: 0x10
    ::StringW keyword;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public readonly System.Collections.Generic.HashSet`1<System.String> synonyms
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::HashSet_1<::StringW>* synonyms;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<::StringW>*) == 0x8);
    public:
    // Get instance field reference: public readonly System.String keyword
    [[deprecated("Use field access instead!")]] ::StringW& dyn_keyword();
    // Get instance field reference: public readonly System.Collections.Generic.HashSet`1<System.String> synonyms
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::StringW>*& dyn_synonyms();
    // public System.Void .ctor()
    // Offset: 0x44201B0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WitKeyword* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::Conduit::WitKeyword::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WitKeyword*, creationType>()));
    }
    // public System.Void .ctor(System.String keyword, System.Collections.Generic.List`1<System.String> synonyms)
    // Offset: 0x44201FC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WitKeyword* New_ctor(::StringW keyword, ::System::Collections::Generic::List_1<::StringW>* synonyms) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::Conduit::WitKeyword::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WitKeyword*, creationType>(keyword, synonyms)));
    }
    // public System.Void .ctor(Meta.WitAi.Data.Info.WitEntityKeywordInfo witEntityKeywordInfo)
    // Offset: 0x442046C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WitKeyword* New_ctor(::Meta::WitAi::Data::Info::WitEntityKeywordInfo witEntityKeywordInfo) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::Conduit::WitKeyword::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WitKeyword*, creationType>(witEntityKeywordInfo)));
    }
    // public Meta.WitAi.Data.Info.WitEntityKeywordInfo GetAsInfo()
    // Offset: 0x441F5A0
    ::Meta::WitAi::Data::Info::WitEntityKeywordInfo GetAsInfo();
    // private System.Boolean Equals(Meta.Conduit.WitKeyword other)
    // Offset: 0x44204FC
    bool Equals(::Meta::Conduit::WitKeyword* other);
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x4420470
    // Implemented from: System.Object
    // Base method: System.Boolean Object::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0x442057C
    // Implemented from: System.Object
    // Base method: System.Int32 Object::GetHashCode()
    int GetHashCode();
  }; // Meta.Conduit.WitKeyword
  #pragma pack(pop)
  static check_size<sizeof(WitKeyword), 24 + sizeof(::System::Collections::Generic::HashSet_1<::StringW>*)> __Meta_Conduit_WitKeywordSizeCheck;
  static_assert(sizeof(WitKeyword) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::Conduit::WitKeyword::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Meta::Conduit::WitKeyword::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Meta::Conduit::WitKeyword::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Meta::Conduit::WitKeyword::GetAsInfo
// Il2CppName: GetAsInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Data::Info::WitEntityKeywordInfo (Meta::Conduit::WitKeyword::*)()>(&Meta::Conduit::WitKeyword::GetAsInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::WitKeyword*), "GetAsInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::WitKeyword::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::Conduit::WitKeyword::*)(::Meta::Conduit::WitKeyword*)>(&Meta::Conduit::WitKeyword::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("Meta.Conduit", "WitKeyword")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::WitKeyword*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::WitKeyword::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::Conduit::WitKeyword::*)(::Il2CppObject*)>(&Meta::Conduit::WitKeyword::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::WitKeyword*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::WitKeyword::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Meta::Conduit::WitKeyword::*)()>(&Meta::Conduit::WitKeyword::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::WitKeyword*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
