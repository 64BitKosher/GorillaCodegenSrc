// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Meta.Conduit.ConduitDispatcher/InvocationContextFilter
#include "Meta/Conduit/ConduitDispatcher_InvocationContextFilter.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Meta::Conduit
namespace Meta::Conduit {
  // Forward declaring type: InvocationContext
  class InvocationContext;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::Conduit::ConduitDispatcher::InvocationContextFilter::$$c__DisplayClass4_0);
DEFINE_IL2CPP_ARG_TYPE(::Meta::Conduit::ConduitDispatcher::InvocationContextFilter::$$c__DisplayClass4_0*, "Meta.Conduit", "ConduitDispatcher/InvocationContextFilter/<>c__DisplayClass4_0");
// Type namespace: Meta.Conduit
namespace Meta::Conduit {
  // Size: 0x1D
  #pragma pack(push, 1)
  // Autogenerated type: Meta.Conduit.ConduitDispatcher/InvocationContextFilter/<>c__DisplayClass4_0
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  class ConduitDispatcher::InvocationContextFilter::$$c__DisplayClass4_0 : public ::Il2CppObject {
    public:
    public:
    // public Meta.Conduit.ConduitDispatcher/InvocationContextFilter <>4__this
    // Size: 0x8
    // Offset: 0x10
    ::Meta::Conduit::ConduitDispatcher::InvocationContextFilter* $$4__this;
    // Field size check
    static_assert(sizeof(::Meta::Conduit::ConduitDispatcher::InvocationContextFilter*) == 0x8);
    // public System.Single confidence
    // Size: 0x4
    // Offset: 0x18
    float confidence;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean partial
    // Size: 0x1
    // Offset: 0x1C
    bool partial;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: public Meta.Conduit.ConduitDispatcher/InvocationContextFilter <>4__this
    [[deprecated("Use field access instead!")]] ::Meta::Conduit::ConduitDispatcher::InvocationContextFilter*& dyn_$$4__this();
    // Get instance field reference: public System.Single confidence
    [[deprecated("Use field access instead!")]] float& dyn_confidence();
    // Get instance field reference: public System.Boolean partial
    [[deprecated("Use field access instead!")]] bool& dyn_partial();
    // public System.Void .ctor()
    // Offset: 0x441BC14
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ConduitDispatcher::InvocationContextFilter::$$c__DisplayClass4_0* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::Conduit::ConduitDispatcher::InvocationContextFilter::$$c__DisplayClass4_0::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ConduitDispatcher::InvocationContextFilter::$$c__DisplayClass4_0*, creationType>()));
    }
    // System.Boolean <ResolveInvocationContexts>b__0(Meta.Conduit.InvocationContext context)
    // Offset: 0x441C310
    bool $ResolveInvocationContexts$b__0(::Meta::Conduit::InvocationContext* context);
  }; // Meta.Conduit.ConduitDispatcher/InvocationContextFilter/<>c__DisplayClass4_0
  #pragma pack(pop)
  static check_size<sizeof(ConduitDispatcher::InvocationContextFilter::$$c__DisplayClass4_0), 28 + sizeof(bool)> __Meta_Conduit_ConduitDispatcher_InvocationContextFilter_$$c__DisplayClass4_0SizeCheck;
  static_assert(sizeof(ConduitDispatcher::InvocationContextFilter::$$c__DisplayClass4_0) == 0x1D);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::Conduit::ConduitDispatcher::InvocationContextFilter::$$c__DisplayClass4_0::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Meta::Conduit::ConduitDispatcher::InvocationContextFilter::$$c__DisplayClass4_0::$ResolveInvocationContexts$b__0
// Il2CppName: <ResolveInvocationContexts>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::Conduit::ConduitDispatcher::InvocationContextFilter::$$c__DisplayClass4_0::*)(::Meta::Conduit::InvocationContext*)>(&Meta::Conduit::ConduitDispatcher::InvocationContextFilter::$$c__DisplayClass4_0::$ResolveInvocationContexts$b__0)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("Meta.Conduit", "InvocationContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ConduitDispatcher::InvocationContextFilter::$$c__DisplayClass4_0*), "<ResolveInvocationContexts>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context});
  }
};
