// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Meta.Conduit.IParameterProvider
#include "Meta/Conduit/IParameterProvider.hpp"
// Including type: Meta.Conduit.ConduitParameterValue
#include "Meta/Conduit/ConduitParameterValue.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Meta::Conduit
namespace Meta::Conduit {
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: String
  class String;
}
// Forward declaring namespace: Meta::WitAi::Json
namespace Meta::WitAi::Json {
  // Forward declaring type: WitResponseNode
  class WitResponseNode;
}
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: ParameterInfo
  class ParameterInfo;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Completed forward declares
// Type namespace: Meta.Conduit
namespace Meta::Conduit {
  // Forward declaring type: ParameterProvider
  class ParameterProvider;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::Conduit::ParameterProvider);
DEFINE_IL2CPP_ARG_TYPE(::Meta::Conduit::ParameterProvider*, "Meta.Conduit", "ParameterProvider");
// Type namespace: Meta.Conduit
namespace Meta::Conduit {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: Meta.Conduit.ParameterProvider
  // [TokenAttribute] Offset: FFFFFFFF
  class ParameterProvider : public ::Il2CppObject/*, public ::Meta::Conduit::IParameterProvider*/ {
    public:
    // Nested type: ::Meta::Conduit::ParameterProvider::$$c__DisplayClass21_0
    class $$c__DisplayClass21_0;
    public:
    // protected readonly System.Collections.Generic.Dictionary`2<System.String,System.Object> ActualParameters
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::Dictionary_2<::StringW, ::Il2CppObject*>* ActualParameters;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::Il2CppObject*>*) == 0x8);
    // private readonly System.Collections.Generic.Dictionary`2<System.String,System.String> _parameterToRoleMap
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* parameterToRoleMap;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*) == 0x8);
    // private readonly System.Collections.Generic.Dictionary`2<System.Type,System.Collections.Generic.List`1<System.String>> _parametersOfType
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::Dictionary_2<::System::Type*, ::System::Collections::Generic::List_1<::StringW>*>* parametersOfType;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::System::Type*, ::System::Collections::Generic::List_1<::StringW>*>*) == 0x8);
    // private readonly System.Collections.Generic.Dictionary`2<System.Type,System.String> _specializedParameters
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::Dictionary_2<::System::Type*, ::StringW>* specializedParameters;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::System::Type*, ::StringW>*) == 0x8);
    // private readonly System.Collections.Generic.Dictionary`2<System.String,System.Type> _customTypes
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::Dictionary_2<::StringW, ::System::Type*>* customTypes;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::System::Type*>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Meta::Conduit::IParameterProvider
    operator ::Meta::Conduit::IParameterProvider() noexcept {
      return *reinterpret_cast<::Meta::Conduit::IParameterProvider*>(this);
    }
    // static field const value: static public System.String WitResponseNodeReservedName
    static constexpr const char* WitResponseNodeReservedName = "@WitResponseNode";
    // Get static field: static public System.String WitResponseNodeReservedName
    static ::StringW _get_WitResponseNodeReservedName();
    // Set static field: static public System.String WitResponseNodeReservedName
    static void _set_WitResponseNodeReservedName(::StringW value);
    // static field const value: static public System.String VoiceSessionReservedName
    static constexpr const char* VoiceSessionReservedName = "@VoiceSession";
    // Get static field: static public System.String VoiceSessionReservedName
    static ::StringW _get_VoiceSessionReservedName();
    // Set static field: static public System.String VoiceSessionReservedName
    static void _set_VoiceSessionReservedName(::StringW value);
    // Get static field: static private readonly System.Collections.Generic.Dictionary`2<System.String,System.Collections.Generic.List`1<System.Type>> BuiltInTypes
    static ::System::Collections::Generic::Dictionary_2<::StringW, ::System::Collections::Generic::List_1<::System::Type*>*>* _get_BuiltInTypes();
    // Set static field: static private readonly System.Collections.Generic.Dictionary`2<System.String,System.Collections.Generic.List`1<System.Type>> BuiltInTypes
    static void _set_BuiltInTypes(::System::Collections::Generic::Dictionary_2<::StringW, ::System::Collections::Generic::List_1<::System::Type*>*>* value);
    // Get instance field reference: protected readonly System.Collections.Generic.Dictionary`2<System.String,System.Object> ActualParameters
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::Il2CppObject*>*& dyn_ActualParameters();
    // Get instance field reference: private readonly System.Collections.Generic.Dictionary`2<System.String,System.String> _parameterToRoleMap
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*& dyn__parameterToRoleMap();
    // Get instance field reference: private readonly System.Collections.Generic.Dictionary`2<System.Type,System.Collections.Generic.List`1<System.String>> _parametersOfType
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::System::Type*, ::System::Collections::Generic::List_1<::StringW>*>*& dyn__parametersOfType();
    // Get instance field reference: private readonly System.Collections.Generic.Dictionary`2<System.Type,System.String> _specializedParameters
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::System::Type*, ::StringW>*& dyn__specializedParameters();
    // Get instance field reference: private readonly System.Collections.Generic.Dictionary`2<System.String,System.Type> _customTypes
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::System::Type*>*& dyn__customTypes();
    // public System.Collections.Generic.List`1<System.String> get_AllParameterNames()
    // Offset: 0x44205D4
    ::System::Collections::Generic::List_1<::StringW>* get_AllParameterNames();
    // public System.Void AddCustomType(System.String name, System.Type type)
    // Offset: 0x4420640
    void AddCustomType(::StringW name, ::System::Type* type);
    // public System.Void AddParameter(System.String parameterName, System.Object value)
    // Offset: 0x441BBAC
    void AddParameter(::StringW parameterName, ::Il2CppObject* value);
    // public System.Void PopulateParametersFromNode(Meta.WitAi.Json.WitResponseNode responseNode)
    // Offset: 0x44206A8
    void PopulateParametersFromNode(::Meta::WitAi::Json::WitResponseNode* responseNode);
    // public System.Void SetSpecializedParameter(System.String reservedParameterName, System.Type parameterType)
    // Offset: 0x4421510
    void SetSpecializedParameter(::StringW reservedParameterName, ::System::Type* parameterType);
    // public System.Void PopulateParameters(System.Collections.Generic.Dictionary`2<System.String,Meta.Conduit.ConduitParameterValue> actualParameters)
    // Offset: 0x4421370
    void PopulateParameters(::System::Collections::Generic::Dictionary_2<::StringW, ::Meta::Conduit::ConduitParameterValue>* actualParameters);
    // public System.Void PopulateRoles(System.Collections.Generic.Dictionary`2<System.String,System.String> parameterToRoleMap)
    // Offset: 0x442158C
    void PopulateRoles(::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* parameterToRoleMap);
    // public System.Boolean ContainsParameter(System.Reflection.ParameterInfo parameter, System.Text.StringBuilder log)
    // Offset: 0x442175C
    bool ContainsParameter(::System::Reflection::ParameterInfo* parameter, ::System::Text::StringBuilder* log);
    // public System.Object GetParameterValue(System.Reflection.ParameterInfo formalParameter, System.Collections.Generic.Dictionary`2<System.String,System.String> parameterMap, System.Boolean relaxed)
    // Offset: 0x44218DC
    ::Il2CppObject* GetParameterValue(::System::Reflection::ParameterInfo* formalParameter, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* parameterMap, bool relaxed);
    // public System.Collections.Generic.List`1<System.String> GetParameterNamesOfType(System.Type targetType)
    // Offset: 0x4421F50
    ::System::Collections::Generic::List_1<::StringW>* GetParameterNamesOfType(::System::Type* targetType);
    // protected System.Boolean SupportedSpecializedParameter(System.Reflection.ParameterInfo formalParameter)
    // Offset: 0x442227C
    bool SupportedSpecializedParameter(::System::Reflection::ParameterInfo* formalParameter);
    // protected System.Object GetSpecializedParameter(System.Reflection.ParameterInfo formalParameter)
    // Offset: 0x44222EC
    ::Il2CppObject* GetSpecializedParameter(::System::Reflection::ParameterInfo* formalParameter);
    // private System.Collections.Generic.IEnumerable`1<System.Type> GetParameterTypes(System.String typeString, System.String value)
    // Offset: 0x4420FF8
    ::System::Collections::Generic::IEnumerable_1<::System::Type*>* GetParameterTypes(::StringW typeString, ::StringW value);
    // private System.Boolean PerfectTypeMatch(System.Type targetType, System.String value)
    // Offset: 0x44227BC
    bool PerfectTypeMatch(::System::Type* targetType, ::StringW value);
    // private System.String GetActualParameterName(System.Reflection.ParameterInfo formalParameter, System.Collections.Generic.Dictionary`2<System.String,System.String> parameterMap, System.Boolean relaxed)
    // Offset: 0x4421D18
    ::StringW GetActualParameterName(::System::Reflection::ParameterInfo* formalParameter, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* parameterMap, bool relaxed);
    // public System.Void .ctor()
    // Offset: 0x441B93C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ParameterProvider* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::Conduit::ParameterProvider::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ParameterProvider*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x442295C
    static void _cctor();
    // public override System.String ToString()
    // Offset: 0x4422904
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
  }; // Meta.Conduit.ParameterProvider
  #pragma pack(pop)
  static check_size<sizeof(ParameterProvider), 48 + sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::System::Type*>*)> __Meta_Conduit_ParameterProviderSizeCheck;
  static_assert(sizeof(ParameterProvider) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::Conduit::ParameterProvider::get_AllParameterNames
// Il2CppName: get_AllParameterNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::StringW>* (Meta::Conduit::ParameterProvider::*)()>(&Meta::Conduit::ParameterProvider::get_AllParameterNames)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ParameterProvider*), "get_AllParameterNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::ParameterProvider::AddCustomType
// Il2CppName: AddCustomType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Conduit::ParameterProvider::*)(::StringW, ::System::Type*)>(&Meta::Conduit::ParameterProvider::AddCustomType)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ParameterProvider*), "AddCustomType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, type});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::ParameterProvider::AddParameter
// Il2CppName: AddParameter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Conduit::ParameterProvider::*)(::StringW, ::Il2CppObject*)>(&Meta::Conduit::ParameterProvider::AddParameter)> {
  static const MethodInfo* get() {
    static auto* parameterName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ParameterProvider*), "AddParameter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parameterName, value});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::ParameterProvider::PopulateParametersFromNode
// Il2CppName: PopulateParametersFromNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Conduit::ParameterProvider::*)(::Meta::WitAi::Json::WitResponseNode*)>(&Meta::Conduit::ParameterProvider::PopulateParametersFromNode)> {
  static const MethodInfo* get() {
    static auto* responseNode = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Json", "WitResponseNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ParameterProvider*), "PopulateParametersFromNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{responseNode});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::ParameterProvider::SetSpecializedParameter
// Il2CppName: SetSpecializedParameter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Conduit::ParameterProvider::*)(::StringW, ::System::Type*)>(&Meta::Conduit::ParameterProvider::SetSpecializedParameter)> {
  static const MethodInfo* get() {
    static auto* reservedParameterName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* parameterType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ParameterProvider*), "SetSpecializedParameter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reservedParameterName, parameterType});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::ParameterProvider::PopulateParameters
// Il2CppName: PopulateParameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Conduit::ParameterProvider::*)(::System::Collections::Generic::Dictionary_2<::StringW, ::Meta::Conduit::ConduitParameterValue>*)>(&Meta::Conduit::ParameterProvider::PopulateParameters)> {
  static const MethodInfo* get() {
    static auto* actualParameters = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("Meta.Conduit", "ConduitParameterValue")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ParameterProvider*), "PopulateParameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{actualParameters});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::ParameterProvider::PopulateRoles
// Il2CppName: PopulateRoles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Conduit::ParameterProvider::*)(::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&Meta::Conduit::ParameterProvider::PopulateRoles)> {
  static const MethodInfo* get() {
    static auto* parameterToRoleMap = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ParameterProvider*), "PopulateRoles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parameterToRoleMap});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::ParameterProvider::ContainsParameter
// Il2CppName: ContainsParameter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::Conduit::ParameterProvider::*)(::System::Reflection::ParameterInfo*, ::System::Text::StringBuilder*)>(&Meta::Conduit::ParameterProvider::ContainsParameter)> {
  static const MethodInfo* get() {
    static auto* parameter = &::il2cpp_utils::GetClassFromName("System.Reflection", "ParameterInfo")->byval_arg;
    static auto* log = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ParameterProvider*), "ContainsParameter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parameter, log});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::ParameterProvider::GetParameterValue
// Il2CppName: GetParameterValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (Meta::Conduit::ParameterProvider::*)(::System::Reflection::ParameterInfo*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*, bool)>(&Meta::Conduit::ParameterProvider::GetParameterValue)> {
  static const MethodInfo* get() {
    static auto* formalParameter = &::il2cpp_utils::GetClassFromName("System.Reflection", "ParameterInfo")->byval_arg;
    static auto* parameterMap = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    static auto* relaxed = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ParameterProvider*), "GetParameterValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{formalParameter, parameterMap, relaxed});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::ParameterProvider::GetParameterNamesOfType
// Il2CppName: GetParameterNamesOfType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::StringW>* (Meta::Conduit::ParameterProvider::*)(::System::Type*)>(&Meta::Conduit::ParameterProvider::GetParameterNamesOfType)> {
  static const MethodInfo* get() {
    static auto* targetType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ParameterProvider*), "GetParameterNamesOfType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetType});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::ParameterProvider::SupportedSpecializedParameter
// Il2CppName: SupportedSpecializedParameter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::Conduit::ParameterProvider::*)(::System::Reflection::ParameterInfo*)>(&Meta::Conduit::ParameterProvider::SupportedSpecializedParameter)> {
  static const MethodInfo* get() {
    static auto* formalParameter = &::il2cpp_utils::GetClassFromName("System.Reflection", "ParameterInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ParameterProvider*), "SupportedSpecializedParameter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{formalParameter});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::ParameterProvider::GetSpecializedParameter
// Il2CppName: GetSpecializedParameter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (Meta::Conduit::ParameterProvider::*)(::System::Reflection::ParameterInfo*)>(&Meta::Conduit::ParameterProvider::GetSpecializedParameter)> {
  static const MethodInfo* get() {
    static auto* formalParameter = &::il2cpp_utils::GetClassFromName("System.Reflection", "ParameterInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ParameterProvider*), "GetSpecializedParameter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{formalParameter});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::ParameterProvider::GetParameterTypes
// Il2CppName: GetParameterTypes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerable_1<::System::Type*>* (Meta::Conduit::ParameterProvider::*)(::StringW, ::StringW)>(&Meta::Conduit::ParameterProvider::GetParameterTypes)> {
  static const MethodInfo* get() {
    static auto* typeString = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ParameterProvider*), "GetParameterTypes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{typeString, value});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::ParameterProvider::PerfectTypeMatch
// Il2CppName: PerfectTypeMatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::Conduit::ParameterProvider::*)(::System::Type*, ::StringW)>(&Meta::Conduit::ParameterProvider::PerfectTypeMatch)> {
  static const MethodInfo* get() {
    static auto* targetType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ParameterProvider*), "PerfectTypeMatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetType, value});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::ParameterProvider::GetActualParameterName
// Il2CppName: GetActualParameterName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Meta::Conduit::ParameterProvider::*)(::System::Reflection::ParameterInfo*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*, bool)>(&Meta::Conduit::ParameterProvider::GetActualParameterName)> {
  static const MethodInfo* get() {
    static auto* formalParameter = &::il2cpp_utils::GetClassFromName("System.Reflection", "ParameterInfo")->byval_arg;
    static auto* parameterMap = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    static auto* relaxed = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ParameterProvider*), "GetActualParameterName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{formalParameter, parameterMap, relaxed});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::ParameterProvider::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Meta::Conduit::ParameterProvider::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Meta::Conduit::ParameterProvider::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ParameterProvider*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::ParameterProvider::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Meta::Conduit::ParameterProvider::*)()>(&Meta::Conduit::ParameterProvider::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ParameterProvider*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
