// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Attribute
#include "System/Attribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: Meta.Conduit
namespace Meta::Conduit {
  // Forward declaring type: ConduitParameterAttribute
  class ConduitParameterAttribute;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::Conduit::ConduitParameterAttribute);
DEFINE_IL2CPP_ARG_TYPE(::Meta::Conduit::ConduitParameterAttribute*, "Meta.Conduit", "ConduitParameterAttribute");
// Type namespace: Meta.Conduit
namespace Meta::Conduit {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Meta.Conduit.ConduitParameterAttribute
  // [TokenAttribute] Offset: FFFFFFFF
  // [AttributeUsageAttribute] Offset: FFFFFFFF
  class ConduitParameterAttribute : public ::System::Attribute {
    public:
    public:
    // private readonly System.Collections.Generic.List`1<System.String> <Examples>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::List_1<::StringW>* Examples;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::StringW>*) == 0x8);
    // private readonly System.Collections.Generic.List`1<System.String> <Aliases>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::StringW>* Aliases;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::StringW>*) == 0x8);
    public:
    // Get instance field reference: private readonly System.Collections.Generic.List`1<System.String> <Examples>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& dyn_$Examples$k__BackingField();
    // Get instance field reference: private readonly System.Collections.Generic.List`1<System.String> <Aliases>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& dyn_$Aliases$k__BackingField();
    // public System.Collections.Generic.List`1<System.String> get_Examples()
    // Offset: 0x4419A3C
    ::System::Collections::Generic::List_1<::StringW>* get_Examples();
    // public System.Collections.Generic.List`1<System.String> get_Aliases()
    // Offset: 0x4419A44
    ::System::Collections::Generic::List_1<::StringW>* get_Aliases();
    // public System.Void .ctor(params System.String[] examples)
    // Offset: 0x4419A4C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ConduitParameterAttribute* New_ctor(::ArrayW<::StringW> examples) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::Conduit::ConduitParameterAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ConduitParameterAttribute*, creationType>(examples)));
    }
    // public System.Void .ctor(System.String[] aliases, params System.String[] examples)
    // Offset: 0x4419B10
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ConduitParameterAttribute* New_ctor(::ArrayW<::StringW> aliases, ::ArrayW<::StringW> examples) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::Conduit::ConduitParameterAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ConduitParameterAttribute*, creationType>(aliases, examples)));
    }
  }; // Meta.Conduit.ConduitParameterAttribute
  #pragma pack(pop)
  static check_size<sizeof(ConduitParameterAttribute), 24 + sizeof(::System::Collections::Generic::List_1<::StringW>*)> __Meta_Conduit_ConduitParameterAttributeSizeCheck;
  static_assert(sizeof(ConduitParameterAttribute) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::Conduit::ConduitParameterAttribute::get_Examples
// Il2CppName: get_Examples
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::StringW>* (Meta::Conduit::ConduitParameterAttribute::*)()>(&Meta::Conduit::ConduitParameterAttribute::get_Examples)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ConduitParameterAttribute*), "get_Examples", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::ConduitParameterAttribute::get_Aliases
// Il2CppName: get_Aliases
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::StringW>* (Meta::Conduit::ConduitParameterAttribute::*)()>(&Meta::Conduit::ConduitParameterAttribute::get_Aliases)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::ConduitParameterAttribute*), "get_Aliases", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::ConduitParameterAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Meta::Conduit::ConduitParameterAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
