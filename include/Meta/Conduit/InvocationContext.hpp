// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: MethodInfo
  class MethodInfo;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Completed forward declares
// Type namespace: Meta.Conduit
namespace Meta::Conduit {
  // Forward declaring type: InvocationContext
  class InvocationContext;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::Conduit::InvocationContext);
DEFINE_IL2CPP_ARG_TYPE(::Meta::Conduit::InvocationContext*, "Meta.Conduit", "InvocationContext");
// Type namespace: Meta.Conduit
namespace Meta::Conduit {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: Meta.Conduit.InvocationContext
  // [TokenAttribute] Offset: FFFFFFFF
  class InvocationContext : public ::Il2CppObject {
    public:
    public:
    // private System.Type <Type>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::System::Type* Type;
    // Field size check
    static_assert(sizeof(::System::Type*) == 0x8);
    // private System.Reflection.MethodInfo <MethodInfo>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::System::Reflection::MethodInfo* MethodInfo;
    // Field size check
    static_assert(sizeof(::System::Reflection::MethodInfo*) == 0x8);
    // private System.Single <MinConfidence>k__BackingField
    // Size: 0x4
    // Offset: 0x20
    float MinConfidence;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single <MaxConfidence>k__BackingField
    // Size: 0x4
    // Offset: 0x24
    float MaxConfidence;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean <ValidatePartial>k__BackingField
    // Size: 0x1
    // Offset: 0x28
    bool ValidatePartial;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: ValidatePartial and: ParameterMap
    char __padding4[0x7] = {};
    // private System.Collections.Generic.Dictionary`2<System.String,System.String> <ParameterMap>k__BackingField
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* ParameterMap;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*) == 0x8);
    // private System.Type <CustomAttributeType>k__BackingField
    // Size: 0x8
    // Offset: 0x38
    ::System::Type* CustomAttributeType;
    // Field size check
    static_assert(sizeof(::System::Type*) == 0x8);
    public:
    // Get instance field reference: private System.Type <Type>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Type*& dyn_$Type$k__BackingField();
    // Get instance field reference: private System.Reflection.MethodInfo <MethodInfo>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Reflection::MethodInfo*& dyn_$MethodInfo$k__BackingField();
    // Get instance field reference: private System.Single <MinConfidence>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$MinConfidence$k__BackingField();
    // Get instance field reference: private System.Single <MaxConfidence>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$MaxConfidence$k__BackingField();
    // Get instance field reference: private System.Boolean <ValidatePartial>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$ValidatePartial$k__BackingField();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.String,System.String> <ParameterMap>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*& dyn_$ParameterMap$k__BackingField();
    // Get instance field reference: private System.Type <CustomAttributeType>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Type*& dyn_$CustomAttributeType$k__BackingField();
    // public System.Type get_Type()
    // Offset: 0x441CBDC
    ::System::Type* get_Type();
    // public System.Void set_Type(System.Type value)
    // Offset: 0x441CBE4
    void set_Type(::System::Type* value);
    // public System.Reflection.MethodInfo get_MethodInfo()
    // Offset: 0x441CBEC
    ::System::Reflection::MethodInfo* get_MethodInfo();
    // public System.Void set_MethodInfo(System.Reflection.MethodInfo value)
    // Offset: 0x441CBF4
    void set_MethodInfo(::System::Reflection::MethodInfo* value);
    // public System.Single get_MinConfidence()
    // Offset: 0x441CBFC
    float get_MinConfidence();
    // public System.Void set_MinConfidence(System.Single value)
    // Offset: 0x441CC04
    void set_MinConfidence(float value);
    // public System.Single get_MaxConfidence()
    // Offset: 0x441CC0C
    float get_MaxConfidence();
    // public System.Void set_MaxConfidence(System.Single value)
    // Offset: 0x441CC14
    void set_MaxConfidence(float value);
    // public System.Boolean get_ValidatePartial()
    // Offset: 0x441CC1C
    bool get_ValidatePartial();
    // public System.Void set_ValidatePartial(System.Boolean value)
    // Offset: 0x441CC24
    void set_ValidatePartial(bool value);
    // public System.Collections.Generic.Dictionary`2<System.String,System.String> get_ParameterMap()
    // Offset: 0x441CC30
    ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* get_ParameterMap();
    // public System.Void set_ParameterMap(System.Collections.Generic.Dictionary`2<System.String,System.String> value)
    // Offset: 0x441CC38
    void set_ParameterMap(::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* value);
    // public System.Type get_CustomAttributeType()
    // Offset: 0x441CC40
    ::System::Type* get_CustomAttributeType();
    // public System.Void set_CustomAttributeType(System.Type value)
    // Offset: 0x441CC48
    void set_CustomAttributeType(::System::Type* value);
    // public System.Void .ctor()
    // Offset: 0x441CC50
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InvocationContext* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::Conduit::InvocationContext::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InvocationContext*, creationType>()));
    }
  }; // Meta.Conduit.InvocationContext
  #pragma pack(pop)
  static check_size<sizeof(InvocationContext), 56 + sizeof(::System::Type*)> __Meta_Conduit_InvocationContextSizeCheck;
  static_assert(sizeof(InvocationContext) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::Conduit::InvocationContext::get_Type
// Il2CppName: get_Type
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (Meta::Conduit::InvocationContext::*)()>(&Meta::Conduit::InvocationContext::get_Type)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::InvocationContext*), "get_Type", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::InvocationContext::set_Type
// Il2CppName: set_Type
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Conduit::InvocationContext::*)(::System::Type*)>(&Meta::Conduit::InvocationContext::set_Type)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::InvocationContext*), "set_Type", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::InvocationContext::get_MethodInfo
// Il2CppName: get_MethodInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Reflection::MethodInfo* (Meta::Conduit::InvocationContext::*)()>(&Meta::Conduit::InvocationContext::get_MethodInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::InvocationContext*), "get_MethodInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::InvocationContext::set_MethodInfo
// Il2CppName: set_MethodInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Conduit::InvocationContext::*)(::System::Reflection::MethodInfo*)>(&Meta::Conduit::InvocationContext::set_MethodInfo)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Reflection", "MethodInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::InvocationContext*), "set_MethodInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::InvocationContext::get_MinConfidence
// Il2CppName: get_MinConfidence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Meta::Conduit::InvocationContext::*)()>(&Meta::Conduit::InvocationContext::get_MinConfidence)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::InvocationContext*), "get_MinConfidence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::InvocationContext::set_MinConfidence
// Il2CppName: set_MinConfidence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Conduit::InvocationContext::*)(float)>(&Meta::Conduit::InvocationContext::set_MinConfidence)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::InvocationContext*), "set_MinConfidence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::InvocationContext::get_MaxConfidence
// Il2CppName: get_MaxConfidence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Meta::Conduit::InvocationContext::*)()>(&Meta::Conduit::InvocationContext::get_MaxConfidence)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::InvocationContext*), "get_MaxConfidence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::InvocationContext::set_MaxConfidence
// Il2CppName: set_MaxConfidence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Conduit::InvocationContext::*)(float)>(&Meta::Conduit::InvocationContext::set_MaxConfidence)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::InvocationContext*), "set_MaxConfidence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::InvocationContext::get_ValidatePartial
// Il2CppName: get_ValidatePartial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::Conduit::InvocationContext::*)()>(&Meta::Conduit::InvocationContext::get_ValidatePartial)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::InvocationContext*), "get_ValidatePartial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::InvocationContext::set_ValidatePartial
// Il2CppName: set_ValidatePartial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Conduit::InvocationContext::*)(bool)>(&Meta::Conduit::InvocationContext::set_ValidatePartial)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::InvocationContext*), "set_ValidatePartial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::InvocationContext::get_ParameterMap
// Il2CppName: get_ParameterMap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* (Meta::Conduit::InvocationContext::*)()>(&Meta::Conduit::InvocationContext::get_ParameterMap)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::InvocationContext*), "get_ParameterMap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::InvocationContext::set_ParameterMap
// Il2CppName: set_ParameterMap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Conduit::InvocationContext::*)(::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&Meta::Conduit::InvocationContext::set_ParameterMap)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::InvocationContext*), "set_ParameterMap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::InvocationContext::get_CustomAttributeType
// Il2CppName: get_CustomAttributeType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (Meta::Conduit::InvocationContext::*)()>(&Meta::Conduit::InvocationContext::get_CustomAttributeType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::InvocationContext*), "get_CustomAttributeType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::InvocationContext::set_CustomAttributeType
// Il2CppName: set_CustomAttributeType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::Conduit::InvocationContext::*)(::System::Type*)>(&Meta::Conduit::InvocationContext::set_CustomAttributeType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::Conduit::InvocationContext*), "set_CustomAttributeType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::Conduit::InvocationContext::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
