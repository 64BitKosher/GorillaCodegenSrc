// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Meta.WitAi.Data.RingBuffer`1
#include "Meta/WitAi/Data/RingBuffer_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Meta::WitAi::Data
namespace Meta::WitAi::Data {
  // Forward declaring type: AudioBufferConfiguration
  class AudioBufferConfiguration;
  // Forward declaring type: AudioEncoding
  class AudioEncoding;
}
// Forward declaring namespace: Meta::WitAi::Events
namespace Meta::WitAi::Events {
  // Forward declaring type: AudioBufferEvents
  class AudioBufferEvents;
}
// Forward declaring namespace: Meta::WitAi::Interfaces
namespace Meta::WitAi::Interfaces {
  // Forward declaring type: IAudioInputSource
  class IAudioInputSource;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Component because it is already included!
}
// Completed forward declares
// Type namespace: Meta.WitAi.Data
namespace Meta::WitAi::Data {
  // Forward declaring type: AudioBuffer
  class AudioBuffer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::WitAi::Data::AudioBuffer);
DEFINE_IL2CPP_ARG_TYPE(::Meta::WitAi::Data::AudioBuffer*, "Meta.WitAi.Data", "AudioBuffer");
// Type namespace: Meta.WitAi.Data
namespace Meta::WitAi::Data {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: Meta.WitAi.Data.AudioBuffer
  // [TokenAttribute] Offset: FFFFFFFF
  class AudioBuffer : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::Meta::WitAi::Data::AudioBuffer::$WaitForMicToStart$d__30
    class $WaitForMicToStart$d__30;
    public:
    // private System.Boolean alwaysRecording
    // Size: 0x1
    // Offset: 0x20
    bool alwaysRecording;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: alwaysRecording and: audioBufferConfiguration
    char __padding0[0x7] = {};
    // private Meta.WitAi.Data.AudioBufferConfiguration audioBufferConfiguration
    // Size: 0x8
    // Offset: 0x28
    ::Meta::WitAi::Data::AudioBufferConfiguration* audioBufferConfiguration;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::Data::AudioBufferConfiguration*) == 0x8);
    // private Meta.WitAi.Events.AudioBufferEvents events
    // Size: 0x8
    // Offset: 0x30
    ::Meta::WitAi::Events::AudioBufferEvents* events;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::Events::AudioBufferEvents*) == 0x8);
    // private Meta.WitAi.Interfaces.IAudioInputSource _micInput
    // Size: 0x8
    // Offset: 0x38
    ::Meta::WitAi::Interfaces::IAudioInputSource* micInput;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::Interfaces::IAudioInputSource*) == 0x8);
    // private Meta.WitAi.Data.RingBuffer`1<System.Byte> _micDataBuffer
    // Size: 0x8
    // Offset: 0x40
    ::Meta::WitAi::Data::RingBuffer_1<uint8_t>* micDataBuffer;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::Data::RingBuffer_1<uint8_t>*) == 0x8);
    // private System.Byte[] _byteDataBuffer
    // Size: 0x8
    // Offset: 0x48
    ::ArrayW<uint8_t> byteDataBuffer;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private System.Collections.Generic.HashSet`1<UnityEngine.Component> _waitingRecorders
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::Generic::HashSet_1<::UnityEngine::Component*>* waitingRecorders;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<::UnityEngine::Component*>*) == 0x8);
    // private System.Collections.Generic.HashSet`1<UnityEngine.Component> _activeRecorders
    // Size: 0x8
    // Offset: 0x58
    ::System::Collections::Generic::HashSet_1<::UnityEngine::Component*>* activeRecorders;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<::UnityEngine::Component*>*) == 0x8);
    public:
    // Get static field: static private Meta.WitAi.Data.AudioBuffer _instance
    static ::Meta::WitAi::Data::AudioBuffer* _get__instance();
    // Set static field: static private Meta.WitAi.Data.AudioBuffer _instance
    static void _set__instance(::Meta::WitAi::Data::AudioBuffer* value);
    // Get instance field reference: private System.Boolean alwaysRecording
    [[deprecated("Use field access instead!")]] bool& dyn_alwaysRecording();
    // Get instance field reference: private Meta.WitAi.Data.AudioBufferConfiguration audioBufferConfiguration
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::Data::AudioBufferConfiguration*& dyn_audioBufferConfiguration();
    // Get instance field reference: private Meta.WitAi.Events.AudioBufferEvents events
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::Events::AudioBufferEvents*& dyn_events();
    // Get instance field reference: private Meta.WitAi.Interfaces.IAudioInputSource _micInput
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::Interfaces::IAudioInputSource*& dyn__micInput();
    // Get instance field reference: private Meta.WitAi.Data.RingBuffer`1<System.Byte> _micDataBuffer
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::Data::RingBuffer_1<uint8_t>*& dyn__micDataBuffer();
    // Get instance field reference: private System.Byte[] _byteDataBuffer
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn__byteDataBuffer();
    // Get instance field reference: private System.Collections.Generic.HashSet`1<UnityEngine.Component> _waitingRecorders
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::UnityEngine::Component*>*& dyn__waitingRecorders();
    // Get instance field reference: private System.Collections.Generic.HashSet`1<UnityEngine.Component> _activeRecorders
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::UnityEngine::Component*>*& dyn__activeRecorders();
    // static public Meta.WitAi.Data.AudioBuffer get_Instance()
    // Offset: 0x4464578
    static ::Meta::WitAi::Data::AudioBuffer* get_Instance();
    // public Meta.WitAi.Events.AudioBufferEvents get_Events()
    // Offset: 0x4464714
    ::Meta::WitAi::Events::AudioBufferEvents* get_Events();
    // public Meta.WitAi.Interfaces.IAudioInputSource get_MicInput()
    // Offset: 0x446471C
    ::Meta::WitAi::Interfaces::IAudioInputSource* get_MicInput();
    // public System.Boolean IsRecording(UnityEngine.Component component)
    // Offset: 0x44648AC
    bool IsRecording(::UnityEngine::Component* component);
    // public System.Boolean get_IsInputAvailable()
    // Offset: 0x446492C
    bool get_IsInputAvailable();
    // public System.Void CheckForInput()
    // Offset: 0x44649F0
    void CheckForInput();
    // public Meta.WitAi.Data.AudioEncoding get_AudioEncoding()
    // Offset: 0x4464A9C
    ::Meta::WitAi::Data::AudioEncoding* get_AudioEncoding();
    // private System.Void Awake()
    // Offset: 0x4464B48
    void Awake();
    // private System.Void OnEnable()
    // Offset: 0x4464C94
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0x4464DE8
    void OnDisable();
    // private System.Void OnMicSampleReady(System.Int32 sampleCount, System.Single[] sample, System.Single levelMax)
    // Offset: 0x4465108
    void OnMicSampleReady(int sampleCount, ::ArrayW<float> sample, float levelMax);
    // private System.Void InitializeMicDataBuffer()
    // Offset: 0x4464BA8
    void InitializeMicDataBuffer();
    // private System.Void Convert(System.Single[] samples)
    // Offset: 0x4465328
    void Convert(::ArrayW<float> samples);
    // public Meta.WitAi.Data.RingBuffer`1/Marker<System.Byte> CreateMarker()
    // Offset: 0x44652D4
    typename ::Meta::WitAi::Data::RingBuffer_1<uint8_t>::Marker* CreateMarker();
    // public Meta.WitAi.Data.RingBuffer`1/Marker<System.Byte> CreateMarker(System.Single offset)
    // Offset: 0x446541C
    typename ::Meta::WitAi::Data::RingBuffer_1<uint8_t>::Marker* CreateMarker(float offset);
    // public System.Void StartRecording(UnityEngine.Component component)
    // Offset: 0x4464DC8
    void StartRecording(::UnityEngine::Component* component);
    // private System.Collections.IEnumerator WaitForMicToStart(UnityEngine.Component component)
    // Offset: 0x44654AC
    ::System::Collections::IEnumerator* WaitForMicToStart(::UnityEngine::Component* component);
    // public System.Void StopRecording(UnityEngine.Component component)
    // Offset: 0x4464F0C
    void StopRecording(::UnityEngine::Component* component);
    // public System.Void .ctor()
    // Offset: 0x446555C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AudioBuffer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Data::AudioBuffer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AudioBuffer*, creationType>()));
    }
    // private System.Boolean <WaitForMicToStart>b__30_0()
    // Offset: 0x44656A0
    bool $WaitForMicToStart$b__30_0();
  }; // Meta.WitAi.Data.AudioBuffer
  #pragma pack(pop)
  static check_size<sizeof(AudioBuffer), 88 + sizeof(::System::Collections::Generic::HashSet_1<::UnityEngine::Component*>*)> __Meta_WitAi_Data_AudioBufferSizeCheck;
  static_assert(sizeof(AudioBuffer) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::WitAi::Data::AudioBuffer::get_Instance
// Il2CppName: get_Instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Data::AudioBuffer* (*)()>(&Meta::WitAi::Data::AudioBuffer::get_Instance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Data::AudioBuffer*), "get_Instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Data::AudioBuffer::get_Events
// Il2CppName: get_Events
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Events::AudioBufferEvents* (Meta::WitAi::Data::AudioBuffer::*)()>(&Meta::WitAi::Data::AudioBuffer::get_Events)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Data::AudioBuffer*), "get_Events", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Data::AudioBuffer::get_MicInput
// Il2CppName: get_MicInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Interfaces::IAudioInputSource* (Meta::WitAi::Data::AudioBuffer::*)()>(&Meta::WitAi::Data::AudioBuffer::get_MicInput)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Data::AudioBuffer*), "get_MicInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Data::AudioBuffer::IsRecording
// Il2CppName: IsRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::Data::AudioBuffer::*)(::UnityEngine::Component*)>(&Meta::WitAi::Data::AudioBuffer::IsRecording)> {
  static const MethodInfo* get() {
    static auto* component = &::il2cpp_utils::GetClassFromName("UnityEngine", "Component")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Data::AudioBuffer*), "IsRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{component});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Data::AudioBuffer::get_IsInputAvailable
// Il2CppName: get_IsInputAvailable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::Data::AudioBuffer::*)()>(&Meta::WitAi::Data::AudioBuffer::get_IsInputAvailable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Data::AudioBuffer*), "get_IsInputAvailable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Data::AudioBuffer::CheckForInput
// Il2CppName: CheckForInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Data::AudioBuffer::*)()>(&Meta::WitAi::Data::AudioBuffer::CheckForInput)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Data::AudioBuffer*), "CheckForInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Data::AudioBuffer::get_AudioEncoding
// Il2CppName: get_AudioEncoding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Data::AudioEncoding* (Meta::WitAi::Data::AudioBuffer::*)()>(&Meta::WitAi::Data::AudioBuffer::get_AudioEncoding)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Data::AudioBuffer*), "get_AudioEncoding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Data::AudioBuffer::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Data::AudioBuffer::*)()>(&Meta::WitAi::Data::AudioBuffer::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Data::AudioBuffer*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Data::AudioBuffer::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Data::AudioBuffer::*)()>(&Meta::WitAi::Data::AudioBuffer::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Data::AudioBuffer*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Data::AudioBuffer::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Data::AudioBuffer::*)()>(&Meta::WitAi::Data::AudioBuffer::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Data::AudioBuffer*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Data::AudioBuffer::OnMicSampleReady
// Il2CppName: OnMicSampleReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Data::AudioBuffer::*)(int, ::ArrayW<float>, float)>(&Meta::WitAi::Data::AudioBuffer::OnMicSampleReady)> {
  static const MethodInfo* get() {
    static auto* sampleCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* sample = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* levelMax = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Data::AudioBuffer*), "OnMicSampleReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sampleCount, sample, levelMax});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Data::AudioBuffer::InitializeMicDataBuffer
// Il2CppName: InitializeMicDataBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Data::AudioBuffer::*)()>(&Meta::WitAi::Data::AudioBuffer::InitializeMicDataBuffer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Data::AudioBuffer*), "InitializeMicDataBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Data::AudioBuffer::Convert
// Il2CppName: Convert
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Data::AudioBuffer::*)(::ArrayW<float>)>(&Meta::WitAi::Data::AudioBuffer::Convert)> {
  static const MethodInfo* get() {
    static auto* samples = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Data::AudioBuffer*), "Convert", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{samples});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Data::AudioBuffer::CreateMarker
// Il2CppName: CreateMarker
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<typename ::Meta::WitAi::Data::RingBuffer_1<uint8_t>::Marker* (Meta::WitAi::Data::AudioBuffer::*)()>(&Meta::WitAi::Data::AudioBuffer::CreateMarker)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Data::AudioBuffer*), "CreateMarker", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Data::AudioBuffer::CreateMarker
// Il2CppName: CreateMarker
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<typename ::Meta::WitAi::Data::RingBuffer_1<uint8_t>::Marker* (Meta::WitAi::Data::AudioBuffer::*)(float)>(&Meta::WitAi::Data::AudioBuffer::CreateMarker)> {
  static const MethodInfo* get() {
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Data::AudioBuffer*), "CreateMarker", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{offset});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Data::AudioBuffer::StartRecording
// Il2CppName: StartRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Data::AudioBuffer::*)(::UnityEngine::Component*)>(&Meta::WitAi::Data::AudioBuffer::StartRecording)> {
  static const MethodInfo* get() {
    static auto* component = &::il2cpp_utils::GetClassFromName("UnityEngine", "Component")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Data::AudioBuffer*), "StartRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{component});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Data::AudioBuffer::WaitForMicToStart
// Il2CppName: WaitForMicToStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (Meta::WitAi::Data::AudioBuffer::*)(::UnityEngine::Component*)>(&Meta::WitAi::Data::AudioBuffer::WaitForMicToStart)> {
  static const MethodInfo* get() {
    static auto* component = &::il2cpp_utils::GetClassFromName("UnityEngine", "Component")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Data::AudioBuffer*), "WaitForMicToStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{component});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Data::AudioBuffer::StopRecording
// Il2CppName: StopRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Data::AudioBuffer::*)(::UnityEngine::Component*)>(&Meta::WitAi::Data::AudioBuffer::StopRecording)> {
  static const MethodInfo* get() {
    static auto* component = &::il2cpp_utils::GetClassFromName("UnityEngine", "Component")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Data::AudioBuffer*), "StopRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{component});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Data::AudioBuffer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Meta::WitAi::Data::AudioBuffer::$WaitForMicToStart$b__30_0
// Il2CppName: <WaitForMicToStart>b__30_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::Data::AudioBuffer::*)()>(&Meta::WitAi::Data::AudioBuffer::$WaitForMicToStart$b__30_0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Data::AudioBuffer*), "<WaitForMicToStart>b__30_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
