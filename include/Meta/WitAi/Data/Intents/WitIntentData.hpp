// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Meta::WitAi::Json
namespace Meta::WitAi::Json {
  // Forward declaring type: WitResponseNode
  class WitResponseNode;
}
// Completed forward declares
// Type namespace: Meta.WitAi.Data.Intents
namespace Meta::WitAi::Data::Intents {
  // Forward declaring type: WitIntentData
  class WitIntentData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::WitAi::Data::Intents::WitIntentData);
DEFINE_IL2CPP_ARG_TYPE(::Meta::WitAi::Data::Intents::WitIntentData*, "Meta.WitAi.Data.Intents", "WitIntentData");
// Type namespace: Meta.WitAi.Data.Intents
namespace Meta::WitAi::Data::Intents {
  // Size: 0x2C
  #pragma pack(push, 1)
  // Autogenerated type: Meta.WitAi.Data.Intents.WitIntentData
  // [TokenAttribute] Offset: FFFFFFFF
  class WitIntentData : public ::Il2CppObject {
    public:
    public:
    // public Meta.WitAi.Json.WitResponseNode responseNode
    // Size: 0x8
    // Offset: 0x10
    ::Meta::WitAi::Json::WitResponseNode* responseNode;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::Json::WitResponseNode*) == 0x8);
    // public System.String id
    // Size: 0x8
    // Offset: 0x18
    ::StringW id;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String name
    // Size: 0x8
    // Offset: 0x20
    ::StringW name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Single confidence
    // Size: 0x4
    // Offset: 0x28
    float confidence;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: public Meta.WitAi.Json.WitResponseNode responseNode
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::Json::WitResponseNode*& dyn_responseNode();
    // Get instance field reference: public System.String id
    [[deprecated("Use field access instead!")]] ::StringW& dyn_id();
    // Get instance field reference: public System.String name
    [[deprecated("Use field access instead!")]] ::StringW& dyn_name();
    // Get instance field reference: public System.Single confidence
    [[deprecated("Use field access instead!")]] float& dyn_confidence();
    // public System.Void .ctor()
    // Offset: 0x4465F64
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WitIntentData* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Data::Intents::WitIntentData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WitIntentData*, creationType>()));
    }
    // public System.Void .ctor(Meta.WitAi.Json.WitResponseNode node)
    // Offset: 0x4465F6C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WitIntentData* New_ctor(::Meta::WitAi::Json::WitResponseNode* node) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Data::Intents::WitIntentData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WitIntentData*, creationType>(node)));
    }
    // public Meta.WitAi.Data.Intents.WitIntentData FromIntentWitResponseNode(Meta.WitAi.Json.WitResponseNode node)
    // Offset: 0x4465F98
    ::Meta::WitAi::Data::Intents::WitIntentData* FromIntentWitResponseNode(::Meta::WitAi::Json::WitResponseNode* node);
  }; // Meta.WitAi.Data.Intents.WitIntentData
  #pragma pack(pop)
  static check_size<sizeof(WitIntentData), 40 + sizeof(float)> __Meta_WitAi_Data_Intents_WitIntentDataSizeCheck;
  static_assert(sizeof(WitIntentData) == 0x2C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::WitAi::Data::Intents::WitIntentData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Meta::WitAi::Data::Intents::WitIntentData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Meta::WitAi::Data::Intents::WitIntentData::FromIntentWitResponseNode
// Il2CppName: FromIntentWitResponseNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Data::Intents::WitIntentData* (Meta::WitAi::Data::Intents::WitIntentData::*)(::Meta::WitAi::Json::WitResponseNode*)>(&Meta::WitAi::Data::Intents::WitIntentData::FromIntentWitResponseNode)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Json", "WitResponseNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Data::Intents::WitIntentData*), "FromIntentWitResponseNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
