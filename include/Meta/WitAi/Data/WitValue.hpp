// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Meta::WitAi
namespace Meta::WitAi {
  // Forward declaring type: WitResponseReference
  class WitResponseReference;
}
// Forward declaring namespace: Meta::WitAi::Json
namespace Meta::WitAi::Json {
  // Forward declaring type: WitResponseNode
  class WitResponseNode;
}
// Completed forward declares
// Type namespace: Meta.WitAi.Data
namespace Meta::WitAi::Data {
  // Forward declaring type: WitValue
  class WitValue;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::WitAi::Data::WitValue);
DEFINE_IL2CPP_ARG_TYPE(::Meta::WitAi::Data::WitValue*, "Meta.WitAi.Data", "WitValue");
// Type namespace: Meta.WitAi.Data
namespace Meta::WitAi::Data {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Meta.WitAi.Data.WitValue
  // [TokenAttribute] Offset: FFFFFFFF
  class WitValue : public ::UnityEngine::ScriptableObject {
    public:
    public:
    // public System.String path
    // Size: 0x8
    // Offset: 0x18
    ::StringW path;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private Meta.WitAi.WitResponseReference reference
    // Size: 0x8
    // Offset: 0x20
    ::Meta::WitAi::WitResponseReference* reference;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::WitResponseReference*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.String path
    [[deprecated("Use field access instead!")]] ::StringW& dyn_path();
    // Get instance field reference: private Meta.WitAi.WitResponseReference reference
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::WitResponseReference*& dyn_reference();
    // public Meta.WitAi.WitResponseReference get_Reference()
    // Offset: 0x4465C74
    ::Meta::WitAi::WitResponseReference* get_Reference();
    // public System.Object GetValue(Meta.WitAi.Json.WitResponseNode response)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Il2CppObject* GetValue(::Meta::WitAi::Json::WitResponseNode* response);
    // public System.Boolean Equals(Meta.WitAi.Json.WitResponseNode response, System.Object value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool Equals(::Meta::WitAi::Json::WitResponseNode* response, ::Il2CppObject* value);
    // public System.String ToString(Meta.WitAi.Json.WitResponseNode response)
    // Offset: 0x4465F3C
    ::StringW ToString(::Meta::WitAi::Json::WitResponseNode* response);
    // protected System.Void .ctor()
    // Offset: 0x4465CCC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WitValue* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Data::WitValue::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WitValue*, creationType>()));
    }
  }; // Meta.WitAi.Data.WitValue
  #pragma pack(pop)
  static check_size<sizeof(WitValue), 32 + sizeof(::Meta::WitAi::WitResponseReference*)> __Meta_WitAi_Data_WitValueSizeCheck;
  static_assert(sizeof(WitValue) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::WitAi::Data::WitValue::get_Reference
// Il2CppName: get_Reference
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::WitResponseReference* (Meta::WitAi::Data::WitValue::*)()>(&Meta::WitAi::Data::WitValue::get_Reference)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Data::WitValue*), "get_Reference", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Data::WitValue::GetValue
// Il2CppName: GetValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (Meta::WitAi::Data::WitValue::*)(::Meta::WitAi::Json::WitResponseNode*)>(&Meta::WitAi::Data::WitValue::GetValue)> {
  static const MethodInfo* get() {
    static auto* response = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Json", "WitResponseNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Data::WitValue*), "GetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{response});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Data::WitValue::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::Data::WitValue::*)(::Meta::WitAi::Json::WitResponseNode*, ::Il2CppObject*)>(&Meta::WitAi::Data::WitValue::Equals)> {
  static const MethodInfo* get() {
    static auto* response = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Json", "WitResponseNode")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Data::WitValue*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{response, value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Data::WitValue::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Meta::WitAi::Data::WitValue::*)(::Meta::WitAi::Json::WitResponseNode*)>(&Meta::WitAi::Data::WitValue::ToString)> {
  static const MethodInfo* get() {
    static auto* response = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Json", "WitResponseNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Data::WitValue*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{response});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Data::WitValue::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
