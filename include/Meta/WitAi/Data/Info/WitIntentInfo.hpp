// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Meta.WitAi.Data.Info.WitIntentEntityInfo
#include "Meta/WitAi/Data/Info/WitIntentEntityInfo.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: Meta.WitAi.Data.Info
namespace Meta::WitAi::Data::Info {
  // Forward declaring type: WitIntentInfo
  struct WitIntentInfo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Meta::WitAi::Data::Info::WitIntentInfo, "Meta.WitAi.Data.Info", "WitIntentInfo");
// Type namespace: Meta.WitAi.Data.Info
namespace Meta::WitAi::Data::Info {
  // Size: 0x18
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Meta.WitAi.Data.Info.WitIntentInfo
  // [TokenAttribute] Offset: FFFFFFFF
  struct WitIntentInfo/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.String id
    // Size: 0x8
    // Offset: 0x0
    ::StringW id;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String name
    // Size: 0x8
    // Offset: 0x8
    ::StringW name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public Meta.WitAi.Data.Info.WitIntentEntityInfo[] entities
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<::Meta::WitAi::Data::Info::WitIntentEntityInfo> entities;
    // Field size check
    static_assert(sizeof(::ArrayW<::Meta::WitAi::Data::Info::WitIntentEntityInfo>) == 0x8);
    public:
    // Creating value type constructor for type: WitIntentInfo
    constexpr WitIntentInfo(::StringW id_ = {}, ::StringW name_ = {}, ::ArrayW<::Meta::WitAi::Data::Info::WitIntentEntityInfo> entities_ = ::ArrayW<::Meta::WitAi::Data::Info::WitIntentEntityInfo>(static_cast<void*>(nullptr))) noexcept : id{id_}, name{name_}, entities{entities_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.String id
    [[deprecated("Use field access instead!")]] ::StringW& dyn_id();
    // Get instance field reference: public System.String name
    [[deprecated("Use field access instead!")]] ::StringW& dyn_name();
    // Get instance field reference: public Meta.WitAi.Data.Info.WitIntentEntityInfo[] entities
    [[deprecated("Use field access instead!")]] ::ArrayW<::Meta::WitAi::Data::Info::WitIntentEntityInfo>& dyn_entities();
  }; // Meta.WitAi.Data.Info.WitIntentInfo
  #pragma pack(pop)
  static check_size<sizeof(WitIntentInfo), 16 + sizeof(::ArrayW<::Meta::WitAi::Data::Info::WitIntentEntityInfo>)> __Meta_WitAi_Data_Info_WitIntentInfoSizeCheck;
  static_assert(sizeof(WitIntentInfo) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
