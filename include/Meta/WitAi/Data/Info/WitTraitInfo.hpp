// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Meta.WitAi.Data.Info.WitTraitValueInfo
#include "Meta/WitAi/Data/Info/WitTraitValueInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: Meta.WitAi.Data.Info
namespace Meta::WitAi::Data::Info {
  // Forward declaring type: WitTraitInfo
  class WitTraitInfo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::WitAi::Data::Info::WitTraitInfo);
DEFINE_IL2CPP_ARG_TYPE(::Meta::WitAi::Data::Info::WitTraitInfo*, "Meta.WitAi.Data.Info", "WitTraitInfo");
// Type namespace: Meta.WitAi.Data.Info
namespace Meta::WitAi::Data::Info {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Meta.WitAi.Data.Info.WitTraitInfo
  // [TokenAttribute] Offset: FFFFFFFF
  class WitTraitInfo : public ::Il2CppObject {
    public:
    public:
    // public System.String name
    // Size: 0x8
    // Offset: 0x10
    ::StringW name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String id
    // Size: 0x8
    // Offset: 0x18
    ::StringW id;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public Meta.WitAi.Data.Info.WitTraitValueInfo[] values
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::Meta::WitAi::Data::Info::WitTraitValueInfo> values;
    // Field size check
    static_assert(sizeof(::ArrayW<::Meta::WitAi::Data::Info::WitTraitValueInfo>) == 0x8);
    public:
    // Get instance field reference: public System.String name
    [[deprecated("Use field access instead!")]] ::StringW& dyn_name();
    // Get instance field reference: public System.String id
    [[deprecated("Use field access instead!")]] ::StringW& dyn_id();
    // Get instance field reference: public Meta.WitAi.Data.Info.WitTraitValueInfo[] values
    [[deprecated("Use field access instead!")]] ::ArrayW<::Meta::WitAi::Data::Info::WitTraitValueInfo>& dyn_values();
    // public System.Void .ctor()
    // Offset: 0x4451754
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WitTraitInfo* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Data::Info::WitTraitInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WitTraitInfo*, creationType>()));
    }
  }; // Meta.WitAi.Data.Info.WitTraitInfo
  #pragma pack(pop)
  static check_size<sizeof(WitTraitInfo), 32 + sizeof(::ArrayW<::Meta::WitAi::Data::Info::WitTraitValueInfo>)> __Meta_WitAi_Data_Info_WitTraitInfoSizeCheck;
  static_assert(sizeof(WitTraitInfo) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::WitAi::Data::Info::WitTraitInfo::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
