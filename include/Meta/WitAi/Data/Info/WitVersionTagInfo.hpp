// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: Meta.WitAi.Data.Info
namespace Meta::WitAi::Data::Info {
  // Forward declaring type: WitVersionTagInfo
  struct WitVersionTagInfo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Meta::WitAi::Data::Info::WitVersionTagInfo, "Meta.WitAi.Data.Info", "WitVersionTagInfo");
// Type namespace: Meta.WitAi.Data.Info
namespace Meta::WitAi::Data::Info {
  // Size: 0x20
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Meta.WitAi.Data.Info.WitVersionTagInfo
  // [TokenAttribute] Offset: FFFFFFFF
  struct WitVersionTagInfo/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.String name
    // Size: 0x8
    // Offset: 0x0
    ::StringW name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String created_at
    // Size: 0x8
    // Offset: 0x8
    ::StringW created_at;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String updated_at
    // Size: 0x8
    // Offset: 0x10
    ::StringW updated_at;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String desc
    // Size: 0x8
    // Offset: 0x18
    ::StringW desc;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Creating value type constructor for type: WitVersionTagInfo
    constexpr WitVersionTagInfo(::StringW name_ = {}, ::StringW created_at_ = {}, ::StringW updated_at_ = {}, ::StringW desc_ = {}) noexcept : name{name_}, created_at{created_at_}, updated_at{updated_at_}, desc{desc_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.String name
    [[deprecated("Use field access instead!")]] ::StringW& dyn_name();
    // Get instance field reference: public System.String created_at
    [[deprecated("Use field access instead!")]] ::StringW& dyn_created_at();
    // Get instance field reference: public System.String updated_at
    [[deprecated("Use field access instead!")]] ::StringW& dyn_updated_at();
    // Get instance field reference: public System.String desc
    [[deprecated("Use field access instead!")]] ::StringW& dyn_desc();
    // public System.Void .ctor(System.String name, System.String createdAt, System.String updatedAt, System.String description)
    // Offset: 0x445175C
    // ABORTED: conflicts with another method.  WitVersionTagInfo(::StringW name, ::StringW createdAt, ::StringW updatedAt, ::StringW description);
  }; // Meta.WitAi.Data.Info.WitVersionTagInfo
  #pragma pack(pop)
  static check_size<sizeof(WitVersionTagInfo), 24 + sizeof(::StringW)> __Meta_WitAi_Data_Info_WitVersionTagInfoSizeCheck;
  static_assert(sizeof(WitVersionTagInfo) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::WitAi::Data::Info::WitVersionTagInfo::WitVersionTagInfo
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
