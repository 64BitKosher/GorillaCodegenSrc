// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: Meta.WitAi.Data.Info
namespace Meta::WitAi::Data::Info {
  // Forward declaring type: WitVoiceInfo
  struct WitVoiceInfo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Meta::WitAi::Data::Info::WitVoiceInfo, "Meta.WitAi.Data.Info", "WitVoiceInfo");
// Type namespace: Meta.WitAi.Data.Info
namespace Meta::WitAi::Data::Info {
  // Size: 0x20
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Meta.WitAi.Data.Info.WitVoiceInfo
  // [TokenAttribute] Offset: FFFFFFFF
  struct WitVoiceInfo/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.String name
    // Size: 0x8
    // Offset: 0x0
    ::StringW name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String locale
    // Size: 0x8
    // Offset: 0x8
    ::StringW locale;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String gender
    // Size: 0x8
    // Offset: 0x10
    ::StringW gender;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String[] styles
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::StringW> styles;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    public:
    // Creating value type constructor for type: WitVoiceInfo
    constexpr WitVoiceInfo(::StringW name_ = {}, ::StringW locale_ = {}, ::StringW gender_ = {}, ::ArrayW<::StringW> styles_ = ::ArrayW<::StringW>(static_cast<void*>(nullptr))) noexcept : name{name_}, locale{locale_}, gender{gender_}, styles{styles_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.String name
    [[deprecated("Use field access instead!")]] ::StringW& dyn_name();
    // Get instance field reference: public System.String locale
    [[deprecated("Use field access instead!")]] ::StringW& dyn_locale();
    // Get instance field reference: public System.String gender
    [[deprecated("Use field access instead!")]] ::StringW& dyn_gender();
    // Get instance field reference: public System.String[] styles
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn_styles();
  }; // Meta.WitAi.Data.Info.WitVoiceInfo
  #pragma pack(pop)
  static check_size<sizeof(WitVoiceInfo), 24 + sizeof(::ArrayW<::StringW>)> __Meta_WitAi_Data_Info_WitVoiceInfoSizeCheck;
  static_assert(sizeof(WitVoiceInfo) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
