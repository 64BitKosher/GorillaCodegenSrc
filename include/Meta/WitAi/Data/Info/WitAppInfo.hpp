// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Meta.WitAi.Data.Info.WitAppTrainingStatus
#include "Meta/WitAi/Data/Info/WitAppTrainingStatus.hpp"
// Including type: Meta.WitAi.Data.Info.WitIntentInfo
#include "Meta/WitAi/Data/Info/WitIntentInfo.hpp"
// Including type: Meta.WitAi.Data.Info.WitEntityInfo
#include "Meta/WitAi/Data/Info/WitEntityInfo.hpp"
// Including type: Meta.WitAi.Data.Info.WitVersionTagInfo
#include "Meta/WitAi/Data/Info/WitVersionTagInfo.hpp"
// Including type: Meta.WitAi.Data.Info.WitVoiceInfo
#include "Meta/WitAi/Data/Info/WitVoiceInfo.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Meta::WitAi::Data::Info
namespace Meta::WitAi::Data::Info {
  // Forward declaring type: WitTraitInfo
  class WitTraitInfo;
}
// Completed forward declares
// Type namespace: Meta.WitAi.Data.Info
namespace Meta::WitAi::Data::Info {
  // Forward declaring type: WitAppInfo
  struct WitAppInfo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Meta::WitAi::Data::Info::WitAppInfo, "Meta.WitAi.Data.Info", "WitAppInfo");
// Type namespace: Meta.WitAi.Data.Info
namespace Meta::WitAi::Data::Info {
  // Size: 0x68
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Meta.WitAi.Data.Info.WitAppInfo
  // [TokenAttribute] Offset: FFFFFFFF
  struct WitAppInfo/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.String name
    // Size: 0x8
    // Offset: 0x0
    ::StringW name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String id
    // Size: 0x8
    // Offset: 0x8
    ::StringW id;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String lang
    // Size: 0x8
    // Offset: 0x10
    ::StringW lang;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Boolean isPrivate
    // Size: 0x1
    // Offset: 0x18
    bool isPrivate;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isPrivate and: createdAt
    char __padding3[0x7] = {};
    // public System.String createdAt
    // Size: 0x8
    // Offset: 0x20
    ::StringW createdAt;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public Meta.WitAi.Data.Info.WitAppTrainingStatus trainingStatus
    // Size: 0x4
    // Offset: 0x28
    ::Meta::WitAi::Data::Info::WitAppTrainingStatus trainingStatus;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::Data::Info::WitAppTrainingStatus) == 0x4);
    // public System.Int32 lastTrainDuration
    // Size: 0x4
    // Offset: 0x2C
    int lastTrainDuration;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.String lastTrainedAt
    // Size: 0x8
    // Offset: 0x30
    ::StringW lastTrainedAt;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String nextTrainAt
    // Size: 0x8
    // Offset: 0x38
    ::StringW nextTrainAt;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public Meta.WitAi.Data.Info.WitIntentInfo[] intents
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<::Meta::WitAi::Data::Info::WitIntentInfo> intents;
    // Field size check
    static_assert(sizeof(::ArrayW<::Meta::WitAi::Data::Info::WitIntentInfo>) == 0x8);
    // public Meta.WitAi.Data.Info.WitEntityInfo[] entities
    // Size: 0x8
    // Offset: 0x48
    ::ArrayW<::Meta::WitAi::Data::Info::WitEntityInfo> entities;
    // Field size check
    static_assert(sizeof(::ArrayW<::Meta::WitAi::Data::Info::WitEntityInfo>) == 0x8);
    // public Meta.WitAi.Data.Info.WitTraitInfo[] traits
    // Size: 0x8
    // Offset: 0x50
    ::ArrayW<::Meta::WitAi::Data::Info::WitTraitInfo*> traits;
    // Field size check
    static_assert(sizeof(::ArrayW<::Meta::WitAi::Data::Info::WitTraitInfo*>) == 0x8);
    // public Meta.WitAi.Data.Info.WitVersionTagInfo[] versionTags
    // Size: 0x8
    // Offset: 0x58
    ::ArrayW<::Meta::WitAi::Data::Info::WitVersionTagInfo> versionTags;
    // Field size check
    static_assert(sizeof(::ArrayW<::Meta::WitAi::Data::Info::WitVersionTagInfo>) == 0x8);
    // public Meta.WitAi.Data.Info.WitVoiceInfo[] voices
    // Size: 0x8
    // Offset: 0x60
    ::ArrayW<::Meta::WitAi::Data::Info::WitVoiceInfo> voices;
    // Field size check
    static_assert(sizeof(::ArrayW<::Meta::WitAi::Data::Info::WitVoiceInfo>) == 0x8);
    public:
    // Creating value type constructor for type: WitAppInfo
    constexpr WitAppInfo(::StringW name_ = {}, ::StringW id_ = {}, ::StringW lang_ = {}, bool isPrivate_ = {}, ::StringW createdAt_ = {}, ::Meta::WitAi::Data::Info::WitAppTrainingStatus trainingStatus_ = {}, int lastTrainDuration_ = {}, ::StringW lastTrainedAt_ = {}, ::StringW nextTrainAt_ = {}, ::ArrayW<::Meta::WitAi::Data::Info::WitIntentInfo> intents_ = ::ArrayW<::Meta::WitAi::Data::Info::WitIntentInfo>(static_cast<void*>(nullptr)), ::ArrayW<::Meta::WitAi::Data::Info::WitEntityInfo> entities_ = ::ArrayW<::Meta::WitAi::Data::Info::WitEntityInfo>(static_cast<void*>(nullptr)), ::ArrayW<::Meta::WitAi::Data::Info::WitTraitInfo*> traits_ = ::ArrayW<::Meta::WitAi::Data::Info::WitTraitInfo*>(static_cast<void*>(nullptr)), ::ArrayW<::Meta::WitAi::Data::Info::WitVersionTagInfo> versionTags_ = ::ArrayW<::Meta::WitAi::Data::Info::WitVersionTagInfo>(static_cast<void*>(nullptr)), ::ArrayW<::Meta::WitAi::Data::Info::WitVoiceInfo> voices_ = ::ArrayW<::Meta::WitAi::Data::Info::WitVoiceInfo>(static_cast<void*>(nullptr))) noexcept : name{name_}, id{id_}, lang{lang_}, isPrivate{isPrivate_}, createdAt{createdAt_}, trainingStatus{trainingStatus_}, lastTrainDuration{lastTrainDuration_}, lastTrainedAt{lastTrainedAt_}, nextTrainAt{nextTrainAt_}, intents{intents_}, entities{entities_}, traits{traits_}, versionTags{versionTags_}, voices{voices_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.String name
    [[deprecated("Use field access instead!")]] ::StringW& dyn_name();
    // Get instance field reference: public System.String id
    [[deprecated("Use field access instead!")]] ::StringW& dyn_id();
    // Get instance field reference: public System.String lang
    [[deprecated("Use field access instead!")]] ::StringW& dyn_lang();
    // Get instance field reference: public System.Boolean isPrivate
    [[deprecated("Use field access instead!")]] bool& dyn_isPrivate();
    // Get instance field reference: public System.String createdAt
    [[deprecated("Use field access instead!")]] ::StringW& dyn_createdAt();
    // Get instance field reference: public Meta.WitAi.Data.Info.WitAppTrainingStatus trainingStatus
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::Data::Info::WitAppTrainingStatus& dyn_trainingStatus();
    // Get instance field reference: public System.Int32 lastTrainDuration
    [[deprecated("Use field access instead!")]] int& dyn_lastTrainDuration();
    // Get instance field reference: public System.String lastTrainedAt
    [[deprecated("Use field access instead!")]] ::StringW& dyn_lastTrainedAt();
    // Get instance field reference: public System.String nextTrainAt
    [[deprecated("Use field access instead!")]] ::StringW& dyn_nextTrainAt();
    // Get instance field reference: public Meta.WitAi.Data.Info.WitIntentInfo[] intents
    [[deprecated("Use field access instead!")]] ::ArrayW<::Meta::WitAi::Data::Info::WitIntentInfo>& dyn_intents();
    // Get instance field reference: public Meta.WitAi.Data.Info.WitEntityInfo[] entities
    [[deprecated("Use field access instead!")]] ::ArrayW<::Meta::WitAi::Data::Info::WitEntityInfo>& dyn_entities();
    // Get instance field reference: public Meta.WitAi.Data.Info.WitTraitInfo[] traits
    [[deprecated("Use field access instead!")]] ::ArrayW<::Meta::WitAi::Data::Info::WitTraitInfo*>& dyn_traits();
    // Get instance field reference: public Meta.WitAi.Data.Info.WitVersionTagInfo[] versionTags
    [[deprecated("Use field access instead!")]] ::ArrayW<::Meta::WitAi::Data::Info::WitVersionTagInfo>& dyn_versionTags();
    // Get instance field reference: public Meta.WitAi.Data.Info.WitVoiceInfo[] voices
    [[deprecated("Use field access instead!")]] ::ArrayW<::Meta::WitAi::Data::Info::WitVoiceInfo>& dyn_voices();
  }; // Meta.WitAi.Data.Info.WitAppInfo
  #pragma pack(pop)
  static check_size<sizeof(WitAppInfo), 96 + sizeof(::ArrayW<::Meta::WitAi::Data::Info::WitVoiceInfo>)> __Meta_WitAi_Data_Info_WitAppInfoSizeCheck;
  static_assert(sizeof(WitAppInfo) == 0x68);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
