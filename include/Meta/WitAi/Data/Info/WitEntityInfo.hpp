// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Meta.WitAi.Data.Info.WitEntityRoleInfo
#include "Meta/WitAi/Data/Info/WitEntityRoleInfo.hpp"
// Including type: Meta.WitAi.Data.Info.WitEntityKeywordInfo
#include "Meta/WitAi/Data/Info/WitEntityKeywordInfo.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin il2cpp-utils forward declares
struct Il2CppObject;
// Completed il2cpp-utils forward declares
// Type namespace: Meta.WitAi.Data.Info
namespace Meta::WitAi::Data::Info {
  // Forward declaring type: WitEntityInfo
  struct WitEntityInfo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Meta::WitAi::Data::Info::WitEntityInfo, "Meta.WitAi.Data.Info", "WitEntityInfo");
// Type namespace: Meta.WitAi.Data.Info
namespace Meta::WitAi::Data::Info {
  // Size: 0x28
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Meta.WitAi.Data.Info.WitEntityInfo
  // [TokenAttribute] Offset: FFFFFFFF
  struct WitEntityInfo/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.String name
    // Size: 0x8
    // Offset: 0x0
    ::StringW name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String id
    // Size: 0x8
    // Offset: 0x8
    ::StringW id;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String[] lookups
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<::StringW> lookups;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // public Meta.WitAi.Data.Info.WitEntityRoleInfo[] roles
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::Meta::WitAi::Data::Info::WitEntityRoleInfo> roles;
    // Field size check
    static_assert(sizeof(::ArrayW<::Meta::WitAi::Data::Info::WitEntityRoleInfo>) == 0x8);
    // public Meta.WitAi.Data.Info.WitEntityKeywordInfo[] keywords
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::Meta::WitAi::Data::Info::WitEntityKeywordInfo> keywords;
    // Field size check
    static_assert(sizeof(::ArrayW<::Meta::WitAi::Data::Info::WitEntityKeywordInfo>) == 0x8);
    public:
    // Creating value type constructor for type: WitEntityInfo
    constexpr WitEntityInfo(::StringW name_ = {}, ::StringW id_ = {}, ::ArrayW<::StringW> lookups_ = ::ArrayW<::StringW>(static_cast<void*>(nullptr)), ::ArrayW<::Meta::WitAi::Data::Info::WitEntityRoleInfo> roles_ = ::ArrayW<::Meta::WitAi::Data::Info::WitEntityRoleInfo>(static_cast<void*>(nullptr)), ::ArrayW<::Meta::WitAi::Data::Info::WitEntityKeywordInfo> keywords_ = ::ArrayW<::Meta::WitAi::Data::Info::WitEntityKeywordInfo>(static_cast<void*>(nullptr))) noexcept : name{name_}, id{id_}, lookups{lookups_}, roles{roles_}, keywords{keywords_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.String name
    [[deprecated("Use field access instead!")]] ::StringW& dyn_name();
    // Get instance field reference: public System.String id
    [[deprecated("Use field access instead!")]] ::StringW& dyn_id();
    // Get instance field reference: public System.String[] lookups
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn_lookups();
    // Get instance field reference: public Meta.WitAi.Data.Info.WitEntityRoleInfo[] roles
    [[deprecated("Use field access instead!")]] ::ArrayW<::Meta::WitAi::Data::Info::WitEntityRoleInfo>& dyn_roles();
    // Get instance field reference: public Meta.WitAi.Data.Info.WitEntityKeywordInfo[] keywords
    [[deprecated("Use field access instead!")]] ::ArrayW<::Meta::WitAi::Data::Info::WitEntityKeywordInfo>& dyn_keywords();
    // public System.Boolean Equals(Meta.WitAi.Data.Info.WitEntityInfo other)
    // Offset: 0x44513AC
    bool Equals(::Meta::WitAi::Data::Info::WitEntityInfo other);
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x445131C
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0x4451484
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
  }; // Meta.WitAi.Data.Info.WitEntityInfo
  #pragma pack(pop)
  static check_size<sizeof(WitEntityInfo), 32 + sizeof(::ArrayW<::Meta::WitAi::Data::Info::WitEntityKeywordInfo>)> __Meta_WitAi_Data_Info_WitEntityInfoSizeCheck;
  static_assert(sizeof(WitEntityInfo) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::WitAi::Data::Info::WitEntityInfo::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::Data::Info::WitEntityInfo::*)(::Meta::WitAi::Data::Info::WitEntityInfo)>(&Meta::WitAi::Data::Info::WitEntityInfo::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Data.Info", "WitEntityInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Data::Info::WitEntityInfo), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Data::Info::WitEntityInfo::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::Data::Info::WitEntityInfo::*)(::Il2CppObject*)>(&Meta::WitAi::Data::Info::WitEntityInfo::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Data::Info::WitEntityInfo), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Data::Info::WitEntityInfo::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Meta::WitAi::Data::Info::WitEntityInfo::*)()>(&Meta::WitAi::Data::Info::WitEntityInfo::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Data::Info::WitEntityInfo), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
