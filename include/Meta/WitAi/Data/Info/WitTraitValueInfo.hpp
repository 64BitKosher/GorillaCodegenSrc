// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: Meta.WitAi.Data.Info
namespace Meta::WitAi::Data::Info {
  // Forward declaring type: WitTraitValueInfo
  struct WitTraitValueInfo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Meta::WitAi::Data::Info::WitTraitValueInfo, "Meta.WitAi.Data.Info", "WitTraitValueInfo");
// Type namespace: Meta.WitAi.Data.Info
namespace Meta::WitAi::Data::Info {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Meta.WitAi.Data.Info.WitTraitValueInfo
  // [TokenAttribute] Offset: FFFFFFFF
  struct WitTraitValueInfo/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.String id
    // Size: 0x8
    // Offset: 0x0
    ::StringW id;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String value
    // Size: 0x8
    // Offset: 0x8
    ::StringW value;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Creating value type constructor for type: WitTraitValueInfo
    constexpr WitTraitValueInfo(::StringW id_ = {}, ::StringW value_ = {}) noexcept : id{id_}, value{value_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.String id
    [[deprecated("Use field access instead!")]] ::StringW& dyn_id();
    // Get instance field reference: public System.String value
    [[deprecated("Use field access instead!")]] ::StringW& dyn_value();
  }; // Meta.WitAi.Data.Info.WitTraitValueInfo
  #pragma pack(pop)
  static check_size<sizeof(WitTraitValueInfo), 8 + sizeof(::StringW)> __Meta_WitAi_Data_Info_WitTraitValueInfoSizeCheck;
  static_assert(sizeof(WitTraitValueInfo) == 0x10);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
