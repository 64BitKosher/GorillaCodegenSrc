// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Meta::WitAi
namespace Meta::WitAi {
  // Forward declaring type: VoiceService
  class VoiceService;
}
// Forward declaring namespace: Meta::WitAi::Json
namespace Meta::WitAi::Json {
  // Forward declaring type: WitResponseNode
  class WitResponseNode;
}
// Completed forward declares
// Type namespace: Meta.WitAi.Data
namespace Meta::WitAi::Data {
  // Forward declaring type: VoiceSession
  class VoiceSession;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::WitAi::Data::VoiceSession);
DEFINE_IL2CPP_ARG_TYPE(::Meta::WitAi::Data::VoiceSession*, "Meta.WitAi.Data", "VoiceSession");
// Type namespace: Meta.WitAi.Data
namespace Meta::WitAi::Data {
  // Size: 0x21
  #pragma pack(push, 1)
  // Autogenerated type: Meta.WitAi.Data.VoiceSession
  // [TokenAttribute] Offset: FFFFFFFF
  class VoiceSession : public ::Il2CppObject {
    public:
    public:
    // public Meta.WitAi.VoiceService service
    // Size: 0x8
    // Offset: 0x10
    ::Meta::WitAi::VoiceService* service;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::VoiceService*) == 0x8);
    // public Meta.WitAi.Json.WitResponseNode response
    // Size: 0x8
    // Offset: 0x18
    ::Meta::WitAi::Json::WitResponseNode* response;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::Json::WitResponseNode*) == 0x8);
    // public System.Boolean validResponse
    // Size: 0x1
    // Offset: 0x20
    bool validResponse;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: public Meta.WitAi.VoiceService service
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::VoiceService*& dyn_service();
    // Get instance field reference: public Meta.WitAi.Json.WitResponseNode response
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::Json::WitResponseNode*& dyn_response();
    // Get instance field reference: public System.Boolean validResponse
    [[deprecated("Use field access instead!")]] bool& dyn_validResponse();
    // public System.Void .ctor()
    // Offset: 0x4465AD0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VoiceSession* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Data::VoiceSession::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VoiceSession*, creationType>()));
    }
  }; // Meta.WitAi.Data.VoiceSession
  #pragma pack(pop)
  static check_size<sizeof(VoiceSession), 32 + sizeof(bool)> __Meta_WitAi_Data_VoiceSessionSizeCheck;
  static_assert(sizeof(VoiceSession) == 0x21);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::WitAi::Data::VoiceSession::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
