// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Meta.WitAi.Data.Info.WitEntityKeywordInfo
#include "Meta/WitAi/Data/Info/WitEntityKeywordInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: Meta.WitAi.Data.Entities
namespace Meta::WitAi::Data::Entities {
  // Forward declaring type: RegisteredDynamicEntityKeyword
  class RegisteredDynamicEntityKeyword;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::WitAi::Data::Entities::RegisteredDynamicEntityKeyword);
DEFINE_IL2CPP_ARG_TYPE(::Meta::WitAi::Data::Entities::RegisteredDynamicEntityKeyword*, "Meta.WitAi.Data.Entities", "RegisteredDynamicEntityKeyword");
// Type namespace: Meta.WitAi.Data.Entities
namespace Meta::WitAi::Data::Entities {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: Meta.WitAi.Data.Entities.RegisteredDynamicEntityKeyword
  // [TokenAttribute] Offset: FFFFFFFF
  class RegisteredDynamicEntityKeyword : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private System.String entity
    // Size: 0x8
    // Offset: 0x20
    ::StringW entity;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private Meta.WitAi.Data.Info.WitEntityKeywordInfo keyword
    // Size: 0x10
    // Offset: 0x28
    ::Meta::WitAi::Data::Info::WitEntityKeywordInfo keyword;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::Data::Info::WitEntityKeywordInfo) == 0x10);
    public:
    // Get instance field reference: private System.String entity
    [[deprecated("Use field access instead!")]] ::StringW& dyn_entity();
    // Get instance field reference: private Meta.WitAi.Data.Info.WitEntityKeywordInfo keyword
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::Data::Info::WitEntityKeywordInfo& dyn_keyword();
    // private System.Void OnEnable()
    // Offset: 0x4466934
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0x4466A0C
    void OnDisable();
    // public System.Void .ctor()
    // Offset: 0x4466A68
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RegisteredDynamicEntityKeyword* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Data::Entities::RegisteredDynamicEntityKeyword::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RegisteredDynamicEntityKeyword*, creationType>()));
    }
  }; // Meta.WitAi.Data.Entities.RegisteredDynamicEntityKeyword
  #pragma pack(pop)
  static check_size<sizeof(RegisteredDynamicEntityKeyword), 40 + sizeof(::Meta::WitAi::Data::Info::WitEntityKeywordInfo)> __Meta_WitAi_Data_Entities_RegisteredDynamicEntityKeywordSizeCheck;
  static_assert(sizeof(RegisteredDynamicEntityKeyword) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::WitAi::Data::Entities::RegisteredDynamicEntityKeyword::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Data::Entities::RegisteredDynamicEntityKeyword::*)()>(&Meta::WitAi::Data::Entities::RegisteredDynamicEntityKeyword::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Data::Entities::RegisteredDynamicEntityKeyword*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Data::Entities::RegisteredDynamicEntityKeyword::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Data::Entities::RegisteredDynamicEntityKeyword::*)()>(&Meta::WitAi::Data::Entities::RegisteredDynamicEntityKeyword::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Data::Entities::RegisteredDynamicEntityKeyword*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Data::Entities::RegisteredDynamicEntityKeyword::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
