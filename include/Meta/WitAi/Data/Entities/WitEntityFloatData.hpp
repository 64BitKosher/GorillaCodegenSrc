// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Meta.WitAi.Data.Entities.WitEntityDataBase`1
#include "Meta/WitAi/Data/Entities/WitEntityDataBase_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Meta::WitAi::Json
namespace Meta::WitAi::Json {
  // Forward declaring type: WitResponseNode
  class WitResponseNode;
}
// Completed forward declares
// Type namespace: Meta.WitAi.Data.Entities
namespace Meta::WitAi::Data::Entities {
  // Forward declaring type: WitEntityFloatData
  class WitEntityFloatData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::WitAi::Data::Entities::WitEntityFloatData);
DEFINE_IL2CPP_ARG_TYPE(::Meta::WitAi::Data::Entities::WitEntityFloatData*, "Meta.WitAi.Data.Entities", "WitEntityFloatData");
// Type namespace: Meta.WitAi.Data.Entities
namespace Meta::WitAi::Data::Entities {
  // WARNING Size may be invalid!
  // Autogenerated type: Meta.WitAi.Data.Entities.WitEntityFloatData
  // [TokenAttribute] Offset: FFFFFFFF
  class WitEntityFloatData : public ::Meta::WitAi::Data::Entities::WitEntityDataBase_1<float> {
    public:
    // public System.Void .ctor(Meta.WitAi.Json.WitResponseNode node)
    // Offset: 0x4467B9C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WitEntityFloatData* New_ctor(::Meta::WitAi::Json::WitResponseNode* node) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Data::Entities::WitEntityFloatData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WitEntityFloatData*, creationType>(node)));
    }
    // public System.Boolean Approximately(System.Single v, System.Single tolerance)
    // Offset: 0x4467C28
    bool Approximately(float v, float tolerance);
    // public System.Void .ctor()
    // Offset: 0x4467B54
    // Implemented from: Meta.WitAi.Data.Entities.WitEntityDataBase`1
    // Base method: System.Void WitEntityDataBase_1::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WitEntityFloatData* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Data::Entities::WitEntityFloatData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WitEntityFloatData*, creationType>()));
    }
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x4467D78
    // Implemented from: System.Object
    // Base method: System.Boolean Object::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0x4467E00
    // Implemented from: System.Object
    // Base method: System.Int32 Object::GetHashCode()
    int GetHashCode();
  }; // Meta.WitAi.Data.Entities.WitEntityFloatData
  // static public System.Boolean op_Equality(Meta.WitAi.Data.Entities.WitEntityFloatData data, System.Single value)
  // Offset: 0x4467CA0
  bool operator ==(::Meta::WitAi::Data::Entities::WitEntityFloatData& data, const float& value);
  // static public System.Boolean op_Inequality(Meta.WitAi.Data.Entities.WitEntityFloatData data, System.Single value)
  // Offset: 0x4467CB4
  bool operator !=(::Meta::WitAi::Data::Entities::WitEntityFloatData& data, const float& value);
  // static public System.Boolean op_Equality(Meta.WitAi.Data.Entities.WitEntityFloatData data, System.Int32 value)
  // Offset: 0x4467CD0
  bool operator ==(::Meta::WitAi::Data::Entities::WitEntityFloatData& data, const int& value);
  // static public System.Boolean op_Inequality(Meta.WitAi.Data.Entities.WitEntityFloatData data, System.Int32 value)
  // Offset: 0x4467CE8
  bool operator !=(::Meta::WitAi::Data::Entities::WitEntityFloatData& data, const int& value);
  // static public System.Boolean op_Equality(System.Single value, Meta.WitAi.Data.Entities.WitEntityFloatData data)
  // Offset: 0x4467D08
  bool operator ==(const float& value, ::Meta::WitAi::Data::Entities::WitEntityFloatData& data);
  // static public System.Boolean op_Inequality(System.Single value, Meta.WitAi.Data.Entities.WitEntityFloatData data)
  // Offset: 0x4467D1C
  bool operator !=(const float& value, ::Meta::WitAi::Data::Entities::WitEntityFloatData& data);
  // static public System.Boolean op_Equality(System.Int32 value, Meta.WitAi.Data.Entities.WitEntityFloatData data)
  // Offset: 0x4467D38
  bool operator ==(const int& value, ::Meta::WitAi::Data::Entities::WitEntityFloatData& data);
  // static public System.Boolean op_Inequality(System.Int32 value, Meta.WitAi.Data.Entities.WitEntityFloatData data)
  // Offset: 0x4467D58
  bool operator !=(const int& value, ::Meta::WitAi::Data::Entities::WitEntityFloatData& data);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::WitAi::Data::Entities::WitEntityFloatData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Meta::WitAi::Data::Entities::WitEntityFloatData::Approximately
// Il2CppName: Approximately
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::Data::Entities::WitEntityFloatData::*)(float, float)>(&Meta::WitAi::Data::Entities::WitEntityFloatData::Approximately)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* tolerance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Data::Entities::WitEntityFloatData*), "Approximately", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v, tolerance});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Data::Entities::WitEntityFloatData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Meta::WitAi::Data::Entities::WitEntityFloatData::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::Data::Entities::WitEntityFloatData::*)(::Il2CppObject*)>(&Meta::WitAi::Data::Entities::WitEntityFloatData::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Data::Entities::WitEntityFloatData*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Data::Entities::WitEntityFloatData::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Meta::WitAi::Data::Entities::WitEntityFloatData::*)()>(&Meta::WitAi::Data::Entities::WitEntityFloatData::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Data::Entities::WitEntityFloatData*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Data::Entities::WitEntityFloatData::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Meta::WitAi::Data::Entities::WitEntityFloatData::operator !=
// Il2CppName: op_Inequality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Meta::WitAi::Data::Entities::WitEntityFloatData::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Meta::WitAi::Data::Entities::WitEntityFloatData::operator !=
// Il2CppName: op_Inequality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Meta::WitAi::Data::Entities::WitEntityFloatData::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Meta::WitAi::Data::Entities::WitEntityFloatData::operator !=
// Il2CppName: op_Inequality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Meta::WitAi::Data::Entities::WitEntityFloatData::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Meta::WitAi::Data::Entities::WitEntityFloatData::operator !=
// Il2CppName: op_Inequality
// Cannot perform method pointer template specialization from operators!
