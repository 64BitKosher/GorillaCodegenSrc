// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Meta.WitAi.Interfaces.IDynamicEntitiesProvider
#include "Meta/WitAi/Interfaces/IDynamicEntitiesProvider.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Meta::WitAi::Data::Entities
namespace Meta::WitAi::Data::Entities {
  // Forward declaring type: WitDynamicEntitiesData
  class WitDynamicEntitiesData;
  // Forward declaring type: WitDynamicEntities
  class WitDynamicEntities;
}
// Completed forward declares
// Type namespace: Meta.WitAi.Data.Entities
namespace Meta::WitAi::Data::Entities {
  // Forward declaring type: DynamicEntityDataProvider
  class DynamicEntityDataProvider;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::WitAi::Data::Entities::DynamicEntityDataProvider);
DEFINE_IL2CPP_ARG_TYPE(::Meta::WitAi::Data::Entities::DynamicEntityDataProvider*, "Meta.WitAi.Data.Entities", "DynamicEntityDataProvider");
// Type namespace: Meta.WitAi.Data.Entities
namespace Meta::WitAi::Data::Entities {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Meta.WitAi.Data.Entities.DynamicEntityDataProvider
  // [TokenAttribute] Offset: FFFFFFFF
  class DynamicEntityDataProvider : public ::UnityEngine::MonoBehaviour/*, public ::Meta::WitAi::Interfaces::IDynamicEntitiesProvider*/ {
    public:
    public:
    // Meta.WitAi.Data.Entities.WitDynamicEntitiesData[] entitiesDefinition
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::Meta::WitAi::Data::Entities::WitDynamicEntitiesData*> entitiesDefinition;
    // Field size check
    static_assert(sizeof(::ArrayW<::Meta::WitAi::Data::Entities::WitDynamicEntitiesData*>) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Meta::WitAi::Interfaces::IDynamicEntitiesProvider
    operator ::Meta::WitAi::Interfaces::IDynamicEntitiesProvider() noexcept {
      return *reinterpret_cast<::Meta::WitAi::Interfaces::IDynamicEntitiesProvider*>(this);
    }
    // Get instance field reference: Meta.WitAi.Data.Entities.WitDynamicEntitiesData[] entitiesDefinition
    [[deprecated("Use field access instead!")]] ::ArrayW<::Meta::WitAi::Data::Entities::WitDynamicEntitiesData*>& dyn_entitiesDefinition();
    // public Meta.WitAi.Data.Entities.WitDynamicEntities GetDynamicEntities()
    // Offset: 0x4466028
    ::Meta::WitAi::Data::Entities::WitDynamicEntities* GetDynamicEntities();
    // public System.Void .ctor()
    // Offset: 0x4466234
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DynamicEntityDataProvider* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Data::Entities::DynamicEntityDataProvider::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DynamicEntityDataProvider*, creationType>()));
    }
  }; // Meta.WitAi.Data.Entities.DynamicEntityDataProvider
  #pragma pack(pop)
  static check_size<sizeof(DynamicEntityDataProvider), 32 + sizeof(::ArrayW<::Meta::WitAi::Data::Entities::WitDynamicEntitiesData*>)> __Meta_WitAi_Data_Entities_DynamicEntityDataProviderSizeCheck;
  static_assert(sizeof(DynamicEntityDataProvider) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::WitAi::Data::Entities::DynamicEntityDataProvider::GetDynamicEntities
// Il2CppName: GetDynamicEntities
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Data::Entities::WitDynamicEntities* (Meta::WitAi::Data::Entities::DynamicEntityDataProvider::*)()>(&Meta::WitAi::Data::Entities::DynamicEntityDataProvider::GetDynamicEntities)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Data::Entities::DynamicEntityDataProvider*), "GetDynamicEntities", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Data::Entities::DynamicEntityDataProvider::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
