// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Meta.WitAi.Requests.VoiceServiceRequest
#include "Meta/WitAi/Requests/VoiceServiceRequest.hpp"
// Including type: System.DateTime
#include "System/DateTime.hpp"
// Including type: Meta.WitAi.Requests.VoiceServiceRequestOptions
#include "Meta/WitAi/Requests/VoiceServiceRequestOptions.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Meta::WitAi
namespace Meta::WitAi {
  // Forward declaring type: AudioDurationTracker
  class AudioDurationTracker;
}
// Forward declaring namespace: Meta::WitAi::Data::Configuration
namespace Meta::WitAi::Data::Configuration {
  // Forward declaring type: WitConfiguration
  class WitConfiguration;
}
// Forward declaring namespace: Meta::WitAi::Data
namespace Meta::WitAi::Data {
  // Forward declaring type: AudioEncoding
  class AudioEncoding;
}
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: HttpWebRequest
  class HttpWebRequest;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: Stream
  class Stream;
  // Forward declaring type: StreamReader
  class StreamReader;
}
// Forward declaring namespace: System::Collections::Concurrent
namespace System::Collections::Concurrent {
  // Forward declaring type: ConcurrentQueue`1<T>
  template<typename T>
  class ConcurrentQueue_1;
}
// Forward declaring namespace: Meta::WitAi::Json
namespace Meta::WitAi::Json {
  // Forward declaring type: WitResponseNode
  class WitResponseNode;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Uri
  class Uri;
  // Forward declaring type: IAsyncResult
  class IAsyncResult;
}
// Forward declaring namespace: Meta::WitAi::Configuration
namespace Meta::WitAi::Configuration {
  // Forward declaring type: WitRequestOptions
  class WitRequestOptions;
}
// Forward declaring namespace: Meta::WitAi::Requests
namespace Meta::WitAi::Requests {
  // Forward declaring type: VoiceServiceRequestEvents
  class VoiceServiceRequestEvents;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: Meta::Voice
namespace Meta::Voice {
  // Skipping declaration: VoiceRequestState because it is already included!
}
// Completed forward declares
// Type namespace: Meta.WitAi
namespace Meta::WitAi {
  // Forward declaring type: WitRequest
  class WitRequest;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::WitAi::WitRequest);
DEFINE_IL2CPP_ARG_TYPE(::Meta::WitAi::WitRequest*, "Meta.WitAi", "WitRequest");
// Type namespace: Meta.WitAi
namespace Meta::WitAi {
  // WARNING Size may be invalid!
  // Autogenerated type: Meta.WitAi.WitRequest
  // [TokenAttribute] Offset: FFFFFFFF
  class WitRequest : public ::Meta::WitAi::Requests::VoiceServiceRequest {
    public:
    // Nested type: ::Meta::WitAi::WitRequest::OnProvideCustomHeadersEvent
    class OnProvideCustomHeadersEvent;
    // Nested type: ::Meta::WitAi::WitRequest::OnCustomizeUriEvent
    class OnCustomizeUriEvent;
    // Nested type: ::Meta::WitAi::WitRequest::PreSendRequestDelegate
    class PreSendRequestDelegate;
    // Nested type: ::Meta::WitAi::WitRequest::$$c__DisplayClass99_0
    class $$c__DisplayClass99_0;
    public:
    // private Meta.WitAi.Data.Configuration.WitConfiguration <Configuration>k__BackingField
    // Size: 0x8
    // Offset: 0x58
    ::Meta::WitAi::Data::Configuration::WitConfiguration* Configuration;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::Data::Configuration::WitConfiguration*) == 0x8);
    // private System.Int32 <TimeoutMs>k__BackingField
    // Size: 0x4
    // Offset: 0x60
    int TimeoutMs;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private Meta.WitAi.Data.AudioEncoding <AudioEncoding>k__BackingField
    // Size: 0x8
    // Offset: 0x68
    ::Meta::WitAi::Data::AudioEncoding* AudioEncoding;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::Data::AudioEncoding*) == 0x8);
    // private System.String <Path>k__BackingField
    // Size: 0x8
    // Offset: 0x70
    ::StringW Path;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String <Command>k__BackingField
    // Size: 0x8
    // Offset: 0x78
    ::StringW Command;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean <IsPost>k__BackingField
    // Size: 0x1
    // Offset: 0x80
    bool IsPost;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Byte[] postData
    // Size: 0x8
    // Offset: 0x88
    ::ArrayW<uint8_t> postData;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // public System.String postContentType
    // Size: 0x8
    // Offset: 0x90
    ::StringW postContentType;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String forcedHttpMethodType
    // Size: 0x8
    // Offset: 0x98
    ::StringW forcedHttpMethodType;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean <HasResponseStarted>k__BackingField
    // Size: 0x1
    // Offset: 0xA0
    bool HasResponseStarted;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <IsInputStreamReady>k__BackingField
    // Size: 0x1
    // Offset: 0xA1
    bool IsInputStreamReady;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public Meta.WitAi.AudioDurationTracker audioDurationTracker
    // Size: 0x8
    // Offset: 0xA8
    ::Meta::WitAi::AudioDurationTracker* audioDurationTracker;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::AudioDurationTracker*) == 0x8);
    // private System.Net.HttpWebRequest _request
    // Size: 0x8
    // Offset: 0xB0
    ::System::Net::HttpWebRequest* request;
    // Field size check
    static_assert(sizeof(::System::Net::HttpWebRequest*) == 0x8);
    // private System.IO.Stream _writeStream
    // Size: 0x8
    // Offset: 0xB8
    ::System::IO::Stream* writeStream;
    // Field size check
    static_assert(sizeof(::System::IO::Stream*) == 0x8);
    // private System.Object _streamLock
    // Size: 0x8
    // Offset: 0xC0
    ::Il2CppObject* streamLock;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Int32 _bytesWritten
    // Size: 0x4
    // Offset: 0xC8
    int bytesWritten;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.String _stackTrace
    // Size: 0x8
    // Offset: 0xD0
    ::StringW stackTrace;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.DateTime _requestStartTime
    // Size: 0x8
    // Offset: 0xD8
    ::System::DateTime requestStartTime;
    // Field size check
    static_assert(sizeof(::System::DateTime) == 0x8);
    // private System.Collections.Concurrent.ConcurrentQueue`1<System.Byte[]> _writeBuffer
    // Size: 0x8
    // Offset: 0xE0
    ::System::Collections::Concurrent::ConcurrentQueue_1<::ArrayW<uint8_t>>* writeBuffer;
    // Field size check
    static_assert(sizeof(::System::Collections::Concurrent::ConcurrentQueue_1<::ArrayW<uint8_t>>*) == 0x8);
    // private System.String <StatusDescription>k__BackingField
    // Size: 0x8
    // Offset: 0xE8
    ::StringW StatusDescription;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private Meta.WitAi.Json.WitResponseNode _lastResponseData
    // Size: 0x8
    // Offset: 0xF0
    ::Meta::WitAi::Json::WitResponseNode* lastResponseData;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::Json::WitResponseNode*) == 0x8);
    // private Meta.WitAi.WitRequest/OnProvideCustomHeadersEvent onProvideCustomHeaders
    // Size: 0x8
    // Offset: 0xF8
    ::Meta::WitAi::WitRequest::OnProvideCustomHeadersEvent* onProvideCustomHeaders;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::WitRequest::OnProvideCustomHeadersEvent*) == 0x8);
    // private System.Action`1<Meta.WitAi.WitRequest> onInputStreamReady
    // Size: 0x8
    // Offset: 0x100
    ::System::Action_1<::Meta::WitAi::WitRequest*>* onInputStreamReady;
    // Field size check
    static_assert(sizeof(::System::Action_1<::Meta::WitAi::WitRequest*>*) == 0x8);
    // public System.Action`1<System.String> onRawResponse
    // Size: 0x8
    // Offset: 0x108
    ::System::Action_1<::StringW>* onRawResponse;
    // Field size check
    static_assert(sizeof(::System::Action_1<::StringW>*) == 0x8);
    // public Meta.WitAi.WitRequest/OnCustomizeUriEvent onCustomizeUri
    // Size: 0x8
    // Offset: 0x110
    ::Meta::WitAi::WitRequest::OnCustomizeUriEvent* onCustomizeUri;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::WitRequest::OnCustomizeUriEvent*) == 0x8);
    // private System.Action`1<System.String> onPartialTranscription
    // Size: 0x8
    // Offset: 0x118
    ::System::Action_1<::StringW>* onPartialTranscription;
    // Field size check
    static_assert(sizeof(::System::Action_1<::StringW>*) == 0x8);
    // private System.Action`1<System.String> onFullTranscription
    // Size: 0x8
    // Offset: 0x120
    ::System::Action_1<::StringW>* onFullTranscription;
    // Field size check
    static_assert(sizeof(::System::Action_1<::StringW>*) == 0x8);
    // private System.Action`1<Meta.WitAi.WitRequest> onPartialResponse
    // Size: 0x8
    // Offset: 0x128
    ::System::Action_1<::Meta::WitAi::WitRequest*>* onPartialResponse;
    // Field size check
    static_assert(sizeof(::System::Action_1<::Meta::WitAi::WitRequest*>*) == 0x8);
    // private System.Action`1<Meta.WitAi.WitRequest> onResponse
    // Size: 0x8
    // Offset: 0x130
    ::System::Action_1<::Meta::WitAi::WitRequest*>* onResponse;
    // Field size check
    static_assert(sizeof(::System::Action_1<::Meta::WitAi::WitRequest*>*) == 0x8);
    // private System.Boolean _initialized
    // Size: 0x1
    // Offset: 0x138
    bool initialized;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get static field: static public Meta.WitAi.WitRequest/PreSendRequestDelegate onPreSendRequest
    static ::Meta::WitAi::WitRequest::PreSendRequestDelegate* _get_onPreSendRequest();
    // Set static field: static public Meta.WitAi.WitRequest/PreSendRequestDelegate onPreSendRequest
    static void _set_onPreSendRequest(::Meta::WitAi::WitRequest::PreSendRequestDelegate* value);
    // Get instance field reference: private Meta.WitAi.Data.Configuration.WitConfiguration <Configuration>k__BackingField
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::Data::Configuration::WitConfiguration*& dyn_$Configuration$k__BackingField();
    // Get instance field reference: private System.Int32 <TimeoutMs>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$TimeoutMs$k__BackingField();
    // Get instance field reference: private Meta.WitAi.Data.AudioEncoding <AudioEncoding>k__BackingField
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::Data::AudioEncoding*& dyn_$AudioEncoding$k__BackingField();
    // Get instance field reference: private System.String <Path>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$Path$k__BackingField();
    // Get instance field reference: private System.String <Command>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$Command$k__BackingField();
    // Get instance field reference: private System.Boolean <IsPost>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$IsPost$k__BackingField();
    // Get instance field reference: public System.Byte[] postData
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_postData();
    // Get instance field reference: public System.String postContentType
    [[deprecated("Use field access instead!")]] ::StringW& dyn_postContentType();
    // Get instance field reference: public System.String forcedHttpMethodType
    [[deprecated("Use field access instead!")]] ::StringW& dyn_forcedHttpMethodType();
    // Get instance field reference: private System.Boolean <HasResponseStarted>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$HasResponseStarted$k__BackingField();
    // Get instance field reference: private System.Boolean <IsInputStreamReady>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$IsInputStreamReady$k__BackingField();
    // Get instance field reference: public Meta.WitAi.AudioDurationTracker audioDurationTracker
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::AudioDurationTracker*& dyn_audioDurationTracker();
    // Get instance field reference: private System.Net.HttpWebRequest _request
    [[deprecated("Use field access instead!")]] ::System::Net::HttpWebRequest*& dyn__request();
    // Get instance field reference: private System.IO.Stream _writeStream
    [[deprecated("Use field access instead!")]] ::System::IO::Stream*& dyn__writeStream();
    // Get instance field reference: private System.Object _streamLock
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn__streamLock();
    // Get instance field reference: private System.Int32 _bytesWritten
    [[deprecated("Use field access instead!")]] int& dyn__bytesWritten();
    // Get instance field reference: private System.String _stackTrace
    [[deprecated("Use field access instead!")]] ::StringW& dyn__stackTrace();
    // Get instance field reference: private System.DateTime _requestStartTime
    [[deprecated("Use field access instead!")]] ::System::DateTime& dyn__requestStartTime();
    // Get instance field reference: private System.Collections.Concurrent.ConcurrentQueue`1<System.Byte[]> _writeBuffer
    [[deprecated("Use field access instead!")]] ::System::Collections::Concurrent::ConcurrentQueue_1<::ArrayW<uint8_t>>*& dyn__writeBuffer();
    // Get instance field reference: private System.String <StatusDescription>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$StatusDescription$k__BackingField();
    // Get instance field reference: private Meta.WitAi.Json.WitResponseNode _lastResponseData
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::Json::WitResponseNode*& dyn__lastResponseData();
    // Get instance field reference: private Meta.WitAi.WitRequest/OnProvideCustomHeadersEvent onProvideCustomHeaders
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::WitRequest::OnProvideCustomHeadersEvent*& dyn_onProvideCustomHeaders();
    // Get instance field reference: private System.Action`1<Meta.WitAi.WitRequest> onInputStreamReady
    [[deprecated("Use field access instead!")]] ::System::Action_1<::Meta::WitAi::WitRequest*>*& dyn_onInputStreamReady();
    // Get instance field reference: public System.Action`1<System.String> onRawResponse
    [[deprecated("Use field access instead!")]] ::System::Action_1<::StringW>*& dyn_onRawResponse();
    // Get instance field reference: public Meta.WitAi.WitRequest/OnCustomizeUriEvent onCustomizeUri
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::WitRequest::OnCustomizeUriEvent*& dyn_onCustomizeUri();
    // Get instance field reference: private System.Action`1<System.String> onPartialTranscription
    [[deprecated("Use field access instead!")]] ::System::Action_1<::StringW>*& dyn_onPartialTranscription();
    // Get instance field reference: private System.Action`1<System.String> onFullTranscription
    [[deprecated("Use field access instead!")]] ::System::Action_1<::StringW>*& dyn_onFullTranscription();
    // Get instance field reference: private System.Action`1<Meta.WitAi.WitRequest> onPartialResponse
    [[deprecated("Use field access instead!")]] ::System::Action_1<::Meta::WitAi::WitRequest*>*& dyn_onPartialResponse();
    // Get instance field reference: private System.Action`1<Meta.WitAi.WitRequest> onResponse
    [[deprecated("Use field access instead!")]] ::System::Action_1<::Meta::WitAi::WitRequest*>*& dyn_onResponse();
    // Get instance field reference: private System.Boolean _initialized
    [[deprecated("Use field access instead!")]] bool& dyn__initialized();
    // public Meta.WitAi.Data.Configuration.WitConfiguration get_Configuration()
    // Offset: 0x442B24C
    ::Meta::WitAi::Data::Configuration::WitConfiguration* get_Configuration();
    // private System.Void set_Configuration(Meta.WitAi.Data.Configuration.WitConfiguration value)
    // Offset: 0x442B254
    void set_Configuration(::Meta::WitAi::Data::Configuration::WitConfiguration* value);
    // public System.Int32 get_TimeoutMs()
    // Offset: 0x442B25C
    int get_TimeoutMs();
    // private System.Void set_TimeoutMs(System.Int32 value)
    // Offset: 0x442B264
    void set_TimeoutMs(int value);
    // public Meta.WitAi.Data.AudioEncoding get_AudioEncoding()
    // Offset: 0x442B26C
    ::Meta::WitAi::Data::AudioEncoding* get_AudioEncoding();
    // public System.Void set_AudioEncoding(Meta.WitAi.Data.AudioEncoding value)
    // Offset: 0x442B274
    void set_AudioEncoding(::Meta::WitAi::Data::AudioEncoding* value);
    // public Meta.WitAi.Data.AudioEncoding get_audioEncoding()
    // Offset: 0x442B27C
    ::Meta::WitAi::Data::AudioEncoding* get_audioEncoding();
    // public System.Void set_audioEncoding(Meta.WitAi.Data.AudioEncoding value)
    // Offset: 0x442B284
    void set_audioEncoding(::Meta::WitAi::Data::AudioEncoding* value);
    // public System.String get_Path()
    // Offset: 0x442B28C
    ::StringW get_Path();
    // private System.Void set_Path(System.String value)
    // Offset: 0x442B294
    void set_Path(::StringW value);
    // public System.String get_Command()
    // Offset: 0x442B29C
    ::StringW get_Command();
    // private System.Void set_Command(System.String value)
    // Offset: 0x442B2A4
    void set_Command(::StringW value);
    // public System.Boolean get_IsPost()
    // Offset: 0x442B2AC
    bool get_IsPost();
    // private System.Void set_IsPost(System.Boolean value)
    // Offset: 0x442B2B4
    void set_IsPost(bool value);
    // public Meta.WitAi.Requests.VoiceServiceRequestOptions/QueryParam[] get_queryParams()
    // Offset: 0x442B2C0
    ::ArrayW<::Meta::WitAi::Requests::VoiceServiceRequestOptions::QueryParam*> get_queryParams();
    // public System.Boolean get_IsRequestStreamActive()
    // Offset: 0x442B5F0
    bool get_IsRequestStreamActive();
    // public System.Boolean get_HasResponseStarted()
    // Offset: 0x442B654
    bool get_HasResponseStarted();
    // private System.Void set_HasResponseStarted(System.Boolean value)
    // Offset: 0x442B65C
    void set_HasResponseStarted(bool value);
    // public System.Boolean get_IsInputStreamReady()
    // Offset: 0x442B668
    bool get_IsInputStreamReady();
    // private System.Void set_IsInputStreamReady(System.Boolean value)
    // Offset: 0x442B670
    void set_IsInputStreamReady(bool value);
    // public System.String get_StatusDescription()
    // Offset: 0x442B67C
    ::StringW get_StatusDescription();
    // private System.Void set_StatusDescription(System.String value)
    // Offset: 0x442B684
    void set_StatusDescription(::StringW value);
    // public System.Void add_onProvideCustomHeaders(Meta.WitAi.WitRequest/OnProvideCustomHeadersEvent value)
    // Offset: 0x442B694
    void add_onProvideCustomHeaders(::Meta::WitAi::WitRequest::OnProvideCustomHeadersEvent* value);
    // public System.Void remove_onProvideCustomHeaders(Meta.WitAi.WitRequest/OnProvideCustomHeadersEvent value)
    // Offset: 0x442B730
    void remove_onProvideCustomHeaders(::Meta::WitAi::WitRequest::OnProvideCustomHeadersEvent* value);
    // public System.Void add_onInputStreamReady(System.Action`1<Meta.WitAi.WitRequest> value)
    // Offset: 0x442B7CC
    void add_onInputStreamReady(::System::Action_1<::Meta::WitAi::WitRequest*>* value);
    // public System.Void remove_onInputStreamReady(System.Action`1<Meta.WitAi.WitRequest> value)
    // Offset: 0x442B880
    void remove_onInputStreamReady(::System::Action_1<::Meta::WitAi::WitRequest*>* value);
    // public System.Void add_onPartialTranscription(System.Action`1<System.String> value)
    // Offset: 0x442B934
    void add_onPartialTranscription(::System::Action_1<::StringW>* value);
    // public System.Void remove_onPartialTranscription(System.Action`1<System.String> value)
    // Offset: 0x442B9E8
    void remove_onPartialTranscription(::System::Action_1<::StringW>* value);
    // public System.Void add_onFullTranscription(System.Action`1<System.String> value)
    // Offset: 0x442BA9C
    void add_onFullTranscription(::System::Action_1<::StringW>* value);
    // public System.Void remove_onFullTranscription(System.Action`1<System.String> value)
    // Offset: 0x442BB50
    void remove_onFullTranscription(::System::Action_1<::StringW>* value);
    // public System.Void add_onPartialResponse(System.Action`1<Meta.WitAi.WitRequest> value)
    // Offset: 0x442BC04
    void add_onPartialResponse(::System::Action_1<::Meta::WitAi::WitRequest*>* value);
    // public System.Void remove_onPartialResponse(System.Action`1<Meta.WitAi.WitRequest> value)
    // Offset: 0x442BCB8
    void remove_onPartialResponse(::System::Action_1<::Meta::WitAi::WitRequest*>* value);
    // public System.Void add_onResponse(System.Action`1<Meta.WitAi.WitRequest> value)
    // Offset: 0x442BD6C
    void add_onResponse(::System::Action_1<::Meta::WitAi::WitRequest*>* value);
    // public System.Void remove_onResponse(System.Action`1<Meta.WitAi.WitRequest> value)
    // Offset: 0x442BE20
    void remove_onResponse(::System::Action_1<::Meta::WitAi::WitRequest*>* value);
    // public System.Void .ctor(Meta.WitAi.Data.Configuration.WitConfiguration newConfiguration, System.String newPath, Meta.WitAi.Configuration.WitRequestOptions newOptions, Meta.WitAi.Requests.VoiceServiceRequestEvents newEvents)
    // Offset: 0x442BED4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WitRequest* New_ctor(::Meta::WitAi::Data::Configuration::WitConfiguration* newConfiguration, ::StringW newPath, ::Meta::WitAi::Configuration::WitRequestOptions* newOptions, ::Meta::WitAi::Requests::VoiceServiceRequestEvents* newEvents) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::WitRequest::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WitRequest*, creationType>(newConfiguration, newPath, newOptions, newEvents)));
    }
    // private System.Uri GetUri()
    // Offset: 0x442C5D8
    ::System::Uri* GetUri();
    // private System.Collections.Generic.Dictionary`2<System.String,System.String> GetHeaders()
    // Offset: 0x442C6CC
    ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* GetHeaders();
    // private System.Void StartThreadedRequest(System.Uri uri, System.Collections.Generic.Dictionary`2<System.String,System.String> headers)
    // Offset: 0x442CB84
    void StartThreadedRequest(::System::Uri* uri, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* headers);
    // private System.Void StartResponse()
    // Offset: 0x442D270
    void StartResponse();
    // private System.Void HandleTimeoutMsTimer(System.Object state, System.Boolean timeout)
    // Offset: 0x442D4C0
    void HandleTimeoutMsTimer(::Il2CppObject* state, bool timeout);
    // private System.Void HandleWriteStream(System.IAsyncResult ar)
    // Offset: 0x442D76C
    void HandleWriteStream(::System::IAsyncResult* ar);
    // public System.Void Write(System.Byte[] data, System.Int32 offset, System.Int32 length)
    // Offset: 0x442DB28
    void Write(::ArrayW<uint8_t> data, int offset, int length);
    // private System.Void HandleResponse(System.IAsyncResult asyncResult)
    // Offset: 0x442DDBC
    void HandleResponse(::System::IAsyncResult* asyncResult);
    // private System.Void CheckStatus()
    // Offset: 0x442EB04
    void CheckStatus();
    // private System.String ReadToDelimiter(System.IO.StreamReader reader, System.String delimiter)
    // Offset: 0x442ED94
    ::StringW ReadToDelimiter(::System::IO::StreamReader* reader, ::StringW delimiter);
    // private System.Void ProcessStringResponses(System.String stringResponse)
    // Offset: 0x442EF3C
    void ProcessStringResponses(::StringW stringResponse);
    // private System.Void ProcessStringResponse(System.String stringResponse)
    // Offset: 0x442EC00
    void ProcessStringResponse(::StringW stringResponse);
    // private System.Boolean WaitingForPost()
    // Offset: 0x442DD50
    bool WaitingForPost();
    // private System.Void CloseRequestStream()
    // Offset: 0x442C46C
    void CloseRequestStream();
    // private System.Void CloseActiveStream()
    // Offset: 0x442D578
    void CloseActiveStream();
    // private System.Void <HandleTimeoutMsTimer>b__92_0()
    // Offset: 0x442F634
    void $HandleTimeoutMsTimer$b__92_0();
    // private System.Void <HandleWriteStream>b__93_0()
    // Offset: 0x442F864
    void $HandleWriteStream$b__93_0();
    // private System.Void <HandleWriteStream>b__93_1()
    // Offset: 0x442F88C
    void $HandleWriteStream$b__93_1();
    // private System.Void <HandleWriteStream>b__93_2()
    // Offset: 0x442F8A4
    void $HandleWriteStream$b__93_2();
    // private System.Void <Write>b__94_0()
    // Offset: 0x442F8BC
    void $Write$b__94_0();
    // private System.Void <HandleResponse>b__95_0()
    // Offset: 0x442F910
    void $HandleResponse$b__95_0();
    // public override System.String ToString()
    // Offset: 0x442B68C
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
    // protected override System.Void SetState(Meta.Voice.VoiceRequestState newState)
    // Offset: 0x442C0C8
    // Implemented from: Meta.Voice.NLPRequest`4
    // Base method: System.Void NLPRequest_4::SetState(Meta.Voice.VoiceRequestState newState)
    void SetState(::Meta::Voice::VoiceRequestState newState);
    // protected override System.Void OnInit()
    // Offset: 0x442C12C
    // Implemented from: Meta.Voice.NLPAudioRequest`4
    // Base method: System.Void NLPAudioRequest_4::OnInit()
    void OnInit();
    // protected override System.Void HandleAudioActivation()
    // Offset: 0x442C3F8
    // Implemented from: Meta.Voice.TranscriptionRequest`4
    // Base method: System.Void TranscriptionRequest_4::HandleAudioActivation()
    void HandleAudioActivation();
    // protected override System.Void HandleAudioDeactivation()
    // Offset: 0x442C40C
    // Implemented from: Meta.Voice.TranscriptionRequest`4
    // Base method: System.Void TranscriptionRequest_4::HandleAudioDeactivation()
    void HandleAudioDeactivation();
    // protected override System.String GetSendError()
    // Offset: 0x442C4DC
    // Implemented from: Meta.Voice.NLPRequest`4
    // Base method: System.String NLPRequest_4::GetSendError()
    ::StringW GetSendError();
    // protected override System.Void HandleSend()
    // Offset: 0x442C980
    // Implemented from: Meta.Voice.VoiceRequest`4
    // Base method: System.Void VoiceRequest_4::HandleSend()
    void HandleSend();
    // protected override System.Void OnTranscriptionChanged()
    // Offset: 0x442F354
    // Implemented from: Meta.Voice.TranscriptionRequest`4
    // Base method: System.Void TranscriptionRequest_4::OnTranscriptionChanged()
    void OnTranscriptionChanged();
    // protected override System.Void OnPartialResponse()
    // Offset: 0x442F40C
    // Implemented from: Meta.Voice.NLPAudioRequest`4
    // Base method: System.Void NLPAudioRequest_4::OnPartialResponse()
    void OnPartialResponse();
    // protected override System.Void OnFullResponse()
    // Offset: 0x442F470
    // Implemented from: Meta.Voice.NLPAudioRequest`4
    // Base method: System.Void NLPAudioRequest_4::OnFullResponse()
    void OnFullResponse();
    // protected override System.Void HandleCancel()
    // Offset: 0x442F4B8
    // Implemented from: Meta.Voice.VoiceRequest`4
    // Base method: System.Void VoiceRequest_4::HandleCancel()
    void HandleCancel();
    // protected override System.Void OnComplete()
    // Offset: 0x442F580
    // Implemented from: Meta.Voice.VoiceRequest`4
    // Base method: System.Void VoiceRequest_4::OnComplete()
    void OnComplete();
  }; // Meta.WitAi.WitRequest
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::WitAi::WitRequest::get_Configuration
// Il2CppName: get_Configuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Data::Configuration::WitConfiguration* (Meta::WitAi::WitRequest::*)()>(&Meta::WitAi::WitRequest::get_Configuration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitRequest*), "get_Configuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitRequest::set_Configuration
// Il2CppName: set_Configuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitRequest::*)(::Meta::WitAi::Data::Configuration::WitConfiguration*)>(&Meta::WitAi::WitRequest::set_Configuration)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Data.Configuration", "WitConfiguration")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitRequest*), "set_Configuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitRequest::get_TimeoutMs
// Il2CppName: get_TimeoutMs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Meta::WitAi::WitRequest::*)()>(&Meta::WitAi::WitRequest::get_TimeoutMs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitRequest*), "get_TimeoutMs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitRequest::set_TimeoutMs
// Il2CppName: set_TimeoutMs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitRequest::*)(int)>(&Meta::WitAi::WitRequest::set_TimeoutMs)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitRequest*), "set_TimeoutMs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitRequest::get_AudioEncoding
// Il2CppName: get_AudioEncoding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Data::AudioEncoding* (Meta::WitAi::WitRequest::*)()>(&Meta::WitAi::WitRequest::get_AudioEncoding)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitRequest*), "get_AudioEncoding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitRequest::set_AudioEncoding
// Il2CppName: set_AudioEncoding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitRequest::*)(::Meta::WitAi::Data::AudioEncoding*)>(&Meta::WitAi::WitRequest::set_AudioEncoding)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Data", "AudioEncoding")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitRequest*), "set_AudioEncoding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitRequest::get_audioEncoding
// Il2CppName: get_audioEncoding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Data::AudioEncoding* (Meta::WitAi::WitRequest::*)()>(&Meta::WitAi::WitRequest::get_audioEncoding)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitRequest*), "get_audioEncoding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitRequest::set_audioEncoding
// Il2CppName: set_audioEncoding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitRequest::*)(::Meta::WitAi::Data::AudioEncoding*)>(&Meta::WitAi::WitRequest::set_audioEncoding)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Data", "AudioEncoding")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitRequest*), "set_audioEncoding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitRequest::get_Path
// Il2CppName: get_Path
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Meta::WitAi::WitRequest::*)()>(&Meta::WitAi::WitRequest::get_Path)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitRequest*), "get_Path", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitRequest::set_Path
// Il2CppName: set_Path
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitRequest::*)(::StringW)>(&Meta::WitAi::WitRequest::set_Path)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitRequest*), "set_Path", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitRequest::get_Command
// Il2CppName: get_Command
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Meta::WitAi::WitRequest::*)()>(&Meta::WitAi::WitRequest::get_Command)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitRequest*), "get_Command", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitRequest::set_Command
// Il2CppName: set_Command
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitRequest::*)(::StringW)>(&Meta::WitAi::WitRequest::set_Command)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitRequest*), "set_Command", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitRequest::get_IsPost
// Il2CppName: get_IsPost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::WitRequest::*)()>(&Meta::WitAi::WitRequest::get_IsPost)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitRequest*), "get_IsPost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitRequest::set_IsPost
// Il2CppName: set_IsPost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitRequest::*)(bool)>(&Meta::WitAi::WitRequest::set_IsPost)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitRequest*), "set_IsPost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitRequest::get_queryParams
// Il2CppName: get_queryParams
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Meta::WitAi::Requests::VoiceServiceRequestOptions::QueryParam*> (Meta::WitAi::WitRequest::*)()>(&Meta::WitAi::WitRequest::get_queryParams)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitRequest*), "get_queryParams", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitRequest::get_IsRequestStreamActive
// Il2CppName: get_IsRequestStreamActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::WitRequest::*)()>(&Meta::WitAi::WitRequest::get_IsRequestStreamActive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitRequest*), "get_IsRequestStreamActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitRequest::get_HasResponseStarted
// Il2CppName: get_HasResponseStarted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::WitRequest::*)()>(&Meta::WitAi::WitRequest::get_HasResponseStarted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitRequest*), "get_HasResponseStarted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitRequest::set_HasResponseStarted
// Il2CppName: set_HasResponseStarted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitRequest::*)(bool)>(&Meta::WitAi::WitRequest::set_HasResponseStarted)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitRequest*), "set_HasResponseStarted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitRequest::get_IsInputStreamReady
// Il2CppName: get_IsInputStreamReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::WitRequest::*)()>(&Meta::WitAi::WitRequest::get_IsInputStreamReady)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitRequest*), "get_IsInputStreamReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitRequest::set_IsInputStreamReady
// Il2CppName: set_IsInputStreamReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitRequest::*)(bool)>(&Meta::WitAi::WitRequest::set_IsInputStreamReady)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitRequest*), "set_IsInputStreamReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitRequest::get_StatusDescription
// Il2CppName: get_StatusDescription
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Meta::WitAi::WitRequest::*)()>(&Meta::WitAi::WitRequest::get_StatusDescription)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitRequest*), "get_StatusDescription", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitRequest::set_StatusDescription
// Il2CppName: set_StatusDescription
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitRequest::*)(::StringW)>(&Meta::WitAi::WitRequest::set_StatusDescription)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitRequest*), "set_StatusDescription", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitRequest::add_onProvideCustomHeaders
// Il2CppName: add_onProvideCustomHeaders
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitRequest::*)(::Meta::WitAi::WitRequest::OnProvideCustomHeadersEvent*)>(&Meta::WitAi::WitRequest::add_onProvideCustomHeaders)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Meta.WitAi", "WitRequest/OnProvideCustomHeadersEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitRequest*), "add_onProvideCustomHeaders", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitRequest::remove_onProvideCustomHeaders
// Il2CppName: remove_onProvideCustomHeaders
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitRequest::*)(::Meta::WitAi::WitRequest::OnProvideCustomHeadersEvent*)>(&Meta::WitAi::WitRequest::remove_onProvideCustomHeaders)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Meta.WitAi", "WitRequest/OnProvideCustomHeadersEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitRequest*), "remove_onProvideCustomHeaders", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitRequest::add_onInputStreamReady
// Il2CppName: add_onInputStreamReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitRequest::*)(::System::Action_1<::Meta::WitAi::WitRequest*>*)>(&Meta::WitAi::WitRequest::add_onInputStreamReady)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Meta.WitAi", "WitRequest")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitRequest*), "add_onInputStreamReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitRequest::remove_onInputStreamReady
// Il2CppName: remove_onInputStreamReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitRequest::*)(::System::Action_1<::Meta::WitAi::WitRequest*>*)>(&Meta::WitAi::WitRequest::remove_onInputStreamReady)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Meta.WitAi", "WitRequest")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitRequest*), "remove_onInputStreamReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitRequest::add_onPartialTranscription
// Il2CppName: add_onPartialTranscription
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitRequest::*)(::System::Action_1<::StringW>*)>(&Meta::WitAi::WitRequest::add_onPartialTranscription)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitRequest*), "add_onPartialTranscription", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitRequest::remove_onPartialTranscription
// Il2CppName: remove_onPartialTranscription
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitRequest::*)(::System::Action_1<::StringW>*)>(&Meta::WitAi::WitRequest::remove_onPartialTranscription)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitRequest*), "remove_onPartialTranscription", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitRequest::add_onFullTranscription
// Il2CppName: add_onFullTranscription
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitRequest::*)(::System::Action_1<::StringW>*)>(&Meta::WitAi::WitRequest::add_onFullTranscription)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitRequest*), "add_onFullTranscription", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitRequest::remove_onFullTranscription
// Il2CppName: remove_onFullTranscription
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitRequest::*)(::System::Action_1<::StringW>*)>(&Meta::WitAi::WitRequest::remove_onFullTranscription)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitRequest*), "remove_onFullTranscription", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitRequest::add_onPartialResponse
// Il2CppName: add_onPartialResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitRequest::*)(::System::Action_1<::Meta::WitAi::WitRequest*>*)>(&Meta::WitAi::WitRequest::add_onPartialResponse)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Meta.WitAi", "WitRequest")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitRequest*), "add_onPartialResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitRequest::remove_onPartialResponse
// Il2CppName: remove_onPartialResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitRequest::*)(::System::Action_1<::Meta::WitAi::WitRequest*>*)>(&Meta::WitAi::WitRequest::remove_onPartialResponse)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Meta.WitAi", "WitRequest")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitRequest*), "remove_onPartialResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitRequest::add_onResponse
// Il2CppName: add_onResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitRequest::*)(::System::Action_1<::Meta::WitAi::WitRequest*>*)>(&Meta::WitAi::WitRequest::add_onResponse)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Meta.WitAi", "WitRequest")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitRequest*), "add_onResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitRequest::remove_onResponse
// Il2CppName: remove_onResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitRequest::*)(::System::Action_1<::Meta::WitAi::WitRequest*>*)>(&Meta::WitAi::WitRequest::remove_onResponse)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Meta.WitAi", "WitRequest")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitRequest*), "remove_onResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitRequest::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Meta::WitAi::WitRequest::GetUri
// Il2CppName: GetUri
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Uri* (Meta::WitAi::WitRequest::*)()>(&Meta::WitAi::WitRequest::GetUri)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitRequest*), "GetUri", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitRequest::GetHeaders
// Il2CppName: GetHeaders
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* (Meta::WitAi::WitRequest::*)()>(&Meta::WitAi::WitRequest::GetHeaders)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitRequest*), "GetHeaders", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitRequest::StartThreadedRequest
// Il2CppName: StartThreadedRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitRequest::*)(::System::Uri*, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&Meta::WitAi::WitRequest::StartThreadedRequest)> {
  static const MethodInfo* get() {
    static auto* uri = &::il2cpp_utils::GetClassFromName("System", "Uri")->byval_arg;
    static auto* headers = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitRequest*), "StartThreadedRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uri, headers});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitRequest::StartResponse
// Il2CppName: StartResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitRequest::*)()>(&Meta::WitAi::WitRequest::StartResponse)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitRequest*), "StartResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitRequest::HandleTimeoutMsTimer
// Il2CppName: HandleTimeoutMsTimer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitRequest::*)(::Il2CppObject*, bool)>(&Meta::WitAi::WitRequest::HandleTimeoutMsTimer)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* timeout = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitRequest*), "HandleTimeoutMsTimer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state, timeout});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitRequest::HandleWriteStream
// Il2CppName: HandleWriteStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitRequest::*)(::System::IAsyncResult*)>(&Meta::WitAi::WitRequest::HandleWriteStream)> {
  static const MethodInfo* get() {
    static auto* ar = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitRequest*), "HandleWriteStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ar});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitRequest::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitRequest::*)(::ArrayW<uint8_t>, int, int)>(&Meta::WitAi::WitRequest::Write)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitRequest*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, offset, length});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitRequest::HandleResponse
// Il2CppName: HandleResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitRequest::*)(::System::IAsyncResult*)>(&Meta::WitAi::WitRequest::HandleResponse)> {
  static const MethodInfo* get() {
    static auto* asyncResult = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitRequest*), "HandleResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{asyncResult});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitRequest::CheckStatus
// Il2CppName: CheckStatus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitRequest::*)()>(&Meta::WitAi::WitRequest::CheckStatus)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitRequest*), "CheckStatus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitRequest::ReadToDelimiter
// Il2CppName: ReadToDelimiter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Meta::WitAi::WitRequest::*)(::System::IO::StreamReader*, ::StringW)>(&Meta::WitAi::WitRequest::ReadToDelimiter)> {
  static const MethodInfo* get() {
    static auto* reader = &::il2cpp_utils::GetClassFromName("System.IO", "StreamReader")->byval_arg;
    static auto* delimiter = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitRequest*), "ReadToDelimiter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reader, delimiter});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitRequest::ProcessStringResponses
// Il2CppName: ProcessStringResponses
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitRequest::*)(::StringW)>(&Meta::WitAi::WitRequest::ProcessStringResponses)> {
  static const MethodInfo* get() {
    static auto* stringResponse = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitRequest*), "ProcessStringResponses", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stringResponse});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitRequest::ProcessStringResponse
// Il2CppName: ProcessStringResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitRequest::*)(::StringW)>(&Meta::WitAi::WitRequest::ProcessStringResponse)> {
  static const MethodInfo* get() {
    static auto* stringResponse = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitRequest*), "ProcessStringResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stringResponse});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitRequest::WaitingForPost
// Il2CppName: WaitingForPost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::WitRequest::*)()>(&Meta::WitAi::WitRequest::WaitingForPost)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitRequest*), "WaitingForPost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitRequest::CloseRequestStream
// Il2CppName: CloseRequestStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitRequest::*)()>(&Meta::WitAi::WitRequest::CloseRequestStream)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitRequest*), "CloseRequestStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitRequest::CloseActiveStream
// Il2CppName: CloseActiveStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitRequest::*)()>(&Meta::WitAi::WitRequest::CloseActiveStream)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitRequest*), "CloseActiveStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitRequest::$HandleTimeoutMsTimer$b__92_0
// Il2CppName: <HandleTimeoutMsTimer>b__92_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitRequest::*)()>(&Meta::WitAi::WitRequest::$HandleTimeoutMsTimer$b__92_0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitRequest*), "<HandleTimeoutMsTimer>b__92_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitRequest::$HandleWriteStream$b__93_0
// Il2CppName: <HandleWriteStream>b__93_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitRequest::*)()>(&Meta::WitAi::WitRequest::$HandleWriteStream$b__93_0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitRequest*), "<HandleWriteStream>b__93_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitRequest::$HandleWriteStream$b__93_1
// Il2CppName: <HandleWriteStream>b__93_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitRequest::*)()>(&Meta::WitAi::WitRequest::$HandleWriteStream$b__93_1)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitRequest*), "<HandleWriteStream>b__93_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitRequest::$HandleWriteStream$b__93_2
// Il2CppName: <HandleWriteStream>b__93_2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitRequest::*)()>(&Meta::WitAi::WitRequest::$HandleWriteStream$b__93_2)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitRequest*), "<HandleWriteStream>b__93_2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitRequest::$Write$b__94_0
// Il2CppName: <Write>b__94_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitRequest::*)()>(&Meta::WitAi::WitRequest::$Write$b__94_0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitRequest*), "<Write>b__94_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitRequest::$HandleResponse$b__95_0
// Il2CppName: <HandleResponse>b__95_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitRequest::*)()>(&Meta::WitAi::WitRequest::$HandleResponse$b__95_0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitRequest*), "<HandleResponse>b__95_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitRequest::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Meta::WitAi::WitRequest::*)()>(&Meta::WitAi::WitRequest::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitRequest*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitRequest::SetState
// Il2CppName: SetState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitRequest::*)(::Meta::Voice::VoiceRequestState)>(&Meta::WitAi::WitRequest::SetState)> {
  static const MethodInfo* get() {
    static auto* newState = &::il2cpp_utils::GetClassFromName("Meta.Voice", "VoiceRequestState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitRequest*), "SetState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newState});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitRequest::OnInit
// Il2CppName: OnInit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitRequest::*)()>(&Meta::WitAi::WitRequest::OnInit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitRequest*), "OnInit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitRequest::HandleAudioActivation
// Il2CppName: HandleAudioActivation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitRequest::*)()>(&Meta::WitAi::WitRequest::HandleAudioActivation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitRequest*), "HandleAudioActivation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitRequest::HandleAudioDeactivation
// Il2CppName: HandleAudioDeactivation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitRequest::*)()>(&Meta::WitAi::WitRequest::HandleAudioDeactivation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitRequest*), "HandleAudioDeactivation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitRequest::GetSendError
// Il2CppName: GetSendError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Meta::WitAi::WitRequest::*)()>(&Meta::WitAi::WitRequest::GetSendError)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitRequest*), "GetSendError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitRequest::HandleSend
// Il2CppName: HandleSend
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitRequest::*)()>(&Meta::WitAi::WitRequest::HandleSend)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitRequest*), "HandleSend", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitRequest::OnTranscriptionChanged
// Il2CppName: OnTranscriptionChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitRequest::*)()>(&Meta::WitAi::WitRequest::OnTranscriptionChanged)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitRequest*), "OnTranscriptionChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitRequest::OnPartialResponse
// Il2CppName: OnPartialResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitRequest::*)()>(&Meta::WitAi::WitRequest::OnPartialResponse)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitRequest*), "OnPartialResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitRequest::OnFullResponse
// Il2CppName: OnFullResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitRequest::*)()>(&Meta::WitAi::WitRequest::OnFullResponse)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitRequest*), "OnFullResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitRequest::HandleCancel
// Il2CppName: HandleCancel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitRequest::*)()>(&Meta::WitAi::WitRequest::HandleCancel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitRequest*), "HandleCancel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitRequest::OnComplete
// Il2CppName: OnComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitRequest::*)()>(&Meta::WitAi::WitRequest::OnComplete)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitRequest*), "OnComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
