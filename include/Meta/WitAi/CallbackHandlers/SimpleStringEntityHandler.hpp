// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Meta.WitAi.CallbackHandlers.WitIntentMatcher
#include "Meta/WitAi/CallbackHandlers/WitIntentMatcher.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Meta::WitAi::CallbackHandlers
namespace Meta::WitAi::CallbackHandlers {
  // Forward declaring type: StringEntityMatchEvent
  class StringEntityMatchEvent;
}
// Forward declaring namespace: Meta::WitAi::Json
namespace Meta::WitAi::Json {
  // Forward declaring type: WitResponseNode
  class WitResponseNode;
}
// Completed forward declares
// Type namespace: Meta.WitAi.CallbackHandlers
namespace Meta::WitAi::CallbackHandlers {
  // Forward declaring type: SimpleStringEntityHandler
  class SimpleStringEntityHandler;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::WitAi::CallbackHandlers::SimpleStringEntityHandler);
DEFINE_IL2CPP_ARG_TYPE(::Meta::WitAi::CallbackHandlers::SimpleStringEntityHandler*, "Meta.WitAi.CallbackHandlers", "SimpleStringEntityHandler");
// Type namespace: Meta.WitAi.CallbackHandlers
namespace Meta::WitAi::CallbackHandlers {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: Meta.WitAi.CallbackHandlers.SimpleStringEntityHandler
  // [TokenAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: FFFFFFFF
  class SimpleStringEntityHandler : public ::Meta::WitAi::CallbackHandlers::WitIntentMatcher {
    public:
    // Writing base type padding for base size: 0x3C to desired offset: 0x40
    char ___base_padding[0x4] = {};
    public:
    // public System.String entity
    // Size: 0x8
    // Offset: 0x40
    ::StringW entity;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String format
    // Size: 0x8
    // Offset: 0x48
    ::StringW format;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private Meta.WitAi.CallbackHandlers.StringEntityMatchEvent onIntentEntityTriggered
    // Size: 0x8
    // Offset: 0x50
    ::Meta::WitAi::CallbackHandlers::StringEntityMatchEvent* onIntentEntityTriggered;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::CallbackHandlers::StringEntityMatchEvent*) == 0x8);
    public:
    // Get instance field reference: public System.String entity
    [[deprecated("Use field access instead!")]] ::StringW& dyn_entity();
    // Get instance field reference: public System.String format
    [[deprecated("Use field access instead!")]] ::StringW& dyn_format();
    // Get instance field reference: private Meta.WitAi.CallbackHandlers.StringEntityMatchEvent onIntentEntityTriggered
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::CallbackHandlers::StringEntityMatchEvent*& dyn_onIntentEntityTriggered();
    // public Meta.WitAi.CallbackHandlers.StringEntityMatchEvent get_OnIntentEntityTriggered()
    // Offset: 0x4468A44
    ::Meta::WitAi::CallbackHandlers::StringEntityMatchEvent* get_OnIntentEntityTriggered();
    // protected override System.String OnValidateResponse(Meta.WitAi.Json.WitResponseNode response, System.Boolean isEarlyResponse)
    // Offset: 0x4468A4C
    // Implemented from: Meta.WitAi.CallbackHandlers.WitIntentMatcher
    // Base method: System.String WitIntentMatcher::OnValidateResponse(Meta.WitAi.Json.WitResponseNode response, System.Boolean isEarlyResponse)
    ::StringW OnValidateResponse(::Meta::WitAi::Json::WitResponseNode* response, bool isEarlyResponse);
    // protected override System.Void OnResponseInvalid(Meta.WitAi.Json.WitResponseNode response, System.String error)
    // Offset: 0x4468CE8
    // Implemented from: Meta.WitAi.CallbackHandlers.WitResponseHandler
    // Base method: System.Void WitResponseHandler::OnResponseInvalid(Meta.WitAi.Json.WitResponseNode response, System.String error)
    void OnResponseInvalid(::Meta::WitAi::Json::WitResponseNode* response, ::StringW error);
    // protected override System.Void OnResponseSuccess(Meta.WitAi.Json.WitResponseNode response)
    // Offset: 0x4468CEC
    // Implemented from: Meta.WitAi.CallbackHandlers.WitResponseHandler
    // Base method: System.Void WitResponseHandler::OnResponseSuccess(Meta.WitAi.Json.WitResponseNode response)
    void OnResponseSuccess(::Meta::WitAi::Json::WitResponseNode* response);
    // public System.Void .ctor()
    // Offset: 0x4468DA8
    // Implemented from: Meta.WitAi.CallbackHandlers.WitIntentMatcher
    // Base method: System.Void WitIntentMatcher::.ctor()
    // Base method: System.Void WitResponseHandler::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SimpleStringEntityHandler* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::CallbackHandlers::SimpleStringEntityHandler::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SimpleStringEntityHandler*, creationType>()));
    }
  }; // Meta.WitAi.CallbackHandlers.SimpleStringEntityHandler
  #pragma pack(pop)
  static check_size<sizeof(SimpleStringEntityHandler), 80 + sizeof(::Meta::WitAi::CallbackHandlers::StringEntityMatchEvent*)> __Meta_WitAi_CallbackHandlers_SimpleStringEntityHandlerSizeCheck;
  static_assert(sizeof(SimpleStringEntityHandler) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::WitAi::CallbackHandlers::SimpleStringEntityHandler::get_OnIntentEntityTriggered
// Il2CppName: get_OnIntentEntityTriggered
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::CallbackHandlers::StringEntityMatchEvent* (Meta::WitAi::CallbackHandlers::SimpleStringEntityHandler::*)()>(&Meta::WitAi::CallbackHandlers::SimpleStringEntityHandler::get_OnIntentEntityTriggered)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::CallbackHandlers::SimpleStringEntityHandler*), "get_OnIntentEntityTriggered", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::CallbackHandlers::SimpleStringEntityHandler::OnValidateResponse
// Il2CppName: OnValidateResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Meta::WitAi::CallbackHandlers::SimpleStringEntityHandler::*)(::Meta::WitAi::Json::WitResponseNode*, bool)>(&Meta::WitAi::CallbackHandlers::SimpleStringEntityHandler::OnValidateResponse)> {
  static const MethodInfo* get() {
    static auto* response = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Json", "WitResponseNode")->byval_arg;
    static auto* isEarlyResponse = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::CallbackHandlers::SimpleStringEntityHandler*), "OnValidateResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{response, isEarlyResponse});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::CallbackHandlers::SimpleStringEntityHandler::OnResponseInvalid
// Il2CppName: OnResponseInvalid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::CallbackHandlers::SimpleStringEntityHandler::*)(::Meta::WitAi::Json::WitResponseNode*, ::StringW)>(&Meta::WitAi::CallbackHandlers::SimpleStringEntityHandler::OnResponseInvalid)> {
  static const MethodInfo* get() {
    static auto* response = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Json", "WitResponseNode")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::CallbackHandlers::SimpleStringEntityHandler*), "OnResponseInvalid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{response, error});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::CallbackHandlers::SimpleStringEntityHandler::OnResponseSuccess
// Il2CppName: OnResponseSuccess
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::CallbackHandlers::SimpleStringEntityHandler::*)(::Meta::WitAi::Json::WitResponseNode*)>(&Meta::WitAi::CallbackHandlers::SimpleStringEntityHandler::OnResponseSuccess)> {
  static const MethodInfo* get() {
    static auto* response = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Json", "WitResponseNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::CallbackHandlers::SimpleStringEntityHandler*), "OnResponseSuccess", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{response});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::CallbackHandlers::SimpleStringEntityHandler::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
