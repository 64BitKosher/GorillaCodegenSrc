// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Meta::WitAi
namespace Meta::WitAi {
  // Forward declaring type: VoiceService
  class VoiceService;
}
// Forward declaring namespace: Meta::WitAi::Requests
namespace Meta::WitAi::Requests {
  // Forward declaring type: VoiceServiceRequest
  class VoiceServiceRequest;
}
// Forward declaring namespace: Meta::WitAi::Data
namespace Meta::WitAi::Data {
  // Forward declaring type: VoiceSession
  class VoiceSession;
}
// Forward declaring namespace: Meta::WitAi::Json
namespace Meta::WitAi::Json {
  // Forward declaring type: WitResponseNode
  class WitResponseNode;
}
// Forward declaring namespace: Meta::WitAi::CallbackHandlers
namespace Meta::WitAi::CallbackHandlers {
  // Forward declaring type: ConfidenceRange
  class ConfidenceRange;
}
// Completed forward declares
// Type namespace: Meta.WitAi.CallbackHandlers
namespace Meta::WitAi::CallbackHandlers {
  // Forward declaring type: WitResponseHandler
  class WitResponseHandler;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::WitAi::CallbackHandlers::WitResponseHandler);
DEFINE_IL2CPP_ARG_TYPE(::Meta::WitAi::CallbackHandlers::WitResponseHandler*, "Meta.WitAi.CallbackHandlers", "WitResponseHandler");
// Type namespace: Meta.WitAi.CallbackHandlers
namespace Meta::WitAi::CallbackHandlers {
  // Size: 0x2A
  #pragma pack(push, 1)
  // Autogenerated type: Meta.WitAi.CallbackHandlers.WitResponseHandler
  // [TokenAttribute] Offset: FFFFFFFF
  class WitResponseHandler : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public Meta.WitAi.VoiceService Voice
    // Size: 0x8
    // Offset: 0x20
    ::Meta::WitAi::VoiceService* Voice;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::VoiceService*) == 0x8);
    // public System.Boolean ValidateEarly
    // Size: 0x1
    // Offset: 0x28
    bool ValidateEarly;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _validated
    // Size: 0x1
    // Offset: 0x29
    bool validated;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: public Meta.WitAi.VoiceService Voice
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::VoiceService*& dyn_Voice();
    // Get instance field reference: public System.Boolean ValidateEarly
    [[deprecated("Use field access instead!")]] bool& dyn_ValidateEarly();
    // Get instance field reference: private System.Boolean _validated
    [[deprecated("Use field access instead!")]] bool& dyn__validated();
    // private System.Void OnValidate()
    // Offset: 0x4469518
    void OnValidate();
    // protected System.Void OnEnable()
    // Offset: 0x4468F38
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x44692A4
    void OnDisable();
    // protected System.Void OnRequestSend(Meta.WitAi.Requests.VoiceServiceRequest request)
    // Offset: 0x44695C0
    void OnRequestSend(::Meta::WitAi::Requests::VoiceServiceRequest* request);
    // protected System.Void HandleValidateEarlyResponse(Meta.WitAi.Data.VoiceSession session)
    // Offset: 0x44695C8
    void HandleValidateEarlyResponse(::Meta::WitAi::Data::VoiceSession* session);
    // protected System.Void HandleFinalResponse(Meta.WitAi.Json.WitResponseNode response)
    // Offset: 0x4469640
    void HandleFinalResponse(::Meta::WitAi::Json::WitResponseNode* response);
    // protected System.String OnValidateResponse(Meta.WitAi.Json.WitResponseNode response, System.Boolean isEarlyResponse)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::StringW OnValidateResponse(::Meta::WitAi::Json::WitResponseNode* response, bool isEarlyResponse);
    // protected System.Void OnResponseInvalid(Meta.WitAi.Json.WitResponseNode response, System.String error)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnResponseInvalid(::Meta::WitAi::Json::WitResponseNode* response, ::StringW error);
    // protected System.Void OnResponseSuccess(Meta.WitAi.Json.WitResponseNode response)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnResponseSuccess(::Meta::WitAi::Json::WitResponseNode* response);
    // static public System.Boolean RefreshConfidenceRange(System.Single confidence, Meta.WitAi.CallbackHandlers.ConfidenceRange[] confidenceRanges, System.Boolean allowConfidenceOverlap)
    // Offset: 0x4468898
    static bool RefreshConfidenceRange(float confidence, ::ArrayW<::Meta::WitAi::CallbackHandlers::ConfidenceRange*> confidenceRanges, bool allowConfidenceOverlap);
    // protected System.Void .ctor()
    // Offset: 0x4468794
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WitResponseHandler* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::CallbackHandlers::WitResponseHandler::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WitResponseHandler*, creationType>()));
    }
  }; // Meta.WitAi.CallbackHandlers.WitResponseHandler
  #pragma pack(pop)
  static check_size<sizeof(WitResponseHandler), 41 + sizeof(bool)> __Meta_WitAi_CallbackHandlers_WitResponseHandlerSizeCheck;
  static_assert(sizeof(WitResponseHandler) == 0x2A);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::WitAi::CallbackHandlers::WitResponseHandler::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::CallbackHandlers::WitResponseHandler::*)()>(&Meta::WitAi::CallbackHandlers::WitResponseHandler::OnValidate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::CallbackHandlers::WitResponseHandler*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::CallbackHandlers::WitResponseHandler::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::CallbackHandlers::WitResponseHandler::*)()>(&Meta::WitAi::CallbackHandlers::WitResponseHandler::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::CallbackHandlers::WitResponseHandler*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::CallbackHandlers::WitResponseHandler::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::CallbackHandlers::WitResponseHandler::*)()>(&Meta::WitAi::CallbackHandlers::WitResponseHandler::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::CallbackHandlers::WitResponseHandler*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::CallbackHandlers::WitResponseHandler::OnRequestSend
// Il2CppName: OnRequestSend
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::CallbackHandlers::WitResponseHandler::*)(::Meta::WitAi::Requests::VoiceServiceRequest*)>(&Meta::WitAi::CallbackHandlers::WitResponseHandler::OnRequestSend)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Requests", "VoiceServiceRequest")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::CallbackHandlers::WitResponseHandler*), "OnRequestSend", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::CallbackHandlers::WitResponseHandler::HandleValidateEarlyResponse
// Il2CppName: HandleValidateEarlyResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::CallbackHandlers::WitResponseHandler::*)(::Meta::WitAi::Data::VoiceSession*)>(&Meta::WitAi::CallbackHandlers::WitResponseHandler::HandleValidateEarlyResponse)> {
  static const MethodInfo* get() {
    static auto* session = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Data", "VoiceSession")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::CallbackHandlers::WitResponseHandler*), "HandleValidateEarlyResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{session});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::CallbackHandlers::WitResponseHandler::HandleFinalResponse
// Il2CppName: HandleFinalResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::CallbackHandlers::WitResponseHandler::*)(::Meta::WitAi::Json::WitResponseNode*)>(&Meta::WitAi::CallbackHandlers::WitResponseHandler::HandleFinalResponse)> {
  static const MethodInfo* get() {
    static auto* response = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Json", "WitResponseNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::CallbackHandlers::WitResponseHandler*), "HandleFinalResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{response});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::CallbackHandlers::WitResponseHandler::OnValidateResponse
// Il2CppName: OnValidateResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Meta::WitAi::CallbackHandlers::WitResponseHandler::*)(::Meta::WitAi::Json::WitResponseNode*, bool)>(&Meta::WitAi::CallbackHandlers::WitResponseHandler::OnValidateResponse)> {
  static const MethodInfo* get() {
    static auto* response = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Json", "WitResponseNode")->byval_arg;
    static auto* isEarlyResponse = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::CallbackHandlers::WitResponseHandler*), "OnValidateResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{response, isEarlyResponse});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::CallbackHandlers::WitResponseHandler::OnResponseInvalid
// Il2CppName: OnResponseInvalid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::CallbackHandlers::WitResponseHandler::*)(::Meta::WitAi::Json::WitResponseNode*, ::StringW)>(&Meta::WitAi::CallbackHandlers::WitResponseHandler::OnResponseInvalid)> {
  static const MethodInfo* get() {
    static auto* response = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Json", "WitResponseNode")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::CallbackHandlers::WitResponseHandler*), "OnResponseInvalid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{response, error});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::CallbackHandlers::WitResponseHandler::OnResponseSuccess
// Il2CppName: OnResponseSuccess
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::CallbackHandlers::WitResponseHandler::*)(::Meta::WitAi::Json::WitResponseNode*)>(&Meta::WitAi::CallbackHandlers::WitResponseHandler::OnResponseSuccess)> {
  static const MethodInfo* get() {
    static auto* response = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Json", "WitResponseNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::CallbackHandlers::WitResponseHandler*), "OnResponseSuccess", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{response});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::CallbackHandlers::WitResponseHandler::RefreshConfidenceRange
// Il2CppName: RefreshConfidenceRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(float, ::ArrayW<::Meta::WitAi::CallbackHandlers::ConfidenceRange*>, bool)>(&Meta::WitAi::CallbackHandlers::WitResponseHandler::RefreshConfidenceRange)> {
  static const MethodInfo* get() {
    static auto* confidence = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* confidenceRanges = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Meta.WitAi.CallbackHandlers", "ConfidenceRange"), 1)->byval_arg;
    static auto* allowConfidenceOverlap = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::CallbackHandlers::WitResponseHandler*), "RefreshConfidenceRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{confidence, confidenceRanges, allowConfidenceOverlap});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::CallbackHandlers::WitResponseHandler::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
