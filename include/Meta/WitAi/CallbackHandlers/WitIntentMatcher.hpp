// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Meta.WitAi.CallbackHandlers.WitResponseHandler
#include "Meta/WitAi/CallbackHandlers/WitResponseHandler.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Meta::WitAi::Json
namespace Meta::WitAi::Json {
  // Forward declaring type: WitResponseNode
  class WitResponseNode;
}
// Completed forward declares
// Type namespace: Meta.WitAi.CallbackHandlers
namespace Meta::WitAi::CallbackHandlers {
  // Forward declaring type: WitIntentMatcher
  class WitIntentMatcher;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::WitAi::CallbackHandlers::WitIntentMatcher);
DEFINE_IL2CPP_ARG_TYPE(::Meta::WitAi::CallbackHandlers::WitIntentMatcher*, "Meta.WitAi.CallbackHandlers", "WitIntentMatcher");
// Type namespace: Meta.WitAi.CallbackHandlers
namespace Meta::WitAi::CallbackHandlers {
  // Size: 0x3C
  #pragma pack(push, 1)
  // Autogenerated type: Meta.WitAi.CallbackHandlers.WitIntentMatcher
  // [TokenAttribute] Offset: FFFFFFFF
  class WitIntentMatcher : public ::Meta::WitAi::CallbackHandlers::WitResponseHandler {
    public:
    // Writing base type padding for base size: 0x2A to desired offset: 0x30
    char ___base_padding[0x6] = {};
    public:
    // public System.String intent
    // Size: 0x8
    // Offset: 0x30
    ::StringW intent;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Single confidenceThreshold
    // Size: 0x4
    // Offset: 0x38
    float confidenceThreshold;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: public System.String intent
    [[deprecated("Use field access instead!")]] ::StringW& dyn_intent();
    // Get instance field reference: public System.Single confidenceThreshold
    [[deprecated("Use field access instead!")]] float& dyn_confidenceThreshold();
    // protected override System.String OnValidateResponse(Meta.WitAi.Json.WitResponseNode response, System.Boolean isEarlyResponse)
    // Offset: 0x4468B08
    // Implemented from: Meta.WitAi.CallbackHandlers.WitResponseHandler
    // Base method: System.String WitResponseHandler::OnValidateResponse(Meta.WitAi.Json.WitResponseNode response, System.Boolean isEarlyResponse)
    ::StringW OnValidateResponse(::Meta::WitAi::Json::WitResponseNode* response, bool isEarlyResponse);
    // protected override System.Void OnEnable()
    // Offset: 0x4468E64
    // Implemented from: Meta.WitAi.CallbackHandlers.WitResponseHandler
    // Base method: System.Void WitResponseHandler::OnEnable()
    void OnEnable();
    // protected override System.Void OnDisable()
    // Offset: 0x446921C
    // Implemented from: Meta.WitAi.CallbackHandlers.WitResponseHandler
    // Base method: System.Void WitResponseHandler::OnDisable()
    void OnDisable();
    // protected System.Void .ctor()
    // Offset: 0x4468A30
    // Implemented from: Meta.WitAi.CallbackHandlers.WitResponseHandler
    // Base method: System.Void WitResponseHandler::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WitIntentMatcher* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::CallbackHandlers::WitIntentMatcher::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WitIntentMatcher*, creationType>()));
    }
  }; // Meta.WitAi.CallbackHandlers.WitIntentMatcher
  #pragma pack(pop)
  static check_size<sizeof(WitIntentMatcher), 56 + sizeof(float)> __Meta_WitAi_CallbackHandlers_WitIntentMatcherSizeCheck;
  static_assert(sizeof(WitIntentMatcher) == 0x3C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::WitAi::CallbackHandlers::WitIntentMatcher::OnValidateResponse
// Il2CppName: OnValidateResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Meta::WitAi::CallbackHandlers::WitIntentMatcher::*)(::Meta::WitAi::Json::WitResponseNode*, bool)>(&Meta::WitAi::CallbackHandlers::WitIntentMatcher::OnValidateResponse)> {
  static const MethodInfo* get() {
    static auto* response = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Json", "WitResponseNode")->byval_arg;
    static auto* isEarlyResponse = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::CallbackHandlers::WitIntentMatcher*), "OnValidateResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{response, isEarlyResponse});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::CallbackHandlers::WitIntentMatcher::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::CallbackHandlers::WitIntentMatcher::*)()>(&Meta::WitAi::CallbackHandlers::WitIntentMatcher::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::CallbackHandlers::WitIntentMatcher*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::CallbackHandlers::WitIntentMatcher::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::CallbackHandlers::WitIntentMatcher::*)()>(&Meta::WitAi::CallbackHandlers::WitIntentMatcher::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::CallbackHandlers::WitIntentMatcher*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::CallbackHandlers::WitIntentMatcher::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
