// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Meta.WitAi.CallbackHandlers.WitIntentMatcher
#include "Meta/WitAi/CallbackHandlers/WitIntentMatcher.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Meta::WitAi::CallbackHandlers
namespace Meta::WitAi::CallbackHandlers {
  // Forward declaring type: ValuePathMatcher
  class ValuePathMatcher;
  // Forward declaring type: FormattedValueEvents
  class FormattedValueEvents;
  // Forward declaring type: MultiValueEvent
  class MultiValueEvent;
}
// Forward declaring namespace: Meta::WitAi::Utilities
namespace Meta::WitAi::Utilities {
  // Forward declaring type: StringEvent
  class StringEvent;
}
// Forward declaring namespace: System::Text::RegularExpressions
namespace System::Text::RegularExpressions {
  // Forward declaring type: Regex
  class Regex;
}
// Forward declaring namespace: Meta::WitAi::Json
namespace Meta::WitAi::Json {
  // Forward declaring type: WitResponseNode
  class WitResponseNode;
}
// Completed forward declares
// Type namespace: Meta.WitAi.CallbackHandlers
namespace Meta::WitAi::CallbackHandlers {
  // Forward declaring type: WitResponseMatcher
  class WitResponseMatcher;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::WitAi::CallbackHandlers::WitResponseMatcher);
DEFINE_IL2CPP_ARG_TYPE(::Meta::WitAi::CallbackHandlers::WitResponseMatcher*, "Meta.WitAi.CallbackHandlers", "WitResponseMatcher");
// Type namespace: Meta.WitAi.CallbackHandlers
namespace Meta::WitAi::CallbackHandlers {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: Meta.WitAi.CallbackHandlers.WitResponseMatcher
  // [TokenAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: FFFFFFFF
  class WitResponseMatcher : public ::Meta::WitAi::CallbackHandlers::WitIntentMatcher {
    public:
    // Writing base type padding for base size: 0x3C to desired offset: 0x40
    char ___base_padding[0x4] = {};
    public:
    // public Meta.WitAi.CallbackHandlers.ValuePathMatcher[] valueMatchers
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<::Meta::WitAi::CallbackHandlers::ValuePathMatcher*> valueMatchers;
    // Field size check
    static_assert(sizeof(::ArrayW<::Meta::WitAi::CallbackHandlers::ValuePathMatcher*>) == 0x8);
    // private Meta.WitAi.CallbackHandlers.FormattedValueEvents[] formattedValueEvents
    // Size: 0x8
    // Offset: 0x48
    ::ArrayW<::Meta::WitAi::CallbackHandlers::FormattedValueEvents*> formattedValueEvents;
    // Field size check
    static_assert(sizeof(::ArrayW<::Meta::WitAi::CallbackHandlers::FormattedValueEvents*>) == 0x8);
    // private Meta.WitAi.CallbackHandlers.MultiValueEvent onMultiValueEvent
    // Size: 0x8
    // Offset: 0x50
    ::Meta::WitAi::CallbackHandlers::MultiValueEvent* onMultiValueEvent;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::CallbackHandlers::MultiValueEvent*) == 0x8);
    // private Meta.WitAi.Utilities.StringEvent onDidNotMatch
    // Size: 0x8
    // Offset: 0x58
    ::Meta::WitAi::Utilities::StringEvent* onDidNotMatch;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::Utilities::StringEvent*) == 0x8);
    // private Meta.WitAi.Utilities.StringEvent onOutOfDomain
    // Size: 0x8
    // Offset: 0x60
    ::Meta::WitAi::Utilities::StringEvent* onOutOfDomain;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::Utilities::StringEvent*) == 0x8);
    public:
    // Get static field: static private System.Text.RegularExpressions.Regex valueRegex
    static ::System::Text::RegularExpressions::Regex* _get_valueRegex();
    // Set static field: static private System.Text.RegularExpressions.Regex valueRegex
    static void _set_valueRegex(::System::Text::RegularExpressions::Regex* value);
    // Get instance field reference: public Meta.WitAi.CallbackHandlers.ValuePathMatcher[] valueMatchers
    [[deprecated("Use field access instead!")]] ::ArrayW<::Meta::WitAi::CallbackHandlers::ValuePathMatcher*>& dyn_valueMatchers();
    // Get instance field reference: private Meta.WitAi.CallbackHandlers.FormattedValueEvents[] formattedValueEvents
    [[deprecated("Use field access instead!")]] ::ArrayW<::Meta::WitAi::CallbackHandlers::FormattedValueEvents*>& dyn_formattedValueEvents();
    // Get instance field reference: private Meta.WitAi.CallbackHandlers.MultiValueEvent onMultiValueEvent
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::CallbackHandlers::MultiValueEvent*& dyn_onMultiValueEvent();
    // Get instance field reference: private Meta.WitAi.Utilities.StringEvent onDidNotMatch
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::Utilities::StringEvent*& dyn_onDidNotMatch();
    // Get instance field reference: private Meta.WitAi.Utilities.StringEvent onOutOfDomain
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::Utilities::StringEvent*& dyn_onOutOfDomain();
    // private System.Boolean ValueMatches(Meta.WitAi.Json.WitResponseNode response)
    // Offset: 0x4469764
    bool ValueMatches(::Meta::WitAi::Json::WitResponseNode* response);
    // private System.Boolean ValueMatches(Meta.WitAi.Json.WitResponseNode response, Meta.WitAi.CallbackHandlers.ValuePathMatcher matcher)
    // Offset: 0x4469EB8
    bool ValueMatches(::Meta::WitAi::Json::WitResponseNode* response, ::Meta::WitAi::CallbackHandlers::ValuePathMatcher* matcher);
    // private System.Boolean CompareDouble(System.String value, Meta.WitAi.CallbackHandlers.ValuePathMatcher matcher)
    // Offset: 0x446A208
    bool CompareDouble(::StringW value, ::Meta::WitAi::CallbackHandlers::ValuePathMatcher* matcher);
    // private System.Boolean CompareFloat(System.String value, Meta.WitAi.CallbackHandlers.ValuePathMatcher matcher)
    // Offset: 0x446A0BC
    bool CompareFloat(::StringW value, ::Meta::WitAi::CallbackHandlers::ValuePathMatcher* matcher);
    // private System.Boolean CompareInt(System.String value, Meta.WitAi.CallbackHandlers.ValuePathMatcher matcher)
    // Offset: 0x4469FE8
    bool CompareInt(::StringW value, ::Meta::WitAi::CallbackHandlers::ValuePathMatcher* matcher);
    // static private System.Void .cctor()
    // Offset: 0x446A464
    static void _cctor();
    // protected override System.String OnValidateResponse(Meta.WitAi.Json.WitResponseNode response, System.Boolean isEarlyResponse)
    // Offset: 0x44696B8
    // Implemented from: Meta.WitAi.CallbackHandlers.WitIntentMatcher
    // Base method: System.String WitIntentMatcher::OnValidateResponse(Meta.WitAi.Json.WitResponseNode response, System.Boolean isEarlyResponse)
    ::StringW OnValidateResponse(::Meta::WitAi::Json::WitResponseNode* response, bool isEarlyResponse);
    // protected override System.Void OnResponseInvalid(Meta.WitAi.Json.WitResponseNode response, System.String error)
    // Offset: 0x44697D8
    // Implemented from: Meta.WitAi.CallbackHandlers.WitResponseHandler
    // Base method: System.Void WitResponseHandler::OnResponseInvalid(Meta.WitAi.Json.WitResponseNode response, System.String error)
    void OnResponseInvalid(::Meta::WitAi::Json::WitResponseNode* response, ::StringW error);
    // protected override System.Void OnResponseSuccess(Meta.WitAi.Json.WitResponseNode response)
    // Offset: 0x44698C0
    // Implemented from: Meta.WitAi.CallbackHandlers.WitResponseHandler
    // Base method: System.Void WitResponseHandler::OnResponseSuccess(Meta.WitAi.Json.WitResponseNode response)
    void OnResponseSuccess(::Meta::WitAi::Json::WitResponseNode* response);
    // public System.Void .ctor()
    // Offset: 0x446A344
    // Implemented from: Meta.WitAi.CallbackHandlers.WitIntentMatcher
    // Base method: System.Void WitIntentMatcher::.ctor()
    // Base method: System.Void WitResponseHandler::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WitResponseMatcher* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::CallbackHandlers::WitResponseMatcher::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WitResponseMatcher*, creationType>()));
    }
  }; // Meta.WitAi.CallbackHandlers.WitResponseMatcher
  #pragma pack(pop)
  static check_size<sizeof(WitResponseMatcher), 96 + sizeof(::Meta::WitAi::Utilities::StringEvent*)> __Meta_WitAi_CallbackHandlers_WitResponseMatcherSizeCheck;
  static_assert(sizeof(WitResponseMatcher) == 0x68);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::WitAi::CallbackHandlers::WitResponseMatcher::ValueMatches
// Il2CppName: ValueMatches
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::CallbackHandlers::WitResponseMatcher::*)(::Meta::WitAi::Json::WitResponseNode*)>(&Meta::WitAi::CallbackHandlers::WitResponseMatcher::ValueMatches)> {
  static const MethodInfo* get() {
    static auto* response = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Json", "WitResponseNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::CallbackHandlers::WitResponseMatcher*), "ValueMatches", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{response});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::CallbackHandlers::WitResponseMatcher::ValueMatches
// Il2CppName: ValueMatches
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::CallbackHandlers::WitResponseMatcher::*)(::Meta::WitAi::Json::WitResponseNode*, ::Meta::WitAi::CallbackHandlers::ValuePathMatcher*)>(&Meta::WitAi::CallbackHandlers::WitResponseMatcher::ValueMatches)> {
  static const MethodInfo* get() {
    static auto* response = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Json", "WitResponseNode")->byval_arg;
    static auto* matcher = &::il2cpp_utils::GetClassFromName("Meta.WitAi.CallbackHandlers", "ValuePathMatcher")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::CallbackHandlers::WitResponseMatcher*), "ValueMatches", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{response, matcher});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::CallbackHandlers::WitResponseMatcher::CompareDouble
// Il2CppName: CompareDouble
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::CallbackHandlers::WitResponseMatcher::*)(::StringW, ::Meta::WitAi::CallbackHandlers::ValuePathMatcher*)>(&Meta::WitAi::CallbackHandlers::WitResponseMatcher::CompareDouble)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* matcher = &::il2cpp_utils::GetClassFromName("Meta.WitAi.CallbackHandlers", "ValuePathMatcher")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::CallbackHandlers::WitResponseMatcher*), "CompareDouble", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, matcher});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::CallbackHandlers::WitResponseMatcher::CompareFloat
// Il2CppName: CompareFloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::CallbackHandlers::WitResponseMatcher::*)(::StringW, ::Meta::WitAi::CallbackHandlers::ValuePathMatcher*)>(&Meta::WitAi::CallbackHandlers::WitResponseMatcher::CompareFloat)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* matcher = &::il2cpp_utils::GetClassFromName("Meta.WitAi.CallbackHandlers", "ValuePathMatcher")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::CallbackHandlers::WitResponseMatcher*), "CompareFloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, matcher});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::CallbackHandlers::WitResponseMatcher::CompareInt
// Il2CppName: CompareInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::CallbackHandlers::WitResponseMatcher::*)(::StringW, ::Meta::WitAi::CallbackHandlers::ValuePathMatcher*)>(&Meta::WitAi::CallbackHandlers::WitResponseMatcher::CompareInt)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* matcher = &::il2cpp_utils::GetClassFromName("Meta.WitAi.CallbackHandlers", "ValuePathMatcher")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::CallbackHandlers::WitResponseMatcher*), "CompareInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, matcher});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::CallbackHandlers::WitResponseMatcher::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Meta::WitAi::CallbackHandlers::WitResponseMatcher::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::CallbackHandlers::WitResponseMatcher*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::CallbackHandlers::WitResponseMatcher::OnValidateResponse
// Il2CppName: OnValidateResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Meta::WitAi::CallbackHandlers::WitResponseMatcher::*)(::Meta::WitAi::Json::WitResponseNode*, bool)>(&Meta::WitAi::CallbackHandlers::WitResponseMatcher::OnValidateResponse)> {
  static const MethodInfo* get() {
    static auto* response = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Json", "WitResponseNode")->byval_arg;
    static auto* isEarlyResponse = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::CallbackHandlers::WitResponseMatcher*), "OnValidateResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{response, isEarlyResponse});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::CallbackHandlers::WitResponseMatcher::OnResponseInvalid
// Il2CppName: OnResponseInvalid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::CallbackHandlers::WitResponseMatcher::*)(::Meta::WitAi::Json::WitResponseNode*, ::StringW)>(&Meta::WitAi::CallbackHandlers::WitResponseMatcher::OnResponseInvalid)> {
  static const MethodInfo* get() {
    static auto* response = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Json", "WitResponseNode")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::CallbackHandlers::WitResponseMatcher*), "OnResponseInvalid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{response, error});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::CallbackHandlers::WitResponseMatcher::OnResponseSuccess
// Il2CppName: OnResponseSuccess
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::CallbackHandlers::WitResponseMatcher::*)(::Meta::WitAi::Json::WitResponseNode*)>(&Meta::WitAi::CallbackHandlers::WitResponseMatcher::OnResponseSuccess)> {
  static const MethodInfo* get() {
    static auto* response = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Json", "WitResponseNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::CallbackHandlers::WitResponseMatcher*), "OnResponseSuccess", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{response});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::CallbackHandlers::WitResponseMatcher::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
