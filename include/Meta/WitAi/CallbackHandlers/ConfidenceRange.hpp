// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Events
namespace UnityEngine::Events {
  // Forward declaring type: UnityEvent
  class UnityEvent;
}
// Completed forward declares
// Type namespace: Meta.WitAi.CallbackHandlers
namespace Meta::WitAi::CallbackHandlers {
  // Forward declaring type: ConfidenceRange
  class ConfidenceRange;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::WitAi::CallbackHandlers::ConfidenceRange);
DEFINE_IL2CPP_ARG_TYPE(::Meta::WitAi::CallbackHandlers::ConfidenceRange*, "Meta.WitAi.CallbackHandlers", "ConfidenceRange");
// Type namespace: Meta.WitAi.CallbackHandlers
namespace Meta::WitAi::CallbackHandlers {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Meta.WitAi.CallbackHandlers.ConfidenceRange
  // [TokenAttribute] Offset: FFFFFFFF
  class ConfidenceRange : public ::Il2CppObject {
    public:
    public:
    // public System.Single minConfidence
    // Size: 0x4
    // Offset: 0x10
    float minConfidence;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single maxConfidence
    // Size: 0x4
    // Offset: 0x14
    float maxConfidence;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Events.UnityEvent onWithinConfidenceRange
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Events::UnityEvent* onWithinConfidenceRange;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    // public UnityEngine.Events.UnityEvent onOutsideConfidenceRange
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Events::UnityEvent* onOutsideConfidenceRange;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    public:
    // Get instance field reference: public System.Single minConfidence
    [[deprecated("Use field access instead!")]] float& dyn_minConfidence();
    // Get instance field reference: public System.Single maxConfidence
    [[deprecated("Use field access instead!")]] float& dyn_maxConfidence();
    // Get instance field reference: public UnityEngine.Events.UnityEvent onWithinConfidenceRange
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn_onWithinConfidenceRange();
    // Get instance field reference: public UnityEngine.Events.UnityEvent onOutsideConfidenceRange
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn_onOutsideConfidenceRange();
    // public System.Void .ctor()
    // Offset: 0x44684F4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ConfidenceRange* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::CallbackHandlers::ConfidenceRange::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ConfidenceRange*, creationType>()));
    }
  }; // Meta.WitAi.CallbackHandlers.ConfidenceRange
  #pragma pack(pop)
  static check_size<sizeof(ConfidenceRange), 32 + sizeof(::UnityEngine::Events::UnityEvent*)> __Meta_WitAi_CallbackHandlers_ConfidenceRangeSizeCheck;
  static_assert(sizeof(ConfidenceRange) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::WitAi::CallbackHandlers::ConfidenceRange::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
