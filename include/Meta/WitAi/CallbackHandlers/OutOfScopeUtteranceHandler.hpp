// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Meta.WitAi.CallbackHandlers.WitResponseHandler
#include "Meta/WitAi/CallbackHandlers/WitResponseHandler.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Meta::WitAi::Utilities
namespace Meta::WitAi::Utilities {
  // Forward declaring type: StringEvent
  class StringEvent;
}
// Forward declaring namespace: Meta::WitAi::Json
namespace Meta::WitAi::Json {
  // Forward declaring type: WitResponseNode
  class WitResponseNode;
}
// Completed forward declares
// Type namespace: Meta.WitAi.CallbackHandlers
namespace Meta::WitAi::CallbackHandlers {
  // Forward declaring type: OutOfScopeUtteranceHandler
  class OutOfScopeUtteranceHandler;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::WitAi::CallbackHandlers::OutOfScopeUtteranceHandler);
DEFINE_IL2CPP_ARG_TYPE(::Meta::WitAi::CallbackHandlers::OutOfScopeUtteranceHandler*, "Meta.WitAi.CallbackHandlers", "OutOfScopeUtteranceHandler");
// Type namespace: Meta.WitAi.CallbackHandlers
namespace Meta::WitAi::CallbackHandlers {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: Meta.WitAi.CallbackHandlers.OutOfScopeUtteranceHandler
  // [TokenAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: FFFFFFFF
  class OutOfScopeUtteranceHandler : public ::Meta::WitAi::CallbackHandlers::WitResponseHandler {
    public:
    // Writing base type padding for base size: 0x2A to desired offset: 0x2C
    char ___base_padding[0x2] = {};
    public:
    // private System.Single confidenceThreshold
    // Size: 0x4
    // Offset: 0x2C
    float confidenceThreshold;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private Meta.WitAi.Utilities.StringEvent onOutOfDomain
    // Size: 0x8
    // Offset: 0x30
    ::Meta::WitAi::Utilities::StringEvent* onOutOfDomain;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::Utilities::StringEvent*) == 0x8);
    public:
    // Get instance field reference: private System.Single confidenceThreshold
    [[deprecated("Use field access instead!")]] float& dyn_confidenceThreshold();
    // Get instance field reference: private Meta.WitAi.Utilities.StringEvent onOutOfDomain
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::Utilities::StringEvent*& dyn_onOutOfDomain();
    // protected override System.String OnValidateResponse(Meta.WitAi.Json.WitResponseNode response, System.Boolean isEarlyResponse)
    // Offset: 0x4468584
    // Implemented from: Meta.WitAi.CallbackHandlers.WitResponseHandler
    // Base method: System.String WitResponseHandler::OnValidateResponse(Meta.WitAi.Json.WitResponseNode response, System.Boolean isEarlyResponse)
    ::StringW OnValidateResponse(::Meta::WitAi::Json::WitResponseNode* response, bool isEarlyResponse);
    // protected override System.Void OnResponseInvalid(Meta.WitAi.Json.WitResponseNode response, System.String error)
    // Offset: 0x44686B4
    // Implemented from: Meta.WitAi.CallbackHandlers.WitResponseHandler
    // Base method: System.Void WitResponseHandler::OnResponseInvalid(Meta.WitAi.Json.WitResponseNode response, System.String error)
    void OnResponseInvalid(::Meta::WitAi::Json::WitResponseNode* response, ::StringW error);
    // protected override System.Void OnResponseSuccess(Meta.WitAi.Json.WitResponseNode response)
    // Offset: 0x44686B8
    // Implemented from: Meta.WitAi.CallbackHandlers.WitResponseHandler
    // Base method: System.Void WitResponseHandler::OnResponseSuccess(Meta.WitAi.Json.WitResponseNode response)
    void OnResponseSuccess(::Meta::WitAi::Json::WitResponseNode* response);
    // public System.Void .ctor()
    // Offset: 0x4468728
    // Implemented from: Meta.WitAi.CallbackHandlers.WitResponseHandler
    // Base method: System.Void WitResponseHandler::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OutOfScopeUtteranceHandler* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::CallbackHandlers::OutOfScopeUtteranceHandler::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OutOfScopeUtteranceHandler*, creationType>()));
    }
  }; // Meta.WitAi.CallbackHandlers.OutOfScopeUtteranceHandler
  #pragma pack(pop)
  static check_size<sizeof(OutOfScopeUtteranceHandler), 48 + sizeof(::Meta::WitAi::Utilities::StringEvent*)> __Meta_WitAi_CallbackHandlers_OutOfScopeUtteranceHandlerSizeCheck;
  static_assert(sizeof(OutOfScopeUtteranceHandler) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::WitAi::CallbackHandlers::OutOfScopeUtteranceHandler::OnValidateResponse
// Il2CppName: OnValidateResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Meta::WitAi::CallbackHandlers::OutOfScopeUtteranceHandler::*)(::Meta::WitAi::Json::WitResponseNode*, bool)>(&Meta::WitAi::CallbackHandlers::OutOfScopeUtteranceHandler::OnValidateResponse)> {
  static const MethodInfo* get() {
    static auto* response = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Json", "WitResponseNode")->byval_arg;
    static auto* isEarlyResponse = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::CallbackHandlers::OutOfScopeUtteranceHandler*), "OnValidateResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{response, isEarlyResponse});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::CallbackHandlers::OutOfScopeUtteranceHandler::OnResponseInvalid
// Il2CppName: OnResponseInvalid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::CallbackHandlers::OutOfScopeUtteranceHandler::*)(::Meta::WitAi::Json::WitResponseNode*, ::StringW)>(&Meta::WitAi::CallbackHandlers::OutOfScopeUtteranceHandler::OnResponseInvalid)> {
  static const MethodInfo* get() {
    static auto* response = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Json", "WitResponseNode")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::CallbackHandlers::OutOfScopeUtteranceHandler*), "OnResponseInvalid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{response, error});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::CallbackHandlers::OutOfScopeUtteranceHandler::OnResponseSuccess
// Il2CppName: OnResponseSuccess
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::CallbackHandlers::OutOfScopeUtteranceHandler::*)(::Meta::WitAi::Json::WitResponseNode*)>(&Meta::WitAi::CallbackHandlers::OutOfScopeUtteranceHandler::OnResponseSuccess)> {
  static const MethodInfo* get() {
    static auto* response = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Json", "WitResponseNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::CallbackHandlers::OutOfScopeUtteranceHandler*), "OnResponseSuccess", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{response});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::CallbackHandlers::OutOfScopeUtteranceHandler::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
