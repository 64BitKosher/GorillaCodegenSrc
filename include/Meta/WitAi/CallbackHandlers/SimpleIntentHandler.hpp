// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Meta.WitAi.CallbackHandlers.WitIntentMatcher
#include "Meta/WitAi/CallbackHandlers/WitIntentMatcher.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Events
namespace UnityEngine::Events {
  // Forward declaring type: UnityEvent
  class UnityEvent;
}
// Forward declaring namespace: Meta::WitAi::CallbackHandlers
namespace Meta::WitAi::CallbackHandlers {
  // Forward declaring type: ConfidenceRange
  class ConfidenceRange;
}
// Forward declaring namespace: Meta::WitAi::Json
namespace Meta::WitAi::Json {
  // Forward declaring type: WitResponseNode
  class WitResponseNode;
}
// Completed forward declares
// Type namespace: Meta.WitAi.CallbackHandlers
namespace Meta::WitAi::CallbackHandlers {
  // Forward declaring type: SimpleIntentHandler
  class SimpleIntentHandler;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::WitAi::CallbackHandlers::SimpleIntentHandler);
DEFINE_IL2CPP_ARG_TYPE(::Meta::WitAi::CallbackHandlers::SimpleIntentHandler*, "Meta.WitAi.CallbackHandlers", "SimpleIntentHandler");
// Type namespace: Meta.WitAi.CallbackHandlers
namespace Meta::WitAi::CallbackHandlers {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: Meta.WitAi.CallbackHandlers.SimpleIntentHandler
  // [TokenAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: FFFFFFFF
  class SimpleIntentHandler : public ::Meta::WitAi::CallbackHandlers::WitIntentMatcher {
    public:
    // Writing base type padding for base size: 0x3C to desired offset: 0x40
    char ___base_padding[0x4] = {};
    public:
    // private UnityEngine.Events.UnityEvent onIntentTriggered
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Events::UnityEvent* onIntentTriggered;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    // public System.Boolean allowConfidenceOverlap
    // Size: 0x1
    // Offset: 0x48
    bool allowConfidenceOverlap;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: allowConfidenceOverlap and: confidenceRanges
    char __padding1[0x7] = {};
    // public Meta.WitAi.CallbackHandlers.ConfidenceRange[] confidenceRanges
    // Size: 0x8
    // Offset: 0x50
    ::ArrayW<::Meta::WitAi::CallbackHandlers::ConfidenceRange*> confidenceRanges;
    // Field size check
    static_assert(sizeof(::ArrayW<::Meta::WitAi::CallbackHandlers::ConfidenceRange*>) == 0x8);
    public:
    // Get instance field reference: private UnityEngine.Events.UnityEvent onIntentTriggered
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn_onIntentTriggered();
    // Get instance field reference: public System.Boolean allowConfidenceOverlap
    [[deprecated("Use field access instead!")]] bool& dyn_allowConfidenceOverlap();
    // Get instance field reference: public Meta.WitAi.CallbackHandlers.ConfidenceRange[] confidenceRanges
    [[deprecated("Use field access instead!")]] ::ArrayW<::Meta::WitAi::CallbackHandlers::ConfidenceRange*>& dyn_confidenceRanges();
    // public UnityEngine.Events.UnityEvent get_OnIntentTriggered()
    // Offset: 0x446879C
    ::UnityEngine::Events::UnityEvent* get_OnIntentTriggered();
    // private System.Void UpdateRanges(Meta.WitAi.Json.WitResponseNode response)
    // Offset: 0x44687DC
    void UpdateRanges(::Meta::WitAi::Json::WitResponseNode* response);
    // protected override System.Void OnResponseSuccess(Meta.WitAi.Json.WitResponseNode response)
    // Offset: 0x44687A4
    // Implemented from: Meta.WitAi.CallbackHandlers.WitResponseHandler
    // Base method: System.Void WitResponseHandler::OnResponseSuccess(Meta.WitAi.Json.WitResponseNode response)
    void OnResponseSuccess(::Meta::WitAi::Json::WitResponseNode* response);
    // protected override System.Void OnResponseInvalid(Meta.WitAi.Json.WitResponseNode response, System.String error)
    // Offset: 0x4468894
    // Implemented from: Meta.WitAi.CallbackHandlers.WitResponseHandler
    // Base method: System.Void WitResponseHandler::OnResponseInvalid(Meta.WitAi.Json.WitResponseNode response, System.String error)
    void OnResponseInvalid(::Meta::WitAi::Json::WitResponseNode* response, ::StringW error);
    // public System.Void .ctor()
    // Offset: 0x44689B8
    // Implemented from: Meta.WitAi.CallbackHandlers.WitIntentMatcher
    // Base method: System.Void WitIntentMatcher::.ctor()
    // Base method: System.Void WitResponseHandler::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SimpleIntentHandler* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::CallbackHandlers::SimpleIntentHandler::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SimpleIntentHandler*, creationType>()));
    }
  }; // Meta.WitAi.CallbackHandlers.SimpleIntentHandler
  #pragma pack(pop)
  static check_size<sizeof(SimpleIntentHandler), 80 + sizeof(::ArrayW<::Meta::WitAi::CallbackHandlers::ConfidenceRange*>)> __Meta_WitAi_CallbackHandlers_SimpleIntentHandlerSizeCheck;
  static_assert(sizeof(SimpleIntentHandler) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::WitAi::CallbackHandlers::SimpleIntentHandler::get_OnIntentTriggered
// Il2CppName: get_OnIntentTriggered
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Events::UnityEvent* (Meta::WitAi::CallbackHandlers::SimpleIntentHandler::*)()>(&Meta::WitAi::CallbackHandlers::SimpleIntentHandler::get_OnIntentTriggered)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::CallbackHandlers::SimpleIntentHandler*), "get_OnIntentTriggered", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::CallbackHandlers::SimpleIntentHandler::UpdateRanges
// Il2CppName: UpdateRanges
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::CallbackHandlers::SimpleIntentHandler::*)(::Meta::WitAi::Json::WitResponseNode*)>(&Meta::WitAi::CallbackHandlers::SimpleIntentHandler::UpdateRanges)> {
  static const MethodInfo* get() {
    static auto* response = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Json", "WitResponseNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::CallbackHandlers::SimpleIntentHandler*), "UpdateRanges", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{response});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::CallbackHandlers::SimpleIntentHandler::OnResponseSuccess
// Il2CppName: OnResponseSuccess
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::CallbackHandlers::SimpleIntentHandler::*)(::Meta::WitAi::Json::WitResponseNode*)>(&Meta::WitAi::CallbackHandlers::SimpleIntentHandler::OnResponseSuccess)> {
  static const MethodInfo* get() {
    static auto* response = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Json", "WitResponseNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::CallbackHandlers::SimpleIntentHandler*), "OnResponseSuccess", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{response});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::CallbackHandlers::SimpleIntentHandler::OnResponseInvalid
// Il2CppName: OnResponseInvalid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::CallbackHandlers::SimpleIntentHandler::*)(::Meta::WitAi::Json::WitResponseNode*, ::StringW)>(&Meta::WitAi::CallbackHandlers::SimpleIntentHandler::OnResponseInvalid)> {
  static const MethodInfo* get() {
    static auto* response = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Json", "WitResponseNode")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::CallbackHandlers::SimpleIntentHandler*), "OnResponseInvalid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{response, error});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::CallbackHandlers::SimpleIntentHandler::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
