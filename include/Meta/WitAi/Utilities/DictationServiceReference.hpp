// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Meta::WitAi::Utilities
namespace Meta::WitAi::Utilities {
}
// Forward declaring namespace: Meta::WitAi::Dictation
namespace Meta::WitAi::Dictation {
  // Forward declaring type: DictationService
  class DictationService;
}
// Completed forward declares
// Type namespace: Meta.WitAi.Utilities
namespace Meta::WitAi::Utilities {
  // Forward declaring type: DictationServiceReference
  struct DictationServiceReference;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Meta::WitAi::Utilities::DictationServiceReference, "Meta.WitAi.Utilities", "DictationServiceReference");
// Type namespace: Meta.WitAi.Utilities
namespace Meta::WitAi::Utilities {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Meta.WitAi.Utilities.DictationServiceReference
  // [TokenAttribute] Offset: FFFFFFFF
  struct DictationServiceReference/*, public ::System::ValueType*/ {
    public:
    // Nested type: ::Meta::WitAi::Utilities::DictationServiceReference::$$c
    class $$c;
    public:
    // Meta.WitAi.Dictation.DictationService dictationService
    // Size: 0x8
    // Offset: 0x0
    ::Meta::WitAi::Dictation::DictationService* dictationService;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::Dictation::DictationService*) == 0x8);
    public:
    // Creating value type constructor for type: DictationServiceReference
    constexpr DictationServiceReference(::Meta::WitAi::Dictation::DictationService* dictationService_ = {}) noexcept : dictationService{dictationService_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating conversion operator: operator ::Meta::WitAi::Dictation::DictationService*
    constexpr operator ::Meta::WitAi::Dictation::DictationService*() const noexcept {
      return dictationService;
    }
    // Get instance field reference: Meta.WitAi.Dictation.DictationService dictationService
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::Dictation::DictationService*& dyn_dictationService();
    // public Meta.WitAi.Dictation.DictationService get_DictationService()
    // Offset: 0x2AD0A9C
    ::Meta::WitAi::Dictation::DictationService* get_DictationService();
  }; // Meta.WitAi.Utilities.DictationServiceReference
  #pragma pack(pop)
  static check_size<sizeof(DictationServiceReference), 0 + sizeof(::Meta::WitAi::Dictation::DictationService*)> __Meta_WitAi_Utilities_DictationServiceReferenceSizeCheck;
  static_assert(sizeof(DictationServiceReference) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::WitAi::Utilities::DictationServiceReference::get_DictationService
// Il2CppName: get_DictationService
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Dictation::DictationService* (Meta::WitAi::Utilities::DictationServiceReference::*)()>(&Meta::WitAi::Utilities::DictationServiceReference::get_DictationService)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Utilities::DictationServiceReference), "get_DictationService", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
