// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.PropertyAttribute
#include "UnityEngine/PropertyAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: Meta.WitAi.Utilities
namespace Meta::WitAi::Utilities {
  // Forward declaring type: DynamicRangeAttribute
  class DynamicRangeAttribute;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::WitAi::Utilities::DynamicRangeAttribute);
DEFINE_IL2CPP_ARG_TYPE(::Meta::WitAi::Utilities::DynamicRangeAttribute*, "Meta.WitAi.Utilities", "DynamicRangeAttribute");
// Type namespace: Meta.WitAi.Utilities
namespace Meta::WitAi::Utilities {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Meta.WitAi.Utilities.DynamicRangeAttribute
  // [TokenAttribute] Offset: FFFFFFFF
  class DynamicRangeAttribute : public ::UnityEngine::PropertyAttribute {
    public:
    // Writing base type padding for base size: 0x14 to desired offset: 0x18
    char ___base_padding[0x4] = {};
    public:
    // private System.String <RangeProperty>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::StringW RangeProperty;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Single <DefaultMin>k__BackingField
    // Size: 0x4
    // Offset: 0x20
    float DefaultMin;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single <DefaultMax>k__BackingField
    // Size: 0x4
    // Offset: 0x24
    float DefaultMax;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Deleting conversion operator: operator int
    constexpr operator int() const noexcept = delete;
    // Get instance field reference: private System.String <RangeProperty>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$RangeProperty$k__BackingField();
    // Get instance field reference: private System.Single <DefaultMin>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$DefaultMin$k__BackingField();
    // Get instance field reference: private System.Single <DefaultMax>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$DefaultMax$k__BackingField();
    // public System.String get_RangeProperty()
    // Offset: 0x4436C18
    ::StringW get_RangeProperty();
    // private System.Void set_RangeProperty(System.String value)
    // Offset: 0x4436C20
    void set_RangeProperty(::StringW value);
    // public System.Single get_DefaultMin()
    // Offset: 0x4436C28
    float get_DefaultMin();
    // private System.Void set_DefaultMin(System.Single value)
    // Offset: 0x4436C30
    void set_DefaultMin(float value);
    // public System.Single get_DefaultMax()
    // Offset: 0x4436C38
    float get_DefaultMax();
    // private System.Void set_DefaultMax(System.Single value)
    // Offset: 0x4436C40
    void set_DefaultMax(float value);
    // public System.Void .ctor(System.String rangeProperty, System.Single defaultMin, System.Single defaultMax)
    // Offset: 0x4436C48
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DynamicRangeAttribute* New_ctor(::StringW rangeProperty, float defaultMin, float defaultMax) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Utilities::DynamicRangeAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DynamicRangeAttribute*, creationType>(rangeProperty, defaultMin, defaultMax)));
    }
  }; // Meta.WitAi.Utilities.DynamicRangeAttribute
  #pragma pack(pop)
  static check_size<sizeof(DynamicRangeAttribute), 36 + sizeof(float)> __Meta_WitAi_Utilities_DynamicRangeAttributeSizeCheck;
  static_assert(sizeof(DynamicRangeAttribute) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::WitAi::Utilities::DynamicRangeAttribute::get_RangeProperty
// Il2CppName: get_RangeProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Meta::WitAi::Utilities::DynamicRangeAttribute::*)()>(&Meta::WitAi::Utilities::DynamicRangeAttribute::get_RangeProperty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Utilities::DynamicRangeAttribute*), "get_RangeProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Utilities::DynamicRangeAttribute::set_RangeProperty
// Il2CppName: set_RangeProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Utilities::DynamicRangeAttribute::*)(::StringW)>(&Meta::WitAi::Utilities::DynamicRangeAttribute::set_RangeProperty)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Utilities::DynamicRangeAttribute*), "set_RangeProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Utilities::DynamicRangeAttribute::get_DefaultMin
// Il2CppName: get_DefaultMin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Meta::WitAi::Utilities::DynamicRangeAttribute::*)()>(&Meta::WitAi::Utilities::DynamicRangeAttribute::get_DefaultMin)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Utilities::DynamicRangeAttribute*), "get_DefaultMin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Utilities::DynamicRangeAttribute::set_DefaultMin
// Il2CppName: set_DefaultMin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Utilities::DynamicRangeAttribute::*)(float)>(&Meta::WitAi::Utilities::DynamicRangeAttribute::set_DefaultMin)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Utilities::DynamicRangeAttribute*), "set_DefaultMin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Utilities::DynamicRangeAttribute::get_DefaultMax
// Il2CppName: get_DefaultMax
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Meta::WitAi::Utilities::DynamicRangeAttribute::*)()>(&Meta::WitAi::Utilities::DynamicRangeAttribute::get_DefaultMax)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Utilities::DynamicRangeAttribute*), "get_DefaultMax", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Utilities::DynamicRangeAttribute::set_DefaultMax
// Il2CppName: set_DefaultMax
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Utilities::DynamicRangeAttribute::*)(float)>(&Meta::WitAi::Utilities::DynamicRangeAttribute::set_DefaultMax)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Utilities::DynamicRangeAttribute*), "set_DefaultMax", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Utilities::DynamicRangeAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
