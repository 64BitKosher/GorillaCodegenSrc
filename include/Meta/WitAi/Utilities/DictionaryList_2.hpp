// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: Meta.WitAi.Utilities
namespace Meta::WitAi::Utilities {
  // Forward declaring type: DictionaryList`2<T, U>
  template<typename T, typename U>
  class DictionaryList_2;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::Meta::WitAi::Utilities::DictionaryList_2, "Meta.WitAi.Utilities", "DictionaryList`2");
// Type namespace: Meta.WitAi.Utilities
namespace Meta::WitAi::Utilities {
  // WARNING Size may be invalid!
  // Autogenerated type: Meta.WitAi.Utilities.DictionaryList`2
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: FFFFFFFF
  template<typename T, typename U>
  class DictionaryList_2 : public ::Il2CppObject {
    public:
    public:
    // private System.Collections.Generic.Dictionary`2<T,System.Collections.Generic.List`1<U>> dictionary
    // Size: 0x8
    // Offset: 0x0
    ::System::Collections::Generic::Dictionary_2<T, ::System::Collections::Generic::List_1<U>*>* dictionary;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<T, ::System::Collections::Generic::List_1<U>*>*) == 0x8);
    public:
    // Creating conversion operator: operator ::System::Collections::Generic::Dictionary_2<T, ::System::Collections::Generic::List_1<U>*>*
    constexpr operator ::System::Collections::Generic::Dictionary_2<T, ::System::Collections::Generic::List_1<U>*>*() const noexcept {
      return dictionary;
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Collections.Generic.Dictionary`2<T,System.Collections.Generic.List`1<U>> dictionary
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<T, ::System::Collections::Generic::List_1<U>*>*& dyn_dictionary() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Utilities::DictionaryList_2::dyn_dictionary");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "dictionary"))->offset;
      return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<T, ::System::Collections::Generic::List_1<U>*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Void Add(T key, U value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Add(T key, U value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Utilities::DictionaryList_2::Add");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, key, value);
    }
    // public System.Void RemoveAt(T key, System.Int32 index)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void RemoveAt(T key, int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Utilities::DictionaryList_2::RemoveAt");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveAt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractType(index)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, key, index);
    }
    // public System.Void Remove(T key, U value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Remove(T key, U value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Utilities::DictionaryList_2::Remove");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Remove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, key, value);
    }
    // public System.Collections.Generic.List`1<U> get_Item(T key)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::Generic::List_1<U>* get_Item(T key) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Utilities::DictionaryList_2::get_Item");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key)})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<U>*, false>(this, ___internal__method, key);
    }
    // public System.Void set_Item(T key, System.Collections.Generic.List`1<U> value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_Item(T key, ::System::Collections::Generic::List_1<U>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Utilities::DictionaryList_2::set_Item");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, key, value);
    }
    // public System.Boolean TryGetValue(T key, out System.Collections.Generic.List`1<U> values)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool TryGetValue(T key, ByRef<::System::Collections::Generic::List_1<U>*> values) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Utilities::DictionaryList_2::TryGetValue");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryGetValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractIndependentType<::System::Collections::Generic::List_1<U>*&>()})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, key, byref(values));
    }
    // public System.Void .ctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DictionaryList_2<T, U>* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Utilities::DictionaryList_2::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DictionaryList_2<T, U>*, creationType>()));
    }
  }; // Meta.WitAi.Utilities.DictionaryList`2
  // Could not write size check! Type: Meta.WitAi.Utilities.DictionaryList`2 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
