// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Meta::WitAi::Utilities
namespace Meta::WitAi::Utilities {
}
// Forward declaring namespace: Meta::WitAi
namespace Meta::WitAi {
  // Forward declaring type: VoiceService
  class VoiceService;
}
// Completed forward declares
// Type namespace: Meta.WitAi.Utilities
namespace Meta::WitAi::Utilities {
  // Forward declaring type: VoiceServiceReference
  struct VoiceServiceReference;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Meta::WitAi::Utilities::VoiceServiceReference, "Meta.WitAi.Utilities", "VoiceServiceReference");
// Type namespace: Meta.WitAi.Utilities
namespace Meta::WitAi::Utilities {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Meta.WitAi.Utilities.VoiceServiceReference
  // [TokenAttribute] Offset: FFFFFFFF
  struct VoiceServiceReference/*, public ::System::ValueType*/ {
    public:
    // Nested type: ::Meta::WitAi::Utilities::VoiceServiceReference::$$c
    class $$c;
    public:
    // Meta.WitAi.VoiceService voiceService
    // Size: 0x8
    // Offset: 0x0
    ::Meta::WitAi::VoiceService* voiceService;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::VoiceService*) == 0x8);
    public:
    // Creating value type constructor for type: VoiceServiceReference
    constexpr VoiceServiceReference(::Meta::WitAi::VoiceService* voiceService_ = {}) noexcept : voiceService{voiceService_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating conversion operator: operator ::Meta::WitAi::VoiceService*
    constexpr operator ::Meta::WitAi::VoiceService*() const noexcept {
      return voiceService;
    }
    // Get instance field reference: Meta.WitAi.VoiceService voiceService
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::VoiceService*& dyn_voiceService();
    // public Meta.WitAi.VoiceService get_VoiceService()
    // Offset: 0x44371A8
    ::Meta::WitAi::VoiceService* get_VoiceService();
  }; // Meta.WitAi.Utilities.VoiceServiceReference
  #pragma pack(pop)
  static check_size<sizeof(VoiceServiceReference), 0 + sizeof(::Meta::WitAi::VoiceService*)> __Meta_WitAi_Utilities_VoiceServiceReferenceSizeCheck;
  static_assert(sizeof(VoiceServiceReference) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::WitAi::Utilities::VoiceServiceReference::get_VoiceService
// Il2CppName: get_VoiceService
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::VoiceService* (Meta::WitAi::Utilities::VoiceServiceReference::*)()>(&Meta::WitAi::Utilities::VoiceServiceReference::get_VoiceService)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Utilities::VoiceServiceReference), "get_VoiceService", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
