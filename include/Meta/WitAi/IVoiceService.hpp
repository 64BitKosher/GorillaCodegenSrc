// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Meta.WitAi.IVoiceEventProvider
#include "Meta/WitAi/IVoiceEventProvider.hpp"
// Including type: Meta.WitAi.ITelemetryEventsProvider
#include "Meta/WitAi/ITelemetryEventsProvider.hpp"
// Including type: Meta.WitAi.IVoiceActivationHandler
#include "Meta/WitAi/IVoiceActivationHandler.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Forward declaring namespace: Meta::WitAi::Requests
namespace Meta::WitAi::Requests {
  // Forward declaring type: VoiceServiceRequest
  class VoiceServiceRequest;
}
// Forward declaring namespace: Meta::WitAi::Events
namespace Meta::WitAi::Events {
  // Forward declaring type: VoiceEvents
  class VoiceEvents;
  // Forward declaring type: TelemetryEvents
  class TelemetryEvents;
}
// Forward declaring namespace: Meta::WitAi::Interfaces
namespace Meta::WitAi::Interfaces {
  // Forward declaring type: ITranscriptionProvider
  class ITranscriptionProvider;
}
// Completed forward declares
// Type namespace: Meta.WitAi
namespace Meta::WitAi {
  // Forward declaring type: IVoiceService
  class IVoiceService;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::WitAi::IVoiceService);
DEFINE_IL2CPP_ARG_TYPE(::Meta::WitAi::IVoiceService*, "Meta.WitAi", "IVoiceService");
// Type namespace: Meta.WitAi
namespace Meta::WitAi {
  // Size: 0x0
  #pragma pack(push, 1)
  // Autogenerated type: Meta.WitAi.IVoiceService
  // [TokenAttribute] Offset: FFFFFFFF
  class IVoiceService/*, public ::Meta::WitAi::IVoiceEventProvider, public ::Meta::WitAi::ITelemetryEventsProvider, public ::Meta::WitAi::IVoiceActivationHandler*/ {
    public:
    // Creating interface conversion operator: operator ::Meta::WitAi::IVoiceEventProvider
    operator ::Meta::WitAi::IVoiceEventProvider() noexcept {
      return *reinterpret_cast<::Meta::WitAi::IVoiceEventProvider*>(this);
    }
    // Creating interface conversion operator: operator ::Meta::WitAi::ITelemetryEventsProvider
    operator ::Meta::WitAi::ITelemetryEventsProvider() noexcept {
      return *reinterpret_cast<::Meta::WitAi::ITelemetryEventsProvider*>(this);
    }
    // Creating interface conversion operator: operator ::Meta::WitAi::IVoiceActivationHandler
    operator ::Meta::WitAi::IVoiceActivationHandler() noexcept {
      return *reinterpret_cast<::Meta::WitAi::IVoiceActivationHandler*>(this);
    }
    // public System.Boolean get_IsRequestActive()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_IsRequestActive();
    // public System.Boolean get_UsePlatformIntegrations()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_UsePlatformIntegrations();
    // public System.Void set_UsePlatformIntegrations(System.Boolean value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_UsePlatformIntegrations(bool value);
    // public System.Collections.Generic.HashSet`1<Meta.WitAi.Requests.VoiceServiceRequest> get_Requests()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::Generic::HashSet_1<::Meta::WitAi::Requests::VoiceServiceRequest*>* get_Requests();
    // public System.Boolean get_MicActive()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_MicActive();
    // public Meta.WitAi.Events.VoiceEvents get_VoiceEvents()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Meta::WitAi::Events::VoiceEvents* get_VoiceEvents();
    // public System.Void set_VoiceEvents(Meta.WitAi.Events.VoiceEvents value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_VoiceEvents(::Meta::WitAi::Events::VoiceEvents* value);
    // public Meta.WitAi.Events.TelemetryEvents get_TelemetryEvents()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Meta::WitAi::Events::TelemetryEvents* get_TelemetryEvents();
    // public System.Void set_TelemetryEvents(Meta.WitAi.Events.TelemetryEvents value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_TelemetryEvents(::Meta::WitAi::Events::TelemetryEvents* value);
    // public Meta.WitAi.Interfaces.ITranscriptionProvider get_TranscriptionProvider()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Meta::WitAi::Interfaces::ITranscriptionProvider* get_TranscriptionProvider();
    // public System.Void set_TranscriptionProvider(Meta.WitAi.Interfaces.ITranscriptionProvider value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_TranscriptionProvider(::Meta::WitAi::Interfaces::ITranscriptionProvider* value);
    // public System.Boolean CanActivateAudio()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool CanActivateAudio();
    // public System.Boolean CanSend()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool CanSend();
  }; // Meta.WitAi.IVoiceService
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::WitAi::IVoiceService::get_IsRequestActive
// Il2CppName: get_IsRequestActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::IVoiceService::*)()>(&Meta::WitAi::IVoiceService::get_IsRequestActive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::IVoiceService*), "get_IsRequestActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::IVoiceService::get_UsePlatformIntegrations
// Il2CppName: get_UsePlatformIntegrations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::IVoiceService::*)()>(&Meta::WitAi::IVoiceService::get_UsePlatformIntegrations)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::IVoiceService*), "get_UsePlatformIntegrations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::IVoiceService::set_UsePlatformIntegrations
// Il2CppName: set_UsePlatformIntegrations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::IVoiceService::*)(bool)>(&Meta::WitAi::IVoiceService::set_UsePlatformIntegrations)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::IVoiceService*), "set_UsePlatformIntegrations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::IVoiceService::get_Requests
// Il2CppName: get_Requests
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::HashSet_1<::Meta::WitAi::Requests::VoiceServiceRequest*>* (Meta::WitAi::IVoiceService::*)()>(&Meta::WitAi::IVoiceService::get_Requests)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::IVoiceService*), "get_Requests", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::IVoiceService::get_MicActive
// Il2CppName: get_MicActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::IVoiceService::*)()>(&Meta::WitAi::IVoiceService::get_MicActive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::IVoiceService*), "get_MicActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::IVoiceService::get_VoiceEvents
// Il2CppName: get_VoiceEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Events::VoiceEvents* (Meta::WitAi::IVoiceService::*)()>(&Meta::WitAi::IVoiceService::get_VoiceEvents)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::IVoiceService*), "get_VoiceEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::IVoiceService::set_VoiceEvents
// Il2CppName: set_VoiceEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::IVoiceService::*)(::Meta::WitAi::Events::VoiceEvents*)>(&Meta::WitAi::IVoiceService::set_VoiceEvents)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Events", "VoiceEvents")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::IVoiceService*), "set_VoiceEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::IVoiceService::get_TelemetryEvents
// Il2CppName: get_TelemetryEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Events::TelemetryEvents* (Meta::WitAi::IVoiceService::*)()>(&Meta::WitAi::IVoiceService::get_TelemetryEvents)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::IVoiceService*), "get_TelemetryEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::IVoiceService::set_TelemetryEvents
// Il2CppName: set_TelemetryEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::IVoiceService::*)(::Meta::WitAi::Events::TelemetryEvents*)>(&Meta::WitAi::IVoiceService::set_TelemetryEvents)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Events", "TelemetryEvents")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::IVoiceService*), "set_TelemetryEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::IVoiceService::get_TranscriptionProvider
// Il2CppName: get_TranscriptionProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Interfaces::ITranscriptionProvider* (Meta::WitAi::IVoiceService::*)()>(&Meta::WitAi::IVoiceService::get_TranscriptionProvider)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::IVoiceService*), "get_TranscriptionProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::IVoiceService::set_TranscriptionProvider
// Il2CppName: set_TranscriptionProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::IVoiceService::*)(::Meta::WitAi::Interfaces::ITranscriptionProvider*)>(&Meta::WitAi::IVoiceService::set_TranscriptionProvider)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Interfaces", "ITranscriptionProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::IVoiceService*), "set_TranscriptionProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::IVoiceService::CanActivateAudio
// Il2CppName: CanActivateAudio
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::IVoiceService::*)()>(&Meta::WitAi::IVoiceService::CanActivateAudio)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::IVoiceService*), "CanActivateAudio", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::IVoiceService::CanSend
// Il2CppName: CanSend
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::IVoiceService::*)()>(&Meta::WitAi::IVoiceService::CanSend)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::IVoiceService*), "CanSend", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
