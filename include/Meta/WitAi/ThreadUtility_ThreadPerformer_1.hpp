// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Meta.WitAi.ThreadUtility
#include "Meta/WitAi/ThreadUtility.hpp"
// Including type: Meta.WitAi.CoroutineUtility
#include "Meta/WitAi/CoroutineUtility.hpp"
// Including type: System.DateTime
#include "System/DateTime.hpp"
// Including type: System.Collections.Generic.IEnumerator`1
#include "System/Collections/Generic/IEnumerator_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Meta::WitAi
namespace Meta::WitAi {
  // Skipping declaration: <WaitForCompletion>d__13 because it is already included!
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: Thread
  class Thread;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`1<TResult>
  template<typename TResult>
  class Func_1;
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Skipping declaration: IEnumerator because it is already included!
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::Meta::WitAi::ThreadUtility::ThreadPerformer_1, "Meta.WitAi", "ThreadUtility/ThreadPerformer`1");
// Type namespace: Meta.WitAi
namespace Meta::WitAi {
  // WARNING Size may be invalid!
  // Autogenerated type: Meta.WitAi.ThreadUtility/ThreadPerformer`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class ThreadUtility::ThreadPerformer_1 : public ::Il2CppObject {
    public:
    // Nested type: ::Meta::WitAi::ThreadUtility::ThreadPerformer_1::$WaitForCompletion$d__13<T>
    class $WaitForCompletion$d__13;
    // WARNING Size may be invalid!
    // Autogenerated type: Meta.WitAi.ThreadUtility/ThreadPerformer`1/<WaitForCompletion>d__13
    // [TokenAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: FFFFFFFF
    class $WaitForCompletion$d__13 : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject/*, public ::System::Collections::Generic::IEnumerator_1<::Il2CppObject*>*/ {
      public:
      using declaring_type = ThreadUtility::ThreadPerformer_1<T>*;
      static constexpr std::string_view NESTED_NAME = "<WaitForCompletion>d__13";
      static constexpr bool IS_VALUE_TYPE = false;
      public:
      // private System.Int32 <>1__state
      // Size: 0x4
      // Offset: 0x0
      int $$1__state;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // private System.Object <>2__current
      // Size: 0x8
      // Offset: 0x0
      ::Il2CppObject* $$2__current;
      // Field size check
      static_assert(sizeof(::Il2CppObject*) == 0x8);
      // public Meta.WitAi.ThreadUtility/ThreadPerformer`1<T> <>4__this
      // Size: 0x8
      // Offset: 0x0
      ::Meta::WitAi::ThreadUtility::ThreadPerformer_1<T>* $$4__this;
      // Field size check
      static_assert(sizeof(::Meta::WitAi::ThreadUtility::ThreadPerformer_1<T>*) == 0x8);
      // private System.DateTime <start>5__2
      // Size: 0x8
      // Offset: 0x0
      ::System::DateTime $start$5__2;
      // Field size check
      static_assert(sizeof(::System::DateTime) == 0x8);
      public:
      // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerator_1<::Il2CppObject*>
      operator ::System::Collections::Generic::IEnumerator_1<::Il2CppObject*>() noexcept {
        return *reinterpret_cast<::System::Collections::Generic::IEnumerator_1<::Il2CppObject*>*>(this);
      }
      // Autogenerated instance field getter
      // Get instance field: private System.Int32 <>1__state
      [[deprecated("Use field access instead!")]] int& dyn_$$1__state() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::ThreadUtility::ThreadPerformer_1::$WaitForCompletion$d__13::dyn_$$1__state");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private System.Object <>2__current
      [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_$$2__current() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::ThreadUtility::ThreadPerformer_1::$WaitForCompletion$d__13::dyn_$$2__current");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
        return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: public Meta.WitAi.ThreadUtility/ThreadPerformer`1<T> <>4__this
      [[deprecated("Use field access instead!")]] ::Meta::WitAi::ThreadUtility::ThreadPerformer_1<T>*& dyn_$$4__this() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::ThreadUtility::ThreadPerformer_1::$WaitForCompletion$d__13::dyn_$$4__this");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
        return *reinterpret_cast<::Meta::WitAi::ThreadUtility::ThreadPerformer_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private System.DateTime <start>5__2
      [[deprecated("Use field access instead!")]] ::System::DateTime& dyn_$start$5__2() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::ThreadUtility::ThreadPerformer_1::$WaitForCompletion$d__13::dyn_$start$5__2");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<start>5__2"))->offset;
        return *reinterpret_cast<::System::DateTime*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // public System.Void .ctor(System.Int32 <>1__state)
      // Offset: 0xFFFFFFFFFFFFFFFF
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename ThreadUtility::ThreadPerformer_1<T>::$WaitForCompletion$d__13* New_ctor(int $$1__state) {
        static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::ThreadUtility::ThreadPerformer_1::$WaitForCompletion$d__13::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename ThreadUtility::ThreadPerformer_1<T>::$WaitForCompletion$d__13*, creationType>($$1__state)));
      }
      // private System.Void System.IDisposable.Dispose()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void System_IDisposable_Dispose() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::ThreadUtility::ThreadPerformer_1::$WaitForCompletion$d__13::System.IDisposable.Dispose");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::Meta::WitAi::ThreadUtility::ThreadPerformer_1<T>::$WaitForCompletion$d__13*), -1));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
      // private System.Boolean MoveNext()
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool MoveNext() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::ThreadUtility::ThreadPerformer_1::$WaitForCompletion$d__13::MoveNext");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::Meta::WitAi::ThreadUtility::ThreadPerformer_1<T>::$WaitForCompletion$d__13*), -1));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
      }
      // private System.Object System.Collections.Generic.IEnumerator<System.Object>.get_Current()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::Il2CppObject* System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::ThreadUtility::ThreadPerformer_1::$WaitForCompletion$d__13::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::Meta::WitAi::ThreadUtility::ThreadPerformer_1<T>::$WaitForCompletion$d__13*), -1));
        return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
      }
      // private System.Void System.Collections.IEnumerator.Reset()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void System_Collections_IEnumerator_Reset() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::ThreadUtility::ThreadPerformer_1::$WaitForCompletion$d__13::System.Collections.IEnumerator.Reset");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::Meta::WitAi::ThreadUtility::ThreadPerformer_1<T>::$WaitForCompletion$d__13*), -1));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
      // private System.Object System.Collections.IEnumerator.get_Current()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::Il2CppObject* System_Collections_IEnumerator_get_Current() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::ThreadUtility::ThreadPerformer_1::$WaitForCompletion$d__13::System.Collections.IEnumerator.get_Current");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::Meta::WitAi::ThreadUtility::ThreadPerformer_1<T>::$WaitForCompletion$d__13*), -1));
        return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
      }
    }; // Meta.WitAi.ThreadUtility/ThreadPerformer`1/<WaitForCompletion>d__13
    // Could not write size check! Type: Meta.WitAi.ThreadUtility/ThreadPerformer`1/<WaitForCompletion>d__13 is generic, or has no fields that are valid for size checks!
    public:
    // private System.Boolean <IsRunning>k__BackingField
    // Size: 0x1
    // Offset: 0x0
    bool IsRunning;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Threading.Thread _thread
    // Size: 0x8
    // Offset: 0x0
    ::System::Threading::Thread* thread;
    // Field size check
    static_assert(sizeof(::System::Threading::Thread*) == 0x8);
    // private System.Func`1<T> _worker
    // Size: 0x8
    // Offset: 0x0
    ::System::Func_1<T>* worker;
    // Field size check
    static_assert(sizeof(::System::Func_1<T>*) == 0x8);
    // private System.Action`2<T,System.String> _complete
    // Size: 0x8
    // Offset: 0x0
    ::System::Action_2<T, ::StringW>* complete;
    // Field size check
    static_assert(sizeof(::System::Action_2<T, ::StringW>*) == 0x8);
    // private System.Single _timeout
    // Size: 0x4
    // Offset: 0x0
    float timeout;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private T _result
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    T result;
    // private System.String _error
    // Size: 0x8
    // Offset: 0x0
    ::StringW error;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private Meta.WitAi.CoroutineUtility/CoroutinePerformer _coroutine
    // Size: 0x8
    // Offset: 0x0
    ::Meta::WitAi::CoroutineUtility::CoroutinePerformer* coroutine;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::CoroutineUtility::CoroutinePerformer*) == 0x8);
    public:
    // Autogenerated instance field getter
    // Get instance field: private System.Boolean <IsRunning>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$IsRunning$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::ThreadUtility::ThreadPerformer_1::dyn_$IsRunning$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<IsRunning>k__BackingField"))->offset;
      return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Threading.Thread _thread
    [[deprecated("Use field access instead!")]] ::System::Threading::Thread*& dyn__thread() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::ThreadUtility::ThreadPerformer_1::dyn__thread");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_thread"))->offset;
      return *reinterpret_cast<::System::Threading::Thread**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Func`1<T> _worker
    [[deprecated("Use field access instead!")]] ::System::Func_1<T>*& dyn__worker() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::ThreadUtility::ThreadPerformer_1::dyn__worker");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_worker"))->offset;
      return *reinterpret_cast<::System::Func_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Action`2<T,System.String> _complete
    [[deprecated("Use field access instead!")]] ::System::Action_2<T, ::StringW>*& dyn__complete() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::ThreadUtility::ThreadPerformer_1::dyn__complete");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_complete"))->offset;
      return *reinterpret_cast<::System::Action_2<T, ::StringW>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Single _timeout
    [[deprecated("Use field access instead!")]] float& dyn__timeout() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::ThreadUtility::ThreadPerformer_1::dyn__timeout");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_timeout"))->offset;
      return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private T _result
    [[deprecated("Use field access instead!")]] T& dyn__result() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::ThreadUtility::ThreadPerformer_1::dyn__result");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_result"))->offset;
      return *reinterpret_cast<T*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.String _error
    [[deprecated("Use field access instead!")]] ::StringW& dyn__error() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::ThreadUtility::ThreadPerformer_1::dyn__error");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_error"))->offset;
      return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private Meta.WitAi.CoroutineUtility/CoroutinePerformer _coroutine
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::CoroutineUtility::CoroutinePerformer*& dyn__coroutine() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::ThreadUtility::ThreadPerformer_1::dyn__coroutine");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_coroutine"))->offset;
      return *reinterpret_cast<::Meta::WitAi::CoroutineUtility::CoroutinePerformer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Boolean get_IsRunning()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_IsRunning() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::ThreadUtility::ThreadPerformer_1::get_IsRunning");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsRunning", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // private System.Void set_IsRunning(System.Boolean value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_IsRunning(bool value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::ThreadUtility::ThreadPerformer_1::set_IsRunning");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IsRunning", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Void .ctor(System.Func`1<T> worker, System.Action`2<T,System.String> onComplete, System.Single timeout)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ThreadUtility::ThreadPerformer_1<T>* New_ctor(::System::Func_1<T>* worker, ::System::Action_2<T, ::StringW>* onComplete, float timeout) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::ThreadUtility::ThreadPerformer_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ThreadUtility::ThreadPerformer_1<T>*, creationType>(worker, onComplete, timeout)));
    }
    // private System.Void Work()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Work() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::ThreadUtility::ThreadPerformer_1::Work");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Work", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // private System.Collections.IEnumerator WaitForCompletion()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::IEnumerator* WaitForCompletion() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::ThreadUtility::ThreadPerformer_1::WaitForCompletion");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WaitForCompletion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
    }
    // private System.Boolean IsTimedOut(System.DateTime start)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool IsTimedOut(::System::DateTime start) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::ThreadUtility::ThreadPerformer_1::IsTimedOut");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsTimedOut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(start)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, start);
    }
    // public System.Void Quit()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Quit() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::ThreadUtility::ThreadPerformer_1::Quit");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Quit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
  }; // Meta.WitAi.ThreadUtility/ThreadPerformer`1
  // Could not write size check! Type: Meta.WitAi.ThreadUtility/ThreadPerformer`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
