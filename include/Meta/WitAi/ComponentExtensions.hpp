// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Component
  class Component;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: Attribute
  class Attribute;
}
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: CustomAttributeData
  class CustomAttributeData;
  // Forward declaring type: FieldInfo
  class FieldInfo;
  // Forward declaring type: PropertyInfo
  class PropertyInfo;
}
// Completed forward declares
// Type namespace: Meta.WitAi
namespace Meta::WitAi {
  // Forward declaring type: ComponentExtensions
  class ComponentExtensions;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::WitAi::ComponentExtensions);
DEFINE_IL2CPP_ARG_TYPE(::Meta::WitAi::ComponentExtensions*, "Meta.WitAi", "ComponentExtensions");
// Type namespace: Meta.WitAi
namespace Meta::WitAi {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Meta.WitAi.ComponentExtensions
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExtensionAttribute] Offset: FFFFFFFF
  class ComponentExtensions : public ::Il2CppObject {
    public:
    // Nested type: ::Meta::WitAi::ComponentExtensions::ComponentCopyData
    struct ComponentCopyData;
    // Size: 0x18
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Meta.WitAi.ComponentExtensions/ComponentCopyData
    // [TokenAttribute] Offset: FFFFFFFF
    struct ComponentCopyData/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Type ComponentType
      // Size: 0x8
      // Offset: 0x0
      ::System::Type* ComponentType;
      // Field size check
      static_assert(sizeof(::System::Type*) == 0x8);
      // public System.Reflection.FieldInfo[] Fields
      // Size: 0x8
      // Offset: 0x8
      ::ArrayW<::System::Reflection::FieldInfo*> Fields;
      // Field size check
      static_assert(sizeof(::ArrayW<::System::Reflection::FieldInfo*>) == 0x8);
      // public System.Reflection.PropertyInfo[] Properties
      // Size: 0x8
      // Offset: 0x10
      ::ArrayW<::System::Reflection::PropertyInfo*> Properties;
      // Field size check
      static_assert(sizeof(::ArrayW<::System::Reflection::PropertyInfo*>) == 0x8);
      public:
      // Creating value type constructor for type: ComponentCopyData
      constexpr ComponentCopyData(::System::Type* ComponentType_ = {}, ::ArrayW<::System::Reflection::FieldInfo*> Fields_ = ::ArrayW<::System::Reflection::FieldInfo*>(static_cast<void*>(nullptr)), ::ArrayW<::System::Reflection::PropertyInfo*> Properties_ = ::ArrayW<::System::Reflection::PropertyInfo*>(static_cast<void*>(nullptr))) noexcept : ComponentType{ComponentType_}, Fields{Fields_}, Properties{Properties_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.Type ComponentType
      [[deprecated("Use field access instead!")]] ::System::Type*& dyn_ComponentType();
      // Get instance field reference: public System.Reflection.FieldInfo[] Fields
      [[deprecated("Use field access instead!")]] ::ArrayW<::System::Reflection::FieldInfo*>& dyn_Fields();
      // Get instance field reference: public System.Reflection.PropertyInfo[] Properties
      [[deprecated("Use field access instead!")]] ::ArrayW<::System::Reflection::PropertyInfo*>& dyn_Properties();
    }; // Meta.WitAi.ComponentExtensions/ComponentCopyData
    #pragma pack(pop)
    static check_size<sizeof(ComponentExtensions::ComponentCopyData), 16 + sizeof(::ArrayW<::System::Reflection::PropertyInfo*>)> __Meta_WitAi_ComponentExtensions_ComponentCopyDataSizeCheck;
    static_assert(sizeof(ComponentExtensions::ComponentCopyData) == 0x18);
    // Get static field: static private System.Collections.Generic.Dictionary`2<System.Type,Meta.WitAi.ComponentExtensions/ComponentCopyData> _data
    static ::System::Collections::Generic::Dictionary_2<::System::Type*, ::Meta::WitAi::ComponentExtensions::ComponentCopyData>* _get__data();
    // Set static field: static private System.Collections.Generic.Dictionary`2<System.Type,Meta.WitAi.ComponentExtensions/ComponentCopyData> _data
    static void _set__data(::System::Collections::Generic::Dictionary_2<::System::Type*, ::Meta::WitAi::ComponentExtensions::ComponentCopyData>* value);
    // static public System.Void Copy(T toComponent, T fromComponent)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void Copy(T toComponent, T fromComponent) {
      static_assert(std::is_convertible_v<T, ::UnityEngine::Component*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::ComponentExtensions::Copy");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Meta.WitAi", "ComponentExtensions", "Copy", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(toComponent), ::il2cpp_utils::ExtractType(fromComponent)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, toComponent, fromComponent);
    }
    // static public System.Void PreloadCopyData(T thisComponent)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void PreloadCopyData(T thisComponent) {
      static_assert(std::is_convertible_v<T, ::UnityEngine::Component*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::ComponentExtensions::PreloadCopyData");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Meta.WitAi", "ComponentExtensions", "PreloadCopyData", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(thisComponent)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, thisComponent);
    }
    // static private Meta.WitAi.ComponentExtensions/ComponentCopyData GetCopyData(T thisComponent)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::Meta::WitAi::ComponentExtensions::ComponentCopyData GetCopyData(T thisComponent) {
      static_assert(std::is_convertible_v<T, ::UnityEngine::Component*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::ComponentExtensions::GetCopyData");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Meta.WitAi", "ComponentExtensions", "GetCopyData", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(thisComponent)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::Meta::WitAi::ComponentExtensions::ComponentCopyData, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, thisComponent);
    }
    // static private System.Boolean IsObsolete(System.Collections.Generic.IEnumerable`1<System.Reflection.CustomAttributeData> attributes)
    // Offset: 0x443F110
    static bool IsObsolete(::System::Collections::Generic::IEnumerable_1<::System::Reflection::CustomAttributeData*>* attributes);
    // static private System.Boolean HasCustomAttributes(System.Collections.Generic.IEnumerable`1<System.Reflection.CustomAttributeData> attributes)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TAttribute>
    static bool HasCustomAttributes(::System::Collections::Generic::IEnumerable_1<::System::Reflection::CustomAttributeData*>* attributes) {
      static_assert(std::is_convertible_v<TAttribute, ::System::Attribute*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::ComponentExtensions::HasCustomAttributes");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Meta.WitAi", "ComponentExtensions", "HasCustomAttributes", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TAttribute>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(attributes)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TAttribute>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, attributes);
    }
    // static private System.Void .cctor()
    // Offset: 0x443F17C
    static void _cctor();
  }; // Meta.WitAi.ComponentExtensions
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Meta::WitAi::ComponentExtensions::ComponentCopyData, "Meta.WitAi", "ComponentExtensions/ComponentCopyData");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::WitAi::ComponentExtensions::Copy
// Il2CppName: Copy
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Meta::WitAi::ComponentExtensions::PreloadCopyData
// Il2CppName: PreloadCopyData
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Meta::WitAi::ComponentExtensions::GetCopyData
// Il2CppName: GetCopyData
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Meta::WitAi::ComponentExtensions::IsObsolete
// Il2CppName: IsObsolete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Collections::Generic::IEnumerable_1<::System::Reflection::CustomAttributeData*>*)>(&Meta::WitAi::ComponentExtensions::IsObsolete)> {
  static const MethodInfo* get() {
    static auto* attributes = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IEnumerable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System.Reflection", "CustomAttributeData")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::ComponentExtensions*), "IsObsolete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributes});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::ComponentExtensions::HasCustomAttributes
// Il2CppName: HasCustomAttributes
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Meta::WitAi::ComponentExtensions::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Meta::WitAi::ComponentExtensions::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::ComponentExtensions*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
