// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Single
#include "System/Single.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Meta::WitAi
namespace Meta::WitAi {
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`1<TResult>
  template<typename TResult>
  class Func_1;
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
}
// Completed forward declares
// Type namespace: Meta.WitAi
namespace Meta::WitAi {
  // Forward declaring type: ThreadUtility
  class ThreadUtility;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::WitAi::ThreadUtility);
DEFINE_IL2CPP_ARG_TYPE(::Meta::WitAi::ThreadUtility*, "Meta.WitAi", "ThreadUtility");
// Type namespace: Meta.WitAi
namespace Meta::WitAi {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Meta.WitAi.ThreadUtility
  // [TokenAttribute] Offset: FFFFFFFF
  class ThreadUtility : public ::Il2CppObject {
    public:
    // Nested type: ::Meta::WitAi::ThreadUtility::ThreadPerformer_1<T>
    template<typename T>
    class ThreadPerformer_1;
    // static field const value: static public System.Single THREAD_DEFAULT_TIMEOUT
    static constexpr const float THREAD_DEFAULT_TIMEOUT = -1;
    // Get static field: static public System.Single THREAD_DEFAULT_TIMEOUT
    static float _get_THREAD_DEFAULT_TIMEOUT();
    // Set static field: static public System.Single THREAD_DEFAULT_TIMEOUT
    static void _set_THREAD_DEFAULT_TIMEOUT(float value);
    // static public Meta.WitAi.ThreadUtility/ThreadPerformer`1<T> PerformInBackground(System.Func`1<T> workerAction, System.Action`2<T,System.String> onComplete, System.Single timeout)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::Meta::WitAi::ThreadUtility::ThreadPerformer_1<T>* PerformInBackground(::System::Func_1<T>* workerAction, ::System::Action_2<T, ::StringW>* onComplete, float timeout) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::ThreadUtility::PerformInBackground");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Meta.WitAi", "ThreadUtility", "PerformInBackground", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(workerAction), ::il2cpp_utils::ExtractType(onComplete), ::il2cpp_utils::ExtractType(timeout)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::Meta::WitAi::ThreadUtility::ThreadPerformer_1<T>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, workerAction, onComplete, timeout);
    }
  }; // Meta.WitAi.ThreadUtility
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::WitAi::ThreadUtility::PerformInBackground
// Il2CppName: PerformInBackground
// Cannot write MetadataGetter for generic methods!
