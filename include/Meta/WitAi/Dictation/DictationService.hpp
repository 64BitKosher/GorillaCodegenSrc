// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Meta.WitAi.Dictation.IDictationService
#include "Meta/WitAi/Dictation/IDictationService.hpp"
// Including type: Meta.WitAi.Interfaces.IAudioEventProvider
#include "Meta/WitAi/Interfaces/IAudioEventProvider.hpp"
// Including type: Meta.WitAi.Interfaces.ITranscriptionEventProvider
#include "Meta/WitAi/Interfaces/ITranscriptionEventProvider.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Meta::WitAi::Dictation::Events
namespace Meta::WitAi::Dictation::Events {
  // Forward declaring type: DictationEvents
  class DictationEvents;
}
// Forward declaring namespace: Meta::WitAi::Events
namespace Meta::WitAi::Events {
  // Forward declaring type: TelemetryEvents
  class TelemetryEvents;
}
// Forward declaring namespace: Meta::WitAi::Interfaces
namespace Meta::WitAi::Interfaces {
  // Forward declaring type: ITranscriptionProvider
  class ITranscriptionProvider;
  // Forward declaring type: IAudioInputEvents
  class IAudioInputEvents;
  // Forward declaring type: ITranscriptionEvent
  class ITranscriptionEvent;
}
// Forward declaring namespace: Meta::WitAi::Configuration
namespace Meta::WitAi::Configuration {
  // Forward declaring type: WitRequestOptions
  class WitRequestOptions;
}
// Forward declaring namespace: Meta::WitAi::Requests
namespace Meta::WitAi::Requests {
  // Forward declaring type: VoiceServiceRequest
  class VoiceServiceRequest;
  // Forward declaring type: VoiceServiceRequestEvents
  class VoiceServiceRequestEvents;
}
// Completed forward declares
// Type namespace: Meta.WitAi.Dictation
namespace Meta::WitAi::Dictation {
  // Forward declaring type: DictationService
  class DictationService;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::WitAi::Dictation::DictationService);
DEFINE_IL2CPP_ARG_TYPE(::Meta::WitAi::Dictation::DictationService*, "Meta.WitAi.Dictation", "DictationService");
// Type namespace: Meta.WitAi.Dictation
namespace Meta::WitAi::Dictation {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: Meta.WitAi.Dictation.DictationService
  // [TokenAttribute] Offset: FFFFFFFF
  class DictationService : public ::UnityEngine::MonoBehaviour/*, public ::Meta::WitAi::Dictation::IDictationService, public ::Meta::WitAi::Interfaces::IAudioEventProvider, public ::Meta::WitAi::Interfaces::ITranscriptionEventProvider*/ {
    public:
    public:
    // protected Meta.WitAi.Dictation.Events.DictationEvents dictationEvents
    // Size: 0x8
    // Offset: 0x20
    ::Meta::WitAi::Dictation::Events::DictationEvents* dictationEvents;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::Dictation::Events::DictationEvents*) == 0x8);
    // protected Meta.WitAi.Events.TelemetryEvents telemetryEvents
    // Size: 0x8
    // Offset: 0x28
    ::Meta::WitAi::Events::TelemetryEvents* telemetryEvents;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::Events::TelemetryEvents*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Meta::WitAi::Dictation::IDictationService
    operator ::Meta::WitAi::Dictation::IDictationService() noexcept {
      return *reinterpret_cast<::Meta::WitAi::Dictation::IDictationService*>(this);
    }
    // Creating interface conversion operator: operator ::Meta::WitAi::Interfaces::IAudioEventProvider
    operator ::Meta::WitAi::Interfaces::IAudioEventProvider() noexcept {
      return *reinterpret_cast<::Meta::WitAi::Interfaces::IAudioEventProvider*>(this);
    }
    // Creating interface conversion operator: operator ::Meta::WitAi::Interfaces::ITranscriptionEventProvider
    operator ::Meta::WitAi::Interfaces::ITranscriptionEventProvider() noexcept {
      return *reinterpret_cast<::Meta::WitAi::Interfaces::ITranscriptionEventProvider*>(this);
    }
    // Get instance field reference: protected Meta.WitAi.Dictation.Events.DictationEvents dictationEvents
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::Dictation::Events::DictationEvents*& dyn_dictationEvents();
    // Get instance field reference: protected Meta.WitAi.Events.TelemetryEvents telemetryEvents
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::Events::TelemetryEvents*& dyn_telemetryEvents();
    // public System.Boolean get_Active()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_Active();
    // public System.Boolean get_IsRequestActive()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_IsRequestActive();
    // public Meta.WitAi.Interfaces.ITranscriptionProvider get_TranscriptionProvider()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Meta::WitAi::Interfaces::ITranscriptionProvider* get_TranscriptionProvider();
    // public System.Void set_TranscriptionProvider(Meta.WitAi.Interfaces.ITranscriptionProvider value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_TranscriptionProvider(::Meta::WitAi::Interfaces::ITranscriptionProvider* value);
    // public System.Boolean get_MicActive()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_MicActive();
    // public Meta.WitAi.Dictation.Events.DictationEvents get_DictationEvents()
    // Offset: 0x2AD0CFC
    ::Meta::WitAi::Dictation::Events::DictationEvents* get_DictationEvents();
    // public System.Void set_DictationEvents(Meta.WitAi.Dictation.Events.DictationEvents value)
    // Offset: 0x2AD0D04
    void set_DictationEvents(::Meta::WitAi::Dictation::Events::DictationEvents* value);
    // public Meta.WitAi.Events.TelemetryEvents get_TelemetryEvents()
    // Offset: 0x2AD0D0C
    ::Meta::WitAi::Events::TelemetryEvents* get_TelemetryEvents();
    // public System.Void set_TelemetryEvents(Meta.WitAi.Events.TelemetryEvents value)
    // Offset: 0x2AD0D14
    void set_TelemetryEvents(::Meta::WitAi::Events::TelemetryEvents* value);
    // public Meta.WitAi.Interfaces.IAudioInputEvents get_AudioEvents()
    // Offset: 0x2AD0CE4
    ::Meta::WitAi::Interfaces::IAudioInputEvents* get_AudioEvents();
    // public Meta.WitAi.Interfaces.ITranscriptionEvent get_TranscriptionEvents()
    // Offset: 0x2AD0D1C
    ::Meta::WitAi::Interfaces::ITranscriptionEvent* get_TranscriptionEvents();
    // protected System.Boolean get_ShouldSendMicData()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_ShouldSendMicData();
    // public System.Void Activate()
    // Offset: 0x2AD0D2C
    void Activate();
    // public System.Void Activate(Meta.WitAi.Configuration.WitRequestOptions requestOptions)
    // Offset: 0x2AD0DC8
    void Activate(::Meta::WitAi::Configuration::WitRequestOptions* requestOptions);
    // public Meta.WitAi.Requests.VoiceServiceRequest Activate(Meta.WitAi.Requests.VoiceServiceRequestEvents requestEvents)
    // Offset: 0x2AD0E40
    ::Meta::WitAi::Requests::VoiceServiceRequest* Activate(::Meta::WitAi::Requests::VoiceServiceRequestEvents* requestEvents);
    // public Meta.WitAi.Requests.VoiceServiceRequest Activate(Meta.WitAi.Configuration.WitRequestOptions requestOptions, Meta.WitAi.Requests.VoiceServiceRequestEvents requestEvents)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Meta::WitAi::Requests::VoiceServiceRequest* Activate(::Meta::WitAi::Configuration::WitRequestOptions* requestOptions, ::Meta::WitAi::Requests::VoiceServiceRequestEvents* requestEvents);
    // public System.Void ActivateImmediately()
    // Offset: 0x2AD0EB8
    void ActivateImmediately();
    // public System.Void ActivateImmediately(Meta.WitAi.Configuration.WitRequestOptions requestOptions)
    // Offset: 0x2AD0F54
    void ActivateImmediately(::Meta::WitAi::Configuration::WitRequestOptions* requestOptions);
    // public Meta.WitAi.Requests.VoiceServiceRequest ActivateImmediately(Meta.WitAi.Requests.VoiceServiceRequestEvents requestEvents)
    // Offset: 0x2AD0FCC
    ::Meta::WitAi::Requests::VoiceServiceRequest* ActivateImmediately(::Meta::WitAi::Requests::VoiceServiceRequestEvents* requestEvents);
    // public Meta.WitAi.Requests.VoiceServiceRequest ActivateImmediately(Meta.WitAi.Configuration.WitRequestOptions requestOptions, Meta.WitAi.Requests.VoiceServiceRequestEvents requestEvents)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Meta::WitAi::Requests::VoiceServiceRequest* ActivateImmediately(::Meta::WitAi::Configuration::WitRequestOptions* requestOptions, ::Meta::WitAi::Requests::VoiceServiceRequestEvents* requestEvents);
    // public System.Void Deactivate()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Deactivate();
    // public System.Void Cancel()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Cancel();
    // protected System.Void Awake()
    // Offset: 0x2AD1044
    void Awake();
    // protected System.Void OnEnable()
    // Offset: 0x2AD1184
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x2AD1188
    void OnDisable();
    // protected System.Void .ctor()
    // Offset: 0x2AD118C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DictationService* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::DictationService::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DictationService*, creationType>()));
    }
  }; // Meta.WitAi.Dictation.DictationService
  #pragma pack(pop)
  static check_size<sizeof(DictationService), 40 + sizeof(::Meta::WitAi::Events::TelemetryEvents*)> __Meta_WitAi_Dictation_DictationServiceSizeCheck;
  static_assert(sizeof(DictationService) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::WitAi::Dictation::DictationService::get_Active
// Il2CppName: get_Active
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::Dictation::DictationService::*)()>(&Meta::WitAi::Dictation::DictationService::get_Active)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Dictation::DictationService*), "get_Active", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Dictation::DictationService::get_IsRequestActive
// Il2CppName: get_IsRequestActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::Dictation::DictationService::*)()>(&Meta::WitAi::Dictation::DictationService::get_IsRequestActive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Dictation::DictationService*), "get_IsRequestActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Dictation::DictationService::get_TranscriptionProvider
// Il2CppName: get_TranscriptionProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Interfaces::ITranscriptionProvider* (Meta::WitAi::Dictation::DictationService::*)()>(&Meta::WitAi::Dictation::DictationService::get_TranscriptionProvider)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Dictation::DictationService*), "get_TranscriptionProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Dictation::DictationService::set_TranscriptionProvider
// Il2CppName: set_TranscriptionProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Dictation::DictationService::*)(::Meta::WitAi::Interfaces::ITranscriptionProvider*)>(&Meta::WitAi::Dictation::DictationService::set_TranscriptionProvider)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Interfaces", "ITranscriptionProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Dictation::DictationService*), "set_TranscriptionProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Dictation::DictationService::get_MicActive
// Il2CppName: get_MicActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::Dictation::DictationService::*)()>(&Meta::WitAi::Dictation::DictationService::get_MicActive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Dictation::DictationService*), "get_MicActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Dictation::DictationService::get_DictationEvents
// Il2CppName: get_DictationEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Dictation::Events::DictationEvents* (Meta::WitAi::Dictation::DictationService::*)()>(&Meta::WitAi::Dictation::DictationService::get_DictationEvents)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Dictation::DictationService*), "get_DictationEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Dictation::DictationService::set_DictationEvents
// Il2CppName: set_DictationEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Dictation::DictationService::*)(::Meta::WitAi::Dictation::Events::DictationEvents*)>(&Meta::WitAi::Dictation::DictationService::set_DictationEvents)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Dictation.Events", "DictationEvents")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Dictation::DictationService*), "set_DictationEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Dictation::DictationService::get_TelemetryEvents
// Il2CppName: get_TelemetryEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Events::TelemetryEvents* (Meta::WitAi::Dictation::DictationService::*)()>(&Meta::WitAi::Dictation::DictationService::get_TelemetryEvents)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Dictation::DictationService*), "get_TelemetryEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Dictation::DictationService::set_TelemetryEvents
// Il2CppName: set_TelemetryEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Dictation::DictationService::*)(::Meta::WitAi::Events::TelemetryEvents*)>(&Meta::WitAi::Dictation::DictationService::set_TelemetryEvents)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Events", "TelemetryEvents")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Dictation::DictationService*), "set_TelemetryEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Dictation::DictationService::get_AudioEvents
// Il2CppName: get_AudioEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Interfaces::IAudioInputEvents* (Meta::WitAi::Dictation::DictationService::*)()>(&Meta::WitAi::Dictation::DictationService::get_AudioEvents)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Dictation::DictationService*), "get_AudioEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Dictation::DictationService::get_TranscriptionEvents
// Il2CppName: get_TranscriptionEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Interfaces::ITranscriptionEvent* (Meta::WitAi::Dictation::DictationService::*)()>(&Meta::WitAi::Dictation::DictationService::get_TranscriptionEvents)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Dictation::DictationService*), "get_TranscriptionEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Dictation::DictationService::get_ShouldSendMicData
// Il2CppName: get_ShouldSendMicData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::Dictation::DictationService::*)()>(&Meta::WitAi::Dictation::DictationService::get_ShouldSendMicData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Dictation::DictationService*), "get_ShouldSendMicData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Dictation::DictationService::Activate
// Il2CppName: Activate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Dictation::DictationService::*)()>(&Meta::WitAi::Dictation::DictationService::Activate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Dictation::DictationService*), "Activate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Dictation::DictationService::Activate
// Il2CppName: Activate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Dictation::DictationService::*)(::Meta::WitAi::Configuration::WitRequestOptions*)>(&Meta::WitAi::Dictation::DictationService::Activate)> {
  static const MethodInfo* get() {
    static auto* requestOptions = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Configuration", "WitRequestOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Dictation::DictationService*), "Activate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{requestOptions});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Dictation::DictationService::Activate
// Il2CppName: Activate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Requests::VoiceServiceRequest* (Meta::WitAi::Dictation::DictationService::*)(::Meta::WitAi::Requests::VoiceServiceRequestEvents*)>(&Meta::WitAi::Dictation::DictationService::Activate)> {
  static const MethodInfo* get() {
    static auto* requestEvents = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Requests", "VoiceServiceRequestEvents")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Dictation::DictationService*), "Activate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{requestEvents});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Dictation::DictationService::Activate
// Il2CppName: Activate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Requests::VoiceServiceRequest* (Meta::WitAi::Dictation::DictationService::*)(::Meta::WitAi::Configuration::WitRequestOptions*, ::Meta::WitAi::Requests::VoiceServiceRequestEvents*)>(&Meta::WitAi::Dictation::DictationService::Activate)> {
  static const MethodInfo* get() {
    static auto* requestOptions = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Configuration", "WitRequestOptions")->byval_arg;
    static auto* requestEvents = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Requests", "VoiceServiceRequestEvents")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Dictation::DictationService*), "Activate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{requestOptions, requestEvents});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Dictation::DictationService::ActivateImmediately
// Il2CppName: ActivateImmediately
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Dictation::DictationService::*)()>(&Meta::WitAi::Dictation::DictationService::ActivateImmediately)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Dictation::DictationService*), "ActivateImmediately", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Dictation::DictationService::ActivateImmediately
// Il2CppName: ActivateImmediately
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Dictation::DictationService::*)(::Meta::WitAi::Configuration::WitRequestOptions*)>(&Meta::WitAi::Dictation::DictationService::ActivateImmediately)> {
  static const MethodInfo* get() {
    static auto* requestOptions = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Configuration", "WitRequestOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Dictation::DictationService*), "ActivateImmediately", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{requestOptions});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Dictation::DictationService::ActivateImmediately
// Il2CppName: ActivateImmediately
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Requests::VoiceServiceRequest* (Meta::WitAi::Dictation::DictationService::*)(::Meta::WitAi::Requests::VoiceServiceRequestEvents*)>(&Meta::WitAi::Dictation::DictationService::ActivateImmediately)> {
  static const MethodInfo* get() {
    static auto* requestEvents = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Requests", "VoiceServiceRequestEvents")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Dictation::DictationService*), "ActivateImmediately", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{requestEvents});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Dictation::DictationService::ActivateImmediately
// Il2CppName: ActivateImmediately
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Requests::VoiceServiceRequest* (Meta::WitAi::Dictation::DictationService::*)(::Meta::WitAi::Configuration::WitRequestOptions*, ::Meta::WitAi::Requests::VoiceServiceRequestEvents*)>(&Meta::WitAi::Dictation::DictationService::ActivateImmediately)> {
  static const MethodInfo* get() {
    static auto* requestOptions = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Configuration", "WitRequestOptions")->byval_arg;
    static auto* requestEvents = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Requests", "VoiceServiceRequestEvents")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Dictation::DictationService*), "ActivateImmediately", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{requestOptions, requestEvents});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Dictation::DictationService::Deactivate
// Il2CppName: Deactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Dictation::DictationService::*)()>(&Meta::WitAi::Dictation::DictationService::Deactivate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Dictation::DictationService*), "Deactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Dictation::DictationService::Cancel
// Il2CppName: Cancel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Dictation::DictationService::*)()>(&Meta::WitAi::Dictation::DictationService::Cancel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Dictation::DictationService*), "Cancel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Dictation::DictationService::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Dictation::DictationService::*)()>(&Meta::WitAi::Dictation::DictationService::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Dictation::DictationService*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Dictation::DictationService::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Dictation::DictationService::*)()>(&Meta::WitAi::Dictation::DictationService::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Dictation::DictationService*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Dictation::DictationService::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Dictation::DictationService::*)()>(&Meta::WitAi::Dictation::DictationService::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Dictation::DictationService*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Dictation::DictationService::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
