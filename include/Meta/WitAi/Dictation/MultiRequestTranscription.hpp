// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Meta::WitAi::Dictation
namespace Meta::WitAi::Dictation {
  // Forward declaring type: DictationService
  class DictationService;
}
// Forward declaring namespace: Meta::WitAi::Events
namespace Meta::WitAi::Events {
  // Forward declaring type: WitTranscriptionEvent
  class WitTranscriptionEvent;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Completed forward declares
// Type namespace: Meta.WitAi.Dictation
namespace Meta::WitAi::Dictation {
  // Forward declaring type: MultiRequestTranscription
  class MultiRequestTranscription;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::WitAi::Dictation::MultiRequestTranscription);
DEFINE_IL2CPP_ARG_TYPE(::Meta::WitAi::Dictation::MultiRequestTranscription*, "Meta.WitAi.Dictation", "MultiRequestTranscription");
// Type namespace: Meta.WitAi.Dictation
namespace Meta::WitAi::Dictation {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: Meta.WitAi.Dictation.MultiRequestTranscription
  // [TokenAttribute] Offset: FFFFFFFF
  class MultiRequestTranscription : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private Meta.WitAi.Dictation.DictationService witDictation
    // Size: 0x8
    // Offset: 0x20
    ::Meta::WitAi::Dictation::DictationService* witDictation;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::Dictation::DictationService*) == 0x8);
    // private System.Int32 linesBetweenActivations
    // Size: 0x4
    // Offset: 0x28
    int linesBetweenActivations;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: linesBetweenActivations and: activationSeparator
    char __padding1[0x4] = {};
    // private System.String activationSeparator
    // Size: 0x8
    // Offset: 0x30
    ::StringW activationSeparator;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private Meta.WitAi.Events.WitTranscriptionEvent onTranscriptionUpdated
    // Size: 0x8
    // Offset: 0x38
    ::Meta::WitAi::Events::WitTranscriptionEvent* onTranscriptionUpdated;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::Events::WitTranscriptionEvent*) == 0x8);
    // private System.Text.StringBuilder _text
    // Size: 0x8
    // Offset: 0x40
    ::System::Text::StringBuilder* text;
    // Field size check
    static_assert(sizeof(::System::Text::StringBuilder*) == 0x8);
    // private System.String _activeText
    // Size: 0x8
    // Offset: 0x48
    ::StringW activeText;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean _newSection
    // Size: 0x1
    // Offset: 0x50
    bool newSection;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: newSection and: separator
    char __padding6[0x7] = {};
    // private System.Text.StringBuilder _separator
    // Size: 0x8
    // Offset: 0x58
    ::System::Text::StringBuilder* separator;
    // Field size check
    static_assert(sizeof(::System::Text::StringBuilder*) == 0x8);
    public:
    // Get instance field reference: private Meta.WitAi.Dictation.DictationService witDictation
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::Dictation::DictationService*& dyn_witDictation();
    // Get instance field reference: private System.Int32 linesBetweenActivations
    [[deprecated("Use field access instead!")]] int& dyn_linesBetweenActivations();
    // Get instance field reference: private System.String activationSeparator
    [[deprecated("Use field access instead!")]] ::StringW& dyn_activationSeparator();
    // Get instance field reference: private Meta.WitAi.Events.WitTranscriptionEvent onTranscriptionUpdated
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::Events::WitTranscriptionEvent*& dyn_onTranscriptionUpdated();
    // Get instance field reference: private System.Text.StringBuilder _text
    [[deprecated("Use field access instead!")]] ::System::Text::StringBuilder*& dyn__text();
    // Get instance field reference: private System.String _activeText
    [[deprecated("Use field access instead!")]] ::StringW& dyn__activeText();
    // Get instance field reference: private System.Boolean _newSection
    [[deprecated("Use field access instead!")]] bool& dyn__newSection();
    // Get instance field reference: private System.Text.StringBuilder _separator
    [[deprecated("Use field access instead!")]] ::System::Text::StringBuilder*& dyn__separator();
    // private System.Void Awake()
    // Offset: 0x2AD12BC
    void Awake();
    // private System.Void OnEnable()
    // Offset: 0x2AD142C
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0x2AD15C8
    void OnDisable();
    // private System.Void OnCancelled()
    // Offset: 0x2AD1794
    void OnCancelled();
    // private System.Void OnFullTranscription(System.String text)
    // Offset: 0x2AD18E8
    void OnFullTranscription(::StringW text);
    // private System.Void OnPartialTranscription(System.String text)
    // Offset: 0x2AD1998
    void OnPartialTranscription(::StringW text);
    // public System.Void Clear()
    // Offset: 0x2AD19B4
    void Clear();
    // private System.Void OnTranscriptionUpdated()
    // Offset: 0x2AD17F0
    void OnTranscriptionUpdated();
    // public System.Void .ctor()
    // Offset: 0x2AD1A34
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MultiRequestTranscription* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::MultiRequestTranscription::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MultiRequestTranscription*, creationType>()));
    }
  }; // Meta.WitAi.Dictation.MultiRequestTranscription
  #pragma pack(pop)
  static check_size<sizeof(MultiRequestTranscription), 88 + sizeof(::System::Text::StringBuilder*)> __Meta_WitAi_Dictation_MultiRequestTranscriptionSizeCheck;
  static_assert(sizeof(MultiRequestTranscription) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::WitAi::Dictation::MultiRequestTranscription::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Dictation::MultiRequestTranscription::*)()>(&Meta::WitAi::Dictation::MultiRequestTranscription::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Dictation::MultiRequestTranscription*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Dictation::MultiRequestTranscription::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Dictation::MultiRequestTranscription::*)()>(&Meta::WitAi::Dictation::MultiRequestTranscription::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Dictation::MultiRequestTranscription*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Dictation::MultiRequestTranscription::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Dictation::MultiRequestTranscription::*)()>(&Meta::WitAi::Dictation::MultiRequestTranscription::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Dictation::MultiRequestTranscription*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Dictation::MultiRequestTranscription::OnCancelled
// Il2CppName: OnCancelled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Dictation::MultiRequestTranscription::*)()>(&Meta::WitAi::Dictation::MultiRequestTranscription::OnCancelled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Dictation::MultiRequestTranscription*), "OnCancelled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Dictation::MultiRequestTranscription::OnFullTranscription
// Il2CppName: OnFullTranscription
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Dictation::MultiRequestTranscription::*)(::StringW)>(&Meta::WitAi::Dictation::MultiRequestTranscription::OnFullTranscription)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Dictation::MultiRequestTranscription*), "OnFullTranscription", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Dictation::MultiRequestTranscription::OnPartialTranscription
// Il2CppName: OnPartialTranscription
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Dictation::MultiRequestTranscription::*)(::StringW)>(&Meta::WitAi::Dictation::MultiRequestTranscription::OnPartialTranscription)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Dictation::MultiRequestTranscription*), "OnPartialTranscription", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Dictation::MultiRequestTranscription::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Dictation::MultiRequestTranscription::*)()>(&Meta::WitAi::Dictation::MultiRequestTranscription::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Dictation::MultiRequestTranscription*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Dictation::MultiRequestTranscription::OnTranscriptionUpdated
// Il2CppName: OnTranscriptionUpdated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Dictation::MultiRequestTranscription::*)()>(&Meta::WitAi::Dictation::MultiRequestTranscription::OnTranscriptionUpdated)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Dictation::MultiRequestTranscription*), "OnTranscriptionUpdated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Dictation::MultiRequestTranscription::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
