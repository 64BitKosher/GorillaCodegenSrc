// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Meta.WitAi.ITelemetryEventsProvider
#include "Meta/WitAi/ITelemetryEventsProvider.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Meta::WitAi::Interfaces
namespace Meta::WitAi::Interfaces {
  // Forward declaring type: ITranscriptionProvider
  class ITranscriptionProvider;
}
// Forward declaring namespace: Meta::WitAi::Dictation::Events
namespace Meta::WitAi::Dictation::Events {
  // Forward declaring type: DictationEvents
  class DictationEvents;
}
// Forward declaring namespace: Meta::WitAi::Events
namespace Meta::WitAi::Events {
  // Forward declaring type: TelemetryEvents
  class TelemetryEvents;
}
// Forward declaring namespace: Meta::WitAi::Requests
namespace Meta::WitAi::Requests {
  // Forward declaring type: VoiceServiceRequest
  class VoiceServiceRequest;
  // Forward declaring type: VoiceServiceRequestEvents
  class VoiceServiceRequestEvents;
}
// Forward declaring namespace: Meta::WitAi::Configuration
namespace Meta::WitAi::Configuration {
  // Forward declaring type: WitRequestOptions
  class WitRequestOptions;
}
// Completed forward declares
// Type namespace: Meta.WitAi.Dictation
namespace Meta::WitAi::Dictation {
  // Forward declaring type: IDictationService
  class IDictationService;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::WitAi::Dictation::IDictationService);
DEFINE_IL2CPP_ARG_TYPE(::Meta::WitAi::Dictation::IDictationService*, "Meta.WitAi.Dictation", "IDictationService");
// Type namespace: Meta.WitAi.Dictation
namespace Meta::WitAi::Dictation {
  // Size: 0x0
  #pragma pack(push, 1)
  // Autogenerated type: Meta.WitAi.Dictation.IDictationService
  // [TokenAttribute] Offset: FFFFFFFF
  class IDictationService/*, public ::Meta::WitAi::ITelemetryEventsProvider*/ {
    public:
    // Creating interface conversion operator: operator ::Meta::WitAi::ITelemetryEventsProvider
    operator ::Meta::WitAi::ITelemetryEventsProvider() noexcept {
      return *reinterpret_cast<::Meta::WitAi::ITelemetryEventsProvider*>(this);
    }
    // public System.Boolean get_Active()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_Active();
    // public System.Boolean get_IsRequestActive()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_IsRequestActive();
    // public System.Boolean get_MicActive()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_MicActive();
    // public Meta.WitAi.Interfaces.ITranscriptionProvider get_TranscriptionProvider()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Meta::WitAi::Interfaces::ITranscriptionProvider* get_TranscriptionProvider();
    // public System.Void set_TranscriptionProvider(Meta.WitAi.Interfaces.ITranscriptionProvider value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_TranscriptionProvider(::Meta::WitAi::Interfaces::ITranscriptionProvider* value);
    // public Meta.WitAi.Dictation.Events.DictationEvents get_DictationEvents()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Meta::WitAi::Dictation::Events::DictationEvents* get_DictationEvents();
    // public System.Void set_DictationEvents(Meta.WitAi.Dictation.Events.DictationEvents value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_DictationEvents(::Meta::WitAi::Dictation::Events::DictationEvents* value);
    // public Meta.WitAi.Events.TelemetryEvents get_TelemetryEvents()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Meta::WitAi::Events::TelemetryEvents* get_TelemetryEvents();
    // public System.Void set_TelemetryEvents(Meta.WitAi.Events.TelemetryEvents value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_TelemetryEvents(::Meta::WitAi::Events::TelemetryEvents* value);
    // public Meta.WitAi.Requests.VoiceServiceRequest Activate(Meta.WitAi.Configuration.WitRequestOptions requestOptions, Meta.WitAi.Requests.VoiceServiceRequestEvents requestEvents)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Meta::WitAi::Requests::VoiceServiceRequest* Activate(::Meta::WitAi::Configuration::WitRequestOptions* requestOptions, ::Meta::WitAi::Requests::VoiceServiceRequestEvents* requestEvents);
    // public Meta.WitAi.Requests.VoiceServiceRequest ActivateImmediately(Meta.WitAi.Configuration.WitRequestOptions requestOptions, Meta.WitAi.Requests.VoiceServiceRequestEvents requestEvents)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Meta::WitAi::Requests::VoiceServiceRequest* ActivateImmediately(::Meta::WitAi::Configuration::WitRequestOptions* requestOptions, ::Meta::WitAi::Requests::VoiceServiceRequestEvents* requestEvents);
    // public System.Void Deactivate()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Deactivate();
    // public System.Void Cancel()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Cancel();
  }; // Meta.WitAi.Dictation.IDictationService
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::WitAi::Dictation::IDictationService::get_Active
// Il2CppName: get_Active
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::Dictation::IDictationService::*)()>(&Meta::WitAi::Dictation::IDictationService::get_Active)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Dictation::IDictationService*), "get_Active", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Dictation::IDictationService::get_IsRequestActive
// Il2CppName: get_IsRequestActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::Dictation::IDictationService::*)()>(&Meta::WitAi::Dictation::IDictationService::get_IsRequestActive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Dictation::IDictationService*), "get_IsRequestActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Dictation::IDictationService::get_MicActive
// Il2CppName: get_MicActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::Dictation::IDictationService::*)()>(&Meta::WitAi::Dictation::IDictationService::get_MicActive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Dictation::IDictationService*), "get_MicActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Dictation::IDictationService::get_TranscriptionProvider
// Il2CppName: get_TranscriptionProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Interfaces::ITranscriptionProvider* (Meta::WitAi::Dictation::IDictationService::*)()>(&Meta::WitAi::Dictation::IDictationService::get_TranscriptionProvider)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Dictation::IDictationService*), "get_TranscriptionProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Dictation::IDictationService::set_TranscriptionProvider
// Il2CppName: set_TranscriptionProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Dictation::IDictationService::*)(::Meta::WitAi::Interfaces::ITranscriptionProvider*)>(&Meta::WitAi::Dictation::IDictationService::set_TranscriptionProvider)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Interfaces", "ITranscriptionProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Dictation::IDictationService*), "set_TranscriptionProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Dictation::IDictationService::get_DictationEvents
// Il2CppName: get_DictationEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Dictation::Events::DictationEvents* (Meta::WitAi::Dictation::IDictationService::*)()>(&Meta::WitAi::Dictation::IDictationService::get_DictationEvents)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Dictation::IDictationService*), "get_DictationEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Dictation::IDictationService::set_DictationEvents
// Il2CppName: set_DictationEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Dictation::IDictationService::*)(::Meta::WitAi::Dictation::Events::DictationEvents*)>(&Meta::WitAi::Dictation::IDictationService::set_DictationEvents)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Dictation.Events", "DictationEvents")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Dictation::IDictationService*), "set_DictationEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Dictation::IDictationService::get_TelemetryEvents
// Il2CppName: get_TelemetryEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Events::TelemetryEvents* (Meta::WitAi::Dictation::IDictationService::*)()>(&Meta::WitAi::Dictation::IDictationService::get_TelemetryEvents)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Dictation::IDictationService*), "get_TelemetryEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Dictation::IDictationService::set_TelemetryEvents
// Il2CppName: set_TelemetryEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Dictation::IDictationService::*)(::Meta::WitAi::Events::TelemetryEvents*)>(&Meta::WitAi::Dictation::IDictationService::set_TelemetryEvents)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Events", "TelemetryEvents")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Dictation::IDictationService*), "set_TelemetryEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Dictation::IDictationService::Activate
// Il2CppName: Activate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Requests::VoiceServiceRequest* (Meta::WitAi::Dictation::IDictationService::*)(::Meta::WitAi::Configuration::WitRequestOptions*, ::Meta::WitAi::Requests::VoiceServiceRequestEvents*)>(&Meta::WitAi::Dictation::IDictationService::Activate)> {
  static const MethodInfo* get() {
    static auto* requestOptions = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Configuration", "WitRequestOptions")->byval_arg;
    static auto* requestEvents = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Requests", "VoiceServiceRequestEvents")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Dictation::IDictationService*), "Activate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{requestOptions, requestEvents});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Dictation::IDictationService::ActivateImmediately
// Il2CppName: ActivateImmediately
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Requests::VoiceServiceRequest* (Meta::WitAi::Dictation::IDictationService::*)(::Meta::WitAi::Configuration::WitRequestOptions*, ::Meta::WitAi::Requests::VoiceServiceRequestEvents*)>(&Meta::WitAi::Dictation::IDictationService::ActivateImmediately)> {
  static const MethodInfo* get() {
    static auto* requestOptions = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Configuration", "WitRequestOptions")->byval_arg;
    static auto* requestEvents = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Requests", "VoiceServiceRequestEvents")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Dictation::IDictationService*), "ActivateImmediately", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{requestOptions, requestEvents});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Dictation::IDictationService::Deactivate
// Il2CppName: Deactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Dictation::IDictationService::*)()>(&Meta::WitAi::Dictation::IDictationService::Deactivate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Dictation::IDictationService*), "Deactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Dictation::IDictationService::Cancel
// Il2CppName: Cancel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Dictation::IDictationService::*)()>(&Meta::WitAi::Dictation::IDictationService::Cancel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Dictation::IDictationService*), "Cancel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
