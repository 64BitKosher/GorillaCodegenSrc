// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Meta.WitAi.Data.VoiceSession
#include "Meta/WitAi/Data/VoiceSession.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Meta::WitAi::Dictation
namespace Meta::WitAi::Dictation {
  // Forward declaring type: IDictationService
  class IDictationService;
}
// Completed forward declares
// Type namespace: Meta.WitAi.Dictation.Data
namespace Meta::WitAi::Dictation::Data {
  // Forward declaring type: DictationSession
  class DictationSession;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::WitAi::Dictation::Data::DictationSession);
DEFINE_IL2CPP_ARG_TYPE(::Meta::WitAi::Dictation::Data::DictationSession*, "Meta.WitAi.Dictation.Data", "DictationSession");
// Type namespace: Meta.WitAi.Dictation.Data
namespace Meta::WitAi::Dictation::Data {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: Meta.WitAi.Dictation.Data.DictationSession
  // [TokenAttribute] Offset: FFFFFFFF
  class DictationSession : public ::Meta::WitAi::Data::VoiceSession {
    public:
    // Writing base type padding for base size: 0x21 to desired offset: 0x28
    char ___base_padding[0x7] = {};
    public:
    // public Meta.WitAi.Dictation.IDictationService dictationService
    // Size: 0x8
    // Offset: 0x28
    ::Meta::WitAi::Dictation::IDictationService* dictationService;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::Dictation::IDictationService*) == 0x8);
    // public System.String[] clientRequestId
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::StringW> clientRequestId;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // public System.String sessionId
    // Size: 0x8
    // Offset: 0x38
    ::StringW sessionId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: public Meta.WitAi.Dictation.IDictationService dictationService
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::Dictation::IDictationService*& dyn_dictationService();
    // Get instance field reference: public System.String[] clientRequestId
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn_clientRequestId();
    // Get instance field reference: public System.String sessionId
    [[deprecated("Use field access instead!")]] ::StringW& dyn_sessionId();
    // public System.Void .ctor()
    // Offset: 0x2AD2128
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DictationSession* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Dictation::Data::DictationSession::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DictationSession*, creationType>()));
    }
  }; // Meta.WitAi.Dictation.Data.DictationSession
  #pragma pack(pop)
  static check_size<sizeof(DictationSession), 56 + sizeof(::StringW)> __Meta_WitAi_Dictation_Data_DictationSessionSizeCheck;
  static_assert(sizeof(DictationSession) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::WitAi::Dictation::Data::DictationSession::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
