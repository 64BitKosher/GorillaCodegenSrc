// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Meta::WitAi::Data::Configuration
namespace Meta::WitAi::Data::Configuration {
  // Forward declaring type: WitConfiguration
  class WitConfiguration;
}
// Forward declaring namespace: Meta::WitAi::Interfaces
namespace Meta::WitAi::Interfaces {
  // Forward declaring type: CustomTranscriptionProvider
  class CustomTranscriptionProvider;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector2
  struct Vector2;
}
// Completed forward declares
// Type namespace: Meta.WitAi.Configuration
namespace Meta::WitAi::Configuration {
  // Forward declaring type: WitRuntimeConfiguration
  class WitRuntimeConfiguration;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::WitAi::Configuration::WitRuntimeConfiguration);
DEFINE_IL2CPP_ARG_TYPE(::Meta::WitAi::Configuration::WitRuntimeConfiguration*, "Meta.WitAi.Configuration", "WitRuntimeConfiguration");
// Type namespace: Meta.WitAi.Configuration
namespace Meta::WitAi::Configuration {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: Meta.WitAi.Configuration.WitRuntimeConfiguration
  // [TokenAttribute] Offset: FFFFFFFF
  class WitRuntimeConfiguration : public ::Il2CppObject {
    public:
    public:
    // public Meta.WitAi.Data.Configuration.WitConfiguration witConfiguration
    // Size: 0x8
    // Offset: 0x10
    ::Meta::WitAi::Data::Configuration::WitConfiguration* witConfiguration;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::Data::Configuration::WitConfiguration*) == 0x8);
    // public System.Single minKeepAliveVolume
    // Size: 0x4
    // Offset: 0x18
    float minKeepAliveVolume;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single minKeepAliveTimeInSeconds
    // Size: 0x4
    // Offset: 0x1C
    float minKeepAliveTimeInSeconds;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single minTranscriptionKeepAliveTimeInSeconds
    // Size: 0x4
    // Offset: 0x20
    float minTranscriptionKeepAliveTimeInSeconds;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single maxRecordingTime
    // Size: 0x4
    // Offset: 0x24
    float maxRecordingTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single soundWakeThreshold
    // Size: 0x4
    // Offset: 0x28
    float soundWakeThreshold;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 sampleLengthInMs
    // Size: 0x4
    // Offset: 0x2C
    int sampleLengthInMs;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single micBufferLengthInSeconds
    // Size: 0x4
    // Offset: 0x30
    float micBufferLengthInSeconds;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 maxConcurrentRequests
    // Size: 0x4
    // Offset: 0x34
    int maxConcurrentRequests;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean sendAudioToWit
    // Size: 0x1
    // Offset: 0x38
    bool sendAudioToWit;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: sendAudioToWit and: customTranscriptionProvider
    char __padding9[0x7] = {};
    // public Meta.WitAi.Interfaces.CustomTranscriptionProvider customTranscriptionProvider
    // Size: 0x8
    // Offset: 0x40
    ::Meta::WitAi::Interfaces::CustomTranscriptionProvider* customTranscriptionProvider;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::Interfaces::CustomTranscriptionProvider*) == 0x8);
    // public System.Boolean alwaysRecord
    // Size: 0x1
    // Offset: 0x48
    bool alwaysRecord;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: alwaysRecord and: preferredActivationOffset
    char __padding11[0x3] = {};
    // public System.Single preferredActivationOffset
    // Size: 0x4
    // Offset: 0x4C
    float preferredActivationOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: public Meta.WitAi.Data.Configuration.WitConfiguration witConfiguration
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::Data::Configuration::WitConfiguration*& dyn_witConfiguration();
    // Get instance field reference: public System.Single minKeepAliveVolume
    [[deprecated("Use field access instead!")]] float& dyn_minKeepAliveVolume();
    // Get instance field reference: public System.Single minKeepAliveTimeInSeconds
    [[deprecated("Use field access instead!")]] float& dyn_minKeepAliveTimeInSeconds();
    // Get instance field reference: public System.Single minTranscriptionKeepAliveTimeInSeconds
    [[deprecated("Use field access instead!")]] float& dyn_minTranscriptionKeepAliveTimeInSeconds();
    // Get instance field reference: public System.Single maxRecordingTime
    [[deprecated("Use field access instead!")]] float& dyn_maxRecordingTime();
    // Get instance field reference: public System.Single soundWakeThreshold
    [[deprecated("Use field access instead!")]] float& dyn_soundWakeThreshold();
    // Get instance field reference: public System.Int32 sampleLengthInMs
    [[deprecated("Use field access instead!")]] int& dyn_sampleLengthInMs();
    // Get instance field reference: public System.Single micBufferLengthInSeconds
    [[deprecated("Use field access instead!")]] float& dyn_micBufferLengthInSeconds();
    // Get instance field reference: public System.Int32 maxConcurrentRequests
    [[deprecated("Use field access instead!")]] int& dyn_maxConcurrentRequests();
    // Get instance field reference: public System.Boolean sendAudioToWit
    [[deprecated("Use field access instead!")]] bool& dyn_sendAudioToWit();
    // Get instance field reference: public Meta.WitAi.Interfaces.CustomTranscriptionProvider customTranscriptionProvider
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::Interfaces::CustomTranscriptionProvider*& dyn_customTranscriptionProvider();
    // Get instance field reference: public System.Boolean alwaysRecord
    [[deprecated("Use field access instead!")]] bool& dyn_alwaysRecord();
    // Get instance field reference: public System.Single preferredActivationOffset
    [[deprecated("Use field access instead!")]] float& dyn_preferredActivationOffset();
    // protected UnityEngine.Vector2 get_RecordingTimeRange()
    // Offset: 0x4464530
    ::UnityEngine::Vector2 get_RecordingTimeRange();
    // public System.Void .ctor()
    // Offset: 0x446453C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WitRuntimeConfiguration* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Configuration::WitRuntimeConfiguration::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WitRuntimeConfiguration*, creationType>()));
    }
  }; // Meta.WitAi.Configuration.WitRuntimeConfiguration
  #pragma pack(pop)
  static check_size<sizeof(WitRuntimeConfiguration), 76 + sizeof(float)> __Meta_WitAi_Configuration_WitRuntimeConfigurationSizeCheck;
  static_assert(sizeof(WitRuntimeConfiguration) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::WitAi::Configuration::WitRuntimeConfiguration::get_RecordingTimeRange
// Il2CppName: get_RecordingTimeRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (Meta::WitAi::Configuration::WitRuntimeConfiguration::*)()>(&Meta::WitAi::Configuration::WitRuntimeConfiguration::get_RecordingTimeRange)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Configuration::WitRuntimeConfiguration*), "get_RecordingTimeRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Configuration::WitRuntimeConfiguration::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
