// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Meta.WitAi.Configuration.WitRuntimeConfiguration
#include "Meta/WitAi/Configuration/WitRuntimeConfiguration.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Voice::Dictation::Configuration
namespace Oculus::Voice::Dictation::Configuration {
  // Forward declaring type: DictationConfiguration
  class DictationConfiguration;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector2
  struct Vector2;
}
// Completed forward declares
// Type namespace: Meta.WitAi.Configuration
namespace Meta::WitAi::Configuration {
  // Forward declaring type: WitDictationRuntimeConfiguration
  class WitDictationRuntimeConfiguration;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::WitAi::Configuration::WitDictationRuntimeConfiguration);
DEFINE_IL2CPP_ARG_TYPE(::Meta::WitAi::Configuration::WitDictationRuntimeConfiguration*, "Meta.WitAi.Configuration", "WitDictationRuntimeConfiguration");
// Type namespace: Meta.WitAi.Configuration
namespace Meta::WitAi::Configuration {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: Meta.WitAi.Configuration.WitDictationRuntimeConfiguration
  // [TokenAttribute] Offset: FFFFFFFF
  class WitDictationRuntimeConfiguration : public ::Meta::WitAi::Configuration::WitRuntimeConfiguration {
    public:
    public:
    // public Oculus.Voice.Dictation.Configuration.DictationConfiguration dictationConfiguration
    // Size: 0x8
    // Offset: 0x50
    ::Oculus::Voice::Dictation::Configuration::DictationConfiguration* dictationConfiguration;
    // Field size check
    static_assert(sizeof(::Oculus::Voice::Dictation::Configuration::DictationConfiguration*) == 0x8);
    public:
    // Creating conversion operator: operator ::Oculus::Voice::Dictation::Configuration::DictationConfiguration*
    constexpr operator ::Oculus::Voice::Dictation::Configuration::DictationConfiguration*() const noexcept {
      return dictationConfiguration;
    }
    // Get instance field reference: public Oculus.Voice.Dictation.Configuration.DictationConfiguration dictationConfiguration
    [[deprecated("Use field access instead!")]] ::Oculus::Voice::Dictation::Configuration::DictationConfiguration*& dyn_dictationConfiguration();
    // public System.Void .ctor()
    // Offset: 0x5716A20
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WitDictationRuntimeConfiguration* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Configuration::WitDictationRuntimeConfiguration::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WitDictationRuntimeConfiguration*, creationType>()));
    }
    // protected override UnityEngine.Vector2 get_RecordingTimeRange()
    // Offset: 0x5716A10
    // Implemented from: Meta.WitAi.Configuration.WitRuntimeConfiguration
    // Base method: UnityEngine.Vector2 WitRuntimeConfiguration::get_RecordingTimeRange()
    ::UnityEngine::Vector2 get_RecordingTimeRange();
  }; // Meta.WitAi.Configuration.WitDictationRuntimeConfiguration
  #pragma pack(pop)
  static check_size<sizeof(WitDictationRuntimeConfiguration), 80 + sizeof(::Oculus::Voice::Dictation::Configuration::DictationConfiguration*)> __Meta_WitAi_Configuration_WitDictationRuntimeConfigurationSizeCheck;
  static_assert(sizeof(WitDictationRuntimeConfiguration) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::WitAi::Configuration::WitDictationRuntimeConfiguration::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Meta::WitAi::Configuration::WitDictationRuntimeConfiguration::get_RecordingTimeRange
// Il2CppName: get_RecordingTimeRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (Meta::WitAi::Configuration::WitDictationRuntimeConfiguration::*)()>(&Meta::WitAi::Configuration::WitDictationRuntimeConfiguration::get_RecordingTimeRange)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Configuration::WitDictationRuntimeConfiguration*), "get_RecordingTimeRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
