// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Meta.WitAi.Requests.VoiceServiceRequestOptions
#include "Meta/WitAi/Requests/VoiceServiceRequestOptions.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Meta::WitAi::Interfaces
namespace Meta::WitAi::Interfaces {
  // Forward declaring type: IDynamicEntitiesProvider
  class IDynamicEntitiesProvider;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: Meta::WitAi
namespace Meta::WitAi {
  // Forward declaring type: WitRequest
  class WitRequest;
}
// Completed forward declares
// Type namespace: Meta.WitAi.Configuration
namespace Meta::WitAi::Configuration {
  // Forward declaring type: WitRequestOptions
  class WitRequestOptions;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::WitAi::Configuration::WitRequestOptions);
DEFINE_IL2CPP_ARG_TYPE(::Meta::WitAi::Configuration::WitRequestOptions*, "Meta.WitAi.Configuration", "WitRequestOptions");
// Type namespace: Meta.WitAi.Configuration
namespace Meta::WitAi::Configuration {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: Meta.WitAi.Configuration.WitRequestOptions
  // [TokenAttribute] Offset: FFFFFFFF
  class WitRequestOptions : public ::Meta::WitAi::Requests::VoiceServiceRequestOptions {
    public:
    // Writing base type padding for base size: 0x2C to desired offset: 0x30
    char ___base_padding[0x4] = {};
    public:
    // public Meta.WitAi.Interfaces.IDynamicEntitiesProvider dynamicEntities
    // Size: 0x8
    // Offset: 0x30
    ::Meta::WitAi::Interfaces::IDynamicEntitiesProvider* dynamicEntities;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::Interfaces::IDynamicEntitiesProvider*) == 0x8);
    // public System.Int32 nBestIntents
    // Size: 0x4
    // Offset: 0x38
    int nBestIntents;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: nBestIntents and: tag
    char __padding1[0x4] = {};
    // public System.String tag
    // Size: 0x8
    // Offset: 0x40
    ::StringW tag;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Action`1<Meta.WitAi.WitRequest> onResponse
    // Size: 0x8
    // Offset: 0x48
    ::System::Action_1<::Meta::WitAi::WitRequest*>* onResponse;
    // Field size check
    static_assert(sizeof(::System::Action_1<::Meta::WitAi::WitRequest*>*) == 0x8);
    public:
    // Get instance field reference: public Meta.WitAi.Interfaces.IDynamicEntitiesProvider dynamicEntities
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::Interfaces::IDynamicEntitiesProvider*& dyn_dynamicEntities();
    // Get instance field reference: public System.Int32 nBestIntents
    [[deprecated("Use field access instead!")]] int& dyn_nBestIntents();
    // Get instance field reference: public System.String tag
    [[deprecated("Use field access instead!")]] ::StringW& dyn_tag();
    // Get instance field reference: public System.Action`1<Meta.WitAi.WitRequest> onResponse
    [[deprecated("Use field access instead!")]] ::System::Action_1<::Meta::WitAi::WitRequest*>*& dyn_onResponse();
    // public System.String get_requestID()
    // Offset: 0x44641C0
    ::StringW get_requestID();
    // public System.String ToJsonString()
    // Offset: 0x44641C8
    ::StringW ToJsonString();
    // public System.Void .ctor()
    // Offset: 0x4464490
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WitRequestOptions* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Configuration::WitRequestOptions::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WitRequestOptions*, creationType>()));
    }
  }; // Meta.WitAi.Configuration.WitRequestOptions
  #pragma pack(pop)
  static check_size<sizeof(WitRequestOptions), 72 + sizeof(::System::Action_1<::Meta::WitAi::WitRequest*>*)> __Meta_WitAi_Configuration_WitRequestOptionsSizeCheck;
  static_assert(sizeof(WitRequestOptions) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::WitAi::Configuration::WitRequestOptions::get_requestID
// Il2CppName: get_requestID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Meta::WitAi::Configuration::WitRequestOptions::*)()>(&Meta::WitAi::Configuration::WitRequestOptions::get_requestID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Configuration::WitRequestOptions*), "get_requestID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Configuration::WitRequestOptions::ToJsonString
// Il2CppName: ToJsonString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Meta::WitAi::Configuration::WitRequestOptions::*)()>(&Meta::WitAi::Configuration::WitRequestOptions::ToJsonString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Configuration::WitRequestOptions*), "ToJsonString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Configuration::WitRequestOptions::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
