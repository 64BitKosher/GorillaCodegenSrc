// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Meta.WitAi.IVoiceService
#include "Meta/WitAi/IVoiceService.hpp"
// Including type: Meta.Conduit.IInstanceResolver
#include "Meta/Conduit/IInstanceResolver.hpp"
// Including type: Meta.WitAi.Interfaces.IAudioEventProvider
#include "Meta/WitAi/Interfaces/IAudioEventProvider.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Meta::WitAi
namespace Meta::WitAi {
  // Forward declaring type: RegisteredMatchIntent
  class RegisteredMatchIntent;
}
// Forward declaring namespace: Meta::WitAi::Data::Configuration
namespace Meta::WitAi::Data::Configuration {
  // Forward declaring type: WitConfiguration
  class WitConfiguration;
}
// Forward declaring namespace: Meta::Conduit
namespace Meta::Conduit {
  // Forward declaring type: IParameterProvider
  class IParameterProvider;
  // Forward declaring type: IConduitDispatcher
  class IConduitDispatcher;
}
// Forward declaring namespace: Meta::WitAi::Events
namespace Meta::WitAi::Events {
  // Forward declaring type: VoiceEvents
  class VoiceEvents;
  // Forward declaring type: TelemetryEvents
  class TelemetryEvents;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Forward declaring namespace: Meta::WitAi::Requests
namespace Meta::WitAi::Requests {
  // Forward declaring type: VoiceServiceRequest
  class VoiceServiceRequest;
  // Forward declaring type: VoiceServiceRequestEvents
  class VoiceServiceRequestEvents;
}
// Forward declaring namespace: Meta::WitAi::Interfaces
namespace Meta::WitAi::Interfaces {
  // Forward declaring type: ITranscriptionProvider
  class ITranscriptionProvider;
  // Forward declaring type: IAudioInputEvents
  class IAudioInputEvents;
  // Forward declaring type: ITranscriptionEvent
  class ITranscriptionEvent;
}
// Forward declaring namespace: Meta::WitAi::Configuration
namespace Meta::WitAi::Configuration {
  // Forward declaring type: WitRequestOptions
  class WitRequestOptions;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: Meta::WitAi::Data
namespace Meta::WitAi::Data {
  // Forward declaring type: VoiceSession
  class VoiceSession;
}
// Forward declaring namespace: Meta::WitAi::Json
namespace Meta::WitAi::Json {
  // Forward declaring type: WitResponseNode
  class WitResponseNode;
}
// Forward declaring namespace: Meta::WitAi::Data::Intents
namespace Meta::WitAi::Data::Intents {
  // Forward declaring type: WitIntentData
  class WitIntentData;
}
// Completed forward declares
// Type namespace: Meta.WitAi
namespace Meta::WitAi {
  // Forward declaring type: VoiceService
  class VoiceService;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::WitAi::VoiceService);
DEFINE_IL2CPP_ARG_TYPE(::Meta::WitAi::VoiceService*, "Meta.WitAi", "VoiceService");
// Type namespace: Meta.WitAi
namespace Meta::WitAi {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: Meta.WitAi.VoiceService
  // [TokenAttribute] Offset: FFFFFFFF
  class VoiceService : public ::UnityEngine::MonoBehaviour/*, public ::Meta::WitAi::IVoiceService, public ::Meta::Conduit::IInstanceResolver, public ::Meta::WitAi::Interfaces::IAudioEventProvider*/ {
    public:
    // Nested type: ::Meta::WitAi::VoiceService::$$c__DisplayClass58_0
    class $$c__DisplayClass58_0;
    public:
    // private Meta.WitAi.Data.Configuration.WitConfiguration _witConfiguration
    // Size: 0x8
    // Offset: 0x20
    ::Meta::WitAi::Data::Configuration::WitConfiguration* witConfiguration;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::Data::Configuration::WitConfiguration*) == 0x8);
    // private readonly Meta.Conduit.IParameterProvider _conduitParameterProvider
    // Size: 0x8
    // Offset: 0x28
    ::Meta::Conduit::IParameterProvider* conduitParameterProvider;
    // Field size check
    static_assert(sizeof(::Meta::Conduit::IParameterProvider*) == 0x8);
    // protected Meta.WitAi.Events.VoiceEvents events
    // Size: 0x8
    // Offset: 0x30
    ::Meta::WitAi::Events::VoiceEvents* events;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::Events::VoiceEvents*) == 0x8);
    // protected Meta.WitAi.Events.TelemetryEvents telemetryEvents
    // Size: 0x8
    // Offset: 0x38
    ::Meta::WitAi::Events::TelemetryEvents* telemetryEvents;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::Events::TelemetryEvents*) == 0x8);
    // private Meta.Conduit.IConduitDispatcher <ConduitDispatcher>k__BackingField
    // Size: 0x8
    // Offset: 0x40
    ::Meta::Conduit::IConduitDispatcher* ConduitDispatcher;
    // Field size check
    static_assert(sizeof(::Meta::Conduit::IConduitDispatcher*) == 0x8);
    // private readonly System.Collections.Generic.HashSet`1<Meta.WitAi.Requests.VoiceServiceRequest> <Requests>k__BackingField
    // Size: 0x8
    // Offset: 0x48
    ::System::Collections::Generic::HashSet_1<::Meta::WitAi::Requests::VoiceServiceRequest*>* Requests;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<::Meta::WitAi::Requests::VoiceServiceRequest*>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Meta::WitAi::IVoiceService
    operator ::Meta::WitAi::IVoiceService() noexcept {
      return *reinterpret_cast<::Meta::WitAi::IVoiceService*>(this);
    }
    // Creating interface conversion operator: operator ::Meta::Conduit::IInstanceResolver
    operator ::Meta::Conduit::IInstanceResolver() noexcept {
      return *reinterpret_cast<::Meta::Conduit::IInstanceResolver*>(this);
    }
    // Creating interface conversion operator: operator ::Meta::WitAi::Interfaces::IAudioEventProvider
    operator ::Meta::WitAi::Interfaces::IAudioEventProvider() noexcept {
      return *reinterpret_cast<::Meta::WitAi::Interfaces::IAudioEventProvider*>(this);
    }
    // Get instance field reference: private Meta.WitAi.Data.Configuration.WitConfiguration _witConfiguration
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::Data::Configuration::WitConfiguration*& dyn__witConfiguration();
    // Get instance field reference: private readonly Meta.Conduit.IParameterProvider _conduitParameterProvider
    [[deprecated("Use field access instead!")]] ::Meta::Conduit::IParameterProvider*& dyn__conduitParameterProvider();
    // Get instance field reference: protected Meta.WitAi.Events.VoiceEvents events
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::Events::VoiceEvents*& dyn_events();
    // Get instance field reference: protected Meta.WitAi.Events.TelemetryEvents telemetryEvents
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::Events::TelemetryEvents*& dyn_telemetryEvents();
    // Get instance field reference: private Meta.Conduit.IConduitDispatcher <ConduitDispatcher>k__BackingField
    [[deprecated("Use field access instead!")]] ::Meta::Conduit::IConduitDispatcher*& dyn_$ConduitDispatcher$k__BackingField();
    // Get instance field reference: private readonly System.Collections.Generic.HashSet`1<Meta.WitAi.Requests.VoiceServiceRequest> <Requests>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::Meta::WitAi::Requests::VoiceServiceRequest*>*& dyn_$Requests$k__BackingField();
    // private System.Boolean get_UseConduit()
    // Offset: 0x4426480
    bool get_UseConduit();
    // public System.Boolean get_UsePlatformIntegrations()
    // Offset: 0x4426640
    bool get_UsePlatformIntegrations();
    // public System.Void set_UsePlatformIntegrations(System.Boolean value)
    // Offset: 0x4426648
    void set_UsePlatformIntegrations(bool value);
    // public Meta.WitAi.Data.Configuration.WitConfiguration get_WitConfiguration()
    // Offset: 0x4426514
    ::Meta::WitAi::Data::Configuration::WitConfiguration* get_WitConfiguration();
    // public System.Boolean get_Active()
    // Offset: 0x4426680
    bool get_Active();
    // Meta.Conduit.IConduitDispatcher get_ConduitDispatcher()
    // Offset: 0x44266D4
    ::Meta::Conduit::IConduitDispatcher* get_ConduitDispatcher();
    // System.Void set_ConduitDispatcher(Meta.Conduit.IConduitDispatcher value)
    // Offset: 0x44266DC
    void set_ConduitDispatcher(::Meta::Conduit::IConduitDispatcher* value);
    // public System.Boolean get_IsRequestActive()
    // Offset: 0x44266E4
    bool get_IsRequestActive();
    // public Meta.WitAi.Interfaces.ITranscriptionProvider get_TranscriptionProvider()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Meta::WitAi::Interfaces::ITranscriptionProvider* get_TranscriptionProvider();
    // public System.Void set_TranscriptionProvider(Meta.WitAi.Interfaces.ITranscriptionProvider value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_TranscriptionProvider(::Meta::WitAi::Interfaces::ITranscriptionProvider* value);
    // public System.Boolean get_MicActive()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_MicActive();
    // public Meta.WitAi.Events.VoiceEvents get_VoiceEvents()
    // Offset: 0x4426734
    ::Meta::WitAi::Events::VoiceEvents* get_VoiceEvents();
    // public System.Void set_VoiceEvents(Meta.WitAi.Events.VoiceEvents value)
    // Offset: 0x442673C
    void set_VoiceEvents(::Meta::WitAi::Events::VoiceEvents* value);
    // public Meta.WitAi.Events.TelemetryEvents get_TelemetryEvents()
    // Offset: 0x4426744
    ::Meta::WitAi::Events::TelemetryEvents* get_TelemetryEvents();
    // public System.Void set_TelemetryEvents(Meta.WitAi.Events.TelemetryEvents value)
    // Offset: 0x442674C
    void set_TelemetryEvents(::Meta::WitAi::Events::TelemetryEvents* value);
    // public Meta.WitAi.Interfaces.IAudioInputEvents get_AudioEvents()
    // Offset: 0x4426754
    ::Meta::WitAi::Interfaces::IAudioInputEvents* get_AudioEvents();
    // public Meta.WitAi.Interfaces.ITranscriptionEvent get_TranscriptionEvents()
    // Offset: 0x4426764
    ::Meta::WitAi::Interfaces::ITranscriptionEvent* get_TranscriptionEvents();
    // protected System.Boolean get_ShouldSendMicData()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_ShouldSendMicData();
    // public System.Collections.Generic.HashSet`1<Meta.WitAi.Requests.VoiceServiceRequest> get_Requests()
    // Offset: 0x4426774
    ::System::Collections::Generic::HashSet_1<::Meta::WitAi::Requests::VoiceServiceRequest*>* get_Requests();
    // protected System.Void .ctor()
    // Offset: 0x442677C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VoiceService* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::VoiceService::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VoiceService*, creationType>()));
    }
    // public System.Void Activate(System.String text)
    // Offset: 0x4426BBC
    void Activate(::StringW text);
    // public System.Void Activate(System.String text, Meta.WitAi.Configuration.WitRequestOptions requestOptions)
    // Offset: 0x4426C28
    void Activate(::StringW text, ::Meta::WitAi::Configuration::WitRequestOptions* requestOptions);
    // public Meta.WitAi.Requests.VoiceServiceRequest Activate(System.String text, Meta.WitAi.Requests.VoiceServiceRequestEvents requestEvents)
    // Offset: 0x4426CEC
    ::Meta::WitAi::Requests::VoiceServiceRequest* Activate(::StringW text, ::Meta::WitAi::Requests::VoiceServiceRequestEvents* requestEvents);
    // public Meta.WitAi.Requests.VoiceServiceRequest Activate(System.String text, Meta.WitAi.Configuration.WitRequestOptions requestOptions, Meta.WitAi.Requests.VoiceServiceRequestEvents requestEvents)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Meta::WitAi::Requests::VoiceServiceRequest* Activate(::StringW text, ::Meta::WitAi::Configuration::WitRequestOptions* requestOptions, ::Meta::WitAi::Requests::VoiceServiceRequestEvents* requestEvents);
    // protected System.Void OnTextRequestCreated(Meta.WitAi.Requests.VoiceServiceRequest textRequest)
    // Offset: 0x4426D6C
    void OnTextRequestCreated(::Meta::WitAi::Requests::VoiceServiceRequest* textRequest);
    // public System.Boolean CanSend()
    // Offset: 0x4426F54
    bool CanSend();
    // protected System.String GetSendError()
    // Offset: 0x4426F74
    ::StringW GetSendError();
    // protected System.Void HandleRequestResults(Meta.WitAi.Requests.VoiceServiceRequest request)
    // Offset: 0x4427004
    void HandleRequestResults(::Meta::WitAi::Requests::VoiceServiceRequest* request);
    // public System.Boolean CanActivateAudio()
    // Offset: 0x4427094
    bool CanActivateAudio();
    // protected System.String GetActivateAudioError()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::StringW GetActivateAudioError();
    // public System.Void Activate()
    // Offset: 0x44270B4
    void Activate();
    // public System.Void Activate(Meta.WitAi.Configuration.WitRequestOptions requestOptions)
    // Offset: 0x4427110
    void Activate(::Meta::WitAi::Configuration::WitRequestOptions* requestOptions);
    // public Meta.WitAi.Requests.VoiceServiceRequest Activate(Meta.WitAi.Requests.VoiceServiceRequestEvents requestEvents)
    // Offset: 0x4427184
    ::Meta::WitAi::Requests::VoiceServiceRequest* Activate(::Meta::WitAi::Requests::VoiceServiceRequestEvents* requestEvents);
    // public Meta.WitAi.Requests.VoiceServiceRequest Activate(Meta.WitAi.Configuration.WitRequestOptions requestOptions, Meta.WitAi.Requests.VoiceServiceRequestEvents requestEvents)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Meta::WitAi::Requests::VoiceServiceRequest* Activate(::Meta::WitAi::Configuration::WitRequestOptions* requestOptions, ::Meta::WitAi::Requests::VoiceServiceRequestEvents* requestEvents);
    // public System.Void ActivateImmediately()
    // Offset: 0x44271FC
    void ActivateImmediately();
    // public System.Void ActivateImmediately(Meta.WitAi.Configuration.WitRequestOptions requestOptions)
    // Offset: 0x4427258
    void ActivateImmediately(::Meta::WitAi::Configuration::WitRequestOptions* requestOptions);
    // public Meta.WitAi.Requests.VoiceServiceRequest ActivateImmediately(Meta.WitAi.Requests.VoiceServiceRequestEvents requestEvents)
    // Offset: 0x44272CC
    ::Meta::WitAi::Requests::VoiceServiceRequest* ActivateImmediately(::Meta::WitAi::Requests::VoiceServiceRequestEvents* requestEvents);
    // public Meta.WitAi.Requests.VoiceServiceRequest ActivateImmediately(Meta.WitAi.Configuration.WitRequestOptions requestOptions, Meta.WitAi.Requests.VoiceServiceRequestEvents requestEvents)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Meta::WitAi::Requests::VoiceServiceRequest* ActivateImmediately(::Meta::WitAi::Configuration::WitRequestOptions* requestOptions, ::Meta::WitAi::Requests::VoiceServiceRequestEvents* requestEvents);
    // protected System.Void OnAudioRequestCreated(Meta.WitAi.Requests.VoiceServiceRequest audioRequest)
    // Offset: 0x4427344
    void OnAudioRequestCreated(::Meta::WitAi::Requests::VoiceServiceRequest* audioRequest);
    // protected System.Void OnAudioPartialResponse(Meta.WitAi.Requests.VoiceServiceRequest audioRequest)
    // Offset: 0x4427624
    void OnAudioPartialResponse(::Meta::WitAi::Requests::VoiceServiceRequest* audioRequest);
    // public System.Void Deactivate()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Deactivate();
    // public System.Void DeactivateAndAbortRequest()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void DeactivateAndAbortRequest();
    // public System.Void DeactivateAndAbortRequest(Meta.WitAi.Requests.VoiceServiceRequest request)
    // Offset: 0x4427B40
    void DeactivateAndAbortRequest(::Meta::WitAi::Requests::VoiceServiceRequest* request);
    // public System.Collections.Generic.IEnumerable`1<System.Object> GetObjectsOfType(System.Type type)
    // Offset: 0x4427B9C
    ::System::Collections::Generic::IEnumerable_1<::Il2CppObject*>* GetObjectsOfType(::System::Type* type);
    // protected System.Void Awake()
    // Offset: 0x4427BF4
    void Awake();
    // private System.Void InitializeEventListeners()
    // Offset: 0x4427C1C
    void InitializeEventListeners();
    // protected System.Void OnEnable()
    // Offset: 0x4427D5C
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x4428260
    void OnDisable();
    // protected System.Void OnFinalTranscription(System.String transcription)
    // Offset: 0x44283F8
    void OnFinalTranscription(::StringW transcription);
    // private Meta.WitAi.Data.VoiceSession GetVoiceSession(Meta.WitAi.Json.WitResponseNode response)
    // Offset: 0x44279C4
    ::Meta::WitAi::Data::VoiceSession* GetVoiceSession(::Meta::WitAi::Json::WitResponseNode* response);
    // protected System.Void HandleResponse(Meta.WitAi.Json.WitResponseNode response)
    // Offset: 0x4428440
    void HandleResponse(::Meta::WitAi::Json::WitResponseNode* response);
    // private System.Void HandleIntents(Meta.WitAi.Json.WitResponseNode response)
    // Offset: 0x4428444
    void HandleIntents(::Meta::WitAi::Json::WitResponseNode* response);
    // private System.Void HandleIntent(Meta.WitAi.Data.Intents.WitIntentData intent, Meta.WitAi.Json.WitResponseNode response)
    // Offset: 0x442865C
    void HandleIntent(::Meta::WitAi::Data::Intents::WitIntentData* intent, ::Meta::WitAi::Json::WitResponseNode* response);
    // private System.Void ExecuteRegisteredMatch(Meta.WitAi.RegisteredMatchIntent registeredMethod, Meta.WitAi.Data.Intents.WitIntentData intent, Meta.WitAi.Json.WitResponseNode response)
    // Offset: 0x442899C
    void ExecuteRegisteredMatch(::Meta::WitAi::RegisteredMatchIntent* registeredMethod, ::Meta::WitAi::Data::Intents::WitIntentData* intent, ::Meta::WitAi::Json::WitResponseNode* response);
  }; // Meta.WitAi.VoiceService
  #pragma pack(pop)
  static check_size<sizeof(VoiceService), 72 + sizeof(::System::Collections::Generic::HashSet_1<::Meta::WitAi::Requests::VoiceServiceRequest*>*)> __Meta_WitAi_VoiceServiceSizeCheck;
  static_assert(sizeof(VoiceService) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::WitAi::VoiceService::get_UseConduit
// Il2CppName: get_UseConduit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::VoiceService::*)()>(&Meta::WitAi::VoiceService::get_UseConduit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::VoiceService*), "get_UseConduit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::VoiceService::get_UsePlatformIntegrations
// Il2CppName: get_UsePlatformIntegrations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::VoiceService::*)()>(&Meta::WitAi::VoiceService::get_UsePlatformIntegrations)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::VoiceService*), "get_UsePlatformIntegrations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::VoiceService::set_UsePlatformIntegrations
// Il2CppName: set_UsePlatformIntegrations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::VoiceService::*)(bool)>(&Meta::WitAi::VoiceService::set_UsePlatformIntegrations)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::VoiceService*), "set_UsePlatformIntegrations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::VoiceService::get_WitConfiguration
// Il2CppName: get_WitConfiguration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Data::Configuration::WitConfiguration* (Meta::WitAi::VoiceService::*)()>(&Meta::WitAi::VoiceService::get_WitConfiguration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::VoiceService*), "get_WitConfiguration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::VoiceService::get_Active
// Il2CppName: get_Active
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::VoiceService::*)()>(&Meta::WitAi::VoiceService::get_Active)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::VoiceService*), "get_Active", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::VoiceService::get_ConduitDispatcher
// Il2CppName: get_ConduitDispatcher
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::Conduit::IConduitDispatcher* (Meta::WitAi::VoiceService::*)()>(&Meta::WitAi::VoiceService::get_ConduitDispatcher)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::VoiceService*), "get_ConduitDispatcher", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::VoiceService::set_ConduitDispatcher
// Il2CppName: set_ConduitDispatcher
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::VoiceService::*)(::Meta::Conduit::IConduitDispatcher*)>(&Meta::WitAi::VoiceService::set_ConduitDispatcher)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Meta.Conduit", "IConduitDispatcher")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::VoiceService*), "set_ConduitDispatcher", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::VoiceService::get_IsRequestActive
// Il2CppName: get_IsRequestActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::VoiceService::*)()>(&Meta::WitAi::VoiceService::get_IsRequestActive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::VoiceService*), "get_IsRequestActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::VoiceService::get_TranscriptionProvider
// Il2CppName: get_TranscriptionProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Interfaces::ITranscriptionProvider* (Meta::WitAi::VoiceService::*)()>(&Meta::WitAi::VoiceService::get_TranscriptionProvider)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::VoiceService*), "get_TranscriptionProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::VoiceService::set_TranscriptionProvider
// Il2CppName: set_TranscriptionProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::VoiceService::*)(::Meta::WitAi::Interfaces::ITranscriptionProvider*)>(&Meta::WitAi::VoiceService::set_TranscriptionProvider)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Interfaces", "ITranscriptionProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::VoiceService*), "set_TranscriptionProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::VoiceService::get_MicActive
// Il2CppName: get_MicActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::VoiceService::*)()>(&Meta::WitAi::VoiceService::get_MicActive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::VoiceService*), "get_MicActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::VoiceService::get_VoiceEvents
// Il2CppName: get_VoiceEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Events::VoiceEvents* (Meta::WitAi::VoiceService::*)()>(&Meta::WitAi::VoiceService::get_VoiceEvents)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::VoiceService*), "get_VoiceEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::VoiceService::set_VoiceEvents
// Il2CppName: set_VoiceEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::VoiceService::*)(::Meta::WitAi::Events::VoiceEvents*)>(&Meta::WitAi::VoiceService::set_VoiceEvents)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Events", "VoiceEvents")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::VoiceService*), "set_VoiceEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::VoiceService::get_TelemetryEvents
// Il2CppName: get_TelemetryEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Events::TelemetryEvents* (Meta::WitAi::VoiceService::*)()>(&Meta::WitAi::VoiceService::get_TelemetryEvents)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::VoiceService*), "get_TelemetryEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::VoiceService::set_TelemetryEvents
// Il2CppName: set_TelemetryEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::VoiceService::*)(::Meta::WitAi::Events::TelemetryEvents*)>(&Meta::WitAi::VoiceService::set_TelemetryEvents)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Events", "TelemetryEvents")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::VoiceService*), "set_TelemetryEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::VoiceService::get_AudioEvents
// Il2CppName: get_AudioEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Interfaces::IAudioInputEvents* (Meta::WitAi::VoiceService::*)()>(&Meta::WitAi::VoiceService::get_AudioEvents)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::VoiceService*), "get_AudioEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::VoiceService::get_TranscriptionEvents
// Il2CppName: get_TranscriptionEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Interfaces::ITranscriptionEvent* (Meta::WitAi::VoiceService::*)()>(&Meta::WitAi::VoiceService::get_TranscriptionEvents)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::VoiceService*), "get_TranscriptionEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::VoiceService::get_ShouldSendMicData
// Il2CppName: get_ShouldSendMicData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::VoiceService::*)()>(&Meta::WitAi::VoiceService::get_ShouldSendMicData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::VoiceService*), "get_ShouldSendMicData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::VoiceService::get_Requests
// Il2CppName: get_Requests
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::HashSet_1<::Meta::WitAi::Requests::VoiceServiceRequest*>* (Meta::WitAi::VoiceService::*)()>(&Meta::WitAi::VoiceService::get_Requests)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::VoiceService*), "get_Requests", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::VoiceService::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Meta::WitAi::VoiceService::Activate
// Il2CppName: Activate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::VoiceService::*)(::StringW)>(&Meta::WitAi::VoiceService::Activate)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::VoiceService*), "Activate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::VoiceService::Activate
// Il2CppName: Activate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::VoiceService::*)(::StringW, ::Meta::WitAi::Configuration::WitRequestOptions*)>(&Meta::WitAi::VoiceService::Activate)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* requestOptions = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Configuration", "WitRequestOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::VoiceService*), "Activate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text, requestOptions});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::VoiceService::Activate
// Il2CppName: Activate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Requests::VoiceServiceRequest* (Meta::WitAi::VoiceService::*)(::StringW, ::Meta::WitAi::Requests::VoiceServiceRequestEvents*)>(&Meta::WitAi::VoiceService::Activate)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* requestEvents = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Requests", "VoiceServiceRequestEvents")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::VoiceService*), "Activate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text, requestEvents});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::VoiceService::Activate
// Il2CppName: Activate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Requests::VoiceServiceRequest* (Meta::WitAi::VoiceService::*)(::StringW, ::Meta::WitAi::Configuration::WitRequestOptions*, ::Meta::WitAi::Requests::VoiceServiceRequestEvents*)>(&Meta::WitAi::VoiceService::Activate)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* requestOptions = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Configuration", "WitRequestOptions")->byval_arg;
    static auto* requestEvents = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Requests", "VoiceServiceRequestEvents")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::VoiceService*), "Activate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text, requestOptions, requestEvents});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::VoiceService::OnTextRequestCreated
// Il2CppName: OnTextRequestCreated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::VoiceService::*)(::Meta::WitAi::Requests::VoiceServiceRequest*)>(&Meta::WitAi::VoiceService::OnTextRequestCreated)> {
  static const MethodInfo* get() {
    static auto* textRequest = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Requests", "VoiceServiceRequest")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::VoiceService*), "OnTextRequestCreated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{textRequest});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::VoiceService::CanSend
// Il2CppName: CanSend
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::VoiceService::*)()>(&Meta::WitAi::VoiceService::CanSend)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::VoiceService*), "CanSend", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::VoiceService::GetSendError
// Il2CppName: GetSendError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Meta::WitAi::VoiceService::*)()>(&Meta::WitAi::VoiceService::GetSendError)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::VoiceService*), "GetSendError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::VoiceService::HandleRequestResults
// Il2CppName: HandleRequestResults
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::VoiceService::*)(::Meta::WitAi::Requests::VoiceServiceRequest*)>(&Meta::WitAi::VoiceService::HandleRequestResults)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Requests", "VoiceServiceRequest")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::VoiceService*), "HandleRequestResults", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::VoiceService::CanActivateAudio
// Il2CppName: CanActivateAudio
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::VoiceService::*)()>(&Meta::WitAi::VoiceService::CanActivateAudio)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::VoiceService*), "CanActivateAudio", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::VoiceService::GetActivateAudioError
// Il2CppName: GetActivateAudioError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Meta::WitAi::VoiceService::*)()>(&Meta::WitAi::VoiceService::GetActivateAudioError)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::VoiceService*), "GetActivateAudioError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::VoiceService::Activate
// Il2CppName: Activate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::VoiceService::*)()>(&Meta::WitAi::VoiceService::Activate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::VoiceService*), "Activate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::VoiceService::Activate
// Il2CppName: Activate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::VoiceService::*)(::Meta::WitAi::Configuration::WitRequestOptions*)>(&Meta::WitAi::VoiceService::Activate)> {
  static const MethodInfo* get() {
    static auto* requestOptions = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Configuration", "WitRequestOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::VoiceService*), "Activate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{requestOptions});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::VoiceService::Activate
// Il2CppName: Activate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Requests::VoiceServiceRequest* (Meta::WitAi::VoiceService::*)(::Meta::WitAi::Requests::VoiceServiceRequestEvents*)>(&Meta::WitAi::VoiceService::Activate)> {
  static const MethodInfo* get() {
    static auto* requestEvents = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Requests", "VoiceServiceRequestEvents")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::VoiceService*), "Activate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{requestEvents});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::VoiceService::Activate
// Il2CppName: Activate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Requests::VoiceServiceRequest* (Meta::WitAi::VoiceService::*)(::Meta::WitAi::Configuration::WitRequestOptions*, ::Meta::WitAi::Requests::VoiceServiceRequestEvents*)>(&Meta::WitAi::VoiceService::Activate)> {
  static const MethodInfo* get() {
    static auto* requestOptions = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Configuration", "WitRequestOptions")->byval_arg;
    static auto* requestEvents = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Requests", "VoiceServiceRequestEvents")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::VoiceService*), "Activate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{requestOptions, requestEvents});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::VoiceService::ActivateImmediately
// Il2CppName: ActivateImmediately
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::VoiceService::*)()>(&Meta::WitAi::VoiceService::ActivateImmediately)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::VoiceService*), "ActivateImmediately", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::VoiceService::ActivateImmediately
// Il2CppName: ActivateImmediately
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::VoiceService::*)(::Meta::WitAi::Configuration::WitRequestOptions*)>(&Meta::WitAi::VoiceService::ActivateImmediately)> {
  static const MethodInfo* get() {
    static auto* requestOptions = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Configuration", "WitRequestOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::VoiceService*), "ActivateImmediately", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{requestOptions});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::VoiceService::ActivateImmediately
// Il2CppName: ActivateImmediately
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Requests::VoiceServiceRequest* (Meta::WitAi::VoiceService::*)(::Meta::WitAi::Requests::VoiceServiceRequestEvents*)>(&Meta::WitAi::VoiceService::ActivateImmediately)> {
  static const MethodInfo* get() {
    static auto* requestEvents = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Requests", "VoiceServiceRequestEvents")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::VoiceService*), "ActivateImmediately", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{requestEvents});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::VoiceService::ActivateImmediately
// Il2CppName: ActivateImmediately
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Requests::VoiceServiceRequest* (Meta::WitAi::VoiceService::*)(::Meta::WitAi::Configuration::WitRequestOptions*, ::Meta::WitAi::Requests::VoiceServiceRequestEvents*)>(&Meta::WitAi::VoiceService::ActivateImmediately)> {
  static const MethodInfo* get() {
    static auto* requestOptions = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Configuration", "WitRequestOptions")->byval_arg;
    static auto* requestEvents = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Requests", "VoiceServiceRequestEvents")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::VoiceService*), "ActivateImmediately", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{requestOptions, requestEvents});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::VoiceService::OnAudioRequestCreated
// Il2CppName: OnAudioRequestCreated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::VoiceService::*)(::Meta::WitAi::Requests::VoiceServiceRequest*)>(&Meta::WitAi::VoiceService::OnAudioRequestCreated)> {
  static const MethodInfo* get() {
    static auto* audioRequest = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Requests", "VoiceServiceRequest")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::VoiceService*), "OnAudioRequestCreated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{audioRequest});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::VoiceService::OnAudioPartialResponse
// Il2CppName: OnAudioPartialResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::VoiceService::*)(::Meta::WitAi::Requests::VoiceServiceRequest*)>(&Meta::WitAi::VoiceService::OnAudioPartialResponse)> {
  static const MethodInfo* get() {
    static auto* audioRequest = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Requests", "VoiceServiceRequest")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::VoiceService*), "OnAudioPartialResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{audioRequest});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::VoiceService::Deactivate
// Il2CppName: Deactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::VoiceService::*)()>(&Meta::WitAi::VoiceService::Deactivate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::VoiceService*), "Deactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::VoiceService::DeactivateAndAbortRequest
// Il2CppName: DeactivateAndAbortRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::VoiceService::*)()>(&Meta::WitAi::VoiceService::DeactivateAndAbortRequest)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::VoiceService*), "DeactivateAndAbortRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::VoiceService::DeactivateAndAbortRequest
// Il2CppName: DeactivateAndAbortRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::VoiceService::*)(::Meta::WitAi::Requests::VoiceServiceRequest*)>(&Meta::WitAi::VoiceService::DeactivateAndAbortRequest)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Requests", "VoiceServiceRequest")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::VoiceService*), "DeactivateAndAbortRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::VoiceService::GetObjectsOfType
// Il2CppName: GetObjectsOfType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerable_1<::Il2CppObject*>* (Meta::WitAi::VoiceService::*)(::System::Type*)>(&Meta::WitAi::VoiceService::GetObjectsOfType)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::VoiceService*), "GetObjectsOfType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::VoiceService::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::VoiceService::*)()>(&Meta::WitAi::VoiceService::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::VoiceService*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::VoiceService::InitializeEventListeners
// Il2CppName: InitializeEventListeners
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::VoiceService::*)()>(&Meta::WitAi::VoiceService::InitializeEventListeners)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::VoiceService*), "InitializeEventListeners", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::VoiceService::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::VoiceService::*)()>(&Meta::WitAi::VoiceService::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::VoiceService*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::VoiceService::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::VoiceService::*)()>(&Meta::WitAi::VoiceService::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::VoiceService*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::VoiceService::OnFinalTranscription
// Il2CppName: OnFinalTranscription
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::VoiceService::*)(::StringW)>(&Meta::WitAi::VoiceService::OnFinalTranscription)> {
  static const MethodInfo* get() {
    static auto* transcription = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::VoiceService*), "OnFinalTranscription", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transcription});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::VoiceService::GetVoiceSession
// Il2CppName: GetVoiceSession
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Data::VoiceSession* (Meta::WitAi::VoiceService::*)(::Meta::WitAi::Json::WitResponseNode*)>(&Meta::WitAi::VoiceService::GetVoiceSession)> {
  static const MethodInfo* get() {
    static auto* response = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Json", "WitResponseNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::VoiceService*), "GetVoiceSession", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{response});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::VoiceService::HandleResponse
// Il2CppName: HandleResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::VoiceService::*)(::Meta::WitAi::Json::WitResponseNode*)>(&Meta::WitAi::VoiceService::HandleResponse)> {
  static const MethodInfo* get() {
    static auto* response = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Json", "WitResponseNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::VoiceService*), "HandleResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{response});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::VoiceService::HandleIntents
// Il2CppName: HandleIntents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::VoiceService::*)(::Meta::WitAi::Json::WitResponseNode*)>(&Meta::WitAi::VoiceService::HandleIntents)> {
  static const MethodInfo* get() {
    static auto* response = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Json", "WitResponseNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::VoiceService*), "HandleIntents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{response});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::VoiceService::HandleIntent
// Il2CppName: HandleIntent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::VoiceService::*)(::Meta::WitAi::Data::Intents::WitIntentData*, ::Meta::WitAi::Json::WitResponseNode*)>(&Meta::WitAi::VoiceService::HandleIntent)> {
  static const MethodInfo* get() {
    static auto* intent = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Data.Intents", "WitIntentData")->byval_arg;
    static auto* response = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Json", "WitResponseNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::VoiceService*), "HandleIntent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{intent, response});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::VoiceService::ExecuteRegisteredMatch
// Il2CppName: ExecuteRegisteredMatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::VoiceService::*)(::Meta::WitAi::RegisteredMatchIntent*, ::Meta::WitAi::Data::Intents::WitIntentData*, ::Meta::WitAi::Json::WitResponseNode*)>(&Meta::WitAi::VoiceService::ExecuteRegisteredMatch)> {
  static const MethodInfo* get() {
    static auto* registeredMethod = &::il2cpp_utils::GetClassFromName("Meta.WitAi", "RegisteredMatchIntent")->byval_arg;
    static auto* intent = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Data.Intents", "WitIntentData")->byval_arg;
    static auto* response = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Json", "WitResponseNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::VoiceService*), "ExecuteRegisteredMatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{registeredMethod, intent, response});
  }
};
