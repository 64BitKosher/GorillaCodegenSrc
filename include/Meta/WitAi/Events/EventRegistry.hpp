// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Completed forward declares
// Type namespace: Meta.WitAi.Events
namespace Meta::WitAi::Events {
  // Forward declaring type: EventRegistry
  class EventRegistry;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::WitAi::Events::EventRegistry);
DEFINE_IL2CPP_ARG_TYPE(::Meta::WitAi::Events::EventRegistry*, "Meta.WitAi.Events", "EventRegistry");
// Type namespace: Meta.WitAi.Events
namespace Meta::WitAi::Events {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Meta.WitAi.Events.EventRegistry
  // [TokenAttribute] Offset: FFFFFFFF
  class EventRegistry : public ::Il2CppObject {
    public:
    public:
    // private System.Collections.Generic.List`1<System.String> _overriddenCallbacks
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::List_1<::StringW>* overriddenCallbacks;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::StringW>*) == 0x8);
    // private System.Collections.Generic.HashSet`1<System.String> _overriddenCallbacksHash
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::HashSet_1<::StringW>* overriddenCallbacksHash;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<::StringW>*) == 0x8);
    public:
    // Get instance field reference: private System.Collections.Generic.List`1<System.String> _overriddenCallbacks
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& dyn__overriddenCallbacks();
    // Get instance field reference: private System.Collections.Generic.HashSet`1<System.String> _overriddenCallbacksHash
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::StringW>*& dyn__overriddenCallbacksHash();
    // public System.Collections.Generic.HashSet`1<System.String> get_OverriddenCallbacks()
    // Offset: 0x443A2F8
    ::System::Collections::Generic::HashSet_1<::StringW>* get_OverriddenCallbacks();
    // public System.Void RegisterOverriddenCallback(System.String callback)
    // Offset: 0x443A390
    void RegisterOverriddenCallback(::StringW callback);
    // public System.Void RemoveOverriddenCallback(System.String callback)
    // Offset: 0x443A498
    void RemoveOverriddenCallback(::StringW callback);
    // public System.Boolean IsCallbackOverridden(System.String callback)
    // Offset: 0x443A550
    bool IsCallbackOverridden(::StringW callback);
    // public System.Void .ctor()
    // Offset: 0x443A5AC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static EventRegistry* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Events::EventRegistry::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<EventRegistry*, creationType>()));
    }
  }; // Meta.WitAi.Events.EventRegistry
  #pragma pack(pop)
  static check_size<sizeof(EventRegistry), 24 + sizeof(::System::Collections::Generic::HashSet_1<::StringW>*)> __Meta_WitAi_Events_EventRegistrySizeCheck;
  static_assert(sizeof(EventRegistry) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::WitAi::Events::EventRegistry::get_OverriddenCallbacks
// Il2CppName: get_OverriddenCallbacks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::HashSet_1<::StringW>* (Meta::WitAi::Events::EventRegistry::*)()>(&Meta::WitAi::Events::EventRegistry::get_OverriddenCallbacks)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Events::EventRegistry*), "get_OverriddenCallbacks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Events::EventRegistry::RegisterOverriddenCallback
// Il2CppName: RegisterOverriddenCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Events::EventRegistry::*)(::StringW)>(&Meta::WitAi::Events::EventRegistry::RegisterOverriddenCallback)> {
  static const MethodInfo* get() {
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Events::EventRegistry*), "RegisterOverriddenCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callback});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Events::EventRegistry::RemoveOverriddenCallback
// Il2CppName: RemoveOverriddenCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Events::EventRegistry::*)(::StringW)>(&Meta::WitAi::Events::EventRegistry::RemoveOverriddenCallback)> {
  static const MethodInfo* get() {
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Events::EventRegistry*), "RemoveOverriddenCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callback});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Events::EventRegistry::IsCallbackOverridden
// Il2CppName: IsCallbackOverridden
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::Events::EventRegistry::*)(::StringW)>(&Meta::WitAi::Events::EventRegistry::IsCallbackOverridden)> {
  static const MethodInfo* get() {
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Events::EventRegistry*), "IsCallbackOverridden", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callback});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Events::EventRegistry::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
