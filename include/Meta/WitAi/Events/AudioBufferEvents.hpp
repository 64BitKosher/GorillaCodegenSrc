// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Meta::WitAi::Events
namespace Meta::WitAi::Events {
  // Forward declaring type: WitMicLevelChangedEvent
  class WitMicLevelChangedEvent;
  // Forward declaring type: WitByteDataEvent
  class WitByteDataEvent;
}
// Completed forward declares
// Type namespace: Meta.WitAi.Events
namespace Meta::WitAi::Events {
  // Forward declaring type: AudioBufferEvents
  class AudioBufferEvents;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::WitAi::Events::AudioBufferEvents);
DEFINE_IL2CPP_ARG_TYPE(::Meta::WitAi::Events::AudioBufferEvents*, "Meta.WitAi.Events", "AudioBufferEvents");
// Type namespace: Meta.WitAi.Events
namespace Meta::WitAi::Events {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: Meta.WitAi.Events.AudioBufferEvents
  // [TokenAttribute] Offset: FFFFFFFF
  class AudioBufferEvents : public ::Il2CppObject {
    public:
    // Nested type: ::Meta::WitAi::Events::AudioBufferEvents::OnSampleReadyEvent
    class OnSampleReadyEvent;
    public:
    // public Meta.WitAi.Events.AudioBufferEvents/OnSampleReadyEvent OnSampleReady
    // Size: 0x8
    // Offset: 0x10
    ::Meta::WitAi::Events::AudioBufferEvents::OnSampleReadyEvent* OnSampleReady;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::Events::AudioBufferEvents::OnSampleReadyEvent*) == 0x8);
    // public Meta.WitAi.Events.WitMicLevelChangedEvent OnMicLevelChanged
    // Size: 0x8
    // Offset: 0x18
    ::Meta::WitAi::Events::WitMicLevelChangedEvent* OnMicLevelChanged;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::Events::WitMicLevelChangedEvent*) == 0x8);
    // public Meta.WitAi.Events.WitByteDataEvent OnByteDataReady
    // Size: 0x8
    // Offset: 0x20
    ::Meta::WitAi::Events::WitByteDataEvent* OnByteDataReady;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::Events::WitByteDataEvent*) == 0x8);
    // public Meta.WitAi.Events.WitByteDataEvent OnByteDataSent
    // Size: 0x8
    // Offset: 0x28
    ::Meta::WitAi::Events::WitByteDataEvent* OnByteDataSent;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::Events::WitByteDataEvent*) == 0x8);
    public:
    // Get instance field reference: public Meta.WitAi.Events.AudioBufferEvents/OnSampleReadyEvent OnSampleReady
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::Events::AudioBufferEvents::OnSampleReadyEvent*& dyn_OnSampleReady();
    // Get instance field reference: public Meta.WitAi.Events.WitMicLevelChangedEvent OnMicLevelChanged
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::Events::WitMicLevelChangedEvent*& dyn_OnMicLevelChanged();
    // Get instance field reference: public Meta.WitAi.Events.WitByteDataEvent OnByteDataReady
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::Events::WitByteDataEvent*& dyn_OnByteDataReady();
    // Get instance field reference: public Meta.WitAi.Events.WitByteDataEvent OnByteDataSent
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::Events::WitByteDataEvent*& dyn_OnByteDataSent();
    // public System.Void .ctor()
    // Offset: 0x443A0C0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AudioBufferEvents* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Events::AudioBufferEvents::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AudioBufferEvents*, creationType>()));
    }
  }; // Meta.WitAi.Events.AudioBufferEvents
  #pragma pack(pop)
  static check_size<sizeof(AudioBufferEvents), 40 + sizeof(::Meta::WitAi::Events::WitByteDataEvent*)> __Meta_WitAi_Events_AudioBufferEventsSizeCheck;
  static_assert(sizeof(AudioBufferEvents) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::WitAi::Events::AudioBufferEvents::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
