// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Meta.WitAi.Events.SpeechEvents
#include "Meta/WitAi/Events/SpeechEvents.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Meta::WitAi::Events
namespace Meta::WitAi::Events {
  // Forward declaring type: WitByteDataEvent
  class WitByteDataEvent;
  // Forward declaring type: WitValidationEvent
  class WitValidationEvent;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Completed forward declares
// Type namespace: Meta.WitAi.Events
namespace Meta::WitAi::Events {
  // Forward declaring type: VoiceEvents
  class VoiceEvents;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::WitAi::Events::VoiceEvents);
DEFINE_IL2CPP_ARG_TYPE(::Meta::WitAi::Events::VoiceEvents*, "Meta.WitAi.Events", "VoiceEvents");
// Type namespace: Meta.WitAi.Events
namespace Meta::WitAi::Events {
  // Size: 0xF0
  #pragma pack(push, 1)
  // Autogenerated type: Meta.WitAi.Events.VoiceEvents
  // [TokenAttribute] Offset: FFFFFFFF
  class VoiceEvents : public ::Meta::WitAi::Events::SpeechEvents {
    public:
    public:
    // private Meta.WitAi.Events.WitByteDataEvent _onByteDataReady
    // Size: 0x8
    // Offset: 0xD8
    ::Meta::WitAi::Events::WitByteDataEvent* onByteDataReady;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::Events::WitByteDataEvent*) == 0x8);
    // private Meta.WitAi.Events.WitByteDataEvent _onByteDataSent
    // Size: 0x8
    // Offset: 0xE0
    ::Meta::WitAi::Events::WitByteDataEvent* onByteDataSent;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::Events::WitByteDataEvent*) == 0x8);
    // private Meta.WitAi.Events.WitValidationEvent _onValidatePartialResponse
    // Size: 0x8
    // Offset: 0xE8
    ::Meta::WitAi::Events::WitValidationEvent* onValidatePartialResponse;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::Events::WitValidationEvent*) == 0x8);
    public:
    // static field const value: static private System.String EVENT_CATEGORY_DATA_EVENTS
    static constexpr const char* EVENT_CATEGORY_DATA_EVENTS = "Data Events";
    // Get static field: static private System.String EVENT_CATEGORY_DATA_EVENTS
    static ::StringW _get_EVENT_CATEGORY_DATA_EVENTS();
    // Set static field: static private System.String EVENT_CATEGORY_DATA_EVENTS
    static void _set_EVENT_CATEGORY_DATA_EVENTS(::StringW value);
    // Get instance field reference: private Meta.WitAi.Events.WitByteDataEvent _onByteDataReady
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::Events::WitByteDataEvent*& dyn__onByteDataReady();
    // Get instance field reference: private Meta.WitAi.Events.WitByteDataEvent _onByteDataSent
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::Events::WitByteDataEvent*& dyn__onByteDataSent();
    // Get instance field reference: private Meta.WitAi.Events.WitValidationEvent _onValidatePartialResponse
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::Events::WitValidationEvent*& dyn__onValidatePartialResponse();
    // public Meta.WitAi.Events.WitByteDataEvent get_OnByteDataReady()
    // Offset: 0x443A634
    ::Meta::WitAi::Events::WitByteDataEvent* get_OnByteDataReady();
    // public Meta.WitAi.Events.WitByteDataEvent get_OnByteDataSent()
    // Offset: 0x443A63C
    ::Meta::WitAi::Events::WitByteDataEvent* get_OnByteDataSent();
    // public Meta.WitAi.Events.WitValidationEvent get_OnValidatePartialResponse()
    // Offset: 0x443A644
    ::Meta::WitAi::Events::WitValidationEvent* get_OnValidatePartialResponse();
    // public System.Void .ctor()
    // Offset: 0x4426A94
    // Implemented from: Meta.WitAi.Events.SpeechEvents
    // Base method: System.Void SpeechEvents::.ctor()
    // Base method: System.Void EventRegistry::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VoiceEvents* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Events::VoiceEvents::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VoiceEvents*, creationType>()));
    }
  }; // Meta.WitAi.Events.VoiceEvents
  #pragma pack(pop)
  static check_size<sizeof(VoiceEvents), 232 + sizeof(::Meta::WitAi::Events::WitValidationEvent*)> __Meta_WitAi_Events_VoiceEventsSizeCheck;
  static_assert(sizeof(VoiceEvents) == 0xF0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::WitAi::Events::VoiceEvents::get_OnByteDataReady
// Il2CppName: get_OnByteDataReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Events::WitByteDataEvent* (Meta::WitAi::Events::VoiceEvents::*)()>(&Meta::WitAi::Events::VoiceEvents::get_OnByteDataReady)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Events::VoiceEvents*), "get_OnByteDataReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Events::VoiceEvents::get_OnByteDataSent
// Il2CppName: get_OnByteDataSent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Events::WitByteDataEvent* (Meta::WitAi::Events::VoiceEvents::*)()>(&Meta::WitAi::Events::VoiceEvents::get_OnByteDataSent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Events::VoiceEvents*), "get_OnByteDataSent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Events::VoiceEvents::get_OnValidatePartialResponse
// Il2CppName: get_OnValidatePartialResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Events::WitValidationEvent* (Meta::WitAi::Events::VoiceEvents::*)()>(&Meta::WitAi::Events::VoiceEvents::get_OnValidatePartialResponse)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Events::VoiceEvents*), "get_OnValidatePartialResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Events::VoiceEvents::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
