// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Meta.WitAi.Interfaces.ITranscriptionEvent
#include "Meta/WitAi/Interfaces/ITranscriptionEvent.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Meta::WitAi::Events
namespace Meta::WitAi::Events {
  // Forward declaring type: WitTranscriptionEvent
  class WitTranscriptionEvent;
}
// Completed forward declares
// Type namespace: Meta.WitAi.Events.UnityEventListeners
namespace Meta::WitAi::Events::UnityEventListeners {
  // Forward declaring type: TranscriptionEventListener
  class TranscriptionEventListener;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::WitAi::Events::UnityEventListeners::TranscriptionEventListener);
DEFINE_IL2CPP_ARG_TYPE(::Meta::WitAi::Events::UnityEventListeners::TranscriptionEventListener*, "Meta.WitAi.Events.UnityEventListeners", "TranscriptionEventListener");
// Type namespace: Meta.WitAi.Events.UnityEventListeners
namespace Meta::WitAi::Events::UnityEventListeners {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: Meta.WitAi.Events.UnityEventListeners.TranscriptionEventListener
  // [TokenAttribute] Offset: FFFFFFFF
  class TranscriptionEventListener : public ::UnityEngine::MonoBehaviour/*, public ::Meta::WitAi::Interfaces::ITranscriptionEvent*/ {
    public:
    public:
    // private Meta.WitAi.Events.WitTranscriptionEvent onPartialTranscription
    // Size: 0x8
    // Offset: 0x20
    ::Meta::WitAi::Events::WitTranscriptionEvent* onPartialTranscription;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::Events::WitTranscriptionEvent*) == 0x8);
    // private Meta.WitAi.Events.WitTranscriptionEvent onFullTranscription
    // Size: 0x8
    // Offset: 0x28
    ::Meta::WitAi::Events::WitTranscriptionEvent* onFullTranscription;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::Events::WitTranscriptionEvent*) == 0x8);
    // private Meta.WitAi.Interfaces.ITranscriptionEvent _events
    // Size: 0x8
    // Offset: 0x30
    ::Meta::WitAi::Interfaces::ITranscriptionEvent* events;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::Interfaces::ITranscriptionEvent*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Meta::WitAi::Interfaces::ITranscriptionEvent
    operator ::Meta::WitAi::Interfaces::ITranscriptionEvent() noexcept {
      return *reinterpret_cast<::Meta::WitAi::Interfaces::ITranscriptionEvent*>(this);
    }
    // Get instance field reference: private Meta.WitAi.Events.WitTranscriptionEvent onPartialTranscription
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::Events::WitTranscriptionEvent*& dyn_onPartialTranscription();
    // Get instance field reference: private Meta.WitAi.Events.WitTranscriptionEvent onFullTranscription
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::Events::WitTranscriptionEvent*& dyn_onFullTranscription();
    // Get instance field reference: private Meta.WitAi.Interfaces.ITranscriptionEvent _events
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::Interfaces::ITranscriptionEvent*& dyn__events();
    // public Meta.WitAi.Events.WitTranscriptionEvent get_OnPartialTranscription()
    // Offset: 0x443C83C
    ::Meta::WitAi::Events::WitTranscriptionEvent* get_OnPartialTranscription();
    // public Meta.WitAi.Events.WitTranscriptionEvent get_OnFullTranscription()
    // Offset: 0x443C844
    ::Meta::WitAi::Events::WitTranscriptionEvent* get_OnFullTranscription();
    // private Meta.WitAi.Interfaces.ITranscriptionEvent get_TranscriptionEvents()
    // Offset: 0x443C84C
    ::Meta::WitAi::Interfaces::ITranscriptionEvent* get_TranscriptionEvents();
    // private System.Void OnEnable()
    // Offset: 0x443C92C
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0x443CB14
    void OnDisable();
    // public System.Void .ctor()
    // Offset: 0x443CCFC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TranscriptionEventListener* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Events::UnityEventListeners::TranscriptionEventListener::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TranscriptionEventListener*, creationType>()));
    }
  }; // Meta.WitAi.Events.UnityEventListeners.TranscriptionEventListener
  #pragma pack(pop)
  static check_size<sizeof(TranscriptionEventListener), 48 + sizeof(::Meta::WitAi::Interfaces::ITranscriptionEvent*)> __Meta_WitAi_Events_UnityEventListeners_TranscriptionEventListenerSizeCheck;
  static_assert(sizeof(TranscriptionEventListener) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::WitAi::Events::UnityEventListeners::TranscriptionEventListener::get_OnPartialTranscription
// Il2CppName: get_OnPartialTranscription
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Events::WitTranscriptionEvent* (Meta::WitAi::Events::UnityEventListeners::TranscriptionEventListener::*)()>(&Meta::WitAi::Events::UnityEventListeners::TranscriptionEventListener::get_OnPartialTranscription)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Events::UnityEventListeners::TranscriptionEventListener*), "get_OnPartialTranscription", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Events::UnityEventListeners::TranscriptionEventListener::get_OnFullTranscription
// Il2CppName: get_OnFullTranscription
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Events::WitTranscriptionEvent* (Meta::WitAi::Events::UnityEventListeners::TranscriptionEventListener::*)()>(&Meta::WitAi::Events::UnityEventListeners::TranscriptionEventListener::get_OnFullTranscription)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Events::UnityEventListeners::TranscriptionEventListener*), "get_OnFullTranscription", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Events::UnityEventListeners::TranscriptionEventListener::get_TranscriptionEvents
// Il2CppName: get_TranscriptionEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Interfaces::ITranscriptionEvent* (Meta::WitAi::Events::UnityEventListeners::TranscriptionEventListener::*)()>(&Meta::WitAi::Events::UnityEventListeners::TranscriptionEventListener::get_TranscriptionEvents)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Events::UnityEventListeners::TranscriptionEventListener*), "get_TranscriptionEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Events::UnityEventListeners::TranscriptionEventListener::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Events::UnityEventListeners::TranscriptionEventListener::*)()>(&Meta::WitAi::Events::UnityEventListeners::TranscriptionEventListener::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Events::UnityEventListeners::TranscriptionEventListener*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Events::UnityEventListeners::TranscriptionEventListener::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Events::UnityEventListeners::TranscriptionEventListener::*)()>(&Meta::WitAi::Events::UnityEventListeners::TranscriptionEventListener::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Events::UnityEventListeners::TranscriptionEventListener*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Events::UnityEventListeners::TranscriptionEventListener::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
