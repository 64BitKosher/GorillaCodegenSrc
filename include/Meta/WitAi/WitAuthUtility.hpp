// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Meta::WitAi
namespace Meta::WitAi {
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Forward declaring namespace: Meta::WitAi::Data::Configuration
namespace Meta::WitAi::Data::Configuration {
  // Forward declaring type: WitConfiguration
  class WitConfiguration;
}
// Completed forward declares
// Type namespace: Meta.WitAi
namespace Meta::WitAi {
  // Forward declaring type: WitAuthUtility
  class WitAuthUtility;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::WitAi::WitAuthUtility);
DEFINE_IL2CPP_ARG_TYPE(::Meta::WitAi::WitAuthUtility*, "Meta.WitAi", "WitAuthUtility");
// Type namespace: Meta.WitAi
namespace Meta::WitAi {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Meta.WitAi.WitAuthUtility
  // [TokenAttribute] Offset: FFFFFFFF
  class WitAuthUtility : public ::Il2CppObject {
    public:
    // Nested type: ::Meta::WitAi::WitAuthUtility::DefaultTokenValidatorProvider
    class DefaultTokenValidatorProvider;
    // Nested type: ::Meta::WitAi::WitAuthUtility::ITokenValidationProvider
    class ITokenValidationProvider;
    // Get static field: static private System.String serverToken
    static ::StringW _get_serverToken();
    // Set static field: static private System.String serverToken
    static void _set_serverToken(::StringW value);
    // Get static field: static public Meta.WitAi.WitAuthUtility/ITokenValidationProvider tokenValidator
    static ::Meta::WitAi::WitAuthUtility::ITokenValidationProvider* _get_tokenValidator();
    // Set static field: static public Meta.WitAi.WitAuthUtility/ITokenValidationProvider tokenValidator
    static void _set_tokenValidator(::Meta::WitAi::WitAuthUtility::ITokenValidationProvider* value);
    // static field const value: static public System.String SERVER_TOKEN_ID
    static constexpr const char* SERVER_TOKEN_ID = "SharedServerToken";
    // Get static field: static public System.String SERVER_TOKEN_ID
    static ::StringW _get_SERVER_TOKEN_ID();
    // Set static field: static public System.String SERVER_TOKEN_ID
    static void _set_SERVER_TOKEN_ID(::StringW value);
    // static public System.Boolean IsServerTokenValid()
    // Offset: 0x442A75C
    static bool IsServerTokenValid();
    // static public System.Boolean IsServerTokenValid(System.String token)
    // Offset: 0x442A898
    static bool IsServerTokenValid(::StringW token);
    // static public System.String GetAppServerToken(Meta.WitAi.Data.Configuration.WitConfiguration configuration, System.String defaultValue)
    // Offset: 0x442A96C
    static ::StringW GetAppServerToken(::Meta::WitAi::Data::Configuration::WitConfiguration* configuration, ::StringW defaultValue);
    // static public System.String GetAppServerToken(System.String appId, System.String defaultServerToken)
    // Offset: 0x442A9FC
    static ::StringW GetAppServerToken(::StringW appId, ::StringW defaultServerToken);
    // static public System.String GetAppId(System.String serverToken, System.String defaultAppID)
    // Offset: 0x442AA3C
    static ::StringW GetAppId(::StringW serverToken, ::StringW defaultAppID);
    // static public System.Void SetAppServerToken(System.String appId, System.String token)
    // Offset: 0x442AA7C
    static void SetAppServerToken(::StringW appId, ::StringW token);
    // static public System.String get_ServerToken()
    // Offset: 0x442A858
    static ::StringW get_ServerToken();
    // public System.Void .ctor()
    // Offset: 0x442AA80
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WitAuthUtility* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::WitAuthUtility::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WitAuthUtility*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x442AA88
    static void _cctor();
  }; // Meta.WitAi.WitAuthUtility
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::WitAi::WitAuthUtility::IsServerTokenValid
// Il2CppName: IsServerTokenValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&Meta::WitAi::WitAuthUtility::IsServerTokenValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitAuthUtility*), "IsServerTokenValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitAuthUtility::IsServerTokenValid
// Il2CppName: IsServerTokenValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW)>(&Meta::WitAi::WitAuthUtility::IsServerTokenValid)> {
  static const MethodInfo* get() {
    static auto* token = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitAuthUtility*), "IsServerTokenValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{token});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitAuthUtility::GetAppServerToken
// Il2CppName: GetAppServerToken
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::Meta::WitAi::Data::Configuration::WitConfiguration*, ::StringW)>(&Meta::WitAi::WitAuthUtility::GetAppServerToken)> {
  static const MethodInfo* get() {
    static auto* configuration = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Data.Configuration", "WitConfiguration")->byval_arg;
    static auto* defaultValue = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitAuthUtility*), "GetAppServerToken", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{configuration, defaultValue});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitAuthUtility::GetAppServerToken
// Il2CppName: GetAppServerToken
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, ::StringW)>(&Meta::WitAi::WitAuthUtility::GetAppServerToken)> {
  static const MethodInfo* get() {
    static auto* appId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* defaultServerToken = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitAuthUtility*), "GetAppServerToken", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{appId, defaultServerToken});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitAuthUtility::GetAppId
// Il2CppName: GetAppId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, ::StringW)>(&Meta::WitAi::WitAuthUtility::GetAppId)> {
  static const MethodInfo* get() {
    static auto* serverToken = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* defaultAppID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitAuthUtility*), "GetAppId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{serverToken, defaultAppID});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitAuthUtility::SetAppServerToken
// Il2CppName: SetAppServerToken
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW, ::StringW)>(&Meta::WitAi::WitAuthUtility::SetAppServerToken)> {
  static const MethodInfo* get() {
    static auto* appId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* token = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitAuthUtility*), "SetAppServerToken", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{appId, token});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitAuthUtility::get_ServerToken
// Il2CppName: get_ServerToken
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)()>(&Meta::WitAi::WitAuthUtility::get_ServerToken)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitAuthUtility*), "get_ServerToken", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitAuthUtility::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Meta::WitAi::WitAuthUtility::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Meta::WitAi::WitAuthUtility::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitAuthUtility*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
