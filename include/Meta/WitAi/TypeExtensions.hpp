// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Meta::WitAi
namespace Meta::WitAi {
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: Func`2<T, TResult>
  template<typename T, typename TResult>
  class Func_2;
}
// Completed forward declares
// Type namespace: Meta.WitAi
namespace Meta::WitAi {
  // Forward declaring type: TypeExtensions
  class TypeExtensions;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::WitAi::TypeExtensions);
DEFINE_IL2CPP_ARG_TYPE(::Meta::WitAi::TypeExtensions*, "Meta.WitAi", "TypeExtensions");
// Type namespace: Meta.WitAi
namespace Meta::WitAi {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Meta.WitAi.TypeExtensions
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExtensionAttribute] Offset: FFFFFFFF
  class TypeExtensions : public ::Il2CppObject {
    public:
    // Nested type: ::Meta::WitAi::TypeExtensions::$$c__DisplayClass1_0
    class $$c__DisplayClass1_0;
    // static private System.Collections.Generic.List`1<System.Type> GetTypes(System.Func`2<System.Type,System.Boolean> isValid, System.Boolean firstOnly)
    // Offset: 0x443F958
    static ::System::Collections::Generic::List_1<::System::Type*>* GetTypes(::System::Func_2<::System::Type*, bool>* isValid, bool firstOnly);
    // static public System.Collections.Generic.List`1<System.Type> GetSubclassTypes(System.Type baseType, System.Boolean firstOnly)
    // Offset: 0x443FBC4
    static ::System::Collections::Generic::List_1<::System::Type*>* GetSubclassTypes(::System::Type* baseType, bool firstOnly);
  }; // Meta.WitAi.TypeExtensions
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::WitAi::TypeExtensions::GetTypes
// Il2CppName: GetTypes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::System::Type*>* (*)(::System::Func_2<::System::Type*, bool>*, bool)>(&Meta::WitAi::TypeExtensions::GetTypes)> {
  static const MethodInfo* get() {
    static auto* isValid = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Func`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Type"), ::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    static auto* firstOnly = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TypeExtensions*), "GetTypes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isValid, firstOnly});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TypeExtensions::GetSubclassTypes
// Il2CppName: GetSubclassTypes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::System::Type*>* (*)(::System::Type*, bool)>(&Meta::WitAi::TypeExtensions::GetSubclassTypes)> {
  static const MethodInfo* get() {
    static auto* baseType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* firstOnly = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TypeExtensions*), "GetSubclassTypes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{baseType, firstOnly});
  }
};
