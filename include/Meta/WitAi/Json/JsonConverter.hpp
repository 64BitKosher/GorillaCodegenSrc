// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: Meta::WitAi::Json
namespace Meta::WitAi::Json {
  // Forward declaring type: WitResponseNode
  class WitResponseNode;
}
// Completed forward declares
// Type namespace: Meta.WitAi.Json
namespace Meta::WitAi::Json {
  // Forward declaring type: JsonConverter
  class JsonConverter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::WitAi::Json::JsonConverter);
DEFINE_IL2CPP_ARG_TYPE(::Meta::WitAi::Json::JsonConverter*, "Meta.WitAi.Json", "JsonConverter");
// Type namespace: Meta.WitAi.Json
namespace Meta::WitAi::Json {
  // Size: 0x12
  #pragma pack(push, 1)
  // Autogenerated type: Meta.WitAi.Json.JsonConverter
  // [TokenAttribute] Offset: FFFFFFFF
  class JsonConverter : public ::Il2CppObject {
    public:
    public:
    // private readonly System.Boolean <CanRead>k__BackingField
    // Size: 0x1
    // Offset: 0x10
    bool CanRead;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private readonly System.Boolean <CanWrite>k__BackingField
    // Size: 0x1
    // Offset: 0x11
    bool CanWrite;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private readonly System.Boolean <CanRead>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$CanRead$k__BackingField();
    // Get instance field reference: private readonly System.Boolean <CanWrite>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$CanWrite$k__BackingField();
    // public System.Boolean get_CanRead()
    // Offset: 0x444BB0C
    bool get_CanRead();
    // public System.Boolean get_CanWrite()
    // Offset: 0x444BB14
    bool get_CanWrite();
    // public System.Boolean CanConvert(System.Type objectType)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool CanConvert(::System::Type* objectType);
    // public System.Object ReadJson(Meta.WitAi.Json.WitResponseNode serializer, System.Type objectType, System.Object existingValue)
    // Offset: 0x444BB1C
    ::Il2CppObject* ReadJson(::Meta::WitAi::Json::WitResponseNode* serializer, ::System::Type* objectType, ::Il2CppObject* existingValue);
    // public Meta.WitAi.Json.WitResponseNode WriteJson(System.Object existingValue)
    // Offset: 0x444BB24
    ::Meta::WitAi::Json::WitResponseNode* WriteJson(::Il2CppObject* existingValue);
    // protected System.Void .ctor()
    // Offset: 0x44472DC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static JsonConverter* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Json::JsonConverter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<JsonConverter*, creationType>()));
    }
  }; // Meta.WitAi.Json.JsonConverter
  #pragma pack(pop)
  static check_size<sizeof(JsonConverter), 17 + sizeof(bool)> __Meta_WitAi_Json_JsonConverterSizeCheck;
  static_assert(sizeof(JsonConverter) == 0x12);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::WitAi::Json::JsonConverter::get_CanRead
// Il2CppName: get_CanRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::Json::JsonConverter::*)()>(&Meta::WitAi::Json::JsonConverter::get_CanRead)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Json::JsonConverter*), "get_CanRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Json::JsonConverter::get_CanWrite
// Il2CppName: get_CanWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::Json::JsonConverter::*)()>(&Meta::WitAi::Json::JsonConverter::get_CanWrite)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Json::JsonConverter*), "get_CanWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Json::JsonConverter::CanConvert
// Il2CppName: CanConvert
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::Json::JsonConverter::*)(::System::Type*)>(&Meta::WitAi::Json::JsonConverter::CanConvert)> {
  static const MethodInfo* get() {
    static auto* objectType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Json::JsonConverter*), "CanConvert", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{objectType});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Json::JsonConverter::ReadJson
// Il2CppName: ReadJson
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (Meta::WitAi::Json::JsonConverter::*)(::Meta::WitAi::Json::WitResponseNode*, ::System::Type*, ::Il2CppObject*)>(&Meta::WitAi::Json::JsonConverter::ReadJson)> {
  static const MethodInfo* get() {
    static auto* serializer = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Json", "WitResponseNode")->byval_arg;
    static auto* objectType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* existingValue = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Json::JsonConverter*), "ReadJson", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{serializer, objectType, existingValue});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Json::JsonConverter::WriteJson
// Il2CppName: WriteJson
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Json::WitResponseNode* (Meta::WitAi::Json::JsonConverter::*)(::Il2CppObject*)>(&Meta::WitAi::Json::JsonConverter::WriteJson)> {
  static const MethodInfo* get() {
    static auto* existingValue = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Json::JsonConverter*), "WriteJson", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{existingValue});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Json::JsonConverter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
