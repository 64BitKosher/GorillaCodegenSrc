// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Meta.WitAi.Json.JsonConverter
#include "Meta/WitAi/Json/JsonConverter.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: Meta::WitAi::Json
namespace Meta::WitAi::Json {
  // Forward declaring type: WitResponseNode
  class WitResponseNode;
}
// Completed forward declares
// Type namespace: Meta.WitAi.Json
namespace Meta::WitAi::Json {
  // Forward declaring type: HashSetConverter`1<T>
  template<typename T>
  class HashSetConverter_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::Meta::WitAi::Json::HashSetConverter_1, "Meta.WitAi.Json", "HashSetConverter`1");
// Type namespace: Meta.WitAi.Json
namespace Meta::WitAi::Json {
  // WARNING Size may be invalid!
  // Autogenerated type: Meta.WitAi.Json.HashSetConverter`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class HashSetConverter_1 : public ::Meta::WitAi::Json::JsonConverter {
    public:
    // public override System.Boolean get_CanRead()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: Meta.WitAi.Json.JsonConverter
    // Base method: System.Boolean JsonConverter::get_CanRead()
    bool get_CanRead() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Json::HashSetConverter_1::get_CanRead");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Meta::WitAi::Json::JsonConverter*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // public override System.Boolean get_CanWrite()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: Meta.WitAi.Json.JsonConverter
    // Base method: System.Boolean JsonConverter::get_CanWrite()
    bool get_CanWrite() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Json::HashSetConverter_1::get_CanWrite");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Meta::WitAi::Json::JsonConverter*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // public override System.Boolean CanConvert(System.Type objectType)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: Meta.WitAi.Json.JsonConverter
    // Base method: System.Boolean JsonConverter::CanConvert(System.Type objectType)
    bool CanConvert(::System::Type* objectType) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Json::HashSetConverter_1::CanConvert");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Meta::WitAi::Json::JsonConverter*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, objectType);
    }
    // public override System.Object ReadJson(Meta.WitAi.Json.WitResponseNode serializer, System.Type objectType, System.Object existingValue)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: Meta.WitAi.Json.JsonConverter
    // Base method: System.Object JsonConverter::ReadJson(Meta.WitAi.Json.WitResponseNode serializer, System.Type objectType, System.Object existingValue)
    ::Il2CppObject* ReadJson(::Meta::WitAi::Json::WitResponseNode* serializer, ::System::Type* objectType, ::Il2CppObject* existingValue) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Json::HashSetConverter_1::ReadJson");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Meta::WitAi::Json::JsonConverter*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method, serializer, objectType, existingValue);
    }
    // public override Meta.WitAi.Json.WitResponseNode WriteJson(System.Object existingValue)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: Meta.WitAi.Json.JsonConverter
    // Base method: Meta.WitAi.Json.WitResponseNode JsonConverter::WriteJson(System.Object existingValue)
    ::Meta::WitAi::Json::WitResponseNode* WriteJson(::Il2CppObject* existingValue) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Json::HashSetConverter_1::WriteJson");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Meta::WitAi::Json::JsonConverter*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::Meta::WitAi::Json::WitResponseNode*, false>(this, ___internal__method, existingValue);
    }
    // public System.Void .ctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: Meta.WitAi.Json.JsonConverter
    // Base method: System.Void JsonConverter::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HashSetConverter_1<T>* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Json::HashSetConverter_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HashSetConverter_1<T>*, creationType>()));
    }
  }; // Meta.WitAi.Json.HashSetConverter`1
  // Could not write size check! Type: Meta.WitAi.Json.HashSetConverter`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
