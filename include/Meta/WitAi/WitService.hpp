// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Meta.WitAi.IVoiceEventProvider
#include "Meta/WitAi/IVoiceEventProvider.hpp"
// Including type: Meta.WitAi.IVoiceActivationHandler
#include "Meta/WitAi/IVoiceActivationHandler.hpp"
// Including type: Meta.WitAi.ITelemetryEventsProvider
#include "Meta/WitAi/ITelemetryEventsProvider.hpp"
// Including type: Meta.WitAi.IWitRuntimeConfigProvider
#include "Meta/WitAi/IWitRuntimeConfigProvider.hpp"
// Including type: Meta.WitAi.Interfaces.IWitConfigurationProvider
#include "Meta/WitAi/Interfaces/IWitConfigurationProvider.hpp"
// Including type: Meta.WitAi.Data.RingBuffer`1
#include "Meta/WitAi/Data/RingBuffer_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Meta::WitAi
namespace Meta::WitAi {
  // Forward declaring type: WitRequest
  class WitRequest;
}
// Forward declaring namespace: Meta::WitAi::Interfaces
namespace Meta::WitAi::Interfaces {
  // Forward declaring type: ITranscriptionProvider
  class ITranscriptionProvider;
  // Forward declaring type: IWitRequestProvider
  class IWitRequestProvider;
  // Forward declaring type: IDynamicEntitiesProvider
  class IDynamicEntitiesProvider;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Coroutine
  class Coroutine;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Forward declaring namespace: Meta::WitAi::Requests
namespace Meta::WitAi::Requests {
  // Forward declaring type: VoiceServiceRequest
  class VoiceServiceRequest;
  // Forward declaring type: VoiceServiceRequestEvents
  class VoiceServiceRequestEvents;
}
// Forward declaring namespace: Meta::WitAi::Events
namespace Meta::WitAi::Events {
  // Forward declaring type: IWitByteDataReadyHandler
  class IWitByteDataReadyHandler;
  // Forward declaring type: IWitByteDataSentHandler
  class IWitByteDataSentHandler;
  // Forward declaring type: VoiceEvents
  class VoiceEvents;
  // Forward declaring type: TelemetryEvents
  class TelemetryEvents;
}
// Forward declaring namespace: Meta::WitAi::Data
namespace Meta::WitAi::Data {
  // Forward declaring type: AudioBuffer
  class AudioBuffer;
}
// Forward declaring namespace: Meta::WitAi::Data::Configuration
namespace Meta::WitAi::Data::Configuration {
  // Forward declaring type: WitConfiguration
  class WitConfiguration;
}
// Forward declaring namespace: Meta::WitAi::Configuration
namespace Meta::WitAi::Configuration {
  // Forward declaring type: WitRuntimeConfiguration
  class WitRuntimeConfiguration;
  // Forward declaring type: WitRequestOptions
  class WitRequestOptions;
}
// Forward declaring namespace: UnityEngine::SceneManagement
namespace UnityEngine::SceneManagement {
  // Forward declaring type: Scene
  struct Scene;
  // Forward declaring type: LoadSceneMode
  struct LoadSceneMode;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: UnityEngine::Events
namespace UnityEngine::Events {
  // Forward declaring type: UnityEvent
  class UnityEvent;
}
// Forward declaring namespace: Meta::WitAi::Json
namespace Meta::WitAi::Json {
  // Forward declaring type: WitResponseNode
  class WitResponseNode;
}
// Completed forward declares
// Type namespace: Meta.WitAi
namespace Meta::WitAi {
  // Forward declaring type: WitService
  class WitService;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::WitAi::WitService);
DEFINE_IL2CPP_ARG_TYPE(::Meta::WitAi::WitService*, "Meta.WitAi", "WitService");
// Type namespace: Meta.WitAi
namespace Meta::WitAi {
  // Size: 0xC1
  #pragma pack(push, 1)
  // Autogenerated type: Meta.WitAi.WitService
  // [TokenAttribute] Offset: FFFFFFFF
  class WitService : public ::UnityEngine::MonoBehaviour/*, public ::Meta::WitAi::IVoiceEventProvider, public ::Meta::WitAi::IVoiceActivationHandler, public ::Meta::WitAi::ITelemetryEventsProvider, public ::Meta::WitAi::IWitRuntimeConfigProvider, public ::Meta::WitAi::Interfaces::IWitConfigurationProvider*/ {
    public:
    // Nested type: ::Meta::WitAi::WitService::$DeactivateDueToTimeLimit$d__86
    class $DeactivateDueToTimeLimit$d__86;
    public:
    // private System.Single _lastMinVolumeLevelTime
    // Size: 0x4
    // Offset: 0x20
    float lastMinVolumeLevelTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: lastMinVolumeLevelTime and: recordingRequest
    char __padding0[0x4] = {};
    // private Meta.WitAi.WitRequest _recordingRequest
    // Size: 0x8
    // Offset: 0x28
    ::Meta::WitAi::WitRequest* recordingRequest;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::WitRequest*) == 0x8);
    // private System.Boolean _isSoundWakeActive
    // Size: 0x1
    // Offset: 0x30
    bool isSoundWakeActive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isSoundWakeActive and: lastSampleMarker
    char __padding2[0x7] = {};
    // private Meta.WitAi.Data.RingBuffer`1/Marker<System.Byte> _lastSampleMarker
    // Size: 0x8
    // Offset: 0x38
    typename ::Meta::WitAi::Data::RingBuffer_1<uint8_t>::Marker* lastSampleMarker;
    // Field size check
    static_assert(sizeof(typename ::Meta::WitAi::Data::RingBuffer_1<uint8_t>::Marker*) == 0x8);
    // private System.Boolean _minKeepAliveWasHit
    // Size: 0x1
    // Offset: 0x40
    bool minKeepAliveWasHit;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _isActive
    // Size: 0x1
    // Offset: 0x41
    bool isActive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isActive and: minSampleByteCount
    char __padding5[0x6] = {};
    // private System.Int64 _minSampleByteCount
    // Size: 0x8
    // Offset: 0x48
    int64_t minSampleByteCount;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private Meta.WitAi.IVoiceEventProvider _voiceEventProvider
    // Size: 0x8
    // Offset: 0x50
    ::Meta::WitAi::IVoiceEventProvider* voiceEventProvider;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::IVoiceEventProvider*) == 0x8);
    // private Meta.WitAi.ITelemetryEventsProvider _telemetryEventsProvider
    // Size: 0x8
    // Offset: 0x58
    ::Meta::WitAi::ITelemetryEventsProvider* telemetryEventsProvider;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::ITelemetryEventsProvider*) == 0x8);
    // private Meta.WitAi.IWitRuntimeConfigProvider _runtimeConfigProvider
    // Size: 0x8
    // Offset: 0x60
    ::Meta::WitAi::IWitRuntimeConfigProvider* runtimeConfigProvider;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::IWitRuntimeConfigProvider*) == 0x8);
    // private Meta.WitAi.Interfaces.ITranscriptionProvider _activeTranscriptionProvider
    // Size: 0x8
    // Offset: 0x68
    ::Meta::WitAi::Interfaces::ITranscriptionProvider* activeTranscriptionProvider;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::Interfaces::ITranscriptionProvider*) == 0x8);
    // private UnityEngine.Coroutine _timeLimitCoroutine
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::Coroutine* timeLimitCoroutine;
    // Field size check
    static_assert(sizeof(::UnityEngine::Coroutine*) == 0x8);
    // private Meta.WitAi.Interfaces.IWitRequestProvider _witRequestProvider
    // Size: 0x8
    // Offset: 0x78
    ::Meta::WitAi::Interfaces::IWitRequestProvider* witRequestProvider;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::Interfaces::IWitRequestProvider*) == 0x8);
    // private System.Boolean _receivedTranscription
    // Size: 0x1
    // Offset: 0x80
    bool receivedTranscription;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: receivedTranscription and: lastWordTime
    char __padding13[0x3] = {};
    // private System.Single _lastWordTime
    // Size: 0x4
    // Offset: 0x84
    float lastWordTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Collections.Generic.HashSet`1<Meta.WitAi.Requests.VoiceServiceRequest> _transmitRequests
    // Size: 0x8
    // Offset: 0x88
    ::System::Collections::Generic::HashSet_1<::Meta::WitAi::Requests::VoiceServiceRequest*>* transmitRequests;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<::Meta::WitAi::Requests::VoiceServiceRequest*>*) == 0x8);
    // private UnityEngine.Coroutine _queueHandler
    // Size: 0x8
    // Offset: 0x90
    ::UnityEngine::Coroutine* queueHandler;
    // Field size check
    static_assert(sizeof(::UnityEngine::Coroutine*) == 0x8);
    // private Meta.WitAi.Events.IWitByteDataReadyHandler[] _dataReadyHandlers
    // Size: 0x8
    // Offset: 0x98
    ::ArrayW<::Meta::WitAi::Events::IWitByteDataReadyHandler*> dataReadyHandlers;
    // Field size check
    static_assert(sizeof(::ArrayW<::Meta::WitAi::Events::IWitByteDataReadyHandler*>) == 0x8);
    // private Meta.WitAi.Events.IWitByteDataSentHandler[] _dataSentHandlers
    // Size: 0x8
    // Offset: 0xA0
    ::ArrayW<::Meta::WitAi::Events::IWitByteDataSentHandler*> dataSentHandlers;
    // Field size check
    static_assert(sizeof(::ArrayW<::Meta::WitAi::Events::IWitByteDataSentHandler*>) == 0x8);
    // private Meta.WitAi.Interfaces.IDynamicEntitiesProvider[] _dynamicEntityProviders
    // Size: 0x8
    // Offset: 0xA8
    ::ArrayW<::Meta::WitAi::Interfaces::IDynamicEntitiesProvider*> dynamicEntityProviders;
    // Field size check
    static_assert(sizeof(::ArrayW<::Meta::WitAi::Interfaces::IDynamicEntitiesProvider*>) == 0x8);
    // private System.Single _time
    // Size: 0x4
    // Offset: 0xB0
    float time;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: time and: buffer
    char __padding20[0x4] = {};
    // private Meta.WitAi.Data.AudioBuffer _buffer
    // Size: 0x8
    // Offset: 0xB8
    ::Meta::WitAi::Data::AudioBuffer* buffer;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::Data::AudioBuffer*) == 0x8);
    // private System.Boolean _bufferDelegates
    // Size: 0x1
    // Offset: 0xC0
    bool bufferDelegates;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::Meta::WitAi::IVoiceEventProvider
    operator ::Meta::WitAi::IVoiceEventProvider() noexcept {
      return *reinterpret_cast<::Meta::WitAi::IVoiceEventProvider*>(this);
    }
    // Creating interface conversion operator: operator ::Meta::WitAi::IVoiceActivationHandler
    operator ::Meta::WitAi::IVoiceActivationHandler() noexcept {
      return *reinterpret_cast<::Meta::WitAi::IVoiceActivationHandler*>(this);
    }
    // Creating interface conversion operator: operator ::Meta::WitAi::ITelemetryEventsProvider
    operator ::Meta::WitAi::ITelemetryEventsProvider() noexcept {
      return *reinterpret_cast<::Meta::WitAi::ITelemetryEventsProvider*>(this);
    }
    // Creating interface conversion operator: operator ::Meta::WitAi::IWitRuntimeConfigProvider
    operator ::Meta::WitAi::IWitRuntimeConfigProvider() noexcept {
      return *reinterpret_cast<::Meta::WitAi::IWitRuntimeConfigProvider*>(this);
    }
    // Creating interface conversion operator: operator ::Meta::WitAi::Interfaces::IWitConfigurationProvider
    operator ::Meta::WitAi::Interfaces::IWitConfigurationProvider() noexcept {
      return *reinterpret_cast<::Meta::WitAi::Interfaces::IWitConfigurationProvider*>(this);
    }
    // Get instance field reference: private System.Single _lastMinVolumeLevelTime
    [[deprecated("Use field access instead!")]] float& dyn__lastMinVolumeLevelTime();
    // Get instance field reference: private Meta.WitAi.WitRequest _recordingRequest
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::WitRequest*& dyn__recordingRequest();
    // Get instance field reference: private System.Boolean _isSoundWakeActive
    [[deprecated("Use field access instead!")]] bool& dyn__isSoundWakeActive();
    // Get instance field reference: private Meta.WitAi.Data.RingBuffer`1/Marker<System.Byte> _lastSampleMarker
    [[deprecated("Use field access instead!")]] typename ::Meta::WitAi::Data::RingBuffer_1<uint8_t>::Marker*& dyn__lastSampleMarker();
    // Get instance field reference: private System.Boolean _minKeepAliveWasHit
    [[deprecated("Use field access instead!")]] bool& dyn__minKeepAliveWasHit();
    // Get instance field reference: private System.Boolean _isActive
    [[deprecated("Use field access instead!")]] bool& dyn__isActive();
    // Get instance field reference: private System.Int64 _minSampleByteCount
    [[deprecated("Use field access instead!")]] int64_t& dyn__minSampleByteCount();
    // Get instance field reference: private Meta.WitAi.IVoiceEventProvider _voiceEventProvider
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::IVoiceEventProvider*& dyn__voiceEventProvider();
    // Get instance field reference: private Meta.WitAi.ITelemetryEventsProvider _telemetryEventsProvider
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::ITelemetryEventsProvider*& dyn__telemetryEventsProvider();
    // Get instance field reference: private Meta.WitAi.IWitRuntimeConfigProvider _runtimeConfigProvider
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::IWitRuntimeConfigProvider*& dyn__runtimeConfigProvider();
    // Get instance field reference: private Meta.WitAi.Interfaces.ITranscriptionProvider _activeTranscriptionProvider
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::Interfaces::ITranscriptionProvider*& dyn__activeTranscriptionProvider();
    // Get instance field reference: private UnityEngine.Coroutine _timeLimitCoroutine
    [[deprecated("Use field access instead!")]] ::UnityEngine::Coroutine*& dyn__timeLimitCoroutine();
    // Get instance field reference: private Meta.WitAi.Interfaces.IWitRequestProvider _witRequestProvider
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::Interfaces::IWitRequestProvider*& dyn__witRequestProvider();
    // Get instance field reference: private System.Boolean _receivedTranscription
    [[deprecated("Use field access instead!")]] bool& dyn__receivedTranscription();
    // Get instance field reference: private System.Single _lastWordTime
    [[deprecated("Use field access instead!")]] float& dyn__lastWordTime();
    // Get instance field reference: private System.Collections.Generic.HashSet`1<Meta.WitAi.Requests.VoiceServiceRequest> _transmitRequests
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::Meta::WitAi::Requests::VoiceServiceRequest*>*& dyn__transmitRequests();
    // Get instance field reference: private UnityEngine.Coroutine _queueHandler
    [[deprecated("Use field access instead!")]] ::UnityEngine::Coroutine*& dyn__queueHandler();
    // Get instance field reference: private Meta.WitAi.Events.IWitByteDataReadyHandler[] _dataReadyHandlers
    [[deprecated("Use field access instead!")]] ::ArrayW<::Meta::WitAi::Events::IWitByteDataReadyHandler*>& dyn__dataReadyHandlers();
    // Get instance field reference: private Meta.WitAi.Events.IWitByteDataSentHandler[] _dataSentHandlers
    [[deprecated("Use field access instead!")]] ::ArrayW<::Meta::WitAi::Events::IWitByteDataSentHandler*>& dyn__dataSentHandlers();
    // Get instance field reference: private Meta.WitAi.Interfaces.IDynamicEntitiesProvider[] _dynamicEntityProviders
    [[deprecated("Use field access instead!")]] ::ArrayW<::Meta::WitAi::Interfaces::IDynamicEntitiesProvider*>& dyn__dynamicEntityProviders();
    // Get instance field reference: private System.Single _time
    [[deprecated("Use field access instead!")]] float& dyn__time();
    // Get instance field reference: private Meta.WitAi.Data.AudioBuffer _buffer
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::Data::AudioBuffer*& dyn__buffer();
    // Get instance field reference: private System.Boolean _bufferDelegates
    [[deprecated("Use field access instead!")]] bool& dyn__bufferDelegates();
    // public Meta.WitAi.Data.Configuration.WitConfiguration get_Configuration()
    // Offset: 0x4433558
    ::Meta::WitAi::Data::Configuration::WitConfiguration* get_Configuration();
    // public System.Boolean get_Active()
    // Offset: 0x4428FF8
    bool get_Active();
    // public System.Boolean get_IsRequestActive()
    // Offset: 0x44290A4
    bool get_IsRequestActive();
    // public Meta.WitAi.IVoiceEventProvider get_VoiceEventProvider()
    // Offset: 0x443361C
    ::Meta::WitAi::IVoiceEventProvider* get_VoiceEventProvider();
    // public System.Void set_VoiceEventProvider(Meta.WitAi.IVoiceEventProvider value)
    // Offset: 0x4433624
    void set_VoiceEventProvider(::Meta::WitAi::IVoiceEventProvider* value);
    // public Meta.WitAi.ITelemetryEventsProvider get_TelemetryEventsProvider()
    // Offset: 0x443362C
    ::Meta::WitAi::ITelemetryEventsProvider* get_TelemetryEventsProvider();
    // public System.Void set_TelemetryEventsProvider(Meta.WitAi.ITelemetryEventsProvider value)
    // Offset: 0x4433634
    void set_TelemetryEventsProvider(::Meta::WitAi::ITelemetryEventsProvider* value);
    // public Meta.WitAi.IWitRuntimeConfigProvider get_ConfigurationProvider()
    // Offset: 0x443363C
    ::Meta::WitAi::IWitRuntimeConfigProvider* get_ConfigurationProvider();
    // public System.Void set_ConfigurationProvider(Meta.WitAi.IWitRuntimeConfigProvider value)
    // Offset: 0x4433644
    void set_ConfigurationProvider(::Meta::WitAi::IWitRuntimeConfigProvider* value);
    // public Meta.WitAi.Configuration.WitRuntimeConfiguration get_RuntimeConfiguration()
    // Offset: 0x4433570
    ::Meta::WitAi::Configuration::WitRuntimeConfiguration* get_RuntimeConfiguration();
    // public Meta.WitAi.Events.VoiceEvents get_VoiceEvents()
    // Offset: 0x443364C
    ::Meta::WitAi::Events::VoiceEvents* get_VoiceEvents();
    // public Meta.WitAi.Events.TelemetryEvents get_TelemetryEvents()
    // Offset: 0x44336EC
    ::Meta::WitAi::Events::TelemetryEvents* get_TelemetryEvents();
    // public Meta.WitAi.Interfaces.ITranscriptionProvider get_TranscriptionProvider()
    // Offset: 0x443378C
    ::Meta::WitAi::Interfaces::ITranscriptionProvider* get_TranscriptionProvider();
    // public System.Void set_TranscriptionProvider(Meta.WitAi.Interfaces.ITranscriptionProvider value)
    // Offset: 0x4429138
    void set_TranscriptionProvider(::Meta::WitAi::Interfaces::ITranscriptionProvider* value);
    // public Meta.WitAi.Interfaces.IWitRequestProvider get_WitRequestProvider()
    // Offset: 0x4433794
    ::Meta::WitAi::Interfaces::IWitRequestProvider* get_WitRequestProvider();
    // public System.Void set_WitRequestProvider(Meta.WitAi.Interfaces.IWitRequestProvider value)
    // Offset: 0x443379C
    void set_WitRequestProvider(::Meta::WitAi::Interfaces::IWitRequestProvider* value);
    // public System.Boolean get_MicActive()
    // Offset: 0x4429988
    bool get_MicActive();
    // protected System.Boolean get_ShouldSendMicData()
    // Offset: 0x44337A4
    bool get_ShouldSendMicData();
    // public System.Boolean IsConfigurationValid()
    // Offset: 0x44337DC
    bool IsConfigurationValid();
    // protected System.Void Awake()
    // Offset: 0x4433888
    void Awake();
    // protected System.Void OnEnable()
    // Offset: 0x4433918
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x4433DC8
    void OnDisable();
    // protected System.Void OnSceneLoaded(UnityEngine.SceneManagement.Scene scene, UnityEngine.SceneManagement.LoadSceneMode mode)
    // Offset: 0x4433E70
    void OnSceneLoaded(::UnityEngine::SceneManagement::Scene scene, ::UnityEngine::SceneManagement::LoadSceneMode mode);
    // protected System.Void SetMicDelegates(System.Boolean add)
    // Offset: 0x4433ACC
    void SetMicDelegates(bool add);
    // public System.Void Activate()
    // Offset: 0x4433F84
    void Activate();
    // public System.Void Activate(Meta.WitAi.Configuration.WitRequestOptions requestOptions)
    // Offset: 0x4433FE0
    void Activate(::Meta::WitAi::Configuration::WitRequestOptions* requestOptions);
    // public Meta.WitAi.Requests.VoiceServiceRequest Activate(Meta.WitAi.Configuration.WitRequestOptions requestOptions, Meta.WitAi.Requests.VoiceServiceRequestEvents requestEvents)
    // Offset: 0x442A0E0
    ::Meta::WitAi::Requests::VoiceServiceRequest* Activate(::Meta::WitAi::Configuration::WitRequestOptions* requestOptions, ::Meta::WitAi::Requests::VoiceServiceRequestEvents* requestEvents);
    // public System.Void ActivateImmediately()
    // Offset: 0x44345C4
    void ActivateImmediately();
    // public System.Void ActivateImmediately(Meta.WitAi.Configuration.WitRequestOptions requestOptions)
    // Offset: 0x4434620
    void ActivateImmediately(::Meta::WitAi::Configuration::WitRequestOptions* requestOptions);
    // public Meta.WitAi.Requests.VoiceServiceRequest ActivateImmediately(Meta.WitAi.Configuration.WitRequestOptions requestOptions, Meta.WitAi.Requests.VoiceServiceRequestEvents requestEvents)
    // Offset: 0x442A4B0
    ::Meta::WitAi::Requests::VoiceServiceRequest* ActivateImmediately(::Meta::WitAi::Configuration::WitRequestOptions* requestOptions, ::Meta::WitAi::Requests::VoiceServiceRequestEvents* requestEvents);
    // protected System.Void SendRecordingRequest()
    // Offset: 0x4434688
    void SendRecordingRequest();
    // protected System.Void SetupRequest(Meta.WitAi.WitRequest newRequest)
    // Offset: 0x4434094
    void SetupRequest(::Meta::WitAi::WitRequest* newRequest);
    // public System.Void ExecuteRequest(Meta.WitAi.WitRequest newRequest)
    // Offset: 0x44346F4
    void ExecuteRequest(::Meta::WitAi::WitRequest* newRequest);
    // public System.Void Activate(System.String text)
    // Offset: 0x44348FC
    void Activate(::StringW text);
    // public System.Void Activate(System.String text, Meta.WitAi.Configuration.WitRequestOptions requestOptions)
    // Offset: 0x4434968
    void Activate(::StringW text, ::Meta::WitAi::Configuration::WitRequestOptions* requestOptions);
    // public Meta.WitAi.Requests.VoiceServiceRequest Activate(System.String text, Meta.WitAi.Configuration.WitRequestOptions requestOptions, Meta.WitAi.Requests.VoiceServiceRequestEvents requestEvents)
    // Offset: 0x4429CE4
    ::Meta::WitAi::Requests::VoiceServiceRequest* Activate(::StringW text, ::Meta::WitAi::Configuration::WitRequestOptions* requestOptions, ::Meta::WitAi::Requests::VoiceServiceRequestEvents* requestEvents);
    // private System.Void StopRecording()
    // Offset: 0x4434048
    void StopRecording();
    // private System.Void OnWitReadyForData()
    // Offset: 0x44349D8
    void OnWitReadyForData();
    // private System.Void StartRecording()
    // Offset: 0x44344AC
    void StartRecording();
    // private System.Void OnMicStartListening()
    // Offset: 0x4434A1C
    void OnMicStartListening();
    // private System.Void OnMicStoppedListening()
    // Offset: 0x4434A44
    void OnMicStoppedListening();
    // private System.Void OnByteDataReady(System.Byte[] buffer, System.Int32 offset, System.Int32 length)
    // Offset: 0x4434A6C
    void OnByteDataReady(::ArrayW<uint8_t> buffer, int offset, int length);
    // private System.Void OnMicSampleReady(Meta.WitAi.Data.RingBuffer`1/Marker<System.Byte> marker, System.Single levelMax)
    // Offset: 0x4434BA4
    void OnMicSampleReady(typename ::Meta::WitAi::Data::RingBuffer_1<uint8_t>::Marker* marker, float levelMax);
    // private System.Void Update()
    // Offset: 0x44352D0
    void Update();
    // private System.Void OnMicLevelChanged(System.Single level)
    // Offset: 0x44352EC
    void OnMicLevelChanged(float level);
    // private System.Void OnTranscriptionMicLevelChanged(System.Single level)
    // Offset: 0x443540C
    void OnTranscriptionMicLevelChanged(float level);
    // private System.Void FinalizeAudioDurationTracker()
    // Offset: 0x44354D8
    void FinalizeAudioDurationTracker();
    // public System.Void Deactivate()
    // Offset: 0x442A5E0
    void Deactivate();
    // public System.Void DeactivateAndAbortRequest(Meta.WitAi.Requests.VoiceServiceRequest request)
    // Offset: 0x44355F0
    void DeactivateAndAbortRequest(::Meta::WitAi::Requests::VoiceServiceRequest* request);
    // public System.Void DeactivateAndAbortRequest()
    // Offset: 0x442A650
    void DeactivateAndAbortRequest();
    // private System.Collections.IEnumerator DeactivateDueToTimeLimit()
    // Offset: 0x4434890
    ::System::Collections::IEnumerator* DeactivateDueToTimeLimit();
    // private System.Void DeactivateRequest(UnityEngine.Events.UnityEvent onComplete, System.Boolean abort)
    // Offset: 0x4434FA0
    void DeactivateRequest(::UnityEngine::Events::UnityEvent* onComplete, bool abort);
    // private System.Void DeactivateWitRequest(Meta.WitAi.Requests.VoiceServiceRequest request, System.Boolean abort)
    // Offset: 0x443569C
    void DeactivateWitRequest(::Meta::WitAi::Requests::VoiceServiceRequest* request, bool abort);
    // private System.Void OnPartialTranscription(System.String transcription)
    // Offset: 0x4435748
    void OnPartialTranscription(::StringW transcription);
    // private System.Void OnFullTranscription(System.String transcription)
    // Offset: 0x44357C8
    void OnFullTranscription(::StringW transcription);
    // private System.Void HandlePartialResult(Meta.WitAi.Json.WitResponseNode response)
    // Offset: 0x4435834
    void HandlePartialResult(::Meta::WitAi::Json::WitResponseNode* response);
    // private System.Void HandleResult(Meta.WitAi.Requests.VoiceServiceRequest request)
    // Offset: 0x44358B4
    void HandleResult(::Meta::WitAi::Requests::VoiceServiceRequest* request);
    // private System.Void HandleComplete(Meta.WitAi.Requests.VoiceServiceRequest request)
    // Offset: 0x4435B8C
    void HandleComplete(::Meta::WitAi::Requests::VoiceServiceRequest* request);
    // public System.Void .ctor()
    // Offset: 0x4435EF8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WitService* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::WitService::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WitService*, creationType>()));
    }
    // private System.Void <SetupRequest>b__67_0(Meta.WitAi.WitRequest r)
    // Offset: 0x4435F88
    void $SetupRequest$b__67_0(::Meta::WitAi::WitRequest* r);
    // private System.Void <OnMicSampleReady>b__78_0(System.Byte[] buffer, System.Int32 offset, System.Int32 length)
    // Offset: 0x4435F8C
    void $OnMicSampleReady$b__78_0(::ArrayW<uint8_t> buffer, int offset, int length);
    // private System.Void <OnMicSampleReady>b__78_1(System.Byte[] buffer, System.Int32 offset, System.Int32 length)
    // Offset: 0x4435FA4
    void $OnMicSampleReady$b__78_1(::ArrayW<uint8_t> buffer, int offset, int length);
    // private System.Void <OnMicSampleReady>b__78_2(System.Byte[] buffer, System.Int32 offset, System.Int32 length)
    // Offset: 0x443602C
    void $OnMicSampleReady$b__78_2(::ArrayW<uint8_t> buffer, int offset, int length);
  }; // Meta.WitAi.WitService
  #pragma pack(pop)
  static check_size<sizeof(WitService), 192 + sizeof(bool)> __Meta_WitAi_WitServiceSizeCheck;
  static_assert(sizeof(WitService) == 0xC1);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::WitAi::WitService::get_Configuration
// Il2CppName: get_Configuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Data::Configuration::WitConfiguration* (Meta::WitAi::WitService::*)()>(&Meta::WitAi::WitService::get_Configuration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitService*), "get_Configuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitService::get_Active
// Il2CppName: get_Active
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::WitService::*)()>(&Meta::WitAi::WitService::get_Active)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitService*), "get_Active", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitService::get_IsRequestActive
// Il2CppName: get_IsRequestActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::WitService::*)()>(&Meta::WitAi::WitService::get_IsRequestActive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitService*), "get_IsRequestActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitService::get_VoiceEventProvider
// Il2CppName: get_VoiceEventProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::IVoiceEventProvider* (Meta::WitAi::WitService::*)()>(&Meta::WitAi::WitService::get_VoiceEventProvider)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitService*), "get_VoiceEventProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitService::set_VoiceEventProvider
// Il2CppName: set_VoiceEventProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitService::*)(::Meta::WitAi::IVoiceEventProvider*)>(&Meta::WitAi::WitService::set_VoiceEventProvider)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Meta.WitAi", "IVoiceEventProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitService*), "set_VoiceEventProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitService::get_TelemetryEventsProvider
// Il2CppName: get_TelemetryEventsProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::ITelemetryEventsProvider* (Meta::WitAi::WitService::*)()>(&Meta::WitAi::WitService::get_TelemetryEventsProvider)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitService*), "get_TelemetryEventsProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitService::set_TelemetryEventsProvider
// Il2CppName: set_TelemetryEventsProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitService::*)(::Meta::WitAi::ITelemetryEventsProvider*)>(&Meta::WitAi::WitService::set_TelemetryEventsProvider)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Meta.WitAi", "ITelemetryEventsProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitService*), "set_TelemetryEventsProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitService::get_ConfigurationProvider
// Il2CppName: get_ConfigurationProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::IWitRuntimeConfigProvider* (Meta::WitAi::WitService::*)()>(&Meta::WitAi::WitService::get_ConfigurationProvider)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitService*), "get_ConfigurationProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitService::set_ConfigurationProvider
// Il2CppName: set_ConfigurationProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitService::*)(::Meta::WitAi::IWitRuntimeConfigProvider*)>(&Meta::WitAi::WitService::set_ConfigurationProvider)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Meta.WitAi", "IWitRuntimeConfigProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitService*), "set_ConfigurationProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitService::get_RuntimeConfiguration
// Il2CppName: get_RuntimeConfiguration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Configuration::WitRuntimeConfiguration* (Meta::WitAi::WitService::*)()>(&Meta::WitAi::WitService::get_RuntimeConfiguration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitService*), "get_RuntimeConfiguration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitService::get_VoiceEvents
// Il2CppName: get_VoiceEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Events::VoiceEvents* (Meta::WitAi::WitService::*)()>(&Meta::WitAi::WitService::get_VoiceEvents)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitService*), "get_VoiceEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitService::get_TelemetryEvents
// Il2CppName: get_TelemetryEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Events::TelemetryEvents* (Meta::WitAi::WitService::*)()>(&Meta::WitAi::WitService::get_TelemetryEvents)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitService*), "get_TelemetryEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitService::get_TranscriptionProvider
// Il2CppName: get_TranscriptionProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Interfaces::ITranscriptionProvider* (Meta::WitAi::WitService::*)()>(&Meta::WitAi::WitService::get_TranscriptionProvider)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitService*), "get_TranscriptionProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitService::set_TranscriptionProvider
// Il2CppName: set_TranscriptionProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitService::*)(::Meta::WitAi::Interfaces::ITranscriptionProvider*)>(&Meta::WitAi::WitService::set_TranscriptionProvider)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Interfaces", "ITranscriptionProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitService*), "set_TranscriptionProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitService::get_WitRequestProvider
// Il2CppName: get_WitRequestProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Interfaces::IWitRequestProvider* (Meta::WitAi::WitService::*)()>(&Meta::WitAi::WitService::get_WitRequestProvider)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitService*), "get_WitRequestProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitService::set_WitRequestProvider
// Il2CppName: set_WitRequestProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitService::*)(::Meta::WitAi::Interfaces::IWitRequestProvider*)>(&Meta::WitAi::WitService::set_WitRequestProvider)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Interfaces", "IWitRequestProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitService*), "set_WitRequestProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitService::get_MicActive
// Il2CppName: get_MicActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::WitService::*)()>(&Meta::WitAi::WitService::get_MicActive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitService*), "get_MicActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitService::get_ShouldSendMicData
// Il2CppName: get_ShouldSendMicData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::WitService::*)()>(&Meta::WitAi::WitService::get_ShouldSendMicData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitService*), "get_ShouldSendMicData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitService::IsConfigurationValid
// Il2CppName: IsConfigurationValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::WitService::*)()>(&Meta::WitAi::WitService::IsConfigurationValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitService*), "IsConfigurationValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitService::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitService::*)()>(&Meta::WitAi::WitService::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitService*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitService::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitService::*)()>(&Meta::WitAi::WitService::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitService*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitService::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitService::*)()>(&Meta::WitAi::WitService::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitService*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitService::OnSceneLoaded
// Il2CppName: OnSceneLoaded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitService::*)(::UnityEngine::SceneManagement::Scene, ::UnityEngine::SceneManagement::LoadSceneMode)>(&Meta::WitAi::WitService::OnSceneLoaded)> {
  static const MethodInfo* get() {
    static auto* scene = &::il2cpp_utils::GetClassFromName("UnityEngine.SceneManagement", "Scene")->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("UnityEngine.SceneManagement", "LoadSceneMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitService*), "OnSceneLoaded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{scene, mode});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitService::SetMicDelegates
// Il2CppName: SetMicDelegates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitService::*)(bool)>(&Meta::WitAi::WitService::SetMicDelegates)> {
  static const MethodInfo* get() {
    static auto* add = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitService*), "SetMicDelegates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{add});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitService::Activate
// Il2CppName: Activate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitService::*)()>(&Meta::WitAi::WitService::Activate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitService*), "Activate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitService::Activate
// Il2CppName: Activate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitService::*)(::Meta::WitAi::Configuration::WitRequestOptions*)>(&Meta::WitAi::WitService::Activate)> {
  static const MethodInfo* get() {
    static auto* requestOptions = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Configuration", "WitRequestOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitService*), "Activate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{requestOptions});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitService::Activate
// Il2CppName: Activate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Requests::VoiceServiceRequest* (Meta::WitAi::WitService::*)(::Meta::WitAi::Configuration::WitRequestOptions*, ::Meta::WitAi::Requests::VoiceServiceRequestEvents*)>(&Meta::WitAi::WitService::Activate)> {
  static const MethodInfo* get() {
    static auto* requestOptions = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Configuration", "WitRequestOptions")->byval_arg;
    static auto* requestEvents = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Requests", "VoiceServiceRequestEvents")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitService*), "Activate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{requestOptions, requestEvents});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitService::ActivateImmediately
// Il2CppName: ActivateImmediately
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitService::*)()>(&Meta::WitAi::WitService::ActivateImmediately)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitService*), "ActivateImmediately", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitService::ActivateImmediately
// Il2CppName: ActivateImmediately
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitService::*)(::Meta::WitAi::Configuration::WitRequestOptions*)>(&Meta::WitAi::WitService::ActivateImmediately)> {
  static const MethodInfo* get() {
    static auto* requestOptions = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Configuration", "WitRequestOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitService*), "ActivateImmediately", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{requestOptions});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitService::ActivateImmediately
// Il2CppName: ActivateImmediately
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Requests::VoiceServiceRequest* (Meta::WitAi::WitService::*)(::Meta::WitAi::Configuration::WitRequestOptions*, ::Meta::WitAi::Requests::VoiceServiceRequestEvents*)>(&Meta::WitAi::WitService::ActivateImmediately)> {
  static const MethodInfo* get() {
    static auto* requestOptions = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Configuration", "WitRequestOptions")->byval_arg;
    static auto* requestEvents = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Requests", "VoiceServiceRequestEvents")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitService*), "ActivateImmediately", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{requestOptions, requestEvents});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitService::SendRecordingRequest
// Il2CppName: SendRecordingRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitService::*)()>(&Meta::WitAi::WitService::SendRecordingRequest)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitService*), "SendRecordingRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitService::SetupRequest
// Il2CppName: SetupRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitService::*)(::Meta::WitAi::WitRequest*)>(&Meta::WitAi::WitService::SetupRequest)> {
  static const MethodInfo* get() {
    static auto* newRequest = &::il2cpp_utils::GetClassFromName("Meta.WitAi", "WitRequest")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitService*), "SetupRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newRequest});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitService::ExecuteRequest
// Il2CppName: ExecuteRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitService::*)(::Meta::WitAi::WitRequest*)>(&Meta::WitAi::WitService::ExecuteRequest)> {
  static const MethodInfo* get() {
    static auto* newRequest = &::il2cpp_utils::GetClassFromName("Meta.WitAi", "WitRequest")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitService*), "ExecuteRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newRequest});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitService::Activate
// Il2CppName: Activate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitService::*)(::StringW)>(&Meta::WitAi::WitService::Activate)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitService*), "Activate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitService::Activate
// Il2CppName: Activate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitService::*)(::StringW, ::Meta::WitAi::Configuration::WitRequestOptions*)>(&Meta::WitAi::WitService::Activate)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* requestOptions = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Configuration", "WitRequestOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitService*), "Activate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text, requestOptions});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitService::Activate
// Il2CppName: Activate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Requests::VoiceServiceRequest* (Meta::WitAi::WitService::*)(::StringW, ::Meta::WitAi::Configuration::WitRequestOptions*, ::Meta::WitAi::Requests::VoiceServiceRequestEvents*)>(&Meta::WitAi::WitService::Activate)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* requestOptions = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Configuration", "WitRequestOptions")->byval_arg;
    static auto* requestEvents = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Requests", "VoiceServiceRequestEvents")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitService*), "Activate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text, requestOptions, requestEvents});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitService::StopRecording
// Il2CppName: StopRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitService::*)()>(&Meta::WitAi::WitService::StopRecording)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitService*), "StopRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitService::OnWitReadyForData
// Il2CppName: OnWitReadyForData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitService::*)()>(&Meta::WitAi::WitService::OnWitReadyForData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitService*), "OnWitReadyForData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitService::StartRecording
// Il2CppName: StartRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitService::*)()>(&Meta::WitAi::WitService::StartRecording)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitService*), "StartRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitService::OnMicStartListening
// Il2CppName: OnMicStartListening
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitService::*)()>(&Meta::WitAi::WitService::OnMicStartListening)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitService*), "OnMicStartListening", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitService::OnMicStoppedListening
// Il2CppName: OnMicStoppedListening
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitService::*)()>(&Meta::WitAi::WitService::OnMicStoppedListening)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitService*), "OnMicStoppedListening", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitService::OnByteDataReady
// Il2CppName: OnByteDataReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitService::*)(::ArrayW<uint8_t>, int, int)>(&Meta::WitAi::WitService::OnByteDataReady)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitService*), "OnByteDataReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, length});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitService::OnMicSampleReady
// Il2CppName: OnMicSampleReady
// Cannot write MetadataGetter for a method that has a nested type with a declaring generic type anywhere within it!
// Talk to sc2ad if this is something you want
// Writing MetadataGetter for method: Meta::WitAi::WitService::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitService::*)()>(&Meta::WitAi::WitService::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitService*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitService::OnMicLevelChanged
// Il2CppName: OnMicLevelChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitService::*)(float)>(&Meta::WitAi::WitService::OnMicLevelChanged)> {
  static const MethodInfo* get() {
    static auto* level = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitService*), "OnMicLevelChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{level});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitService::OnTranscriptionMicLevelChanged
// Il2CppName: OnTranscriptionMicLevelChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitService::*)(float)>(&Meta::WitAi::WitService::OnTranscriptionMicLevelChanged)> {
  static const MethodInfo* get() {
    static auto* level = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitService*), "OnTranscriptionMicLevelChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{level});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitService::FinalizeAudioDurationTracker
// Il2CppName: FinalizeAudioDurationTracker
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitService::*)()>(&Meta::WitAi::WitService::FinalizeAudioDurationTracker)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitService*), "FinalizeAudioDurationTracker", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitService::Deactivate
// Il2CppName: Deactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitService::*)()>(&Meta::WitAi::WitService::Deactivate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitService*), "Deactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitService::DeactivateAndAbortRequest
// Il2CppName: DeactivateAndAbortRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitService::*)(::Meta::WitAi::Requests::VoiceServiceRequest*)>(&Meta::WitAi::WitService::DeactivateAndAbortRequest)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Requests", "VoiceServiceRequest")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitService*), "DeactivateAndAbortRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitService::DeactivateAndAbortRequest
// Il2CppName: DeactivateAndAbortRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitService::*)()>(&Meta::WitAi::WitService::DeactivateAndAbortRequest)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitService*), "DeactivateAndAbortRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitService::DeactivateDueToTimeLimit
// Il2CppName: DeactivateDueToTimeLimit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (Meta::WitAi::WitService::*)()>(&Meta::WitAi::WitService::DeactivateDueToTimeLimit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitService*), "DeactivateDueToTimeLimit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitService::DeactivateRequest
// Il2CppName: DeactivateRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitService::*)(::UnityEngine::Events::UnityEvent*, bool)>(&Meta::WitAi::WitService::DeactivateRequest)> {
  static const MethodInfo* get() {
    static auto* onComplete = &::il2cpp_utils::GetClassFromName("UnityEngine.Events", "UnityEvent")->byval_arg;
    static auto* abort = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitService*), "DeactivateRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{onComplete, abort});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitService::DeactivateWitRequest
// Il2CppName: DeactivateWitRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitService::*)(::Meta::WitAi::Requests::VoiceServiceRequest*, bool)>(&Meta::WitAi::WitService::DeactivateWitRequest)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Requests", "VoiceServiceRequest")->byval_arg;
    static auto* abort = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitService*), "DeactivateWitRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, abort});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitService::OnPartialTranscription
// Il2CppName: OnPartialTranscription
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitService::*)(::StringW)>(&Meta::WitAi::WitService::OnPartialTranscription)> {
  static const MethodInfo* get() {
    static auto* transcription = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitService*), "OnPartialTranscription", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transcription});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitService::OnFullTranscription
// Il2CppName: OnFullTranscription
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitService::*)(::StringW)>(&Meta::WitAi::WitService::OnFullTranscription)> {
  static const MethodInfo* get() {
    static auto* transcription = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitService*), "OnFullTranscription", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transcription});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitService::HandlePartialResult
// Il2CppName: HandlePartialResult
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitService::*)(::Meta::WitAi::Json::WitResponseNode*)>(&Meta::WitAi::WitService::HandlePartialResult)> {
  static const MethodInfo* get() {
    static auto* response = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Json", "WitResponseNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitService*), "HandlePartialResult", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{response});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitService::HandleResult
// Il2CppName: HandleResult
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitService::*)(::Meta::WitAi::Requests::VoiceServiceRequest*)>(&Meta::WitAi::WitService::HandleResult)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Requests", "VoiceServiceRequest")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitService*), "HandleResult", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitService::HandleComplete
// Il2CppName: HandleComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitService::*)(::Meta::WitAi::Requests::VoiceServiceRequest*)>(&Meta::WitAi::WitService::HandleComplete)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Requests", "VoiceServiceRequest")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitService*), "HandleComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitService::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Meta::WitAi::WitService::$SetupRequest$b__67_0
// Il2CppName: <SetupRequest>b__67_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitService::*)(::Meta::WitAi::WitRequest*)>(&Meta::WitAi::WitService::$SetupRequest$b__67_0)> {
  static const MethodInfo* get() {
    static auto* r = &::il2cpp_utils::GetClassFromName("Meta.WitAi", "WitRequest")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitService*), "<SetupRequest>b__67_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{r});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitService::$OnMicSampleReady$b__78_0
// Il2CppName: <OnMicSampleReady>b__78_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitService::*)(::ArrayW<uint8_t>, int, int)>(&Meta::WitAi::WitService::$OnMicSampleReady$b__78_0)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitService*), "<OnMicSampleReady>b__78_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, length});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitService::$OnMicSampleReady$b__78_1
// Il2CppName: <OnMicSampleReady>b__78_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitService::*)(::ArrayW<uint8_t>, int, int)>(&Meta::WitAi::WitService::$OnMicSampleReady$b__78_1)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitService*), "<OnMicSampleReady>b__78_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, length});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::WitService::$OnMicSampleReady$b__78_2
// Il2CppName: <OnMicSampleReady>b__78_2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::WitService::*)(::ArrayW<uint8_t>, int, int)>(&Meta::WitAi::WitService::$OnMicSampleReady$b__78_2)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::WitService*), "<OnMicSampleReady>b__78_2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, length});
  }
};
