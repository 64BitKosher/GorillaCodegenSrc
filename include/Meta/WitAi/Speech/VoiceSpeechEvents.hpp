// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Meta::WitAi::Speech
namespace Meta::WitAi::Speech {
  // Forward declaring type: VoiceTextEvent
  class VoiceTextEvent;
  // Forward declaring type: VoiceAudioEvent
  class VoiceAudioEvent;
}
// Completed forward declares
// Type namespace: Meta.WitAi.Speech
namespace Meta::WitAi::Speech {
  // Forward declaring type: VoiceSpeechEvents
  class VoiceSpeechEvents;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::WitAi::Speech::VoiceSpeechEvents);
DEFINE_IL2CPP_ARG_TYPE(::Meta::WitAi::Speech::VoiceSpeechEvents*, "Meta.WitAi.Speech", "VoiceSpeechEvents");
// Type namespace: Meta.WitAi.Speech
namespace Meta::WitAi::Speech {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: Meta.WitAi.Speech.VoiceSpeechEvents
  // [TokenAttribute] Offset: FFFFFFFF
  class VoiceSpeechEvents : public ::Il2CppObject {
    public:
    public:
    // public Meta.WitAi.Speech.VoiceTextEvent OnTextPlaybackStart
    // Size: 0x8
    // Offset: 0x10
    ::Meta::WitAi::Speech::VoiceTextEvent* OnTextPlaybackStart;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::Speech::VoiceTextEvent*) == 0x8);
    // public Meta.WitAi.Speech.VoiceTextEvent OnTextPlaybackCancelled
    // Size: 0x8
    // Offset: 0x18
    ::Meta::WitAi::Speech::VoiceTextEvent* OnTextPlaybackCancelled;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::Speech::VoiceTextEvent*) == 0x8);
    // public Meta.WitAi.Speech.VoiceTextEvent OnTextPlaybackFinished
    // Size: 0x8
    // Offset: 0x20
    ::Meta::WitAi::Speech::VoiceTextEvent* OnTextPlaybackFinished;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::Speech::VoiceTextEvent*) == 0x8);
    // public Meta.WitAi.Speech.VoiceAudioEvent OnAudioClipPlaybackReady
    // Size: 0x8
    // Offset: 0x28
    ::Meta::WitAi::Speech::VoiceAudioEvent* OnAudioClipPlaybackReady;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::Speech::VoiceAudioEvent*) == 0x8);
    // public Meta.WitAi.Speech.VoiceAudioEvent OnAudioClipPlaybackStart
    // Size: 0x8
    // Offset: 0x30
    ::Meta::WitAi::Speech::VoiceAudioEvent* OnAudioClipPlaybackStart;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::Speech::VoiceAudioEvent*) == 0x8);
    // public Meta.WitAi.Speech.VoiceAudioEvent OnAudioClipPlaybackCancelled
    // Size: 0x8
    // Offset: 0x38
    ::Meta::WitAi::Speech::VoiceAudioEvent* OnAudioClipPlaybackCancelled;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::Speech::VoiceAudioEvent*) == 0x8);
    // public Meta.WitAi.Speech.VoiceAudioEvent OnAudioClipPlaybackFinished
    // Size: 0x8
    // Offset: 0x40
    ::Meta::WitAi::Speech::VoiceAudioEvent* OnAudioClipPlaybackFinished;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::Speech::VoiceAudioEvent*) == 0x8);
    public:
    // Get instance field reference: public Meta.WitAi.Speech.VoiceTextEvent OnTextPlaybackStart
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::Speech::VoiceTextEvent*& dyn_OnTextPlaybackStart();
    // Get instance field reference: public Meta.WitAi.Speech.VoiceTextEvent OnTextPlaybackCancelled
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::Speech::VoiceTextEvent*& dyn_OnTextPlaybackCancelled();
    // Get instance field reference: public Meta.WitAi.Speech.VoiceTextEvent OnTextPlaybackFinished
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::Speech::VoiceTextEvent*& dyn_OnTextPlaybackFinished();
    // Get instance field reference: public Meta.WitAi.Speech.VoiceAudioEvent OnAudioClipPlaybackReady
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::Speech::VoiceAudioEvent*& dyn_OnAudioClipPlaybackReady();
    // Get instance field reference: public Meta.WitAi.Speech.VoiceAudioEvent OnAudioClipPlaybackStart
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::Speech::VoiceAudioEvent*& dyn_OnAudioClipPlaybackStart();
    // Get instance field reference: public Meta.WitAi.Speech.VoiceAudioEvent OnAudioClipPlaybackCancelled
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::Speech::VoiceAudioEvent*& dyn_OnAudioClipPlaybackCancelled();
    // Get instance field reference: public Meta.WitAi.Speech.VoiceAudioEvent OnAudioClipPlaybackFinished
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::Speech::VoiceAudioEvent*& dyn_OnAudioClipPlaybackFinished();
    // public System.Void .ctor()
    // Offset: 0x4440394
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VoiceSpeechEvents* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Speech::VoiceSpeechEvents::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VoiceSpeechEvents*, creationType>()));
    }
  }; // Meta.WitAi.Speech.VoiceSpeechEvents
  #pragma pack(pop)
  static check_size<sizeof(VoiceSpeechEvents), 64 + sizeof(::Meta::WitAi::Speech::VoiceAudioEvent*)> __Meta_WitAi_Speech_VoiceSpeechEventsSizeCheck;
  static_assert(sizeof(VoiceSpeechEvents) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::WitAi::Speech::VoiceSpeechEvents::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
