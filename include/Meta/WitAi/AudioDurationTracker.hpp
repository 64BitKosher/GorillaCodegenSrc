// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Meta::WitAi::Data
namespace Meta::WitAi::Data {
  // Forward declaring type: AudioEncoding
  class AudioEncoding;
}
// Completed forward declares
// Type namespace: Meta.WitAi
namespace Meta::WitAi {
  // Forward declaring type: AudioDurationTracker
  class AudioDurationTracker;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::WitAi::AudioDurationTracker);
DEFINE_IL2CPP_ARG_TYPE(::Meta::WitAi::AudioDurationTracker*, "Meta.WitAi", "AudioDurationTracker");
// Type namespace: Meta.WitAi
namespace Meta::WitAi {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: Meta.WitAi.AudioDurationTracker
  // [TokenAttribute] Offset: FFFFFFFF
  class AudioDurationTracker : public ::Il2CppObject {
    public:
    public:
    // private readonly System.String _requestId
    // Size: 0x8
    // Offset: 0x10
    ::StringW requestId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Double _bytesCaptured
    // Size: 0x8
    // Offset: 0x18
    double bytesCaptured;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private readonly System.Int32 _bytesPerSample
    // Size: 0x4
    // Offset: 0x20
    int bytesPerSample;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: bytesPerSample and: audioEncoding
    char __padding2[0x4] = {};
    // private readonly Meta.WitAi.Data.AudioEncoding _audioEncoding
    // Size: 0x8
    // Offset: 0x28
    ::Meta::WitAi::Data::AudioEncoding* audioEncoding;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::Data::AudioEncoding*) == 0x8);
    // private System.Int64 _finalizeTimeStamp
    // Size: 0x8
    // Offset: 0x30
    int64_t finalizeTimeStamp;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Double _audioDurationMs
    // Size: 0x8
    // Offset: 0x38
    double audioDurationMs;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    public:
    // Get instance field reference: private readonly System.String _requestId
    [[deprecated("Use field access instead!")]] ::StringW& dyn__requestId();
    // Get instance field reference: private System.Double _bytesCaptured
    [[deprecated("Use field access instead!")]] double& dyn__bytesCaptured();
    // Get instance field reference: private readonly System.Int32 _bytesPerSample
    [[deprecated("Use field access instead!")]] int& dyn__bytesPerSample();
    // Get instance field reference: private readonly Meta.WitAi.Data.AudioEncoding _audioEncoding
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::Data::AudioEncoding*& dyn__audioEncoding();
    // Get instance field reference: private System.Int64 _finalizeTimeStamp
    [[deprecated("Use field access instead!")]] int64_t& dyn__finalizeTimeStamp();
    // Get instance field reference: private System.Double _audioDurationMs
    [[deprecated("Use field access instead!")]] double& dyn__audioDurationMs();
    // public System.Void .ctor(System.String requestId, Meta.WitAi.Data.AudioEncoding audioEncoding)
    // Offset: 0x44256B0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AudioDurationTracker* New_ctor(::StringW requestId, ::Meta::WitAi::Data::AudioEncoding* audioEncoding) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::AudioDurationTracker::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AudioDurationTracker*, creationType>(requestId, audioEncoding)));
    }
    // public System.Void AddBytes(System.Int64 bytes)
    // Offset: 0x4425720
    void AddBytes(int64_t bytes);
    // public System.Void FinalizeAudio()
    // Offset: 0x4425734
    void FinalizeAudio();
    // public System.Int64 GetFinalizeTimeStamp()
    // Offset: 0x4425800
    int64_t GetFinalizeTimeStamp();
    // public System.Double GetAudioDuration()
    // Offset: 0x4425808
    double GetAudioDuration();
    // public System.String GetRequestId()
    // Offset: 0x4425810
    ::StringW GetRequestId();
  }; // Meta.WitAi.AudioDurationTracker
  #pragma pack(pop)
  static check_size<sizeof(AudioDurationTracker), 56 + sizeof(double)> __Meta_WitAi_AudioDurationTrackerSizeCheck;
  static_assert(sizeof(AudioDurationTracker) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::WitAi::AudioDurationTracker::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Meta::WitAi::AudioDurationTracker::AddBytes
// Il2CppName: AddBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::AudioDurationTracker::*)(int64_t)>(&Meta::WitAi::AudioDurationTracker::AddBytes)> {
  static const MethodInfo* get() {
    static auto* bytes = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::AudioDurationTracker*), "AddBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bytes});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::AudioDurationTracker::FinalizeAudio
// Il2CppName: FinalizeAudio
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::AudioDurationTracker::*)()>(&Meta::WitAi::AudioDurationTracker::FinalizeAudio)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::AudioDurationTracker*), "FinalizeAudio", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::AudioDurationTracker::GetFinalizeTimeStamp
// Il2CppName: GetFinalizeTimeStamp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (Meta::WitAi::AudioDurationTracker::*)()>(&Meta::WitAi::AudioDurationTracker::GetFinalizeTimeStamp)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::AudioDurationTracker*), "GetFinalizeTimeStamp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::AudioDurationTracker::GetAudioDuration
// Il2CppName: GetAudioDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (Meta::WitAi::AudioDurationTracker::*)()>(&Meta::WitAi::AudioDurationTracker::GetAudioDuration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::AudioDurationTracker*), "GetAudioDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::AudioDurationTracker::GetRequestId
// Il2CppName: GetRequestId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Meta::WitAi::AudioDurationTracker::*)()>(&Meta::WitAi::AudioDurationTracker::GetRequestId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::AudioDurationTracker*), "GetRequestId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
