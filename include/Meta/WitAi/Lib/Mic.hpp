// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Meta.WitAi.Interfaces.IAudioInputSource
#include "Meta/WitAi/Interfaces/IAudioInputSource.hpp"
// Including type: System.Boolean
#include "System/Boolean.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Meta::WitAi::Lib
namespace Meta::WitAi::Lib {
}
// Forward declaring namespace: Meta::WitAi::Data
namespace Meta::WitAi::Data {
  // Forward declaring type: AudioEncoding
  class AudioEncoding;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioClip
  class AudioClip;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Action`3<T1, T2, T3>
  template<typename T1, typename T2, typename T3>
  class Action_3;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: Meta.WitAi.Lib
namespace Meta::WitAi::Lib {
  // Forward declaring type: Mic
  class Mic;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::WitAi::Lib::Mic);
DEFINE_IL2CPP_ARG_TYPE(::Meta::WitAi::Lib::Mic*, "Meta.WitAi.Lib", "Mic");
// Type namespace: Meta.WitAi.Lib
namespace Meta::WitAi::Lib {
  // Size: 0x80
  #pragma pack(push, 1)
  // Autogenerated type: Meta.WitAi.Lib.Mic
  // [TokenAttribute] Offset: FFFFFFFF
  class Mic : public ::UnityEngine::MonoBehaviour/*, public ::Meta::WitAi::Interfaces::IAudioInputSource*/ {
    public:
    // Nested type: ::Meta::WitAi::Lib::Mic::$ReadRawAudio$d__70
    class $ReadRawAudio$d__70;
    public:
    // private System.Boolean <IsRecording>k__BackingField
    // Size: 0x1
    // Offset: 0x20
    bool IsRecording;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: IsRecording and: AudioEncoding
    char __padding0[0x7] = {};
    // private readonly Meta.WitAi.Data.AudioEncoding <AudioEncoding>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    ::Meta::WitAi::Data::AudioEncoding* AudioEncoding;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::Data::AudioEncoding*) == 0x8);
    // private System.Single[] <Sample>k__BackingField
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<float> Sample;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // private System.Int32 <SampleDurationMS>k__BackingField
    // Size: 0x4
    // Offset: 0x38
    int SampleDurationMS;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: SampleDurationMS and: AudioClip
    char __padding3[0x4] = {};
    // private UnityEngine.AudioClip <AudioClip>k__BackingField
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::AudioClip* AudioClip;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // private System.Int32 _audioClipSampleRate
    // Size: 0x4
    // Offset: 0x48
    int audioClipSampleRate;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: audioClipSampleRate and: devices
    char __padding5[0x4] = {};
    // private System.Collections.Generic.List`1<System.String> _devices
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::Generic::List_1<::StringW>* devices;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::StringW>*) == 0x8);
    // private System.Int32 <CurrentDeviceIndex>k__BackingField
    // Size: 0x4
    // Offset: 0x58
    int CurrentDeviceIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_SampleCount
    // Size: 0x4
    // Offset: 0x5C
    int m_SampleCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Action OnStartRecording
    // Size: 0x8
    // Offset: 0x60
    ::System::Action* OnStartRecording;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private System.Action OnStartRecordingFailed
    // Size: 0x8
    // Offset: 0x68
    ::System::Action* OnStartRecordingFailed;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private System.Action`3<System.Int32,System.Single[],System.Single> OnSampleReady
    // Size: 0x8
    // Offset: 0x70
    ::System::Action_3<int, ::ArrayW<float>, float>* OnSampleReady;
    // Field size check
    static_assert(sizeof(::System::Action_3<int, ::ArrayW<float>, float>*) == 0x8);
    // private System.Action OnStopRecording
    // Size: 0x8
    // Offset: 0x78
    ::System::Action* OnStopRecording;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Meta::WitAi::Interfaces::IAudioInputSource
    operator ::Meta::WitAi::Interfaces::IAudioInputSource() noexcept {
      return *reinterpret_cast<::Meta::WitAi::Interfaces::IAudioInputSource*>(this);
    }
    // static field const value: static private System.Boolean MIC_CLIP_LOOP
    static constexpr const bool MIC_CLIP_LOOP = true;
    // Get static field: static private System.Boolean MIC_CLIP_LOOP
    static bool _get_MIC_CLIP_LOOP();
    // Set static field: static private System.Boolean MIC_CLIP_LOOP
    static void _set_MIC_CLIP_LOOP(bool value);
    // static field const value: static private System.Int32 MIC_CLIP_CHANNELS
    static constexpr const int MIC_CLIP_CHANNELS = 1;
    // Get static field: static private System.Int32 MIC_CLIP_CHANNELS
    static int _get_MIC_CLIP_CHANNELS();
    // Set static field: static private System.Int32 MIC_CLIP_CHANNELS
    static void _set_MIC_CLIP_CHANNELS(int value);
    // static field const value: static private System.Int32 MS_TO_SECONDS
    static constexpr const int MS_TO_SECONDS = 1000;
    // Get static field: static private System.Int32 MS_TO_SECONDS
    static int _get_MS_TO_SECONDS();
    // Set static field: static private System.Int32 MS_TO_SECONDS
    static void _set_MS_TO_SECONDS(int value);
    // Get static field: static private Meta.WitAi.Lib.Mic m_Instance
    static ::Meta::WitAi::Lib::Mic* _get_m_Instance();
    // Set static field: static private Meta.WitAi.Lib.Mic m_Instance
    static void _set_m_Instance(::Meta::WitAi::Lib::Mic* value);
    // Get instance field reference: private System.Boolean <IsRecording>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$IsRecording$k__BackingField();
    // Get instance field reference: private readonly Meta.WitAi.Data.AudioEncoding <AudioEncoding>k__BackingField
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::Data::AudioEncoding*& dyn_$AudioEncoding$k__BackingField();
    // Get instance field reference: private System.Single[] <Sample>k__BackingField
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_$Sample$k__BackingField();
    // Get instance field reference: private System.Int32 <SampleDurationMS>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$SampleDurationMS$k__BackingField();
    // Get instance field reference: private UnityEngine.AudioClip <AudioClip>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_$AudioClip$k__BackingField();
    // Get instance field reference: private System.Int32 _audioClipSampleRate
    [[deprecated("Use field access instead!")]] int& dyn__audioClipSampleRate();
    // Get instance field reference: private System.Collections.Generic.List`1<System.String> _devices
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& dyn__devices();
    // Get instance field reference: private System.Int32 <CurrentDeviceIndex>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$CurrentDeviceIndex$k__BackingField();
    // Get instance field reference: private System.Int32 m_SampleCount
    [[deprecated("Use field access instead!")]] int& dyn_m_SampleCount();
    // Get instance field reference: private System.Action OnStartRecording
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_OnStartRecording();
    // Get instance field reference: private System.Action OnStartRecordingFailed
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_OnStartRecordingFailed();
    // Get instance field reference: private System.Action`3<System.Int32,System.Single[],System.Single> OnSampleReady
    [[deprecated("Use field access instead!")]] ::System::Action_3<int, ::ArrayW<float>, float>*& dyn_OnSampleReady();
    // Get instance field reference: private System.Action OnStopRecording
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_OnStopRecording();
    // public System.Boolean get_IsRecording()
    // Offset: 0x4418058
    bool get_IsRecording();
    // private System.Void set_IsRecording(System.Boolean value)
    // Offset: 0x4418060
    void set_IsRecording(bool value);
    // public Meta.WitAi.Data.AudioEncoding get_AudioEncoding()
    // Offset: 0x441806C
    ::Meta::WitAi::Data::AudioEncoding* get_AudioEncoding();
    // public System.Single[] get_Sample()
    // Offset: 0x4418074
    ::ArrayW<float> get_Sample();
    // private System.Void set_Sample(System.Single[] value)
    // Offset: 0x441807C
    void set_Sample(::ArrayW<float> value);
    // public System.Int32 get_SampleDurationMS()
    // Offset: 0x4418084
    int get_SampleDurationMS();
    // private System.Void set_SampleDurationMS(System.Int32 value)
    // Offset: 0x441808C
    void set_SampleDurationMS(int value);
    // public System.Boolean get_IsInputAvailable()
    // Offset: 0x4418094
    bool get_IsInputAvailable();
    // public System.Void CheckForInput()
    // Offset: 0x4418278
    void CheckForInput();
    // public System.Int32 get_SampleLength()
    // Offset: 0x441827C
    int get_SampleLength();
    // public UnityEngine.AudioClip get_AudioClip()
    // Offset: 0x44182B8
    ::UnityEngine::AudioClip* get_AudioClip();
    // private System.Void set_AudioClip(UnityEngine.AudioClip value)
    // Offset: 0x44182C0
    void set_AudioClip(::UnityEngine::AudioClip* value);
    // public System.Int32 get_AudioClipSampleRate()
    // Offset: 0x44182C8
    int get_AudioClipSampleRate();
    // public System.Void set_AudioClipSampleRate(System.Int32 value)
    // Offset: 0x44182D0
    void set_AudioClipSampleRate(int value);
    // public System.Collections.Generic.List`1<System.String> get_Devices()
    // Offset: 0x44183C0
    ::System::Collections::Generic::List_1<::StringW>* get_Devices();
    // public System.Int32 get_CurrentDeviceIndex()
    // Offset: 0x4418570
    int get_CurrentDeviceIndex();
    // private System.Void set_CurrentDeviceIndex(System.Int32 value)
    // Offset: 0x4418578
    void set_CurrentDeviceIndex(int value);
    // public System.String get_CurrentDeviceName()
    // Offset: 0x4418580
    ::StringW get_CurrentDeviceName();
    // private System.Int32 get_MicPosition()
    // Offset: 0x4418630
    int get_MicPosition();
    // public System.Void add_OnStartRecording(System.Action value)
    // Offset: 0x4418644
    void add_OnStartRecording(::System::Action* value);
    // public System.Void remove_OnStartRecording(System.Action value)
    // Offset: 0x44186E0
    void remove_OnStartRecording(::System::Action* value);
    // public System.Void add_OnStartRecordingFailed(System.Action value)
    // Offset: 0x441877C
    void add_OnStartRecordingFailed(::System::Action* value);
    // public System.Void remove_OnStartRecordingFailed(System.Action value)
    // Offset: 0x4418818
    void remove_OnStartRecordingFailed(::System::Action* value);
    // public System.Void add_OnSampleReady(System.Action`3<System.Int32,System.Single[],System.Single> value)
    // Offset: 0x44188B4
    void add_OnSampleReady(::System::Action_3<int, ::ArrayW<float>, float>* value);
    // public System.Void remove_OnSampleReady(System.Action`3<System.Int32,System.Single[],System.Single> value)
    // Offset: 0x4418964
    void remove_OnSampleReady(::System::Action_3<int, ::ArrayW<float>, float>* value);
    // public System.Void add_OnStopRecording(System.Action value)
    // Offset: 0x4418A14
    void add_OnStopRecording(::System::Action* value);
    // public System.Void remove_OnStopRecording(System.Action value)
    // Offset: 0x4418AB0
    void remove_OnStopRecording(::System::Action* value);
    // static public Meta.WitAi.Lib.Mic get_Instance()
    // Offset: 0x4418B4C
    static ::Meta::WitAi::Lib::Mic* get_Instance();
    // private System.Void OnEnable()
    // Offset: 0x4418D40
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0x4418D44
    void OnDisable();
    // private System.Void OnApplicationFocus(System.Boolean hasFocus)
    // Offset: 0x4418E44
    void OnApplicationFocus(bool hasFocus);
    // private System.Void OnApplicationPause(System.Boolean pauseStatus)
    // Offset: 0x4418FB0
    void OnApplicationPause(bool pauseStatus);
    // private System.Void OnDestroy()
    // Offset: 0x4419044
    void OnDestroy();
    // public System.Void SafeStartMicrophone()
    // Offset: 0x441811C
    void SafeStartMicrophone();
    // public System.Void RefreshMicDevices()
    // Offset: 0x44183E4
    void RefreshMicDevices();
    // public System.Void ChangeDevice(System.Int32 index)
    // Offset: 0x441907C
    void ChangeDevice(int index);
    // private System.Void StartMicrophone()
    // Offset: 0x44190AC
    void StartMicrophone();
    // private System.Void StopMicrophone()
    // Offset: 0x4418D48
    void StopMicrophone();
    // public System.Void StartRecording(System.Int32 sampleLen)
    // Offset: 0x4419180
    void StartRecording(int sampleLen);
    // public System.Void StopRecording()
    // Offset: 0x44192FC
    void StopRecording();
    // private System.Collections.IEnumerator ReadRawAudio()
    // Offset: 0x4418F44
    ::System::Collections::IEnumerator* ReadRawAudio();
    // private System.Boolean MicrophoneIsRecording(System.String device)
    // Offset: 0x4419048
    bool MicrophoneIsRecording(::StringW device);
    // private System.String[] MicrophoneGetDevices()
    // Offset: 0x44190A4
    ::ArrayW<::StringW> MicrophoneGetDevices();
    // private System.Int32 MicrophoneGetPosition(System.String device)
    // Offset: 0x44193A4
    int MicrophoneGetPosition(::StringW device);
    // public System.Void .ctor()
    // Offset: 0x44193D8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Mic* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Lib::Mic::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Mic*, creationType>()));
    }
  }; // Meta.WitAi.Lib.Mic
  #pragma pack(pop)
  static check_size<sizeof(Mic), 120 + sizeof(::System::Action*)> __Meta_WitAi_Lib_MicSizeCheck;
  static_assert(sizeof(Mic) == 0x80);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::WitAi::Lib::Mic::get_IsRecording
// Il2CppName: get_IsRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::Lib::Mic::*)()>(&Meta::WitAi::Lib::Mic::get_IsRecording)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Lib::Mic*), "get_IsRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Lib::Mic::set_IsRecording
// Il2CppName: set_IsRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Lib::Mic::*)(bool)>(&Meta::WitAi::Lib::Mic::set_IsRecording)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Lib::Mic*), "set_IsRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Lib::Mic::get_AudioEncoding
// Il2CppName: get_AudioEncoding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Data::AudioEncoding* (Meta::WitAi::Lib::Mic::*)()>(&Meta::WitAi::Lib::Mic::get_AudioEncoding)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Lib::Mic*), "get_AudioEncoding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Lib::Mic::get_Sample
// Il2CppName: get_Sample
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<float> (Meta::WitAi::Lib::Mic::*)()>(&Meta::WitAi::Lib::Mic::get_Sample)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Lib::Mic*), "get_Sample", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Lib::Mic::set_Sample
// Il2CppName: set_Sample
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Lib::Mic::*)(::ArrayW<float>)>(&Meta::WitAi::Lib::Mic::set_Sample)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Lib::Mic*), "set_Sample", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Lib::Mic::get_SampleDurationMS
// Il2CppName: get_SampleDurationMS
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Meta::WitAi::Lib::Mic::*)()>(&Meta::WitAi::Lib::Mic::get_SampleDurationMS)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Lib::Mic*), "get_SampleDurationMS", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Lib::Mic::set_SampleDurationMS
// Il2CppName: set_SampleDurationMS
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Lib::Mic::*)(int)>(&Meta::WitAi::Lib::Mic::set_SampleDurationMS)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Lib::Mic*), "set_SampleDurationMS", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Lib::Mic::get_IsInputAvailable
// Il2CppName: get_IsInputAvailable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::Lib::Mic::*)()>(&Meta::WitAi::Lib::Mic::get_IsInputAvailable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Lib::Mic*), "get_IsInputAvailable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Lib::Mic::CheckForInput
// Il2CppName: CheckForInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Lib::Mic::*)()>(&Meta::WitAi::Lib::Mic::CheckForInput)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Lib::Mic*), "CheckForInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Lib::Mic::get_SampleLength
// Il2CppName: get_SampleLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Meta::WitAi::Lib::Mic::*)()>(&Meta::WitAi::Lib::Mic::get_SampleLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Lib::Mic*), "get_SampleLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Lib::Mic::get_AudioClip
// Il2CppName: get_AudioClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AudioClip* (Meta::WitAi::Lib::Mic::*)()>(&Meta::WitAi::Lib::Mic::get_AudioClip)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Lib::Mic*), "get_AudioClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Lib::Mic::set_AudioClip
// Il2CppName: set_AudioClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Lib::Mic::*)(::UnityEngine::AudioClip*)>(&Meta::WitAi::Lib::Mic::set_AudioClip)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioClip")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Lib::Mic*), "set_AudioClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Lib::Mic::get_AudioClipSampleRate
// Il2CppName: get_AudioClipSampleRate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Meta::WitAi::Lib::Mic::*)()>(&Meta::WitAi::Lib::Mic::get_AudioClipSampleRate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Lib::Mic*), "get_AudioClipSampleRate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Lib::Mic::set_AudioClipSampleRate
// Il2CppName: set_AudioClipSampleRate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Lib::Mic::*)(int)>(&Meta::WitAi::Lib::Mic::set_AudioClipSampleRate)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Lib::Mic*), "set_AudioClipSampleRate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Lib::Mic::get_Devices
// Il2CppName: get_Devices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::StringW>* (Meta::WitAi::Lib::Mic::*)()>(&Meta::WitAi::Lib::Mic::get_Devices)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Lib::Mic*), "get_Devices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Lib::Mic::get_CurrentDeviceIndex
// Il2CppName: get_CurrentDeviceIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Meta::WitAi::Lib::Mic::*)()>(&Meta::WitAi::Lib::Mic::get_CurrentDeviceIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Lib::Mic*), "get_CurrentDeviceIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Lib::Mic::set_CurrentDeviceIndex
// Il2CppName: set_CurrentDeviceIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Lib::Mic::*)(int)>(&Meta::WitAi::Lib::Mic::set_CurrentDeviceIndex)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Lib::Mic*), "set_CurrentDeviceIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Lib::Mic::get_CurrentDeviceName
// Il2CppName: get_CurrentDeviceName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Meta::WitAi::Lib::Mic::*)()>(&Meta::WitAi::Lib::Mic::get_CurrentDeviceName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Lib::Mic*), "get_CurrentDeviceName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Lib::Mic::get_MicPosition
// Il2CppName: get_MicPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Meta::WitAi::Lib::Mic::*)()>(&Meta::WitAi::Lib::Mic::get_MicPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Lib::Mic*), "get_MicPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Lib::Mic::add_OnStartRecording
// Il2CppName: add_OnStartRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Lib::Mic::*)(::System::Action*)>(&Meta::WitAi::Lib::Mic::add_OnStartRecording)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Lib::Mic*), "add_OnStartRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Lib::Mic::remove_OnStartRecording
// Il2CppName: remove_OnStartRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Lib::Mic::*)(::System::Action*)>(&Meta::WitAi::Lib::Mic::remove_OnStartRecording)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Lib::Mic*), "remove_OnStartRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Lib::Mic::add_OnStartRecordingFailed
// Il2CppName: add_OnStartRecordingFailed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Lib::Mic::*)(::System::Action*)>(&Meta::WitAi::Lib::Mic::add_OnStartRecordingFailed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Lib::Mic*), "add_OnStartRecordingFailed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Lib::Mic::remove_OnStartRecordingFailed
// Il2CppName: remove_OnStartRecordingFailed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Lib::Mic::*)(::System::Action*)>(&Meta::WitAi::Lib::Mic::remove_OnStartRecordingFailed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Lib::Mic*), "remove_OnStartRecordingFailed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Lib::Mic::add_OnSampleReady
// Il2CppName: add_OnSampleReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Lib::Mic::*)(::System::Action_3<int, ::ArrayW<float>, float>*)>(&Meta::WitAi::Lib::Mic::add_OnSampleReady)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`3"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32"), il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1), ::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Lib::Mic*), "add_OnSampleReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Lib::Mic::remove_OnSampleReady
// Il2CppName: remove_OnSampleReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Lib::Mic::*)(::System::Action_3<int, ::ArrayW<float>, float>*)>(&Meta::WitAi::Lib::Mic::remove_OnSampleReady)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`3"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32"), il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1), ::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Lib::Mic*), "remove_OnSampleReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Lib::Mic::add_OnStopRecording
// Il2CppName: add_OnStopRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Lib::Mic::*)(::System::Action*)>(&Meta::WitAi::Lib::Mic::add_OnStopRecording)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Lib::Mic*), "add_OnStopRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Lib::Mic::remove_OnStopRecording
// Il2CppName: remove_OnStopRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Lib::Mic::*)(::System::Action*)>(&Meta::WitAi::Lib::Mic::remove_OnStopRecording)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Lib::Mic*), "remove_OnStopRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Lib::Mic::get_Instance
// Il2CppName: get_Instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Lib::Mic* (*)()>(&Meta::WitAi::Lib::Mic::get_Instance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Lib::Mic*), "get_Instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Lib::Mic::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Lib::Mic::*)()>(&Meta::WitAi::Lib::Mic::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Lib::Mic*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Lib::Mic::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Lib::Mic::*)()>(&Meta::WitAi::Lib::Mic::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Lib::Mic*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Lib::Mic::OnApplicationFocus
// Il2CppName: OnApplicationFocus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Lib::Mic::*)(bool)>(&Meta::WitAi::Lib::Mic::OnApplicationFocus)> {
  static const MethodInfo* get() {
    static auto* hasFocus = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Lib::Mic*), "OnApplicationFocus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hasFocus});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Lib::Mic::OnApplicationPause
// Il2CppName: OnApplicationPause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Lib::Mic::*)(bool)>(&Meta::WitAi::Lib::Mic::OnApplicationPause)> {
  static const MethodInfo* get() {
    static auto* pauseStatus = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Lib::Mic*), "OnApplicationPause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pauseStatus});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Lib::Mic::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Lib::Mic::*)()>(&Meta::WitAi::Lib::Mic::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Lib::Mic*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Lib::Mic::SafeStartMicrophone
// Il2CppName: SafeStartMicrophone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Lib::Mic::*)()>(&Meta::WitAi::Lib::Mic::SafeStartMicrophone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Lib::Mic*), "SafeStartMicrophone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Lib::Mic::RefreshMicDevices
// Il2CppName: RefreshMicDevices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Lib::Mic::*)()>(&Meta::WitAi::Lib::Mic::RefreshMicDevices)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Lib::Mic*), "RefreshMicDevices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Lib::Mic::ChangeDevice
// Il2CppName: ChangeDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Lib::Mic::*)(int)>(&Meta::WitAi::Lib::Mic::ChangeDevice)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Lib::Mic*), "ChangeDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Lib::Mic::StartMicrophone
// Il2CppName: StartMicrophone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Lib::Mic::*)()>(&Meta::WitAi::Lib::Mic::StartMicrophone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Lib::Mic*), "StartMicrophone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Lib::Mic::StopMicrophone
// Il2CppName: StopMicrophone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Lib::Mic::*)()>(&Meta::WitAi::Lib::Mic::StopMicrophone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Lib::Mic*), "StopMicrophone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Lib::Mic::StartRecording
// Il2CppName: StartRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Lib::Mic::*)(int)>(&Meta::WitAi::Lib::Mic::StartRecording)> {
  static const MethodInfo* get() {
    static auto* sampleLen = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Lib::Mic*), "StartRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sampleLen});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Lib::Mic::StopRecording
// Il2CppName: StopRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Lib::Mic::*)()>(&Meta::WitAi::Lib::Mic::StopRecording)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Lib::Mic*), "StopRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Lib::Mic::ReadRawAudio
// Il2CppName: ReadRawAudio
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (Meta::WitAi::Lib::Mic::*)()>(&Meta::WitAi::Lib::Mic::ReadRawAudio)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Lib::Mic*), "ReadRawAudio", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Lib::Mic::MicrophoneIsRecording
// Il2CppName: MicrophoneIsRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::Lib::Mic::*)(::StringW)>(&Meta::WitAi::Lib::Mic::MicrophoneIsRecording)> {
  static const MethodInfo* get() {
    static auto* device = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Lib::Mic*), "MicrophoneIsRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{device});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Lib::Mic::MicrophoneGetDevices
// Il2CppName: MicrophoneGetDevices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::StringW> (Meta::WitAi::Lib::Mic::*)()>(&Meta::WitAi::Lib::Mic::MicrophoneGetDevices)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Lib::Mic*), "MicrophoneGetDevices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Lib::Mic::MicrophoneGetPosition
// Il2CppName: MicrophoneGetPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Meta::WitAi::Lib::Mic::*)(::StringW)>(&Meta::WitAi::Lib::Mic::MicrophoneGetPosition)> {
  static const MethodInfo* get() {
    static auto* device = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Lib::Mic*), "MicrophoneGetPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{device});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Lib::Mic::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
