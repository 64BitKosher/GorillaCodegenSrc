// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Meta.WitAi.Interfaces.IAudioInputSource
#include "Meta/WitAi/Interfaces/IAudioInputSource.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Meta::WitAi::Lib
namespace Meta::WitAi::Lib {
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Action`3<T1, T2, T3>
  template<typename T1, typename T2, typename T3>
  class Action_3;
}
// Forward declaring namespace: Meta::WitAi::Data
namespace Meta::WitAi::Data {
  // Forward declaring type: AudioEncoding
  class AudioEncoding;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Coroutine
  class Coroutine;
  // Forward declaring type: AudioClip
  class AudioClip;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: Meta.WitAi.Lib
namespace Meta::WitAi::Lib {
  // Forward declaring type: MicBase
  class MicBase;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::WitAi::Lib::MicBase);
DEFINE_IL2CPP_ARG_TYPE(::Meta::WitAi::Lib::MicBase*, "Meta.WitAi.Lib", "MicBase");
// Type namespace: Meta.WitAi.Lib
namespace Meta::WitAi::Lib {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: Meta.WitAi.Lib.MicBase
  // [TokenAttribute] Offset: FFFFFFFF
  class MicBase : public ::UnityEngine::MonoBehaviour/*, public ::Meta::WitAi::Interfaces::IAudioInputSource*/ {
    public:
    // Nested type: ::Meta::WitAi::Lib::MicBase::$ReadRawAudio$d__33
    class $ReadRawAudio$d__33;
    public:
    // private System.Action OnStartRecording
    // Size: 0x8
    // Offset: 0x20
    ::System::Action* OnStartRecording;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private System.Action OnStartRecordingFailed
    // Size: 0x8
    // Offset: 0x28
    ::System::Action* OnStartRecordingFailed;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private System.Action OnStopRecording
    // Size: 0x8
    // Offset: 0x30
    ::System::Action* OnStopRecording;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private System.Action`3<System.Int32,System.Single[],System.Single> OnSampleReady
    // Size: 0x8
    // Offset: 0x38
    ::System::Action_3<int, ::ArrayW<float>, float>* OnSampleReady;
    // Field size check
    static_assert(sizeof(::System::Action_3<int, ::ArrayW<float>, float>*) == 0x8);
    // private System.Boolean <IsRecording>k__BackingField
    // Size: 0x1
    // Offset: 0x40
    bool IsRecording;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: IsRecording and: AudioEncoding
    char __padding4[0x7] = {};
    // private Meta.WitAi.Data.AudioEncoding <AudioEncoding>k__BackingField
    // Size: 0x8
    // Offset: 0x48
    ::Meta::WitAi::Data::AudioEncoding* AudioEncoding;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::Data::AudioEncoding*) == 0x8);
    // private System.Int32 _sampleCount
    // Size: 0x4
    // Offset: 0x50
    int sampleCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: sampleCount and: reader
    char __padding6[0x4] = {};
    // private UnityEngine.Coroutine _reader
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::Coroutine* reader;
    // Field size check
    static_assert(sizeof(::UnityEngine::Coroutine*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Meta::WitAi::Interfaces::IAudioInputSource
    operator ::Meta::WitAi::Interfaces::IAudioInputSource() noexcept {
      return *reinterpret_cast<::Meta::WitAi::Interfaces::IAudioInputSource*>(this);
    }
    // Get instance field reference: private System.Action OnStartRecording
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_OnStartRecording();
    // Get instance field reference: private System.Action OnStartRecordingFailed
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_OnStartRecordingFailed();
    // Get instance field reference: private System.Action OnStopRecording
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_OnStopRecording();
    // Get instance field reference: private System.Action`3<System.Int32,System.Single[],System.Single> OnSampleReady
    [[deprecated("Use field access instead!")]] ::System::Action_3<int, ::ArrayW<float>, float>*& dyn_OnSampleReady();
    // Get instance field reference: private System.Boolean <IsRecording>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$IsRecording$k__BackingField();
    // Get instance field reference: private Meta.WitAi.Data.AudioEncoding <AudioEncoding>k__BackingField
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::Data::AudioEncoding*& dyn_$AudioEncoding$k__BackingField();
    // Get instance field reference: private System.Int32 _sampleCount
    [[deprecated("Use field access instead!")]] int& dyn__sampleCount();
    // Get instance field reference: private UnityEngine.Coroutine _reader
    [[deprecated("Use field access instead!")]] ::UnityEngine::Coroutine*& dyn__reader();
    // public System.String GetMicName()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::StringW GetMicName();
    // public System.Int32 GetMicSampleRate()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int GetMicSampleRate();
    // public UnityEngine.AudioClip GetMicClip()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::UnityEngine::AudioClip* GetMicClip();
    // public System.Int32 get_MicPosition()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_MicPosition();
    // public System.Void add_OnStartRecording(System.Action value)
    // Offset: 0x4416540
    void add_OnStartRecording(::System::Action* value);
    // public System.Void remove_OnStartRecording(System.Action value)
    // Offset: 0x44165DC
    void remove_OnStartRecording(::System::Action* value);
    // public System.Void add_OnStartRecordingFailed(System.Action value)
    // Offset: 0x4416678
    void add_OnStartRecordingFailed(::System::Action* value);
    // public System.Void remove_OnStartRecordingFailed(System.Action value)
    // Offset: 0x4416714
    void remove_OnStartRecordingFailed(::System::Action* value);
    // public System.Void add_OnStopRecording(System.Action value)
    // Offset: 0x44167B0
    void add_OnStopRecording(::System::Action* value);
    // public System.Void remove_OnStopRecording(System.Action value)
    // Offset: 0x441684C
    void remove_OnStopRecording(::System::Action* value);
    // public System.Void add_OnSampleReady(System.Action`3<System.Int32,System.Single[],System.Single> value)
    // Offset: 0x44168E8
    void add_OnSampleReady(::System::Action_3<int, ::ArrayW<float>, float>* value);
    // public System.Void remove_OnSampleReady(System.Action`3<System.Int32,System.Single[],System.Single> value)
    // Offset: 0x4416998
    void remove_OnSampleReady(::System::Action_3<int, ::ArrayW<float>, float>* value);
    // public System.Boolean get_IsRecording()
    // Offset: 0x4416A48
    bool get_IsRecording();
    // private System.Void set_IsRecording(System.Boolean value)
    // Offset: 0x4416A50
    void set_IsRecording(bool value);
    // public System.Boolean get_IsMicListening()
    // Offset: 0x4416A5C
    bool get_IsMicListening();
    // public System.Boolean get_IsInputAvailable()
    // Offset: 0x4416A7C
    bool get_IsInputAvailable();
    // public Meta.WitAi.Data.AudioEncoding get_AudioEncoding()
    // Offset: 0x4416AF4
    ::Meta::WitAi::Data::AudioEncoding* get_AudioEncoding();
    // public System.Void set_AudioEncoding(Meta.WitAi.Data.AudioEncoding value)
    // Offset: 0x4416AFC
    void set_AudioEncoding(::Meta::WitAi::Data::AudioEncoding* value);
    // public System.Void CheckForInput()
    // Offset: 0x4416B04
    void CheckForInput();
    // public System.Void StartRecording(System.Int32 sampleDurationMS)
    // Offset: 0x4416B08
    void StartRecording(int sampleDurationMS);
    // protected System.Collections.IEnumerator ReadRawAudio(System.Int32 sampleDurationMS)
    // Offset: 0x4416BAC
    ::System::Collections::IEnumerator* ReadRawAudio(int sampleDurationMS);
    // public System.Void StopRecording()
    // Offset: 0x4416C50
    void StopRecording();
    // protected System.Void .ctor()
    // Offset: 0x4416CBC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MicBase* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Lib::MicBase::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MicBase*, creationType>()));
    }
  }; // Meta.WitAi.Lib.MicBase
  #pragma pack(pop)
  static check_size<sizeof(MicBase), 88 + sizeof(::UnityEngine::Coroutine*)> __Meta_WitAi_Lib_MicBaseSizeCheck;
  static_assert(sizeof(MicBase) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::WitAi::Lib::MicBase::GetMicName
// Il2CppName: GetMicName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Meta::WitAi::Lib::MicBase::*)()>(&Meta::WitAi::Lib::MicBase::GetMicName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Lib::MicBase*), "GetMicName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Lib::MicBase::GetMicSampleRate
// Il2CppName: GetMicSampleRate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Meta::WitAi::Lib::MicBase::*)()>(&Meta::WitAi::Lib::MicBase::GetMicSampleRate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Lib::MicBase*), "GetMicSampleRate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Lib::MicBase::GetMicClip
// Il2CppName: GetMicClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AudioClip* (Meta::WitAi::Lib::MicBase::*)()>(&Meta::WitAi::Lib::MicBase::GetMicClip)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Lib::MicBase*), "GetMicClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Lib::MicBase::get_MicPosition
// Il2CppName: get_MicPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Meta::WitAi::Lib::MicBase::*)()>(&Meta::WitAi::Lib::MicBase::get_MicPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Lib::MicBase*), "get_MicPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Lib::MicBase::add_OnStartRecording
// Il2CppName: add_OnStartRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Lib::MicBase::*)(::System::Action*)>(&Meta::WitAi::Lib::MicBase::add_OnStartRecording)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Lib::MicBase*), "add_OnStartRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Lib::MicBase::remove_OnStartRecording
// Il2CppName: remove_OnStartRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Lib::MicBase::*)(::System::Action*)>(&Meta::WitAi::Lib::MicBase::remove_OnStartRecording)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Lib::MicBase*), "remove_OnStartRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Lib::MicBase::add_OnStartRecordingFailed
// Il2CppName: add_OnStartRecordingFailed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Lib::MicBase::*)(::System::Action*)>(&Meta::WitAi::Lib::MicBase::add_OnStartRecordingFailed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Lib::MicBase*), "add_OnStartRecordingFailed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Lib::MicBase::remove_OnStartRecordingFailed
// Il2CppName: remove_OnStartRecordingFailed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Lib::MicBase::*)(::System::Action*)>(&Meta::WitAi::Lib::MicBase::remove_OnStartRecordingFailed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Lib::MicBase*), "remove_OnStartRecordingFailed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Lib::MicBase::add_OnStopRecording
// Il2CppName: add_OnStopRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Lib::MicBase::*)(::System::Action*)>(&Meta::WitAi::Lib::MicBase::add_OnStopRecording)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Lib::MicBase*), "add_OnStopRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Lib::MicBase::remove_OnStopRecording
// Il2CppName: remove_OnStopRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Lib::MicBase::*)(::System::Action*)>(&Meta::WitAi::Lib::MicBase::remove_OnStopRecording)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Lib::MicBase*), "remove_OnStopRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Lib::MicBase::add_OnSampleReady
// Il2CppName: add_OnSampleReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Lib::MicBase::*)(::System::Action_3<int, ::ArrayW<float>, float>*)>(&Meta::WitAi::Lib::MicBase::add_OnSampleReady)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`3"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32"), il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1), ::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Lib::MicBase*), "add_OnSampleReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Lib::MicBase::remove_OnSampleReady
// Il2CppName: remove_OnSampleReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Lib::MicBase::*)(::System::Action_3<int, ::ArrayW<float>, float>*)>(&Meta::WitAi::Lib::MicBase::remove_OnSampleReady)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`3"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32"), il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1), ::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Lib::MicBase*), "remove_OnSampleReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Lib::MicBase::get_IsRecording
// Il2CppName: get_IsRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::Lib::MicBase::*)()>(&Meta::WitAi::Lib::MicBase::get_IsRecording)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Lib::MicBase*), "get_IsRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Lib::MicBase::set_IsRecording
// Il2CppName: set_IsRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Lib::MicBase::*)(bool)>(&Meta::WitAi::Lib::MicBase::set_IsRecording)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Lib::MicBase*), "set_IsRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Lib::MicBase::get_IsMicListening
// Il2CppName: get_IsMicListening
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::Lib::MicBase::*)()>(&Meta::WitAi::Lib::MicBase::get_IsMicListening)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Lib::MicBase*), "get_IsMicListening", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Lib::MicBase::get_IsInputAvailable
// Il2CppName: get_IsInputAvailable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::Lib::MicBase::*)()>(&Meta::WitAi::Lib::MicBase::get_IsInputAvailable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Lib::MicBase*), "get_IsInputAvailable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Lib::MicBase::get_AudioEncoding
// Il2CppName: get_AudioEncoding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Data::AudioEncoding* (Meta::WitAi::Lib::MicBase::*)()>(&Meta::WitAi::Lib::MicBase::get_AudioEncoding)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Lib::MicBase*), "get_AudioEncoding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Lib::MicBase::set_AudioEncoding
// Il2CppName: set_AudioEncoding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Lib::MicBase::*)(::Meta::WitAi::Data::AudioEncoding*)>(&Meta::WitAi::Lib::MicBase::set_AudioEncoding)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Data", "AudioEncoding")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Lib::MicBase*), "set_AudioEncoding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Lib::MicBase::CheckForInput
// Il2CppName: CheckForInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Lib::MicBase::*)()>(&Meta::WitAi::Lib::MicBase::CheckForInput)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Lib::MicBase*), "CheckForInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Lib::MicBase::StartRecording
// Il2CppName: StartRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Lib::MicBase::*)(int)>(&Meta::WitAi::Lib::MicBase::StartRecording)> {
  static const MethodInfo* get() {
    static auto* sampleDurationMS = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Lib::MicBase*), "StartRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sampleDurationMS});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Lib::MicBase::ReadRawAudio
// Il2CppName: ReadRawAudio
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (Meta::WitAi::Lib::MicBase::*)(int)>(&Meta::WitAi::Lib::MicBase::ReadRawAudio)> {
  static const MethodInfo* get() {
    static auto* sampleDurationMS = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Lib::MicBase*), "ReadRawAudio", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sampleDurationMS});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Lib::MicBase::StopRecording
// Il2CppName: StopRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Lib::MicBase::*)()>(&Meta::WitAi::Lib::MicBase::StopRecording)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Lib::MicBase*), "StopRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Lib::MicBase::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
