// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Meta.WitAi.Data.RingBuffer`1
#include "Meta/WitAi/Data/RingBuffer_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioSource
  class AudioSource;
}
// Completed forward declares
// Type namespace: Meta.WitAi.Lib
namespace Meta::WitAi::Lib {
  // Forward declaring type: VoiceLipSyncMic
  class VoiceLipSyncMic;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::WitAi::Lib::VoiceLipSyncMic);
DEFINE_IL2CPP_ARG_TYPE(::Meta::WitAi::Lib::VoiceLipSyncMic*, "Meta.WitAi.Lib", "VoiceLipSyncMic");
// Type namespace: Meta.WitAi.Lib
namespace Meta::WitAi::Lib {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: Meta.WitAi.Lib.VoiceLipSyncMic
  // [TokenAttribute] Offset: FFFFFFFF
  class VoiceLipSyncMic : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.Int32 AudioSampleRate
    // Size: 0x4
    // Offset: 0x20
    int AudioSampleRate;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: AudioSampleRate and: AudioSource
    char __padding0[0x4] = {};
    // public UnityEngine.AudioSource AudioSource
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::AudioSource* AudioSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    public:
    // Get instance field reference: public System.Int32 AudioSampleRate
    [[deprecated("Use field access instead!")]] int& dyn_AudioSampleRate();
    // Get instance field reference: public UnityEngine.AudioSource AudioSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_AudioSource();
    // private System.Void Awake()
    // Offset: 0x4436630
    void Awake();
    // private System.Void OnEnable()
    // Offset: 0x4436830
    void OnEnable();
    // private System.Void OnMicSampleReady(Meta.WitAi.Data.RingBuffer`1/Marker<System.Byte> marker, System.Single levelMax)
    // Offset: 0x44369E8
    void OnMicSampleReady(typename ::Meta::WitAi::Data::RingBuffer_1<uint8_t>::Marker* marker, float levelMax);
    // private System.Void OnDisable()
    // Offset: 0x4436A94
    void OnDisable();
    // public System.Void .ctor()
    // Offset: 0x4436C08
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VoiceLipSyncMic* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Lib::VoiceLipSyncMic::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VoiceLipSyncMic*, creationType>()));
    }
  }; // Meta.WitAi.Lib.VoiceLipSyncMic
  #pragma pack(pop)
  static check_size<sizeof(VoiceLipSyncMic), 40 + sizeof(::UnityEngine::AudioSource*)> __Meta_WitAi_Lib_VoiceLipSyncMicSizeCheck;
  static_assert(sizeof(VoiceLipSyncMic) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::WitAi::Lib::VoiceLipSyncMic::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Lib::VoiceLipSyncMic::*)()>(&Meta::WitAi::Lib::VoiceLipSyncMic::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Lib::VoiceLipSyncMic*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Lib::VoiceLipSyncMic::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Lib::VoiceLipSyncMic::*)()>(&Meta::WitAi::Lib::VoiceLipSyncMic::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Lib::VoiceLipSyncMic*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Lib::VoiceLipSyncMic::OnMicSampleReady
// Il2CppName: OnMicSampleReady
// Cannot write MetadataGetter for a method that has a nested type with a declaring generic type anywhere within it!
// Talk to sc2ad if this is something you want
// Writing MetadataGetter for method: Meta::WitAi::Lib::VoiceLipSyncMic::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Lib::VoiceLipSyncMic::*)()>(&Meta::WitAi::Lib::VoiceLipSyncMic::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Lib::VoiceLipSyncMic*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Lib::VoiceLipSyncMic::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
