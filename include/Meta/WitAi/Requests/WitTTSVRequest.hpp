// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Meta.WitAi.Requests.WitVRequest
#include "Meta/WitAi/Requests/WitVRequest.hpp"
// Including type: Meta.WitAi.Requests.TTSWitAudioType
#include "Meta/WitAi/Requests/TTSWitAudioType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Meta::WitAi::Requests
namespace Meta::WitAi::Requests {
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: Meta::WitAi
namespace Meta::WitAi {
  // Forward declaring type: IWitRequestConfiguration
  class IWitRequestConfiguration;
}
// Forward declaring namespace: Meta::Voice::Audio
namespace Meta::Voice::Audio {
  // Forward declaring type: IAudioClipStream
  class IAudioClipStream;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: UnityEngine::Networking
namespace UnityEngine::Networking {
  // Forward declaring type: UnityWebRequest
  class UnityWebRequest;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioType
  struct AudioType;
}
// Completed forward declares
// Type namespace: Meta.WitAi.Requests
namespace Meta::WitAi::Requests {
  // Forward declaring type: WitTTSVRequest
  class WitTTSVRequest;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::WitAi::Requests::WitTTSVRequest);
DEFINE_IL2CPP_ARG_TYPE(::Meta::WitAi::Requests::WitTTSVRequest*, "Meta.WitAi.Requests", "WitTTSVRequest");
// Type namespace: Meta.WitAi.Requests
namespace Meta::WitAi::Requests {
  // Size: 0x7D
  #pragma pack(push, 1)
  // Autogenerated type: Meta.WitAi.Requests.WitTTSVRequest
  // [TokenAttribute] Offset: FFFFFFFF
  class WitTTSVRequest : public ::Meta::WitAi::Requests::WitVRequest {
    public:
    // Writing base type padding for base size: 0x61 to desired offset: 0x68
    char ___base_padding[0x7] = {};
    // Nested type: ::Meta::WitAi::Requests::WitTTSVRequest::$$c__DisplayClass14_0
    class $$c__DisplayClass14_0;
    // Nested type: ::Meta::WitAi::Requests::WitTTSVRequest::$$c__DisplayClass15_0
    class $$c__DisplayClass15_0;
    // Nested type: ::Meta::WitAi::Requests::WitTTSVRequest::$$c__DisplayClass16_0
    class $$c__DisplayClass16_0;
    public:
    // private readonly System.String <TextToSpeak>k__BackingField
    // Size: 0x8
    // Offset: 0x68
    ::StringW TextToSpeak;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private readonly System.Collections.Generic.Dictionary`2<System.String,System.String> <TtsData>k__BackingField
    // Size: 0x8
    // Offset: 0x70
    ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* TtsData;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*) == 0x8);
    // private readonly Meta.WitAi.Requests.TTSWitAudioType <FileType>k__BackingField
    // Size: 0x4
    // Offset: 0x78
    ::Meta::WitAi::Requests::TTSWitAudioType FileType;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::Requests::TTSWitAudioType) == 0x4);
    // private readonly System.Boolean <Stream>k__BackingField
    // Size: 0x1
    // Offset: 0x7C
    bool Stream;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private readonly System.String <TextToSpeak>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$TextToSpeak$k__BackingField();
    // Get instance field reference: private readonly System.Collections.Generic.Dictionary`2<System.String,System.String> <TtsData>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*& dyn_$TtsData$k__BackingField();
    // Get instance field reference: private readonly Meta.WitAi.Requests.TTSWitAudioType <FileType>k__BackingField
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::Requests::TTSWitAudioType& dyn_$FileType$k__BackingField();
    // Get instance field reference: private readonly System.Boolean <Stream>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$Stream$k__BackingField();
    // public System.String get_TextToSpeak()
    // Offset: 0x4445138
    ::StringW get_TextToSpeak();
    // public System.Collections.Generic.Dictionary`2<System.String,System.String> get_TtsData()
    // Offset: 0x4445140
    ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* get_TtsData();
    // public Meta.WitAi.Requests.TTSWitAudioType get_FileType()
    // Offset: 0x4445148
    ::Meta::WitAi::Requests::TTSWitAudioType get_FileType();
    // public System.Boolean get_Stream()
    // Offset: 0x4445150
    bool get_Stream();
    // public System.Void .ctor(Meta.WitAi.IWitRequestConfiguration configuration, System.String requestId, System.String textToSpeak, System.Collections.Generic.Dictionary`2<System.String,System.String> ttsData, Meta.WitAi.Requests.TTSWitAudioType audioFileType, System.Boolean audioStream, Meta.WitAi.Requests.VRequest/RequestProgressDelegate onDownloadProgress, Meta.WitAi.Requests.VRequest/RequestFirstResponseDelegate onFirstResponse)
    // Offset: 0x4445158
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WitTTSVRequest* New_ctor(::Meta::WitAi::IWitRequestConfiguration* configuration, ::StringW requestId, ::StringW textToSpeak, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* ttsData, ::Meta::WitAi::Requests::TTSWitAudioType audioFileType, bool audioStream, ::Meta::WitAi::Requests::VRequest::RequestProgressDelegate* onDownloadProgress, ::Meta::WitAi::Requests::VRequest::RequestFirstResponseDelegate* onFirstResponse) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Requests::WitTTSVRequest::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WitTTSVRequest*, creationType>(configuration, requestId, textToSpeak, ttsData, audioFileType, audioStream, onDownloadProgress, onFirstResponse)));
    }
    // public System.Boolean RequestStream(Meta.Voice.Audio.IAudioClipStream clipStream, Meta.WitAi.Requests.VRequest/RequestCompleteDelegate`1<Meta.Voice.Audio.IAudioClipStream> onClipReady)
    // Offset: 0x4445360
    bool RequestStream(::Meta::Voice::Audio::IAudioClipStream* clipStream, ::Meta::WitAi::Requests::VRequest::RequestCompleteDelegate_1<::Meta::Voice::Audio::IAudioClipStream*>* onClipReady);
    // public System.Boolean RequestDownload(System.String downloadPath, Meta.WitAi.Requests.VRequest/RequestCompleteDelegate`1<System.Boolean> onComplete)
    // Offset: 0x44456C0
    bool RequestDownload(::StringW downloadPath, ::Meta::WitAi::Requests::VRequest::RequestCompleteDelegate_1<bool>* onComplete);
    // private System.Void EncodePostBytesAsync(System.String textToSpeak, System.Collections.Generic.Dictionary`2<System.String,System.String> ttsData, System.Action`1<System.Byte[]> onEncoded)
    // Offset: 0x444554C
    void EncodePostBytesAsync(::StringW textToSpeak, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* ttsData, ::System::Action_1<::ArrayW<uint8_t>>* onEncoded);
    // private System.Byte[] EncodePostData(System.String textToSpeak, System.Collections.Generic.Dictionary`2<System.String,System.String> ttsData)
    // Offset: 0x444581C
    ::ArrayW<uint8_t> EncodePostData(::StringW textToSpeak, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* ttsData);
    // private UnityEngine.Networking.UnityWebRequest GetUnityRequest(Meta.WitAi.Requests.TTSWitAudioType audioType, System.Byte[] postData)
    // Offset: 0x4445904
    ::UnityEngine::Networking::UnityWebRequest* GetUnityRequest(::Meta::WitAi::Requests::TTSWitAudioType audioType, ::ArrayW<uint8_t> postData);
    // static public UnityEngine.AudioType GetAudioType(Meta.WitAi.Requests.TTSWitAudioType witAudioType)
    // Offset: 0x4445AE4
    static ::UnityEngine::AudioType GetAudioType(::Meta::WitAi::Requests::TTSWitAudioType witAudioType);
    // static public System.String GetAudioMimeType(Meta.WitAi.Requests.TTSWitAudioType witAudioType)
    // Offset: 0x44452A4
    static ::StringW GetAudioMimeType(::Meta::WitAi::Requests::TTSWitAudioType witAudioType);
    // static public System.String GetAudioExtension(Meta.WitAi.Requests.TTSWitAudioType witAudioType)
    // Offset: 0x4445B00
    static ::StringW GetAudioExtension(::Meta::WitAi::Requests::TTSWitAudioType witAudioType);
    // static public System.String GetAudioExtension(UnityEngine.AudioType audioType)
    // Offset: 0x4445B1C
    static ::StringW GetAudioExtension(::UnityEngine::AudioType audioType);
    // static public System.Boolean CanStreamAudio(Meta.WitAi.Requests.TTSWitAudioType witAudioType)
    // Offset: 0x4445540
    static bool CanStreamAudio(::Meta::WitAi::Requests::TTSWitAudioType witAudioType);
    // protected override System.Collections.Generic.Dictionary`2<System.String,System.String> GetHeaders()
    // Offset: 0x44451C8
    // Implemented from: Meta.WitAi.Requests.WitVRequest
    // Base method: System.Collections.Generic.Dictionary`2<System.String,System.String> WitVRequest::GetHeaders()
    ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* GetHeaders();
  }; // Meta.WitAi.Requests.WitTTSVRequest
  #pragma pack(pop)
  static check_size<sizeof(WitTTSVRequest), 124 + sizeof(bool)> __Meta_WitAi_Requests_WitTTSVRequestSizeCheck;
  static_assert(sizeof(WitTTSVRequest) == 0x7D);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::WitAi::Requests::WitTTSVRequest::get_TextToSpeak
// Il2CppName: get_TextToSpeak
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Meta::WitAi::Requests::WitTTSVRequest::*)()>(&Meta::WitAi::Requests::WitTTSVRequest::get_TextToSpeak)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Requests::WitTTSVRequest*), "get_TextToSpeak", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Requests::WitTTSVRequest::get_TtsData
// Il2CppName: get_TtsData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* (Meta::WitAi::Requests::WitTTSVRequest::*)()>(&Meta::WitAi::Requests::WitTTSVRequest::get_TtsData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Requests::WitTTSVRequest*), "get_TtsData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Requests::WitTTSVRequest::get_FileType
// Il2CppName: get_FileType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Requests::TTSWitAudioType (Meta::WitAi::Requests::WitTTSVRequest::*)()>(&Meta::WitAi::Requests::WitTTSVRequest::get_FileType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Requests::WitTTSVRequest*), "get_FileType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Requests::WitTTSVRequest::get_Stream
// Il2CppName: get_Stream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::Requests::WitTTSVRequest::*)()>(&Meta::WitAi::Requests::WitTTSVRequest::get_Stream)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Requests::WitTTSVRequest*), "get_Stream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Requests::WitTTSVRequest::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Meta::WitAi::Requests::WitTTSVRequest::RequestStream
// Il2CppName: RequestStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::Requests::WitTTSVRequest::*)(::Meta::Voice::Audio::IAudioClipStream*, ::Meta::WitAi::Requests::VRequest::RequestCompleteDelegate_1<::Meta::Voice::Audio::IAudioClipStream*>*)>(&Meta::WitAi::Requests::WitTTSVRequest::RequestStream)> {
  static const MethodInfo* get() {
    static auto* clipStream = &::il2cpp_utils::GetClassFromName("Meta.Voice.Audio", "IAudioClipStream")->byval_arg;
    static auto* onClipReady = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Meta.WitAi.Requests", "VRequest/RequestCompleteDelegate`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Meta.Voice.Audio", "IAudioClipStream")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Requests::WitTTSVRequest*), "RequestStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clipStream, onClipReady});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Requests::WitTTSVRequest::RequestDownload
// Il2CppName: RequestDownload
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::Requests::WitTTSVRequest::*)(::StringW, ::Meta::WitAi::Requests::VRequest::RequestCompleteDelegate_1<bool>*)>(&Meta::WitAi::Requests::WitTTSVRequest::RequestDownload)> {
  static const MethodInfo* get() {
    static auto* downloadPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* onComplete = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Meta.WitAi.Requests", "VRequest/RequestCompleteDelegate`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Requests::WitTTSVRequest*), "RequestDownload", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{downloadPath, onComplete});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Requests::WitTTSVRequest::EncodePostBytesAsync
// Il2CppName: EncodePostBytesAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Requests::WitTTSVRequest::*)(::StringW, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*, ::System::Action_1<::ArrayW<uint8_t>>*)>(&Meta::WitAi::Requests::WitTTSVRequest::EncodePostBytesAsync)> {
  static const MethodInfo* get() {
    static auto* textToSpeak = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ttsData = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    static auto* onEncoded = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Requests::WitTTSVRequest*), "EncodePostBytesAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{textToSpeak, ttsData, onEncoded});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Requests::WitTTSVRequest::EncodePostData
// Il2CppName: EncodePostData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (Meta::WitAi::Requests::WitTTSVRequest::*)(::StringW, ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&Meta::WitAi::Requests::WitTTSVRequest::EncodePostData)> {
  static const MethodInfo* get() {
    static auto* textToSpeak = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ttsData = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Requests::WitTTSVRequest*), "EncodePostData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{textToSpeak, ttsData});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Requests::WitTTSVRequest::GetUnityRequest
// Il2CppName: GetUnityRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Networking::UnityWebRequest* (Meta::WitAi::Requests::WitTTSVRequest::*)(::Meta::WitAi::Requests::TTSWitAudioType, ::ArrayW<uint8_t>)>(&Meta::WitAi::Requests::WitTTSVRequest::GetUnityRequest)> {
  static const MethodInfo* get() {
    static auto* audioType = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Requests", "TTSWitAudioType")->byval_arg;
    static auto* postData = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Requests::WitTTSVRequest*), "GetUnityRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{audioType, postData});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Requests::WitTTSVRequest::GetAudioType
// Il2CppName: GetAudioType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AudioType (*)(::Meta::WitAi::Requests::TTSWitAudioType)>(&Meta::WitAi::Requests::WitTTSVRequest::GetAudioType)> {
  static const MethodInfo* get() {
    static auto* witAudioType = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Requests", "TTSWitAudioType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Requests::WitTTSVRequest*), "GetAudioType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{witAudioType});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Requests::WitTTSVRequest::GetAudioMimeType
// Il2CppName: GetAudioMimeType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::Meta::WitAi::Requests::TTSWitAudioType)>(&Meta::WitAi::Requests::WitTTSVRequest::GetAudioMimeType)> {
  static const MethodInfo* get() {
    static auto* witAudioType = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Requests", "TTSWitAudioType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Requests::WitTTSVRequest*), "GetAudioMimeType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{witAudioType});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Requests::WitTTSVRequest::GetAudioExtension
// Il2CppName: GetAudioExtension
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::Meta::WitAi::Requests::TTSWitAudioType)>(&Meta::WitAi::Requests::WitTTSVRequest::GetAudioExtension)> {
  static const MethodInfo* get() {
    static auto* witAudioType = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Requests", "TTSWitAudioType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Requests::WitTTSVRequest*), "GetAudioExtension", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{witAudioType});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Requests::WitTTSVRequest::GetAudioExtension
// Il2CppName: GetAudioExtension
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::UnityEngine::AudioType)>(&Meta::WitAi::Requests::WitTTSVRequest::GetAudioExtension)> {
  static const MethodInfo* get() {
    static auto* audioType = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Requests::WitTTSVRequest*), "GetAudioExtension", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{audioType});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Requests::WitTTSVRequest::CanStreamAudio
// Il2CppName: CanStreamAudio
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Meta::WitAi::Requests::TTSWitAudioType)>(&Meta::WitAi::Requests::WitTTSVRequest::CanStreamAudio)> {
  static const MethodInfo* get() {
    static auto* witAudioType = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Requests", "TTSWitAudioType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Requests::WitTTSVRequest*), "CanStreamAudio", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{witAudioType});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Requests::WitTTSVRequest::GetHeaders
// Il2CppName: GetHeaders
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* (Meta::WitAi::Requests::WitTTSVRequest::*)()>(&Meta::WitAi::Requests::WitTTSVRequest::GetHeaders)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Requests::WitTTSVRequest*), "GetHeaders", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
