// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Meta.WitAi.CoroutineUtility
#include "Meta/WitAi/CoroutineUtility.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Meta::WitAi::Requests
namespace Meta::WitAi::Requests {
}
// Forward declaring namespace: UnityEngine::Networking
namespace UnityEngine::Networking {
  // Forward declaring type: UnityWebRequest
  class UnityWebRequest;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Uri
  class Uri;
}
// Forward declaring namespace: Meta::Voice::Audio
namespace Meta::Voice::Audio {
  // Forward declaring type: IAudioClipStream
  class IAudioClipStream;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioType
  struct AudioType;
}
// Completed forward declares
// Type namespace: Meta.WitAi.Requests
namespace Meta::WitAi::Requests {
  // Forward declaring type: VRequest
  class VRequest;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::WitAi::Requests::VRequest);
DEFINE_IL2CPP_ARG_TYPE(::Meta::WitAi::Requests::VRequest*, "Meta.WitAi.Requests", "VRequest");
// Type namespace: Meta.WitAi.Requests
namespace Meta::WitAi::Requests {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: Meta.WitAi.Requests.VRequest
  // [TokenAttribute] Offset: FFFFFFFF
  class VRequest : public ::Il2CppObject {
    public:
    // Nested type: ::Meta::WitAi::Requests::VRequest::RequestProgressDelegate
    class RequestProgressDelegate;
    // Nested type: ::Meta::WitAi::Requests::VRequest::RequestFirstResponseDelegate
    class RequestFirstResponseDelegate;
    // Nested type: ::Meta::WitAi::Requests::VRequest::RequestCompleteDelegate_1<TResult>
    template<typename TResult>
    class RequestCompleteDelegate_1;
    // Nested type: ::Meta::WitAi::Requests::VRequest::$$c__DisplayClass45_0
    class $$c__DisplayClass45_0;
    // Nested type: ::Meta::WitAi::Requests::VRequest::$$c__DisplayClass46_0
    class $$c__DisplayClass46_0;
    // Nested type: ::Meta::WitAi::Requests::VRequest::$$c__DisplayClass47_0
    class $$c__DisplayClass47_0;
    // Nested type: ::Meta::WitAi::Requests::VRequest::$$c__DisplayClass48_0
    class $$c__DisplayClass48_0;
    // Nested type: ::Meta::WitAi::Requests::VRequest::$$c__DisplayClass49_0
    class $$c__DisplayClass49_0;
    // Nested type: ::Meta::WitAi::Requests::VRequest::$$c__DisplayClass50_0_1<TData>
    template<typename TData>
    class $$c__DisplayClass50_0_1;
    // Nested type: ::Meta::WitAi::Requests::VRequest::$$c__DisplayClass50_1_1<TData>
    template<typename TData>
    class $$c__DisplayClass50_1_1;
    // Nested type: ::Meta::WitAi::Requests::VRequest::$$c__DisplayClass56_0
    class $$c__DisplayClass56_0;
    // Nested type: ::Meta::WitAi::Requests::VRequest::$PerformUpdate$d__38
    class $PerformUpdate$d__38;
    public:
    // private System.Int32 <Timeout>k__BackingField
    // Size: 0x4
    // Offset: 0x10
    int Timeout;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean <IsPerforming>k__BackingField
    // Size: 0x1
    // Offset: 0x14
    bool IsPerforming;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <IsComplete>k__BackingField
    // Size: 0x1
    // Offset: 0x15
    bool IsComplete;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: IsComplete and: ResponseCode
    char __padding2[0x2] = {};
    // private System.Int32 <ResponseCode>k__BackingField
    // Size: 0x4
    // Offset: 0x18
    int ResponseCode;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single <UploadProgress>k__BackingField
    // Size: 0x4
    // Offset: 0x1C
    float UploadProgress;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single <DownloadProgress>k__BackingField
    // Size: 0x4
    // Offset: 0x20
    float DownloadProgress;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: DownloadProgress and: request
    char __padding5[0x4] = {};
    // private UnityEngine.Networking.UnityWebRequest _request
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Networking::UnityWebRequest* request;
    // Field size check
    static_assert(sizeof(::UnityEngine::Networking::UnityWebRequest*) == 0x8);
    // private Meta.WitAi.Requests.VRequest/RequestProgressDelegate _onDownloadProgress
    // Size: 0x8
    // Offset: 0x30
    ::Meta::WitAi::Requests::VRequest::RequestProgressDelegate* onDownloadProgress;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::Requests::VRequest::RequestProgressDelegate*) == 0x8);
    // private Meta.WitAi.Requests.VRequest/RequestFirstResponseDelegate _onFirstResponse
    // Size: 0x8
    // Offset: 0x38
    ::Meta::WitAi::Requests::VRequest::RequestFirstResponseDelegate* onFirstResponse;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::Requests::VRequest::RequestFirstResponseDelegate*) == 0x8);
    // private Meta.WitAi.Requests.VRequest/RequestCompleteDelegate`1<UnityEngine.Networking.UnityWebRequest> _onComplete
    // Size: 0x8
    // Offset: 0x40
    ::Meta::WitAi::Requests::VRequest::RequestCompleteDelegate_1<::UnityEngine::Networking::UnityWebRequest*>* onComplete;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::Requests::VRequest::RequestCompleteDelegate_1<::UnityEngine::Networking::UnityWebRequest*>*) == 0x8);
    // private Meta.WitAi.CoroutineUtility/CoroutinePerformer _coroutine
    // Size: 0x8
    // Offset: 0x48
    ::Meta::WitAi::CoroutineUtility::CoroutinePerformer* coroutine;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::CoroutineUtility::CoroutinePerformer*) == 0x8);
    public:
    // Get static field: static public System.Int32 MaxConcurrentRequests
    static int _get_MaxConcurrentRequests();
    // Set static field: static public System.Int32 MaxConcurrentRequests
    static void _set_MaxConcurrentRequests(int value);
    // Get static field: static private System.Int32 _requestCount
    static int _get__requestCount();
    // Set static field: static private System.Int32 _requestCount
    static void _set__requestCount(int value);
    // Get instance field reference: private System.Int32 <Timeout>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$Timeout$k__BackingField();
    // Get instance field reference: private System.Boolean <IsPerforming>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$IsPerforming$k__BackingField();
    // Get instance field reference: private System.Boolean <IsComplete>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$IsComplete$k__BackingField();
    // Get instance field reference: private System.Int32 <ResponseCode>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$ResponseCode$k__BackingField();
    // Get instance field reference: private System.Single <UploadProgress>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$UploadProgress$k__BackingField();
    // Get instance field reference: private System.Single <DownloadProgress>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$DownloadProgress$k__BackingField();
    // Get instance field reference: private UnityEngine.Networking.UnityWebRequest _request
    [[deprecated("Use field access instead!")]] ::UnityEngine::Networking::UnityWebRequest*& dyn__request();
    // Get instance field reference: private Meta.WitAi.Requests.VRequest/RequestProgressDelegate _onDownloadProgress
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::Requests::VRequest::RequestProgressDelegate*& dyn__onDownloadProgress();
    // Get instance field reference: private Meta.WitAi.Requests.VRequest/RequestFirstResponseDelegate _onFirstResponse
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::Requests::VRequest::RequestFirstResponseDelegate*& dyn__onFirstResponse();
    // Get instance field reference: private Meta.WitAi.Requests.VRequest/RequestCompleteDelegate`1<UnityEngine.Networking.UnityWebRequest> _onComplete
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::Requests::VRequest::RequestCompleteDelegate_1<::UnityEngine::Networking::UnityWebRequest*>*& dyn__onComplete();
    // Get instance field reference: private Meta.WitAi.CoroutineUtility/CoroutinePerformer _coroutine
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::CoroutineUtility::CoroutinePerformer*& dyn__coroutine();
    // public System.Int32 get_Timeout()
    // Offset: 0x4441C9C
    int get_Timeout();
    // public System.Void set_Timeout(System.Int32 value)
    // Offset: 0x4441CA4
    void set_Timeout(int value);
    // public System.Boolean get_IsPerforming()
    // Offset: 0x4441CAC
    bool get_IsPerforming();
    // private System.Void set_IsPerforming(System.Boolean value)
    // Offset: 0x4441CB4
    void set_IsPerforming(bool value);
    // public System.Boolean get_IsComplete()
    // Offset: 0x4441CC0
    bool get_IsComplete();
    // private System.Void set_IsComplete(System.Boolean value)
    // Offset: 0x4441CC8
    void set_IsComplete(bool value);
    // public System.Int32 get_ResponseCode()
    // Offset: 0x4441CD4
    int get_ResponseCode();
    // public System.Void set_ResponseCode(System.Int32 value)
    // Offset: 0x4441CDC
    void set_ResponseCode(int value);
    // public System.Single get_UploadProgress()
    // Offset: 0x4441CE4
    float get_UploadProgress();
    // private System.Void set_UploadProgress(System.Single value)
    // Offset: 0x4441CEC
    void set_UploadProgress(float value);
    // public System.Single get_DownloadProgress()
    // Offset: 0x4441CF4
    float get_DownloadProgress();
    // private System.Void set_DownloadProgress(System.Single value)
    // Offset: 0x4441CFC
    void set_DownloadProgress(float value);
    // public System.Void .ctor(Meta.WitAi.Requests.VRequest/RequestProgressDelegate onDownloadProgress, Meta.WitAi.Requests.VRequest/RequestFirstResponseDelegate onFirstResponse)
    // Offset: 0x4441D04
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VRequest* New_ctor(::Meta::WitAi::Requests::VRequest::RequestProgressDelegate* onDownloadProgress, ::Meta::WitAi::Requests::VRequest::RequestFirstResponseDelegate* onFirstResponse) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Requests::VRequest::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VRequest*, creationType>(onDownloadProgress, onFirstResponse)));
    }
    // public System.Boolean Request(UnityEngine.Networking.UnityWebRequest unityRequest, Meta.WitAi.Requests.VRequest/RequestCompleteDelegate`1<UnityEngine.Networking.UnityWebRequest> onComplete)
    // Offset: 0x4441D50
    bool Request(::UnityEngine::Networking::UnityWebRequest* unityRequest, ::Meta::WitAi::Requests::VRequest::RequestCompleteDelegate_1<::UnityEngine::Networking::UnityWebRequest*>* onComplete);
    // public System.String CleanUrl(System.String url)
    // Offset: 0x4441FD4
    ::StringW CleanUrl(::StringW url);
    // protected System.Collections.Generic.Dictionary`2<System.String,System.String> GetHeaders()
    // Offset: 0x444207C
    ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* GetHeaders();
    // protected System.Collections.IEnumerator PerformUpdate()
    // Offset: 0x4442084
    ::System::Collections::IEnumerator* PerformUpdate();
    // protected System.Void Begin()
    // Offset: 0x4442118
    void Begin();
    // protected System.Boolean IsRequestComplete()
    // Offset: 0x4442160
    bool IsRequestComplete();
    // protected System.Void Complete()
    // Offset: 0x4442294
    void Complete();
    // public System.Void Cancel()
    // Offset: 0x44425F8
    void Cancel();
    // protected System.Void Unload()
    // Offset: 0x4442698
    void Unload();
    // static public System.String GetSpecificRequestError(UnityEngine.Networking.UnityWebRequest request)
    // Offset: 0x4442378
    static ::StringW GetSpecificRequestError(::UnityEngine::Networking::UnityWebRequest* request);
    // public System.Boolean RequestFileHeaders(System.Uri uri, Meta.WitAi.Requests.VRequest/RequestCompleteDelegate`1<System.Collections.Generic.Dictionary`2<System.String,System.String>> onComplete)
    // Offset: 0x4443054
    bool RequestFileHeaders(::System::Uri* uri, ::Meta::WitAi::Requests::VRequest::RequestCompleteDelegate_1<::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*>* onComplete);
    // public System.Boolean RequestFile(System.Uri uri, Meta.WitAi.Requests.VRequest/RequestCompleteDelegate`1<System.Byte[]> onComplete)
    // Offset: 0x444314C
    bool RequestFile(::System::Uri* uri, ::Meta::WitAi::Requests::VRequest::RequestCompleteDelegate_1<::ArrayW<uint8_t>>* onComplete);
    // public System.Boolean RequestFileDownload(System.String downloadPath, UnityEngine.Networking.UnityWebRequest unityRequest, Meta.WitAi.Requests.VRequest/RequestCompleteDelegate`1<System.Boolean> onComplete)
    // Offset: 0x4443244
    bool RequestFileDownload(::StringW downloadPath, ::UnityEngine::Networking::UnityWebRequest* unityRequest, ::Meta::WitAi::Requests::VRequest::RequestCompleteDelegate_1<bool>* onComplete);
    // public System.Boolean RequestFileExists(System.String checkPath, Meta.WitAi.Requests.VRequest/RequestCompleteDelegate`1<System.Boolean> onComplete)
    // Offset: 0x44434C8
    bool RequestFileExists(::StringW checkPath, ::Meta::WitAi::Requests::VRequest::RequestCompleteDelegate_1<bool>* onComplete);
    // public System.Boolean RequestText(UnityEngine.Networking.UnityWebRequest unityRequest, Meta.WitAi.Requests.VRequest/RequestCompleteDelegate`1<System.String> onComplete)
    // Offset: 0x4443838
    bool RequestText(::UnityEngine::Networking::UnityWebRequest* unityRequest, ::Meta::WitAi::Requests::VRequest::RequestCompleteDelegate_1<::StringW>* onComplete);
    // public System.Boolean RequestJson(UnityEngine.Networking.UnityWebRequest unityRequest, Meta.WitAi.Requests.VRequest/RequestCompleteDelegate`1<TData> onComplete)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TData>
    bool RequestJson(::UnityEngine::Networking::UnityWebRequest* unityRequest, ::Meta::WitAi::Requests::VRequest::RequestCompleteDelegate_1<TData>* onComplete) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Requests::VRequest::RequestJson");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RequestJson", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TData>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unityRequest), ::il2cpp_utils::ExtractType(onComplete)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TData>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___generic__method, unityRequest, onComplete);
    }
    // public System.Boolean RequestJsonGet(System.Uri uri, Meta.WitAi.Requests.VRequest/RequestCompleteDelegate`1<TData> onComplete)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TData>
    bool RequestJsonGet(::System::Uri* uri, ::Meta::WitAi::Requests::VRequest::RequestCompleteDelegate_1<TData>* onComplete) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Requests::VRequest::RequestJsonGet");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RequestJsonGet", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TData>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(uri), ::il2cpp_utils::ExtractType(onComplete)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TData>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___generic__method, uri, onComplete);
    }
    // public System.Boolean RequestJsonPost(System.Uri uri, System.Byte[] postData, Meta.WitAi.Requests.VRequest/RequestCompleteDelegate`1<TData> onComplete)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TData>
    bool RequestJsonPost(::System::Uri* uri, ::ArrayW<uint8_t> postData, ::Meta::WitAi::Requests::VRequest::RequestCompleteDelegate_1<TData>* onComplete) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Requests::VRequest::RequestJsonPost");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RequestJsonPost", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TData>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(uri), ::il2cpp_utils::ExtractType(postData), ::il2cpp_utils::ExtractType(onComplete)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TData>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___generic__method, uri, postData, onComplete);
    }
    // public System.Boolean RequestJsonPost(System.Uri uri, System.String postText, Meta.WitAi.Requests.VRequest/RequestCompleteDelegate`1<TData> onComplete)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TData>
    bool RequestJsonPost(::System::Uri* uri, ::StringW postText, ::Meta::WitAi::Requests::VRequest::RequestCompleteDelegate_1<TData>* onComplete) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Requests::VRequest::RequestJsonPost");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RequestJsonPost", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TData>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(uri), ::il2cpp_utils::ExtractType(postText), ::il2cpp_utils::ExtractType(onComplete)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TData>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___generic__method, uri, postText, onComplete);
    }
    // public System.Boolean RequestJsonPut(System.Uri uri, System.Byte[] putData, Meta.WitAi.Requests.VRequest/RequestCompleteDelegate`1<TData> onComplete)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TData>
    bool RequestJsonPut(::System::Uri* uri, ::ArrayW<uint8_t> putData, ::Meta::WitAi::Requests::VRequest::RequestCompleteDelegate_1<TData>* onComplete) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Requests::VRequest::RequestJsonPut");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RequestJsonPut", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TData>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(uri), ::il2cpp_utils::ExtractType(putData), ::il2cpp_utils::ExtractType(onComplete)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TData>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___generic__method, uri, putData, onComplete);
    }
    // public System.Boolean RequestJsonPut(System.Uri uri, System.String putText, Meta.WitAi.Requests.VRequest/RequestCompleteDelegate`1<TData> onComplete)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TData>
    bool RequestJsonPut(::System::Uri* uri, ::StringW putText, ::Meta::WitAi::Requests::VRequest::RequestCompleteDelegate_1<TData>* onComplete) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Requests::VRequest::RequestJsonPut");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RequestJsonPut", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TData>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(uri), ::il2cpp_utils::ExtractType(putText), ::il2cpp_utils::ExtractType(onComplete)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TData>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___generic__method, uri, putText, onComplete);
    }
    // public System.Boolean RequestAudioStream(Meta.Voice.Audio.IAudioClipStream clipStream, UnityEngine.Networking.UnityWebRequest unityRequest, Meta.WitAi.Requests.VRequest/RequestCompleteDelegate`1<Meta.Voice.Audio.IAudioClipStream> onClipStreamReady, UnityEngine.AudioType audioType, System.Boolean audioStream)
    // Offset: 0x444391C
    bool RequestAudioStream(::Meta::Voice::Audio::IAudioClipStream* clipStream, ::UnityEngine::Networking::UnityWebRequest* unityRequest, ::Meta::WitAi::Requests::VRequest::RequestCompleteDelegate_1<::Meta::Voice::Audio::IAudioClipStream*>* onClipStreamReady, ::UnityEngine::AudioType audioType, bool audioStream);
    // private System.Void OnRequestAudioReady(Meta.Voice.Audio.IAudioClipStream clipStream, UnityEngine.AudioType audioType, UnityEngine.Networking.UnityWebRequest request, System.String error, Meta.WitAi.Requests.VRequest/RequestCompleteDelegate`1<Meta.Voice.Audio.IAudioClipStream> onClipStreamReady)
    // Offset: 0x4443C38
    void OnRequestAudioReady(::Meta::Voice::Audio::IAudioClipStream* clipStream, ::UnityEngine::AudioType audioType, ::UnityEngine::Networking::UnityWebRequest* request, ::StringW error, ::Meta::WitAi::Requests::VRequest::RequestCompleteDelegate_1<::Meta::Voice::Audio::IAudioClipStream*>* onClipStreamReady);
    // public System.Boolean RequestAudioStream(Meta.Voice.Audio.IAudioClipStream clipStream, System.Uri uri, Meta.WitAi.Requests.VRequest/RequestCompleteDelegate`1<Meta.Voice.Audio.IAudioClipStream> onClipReady, UnityEngine.AudioType audioType, System.Boolean audioStream)
    // Offset: 0x444427C
    bool RequestAudioStream(::Meta::Voice::Audio::IAudioClipStream* clipStream, ::System::Uri* uri, ::Meta::WitAi::Requests::VRequest::RequestCompleteDelegate_1<::Meta::Voice::Audio::IAudioClipStream*>* onClipReady, ::UnityEngine::AudioType audioType, bool audioStream);
    // static private System.Void .cctor()
    // Offset: 0x4444330
    static void _cctor();
  }; // Meta.WitAi.Requests.VRequest
  #pragma pack(pop)
  static check_size<sizeof(VRequest), 72 + sizeof(::Meta::WitAi::CoroutineUtility::CoroutinePerformer*)> __Meta_WitAi_Requests_VRequestSizeCheck;
  static_assert(sizeof(VRequest) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::WitAi::Requests::VRequest::get_Timeout
// Il2CppName: get_Timeout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Meta::WitAi::Requests::VRequest::*)()>(&Meta::WitAi::Requests::VRequest::get_Timeout)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Requests::VRequest*), "get_Timeout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Requests::VRequest::set_Timeout
// Il2CppName: set_Timeout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Requests::VRequest::*)(int)>(&Meta::WitAi::Requests::VRequest::set_Timeout)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Requests::VRequest*), "set_Timeout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Requests::VRequest::get_IsPerforming
// Il2CppName: get_IsPerforming
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::Requests::VRequest::*)()>(&Meta::WitAi::Requests::VRequest::get_IsPerforming)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Requests::VRequest*), "get_IsPerforming", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Requests::VRequest::set_IsPerforming
// Il2CppName: set_IsPerforming
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Requests::VRequest::*)(bool)>(&Meta::WitAi::Requests::VRequest::set_IsPerforming)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Requests::VRequest*), "set_IsPerforming", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Requests::VRequest::get_IsComplete
// Il2CppName: get_IsComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::Requests::VRequest::*)()>(&Meta::WitAi::Requests::VRequest::get_IsComplete)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Requests::VRequest*), "get_IsComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Requests::VRequest::set_IsComplete
// Il2CppName: set_IsComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Requests::VRequest::*)(bool)>(&Meta::WitAi::Requests::VRequest::set_IsComplete)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Requests::VRequest*), "set_IsComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Requests::VRequest::get_ResponseCode
// Il2CppName: get_ResponseCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Meta::WitAi::Requests::VRequest::*)()>(&Meta::WitAi::Requests::VRequest::get_ResponseCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Requests::VRequest*), "get_ResponseCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Requests::VRequest::set_ResponseCode
// Il2CppName: set_ResponseCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Requests::VRequest::*)(int)>(&Meta::WitAi::Requests::VRequest::set_ResponseCode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Requests::VRequest*), "set_ResponseCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Requests::VRequest::get_UploadProgress
// Il2CppName: get_UploadProgress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Meta::WitAi::Requests::VRequest::*)()>(&Meta::WitAi::Requests::VRequest::get_UploadProgress)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Requests::VRequest*), "get_UploadProgress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Requests::VRequest::set_UploadProgress
// Il2CppName: set_UploadProgress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Requests::VRequest::*)(float)>(&Meta::WitAi::Requests::VRequest::set_UploadProgress)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Requests::VRequest*), "set_UploadProgress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Requests::VRequest::get_DownloadProgress
// Il2CppName: get_DownloadProgress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Meta::WitAi::Requests::VRequest::*)()>(&Meta::WitAi::Requests::VRequest::get_DownloadProgress)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Requests::VRequest*), "get_DownloadProgress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Requests::VRequest::set_DownloadProgress
// Il2CppName: set_DownloadProgress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Requests::VRequest::*)(float)>(&Meta::WitAi::Requests::VRequest::set_DownloadProgress)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Requests::VRequest*), "set_DownloadProgress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Requests::VRequest::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Meta::WitAi::Requests::VRequest::Request
// Il2CppName: Request
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::Requests::VRequest::*)(::UnityEngine::Networking::UnityWebRequest*, ::Meta::WitAi::Requests::VRequest::RequestCompleteDelegate_1<::UnityEngine::Networking::UnityWebRequest*>*)>(&Meta::WitAi::Requests::VRequest::Request)> {
  static const MethodInfo* get() {
    static auto* unityRequest = &::il2cpp_utils::GetClassFromName("UnityEngine.Networking", "UnityWebRequest")->byval_arg;
    static auto* onComplete = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Meta.WitAi.Requests", "VRequest/RequestCompleteDelegate`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.Networking", "UnityWebRequest")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Requests::VRequest*), "Request", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{unityRequest, onComplete});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Requests::VRequest::CleanUrl
// Il2CppName: CleanUrl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Meta::WitAi::Requests::VRequest::*)(::StringW)>(&Meta::WitAi::Requests::VRequest::CleanUrl)> {
  static const MethodInfo* get() {
    static auto* url = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Requests::VRequest*), "CleanUrl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{url});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Requests::VRequest::GetHeaders
// Il2CppName: GetHeaders
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* (Meta::WitAi::Requests::VRequest::*)()>(&Meta::WitAi::Requests::VRequest::GetHeaders)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Requests::VRequest*), "GetHeaders", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Requests::VRequest::PerformUpdate
// Il2CppName: PerformUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (Meta::WitAi::Requests::VRequest::*)()>(&Meta::WitAi::Requests::VRequest::PerformUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Requests::VRequest*), "PerformUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Requests::VRequest::Begin
// Il2CppName: Begin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Requests::VRequest::*)()>(&Meta::WitAi::Requests::VRequest::Begin)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Requests::VRequest*), "Begin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Requests::VRequest::IsRequestComplete
// Il2CppName: IsRequestComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::Requests::VRequest::*)()>(&Meta::WitAi::Requests::VRequest::IsRequestComplete)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Requests::VRequest*), "IsRequestComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Requests::VRequest::Complete
// Il2CppName: Complete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Requests::VRequest::*)()>(&Meta::WitAi::Requests::VRequest::Complete)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Requests::VRequest*), "Complete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Requests::VRequest::Cancel
// Il2CppName: Cancel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Requests::VRequest::*)()>(&Meta::WitAi::Requests::VRequest::Cancel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Requests::VRequest*), "Cancel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Requests::VRequest::Unload
// Il2CppName: Unload
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Requests::VRequest::*)()>(&Meta::WitAi::Requests::VRequest::Unload)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Requests::VRequest*), "Unload", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Requests::VRequest::GetSpecificRequestError
// Il2CppName: GetSpecificRequestError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::UnityEngine::Networking::UnityWebRequest*)>(&Meta::WitAi::Requests::VRequest::GetSpecificRequestError)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("UnityEngine.Networking", "UnityWebRequest")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Requests::VRequest*), "GetSpecificRequestError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Requests::VRequest::RequestFileHeaders
// Il2CppName: RequestFileHeaders
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::Requests::VRequest::*)(::System::Uri*, ::Meta::WitAi::Requests::VRequest::RequestCompleteDelegate_1<::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*>*)>(&Meta::WitAi::Requests::VRequest::RequestFileHeaders)> {
  static const MethodInfo* get() {
    static auto* uri = &::il2cpp_utils::GetClassFromName("System", "Uri")->byval_arg;
    static auto* onComplete = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Meta.WitAi.Requests", "VRequest/RequestCompleteDelegate`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Requests::VRequest*), "RequestFileHeaders", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uri, onComplete});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Requests::VRequest::RequestFile
// Il2CppName: RequestFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::Requests::VRequest::*)(::System::Uri*, ::Meta::WitAi::Requests::VRequest::RequestCompleteDelegate_1<::ArrayW<uint8_t>>*)>(&Meta::WitAi::Requests::VRequest::RequestFile)> {
  static const MethodInfo* get() {
    static auto* uri = &::il2cpp_utils::GetClassFromName("System", "Uri")->byval_arg;
    static auto* onComplete = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Meta.WitAi.Requests", "VRequest/RequestCompleteDelegate`1"), ::std::vector<const Il2CppClass*>{il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Requests::VRequest*), "RequestFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uri, onComplete});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Requests::VRequest::RequestFileDownload
// Il2CppName: RequestFileDownload
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::Requests::VRequest::*)(::StringW, ::UnityEngine::Networking::UnityWebRequest*, ::Meta::WitAi::Requests::VRequest::RequestCompleteDelegate_1<bool>*)>(&Meta::WitAi::Requests::VRequest::RequestFileDownload)> {
  static const MethodInfo* get() {
    static auto* downloadPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* unityRequest = &::il2cpp_utils::GetClassFromName("UnityEngine.Networking", "UnityWebRequest")->byval_arg;
    static auto* onComplete = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Meta.WitAi.Requests", "VRequest/RequestCompleteDelegate`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Requests::VRequest*), "RequestFileDownload", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{downloadPath, unityRequest, onComplete});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Requests::VRequest::RequestFileExists
// Il2CppName: RequestFileExists
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::Requests::VRequest::*)(::StringW, ::Meta::WitAi::Requests::VRequest::RequestCompleteDelegate_1<bool>*)>(&Meta::WitAi::Requests::VRequest::RequestFileExists)> {
  static const MethodInfo* get() {
    static auto* checkPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* onComplete = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Meta.WitAi.Requests", "VRequest/RequestCompleteDelegate`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Requests::VRequest*), "RequestFileExists", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{checkPath, onComplete});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Requests::VRequest::RequestText
// Il2CppName: RequestText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::Requests::VRequest::*)(::UnityEngine::Networking::UnityWebRequest*, ::Meta::WitAi::Requests::VRequest::RequestCompleteDelegate_1<::StringW>*)>(&Meta::WitAi::Requests::VRequest::RequestText)> {
  static const MethodInfo* get() {
    static auto* unityRequest = &::il2cpp_utils::GetClassFromName("UnityEngine.Networking", "UnityWebRequest")->byval_arg;
    static auto* onComplete = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Meta.WitAi.Requests", "VRequest/RequestCompleteDelegate`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Requests::VRequest*), "RequestText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{unityRequest, onComplete});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Requests::VRequest::RequestJson
// Il2CppName: RequestJson
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Meta::WitAi::Requests::VRequest::RequestJsonGet
// Il2CppName: RequestJsonGet
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Meta::WitAi::Requests::VRequest::RequestJsonPost
// Il2CppName: RequestJsonPost
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Meta::WitAi::Requests::VRequest::RequestJsonPost
// Il2CppName: RequestJsonPost
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Meta::WitAi::Requests::VRequest::RequestJsonPut
// Il2CppName: RequestJsonPut
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Meta::WitAi::Requests::VRequest::RequestJsonPut
// Il2CppName: RequestJsonPut
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Meta::WitAi::Requests::VRequest::RequestAudioStream
// Il2CppName: RequestAudioStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::Requests::VRequest::*)(::Meta::Voice::Audio::IAudioClipStream*, ::UnityEngine::Networking::UnityWebRequest*, ::Meta::WitAi::Requests::VRequest::RequestCompleteDelegate_1<::Meta::Voice::Audio::IAudioClipStream*>*, ::UnityEngine::AudioType, bool)>(&Meta::WitAi::Requests::VRequest::RequestAudioStream)> {
  static const MethodInfo* get() {
    static auto* clipStream = &::il2cpp_utils::GetClassFromName("Meta.Voice.Audio", "IAudioClipStream")->byval_arg;
    static auto* unityRequest = &::il2cpp_utils::GetClassFromName("UnityEngine.Networking", "UnityWebRequest")->byval_arg;
    static auto* onClipStreamReady = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Meta.WitAi.Requests", "VRequest/RequestCompleteDelegate`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Meta.Voice.Audio", "IAudioClipStream")})->byval_arg;
    static auto* audioType = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioType")->byval_arg;
    static auto* audioStream = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Requests::VRequest*), "RequestAudioStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clipStream, unityRequest, onClipStreamReady, audioType, audioStream});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Requests::VRequest::OnRequestAudioReady
// Il2CppName: OnRequestAudioReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Requests::VRequest::*)(::Meta::Voice::Audio::IAudioClipStream*, ::UnityEngine::AudioType, ::UnityEngine::Networking::UnityWebRequest*, ::StringW, ::Meta::WitAi::Requests::VRequest::RequestCompleteDelegate_1<::Meta::Voice::Audio::IAudioClipStream*>*)>(&Meta::WitAi::Requests::VRequest::OnRequestAudioReady)> {
  static const MethodInfo* get() {
    static auto* clipStream = &::il2cpp_utils::GetClassFromName("Meta.Voice.Audio", "IAudioClipStream")->byval_arg;
    static auto* audioType = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioType")->byval_arg;
    static auto* request = &::il2cpp_utils::GetClassFromName("UnityEngine.Networking", "UnityWebRequest")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* onClipStreamReady = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Meta.WitAi.Requests", "VRequest/RequestCompleteDelegate`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Meta.Voice.Audio", "IAudioClipStream")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Requests::VRequest*), "OnRequestAudioReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clipStream, audioType, request, error, onClipStreamReady});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Requests::VRequest::RequestAudioStream
// Il2CppName: RequestAudioStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::Requests::VRequest::*)(::Meta::Voice::Audio::IAudioClipStream*, ::System::Uri*, ::Meta::WitAi::Requests::VRequest::RequestCompleteDelegate_1<::Meta::Voice::Audio::IAudioClipStream*>*, ::UnityEngine::AudioType, bool)>(&Meta::WitAi::Requests::VRequest::RequestAudioStream)> {
  static const MethodInfo* get() {
    static auto* clipStream = &::il2cpp_utils::GetClassFromName("Meta.Voice.Audio", "IAudioClipStream")->byval_arg;
    static auto* uri = &::il2cpp_utils::GetClassFromName("System", "Uri")->byval_arg;
    static auto* onClipReady = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Meta.WitAi.Requests", "VRequest/RequestCompleteDelegate`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Meta.Voice.Audio", "IAudioClipStream")})->byval_arg;
    static auto* audioType = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioType")->byval_arg;
    static auto* audioStream = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Requests::VRequest*), "RequestAudioStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clipStream, uri, onClipReady, audioType, audioStream});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Requests::VRequest::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Meta::WitAi::Requests::VRequest::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Requests::VRequest*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
