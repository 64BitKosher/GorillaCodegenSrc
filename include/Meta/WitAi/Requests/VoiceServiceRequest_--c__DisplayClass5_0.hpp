// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Meta.WitAi.Requests.VoiceServiceRequest
#include "Meta/WitAi/Requests/VoiceServiceRequest.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Meta::WitAi::Json
namespace Meta::WitAi::Json {
  // Forward declaring type: WitResponseNode
  class WitResponseNode;
}
// Forward declaring namespace: System::Diagnostics
namespace System::Diagnostics {
  // Forward declaring type: StackTrace
  class StackTrace;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::WitAi::Requests::VoiceServiceRequest::$$c__DisplayClass5_0);
DEFINE_IL2CPP_ARG_TYPE(::Meta::WitAi::Requests::VoiceServiceRequest::$$c__DisplayClass5_0*, "Meta.WitAi.Requests", "VoiceServiceRequest/<>c__DisplayClass5_0");
// Type namespace: Meta.WitAi.Requests
namespace Meta::WitAi::Requests {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: Meta.WitAi.Requests.VoiceServiceRequest/<>c__DisplayClass5_0
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  class VoiceServiceRequest::$$c__DisplayClass5_0 : public ::Il2CppObject {
    public:
    public:
    // public Meta.WitAi.Json.WitResponseNode lastResponseData
    // Size: 0x8
    // Offset: 0x10
    ::Meta::WitAi::Json::WitResponseNode* lastResponseData;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::Json::WitResponseNode*) == 0x8);
    // public Meta.WitAi.Requests.VoiceServiceRequest <>4__this
    // Size: 0x8
    // Offset: 0x18
    ::Meta::WitAi::Requests::VoiceServiceRequest* $$4__this;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::Requests::VoiceServiceRequest*) == 0x8);
    // public System.String statusDescription
    // Size: 0x8
    // Offset: 0x20
    ::StringW statusDescription;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Diagnostics.StackTrace stackTrace
    // Size: 0x8
    // Offset: 0x28
    ::System::Diagnostics::StackTrace* stackTrace;
    // Field size check
    static_assert(sizeof(::System::Diagnostics::StackTrace*) == 0x8);
    public:
    // Get instance field reference: public Meta.WitAi.Json.WitResponseNode lastResponseData
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::Json::WitResponseNode*& dyn_lastResponseData();
    // Get instance field reference: public Meta.WitAi.Requests.VoiceServiceRequest <>4__this
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::Requests::VoiceServiceRequest*& dyn_$$4__this();
    // Get instance field reference: public System.String statusDescription
    [[deprecated("Use field access instead!")]] ::StringW& dyn_statusDescription();
    // Get instance field reference: public System.Diagnostics.StackTrace stackTrace
    [[deprecated("Use field access instead!")]] ::System::Diagnostics::StackTrace*& dyn_stackTrace();
    // public System.Void .ctor()
    // Offset: 0x4438364
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VoiceServiceRequest::$$c__DisplayClass5_0* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Requests::VoiceServiceRequest::$$c__DisplayClass5_0::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VoiceServiceRequest::$$c__DisplayClass5_0*, creationType>()));
    }
    // System.Void <SimulateResponse>b__0()
    // Offset: 0x443836C
    void $SimulateResponse$b__0();
  }; // Meta.WitAi.Requests.VoiceServiceRequest/<>c__DisplayClass5_0
  #pragma pack(pop)
  static check_size<sizeof(VoiceServiceRequest::$$c__DisplayClass5_0), 40 + sizeof(::System::Diagnostics::StackTrace*)> __Meta_WitAi_Requests_VoiceServiceRequest_$$c__DisplayClass5_0SizeCheck;
  static_assert(sizeof(VoiceServiceRequest::$$c__DisplayClass5_0) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::WitAi::Requests::VoiceServiceRequest::$$c__DisplayClass5_0::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Meta::WitAi::Requests::VoiceServiceRequest::$$c__DisplayClass5_0::$SimulateResponse$b__0
// Il2CppName: <SimulateResponse>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Requests::VoiceServiceRequest::$$c__DisplayClass5_0::*)()>(&Meta::WitAi::Requests::VoiceServiceRequest::$$c__DisplayClass5_0::$SimulateResponse$b__0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Requests::VoiceServiceRequest::$$c__DisplayClass5_0*), "<SimulateResponse>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
