// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Meta.WitAi.Requests.VRequest
#include "Meta/WitAi/Requests/VRequest.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::WitAi::Requests::VRequest::$$c__DisplayClass48_0);
DEFINE_IL2CPP_ARG_TYPE(::Meta::WitAi::Requests::VRequest::$$c__DisplayClass48_0*, "Meta.WitAi.Requests", "VRequest/<>c__DisplayClass48_0");
// Type namespace: Meta.WitAi.Requests
namespace Meta::WitAi::Requests {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Meta.WitAi.Requests.VRequest/<>c__DisplayClass48_0
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  class VRequest::$$c__DisplayClass48_0 : public ::Il2CppObject {
    public:
    public:
    // public Meta.WitAi.Requests.VRequest/RequestCompleteDelegate`1<System.Boolean> onComplete
    // Size: 0x8
    // Offset: 0x10
    ::Meta::WitAi::Requests::VRequest::RequestCompleteDelegate_1<bool>* onComplete;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::Requests::VRequest::RequestCompleteDelegate_1<bool>*) == 0x8);
    // public Meta.WitAi.Requests.VRequest <>4__this
    // Size: 0x8
    // Offset: 0x18
    ::Meta::WitAi::Requests::VRequest* $$4__this;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::Requests::VRequest*) == 0x8);
    public:
    // Get instance field reference: public Meta.WitAi.Requests.VRequest/RequestCompleteDelegate`1<System.Boolean> onComplete
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::Requests::VRequest::RequestCompleteDelegate_1<bool>*& dyn_onComplete();
    // Get instance field reference: public Meta.WitAi.Requests.VRequest <>4__this
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::Requests::VRequest*& dyn_$$4__this();
    // public System.Void .ctor()
    // Offset: 0x4443790
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VRequest::$$c__DisplayClass48_0* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::Requests::VRequest::$$c__DisplayClass48_0::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VRequest::$$c__DisplayClass48_0*, creationType>()));
    }
    // System.Void <RequestFileExists>b__0(System.Collections.Generic.Dictionary`2<System.String,System.String> headers, System.String error)
    // Offset: 0x4444878
    void $RequestFileExists$b__0(::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* headers, ::StringW error);
    // System.Void <RequestFileExists>b__1(System.Single progress)
    // Offset: 0x444489C
    void $RequestFileExists$b__1(float progress);
    // System.Void <RequestFileExists>b__2(System.Byte[] response, System.String error)
    // Offset: 0x444497C
    void $RequestFileExists$b__2(::ArrayW<uint8_t> response, ::StringW error);
  }; // Meta.WitAi.Requests.VRequest/<>c__DisplayClass48_0
  #pragma pack(pop)
  static check_size<sizeof(VRequest::$$c__DisplayClass48_0), 24 + sizeof(::Meta::WitAi::Requests::VRequest*)> __Meta_WitAi_Requests_VRequest_$$c__DisplayClass48_0SizeCheck;
  static_assert(sizeof(VRequest::$$c__DisplayClass48_0) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::WitAi::Requests::VRequest::$$c__DisplayClass48_0::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Meta::WitAi::Requests::VRequest::$$c__DisplayClass48_0::$RequestFileExists$b__0
// Il2CppName: <RequestFileExists>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Requests::VRequest::$$c__DisplayClass48_0::*)(::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*, ::StringW)>(&Meta::WitAi::Requests::VRequest::$$c__DisplayClass48_0::$RequestFileExists$b__0)> {
  static const MethodInfo* get() {
    static auto* headers = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Requests::VRequest::$$c__DisplayClass48_0*), "<RequestFileExists>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{headers, error});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Requests::VRequest::$$c__DisplayClass48_0::$RequestFileExists$b__1
// Il2CppName: <RequestFileExists>b__1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Requests::VRequest::$$c__DisplayClass48_0::*)(float)>(&Meta::WitAi::Requests::VRequest::$$c__DisplayClass48_0::$RequestFileExists$b__1)> {
  static const MethodInfo* get() {
    static auto* progress = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Requests::VRequest::$$c__DisplayClass48_0*), "<RequestFileExists>b__1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{progress});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::Requests::VRequest::$$c__DisplayClass48_0::$RequestFileExists$b__2
// Il2CppName: <RequestFileExists>b__2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::Requests::VRequest::$$c__DisplayClass48_0::*)(::ArrayW<uint8_t>, ::StringW)>(&Meta::WitAi::Requests::VRequest::$$c__DisplayClass48_0::$RequestFileExists$b__2)> {
  static const MethodInfo* get() {
    static auto* response = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::Requests::VRequest::$$c__DisplayClass48_0*), "<RequestFileExists>b__2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{response, error});
  }
};
