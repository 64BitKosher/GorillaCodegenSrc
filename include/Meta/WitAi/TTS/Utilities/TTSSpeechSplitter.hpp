// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Meta.WitAi.TTS.Interfaces.ISpeakerTextPreprocessor
#include "Meta/WitAi/TTS/Interfaces/ISpeakerTextPreprocessor.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Text::RegularExpressions
namespace System::Text::RegularExpressions {
  // Forward declaring type: Regex
  class Regex;
}
// Forward declaring namespace: Meta::WitAi::TTS::Utilities
namespace Meta::WitAi::TTS::Utilities {
  // Forward declaring type: TTSSpeaker
  class TTSSpeaker;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: Meta.WitAi.TTS.Utilities
namespace Meta::WitAi::TTS::Utilities {
  // Forward declaring type: TTSSpeechSplitter
  class TTSSpeechSplitter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::WitAi::TTS::Utilities::TTSSpeechSplitter);
DEFINE_IL2CPP_ARG_TYPE(::Meta::WitAi::TTS::Utilities::TTSSpeechSplitter*, "Meta.WitAi.TTS.Utilities", "TTSSpeechSplitter");
// Type namespace: Meta.WitAi.TTS.Utilities
namespace Meta::WitAi::TTS::Utilities {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: Meta.WitAi.TTS.Utilities.TTSSpeechSplitter
  // [TokenAttribute] Offset: FFFFFFFF
  class TTSSpeechSplitter : public ::UnityEngine::MonoBehaviour/*, public ::Meta::WitAi::TTS::Interfaces::ISpeakerTextPreprocessor*/ {
    public:
    public:
    // public System.Int32 MaxTextLength
    // Size: 0x4
    // Offset: 0x20
    int MaxTextLength;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: MaxTextLength and: cleaner
    char __padding0[0x4] = {};
    // private System.Text.RegularExpressions.Regex _cleaner
    // Size: 0x8
    // Offset: 0x28
    ::System::Text::RegularExpressions::Regex* cleaner;
    // Field size check
    static_assert(sizeof(::System::Text::RegularExpressions::Regex*) == 0x8);
    // private System.Text.RegularExpressions.Regex _sentenceSplitter
    // Size: 0x8
    // Offset: 0x30
    ::System::Text::RegularExpressions::Regex* sentenceSplitter;
    // Field size check
    static_assert(sizeof(::System::Text::RegularExpressions::Regex*) == 0x8);
    // private System.Text.RegularExpressions.Regex _wordSplitter
    // Size: 0x8
    // Offset: 0x38
    ::System::Text::RegularExpressions::Regex* wordSplitter;
    // Field size check
    static_assert(sizeof(::System::Text::RegularExpressions::Regex*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Meta::WitAi::TTS::Interfaces::ISpeakerTextPreprocessor
    operator ::Meta::WitAi::TTS::Interfaces::ISpeakerTextPreprocessor() noexcept {
      return *reinterpret_cast<::Meta::WitAi::TTS::Interfaces::ISpeakerTextPreprocessor*>(this);
    }
    // Get instance field reference: public System.Int32 MaxTextLength
    [[deprecated("Use field access instead!")]] int& dyn_MaxTextLength();
    // Get instance field reference: private System.Text.RegularExpressions.Regex _cleaner
    [[deprecated("Use field access instead!")]] ::System::Text::RegularExpressions::Regex*& dyn__cleaner();
    // Get instance field reference: private System.Text.RegularExpressions.Regex _sentenceSplitter
    [[deprecated("Use field access instead!")]] ::System::Text::RegularExpressions::Regex*& dyn__sentenceSplitter();
    // Get instance field reference: private System.Text.RegularExpressions.Regex _wordSplitter
    [[deprecated("Use field access instead!")]] ::System::Text::RegularExpressions::Regex*& dyn__wordSplitter();
    // public System.Void OnPreprocessTTS(Meta.WitAi.TTS.Utilities.TTSSpeaker speaker, System.Collections.Generic.List`1<System.String> phrases)
    // Offset: 0x4463808
    void OnPreprocessTTS(::Meta::WitAi::TTS::Utilities::TTSSpeaker* speaker, ::System::Collections::Generic::List_1<::StringW>* phrases);
    // public System.Void .ctor()
    // Offset: 0x4463DD0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TTSSpeechSplitter* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::TTS::Utilities::TTSSpeechSplitter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TTSSpeechSplitter*, creationType>()));
    }
  }; // Meta.WitAi.TTS.Utilities.TTSSpeechSplitter
  #pragma pack(pop)
  static check_size<sizeof(TTSSpeechSplitter), 56 + sizeof(::System::Text::RegularExpressions::Regex*)> __Meta_WitAi_TTS_Utilities_TTSSpeechSplitterSizeCheck;
  static_assert(sizeof(TTSSpeechSplitter) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeechSplitter::OnPreprocessTTS
// Il2CppName: OnPreprocessTTS
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::TTS::Utilities::TTSSpeechSplitter::*)(::Meta::WitAi::TTS::Utilities::TTSSpeaker*, ::System::Collections::Generic::List_1<::StringW>*)>(&Meta::WitAi::TTS::Utilities::TTSSpeechSplitter::OnPreprocessTTS)> {
  static const MethodInfo* get() {
    static auto* speaker = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Utilities", "TTSSpeaker")->byval_arg;
    static auto* phrases = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeechSplitter*), "OnPreprocessTTS", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{speaker, phrases});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeechSplitter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
