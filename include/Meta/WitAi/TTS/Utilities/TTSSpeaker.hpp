// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Meta.WitAi.Speech.ISpeechEventProvider
#include "Meta/WitAi/Speech/ISpeechEventProvider.hpp"
// Including type: System.DateTime
#include "System/DateTime.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Queue`1<T>
  template<typename T>
  class Queue_1;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: Meta::WitAi::TTS::Utilities
namespace Meta::WitAi::TTS::Utilities {
  // Forward declaring type: TTSSpeakerEvents
  class TTSSpeakerEvents;
  // Skipping declaration: TTSSpeakerRequestData because it is already included!
  // Forward declaring type: TTSSpeakerClipEvents
  class TTSSpeakerClipEvents;
}
// Forward declaring namespace: Meta::WitAi::TTS
namespace Meta::WitAi::TTS {
  // Forward declaring type: TTSService
  class TTSService;
}
// Forward declaring namespace: Meta::WitAi::TTS::Integrations
namespace Meta::WitAi::TTS::Integrations {
  // Forward declaring type: TTSWitVoiceSettings
  class TTSWitVoiceSettings;
}
// Forward declaring namespace: Meta::WitAi::TTS::Data
namespace Meta::WitAi::TTS::Data {
  // Forward declaring type: TTSVoiceSettings
  class TTSVoiceSettings;
  // Forward declaring type: TTSClipData
  class TTSClipData;
  // Forward declaring type: TTSDiskCacheSettings
  class TTSDiskCacheSettings;
}
// Forward declaring namespace: Meta::WitAi::TTS::Interfaces
namespace Meta::WitAi::TTS::Interfaces {
  // Forward declaring type: ISpeakerTextPreprocessor
  class ISpeakerTextPreprocessor;
  // Forward declaring type: ISpeakerTextPostprocessor
  class ISpeakerTextPostprocessor;
}
// Forward declaring namespace: Meta::Voice::Audio
namespace Meta::Voice::Audio {
  // Forward declaring type: IAudioPlayer
  class IAudioPlayer;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Coroutine
  class Coroutine;
  // Forward declaring type: AudioSource
  class AudioSource;
}
// Forward declaring namespace: Meta::WitAi::Speech
namespace Meta::WitAi::Speech {
  // Forward declaring type: VoiceSpeechEvents
  class VoiceSpeechEvents;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: Meta::WitAi::Json
namespace Meta::WitAi::Json {
  // Forward declaring type: WitResponseNode
  class WitResponseNode;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`2<T, TResult>
  template<typename T, typename TResult>
  class Func_2;
}
// Completed forward declares
// Type namespace: Meta.WitAi.TTS.Utilities
namespace Meta::WitAi::TTS::Utilities {
  // Forward declaring type: TTSSpeaker
  class TTSSpeaker;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::WitAi::TTS::Utilities::TTSSpeaker);
DEFINE_IL2CPP_ARG_TYPE(::Meta::WitAi::TTS::Utilities::TTSSpeaker*, "Meta.WitAi.TTS.Utilities", "TTSSpeaker");
// Type namespace: Meta.WitAi.TTS.Utilities
namespace Meta::WitAi::TTS::Utilities {
  // Size: 0xA9
  #pragma pack(push, 1)
  // Autogenerated type: Meta.WitAi.TTS.Utilities.TTSSpeaker
  // [TokenAttribute] Offset: FFFFFFFF
  class TTSSpeaker : public ::UnityEngine::MonoBehaviour/*, public ::Meta::WitAi::Speech::ISpeechEventProvider*/ {
    public:
    // Nested type: ::Meta::WitAi::TTS::Utilities::TTSSpeaker::TTSSpeakerRequestData
    struct TTSSpeakerRequestData;
    // Nested type: ::Meta::WitAi::TTS::Utilities::TTSSpeaker::$$c__DisplayClass104_0
    class $$c__DisplayClass104_0;
    // Nested type: ::Meta::WitAi::TTS::Utilities::TTSSpeaker::$$c__DisplayClass118_0
    class $$c__DisplayClass118_0;
    // Nested type: ::Meta::WitAi::TTS::Utilities::TTSSpeaker::$$c__DisplayClass119_0
    class $$c__DisplayClass119_0;
    // Nested type: ::Meta::WitAi::TTS::Utilities::TTSSpeaker::$$c__DisplayClass54_0
    class $$c__DisplayClass54_0;
    // Nested type: ::Meta::WitAi::TTS::Utilities::TTSSpeaker::$SpeakAsync$d__63
    class $SpeakAsync$d__63;
    // Nested type: ::Meta::WitAi::TTS::Utilities::TTSSpeaker::$SpeakAsync$d__64
    class $SpeakAsync$d__64;
    // Nested type: ::Meta::WitAi::TTS::Utilities::TTSSpeaker::$SpeakAsync$d__65
    class $SpeakAsync$d__65;
    // Nested type: ::Meta::WitAi::TTS::Utilities::TTSSpeaker::$SpeakAsync$d__66
    class $SpeakAsync$d__66;
    // Nested type: ::Meta::WitAi::TTS::Utilities::TTSSpeaker::$SpeakAsync$d__90
    class $SpeakAsync$d__90;
    // Nested type: ::Meta::WitAi::TTS::Utilities::TTSSpeaker::$SpeakAsync$d__91
    class $SpeakAsync$d__91;
    // Nested type: ::Meta::WitAi::TTS::Utilities::TTSSpeaker::$SpeakAsync$d__92
    class $SpeakAsync$d__92;
    // Nested type: ::Meta::WitAi::TTS::Utilities::TTSSpeaker::$SpeakAsync$d__93
    class $SpeakAsync$d__93;
    // Nested type: ::Meta::WitAi::TTS::Utilities::TTSSpeaker::$SpeakQueuedAsync$d__100
    class $SpeakQueuedAsync$d__100;
    // Nested type: ::Meta::WitAi::TTS::Utilities::TTSSpeaker::$SpeakQueuedAsync$d__101
    class $SpeakQueuedAsync$d__101;
    // Nested type: ::Meta::WitAi::TTS::Utilities::TTSSpeaker::$SpeakQueuedAsync$d__102
    class $SpeakQueuedAsync$d__102;
    // Nested type: ::Meta::WitAi::TTS::Utilities::TTSSpeaker::$SpeakQueuedAsync$d__103
    class $SpeakQueuedAsync$d__103;
    // Nested type: ::Meta::WitAi::TTS::Utilities::TTSSpeaker::$SpeakQueuedAsync$d__72
    class $SpeakQueuedAsync$d__72;
    // Nested type: ::Meta::WitAi::TTS::Utilities::TTSSpeaker::$SpeakQueuedAsync$d__73
    class $SpeakQueuedAsync$d__73;
    // Nested type: ::Meta::WitAi::TTS::Utilities::TTSSpeaker::$SpeakQueuedAsync$d__74
    class $SpeakQueuedAsync$d__74;
    // Nested type: ::Meta::WitAi::TTS::Utilities::TTSSpeaker::$SpeakQueuedAsync$d__75
    class $SpeakQueuedAsync$d__75;
    // Nested type: ::Meta::WitAi::TTS::Utilities::TTSSpeaker::$SpeakQueuedAsync$d__99
    class $SpeakQueuedAsync$d__99;
    // Nested type: ::Meta::WitAi::TTS::Utilities::TTSSpeaker::$WaitForCompletion$d__54
    class $WaitForCompletion$d__54;
    // Nested type: ::Meta::WitAi::TTS::Utilities::TTSSpeaker::$WaitForPlaybackComplete$d__108
    class $WaitForPlaybackComplete$d__108;
    // Size: 0x20
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Meta.WitAi.TTS.Utilities.TTSSpeaker/TTSSpeakerRequestData
    // [TokenAttribute] Offset: FFFFFFFF
    struct TTSSpeakerRequestData/*, public ::System::ValueType*/ {
      public:
      public:
      // public Meta.WitAi.TTS.Data.TTSClipData ClipData
      // Size: 0x8
      // Offset: 0x0
      ::Meta::WitAi::TTS::Data::TTSClipData* ClipData;
      // Field size check
      static_assert(sizeof(::Meta::WitAi::TTS::Data::TTSClipData*) == 0x8);
      // public System.DateTime StartTime
      // Size: 0x8
      // Offset: 0x8
      ::System::DateTime StartTime;
      // Field size check
      static_assert(sizeof(::System::DateTime) == 0x8);
      // public System.Boolean StopQueueOnLoad
      // Size: 0x1
      // Offset: 0x10
      bool StopQueueOnLoad;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // Padding between fields: StopQueueOnLoad and: PlaybackEvents
      char __padding2[0x7] = {};
      // public Meta.WitAi.TTS.Utilities.TTSSpeakerClipEvents PlaybackEvents
      // Size: 0x8
      // Offset: 0x18
      ::Meta::WitAi::TTS::Utilities::TTSSpeakerClipEvents* PlaybackEvents;
      // Field size check
      static_assert(sizeof(::Meta::WitAi::TTS::Utilities::TTSSpeakerClipEvents*) == 0x8);
      public:
      // Creating value type constructor for type: TTSSpeakerRequestData
      constexpr TTSSpeakerRequestData(::Meta::WitAi::TTS::Data::TTSClipData* ClipData_ = {}, ::System::DateTime StartTime_ = {}, bool StopQueueOnLoad_ = {}, ::Meta::WitAi::TTS::Utilities::TTSSpeakerClipEvents* PlaybackEvents_ = {}) noexcept : ClipData{ClipData_}, StartTime{StartTime_}, StopQueueOnLoad{StopQueueOnLoad_}, PlaybackEvents{PlaybackEvents_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public Meta.WitAi.TTS.Data.TTSClipData ClipData
      [[deprecated("Use field access instead!")]] ::Meta::WitAi::TTS::Data::TTSClipData*& dyn_ClipData();
      // Get instance field reference: public System.DateTime StartTime
      [[deprecated("Use field access instead!")]] ::System::DateTime& dyn_StartTime();
      // Get instance field reference: public System.Boolean StopQueueOnLoad
      [[deprecated("Use field access instead!")]] bool& dyn_StopQueueOnLoad();
      // Get instance field reference: public Meta.WitAi.TTS.Utilities.TTSSpeakerClipEvents PlaybackEvents
      [[deprecated("Use field access instead!")]] ::Meta::WitAi::TTS::Utilities::TTSSpeakerClipEvents*& dyn_PlaybackEvents();
    }; // Meta.WitAi.TTS.Utilities.TTSSpeaker/TTSSpeakerRequestData
    #pragma pack(pop)
    static check_size<sizeof(TTSSpeaker::TTSSpeakerRequestData), 24 + sizeof(::Meta::WitAi::TTS::Utilities::TTSSpeakerClipEvents*)> __Meta_WitAi_TTS_Utilities_TTSSpeaker_TTSSpeakerRequestDataSizeCheck;
    static_assert(sizeof(TTSSpeaker::TTSSpeakerRequestData) == 0x20);
    public:
    // private Meta.WitAi.TTS.Utilities.TTSSpeakerEvents _events
    // Size: 0x8
    // Offset: 0x20
    ::Meta::WitAi::TTS::Utilities::TTSSpeakerEvents* events;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::TTS::Utilities::TTSSpeakerEvents*) == 0x8);
    // public System.String PrependedText
    // Size: 0x8
    // Offset: 0x28
    ::StringW PrependedText;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String AppendedText
    // Size: 0x8
    // Offset: 0x30
    ::StringW AppendedText;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private Meta.WitAi.TTS.TTSService _ttsService
    // Size: 0x8
    // Offset: 0x38
    ::Meta::WitAi::TTS::TTSService* ttsService;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::TTS::TTSService*) == 0x8);
    // public System.String presetVoiceID
    // Size: 0x8
    // Offset: 0x40
    ::StringW presetVoiceID;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public Meta.WitAi.TTS.Integrations.TTSWitVoiceSettings customWitVoiceSettings
    // Size: 0x8
    // Offset: 0x48
    ::Meta::WitAi::TTS::Integrations::TTSWitVoiceSettings* customWitVoiceSettings;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::TTS::Integrations::TTSWitVoiceSettings*) == 0x8);
    // private Meta.WitAi.TTS.Data.TTSVoiceSettings _overrideVoiceSettings
    // Size: 0x8
    // Offset: 0x50
    ::Meta::WitAi::TTS::Data::TTSVoiceSettings* overrideVoiceSettings;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::TTS::Data::TTSVoiceSettings*) == 0x8);
    // protected Meta.WitAi.TTS.Utilities.TTSSpeaker/TTSSpeakerRequestData _speakingRequest
    // Size: 0x20
    // Offset: 0x58
    ::Meta::WitAi::TTS::Utilities::TTSSpeaker::TTSSpeakerRequestData speakingRequest;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::TTS::Utilities::TTSSpeaker::TTSSpeakerRequestData) == 0x20);
    // private System.Collections.Generic.Queue`1<Meta.WitAi.TTS.Utilities.TTSSpeaker/TTSSpeakerRequestData> _queuedRequests
    // Size: 0x8
    // Offset: 0x78
    ::System::Collections::Generic::Queue_1<::Meta::WitAi::TTS::Utilities::TTSSpeaker::TTSSpeakerRequestData>* queuedRequests;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Queue_1<::Meta::WitAi::TTS::Utilities::TTSSpeaker::TTSSpeakerRequestData>*) == 0x8);
    // private System.Boolean _hasQueue
    // Size: 0x1
    // Offset: 0x80
    bool hasQueue;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _willHaveQueue
    // Size: 0x1
    // Offset: 0x81
    bool willHaveQueue;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: willHaveQueue and: textPreprocessors
    char __padding10[0x6] = {};
    // private Meta.WitAi.TTS.Interfaces.ISpeakerTextPreprocessor[] _textPreprocessors
    // Size: 0x8
    // Offset: 0x88
    ::ArrayW<::Meta::WitAi::TTS::Interfaces::ISpeakerTextPreprocessor*> textPreprocessors;
    // Field size check
    static_assert(sizeof(::ArrayW<::Meta::WitAi::TTS::Interfaces::ISpeakerTextPreprocessor*>) == 0x8);
    // private Meta.WitAi.TTS.Interfaces.ISpeakerTextPostprocessor[] _textPostprocessors
    // Size: 0x8
    // Offset: 0x90
    ::ArrayW<::Meta::WitAi::TTS::Interfaces::ISpeakerTextPostprocessor*> textPostprocessors;
    // Field size check
    static_assert(sizeof(::ArrayW<::Meta::WitAi::TTS::Interfaces::ISpeakerTextPostprocessor*>) == 0x8);
    // private Meta.Voice.Audio.IAudioPlayer _audioPlayer
    // Size: 0x8
    // Offset: 0x98
    ::Meta::Voice::Audio::IAudioPlayer* audioPlayer;
    // Field size check
    static_assert(sizeof(::Meta::Voice::Audio::IAudioPlayer*) == 0x8);
    // private UnityEngine.Coroutine _waitForCompletion
    // Size: 0x8
    // Offset: 0xA0
    ::UnityEngine::Coroutine* waitForCompletion;
    // Field size check
    static_assert(sizeof(::UnityEngine::Coroutine*) == 0x8);
    // private System.Boolean <IsPaused>k__BackingField
    // Size: 0x1
    // Offset: 0xA8
    bool IsPaused;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::Meta::WitAi::Speech::ISpeechEventProvider
    operator ::Meta::WitAi::Speech::ISpeechEventProvider() noexcept {
      return *reinterpret_cast<::Meta::WitAi::Speech::ISpeechEventProvider*>(this);
    }
    // Get instance field reference: private Meta.WitAi.TTS.Utilities.TTSSpeakerEvents _events
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::TTS::Utilities::TTSSpeakerEvents*& dyn__events();
    // Get instance field reference: public System.String PrependedText
    [[deprecated("Use field access instead!")]] ::StringW& dyn_PrependedText();
    // Get instance field reference: public System.String AppendedText
    [[deprecated("Use field access instead!")]] ::StringW& dyn_AppendedText();
    // Get instance field reference: private Meta.WitAi.TTS.TTSService _ttsService
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::TTS::TTSService*& dyn__ttsService();
    // Get instance field reference: public System.String presetVoiceID
    [[deprecated("Use field access instead!")]] ::StringW& dyn_presetVoiceID();
    // Get instance field reference: public Meta.WitAi.TTS.Integrations.TTSWitVoiceSettings customWitVoiceSettings
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::TTS::Integrations::TTSWitVoiceSettings*& dyn_customWitVoiceSettings();
    // Get instance field reference: private Meta.WitAi.TTS.Data.TTSVoiceSettings _overrideVoiceSettings
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::TTS::Data::TTSVoiceSettings*& dyn__overrideVoiceSettings();
    // Get instance field reference: protected Meta.WitAi.TTS.Utilities.TTSSpeaker/TTSSpeakerRequestData _speakingRequest
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::TTS::Utilities::TTSSpeaker::TTSSpeakerRequestData& dyn__speakingRequest();
    // Get instance field reference: private System.Collections.Generic.Queue`1<Meta.WitAi.TTS.Utilities.TTSSpeaker/TTSSpeakerRequestData> _queuedRequests
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Queue_1<::Meta::WitAi::TTS::Utilities::TTSSpeaker::TTSSpeakerRequestData>*& dyn__queuedRequests();
    // Get instance field reference: private System.Boolean _hasQueue
    [[deprecated("Use field access instead!")]] bool& dyn__hasQueue();
    // Get instance field reference: private System.Boolean _willHaveQueue
    [[deprecated("Use field access instead!")]] bool& dyn__willHaveQueue();
    // Get instance field reference: private Meta.WitAi.TTS.Interfaces.ISpeakerTextPreprocessor[] _textPreprocessors
    [[deprecated("Use field access instead!")]] ::ArrayW<::Meta::WitAi::TTS::Interfaces::ISpeakerTextPreprocessor*>& dyn__textPreprocessors();
    // Get instance field reference: private Meta.WitAi.TTS.Interfaces.ISpeakerTextPostprocessor[] _textPostprocessors
    [[deprecated("Use field access instead!")]] ::ArrayW<::Meta::WitAi::TTS::Interfaces::ISpeakerTextPostprocessor*>& dyn__textPostprocessors();
    // Get instance field reference: private Meta.Voice.Audio.IAudioPlayer _audioPlayer
    [[deprecated("Use field access instead!")]] ::Meta::Voice::Audio::IAudioPlayer*& dyn__audioPlayer();
    // Get instance field reference: private UnityEngine.Coroutine _waitForCompletion
    [[deprecated("Use field access instead!")]] ::UnityEngine::Coroutine*& dyn__waitForCompletion();
    // Get instance field reference: private System.Boolean <IsPaused>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$IsPaused$k__BackingField();
    // public Meta.WitAi.TTS.Utilities.TTSSpeakerEvents get_Events()
    // Offset: 0x445BE18
    ::Meta::WitAi::TTS::Utilities::TTSSpeakerEvents* get_Events();
    // public Meta.WitAi.Speech.VoiceSpeechEvents get_SpeechEvents()
    // Offset: 0x445BE20
    ::Meta::WitAi::Speech::VoiceSpeechEvents* get_SpeechEvents();
    // public Meta.WitAi.TTS.TTSService get_TTSService()
    // Offset: 0x445BE28
    ::Meta::WitAi::TTS::TTSService* get_TTSService();
    // public Meta.WitAi.TTS.Data.TTSVoiceSettings get_VoiceSettings()
    // Offset: 0x445BF04
    ::Meta::WitAi::TTS::Data::TTSVoiceSettings* get_VoiceSettings();
    // protected System.String get_LogCategory()
    // Offset: 0x445BFA0
    ::StringW get_LogCategory();
    // public System.Boolean get_IsSpeaking()
    // Offset: 0x445BFC4
    bool get_IsSpeaking();
    // public Meta.WitAi.TTS.Data.TTSClipData get_SpeakingClip()
    // Offset: 0x445BFD4
    ::Meta::WitAi::TTS::Data::TTSClipData* get_SpeakingClip();
    // public System.Boolean get_IsLoading()
    // Offset: 0x445BFDC
    bool get_IsLoading();
    // public System.Boolean get_IsPreparing()
    // Offset: 0x445C02C
    bool get_IsPreparing();
    // public System.Collections.Generic.List`1<Meta.WitAi.TTS.Data.TTSClipData> get_QueuedClips()
    // Offset: 0x445C1B8
    ::System::Collections::Generic::List_1<::Meta::WitAi::TTS::Data::TTSClipData*>* get_QueuedClips();
    // public System.Boolean get_IsActive()
    // Offset: 0x445C3D8
    bool get_IsActive();
    // public Meta.Voice.Audio.IAudioPlayer get_AudioPlayer()
    // Offset: 0x445C3EC
    ::Meta::Voice::Audio::IAudioPlayer* get_AudioPlayer();
    // public UnityEngine.AudioSource get_AudioSource()
    // Offset: 0x445C58C
    ::UnityEngine::AudioSource* get_AudioSource();
    // protected System.Void Start()
    // Offset: 0x445C644
    void Start();
    // protected System.Void RefreshProcessors()
    // Offset: 0x445C700
    void RefreshProcessors();
    // protected System.Void OnDestroy()
    // Offset: 0x445C878
    void OnDestroy();
    // protected System.Void OnEnable()
    // Offset: 0x445C8B0
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x445CA04
    void OnDisable();
    // protected System.Void HandleClipUnload(Meta.WitAi.TTS.Data.TTSClipData clipData)
    // Offset: 0x445CB68
    void HandleClipUnload(::Meta::WitAi::TTS::Data::TTSClipData* clipData);
    // protected System.Void HandleClipUpdate(Meta.WitAi.TTS.Data.TTSClipData clipData)
    // Offset: 0x445CB7C
    void HandleClipUpdate(::Meta::WitAi::TTS::Data::TTSClipData* clipData);
    // private Meta.WitAi.TTS.Utilities.TTSSpeaker/TTSSpeakerRequestData GetQueuedRequest(Meta.WitAi.TTS.Data.TTSClipData clipData)
    // Offset: 0x445CDB4
    ::Meta::WitAi::TTS::Utilities::TTSSpeaker::TTSSpeakerRequestData GetQueuedRequest(::Meta::WitAi::TTS::Data::TTSClipData* clipData);
    // private System.Boolean QueueContainsClip(Meta.WitAi.TTS.Data.TTSClipData clipData)
    // Offset: 0x445CFC0
    bool QueueContainsClip(::Meta::WitAi::TTS::Data::TTSClipData* clipData);
    // private System.Void RefreshQueueEvents()
    // Offset: 0x445CFE8
    void RefreshQueueEvents();
    // protected System.Boolean IsClipRequestActive(Meta.WitAi.TTS.Utilities.TTSSpeaker/TTSSpeakerRequestData requestData)
    // Offset: 0x445D058
    bool IsClipRequestActive(::Meta::WitAi::TTS::Utilities::TTSSpeaker::TTSSpeakerRequestData requestData);
    // protected System.Boolean IsClipRequestLoading(Meta.WitAi.TTS.Utilities.TTSSpeaker/TTSSpeakerRequestData requestData)
    // Offset: 0x445D0B0
    bool IsClipRequestLoading(::Meta::WitAi::TTS::Utilities::TTSSpeaker::TTSSpeakerRequestData requestData);
    // protected System.Boolean IsClipRequestSpeaking(Meta.WitAi.TTS.Utilities.TTSSpeaker/TTSSpeakerRequestData requestData)
    // Offset: 0x445D128
    bool IsClipRequestSpeaking(::Meta::WitAi::TTS::Utilities::TTSSpeaker::TTSSpeakerRequestData requestData);
    // protected System.Collections.IEnumerator WaitForCompletion(System.Collections.Generic.List`1<Meta.WitAi.TTS.Utilities.TTSSpeaker/TTSSpeakerRequestData> requestData)
    // Offset: 0x445D1BC
    ::System::Collections::IEnumerator* WaitForCompletion(::System::Collections::Generic::List_1<::Meta::WitAi::TTS::Utilities::TTSSpeaker::TTSSpeakerRequestData>* requestData);
    // public System.Collections.Generic.List`1<System.String> GetFinalText(System.String textToSpeak)
    // Offset: 0x445D26C
    ::System::Collections::Generic::List_1<::StringW>* GetFinalText(::StringW textToSpeak);
    // public System.Collections.Generic.List`1<System.String> GetFinalTextFormatted(System.String format, params System.String[] textsToSpeak)
    // Offset: 0x445D598
    ::System::Collections::Generic::List_1<::StringW>* GetFinalTextFormatted(::StringW format, ::ArrayW<::StringW> textsToSpeak);
    // public System.String GetFormattedText(System.String format, params System.String[] textsToSpeak)
    // Offset: 0x445D5C0
    ::StringW GetFormattedText(::StringW format, ::ArrayW<::StringW> textsToSpeak);
    // public System.Void Speak(System.String textToSpeak, Meta.WitAi.TTS.Data.TTSDiskCacheSettings diskCacheSettings, Meta.WitAi.TTS.Utilities.TTSSpeakerClipEvents playbackEvents)
    // Offset: 0x445D658
    void Speak(::StringW textToSpeak, ::Meta::WitAi::TTS::Data::TTSDiskCacheSettings* diskCacheSettings, ::Meta::WitAi::TTS::Utilities::TTSSpeakerClipEvents* playbackEvents);
    // public System.Void Speak(System.String textToSpeak, Meta.WitAi.TTS.Utilities.TTSSpeakerClipEvents playbackEvents)
    // Offset: 0x445D99C
    void Speak(::StringW textToSpeak, ::Meta::WitAi::TTS::Utilities::TTSSpeakerClipEvents* playbackEvents);
    // public System.Void Speak(System.String textToSpeak, Meta.WitAi.TTS.Data.TTSDiskCacheSettings diskCacheSettings)
    // Offset: 0x445D9AC
    void Speak(::StringW textToSpeak, ::Meta::WitAi::TTS::Data::TTSDiskCacheSettings* diskCacheSettings);
    // public System.Void Speak(System.String textToSpeak)
    // Offset: 0x445D9B8
    void Speak(::StringW textToSpeak);
    // public System.Void SpeakFormat(System.String format, params System.String[] textsToSpeak)
    // Offset: 0x445D9C8
    void SpeakFormat(::StringW format, ::ArrayW<::StringW> textsToSpeak);
    // public System.Collections.IEnumerator SpeakAsync(System.String textToSpeak, Meta.WitAi.TTS.Data.TTSDiskCacheSettings diskCacheSettings, Meta.WitAi.TTS.Utilities.TTSSpeakerClipEvents playbackEvents)
    // Offset: 0x445D9F0
    ::System::Collections::IEnumerator* SpeakAsync(::StringW textToSpeak, ::Meta::WitAi::TTS::Data::TTSDiskCacheSettings* diskCacheSettings, ::Meta::WitAi::TTS::Utilities::TTSSpeakerClipEvents* playbackEvents);
    // public System.Collections.IEnumerator SpeakAsync(System.String textToSpeak, Meta.WitAi.TTS.Utilities.TTSSpeakerClipEvents playbackEvents)
    // Offset: 0x445DAD0
    ::System::Collections::IEnumerator* SpeakAsync(::StringW textToSpeak, ::Meta::WitAi::TTS::Utilities::TTSSpeakerClipEvents* playbackEvents);
    // public System.Collections.IEnumerator SpeakAsync(System.String textToSpeak, Meta.WitAi.TTS.Data.TTSDiskCacheSettings diskCacheSettings)
    // Offset: 0x445DB94
    ::System::Collections::IEnumerator* SpeakAsync(::StringW textToSpeak, ::Meta::WitAi::TTS::Data::TTSDiskCacheSettings* diskCacheSettings);
    // public System.Collections.IEnumerator SpeakAsync(System.String textToSpeak)
    // Offset: 0x445DC58
    ::System::Collections::IEnumerator* SpeakAsync(::StringW textToSpeak);
    // public System.Void SpeakQueued(System.String textToSpeak, Meta.WitAi.TTS.Data.TTSDiskCacheSettings diskCacheSettings, Meta.WitAi.TTS.Utilities.TTSSpeakerClipEvents playbackEvents)
    // Offset: 0x445DD08
    void SpeakQueued(::StringW textToSpeak, ::Meta::WitAi::TTS::Data::TTSDiskCacheSettings* diskCacheSettings, ::Meta::WitAi::TTS::Utilities::TTSSpeakerClipEvents* playbackEvents);
    // public System.Void SpeakQueued(System.String textToSpeak, Meta.WitAi.TTS.Utilities.TTSSpeakerClipEvents playbackEvents)
    // Offset: 0x445DD10
    void SpeakQueued(::StringW textToSpeak, ::Meta::WitAi::TTS::Utilities::TTSSpeakerClipEvents* playbackEvents);
    // public System.Void SpeakQueued(System.String textToSpeak, Meta.WitAi.TTS.Data.TTSDiskCacheSettings diskCacheSettings)
    // Offset: 0x445DD20
    void SpeakQueued(::StringW textToSpeak, ::Meta::WitAi::TTS::Data::TTSDiskCacheSettings* diskCacheSettings);
    // public System.Void SpeakQueued(System.String textToSpeak)
    // Offset: 0x445DD2C
    void SpeakQueued(::StringW textToSpeak);
    // public System.Void SpeakFormatQueued(System.String format, params System.String[] textsToSpeak)
    // Offset: 0x445DD3C
    void SpeakFormatQueued(::StringW format, ::ArrayW<::StringW> textsToSpeak);
    // public System.Collections.IEnumerator SpeakQueuedAsync(System.String[] textsToSpeak, Meta.WitAi.TTS.Data.TTSDiskCacheSettings diskCacheSettings, Meta.WitAi.TTS.Utilities.TTSSpeakerClipEvents playbackEvents)
    // Offset: 0x445DD64
    ::System::Collections::IEnumerator* SpeakQueuedAsync(::ArrayW<::StringW> textsToSpeak, ::Meta::WitAi::TTS::Data::TTSDiskCacheSettings* diskCacheSettings, ::Meta::WitAi::TTS::Utilities::TTSSpeakerClipEvents* playbackEvents);
    // public System.Collections.IEnumerator SpeakQueuedAsync(System.String[] textsToSpeak, Meta.WitAi.TTS.Utilities.TTSSpeakerClipEvents playbackEvents)
    // Offset: 0x445DE44
    ::System::Collections::IEnumerator* SpeakQueuedAsync(::ArrayW<::StringW> textsToSpeak, ::Meta::WitAi::TTS::Utilities::TTSSpeakerClipEvents* playbackEvents);
    // public System.Collections.IEnumerator SpeakQueuedAsync(System.String[] textsToSpeak, Meta.WitAi.TTS.Data.TTSDiskCacheSettings diskCacheSettings)
    // Offset: 0x445DF08
    ::System::Collections::IEnumerator* SpeakQueuedAsync(::ArrayW<::StringW> textsToSpeak, ::Meta::WitAi::TTS::Data::TTSDiskCacheSettings* diskCacheSettings);
    // public System.Collections.IEnumerator SpeakQueuedAsync(System.String[] textsToSpeak)
    // Offset: 0x445DFCC
    ::System::Collections::IEnumerator* SpeakQueuedAsync(::ArrayW<::StringW> textsToSpeak);
    // private System.Collections.Generic.List`1<Meta.WitAi.TTS.Utilities.TTSSpeaker/TTSSpeakerRequestData> Speak(System.String textToSpeak, Meta.WitAi.TTS.Data.TTSDiskCacheSettings diskCacheSettings, Meta.WitAi.TTS.Utilities.TTSSpeakerClipEvents playbackEvents, System.Boolean addToQueue)
    // Offset: 0x445D660
    ::System::Collections::Generic::List_1<::Meta::WitAi::TTS::Utilities::TTSSpeaker::TTSSpeakerRequestData>* Speak(::StringW textToSpeak, ::Meta::WitAi::TTS::Data::TTSDiskCacheSettings* diskCacheSettings, ::Meta::WitAi::TTS::Utilities::TTSSpeakerClipEvents* playbackEvents, bool addToQueue);
    // public System.Void Stop(System.String textToSpeak, System.Boolean allInstances)
    // Offset: 0x445E304
    void Stop(::StringW textToSpeak, bool allInstances);
    // public System.Void Stop(Meta.WitAi.TTS.Data.TTSClipData clipData, System.Boolean allInstances)
    // Offset: 0x445E4D4
    void Stop(::Meta::WitAi::TTS::Data::TTSClipData* clipData, bool allInstances);
    // public System.Void StopLoading()
    // Offset: 0x445E7B0
    void StopLoading();
    // public System.Void StopSpeaking()
    // Offset: 0x445E868
    void StopSpeaking();
    // public System.Void Stop()
    // Offset: 0x445E888
    void Stop();
    // public System.Void SetVoiceOverride(Meta.WitAi.TTS.Data.TTSVoiceSettings overrideVoiceSettings)
    // Offset: 0x445E8B8
    void SetVoiceOverride(::Meta::WitAi::TTS::Data::TTSVoiceSettings* overrideVoiceSettings);
    // public System.Void ClearVoiceOverride()
    // Offset: 0x445E8C0
    void ClearVoiceOverride();
    // private System.Boolean DecodeResponse(Meta.WitAi.Json.WitResponseNode responseNode, out System.String textToSpeak, out Meta.WitAi.TTS.Data.TTSVoiceSettings voiceSettings)
    // Offset: 0x445E8CC
    bool DecodeResponse(::Meta::WitAi::Json::WitResponseNode* responseNode, ByRef<::StringW> textToSpeak, ByRef<::Meta::WitAi::TTS::Data::TTSVoiceSettings*> voiceSettings);
    // public System.Void Speak(System.String textToSpeak, Meta.WitAi.TTS.Data.TTSVoiceSettings overrideVoiceSettings, Meta.WitAi.TTS.Data.TTSDiskCacheSettings diskCacheSettings, Meta.WitAi.TTS.Utilities.TTSSpeakerClipEvents playbackEvents)
    // Offset: 0x445EA14
    void Speak(::StringW textToSpeak, ::Meta::WitAi::TTS::Data::TTSVoiceSettings* overrideVoiceSettings, ::Meta::WitAi::TTS::Data::TTSDiskCacheSettings* diskCacheSettings, ::Meta::WitAi::TTS::Utilities::TTSSpeakerClipEvents* playbackEvents);
    // public System.Boolean Speak(Meta.WitAi.Json.WitResponseNode responseNode, Meta.WitAi.TTS.Data.TTSDiskCacheSettings diskCacheSettings, Meta.WitAi.TTS.Utilities.TTSSpeakerClipEvents playbackEvents)
    // Offset: 0x445EA60
    bool Speak(::Meta::WitAi::Json::WitResponseNode* responseNode, ::Meta::WitAi::TTS::Data::TTSDiskCacheSettings* diskCacheSettings, ::Meta::WitAi::TTS::Utilities::TTSSpeakerClipEvents* playbackEvents);
    // public System.Boolean Speak(Meta.WitAi.Json.WitResponseNode responseNode, Meta.WitAi.TTS.Data.TTSDiskCacheSettings diskCacheSettings)
    // Offset: 0x445EAD4
    bool Speak(::Meta::WitAi::Json::WitResponseNode* responseNode, ::Meta::WitAi::TTS::Data::TTSDiskCacheSettings* diskCacheSettings);
    // public System.Boolean Speak(Meta.WitAi.Json.WitResponseNode responseNode, Meta.WitAi.TTS.Utilities.TTSSpeakerClipEvents playbackEvents)
    // Offset: 0x445EADC
    bool Speak(::Meta::WitAi::Json::WitResponseNode* responseNode, ::Meta::WitAi::TTS::Utilities::TTSSpeakerClipEvents* playbackEvents);
    // public System.Boolean Speak(Meta.WitAi.Json.WitResponseNode responseNode)
    // Offset: 0x445EAE8
    bool Speak(::Meta::WitAi::Json::WitResponseNode* responseNode);
    // public System.Collections.IEnumerator SpeakAsync(System.String textToSpeak, Meta.WitAi.TTS.Data.TTSVoiceSettings overrideVoiceSettings, Meta.WitAi.TTS.Data.TTSDiskCacheSettings diskCacheSettings, Meta.WitAi.TTS.Utilities.TTSSpeakerClipEvents playbackEvents)
    // Offset: 0x445EAF4
    ::System::Collections::IEnumerator* SpeakAsync(::StringW textToSpeak, ::Meta::WitAi::TTS::Data::TTSVoiceSettings* overrideVoiceSettings, ::Meta::WitAi::TTS::Data::TTSDiskCacheSettings* diskCacheSettings, ::Meta::WitAi::TTS::Utilities::TTSSpeakerClipEvents* playbackEvents);
    // public System.Collections.IEnumerator SpeakAsync(Meta.WitAi.Json.WitResponseNode responseNode, Meta.WitAi.TTS.Data.TTSDiskCacheSettings diskCacheSettings, Meta.WitAi.TTS.Utilities.TTSSpeakerClipEvents playbackEvents)
    // Offset: 0x445EBE8
    ::System::Collections::IEnumerator* SpeakAsync(::Meta::WitAi::Json::WitResponseNode* responseNode, ::Meta::WitAi::TTS::Data::TTSDiskCacheSettings* diskCacheSettings, ::Meta::WitAi::TTS::Utilities::TTSSpeakerClipEvents* playbackEvents);
    // public System.Collections.IEnumerator SpeakAsync(Meta.WitAi.Json.WitResponseNode responseNode, Meta.WitAi.TTS.Utilities.TTSSpeakerClipEvents playbackEvents)
    // Offset: 0x445ECC8
    ::System::Collections::IEnumerator* SpeakAsync(::Meta::WitAi::Json::WitResponseNode* responseNode, ::Meta::WitAi::TTS::Utilities::TTSSpeakerClipEvents* playbackEvents);
    // public System.Collections.IEnumerator SpeakAsync(Meta.WitAi.Json.WitResponseNode responseNode, Meta.WitAi.TTS.Data.TTSDiskCacheSettings diskCacheSettings)
    // Offset: 0x445ED8C
    ::System::Collections::IEnumerator* SpeakAsync(::Meta::WitAi::Json::WitResponseNode* responseNode, ::Meta::WitAi::TTS::Data::TTSDiskCacheSettings* diskCacheSettings);
    // public System.Void SpeakQueued(System.String textToSpeak, Meta.WitAi.TTS.Data.TTSVoiceSettings overrideVoiceSettings, Meta.WitAi.TTS.Data.TTSDiskCacheSettings diskCacheSettings, Meta.WitAi.TTS.Utilities.TTSSpeakerClipEvents playbackEvents)
    // Offset: 0x445EE50
    void SpeakQueued(::StringW textToSpeak, ::Meta::WitAi::TTS::Data::TTSVoiceSettings* overrideVoiceSettings, ::Meta::WitAi::TTS::Data::TTSDiskCacheSettings* diskCacheSettings, ::Meta::WitAi::TTS::Utilities::TTSSpeakerClipEvents* playbackEvents);
    // public System.Boolean SpeakQueued(Meta.WitAi.Json.WitResponseNode responseNode, Meta.WitAi.TTS.Data.TTSDiskCacheSettings diskCacheSettings, Meta.WitAi.TTS.Utilities.TTSSpeakerClipEvents playbackEvents)
    // Offset: 0x445EE9C
    bool SpeakQueued(::Meta::WitAi::Json::WitResponseNode* responseNode, ::Meta::WitAi::TTS::Data::TTSDiskCacheSettings* diskCacheSettings, ::Meta::WitAi::TTS::Utilities::TTSSpeakerClipEvents* playbackEvents);
    // public System.Boolean SpeakQueued(Meta.WitAi.Json.WitResponseNode responseNode, Meta.WitAi.TTS.Utilities.TTSSpeakerClipEvents playbackEvents)
    // Offset: 0x445EF10
    bool SpeakQueued(::Meta::WitAi::Json::WitResponseNode* responseNode, ::Meta::WitAi::TTS::Utilities::TTSSpeakerClipEvents* playbackEvents);
    // public System.Boolean SpeakQueued(Meta.WitAi.Json.WitResponseNode responseNode, Meta.WitAi.TTS.Data.TTSDiskCacheSettings diskCacheSettings)
    // Offset: 0x445EF1C
    bool SpeakQueued(::Meta::WitAi::Json::WitResponseNode* responseNode, ::Meta::WitAi::TTS::Data::TTSDiskCacheSettings* diskCacheSettings);
    // public System.Boolean SpeakQueued(Meta.WitAi.Json.WitResponseNode responseNode)
    // Offset: 0x445EF24
    bool SpeakQueued(::Meta::WitAi::Json::WitResponseNode* responseNode);
    // public System.Collections.IEnumerator SpeakQueuedAsync(System.String[] textsToSpeak, Meta.WitAi.TTS.Data.TTSVoiceSettings overrideVoiceSettings, Meta.WitAi.TTS.Data.TTSDiskCacheSettings diskCacheSettings, Meta.WitAi.TTS.Utilities.TTSSpeakerClipEvents playbackEvents)
    // Offset: 0x445EF30
    ::System::Collections::IEnumerator* SpeakQueuedAsync(::ArrayW<::StringW> textsToSpeak, ::Meta::WitAi::TTS::Data::TTSVoiceSettings* overrideVoiceSettings, ::Meta::WitAi::TTS::Data::TTSDiskCacheSettings* diskCacheSettings, ::Meta::WitAi::TTS::Utilities::TTSSpeakerClipEvents* playbackEvents);
    // public System.Collections.IEnumerator SpeakQueuedAsync(Meta.WitAi.Json.WitResponseNode responseNode, Meta.WitAi.TTS.Data.TTSDiskCacheSettings diskCacheSettings, Meta.WitAi.TTS.Utilities.TTSSpeakerClipEvents playbackEvents)
    // Offset: 0x445F024
    ::System::Collections::IEnumerator* SpeakQueuedAsync(::Meta::WitAi::Json::WitResponseNode* responseNode, ::Meta::WitAi::TTS::Data::TTSDiskCacheSettings* diskCacheSettings, ::Meta::WitAi::TTS::Utilities::TTSSpeakerClipEvents* playbackEvents);
    // public System.Collections.IEnumerator SpeakQueuedAsync(Meta.WitAi.Json.WitResponseNode responseNode, Meta.WitAi.TTS.Utilities.TTSSpeakerClipEvents playbackEvents)
    // Offset: 0x445F104
    ::System::Collections::IEnumerator* SpeakQueuedAsync(::Meta::WitAi::Json::WitResponseNode* responseNode, ::Meta::WitAi::TTS::Utilities::TTSSpeakerClipEvents* playbackEvents);
    // public System.Collections.IEnumerator SpeakQueuedAsync(Meta.WitAi.Json.WitResponseNode responseNode, Meta.WitAi.TTS.Data.TTSDiskCacheSettings diskCacheSettings)
    // Offset: 0x445F1C8
    ::System::Collections::IEnumerator* SpeakQueuedAsync(::Meta::WitAi::Json::WitResponseNode* responseNode, ::Meta::WitAi::TTS::Data::TTSDiskCacheSettings* diskCacheSettings);
    // public System.Collections.IEnumerator SpeakQueuedAsync(Meta.WitAi.Json.WitResponseNode responseNode)
    // Offset: 0x445F28C
    ::System::Collections::IEnumerator* SpeakQueuedAsync(::Meta::WitAi::Json::WitResponseNode* responseNode);
    // private Meta.WitAi.TTS.Utilities.TTSSpeaker/TTSSpeakerRequestData HandleLoad(System.String textToSpeak, Meta.WitAi.TTS.Data.TTSVoiceSettings voiceSettings, Meta.WitAi.TTS.Data.TTSDiskCacheSettings diskCacheSettings, Meta.WitAi.TTS.Utilities.TTSSpeakerClipEvents playbackEvents, System.Boolean addToQueue)
    // Offset: 0x445E07C
    ::Meta::WitAi::TTS::Utilities::TTSSpeaker::TTSSpeakerRequestData HandleLoad(::StringW textToSpeak, ::Meta::WitAi::TTS::Data::TTSVoiceSettings* voiceSettings, ::Meta::WitAi::TTS::Data::TTSDiskCacheSettings* diskCacheSettings, ::Meta::WitAi::TTS::Utilities::TTSSpeakerClipEvents* playbackEvents, bool addToQueue);
    // private System.Void HandleLoadComplete(Meta.WitAi.TTS.Utilities.TTSSpeaker/TTSSpeakerRequestData requestData, System.String error)
    // Offset: 0x445F344
    void HandleLoadComplete(::Meta::WitAi::TTS::Utilities::TTSSpeaker::TTSSpeakerRequestData requestData, ::StringW error);
    // private System.Void RefreshPlayback()
    // Offset: 0x445F51C
    void RefreshPlayback();
    // private System.Collections.IEnumerator WaitForPlaybackComplete()
    // Offset: 0x445F9C0
    ::System::Collections::IEnumerator* WaitForPlaybackComplete();
    // protected System.Boolean IsPlaybackComplete(System.Single elapsedTime)
    // Offset: 0x445FA54
    bool IsPlaybackComplete(float elapsedTime);
    // protected System.Void HandlePlaybackComplete(System.Boolean stopped)
    // Offset: 0x445FC7C
    void HandlePlaybackComplete(bool stopped);
    // public System.Boolean get_IsPaused()
    // Offset: 0x445FE84
    bool get_IsPaused();
    // private System.Void set_IsPaused(System.Boolean value)
    // Offset: 0x445FE8C
    void set_IsPaused(bool value);
    // public System.Void Pause()
    // Offset: 0x445FE98
    void Pause();
    // public System.Void Resume()
    // Offset: 0x445F9AC
    void Resume();
    // protected System.Void SetPause(System.Boolean toPaused)
    // Offset: 0x445FEAC
    void SetPause(bool toPaused);
    // private System.Void HandleUnload(Meta.WitAi.TTS.Data.TTSClipData clipData, System.String error)
    // Offset: 0x445E5FC
    void HandleUnload(::Meta::WitAi::TTS::Data::TTSClipData* clipData, ::StringW error);
    // private System.Void HandleUnload(Meta.WitAi.TTS.Utilities.TTSSpeaker/TTSSpeakerRequestData requestData, System.String error)
    // Offset: 0x445E6D0
    void HandleUnload(::Meta::WitAi::TTS::Utilities::TTSSpeaker::TTSSpeakerRequestData requestData, ::StringW error);
    // private System.Void HandleUnload(System.Func`2<Meta.WitAi.TTS.Utilities.TTSSpeaker/TTSSpeakerRequestData,System.Boolean> shouldKeep, System.String error)
    // Offset: 0x4460058
    void HandleUnload(::System::Func_2<::Meta::WitAi::TTS::Utilities::TTSSpeaker::TTSSpeakerRequestData, bool>* shouldKeep, ::StringW error);
    // protected System.Void Log(System.String comment)
    // Offset: 0x44602E8
    void Log(::StringW comment);
    // protected System.Void OnPlaybackQueueBegin()
    // Offset: 0x44603C4
    void OnPlaybackQueueBegin();
    // protected System.Void OnPlaybackQueueComplete()
    // Offset: 0x446043C
    void OnPlaybackQueueComplete();
    // protected System.Void LogRequestData(System.String comment, Meta.WitAi.TTS.Utilities.TTSSpeaker/TTSSpeakerRequestData requestData, System.Boolean warning)
    // Offset: 0x44604B4
    void LogRequestData(::StringW comment, ::Meta::WitAi::TTS::Utilities::TTSSpeaker::TTSSpeakerRequestData requestData, bool warning);
    // protected System.Void OnInit(Meta.WitAi.TTS.Utilities.TTSSpeaker/TTSSpeakerRequestData requestData)
    // Offset: 0x446080C
    void OnInit(::Meta::WitAi::TTS::Utilities::TTSSpeaker::TTSSpeakerRequestData requestData);
    // protected System.Void OnLoadBegin(Meta.WitAi.TTS.Utilities.TTSSpeaker/TTSSpeakerRequestData requestData)
    // Offset: 0x44608A0
    void OnLoadBegin(::Meta::WitAi::TTS::Utilities::TTSSpeaker::TTSSpeakerRequestData requestData);
    // protected System.Void OnLoadAborted(Meta.WitAi.TTS.Utilities.TTSSpeaker/TTSSpeakerRequestData requestData)
    // Offset: 0x4460A14
    void OnLoadAborted(::Meta::WitAi::TTS::Utilities::TTSSpeaker::TTSSpeakerRequestData requestData);
    // protected System.Void OnLoadFailed(Meta.WitAi.TTS.Utilities.TTSSpeaker/TTSSpeakerRequestData requestData, System.String error)
    // Offset: 0x4460B88
    void OnLoadFailed(::Meta::WitAi::TTS::Utilities::TTSSpeaker::TTSSpeakerRequestData requestData, ::StringW error);
    // protected System.Void OnLoadSuccess(Meta.WitAi.TTS.Utilities.TTSSpeaker/TTSSpeakerRequestData requestData)
    // Offset: 0x4460D1C
    void OnLoadSuccess(::Meta::WitAi::TTS::Utilities::TTSSpeaker::TTSSpeakerRequestData requestData);
    // protected System.Void OnPlaybackReady(Meta.WitAi.TTS.Utilities.TTSSpeaker/TTSSpeakerRequestData requestData)
    // Offset: 0x4460E6C
    void OnPlaybackReady(::Meta::WitAi::TTS::Utilities::TTSSpeaker::TTSSpeakerRequestData requestData);
    // protected System.Void OnPlaybackStart(Meta.WitAi.TTS.Utilities.TTSSpeaker/TTSSpeakerRequestData requestData)
    // Offset: 0x44610B0
    void OnPlaybackStart(::Meta::WitAi::TTS::Utilities::TTSSpeaker::TTSSpeakerRequestData requestData);
    // protected System.Void OnPlaybackCancelled(Meta.WitAi.TTS.Utilities.TTSSpeaker/TTSSpeakerRequestData requestData, System.String reason)
    // Offset: 0x44612F8
    void OnPlaybackCancelled(::Meta::WitAi::TTS::Utilities::TTSSpeaker::TTSSpeakerRequestData requestData, ::StringW reason);
    // protected System.Void OnPlaybackClipUpdated(Meta.WitAi.TTS.Utilities.TTSSpeaker/TTSSpeakerRequestData requestData)
    // Offset: 0x4461584
    void OnPlaybackClipUpdated(::Meta::WitAi::TTS::Utilities::TTSSpeaker::TTSSpeakerRequestData requestData);
    // protected System.Void OnPlaybackComplete(Meta.WitAi.TTS.Utilities.TTSSpeaker/TTSSpeakerRequestData requestData)
    // Offset: 0x4461660
    void OnPlaybackComplete(::Meta::WitAi::TTS::Utilities::TTSSpeaker::TTSSpeakerRequestData requestData);
    // protected System.Void OnComplete(Meta.WitAi.TTS.Utilities.TTSSpeaker/TTSSpeakerRequestData requestData)
    // Offset: 0x44618CC
    void OnComplete(::Meta::WitAi::TTS::Utilities::TTSSpeaker::TTSSpeakerRequestData requestData);
    // public System.Void .ctor()
    // Offset: 0x4461960
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TTSSpeaker* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::TTS::Utilities::TTSSpeaker::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TTSSpeaker*, creationType>()));
    }
  }; // Meta.WitAi.TTS.Utilities.TTSSpeaker
  #pragma pack(pop)
  static check_size<sizeof(TTSSpeaker), 168 + sizeof(bool)> __Meta_WitAi_TTS_Utilities_TTSSpeakerSizeCheck;
  static_assert(sizeof(TTSSpeaker) == 0xA9);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Meta::WitAi::TTS::Utilities::TTSSpeaker::TTSSpeakerRequestData, "Meta.WitAi.TTS.Utilities", "TTSSpeaker/TTSSpeakerRequestData");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::get_Events
// Il2CppName: get_Events
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::TTS::Utilities::TTSSpeakerEvents* (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)()>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::get_Events)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "get_Events", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::get_SpeechEvents
// Il2CppName: get_SpeechEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Speech::VoiceSpeechEvents* (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)()>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::get_SpeechEvents)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "get_SpeechEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::get_TTSService
// Il2CppName: get_TTSService
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::TTS::TTSService* (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)()>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::get_TTSService)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "get_TTSService", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::get_VoiceSettings
// Il2CppName: get_VoiceSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::TTS::Data::TTSVoiceSettings* (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)()>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::get_VoiceSettings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "get_VoiceSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::get_LogCategory
// Il2CppName: get_LogCategory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)()>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::get_LogCategory)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "get_LogCategory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::get_IsSpeaking
// Il2CppName: get_IsSpeaking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)()>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::get_IsSpeaking)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "get_IsSpeaking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::get_SpeakingClip
// Il2CppName: get_SpeakingClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::TTS::Data::TTSClipData* (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)()>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::get_SpeakingClip)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "get_SpeakingClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::get_IsLoading
// Il2CppName: get_IsLoading
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)()>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::get_IsLoading)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "get_IsLoading", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::get_IsPreparing
// Il2CppName: get_IsPreparing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)()>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::get_IsPreparing)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "get_IsPreparing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::get_QueuedClips
// Il2CppName: get_QueuedClips
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::Meta::WitAi::TTS::Data::TTSClipData*>* (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)()>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::get_QueuedClips)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "get_QueuedClips", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::get_IsActive
// Il2CppName: get_IsActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)()>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::get_IsActive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "get_IsActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::get_AudioPlayer
// Il2CppName: get_AudioPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::Voice::Audio::IAudioPlayer* (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)()>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::get_AudioPlayer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "get_AudioPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::get_AudioSource
// Il2CppName: get_AudioSource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AudioSource* (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)()>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::get_AudioSource)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "get_AudioSource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)()>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::RefreshProcessors
// Il2CppName: RefreshProcessors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)()>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::RefreshProcessors)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "RefreshProcessors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)()>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)()>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)()>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::HandleClipUnload
// Il2CppName: HandleClipUnload
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)(::Meta::WitAi::TTS::Data::TTSClipData*)>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::HandleClipUnload)> {
  static const MethodInfo* get() {
    static auto* clipData = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Data", "TTSClipData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "HandleClipUnload", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clipData});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::HandleClipUpdate
// Il2CppName: HandleClipUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)(::Meta::WitAi::TTS::Data::TTSClipData*)>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::HandleClipUpdate)> {
  static const MethodInfo* get() {
    static auto* clipData = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Data", "TTSClipData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "HandleClipUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clipData});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::GetQueuedRequest
// Il2CppName: GetQueuedRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::TTS::Utilities::TTSSpeaker::TTSSpeakerRequestData (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)(::Meta::WitAi::TTS::Data::TTSClipData*)>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::GetQueuedRequest)> {
  static const MethodInfo* get() {
    static auto* clipData = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Data", "TTSClipData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "GetQueuedRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clipData});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::QueueContainsClip
// Il2CppName: QueueContainsClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)(::Meta::WitAi::TTS::Data::TTSClipData*)>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::QueueContainsClip)> {
  static const MethodInfo* get() {
    static auto* clipData = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Data", "TTSClipData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "QueueContainsClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clipData});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::RefreshQueueEvents
// Il2CppName: RefreshQueueEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)()>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::RefreshQueueEvents)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "RefreshQueueEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::IsClipRequestActive
// Il2CppName: IsClipRequestActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)(::Meta::WitAi::TTS::Utilities::TTSSpeaker::TTSSpeakerRequestData)>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::IsClipRequestActive)> {
  static const MethodInfo* get() {
    static auto* requestData = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Utilities", "TTSSpeaker/TTSSpeakerRequestData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "IsClipRequestActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{requestData});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::IsClipRequestLoading
// Il2CppName: IsClipRequestLoading
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)(::Meta::WitAi::TTS::Utilities::TTSSpeaker::TTSSpeakerRequestData)>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::IsClipRequestLoading)> {
  static const MethodInfo* get() {
    static auto* requestData = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Utilities", "TTSSpeaker/TTSSpeakerRequestData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "IsClipRequestLoading", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{requestData});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::IsClipRequestSpeaking
// Il2CppName: IsClipRequestSpeaking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)(::Meta::WitAi::TTS::Utilities::TTSSpeaker::TTSSpeakerRequestData)>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::IsClipRequestSpeaking)> {
  static const MethodInfo* get() {
    static auto* requestData = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Utilities", "TTSSpeaker/TTSSpeakerRequestData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "IsClipRequestSpeaking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{requestData});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::WaitForCompletion
// Il2CppName: WaitForCompletion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)(::System::Collections::Generic::List_1<::Meta::WitAi::TTS::Utilities::TTSSpeaker::TTSSpeakerRequestData>*)>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::WaitForCompletion)> {
  static const MethodInfo* get() {
    static auto* requestData = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Utilities", "TTSSpeaker/TTSSpeakerRequestData")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "WaitForCompletion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{requestData});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::GetFinalText
// Il2CppName: GetFinalText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::StringW>* (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)(::StringW)>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::GetFinalText)> {
  static const MethodInfo* get() {
    static auto* textToSpeak = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "GetFinalText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{textToSpeak});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::GetFinalTextFormatted
// Il2CppName: GetFinalTextFormatted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::StringW>* (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)(::StringW, ::ArrayW<::StringW>)>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::GetFinalTextFormatted)> {
  static const MethodInfo* get() {
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* textsToSpeak = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "GetFinalTextFormatted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{format, textsToSpeak});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::GetFormattedText
// Il2CppName: GetFormattedText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)(::StringW, ::ArrayW<::StringW>)>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::GetFormattedText)> {
  static const MethodInfo* get() {
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* textsToSpeak = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "GetFormattedText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{format, textsToSpeak});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::Speak
// Il2CppName: Speak
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)(::StringW, ::Meta::WitAi::TTS::Data::TTSDiskCacheSettings*, ::Meta::WitAi::TTS::Utilities::TTSSpeakerClipEvents*)>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::Speak)> {
  static const MethodInfo* get() {
    static auto* textToSpeak = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* diskCacheSettings = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Data", "TTSDiskCacheSettings")->byval_arg;
    static auto* playbackEvents = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Utilities", "TTSSpeakerClipEvents")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "Speak", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{textToSpeak, diskCacheSettings, playbackEvents});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::Speak
// Il2CppName: Speak
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)(::StringW, ::Meta::WitAi::TTS::Utilities::TTSSpeakerClipEvents*)>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::Speak)> {
  static const MethodInfo* get() {
    static auto* textToSpeak = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* playbackEvents = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Utilities", "TTSSpeakerClipEvents")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "Speak", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{textToSpeak, playbackEvents});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::Speak
// Il2CppName: Speak
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)(::StringW, ::Meta::WitAi::TTS::Data::TTSDiskCacheSettings*)>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::Speak)> {
  static const MethodInfo* get() {
    static auto* textToSpeak = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* diskCacheSettings = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Data", "TTSDiskCacheSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "Speak", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{textToSpeak, diskCacheSettings});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::Speak
// Il2CppName: Speak
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)(::StringW)>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::Speak)> {
  static const MethodInfo* get() {
    static auto* textToSpeak = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "Speak", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{textToSpeak});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::SpeakFormat
// Il2CppName: SpeakFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)(::StringW, ::ArrayW<::StringW>)>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::SpeakFormat)> {
  static const MethodInfo* get() {
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* textsToSpeak = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "SpeakFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{format, textsToSpeak});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::SpeakAsync
// Il2CppName: SpeakAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)(::StringW, ::Meta::WitAi::TTS::Data::TTSDiskCacheSettings*, ::Meta::WitAi::TTS::Utilities::TTSSpeakerClipEvents*)>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::SpeakAsync)> {
  static const MethodInfo* get() {
    static auto* textToSpeak = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* diskCacheSettings = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Data", "TTSDiskCacheSettings")->byval_arg;
    static auto* playbackEvents = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Utilities", "TTSSpeakerClipEvents")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "SpeakAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{textToSpeak, diskCacheSettings, playbackEvents});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::SpeakAsync
// Il2CppName: SpeakAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)(::StringW, ::Meta::WitAi::TTS::Utilities::TTSSpeakerClipEvents*)>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::SpeakAsync)> {
  static const MethodInfo* get() {
    static auto* textToSpeak = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* playbackEvents = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Utilities", "TTSSpeakerClipEvents")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "SpeakAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{textToSpeak, playbackEvents});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::SpeakAsync
// Il2CppName: SpeakAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)(::StringW, ::Meta::WitAi::TTS::Data::TTSDiskCacheSettings*)>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::SpeakAsync)> {
  static const MethodInfo* get() {
    static auto* textToSpeak = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* diskCacheSettings = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Data", "TTSDiskCacheSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "SpeakAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{textToSpeak, diskCacheSettings});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::SpeakAsync
// Il2CppName: SpeakAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)(::StringW)>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::SpeakAsync)> {
  static const MethodInfo* get() {
    static auto* textToSpeak = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "SpeakAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{textToSpeak});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::SpeakQueued
// Il2CppName: SpeakQueued
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)(::StringW, ::Meta::WitAi::TTS::Data::TTSDiskCacheSettings*, ::Meta::WitAi::TTS::Utilities::TTSSpeakerClipEvents*)>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::SpeakQueued)> {
  static const MethodInfo* get() {
    static auto* textToSpeak = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* diskCacheSettings = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Data", "TTSDiskCacheSettings")->byval_arg;
    static auto* playbackEvents = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Utilities", "TTSSpeakerClipEvents")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "SpeakQueued", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{textToSpeak, diskCacheSettings, playbackEvents});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::SpeakQueued
// Il2CppName: SpeakQueued
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)(::StringW, ::Meta::WitAi::TTS::Utilities::TTSSpeakerClipEvents*)>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::SpeakQueued)> {
  static const MethodInfo* get() {
    static auto* textToSpeak = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* playbackEvents = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Utilities", "TTSSpeakerClipEvents")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "SpeakQueued", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{textToSpeak, playbackEvents});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::SpeakQueued
// Il2CppName: SpeakQueued
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)(::StringW, ::Meta::WitAi::TTS::Data::TTSDiskCacheSettings*)>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::SpeakQueued)> {
  static const MethodInfo* get() {
    static auto* textToSpeak = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* diskCacheSettings = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Data", "TTSDiskCacheSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "SpeakQueued", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{textToSpeak, diskCacheSettings});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::SpeakQueued
// Il2CppName: SpeakQueued
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)(::StringW)>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::SpeakQueued)> {
  static const MethodInfo* get() {
    static auto* textToSpeak = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "SpeakQueued", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{textToSpeak});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::SpeakFormatQueued
// Il2CppName: SpeakFormatQueued
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)(::StringW, ::ArrayW<::StringW>)>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::SpeakFormatQueued)> {
  static const MethodInfo* get() {
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* textsToSpeak = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "SpeakFormatQueued", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{format, textsToSpeak});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::SpeakQueuedAsync
// Il2CppName: SpeakQueuedAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)(::ArrayW<::StringW>, ::Meta::WitAi::TTS::Data::TTSDiskCacheSettings*, ::Meta::WitAi::TTS::Utilities::TTSSpeakerClipEvents*)>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::SpeakQueuedAsync)> {
  static const MethodInfo* get() {
    static auto* textsToSpeak = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    static auto* diskCacheSettings = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Data", "TTSDiskCacheSettings")->byval_arg;
    static auto* playbackEvents = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Utilities", "TTSSpeakerClipEvents")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "SpeakQueuedAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{textsToSpeak, diskCacheSettings, playbackEvents});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::SpeakQueuedAsync
// Il2CppName: SpeakQueuedAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)(::ArrayW<::StringW>, ::Meta::WitAi::TTS::Utilities::TTSSpeakerClipEvents*)>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::SpeakQueuedAsync)> {
  static const MethodInfo* get() {
    static auto* textsToSpeak = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    static auto* playbackEvents = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Utilities", "TTSSpeakerClipEvents")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "SpeakQueuedAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{textsToSpeak, playbackEvents});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::SpeakQueuedAsync
// Il2CppName: SpeakQueuedAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)(::ArrayW<::StringW>, ::Meta::WitAi::TTS::Data::TTSDiskCacheSettings*)>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::SpeakQueuedAsync)> {
  static const MethodInfo* get() {
    static auto* textsToSpeak = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    static auto* diskCacheSettings = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Data", "TTSDiskCacheSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "SpeakQueuedAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{textsToSpeak, diskCacheSettings});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::SpeakQueuedAsync
// Il2CppName: SpeakQueuedAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)(::ArrayW<::StringW>)>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::SpeakQueuedAsync)> {
  static const MethodInfo* get() {
    static auto* textsToSpeak = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "SpeakQueuedAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{textsToSpeak});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::Speak
// Il2CppName: Speak
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::Meta::WitAi::TTS::Utilities::TTSSpeaker::TTSSpeakerRequestData>* (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)(::StringW, ::Meta::WitAi::TTS::Data::TTSDiskCacheSettings*, ::Meta::WitAi::TTS::Utilities::TTSSpeakerClipEvents*, bool)>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::Speak)> {
  static const MethodInfo* get() {
    static auto* textToSpeak = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* diskCacheSettings = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Data", "TTSDiskCacheSettings")->byval_arg;
    static auto* playbackEvents = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Utilities", "TTSSpeakerClipEvents")->byval_arg;
    static auto* addToQueue = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "Speak", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{textToSpeak, diskCacheSettings, playbackEvents, addToQueue});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::Stop
// Il2CppName: Stop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)(::StringW, bool)>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::Stop)> {
  static const MethodInfo* get() {
    static auto* textToSpeak = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* allInstances = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "Stop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{textToSpeak, allInstances});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::Stop
// Il2CppName: Stop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)(::Meta::WitAi::TTS::Data::TTSClipData*, bool)>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::Stop)> {
  static const MethodInfo* get() {
    static auto* clipData = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Data", "TTSClipData")->byval_arg;
    static auto* allInstances = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "Stop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clipData, allInstances});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::StopLoading
// Il2CppName: StopLoading
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)()>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::StopLoading)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "StopLoading", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::StopSpeaking
// Il2CppName: StopSpeaking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)()>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::StopSpeaking)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "StopSpeaking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::Stop
// Il2CppName: Stop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)()>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::Stop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "Stop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::SetVoiceOverride
// Il2CppName: SetVoiceOverride
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)(::Meta::WitAi::TTS::Data::TTSVoiceSettings*)>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::SetVoiceOverride)> {
  static const MethodInfo* get() {
    static auto* overrideVoiceSettings = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Data", "TTSVoiceSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "SetVoiceOverride", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{overrideVoiceSettings});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::ClearVoiceOverride
// Il2CppName: ClearVoiceOverride
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)()>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::ClearVoiceOverride)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "ClearVoiceOverride", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::DecodeResponse
// Il2CppName: DecodeResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)(::Meta::WitAi::Json::WitResponseNode*, ByRef<::StringW>, ByRef<::Meta::WitAi::TTS::Data::TTSVoiceSettings*>)>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::DecodeResponse)> {
  static const MethodInfo* get() {
    static auto* responseNode = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Json", "WitResponseNode")->byval_arg;
    static auto* textToSpeak = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    static auto* voiceSettings = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Data", "TTSVoiceSettings")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "DecodeResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{responseNode, textToSpeak, voiceSettings});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::Speak
// Il2CppName: Speak
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)(::StringW, ::Meta::WitAi::TTS::Data::TTSVoiceSettings*, ::Meta::WitAi::TTS::Data::TTSDiskCacheSettings*, ::Meta::WitAi::TTS::Utilities::TTSSpeakerClipEvents*)>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::Speak)> {
  static const MethodInfo* get() {
    static auto* textToSpeak = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* overrideVoiceSettings = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Data", "TTSVoiceSettings")->byval_arg;
    static auto* diskCacheSettings = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Data", "TTSDiskCacheSettings")->byval_arg;
    static auto* playbackEvents = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Utilities", "TTSSpeakerClipEvents")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "Speak", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{textToSpeak, overrideVoiceSettings, diskCacheSettings, playbackEvents});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::Speak
// Il2CppName: Speak
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)(::Meta::WitAi::Json::WitResponseNode*, ::Meta::WitAi::TTS::Data::TTSDiskCacheSettings*, ::Meta::WitAi::TTS::Utilities::TTSSpeakerClipEvents*)>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::Speak)> {
  static const MethodInfo* get() {
    static auto* responseNode = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Json", "WitResponseNode")->byval_arg;
    static auto* diskCacheSettings = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Data", "TTSDiskCacheSettings")->byval_arg;
    static auto* playbackEvents = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Utilities", "TTSSpeakerClipEvents")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "Speak", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{responseNode, diskCacheSettings, playbackEvents});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::Speak
// Il2CppName: Speak
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)(::Meta::WitAi::Json::WitResponseNode*, ::Meta::WitAi::TTS::Data::TTSDiskCacheSettings*)>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::Speak)> {
  static const MethodInfo* get() {
    static auto* responseNode = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Json", "WitResponseNode")->byval_arg;
    static auto* diskCacheSettings = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Data", "TTSDiskCacheSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "Speak", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{responseNode, diskCacheSettings});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::Speak
// Il2CppName: Speak
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)(::Meta::WitAi::Json::WitResponseNode*, ::Meta::WitAi::TTS::Utilities::TTSSpeakerClipEvents*)>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::Speak)> {
  static const MethodInfo* get() {
    static auto* responseNode = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Json", "WitResponseNode")->byval_arg;
    static auto* playbackEvents = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Utilities", "TTSSpeakerClipEvents")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "Speak", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{responseNode, playbackEvents});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::Speak
// Il2CppName: Speak
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)(::Meta::WitAi::Json::WitResponseNode*)>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::Speak)> {
  static const MethodInfo* get() {
    static auto* responseNode = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Json", "WitResponseNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "Speak", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{responseNode});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::SpeakAsync
// Il2CppName: SpeakAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)(::StringW, ::Meta::WitAi::TTS::Data::TTSVoiceSettings*, ::Meta::WitAi::TTS::Data::TTSDiskCacheSettings*, ::Meta::WitAi::TTS::Utilities::TTSSpeakerClipEvents*)>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::SpeakAsync)> {
  static const MethodInfo* get() {
    static auto* textToSpeak = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* overrideVoiceSettings = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Data", "TTSVoiceSettings")->byval_arg;
    static auto* diskCacheSettings = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Data", "TTSDiskCacheSettings")->byval_arg;
    static auto* playbackEvents = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Utilities", "TTSSpeakerClipEvents")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "SpeakAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{textToSpeak, overrideVoiceSettings, diskCacheSettings, playbackEvents});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::SpeakAsync
// Il2CppName: SpeakAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)(::Meta::WitAi::Json::WitResponseNode*, ::Meta::WitAi::TTS::Data::TTSDiskCacheSettings*, ::Meta::WitAi::TTS::Utilities::TTSSpeakerClipEvents*)>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::SpeakAsync)> {
  static const MethodInfo* get() {
    static auto* responseNode = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Json", "WitResponseNode")->byval_arg;
    static auto* diskCacheSettings = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Data", "TTSDiskCacheSettings")->byval_arg;
    static auto* playbackEvents = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Utilities", "TTSSpeakerClipEvents")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "SpeakAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{responseNode, diskCacheSettings, playbackEvents});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::SpeakAsync
// Il2CppName: SpeakAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)(::Meta::WitAi::Json::WitResponseNode*, ::Meta::WitAi::TTS::Utilities::TTSSpeakerClipEvents*)>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::SpeakAsync)> {
  static const MethodInfo* get() {
    static auto* responseNode = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Json", "WitResponseNode")->byval_arg;
    static auto* playbackEvents = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Utilities", "TTSSpeakerClipEvents")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "SpeakAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{responseNode, playbackEvents});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::SpeakAsync
// Il2CppName: SpeakAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)(::Meta::WitAi::Json::WitResponseNode*, ::Meta::WitAi::TTS::Data::TTSDiskCacheSettings*)>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::SpeakAsync)> {
  static const MethodInfo* get() {
    static auto* responseNode = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Json", "WitResponseNode")->byval_arg;
    static auto* diskCacheSettings = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Data", "TTSDiskCacheSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "SpeakAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{responseNode, diskCacheSettings});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::SpeakQueued
// Il2CppName: SpeakQueued
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)(::StringW, ::Meta::WitAi::TTS::Data::TTSVoiceSettings*, ::Meta::WitAi::TTS::Data::TTSDiskCacheSettings*, ::Meta::WitAi::TTS::Utilities::TTSSpeakerClipEvents*)>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::SpeakQueued)> {
  static const MethodInfo* get() {
    static auto* textToSpeak = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* overrideVoiceSettings = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Data", "TTSVoiceSettings")->byval_arg;
    static auto* diskCacheSettings = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Data", "TTSDiskCacheSettings")->byval_arg;
    static auto* playbackEvents = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Utilities", "TTSSpeakerClipEvents")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "SpeakQueued", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{textToSpeak, overrideVoiceSettings, diskCacheSettings, playbackEvents});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::SpeakQueued
// Il2CppName: SpeakQueued
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)(::Meta::WitAi::Json::WitResponseNode*, ::Meta::WitAi::TTS::Data::TTSDiskCacheSettings*, ::Meta::WitAi::TTS::Utilities::TTSSpeakerClipEvents*)>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::SpeakQueued)> {
  static const MethodInfo* get() {
    static auto* responseNode = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Json", "WitResponseNode")->byval_arg;
    static auto* diskCacheSettings = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Data", "TTSDiskCacheSettings")->byval_arg;
    static auto* playbackEvents = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Utilities", "TTSSpeakerClipEvents")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "SpeakQueued", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{responseNode, diskCacheSettings, playbackEvents});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::SpeakQueued
// Il2CppName: SpeakQueued
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)(::Meta::WitAi::Json::WitResponseNode*, ::Meta::WitAi::TTS::Utilities::TTSSpeakerClipEvents*)>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::SpeakQueued)> {
  static const MethodInfo* get() {
    static auto* responseNode = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Json", "WitResponseNode")->byval_arg;
    static auto* playbackEvents = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Utilities", "TTSSpeakerClipEvents")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "SpeakQueued", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{responseNode, playbackEvents});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::SpeakQueued
// Il2CppName: SpeakQueued
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)(::Meta::WitAi::Json::WitResponseNode*, ::Meta::WitAi::TTS::Data::TTSDiskCacheSettings*)>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::SpeakQueued)> {
  static const MethodInfo* get() {
    static auto* responseNode = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Json", "WitResponseNode")->byval_arg;
    static auto* diskCacheSettings = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Data", "TTSDiskCacheSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "SpeakQueued", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{responseNode, diskCacheSettings});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::SpeakQueued
// Il2CppName: SpeakQueued
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)(::Meta::WitAi::Json::WitResponseNode*)>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::SpeakQueued)> {
  static const MethodInfo* get() {
    static auto* responseNode = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Json", "WitResponseNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "SpeakQueued", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{responseNode});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::SpeakQueuedAsync
// Il2CppName: SpeakQueuedAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)(::ArrayW<::StringW>, ::Meta::WitAi::TTS::Data::TTSVoiceSettings*, ::Meta::WitAi::TTS::Data::TTSDiskCacheSettings*, ::Meta::WitAi::TTS::Utilities::TTSSpeakerClipEvents*)>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::SpeakQueuedAsync)> {
  static const MethodInfo* get() {
    static auto* textsToSpeak = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    static auto* overrideVoiceSettings = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Data", "TTSVoiceSettings")->byval_arg;
    static auto* diskCacheSettings = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Data", "TTSDiskCacheSettings")->byval_arg;
    static auto* playbackEvents = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Utilities", "TTSSpeakerClipEvents")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "SpeakQueuedAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{textsToSpeak, overrideVoiceSettings, diskCacheSettings, playbackEvents});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::SpeakQueuedAsync
// Il2CppName: SpeakQueuedAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)(::Meta::WitAi::Json::WitResponseNode*, ::Meta::WitAi::TTS::Data::TTSDiskCacheSettings*, ::Meta::WitAi::TTS::Utilities::TTSSpeakerClipEvents*)>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::SpeakQueuedAsync)> {
  static const MethodInfo* get() {
    static auto* responseNode = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Json", "WitResponseNode")->byval_arg;
    static auto* diskCacheSettings = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Data", "TTSDiskCacheSettings")->byval_arg;
    static auto* playbackEvents = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Utilities", "TTSSpeakerClipEvents")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "SpeakQueuedAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{responseNode, diskCacheSettings, playbackEvents});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::SpeakQueuedAsync
// Il2CppName: SpeakQueuedAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)(::Meta::WitAi::Json::WitResponseNode*, ::Meta::WitAi::TTS::Utilities::TTSSpeakerClipEvents*)>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::SpeakQueuedAsync)> {
  static const MethodInfo* get() {
    static auto* responseNode = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Json", "WitResponseNode")->byval_arg;
    static auto* playbackEvents = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Utilities", "TTSSpeakerClipEvents")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "SpeakQueuedAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{responseNode, playbackEvents});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::SpeakQueuedAsync
// Il2CppName: SpeakQueuedAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)(::Meta::WitAi::Json::WitResponseNode*, ::Meta::WitAi::TTS::Data::TTSDiskCacheSettings*)>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::SpeakQueuedAsync)> {
  static const MethodInfo* get() {
    static auto* responseNode = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Json", "WitResponseNode")->byval_arg;
    static auto* diskCacheSettings = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Data", "TTSDiskCacheSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "SpeakQueuedAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{responseNode, diskCacheSettings});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::SpeakQueuedAsync
// Il2CppName: SpeakQueuedAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)(::Meta::WitAi::Json::WitResponseNode*)>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::SpeakQueuedAsync)> {
  static const MethodInfo* get() {
    static auto* responseNode = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Json", "WitResponseNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "SpeakQueuedAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{responseNode});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::HandleLoad
// Il2CppName: HandleLoad
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::TTS::Utilities::TTSSpeaker::TTSSpeakerRequestData (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)(::StringW, ::Meta::WitAi::TTS::Data::TTSVoiceSettings*, ::Meta::WitAi::TTS::Data::TTSDiskCacheSettings*, ::Meta::WitAi::TTS::Utilities::TTSSpeakerClipEvents*, bool)>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::HandleLoad)> {
  static const MethodInfo* get() {
    static auto* textToSpeak = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* voiceSettings = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Data", "TTSVoiceSettings")->byval_arg;
    static auto* diskCacheSettings = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Data", "TTSDiskCacheSettings")->byval_arg;
    static auto* playbackEvents = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Utilities", "TTSSpeakerClipEvents")->byval_arg;
    static auto* addToQueue = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "HandleLoad", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{textToSpeak, voiceSettings, diskCacheSettings, playbackEvents, addToQueue});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::HandleLoadComplete
// Il2CppName: HandleLoadComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)(::Meta::WitAi::TTS::Utilities::TTSSpeaker::TTSSpeakerRequestData, ::StringW)>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::HandleLoadComplete)> {
  static const MethodInfo* get() {
    static auto* requestData = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Utilities", "TTSSpeaker/TTSSpeakerRequestData")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "HandleLoadComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{requestData, error});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::RefreshPlayback
// Il2CppName: RefreshPlayback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)()>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::RefreshPlayback)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "RefreshPlayback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::WaitForPlaybackComplete
// Il2CppName: WaitForPlaybackComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)()>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::WaitForPlaybackComplete)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "WaitForPlaybackComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::IsPlaybackComplete
// Il2CppName: IsPlaybackComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)(float)>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::IsPlaybackComplete)> {
  static const MethodInfo* get() {
    static auto* elapsedTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "IsPlaybackComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{elapsedTime});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::HandlePlaybackComplete
// Il2CppName: HandlePlaybackComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)(bool)>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::HandlePlaybackComplete)> {
  static const MethodInfo* get() {
    static auto* stopped = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "HandlePlaybackComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stopped});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::get_IsPaused
// Il2CppName: get_IsPaused
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)()>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::get_IsPaused)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "get_IsPaused", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::set_IsPaused
// Il2CppName: set_IsPaused
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)(bool)>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::set_IsPaused)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "set_IsPaused", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::Pause
// Il2CppName: Pause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)()>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::Pause)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "Pause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::Resume
// Il2CppName: Resume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)()>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::Resume)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "Resume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::SetPause
// Il2CppName: SetPause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)(bool)>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::SetPause)> {
  static const MethodInfo* get() {
    static auto* toPaused = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "SetPause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{toPaused});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::HandleUnload
// Il2CppName: HandleUnload
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)(::Meta::WitAi::TTS::Data::TTSClipData*, ::StringW)>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::HandleUnload)> {
  static const MethodInfo* get() {
    static auto* clipData = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Data", "TTSClipData")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "HandleUnload", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clipData, error});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::HandleUnload
// Il2CppName: HandleUnload
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)(::Meta::WitAi::TTS::Utilities::TTSSpeaker::TTSSpeakerRequestData, ::StringW)>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::HandleUnload)> {
  static const MethodInfo* get() {
    static auto* requestData = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Utilities", "TTSSpeaker/TTSSpeakerRequestData")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "HandleUnload", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{requestData, error});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::HandleUnload
// Il2CppName: HandleUnload
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)(::System::Func_2<::Meta::WitAi::TTS::Utilities::TTSSpeaker::TTSSpeakerRequestData, bool>*, ::StringW)>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::HandleUnload)> {
  static const MethodInfo* get() {
    static auto* shouldKeep = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Func`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Utilities", "TTSSpeaker/TTSSpeakerRequestData"), ::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "HandleUnload", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shouldKeep, error});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::Log
// Il2CppName: Log
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)(::StringW)>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::Log)> {
  static const MethodInfo* get() {
    static auto* comment = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "Log", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{comment});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::OnPlaybackQueueBegin
// Il2CppName: OnPlaybackQueueBegin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)()>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::OnPlaybackQueueBegin)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "OnPlaybackQueueBegin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::OnPlaybackQueueComplete
// Il2CppName: OnPlaybackQueueComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)()>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::OnPlaybackQueueComplete)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "OnPlaybackQueueComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::LogRequestData
// Il2CppName: LogRequestData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)(::StringW, ::Meta::WitAi::TTS::Utilities::TTSSpeaker::TTSSpeakerRequestData, bool)>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::LogRequestData)> {
  static const MethodInfo* get() {
    static auto* comment = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* requestData = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Utilities", "TTSSpeaker/TTSSpeakerRequestData")->byval_arg;
    static auto* warning = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "LogRequestData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{comment, requestData, warning});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::OnInit
// Il2CppName: OnInit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)(::Meta::WitAi::TTS::Utilities::TTSSpeaker::TTSSpeakerRequestData)>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::OnInit)> {
  static const MethodInfo* get() {
    static auto* requestData = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Utilities", "TTSSpeaker/TTSSpeakerRequestData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "OnInit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{requestData});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::OnLoadBegin
// Il2CppName: OnLoadBegin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)(::Meta::WitAi::TTS::Utilities::TTSSpeaker::TTSSpeakerRequestData)>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::OnLoadBegin)> {
  static const MethodInfo* get() {
    static auto* requestData = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Utilities", "TTSSpeaker/TTSSpeakerRequestData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "OnLoadBegin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{requestData});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::OnLoadAborted
// Il2CppName: OnLoadAborted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)(::Meta::WitAi::TTS::Utilities::TTSSpeaker::TTSSpeakerRequestData)>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::OnLoadAborted)> {
  static const MethodInfo* get() {
    static auto* requestData = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Utilities", "TTSSpeaker/TTSSpeakerRequestData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "OnLoadAborted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{requestData});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::OnLoadFailed
// Il2CppName: OnLoadFailed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)(::Meta::WitAi::TTS::Utilities::TTSSpeaker::TTSSpeakerRequestData, ::StringW)>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::OnLoadFailed)> {
  static const MethodInfo* get() {
    static auto* requestData = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Utilities", "TTSSpeaker/TTSSpeakerRequestData")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "OnLoadFailed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{requestData, error});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::OnLoadSuccess
// Il2CppName: OnLoadSuccess
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)(::Meta::WitAi::TTS::Utilities::TTSSpeaker::TTSSpeakerRequestData)>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::OnLoadSuccess)> {
  static const MethodInfo* get() {
    static auto* requestData = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Utilities", "TTSSpeaker/TTSSpeakerRequestData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "OnLoadSuccess", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{requestData});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::OnPlaybackReady
// Il2CppName: OnPlaybackReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)(::Meta::WitAi::TTS::Utilities::TTSSpeaker::TTSSpeakerRequestData)>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::OnPlaybackReady)> {
  static const MethodInfo* get() {
    static auto* requestData = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Utilities", "TTSSpeaker/TTSSpeakerRequestData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "OnPlaybackReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{requestData});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::OnPlaybackStart
// Il2CppName: OnPlaybackStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)(::Meta::WitAi::TTS::Utilities::TTSSpeaker::TTSSpeakerRequestData)>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::OnPlaybackStart)> {
  static const MethodInfo* get() {
    static auto* requestData = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Utilities", "TTSSpeaker/TTSSpeakerRequestData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "OnPlaybackStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{requestData});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::OnPlaybackCancelled
// Il2CppName: OnPlaybackCancelled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)(::Meta::WitAi::TTS::Utilities::TTSSpeaker::TTSSpeakerRequestData, ::StringW)>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::OnPlaybackCancelled)> {
  static const MethodInfo* get() {
    static auto* requestData = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Utilities", "TTSSpeaker/TTSSpeakerRequestData")->byval_arg;
    static auto* reason = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "OnPlaybackCancelled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{requestData, reason});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::OnPlaybackClipUpdated
// Il2CppName: OnPlaybackClipUpdated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)(::Meta::WitAi::TTS::Utilities::TTSSpeaker::TTSSpeakerRequestData)>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::OnPlaybackClipUpdated)> {
  static const MethodInfo* get() {
    static auto* requestData = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Utilities", "TTSSpeaker/TTSSpeakerRequestData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "OnPlaybackClipUpdated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{requestData});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::OnPlaybackComplete
// Il2CppName: OnPlaybackComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)(::Meta::WitAi::TTS::Utilities::TTSSpeaker::TTSSpeakerRequestData)>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::OnPlaybackComplete)> {
  static const MethodInfo* get() {
    static auto* requestData = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Utilities", "TTSSpeaker/TTSSpeakerRequestData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "OnPlaybackComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{requestData});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::OnComplete
// Il2CppName: OnComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::TTS::Utilities::TTSSpeaker::*)(::Meta::WitAi::TTS::Utilities::TTSSpeaker::TTSSpeakerRequestData)>(&Meta::WitAi::TTS::Utilities::TTSSpeaker::OnComplete)> {
  static const MethodInfo* get() {
    static auto* requestData = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Utilities", "TTSSpeaker/TTSSpeakerRequestData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeaker*), "OnComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{requestData});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeaker::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
