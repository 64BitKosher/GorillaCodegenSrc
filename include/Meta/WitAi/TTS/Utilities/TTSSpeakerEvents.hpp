// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Meta.WitAi.TTS.Utilities.TTSSpeakerClipEvents
#include "Meta/WitAi/TTS/Utilities/TTSSpeakerClipEvents.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Events
namespace UnityEngine::Events {
  // Forward declaring type: UnityEvent
  class UnityEvent;
}
// Forward declaring namespace: Meta::WitAi::TTS::Utilities
namespace Meta::WitAi::TTS::Utilities {
  // Forward declaring type: TTSSpeakerClipDataEvent
  class TTSSpeakerClipDataEvent;
  // Forward declaring type: TTSSpeakerEvent
  class TTSSpeakerEvent;
}
// Completed forward declares
// Type namespace: Meta.WitAi.TTS.Utilities
namespace Meta::WitAi::TTS::Utilities {
  // Forward declaring type: TTSSpeakerEvents
  class TTSSpeakerEvents;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::WitAi::TTS::Utilities::TTSSpeakerEvents);
DEFINE_IL2CPP_ARG_TYPE(::Meta::WitAi::TTS::Utilities::TTSSpeakerEvents*, "Meta.WitAi.TTS.Utilities", "TTSSpeakerEvents");
// Type namespace: Meta.WitAi.TTS.Utilities
namespace Meta::WitAi::TTS::Utilities {
  // Size: 0x130
  #pragma pack(push, 1)
  // Autogenerated type: Meta.WitAi.TTS.Utilities.TTSSpeakerEvents
  // [TokenAttribute] Offset: FFFFFFFF
  class TTSSpeakerEvents : public ::Meta::WitAi::TTS::Utilities::TTSSpeakerClipEvents {
    public:
    public:
    // private UnityEngine.Events.UnityEvent _onPlaybackQueueBegin
    // Size: 0x8
    // Offset: 0xA0
    ::UnityEngine::Events::UnityEvent* onPlaybackQueueBegin;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    // private UnityEngine.Events.UnityEvent _onPlaybackQueueComplete
    // Size: 0x8
    // Offset: 0xA8
    ::UnityEngine::Events::UnityEvent* onPlaybackQueueComplete;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    // public Meta.WitAi.TTS.Utilities.TTSSpeakerClipDataEvent OnClipDataQueued
    // Size: 0x8
    // Offset: 0xB0
    ::Meta::WitAi::TTS::Utilities::TTSSpeakerClipDataEvent* OnClipDataQueued;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::TTS::Utilities::TTSSpeakerClipDataEvent*) == 0x8);
    // public Meta.WitAi.TTS.Utilities.TTSSpeakerEvent OnClipLoadBegin
    // Size: 0x8
    // Offset: 0xB8
    ::Meta::WitAi::TTS::Utilities::TTSSpeakerEvent* OnClipLoadBegin;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::TTS::Utilities::TTSSpeakerEvent*) == 0x8);
    // public Meta.WitAi.TTS.Utilities.TTSSpeakerClipDataEvent OnClipDataLoadBegin
    // Size: 0x8
    // Offset: 0xC0
    ::Meta::WitAi::TTS::Utilities::TTSSpeakerClipDataEvent* OnClipDataLoadBegin;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::TTS::Utilities::TTSSpeakerClipDataEvent*) == 0x8);
    // public Meta.WitAi.TTS.Utilities.TTSSpeakerEvent OnClipLoadAbort
    // Size: 0x8
    // Offset: 0xC8
    ::Meta::WitAi::TTS::Utilities::TTSSpeakerEvent* OnClipLoadAbort;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::TTS::Utilities::TTSSpeakerEvent*) == 0x8);
    // public Meta.WitAi.TTS.Utilities.TTSSpeakerClipDataEvent OnClipDataLoadAbort
    // Size: 0x8
    // Offset: 0xD0
    ::Meta::WitAi::TTS::Utilities::TTSSpeakerClipDataEvent* OnClipDataLoadAbort;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::TTS::Utilities::TTSSpeakerClipDataEvent*) == 0x8);
    // public Meta.WitAi.TTS.Utilities.TTSSpeakerEvent OnClipLoadFailed
    // Size: 0x8
    // Offset: 0xD8
    ::Meta::WitAi::TTS::Utilities::TTSSpeakerEvent* OnClipLoadFailed;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::TTS::Utilities::TTSSpeakerEvent*) == 0x8);
    // public Meta.WitAi.TTS.Utilities.TTSSpeakerClipDataEvent OnClipDataLoadFailed
    // Size: 0x8
    // Offset: 0xE0
    ::Meta::WitAi::TTS::Utilities::TTSSpeakerClipDataEvent* OnClipDataLoadFailed;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::TTS::Utilities::TTSSpeakerClipDataEvent*) == 0x8);
    // public Meta.WitAi.TTS.Utilities.TTSSpeakerEvent OnClipLoadSuccess
    // Size: 0x8
    // Offset: 0xE8
    ::Meta::WitAi::TTS::Utilities::TTSSpeakerEvent* OnClipLoadSuccess;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::TTS::Utilities::TTSSpeakerEvent*) == 0x8);
    // public Meta.WitAi.TTS.Utilities.TTSSpeakerClipDataEvent OnClipDataLoadSuccess
    // Size: 0x8
    // Offset: 0xF0
    ::Meta::WitAi::TTS::Utilities::TTSSpeakerClipDataEvent* OnClipDataLoadSuccess;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::TTS::Utilities::TTSSpeakerClipDataEvent*) == 0x8);
    // public Meta.WitAi.TTS.Utilities.TTSSpeakerClipDataEvent OnClipDataPlaybackReady
    // Size: 0x8
    // Offset: 0xF8
    ::Meta::WitAi::TTS::Utilities::TTSSpeakerClipDataEvent* OnClipDataPlaybackReady;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::TTS::Utilities::TTSSpeakerClipDataEvent*) == 0x8);
    // public Meta.WitAi.TTS.Utilities.TTSSpeakerEvent OnStartSpeaking
    // Size: 0x8
    // Offset: 0x100
    ::Meta::WitAi::TTS::Utilities::TTSSpeakerEvent* OnStartSpeaking;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::TTS::Utilities::TTSSpeakerEvent*) == 0x8);
    // public Meta.WitAi.TTS.Utilities.TTSSpeakerClipDataEvent OnClipDataPlaybackStart
    // Size: 0x8
    // Offset: 0x108
    ::Meta::WitAi::TTS::Utilities::TTSSpeakerClipDataEvent* OnClipDataPlaybackStart;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::TTS::Utilities::TTSSpeakerClipDataEvent*) == 0x8);
    // public Meta.WitAi.TTS.Utilities.TTSSpeakerEvent OnCancelledSpeaking
    // Size: 0x8
    // Offset: 0x110
    ::Meta::WitAi::TTS::Utilities::TTSSpeakerEvent* OnCancelledSpeaking;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::TTS::Utilities::TTSSpeakerEvent*) == 0x8);
    // public Meta.WitAi.TTS.Utilities.TTSSpeakerClipDataEvent OnClipDataPlaybackCancelled
    // Size: 0x8
    // Offset: 0x118
    ::Meta::WitAi::TTS::Utilities::TTSSpeakerClipDataEvent* OnClipDataPlaybackCancelled;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::TTS::Utilities::TTSSpeakerClipDataEvent*) == 0x8);
    // public Meta.WitAi.TTS.Utilities.TTSSpeakerEvent OnFinishedSpeaking
    // Size: 0x8
    // Offset: 0x120
    ::Meta::WitAi::TTS::Utilities::TTSSpeakerEvent* OnFinishedSpeaking;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::TTS::Utilities::TTSSpeakerEvent*) == 0x8);
    // public Meta.WitAi.TTS.Utilities.TTSSpeakerClipDataEvent OnClipDataPlaybackFinished
    // Size: 0x8
    // Offset: 0x128
    ::Meta::WitAi::TTS::Utilities::TTSSpeakerClipDataEvent* OnClipDataPlaybackFinished;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::TTS::Utilities::TTSSpeakerClipDataEvent*) == 0x8);
    public:
    // Get instance field reference: private UnityEngine.Events.UnityEvent _onPlaybackQueueBegin
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn__onPlaybackQueueBegin();
    // Get instance field reference: private UnityEngine.Events.UnityEvent _onPlaybackQueueComplete
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn__onPlaybackQueueComplete();
    // Get instance field reference: public Meta.WitAi.TTS.Utilities.TTSSpeakerClipDataEvent OnClipDataQueued
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::TTS::Utilities::TTSSpeakerClipDataEvent*& dyn_OnClipDataQueued();
    // Get instance field reference: public Meta.WitAi.TTS.Utilities.TTSSpeakerEvent OnClipLoadBegin
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::TTS::Utilities::TTSSpeakerEvent*& dyn_OnClipLoadBegin();
    // Get instance field reference: public Meta.WitAi.TTS.Utilities.TTSSpeakerClipDataEvent OnClipDataLoadBegin
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::TTS::Utilities::TTSSpeakerClipDataEvent*& dyn_OnClipDataLoadBegin();
    // Get instance field reference: public Meta.WitAi.TTS.Utilities.TTSSpeakerEvent OnClipLoadAbort
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::TTS::Utilities::TTSSpeakerEvent*& dyn_OnClipLoadAbort();
    // Get instance field reference: public Meta.WitAi.TTS.Utilities.TTSSpeakerClipDataEvent OnClipDataLoadAbort
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::TTS::Utilities::TTSSpeakerClipDataEvent*& dyn_OnClipDataLoadAbort();
    // Get instance field reference: public Meta.WitAi.TTS.Utilities.TTSSpeakerEvent OnClipLoadFailed
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::TTS::Utilities::TTSSpeakerEvent*& dyn_OnClipLoadFailed();
    // Get instance field reference: public Meta.WitAi.TTS.Utilities.TTSSpeakerClipDataEvent OnClipDataLoadFailed
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::TTS::Utilities::TTSSpeakerClipDataEvent*& dyn_OnClipDataLoadFailed();
    // Get instance field reference: public Meta.WitAi.TTS.Utilities.TTSSpeakerEvent OnClipLoadSuccess
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::TTS::Utilities::TTSSpeakerEvent*& dyn_OnClipLoadSuccess();
    // Get instance field reference: public Meta.WitAi.TTS.Utilities.TTSSpeakerClipDataEvent OnClipDataLoadSuccess
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::TTS::Utilities::TTSSpeakerClipDataEvent*& dyn_OnClipDataLoadSuccess();
    // Get instance field reference: public Meta.WitAi.TTS.Utilities.TTSSpeakerClipDataEvent OnClipDataPlaybackReady
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::TTS::Utilities::TTSSpeakerClipDataEvent*& dyn_OnClipDataPlaybackReady();
    // Get instance field reference: public Meta.WitAi.TTS.Utilities.TTSSpeakerEvent OnStartSpeaking
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::TTS::Utilities::TTSSpeakerEvent*& dyn_OnStartSpeaking();
    // Get instance field reference: public Meta.WitAi.TTS.Utilities.TTSSpeakerClipDataEvent OnClipDataPlaybackStart
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::TTS::Utilities::TTSSpeakerClipDataEvent*& dyn_OnClipDataPlaybackStart();
    // Get instance field reference: public Meta.WitAi.TTS.Utilities.TTSSpeakerEvent OnCancelledSpeaking
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::TTS::Utilities::TTSSpeakerEvent*& dyn_OnCancelledSpeaking();
    // Get instance field reference: public Meta.WitAi.TTS.Utilities.TTSSpeakerClipDataEvent OnClipDataPlaybackCancelled
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::TTS::Utilities::TTSSpeakerClipDataEvent*& dyn_OnClipDataPlaybackCancelled();
    // Get instance field reference: public Meta.WitAi.TTS.Utilities.TTSSpeakerEvent OnFinishedSpeaking
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::TTS::Utilities::TTSSpeakerEvent*& dyn_OnFinishedSpeaking();
    // Get instance field reference: public Meta.WitAi.TTS.Utilities.TTSSpeakerClipDataEvent OnClipDataPlaybackFinished
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::TTS::Utilities::TTSSpeakerClipDataEvent*& dyn_OnClipDataPlaybackFinished();
    // public UnityEngine.Events.UnityEvent get_OnPlaybackQueueBegin()
    // Offset: 0x445BD7C
    ::UnityEngine::Events::UnityEvent* get_OnPlaybackQueueBegin();
    // public UnityEngine.Events.UnityEvent get_OnPlaybackQueueComplete()
    // Offset: 0x445BD84
    ::UnityEngine::Events::UnityEvent* get_OnPlaybackQueueComplete();
    // public System.Void .ctor()
    // Offset: 0x445BD8C
    // Implemented from: Meta.WitAi.TTS.Utilities.TTSSpeakerClipEvents
    // Base method: System.Void TTSSpeakerClipEvents::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TTSSpeakerEvents* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::TTS::Utilities::TTSSpeakerEvents::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TTSSpeakerEvents*, creationType>()));
    }
  }; // Meta.WitAi.TTS.Utilities.TTSSpeakerEvents
  #pragma pack(pop)
  static check_size<sizeof(TTSSpeakerEvents), 296 + sizeof(::Meta::WitAi::TTS::Utilities::TTSSpeakerClipDataEvent*)> __Meta_WitAi_TTS_Utilities_TTSSpeakerEventsSizeCheck;
  static_assert(sizeof(TTSSpeakerEvents) == 0x130);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeakerEvents::get_OnPlaybackQueueBegin
// Il2CppName: get_OnPlaybackQueueBegin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Events::UnityEvent* (Meta::WitAi::TTS::Utilities::TTSSpeakerEvents::*)()>(&Meta::WitAi::TTS::Utilities::TTSSpeakerEvents::get_OnPlaybackQueueBegin)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeakerEvents*), "get_OnPlaybackQueueBegin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeakerEvents::get_OnPlaybackQueueComplete
// Il2CppName: get_OnPlaybackQueueComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Events::UnityEvent* (Meta::WitAi::TTS::Utilities::TTSSpeakerEvents::*)()>(&Meta::WitAi::TTS::Utilities::TTSSpeakerEvents::get_OnPlaybackQueueComplete)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Utilities::TTSSpeakerEvents*), "get_OnPlaybackQueueComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Utilities::TTSSpeakerEvents::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
