// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Meta.WitAi.TTS.TTSService
#include "Meta/WitAi/TTS/TTSService.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Predicate`1<T>
  template<typename T>
  class Predicate_1;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::WitAi::TTS::TTSService::$$c);
DEFINE_IL2CPP_ARG_TYPE(::Meta::WitAi::TTS::TTSService::$$c*, "Meta.WitAi.TTS", "TTSService/<>c");
// Type namespace: Meta.WitAi.TTS
namespace Meta::WitAi::TTS {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Meta.WitAi.TTS.TTSService/<>c
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  class TTSService::$$c : public ::Il2CppObject {
    public:
    // Get static field: static public readonly Meta.WitAi.TTS.TTSService/<>c <>9
    static ::Meta::WitAi::TTS::TTSService::$$c* _get_$$9();
    // Set static field: static public readonly Meta.WitAi.TTS.TTSService/<>c <>9
    static void _set_$$9(::Meta::WitAi::TTS::TTSService::$$c* value);
    // Get static field: static public System.Predicate`1<Meta.WitAi.TTS.TTSService> <>9__1_0
    static ::System::Predicate_1<::Meta::WitAi::TTS::TTSService*>* _get_$$9__1_0();
    // Set static field: static public System.Predicate`1<Meta.WitAi.TTS.TTSService> <>9__1_0
    static void _set_$$9__1_0(::System::Predicate_1<::Meta::WitAi::TTS::TTSService*>* value);
    // static private System.Void .cctor()
    // Offset: 0x44574D8
    static void _cctor();
    // public System.Void .ctor()
    // Offset: 0x4457540
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TTSService::$$c* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::TTS::TTSService::$$c::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TTSService::$$c*, creationType>()));
    }
    // System.Boolean <get_Instance>b__1_0(Meta.WitAi.TTS.TTSService o)
    // Offset: 0x4457548
    bool $get_Instance$b__1_0(::Meta::WitAi::TTS::TTSService* o);
  }; // Meta.WitAi.TTS.TTSService/<>c
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::WitAi::TTS::TTSService::$$c::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Meta::WitAi::TTS::TTSService::$$c::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::TTSService::$$c*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::TTSService::$$c::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Meta::WitAi::TTS::TTSService::$$c::$get_Instance$b__1_0
// Il2CppName: <get_Instance>b__1_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::TTS::TTSService::$$c::*)(::Meta::WitAi::TTS::TTSService*)>(&Meta::WitAi::TTS::TTSService::$$c::$get_Instance$b__1_0)> {
  static const MethodInfo* get() {
    static auto* o = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS", "TTSService")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::TTSService::$$c*), "<get_Instance>b__1_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{o});
  }
};
