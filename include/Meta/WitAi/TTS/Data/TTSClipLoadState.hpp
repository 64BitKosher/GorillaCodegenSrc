// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: Meta.WitAi.TTS.Data
namespace Meta::WitAi::TTS::Data {
  // Forward declaring type: TTSClipLoadState
  struct TTSClipLoadState;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Meta::WitAi::TTS::Data::TTSClipLoadState, "Meta.WitAi.TTS.Data", "TTSClipLoadState");
// Type namespace: Meta.WitAi.TTS.Data
namespace Meta::WitAi::TTS::Data {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: Meta.WitAi.TTS.Data.TTSClipLoadState
  // [TokenAttribute] Offset: FFFFFFFF
  struct TTSClipLoadState/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: TTSClipLoadState
    constexpr TTSClipLoadState(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public Meta.WitAi.TTS.Data.TTSClipLoadState Unloaded
    static constexpr const int Unloaded = 0;
    // Get static field: static public Meta.WitAi.TTS.Data.TTSClipLoadState Unloaded
    static ::Meta::WitAi::TTS::Data::TTSClipLoadState _get_Unloaded();
    // Set static field: static public Meta.WitAi.TTS.Data.TTSClipLoadState Unloaded
    static void _set_Unloaded(::Meta::WitAi::TTS::Data::TTSClipLoadState value);
    // static field const value: static public Meta.WitAi.TTS.Data.TTSClipLoadState Preparing
    static constexpr const int Preparing = 1;
    // Get static field: static public Meta.WitAi.TTS.Data.TTSClipLoadState Preparing
    static ::Meta::WitAi::TTS::Data::TTSClipLoadState _get_Preparing();
    // Set static field: static public Meta.WitAi.TTS.Data.TTSClipLoadState Preparing
    static void _set_Preparing(::Meta::WitAi::TTS::Data::TTSClipLoadState value);
    // static field const value: static public Meta.WitAi.TTS.Data.TTSClipLoadState Loaded
    static constexpr const int Loaded = 2;
    // Get static field: static public Meta.WitAi.TTS.Data.TTSClipLoadState Loaded
    static ::Meta::WitAi::TTS::Data::TTSClipLoadState _get_Loaded();
    // Set static field: static public Meta.WitAi.TTS.Data.TTSClipLoadState Loaded
    static void _set_Loaded(::Meta::WitAi::TTS::Data::TTSClipLoadState value);
    // static field const value: static public Meta.WitAi.TTS.Data.TTSClipLoadState Error
    static constexpr const int Error = 3;
    // Get static field: static public Meta.WitAi.TTS.Data.TTSClipLoadState Error
    static ::Meta::WitAi::TTS::Data::TTSClipLoadState _get_Error();
    // Set static field: static public Meta.WitAi.TTS.Data.TTSClipLoadState Error
    static void _set_Error(::Meta::WitAi::TTS::Data::TTSClipLoadState value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // Meta.WitAi.TTS.Data.TTSClipLoadState
  #pragma pack(pop)
  static check_size<sizeof(TTSClipLoadState), 0 + sizeof(int)> __Meta_WitAi_TTS_Data_TTSClipLoadStateSizeCheck;
  static_assert(sizeof(TTSClipLoadState) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
