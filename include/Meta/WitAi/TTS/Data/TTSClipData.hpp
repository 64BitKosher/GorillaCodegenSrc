// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.AudioType
#include "UnityEngine/AudioType.hpp"
// Including type: Meta.WitAi.TTS.Data.TTSClipLoadState
#include "Meta/WitAi/TTS/Data/TTSClipLoadState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Meta::WitAi::TTS::Data
namespace Meta::WitAi::TTS::Data {
  // Forward declaring type: TTSVoiceSettings
  class TTSVoiceSettings;
  // Forward declaring type: TTSDiskCacheSettings
  class TTSDiskCacheSettings;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: Meta::Voice::Audio
namespace Meta::Voice::Audio {
  // Forward declaring type: IAudioClipStream
  class IAudioClipStream;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioClip
  class AudioClip;
}
// Completed forward declares
// Type namespace: Meta.WitAi.TTS.Data
namespace Meta::WitAi::TTS::Data {
  // Forward declaring type: TTSClipData
  class TTSClipData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::WitAi::TTS::Data::TTSClipData);
DEFINE_IL2CPP_ARG_TYPE(::Meta::WitAi::TTS::Data::TTSClipData*, "Meta.WitAi.TTS.Data", "TTSClipData");
// Type namespace: Meta.WitAi.TTS.Data
namespace Meta::WitAi::TTS::Data {
  // Size: 0x78
  #pragma pack(push, 1)
  // Autogenerated type: Meta.WitAi.TTS.Data.TTSClipData
  // [TokenAttribute] Offset: FFFFFFFF
  class TTSClipData : public ::Il2CppObject {
    public:
    public:
    // public System.String textToSpeak
    // Size: 0x8
    // Offset: 0x10
    ::StringW textToSpeak;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String clipID
    // Size: 0x8
    // Offset: 0x18
    ::StringW clipID;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public UnityEngine.AudioType audioType
    // Size: 0x4
    // Offset: 0x20
    ::UnityEngine::AudioType audioType;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioType) == 0x4);
    // Padding between fields: audioType and: voiceSettings
    char __padding2[0x4] = {};
    // public Meta.WitAi.TTS.Data.TTSVoiceSettings voiceSettings
    // Size: 0x8
    // Offset: 0x28
    ::Meta::WitAi::TTS::Data::TTSVoiceSettings* voiceSettings;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::TTS::Data::TTSVoiceSettings*) == 0x8);
    // public Meta.WitAi.TTS.Data.TTSDiskCacheSettings diskCacheSettings
    // Size: 0x8
    // Offset: 0x30
    ::Meta::WitAi::TTS::Data::TTSDiskCacheSettings* diskCacheSettings;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::TTS::Data::TTSDiskCacheSettings*) == 0x8);
    // private System.String _queryRequestId
    // Size: 0x8
    // Offset: 0x38
    ::StringW queryRequestId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Boolean queryStream
    // Size: 0x1
    // Offset: 0x40
    bool queryStream;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: queryStream and: queryParameters
    char __padding6[0x7] = {};
    // public System.Collections.Generic.Dictionary`2<System.String,System.String> queryParameters
    // Size: 0x8
    // Offset: 0x48
    ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* queryParameters;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*) == 0x8);
    // private Meta.Voice.Audio.IAudioClipStream _clipStream
    // Size: 0x8
    // Offset: 0x50
    ::Meta::Voice::Audio::IAudioClipStream* clipStream;
    // Field size check
    static_assert(sizeof(::Meta::Voice::Audio::IAudioClipStream*) == 0x8);
    // public Meta.WitAi.TTS.Data.TTSClipLoadState loadState
    // Size: 0x4
    // Offset: 0x58
    ::Meta::WitAi::TTS::Data::TTSClipLoadState loadState;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::TTS::Data::TTSClipLoadState) == 0x4);
    // public System.Single loadProgress
    // Size: 0x4
    // Offset: 0x5C
    float loadProgress;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Action`2<Meta.WitAi.TTS.Data.TTSClipData,Meta.WitAi.TTS.Data.TTSClipLoadState> onStateChange
    // Size: 0x8
    // Offset: 0x60
    ::System::Action_2<::Meta::WitAi::TTS::Data::TTSClipData*, ::Meta::WitAi::TTS::Data::TTSClipLoadState>* onStateChange;
    // Field size check
    static_assert(sizeof(::System::Action_2<::Meta::WitAi::TTS::Data::TTSClipData*, ::Meta::WitAi::TTS::Data::TTSClipLoadState>*) == 0x8);
    // public System.Action`1<System.String> onPlaybackReady
    // Size: 0x8
    // Offset: 0x68
    ::System::Action_1<::StringW>* onPlaybackReady;
    // Field size check
    static_assert(sizeof(::System::Action_1<::StringW>*) == 0x8);
    // public System.Action`1<System.String> onDownloadComplete
    // Size: 0x8
    // Offset: 0x70
    ::System::Action_1<::StringW>* onDownloadComplete;
    // Field size check
    static_assert(sizeof(::System::Action_1<::StringW>*) == 0x8);
    public:
    // Get instance field reference: public System.String textToSpeak
    [[deprecated("Use field access instead!")]] ::StringW& dyn_textToSpeak();
    // Get instance field reference: public System.String clipID
    [[deprecated("Use field access instead!")]] ::StringW& dyn_clipID();
    // Get instance field reference: public UnityEngine.AudioType audioType
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioType& dyn_audioType();
    // Get instance field reference: public Meta.WitAi.TTS.Data.TTSVoiceSettings voiceSettings
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::TTS::Data::TTSVoiceSettings*& dyn_voiceSettings();
    // Get instance field reference: public Meta.WitAi.TTS.Data.TTSDiskCacheSettings diskCacheSettings
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::TTS::Data::TTSDiskCacheSettings*& dyn_diskCacheSettings();
    // Get instance field reference: private System.String _queryRequestId
    [[deprecated("Use field access instead!")]] ::StringW& dyn__queryRequestId();
    // Get instance field reference: public System.Boolean queryStream
    [[deprecated("Use field access instead!")]] bool& dyn_queryStream();
    // Get instance field reference: public System.Collections.Generic.Dictionary`2<System.String,System.String> queryParameters
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*& dyn_queryParameters();
    // Get instance field reference: private Meta.Voice.Audio.IAudioClipStream _clipStream
    [[deprecated("Use field access instead!")]] ::Meta::Voice::Audio::IAudioClipStream*& dyn__clipStream();
    // Get instance field reference: public Meta.WitAi.TTS.Data.TTSClipLoadState loadState
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::TTS::Data::TTSClipLoadState& dyn_loadState();
    // Get instance field reference: public System.Single loadProgress
    [[deprecated("Use field access instead!")]] float& dyn_loadProgress();
    // Get instance field reference: public System.Action`2<Meta.WitAi.TTS.Data.TTSClipData,Meta.WitAi.TTS.Data.TTSClipLoadState> onStateChange
    [[deprecated("Use field access instead!")]] ::System::Action_2<::Meta::WitAi::TTS::Data::TTSClipData*, ::Meta::WitAi::TTS::Data::TTSClipLoadState>*& dyn_onStateChange();
    // Get instance field reference: public System.Action`1<System.String> onPlaybackReady
    [[deprecated("Use field access instead!")]] ::System::Action_1<::StringW>*& dyn_onPlaybackReady();
    // Get instance field reference: public System.Action`1<System.String> onDownloadComplete
    [[deprecated("Use field access instead!")]] ::System::Action_1<::StringW>*& dyn_onDownloadComplete();
    // public System.String get_queryRequestId()
    // Offset: 0x44640EC
    ::StringW get_queryRequestId();
    // public Meta.Voice.Audio.IAudioClipStream get_clipStream()
    // Offset: 0x44640F4
    ::Meta::Voice::Audio::IAudioClipStream* get_clipStream();
    // public System.Void set_clipStream(Meta.Voice.Audio.IAudioClipStream value)
    // Offset: 0x4454890
    void set_clipStream(::Meta::Voice::Audio::IAudioClipStream* value);
    // public UnityEngine.AudioClip get_clip()
    // Offset: 0x4460FFC
    ::UnityEngine::AudioClip* get_clip();
    // public System.Boolean Equals(Meta.WitAi.TTS.Data.TTSClipData other)
    // Offset: 0x445CD8C
    bool Equals(::Meta::WitAi::TTS::Data::TTSClipData* other);
    // public System.Boolean HasClipId(System.String clipId)
    // Offset: 0x4464188
    bool HasClipId(::StringW clipId);
    // public System.Void .ctor()
    // Offset: 0x4454844
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TTSClipData* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::TTS::Data::TTSClipData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TTSClipData*, creationType>()));
    }
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x44640FC
    // Implemented from: System.Object
    // Base method: System.Boolean Object::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0x4464198
    // Implemented from: System.Object
    // Base method: System.Int32 Object::GetHashCode()
    int GetHashCode();
  }; // Meta.WitAi.TTS.Data.TTSClipData
  #pragma pack(pop)
  static check_size<sizeof(TTSClipData), 112 + sizeof(::System::Action_1<::StringW>*)> __Meta_WitAi_TTS_Data_TTSClipDataSizeCheck;
  static_assert(sizeof(TTSClipData) == 0x78);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::WitAi::TTS::Data::TTSClipData::get_queryRequestId
// Il2CppName: get_queryRequestId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Meta::WitAi::TTS::Data::TTSClipData::*)()>(&Meta::WitAi::TTS::Data::TTSClipData::get_queryRequestId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Data::TTSClipData*), "get_queryRequestId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Data::TTSClipData::get_clipStream
// Il2CppName: get_clipStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::Voice::Audio::IAudioClipStream* (Meta::WitAi::TTS::Data::TTSClipData::*)()>(&Meta::WitAi::TTS::Data::TTSClipData::get_clipStream)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Data::TTSClipData*), "get_clipStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Data::TTSClipData::set_clipStream
// Il2CppName: set_clipStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::TTS::Data::TTSClipData::*)(::Meta::Voice::Audio::IAudioClipStream*)>(&Meta::WitAi::TTS::Data::TTSClipData::set_clipStream)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Meta.Voice.Audio", "IAudioClipStream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Data::TTSClipData*), "set_clipStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Data::TTSClipData::get_clip
// Il2CppName: get_clip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AudioClip* (Meta::WitAi::TTS::Data::TTSClipData::*)()>(&Meta::WitAi::TTS::Data::TTSClipData::get_clip)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Data::TTSClipData*), "get_clip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Data::TTSClipData::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::TTS::Data::TTSClipData::*)(::Meta::WitAi::TTS::Data::TTSClipData*)>(&Meta::WitAi::TTS::Data::TTSClipData::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Data", "TTSClipData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Data::TTSClipData*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Data::TTSClipData::HasClipId
// Il2CppName: HasClipId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::TTS::Data::TTSClipData::*)(::StringW)>(&Meta::WitAi::TTS::Data::TTSClipData::HasClipId)> {
  static const MethodInfo* get() {
    static auto* clipId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Data::TTSClipData*), "HasClipId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clipId});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Data::TTSClipData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Meta::WitAi::TTS::Data::TTSClipData::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::TTS::Data::TTSClipData::*)(::Il2CppObject*)>(&Meta::WitAi::TTS::Data::TTSClipData::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Data::TTSClipData*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Data::TTSClipData::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Meta::WitAi::TTS::Data::TTSClipData::*)()>(&Meta::WitAi::TTS::Data::TTSClipData::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Data::TTSClipData*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
