// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Meta::WitAi::TTS::Events
namespace Meta::WitAi::TTS::Events {
  // Forward declaring type: TTSClipEvent
  class TTSClipEvent;
  // Forward declaring type: TTSWebRequestEvents
  class TTSWebRequestEvents;
  // Forward declaring type: TTSStreamEvents
  class TTSStreamEvents;
  // Forward declaring type: TTSDownloadEvents
  class TTSDownloadEvents;
}
// Completed forward declares
// Type namespace: Meta.WitAi.TTS.Events
namespace Meta::WitAi::TTS::Events {
  // Forward declaring type: TTSServiceEvents
  class TTSServiceEvents;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::WitAi::TTS::Events::TTSServiceEvents);
DEFINE_IL2CPP_ARG_TYPE(::Meta::WitAi::TTS::Events::TTSServiceEvents*, "Meta.WitAi.TTS.Events", "TTSServiceEvents");
// Type namespace: Meta.WitAi.TTS.Events
namespace Meta::WitAi::TTS::Events {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: Meta.WitAi.TTS.Events.TTSServiceEvents
  // [TokenAttribute] Offset: FFFFFFFF
  class TTSServiceEvents : public ::Il2CppObject {
    public:
    public:
    // public Meta.WitAi.TTS.Events.TTSClipEvent OnClipCreated
    // Size: 0x8
    // Offset: 0x10
    ::Meta::WitAi::TTS::Events::TTSClipEvent* OnClipCreated;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::TTS::Events::TTSClipEvent*) == 0x8);
    // public Meta.WitAi.TTS.Events.TTSClipEvent OnClipUnloaded
    // Size: 0x8
    // Offset: 0x18
    ::Meta::WitAi::TTS::Events::TTSClipEvent* OnClipUnloaded;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::TTS::Events::TTSClipEvent*) == 0x8);
    // public Meta.WitAi.TTS.Events.TTSWebRequestEvents WebRequest
    // Size: 0x8
    // Offset: 0x20
    ::Meta::WitAi::TTS::Events::TTSWebRequestEvents* WebRequest;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::TTS::Events::TTSWebRequestEvents*) == 0x8);
    // public Meta.WitAi.TTS.Events.TTSStreamEvents Stream
    // Size: 0x8
    // Offset: 0x28
    ::Meta::WitAi::TTS::Events::TTSStreamEvents* Stream;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::TTS::Events::TTSStreamEvents*) == 0x8);
    // public Meta.WitAi.TTS.Events.TTSDownloadEvents Download
    // Size: 0x8
    // Offset: 0x30
    ::Meta::WitAi::TTS::Events::TTSDownloadEvents* Download;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::TTS::Events::TTSDownloadEvents*) == 0x8);
    public:
    // Get instance field reference: public Meta.WitAi.TTS.Events.TTSClipEvent OnClipCreated
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::TTS::Events::TTSClipEvent*& dyn_OnClipCreated();
    // Get instance field reference: public Meta.WitAi.TTS.Events.TTSClipEvent OnClipUnloaded
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::TTS::Events::TTSClipEvent*& dyn_OnClipUnloaded();
    // Get instance field reference: public Meta.WitAi.TTS.Events.TTSWebRequestEvents WebRequest
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::TTS::Events::TTSWebRequestEvents*& dyn_WebRequest();
    // Get instance field reference: public Meta.WitAi.TTS.Events.TTSStreamEvents Stream
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::TTS::Events::TTSStreamEvents*& dyn_Stream();
    // Get instance field reference: public Meta.WitAi.TTS.Events.TTSDownloadEvents Download
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::TTS::Events::TTSDownloadEvents*& dyn_Download();
    // public System.Void .ctor()
    // Offset: 0x44573A4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TTSServiceEvents* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::TTS::Events::TTSServiceEvents::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TTSServiceEvents*, creationType>()));
    }
  }; // Meta.WitAi.TTS.Events.TTSServiceEvents
  #pragma pack(pop)
  static check_size<sizeof(TTSServiceEvents), 48 + sizeof(::Meta::WitAi::TTS::Events::TTSDownloadEvents*)> __Meta_WitAi_TTS_Events_TTSServiceEventsSizeCheck;
  static_assert(sizeof(TTSServiceEvents) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::WitAi::TTS::Events::TTSServiceEvents::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
