// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Meta::WitAi::TTS::Events
namespace Meta::WitAi::TTS::Events {
  // Forward declaring type: TTSClipEvent
  class TTSClipEvent;
  // Forward declaring type: TTSClipErrorEvent
  class TTSClipErrorEvent;
}
// Completed forward declares
// Type namespace: Meta.WitAi.TTS.Events
namespace Meta::WitAi::TTS::Events {
  // Forward declaring type: TTSStreamEvents
  class TTSStreamEvents;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::WitAi::TTS::Events::TTSStreamEvents);
DEFINE_IL2CPP_ARG_TYPE(::Meta::WitAi::TTS::Events::TTSStreamEvents*, "Meta.WitAi.TTS.Events", "TTSStreamEvents");
// Type namespace: Meta.WitAi.TTS.Events
namespace Meta::WitAi::TTS::Events {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: Meta.WitAi.TTS.Events.TTSStreamEvents
  // [TokenAttribute] Offset: FFFFFFFF
  class TTSStreamEvents : public ::Il2CppObject {
    public:
    public:
    // public Meta.WitAi.TTS.Events.TTSClipEvent OnStreamBegin
    // Size: 0x8
    // Offset: 0x10
    ::Meta::WitAi::TTS::Events::TTSClipEvent* OnStreamBegin;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::TTS::Events::TTSClipEvent*) == 0x8);
    // public Meta.WitAi.TTS.Events.TTSClipEvent OnStreamReady
    // Size: 0x8
    // Offset: 0x18
    ::Meta::WitAi::TTS::Events::TTSClipEvent* OnStreamReady;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::TTS::Events::TTSClipEvent*) == 0x8);
    // public Meta.WitAi.TTS.Events.TTSClipEvent OnStreamClipUpdate
    // Size: 0x8
    // Offset: 0x20
    ::Meta::WitAi::TTS::Events::TTSClipEvent* OnStreamClipUpdate;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::TTS::Events::TTSClipEvent*) == 0x8);
    // public Meta.WitAi.TTS.Events.TTSClipEvent OnStreamComplete
    // Size: 0x8
    // Offset: 0x28
    ::Meta::WitAi::TTS::Events::TTSClipEvent* OnStreamComplete;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::TTS::Events::TTSClipEvent*) == 0x8);
    // public Meta.WitAi.TTS.Events.TTSClipEvent OnStreamCancel
    // Size: 0x8
    // Offset: 0x30
    ::Meta::WitAi::TTS::Events::TTSClipEvent* OnStreamCancel;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::TTS::Events::TTSClipEvent*) == 0x8);
    // public Meta.WitAi.TTS.Events.TTSClipErrorEvent OnStreamError
    // Size: 0x8
    // Offset: 0x38
    ::Meta::WitAi::TTS::Events::TTSClipErrorEvent* OnStreamError;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::TTS::Events::TTSClipErrorEvent*) == 0x8);
    public:
    // Get instance field reference: public Meta.WitAi.TTS.Events.TTSClipEvent OnStreamBegin
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::TTS::Events::TTSClipEvent*& dyn_OnStreamBegin();
    // Get instance field reference: public Meta.WitAi.TTS.Events.TTSClipEvent OnStreamReady
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::TTS::Events::TTSClipEvent*& dyn_OnStreamReady();
    // Get instance field reference: public Meta.WitAi.TTS.Events.TTSClipEvent OnStreamClipUpdate
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::TTS::Events::TTSClipEvent*& dyn_OnStreamClipUpdate();
    // Get instance field reference: public Meta.WitAi.TTS.Events.TTSClipEvent OnStreamComplete
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::TTS::Events::TTSClipEvent*& dyn_OnStreamComplete();
    // Get instance field reference: public Meta.WitAi.TTS.Events.TTSClipEvent OnStreamCancel
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::TTS::Events::TTSClipEvent*& dyn_OnStreamCancel();
    // Get instance field reference: public Meta.WitAi.TTS.Events.TTSClipErrorEvent OnStreamError
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::TTS::Events::TTSClipErrorEvent*& dyn_OnStreamError();
    // public System.Void .ctor()
    // Offset: 0x4458E18
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TTSStreamEvents* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::TTS::Events::TTSStreamEvents::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TTSStreamEvents*, creationType>()));
    }
  }; // Meta.WitAi.TTS.Events.TTSStreamEvents
  #pragma pack(pop)
  static check_size<sizeof(TTSStreamEvents), 56 + sizeof(::Meta::WitAi::TTS::Events::TTSClipErrorEvent*)> __Meta_WitAi_TTS_Events_TTSStreamEventsSizeCheck;
  static_assert(sizeof(TTSStreamEvents) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::WitAi::TTS::Events::TTSStreamEvents::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
