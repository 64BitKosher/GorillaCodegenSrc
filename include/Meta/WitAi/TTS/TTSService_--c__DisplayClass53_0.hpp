// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Meta.WitAi.TTS.TTSService
#include "Meta/WitAi/TTS/TTSService.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Meta::WitAi::TTS::Data
namespace Meta::WitAi::TTS::Data {
  // Forward declaring type: TTSClipData
  class TTSClipData;
}
// Forward declaring namespace: Meta::Voice::Audio
namespace Meta::Voice::Audio {
  // Forward declaring type: IAudioClipStream
  class IAudioClipStream;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::WitAi::TTS::TTSService::$$c__DisplayClass53_0);
DEFINE_IL2CPP_ARG_TYPE(::Meta::WitAi::TTS::TTSService::$$c__DisplayClass53_0*, "Meta.WitAi.TTS", "TTSService/<>c__DisplayClass53_0");
// Type namespace: Meta.WitAi.TTS
namespace Meta::WitAi::TTS {
  // Size: 0x21
  #pragma pack(push, 1)
  // Autogenerated type: Meta.WitAi.TTS.TTSService/<>c__DisplayClass53_0
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  class TTSService::$$c__DisplayClass53_0 : public ::Il2CppObject {
    public:
    public:
    // public Meta.WitAi.TTS.TTSService <>4__this
    // Size: 0x8
    // Offset: 0x10
    ::Meta::WitAi::TTS::TTSService* $$4__this;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::TTS::TTSService*) == 0x8);
    // public Meta.WitAi.TTS.Data.TTSClipData clipData
    // Size: 0x8
    // Offset: 0x18
    ::Meta::WitAi::TTS::Data::TTSClipData* clipData;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::TTS::Data::TTSClipData*) == 0x8);
    // public System.Boolean fromDisk
    // Size: 0x1
    // Offset: 0x20
    bool fromDisk;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: public Meta.WitAi.TTS.TTSService <>4__this
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::TTS::TTSService*& dyn_$$4__this();
    // Get instance field reference: public Meta.WitAi.TTS.Data.TTSClipData clipData
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::TTS::Data::TTSClipData*& dyn_clipData();
    // Get instance field reference: public System.Boolean fromDisk
    [[deprecated("Use field access instead!")]] bool& dyn_fromDisk();
    // public System.Void .ctor()
    // Offset: 0x4455820
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TTSService::$$c__DisplayClass53_0* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::TTS::TTSService::$$c__DisplayClass53_0::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TTSService::$$c__DisplayClass53_0*, creationType>()));
    }
    // System.Void <OnStreamBegin>b__0(Meta.Voice.Audio.IAudioClipStream cs)
    // Offset: 0x4457CA0
    void $OnStreamBegin$b__0(::Meta::Voice::Audio::IAudioClipStream* cs);
    // System.Void <OnStreamBegin>b__1(Meta.Voice.Audio.IAudioClipStream cs)
    // Offset: 0x4457CC8
    void $OnStreamBegin$b__1(::Meta::Voice::Audio::IAudioClipStream* cs);
  }; // Meta.WitAi.TTS.TTSService/<>c__DisplayClass53_0
  #pragma pack(pop)
  static check_size<sizeof(TTSService::$$c__DisplayClass53_0), 32 + sizeof(bool)> __Meta_WitAi_TTS_TTSService_$$c__DisplayClass53_0SizeCheck;
  static_assert(sizeof(TTSService::$$c__DisplayClass53_0) == 0x21);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::WitAi::TTS::TTSService::$$c__DisplayClass53_0::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Meta::WitAi::TTS::TTSService::$$c__DisplayClass53_0::$OnStreamBegin$b__0
// Il2CppName: <OnStreamBegin>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::TTS::TTSService::$$c__DisplayClass53_0::*)(::Meta::Voice::Audio::IAudioClipStream*)>(&Meta::WitAi::TTS::TTSService::$$c__DisplayClass53_0::$OnStreamBegin$b__0)> {
  static const MethodInfo* get() {
    static auto* cs = &::il2cpp_utils::GetClassFromName("Meta.Voice.Audio", "IAudioClipStream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::TTSService::$$c__DisplayClass53_0*), "<OnStreamBegin>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cs});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::TTSService::$$c__DisplayClass53_0::$OnStreamBegin$b__1
// Il2CppName: <OnStreamBegin>b__1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::TTS::TTSService::$$c__DisplayClass53_0::*)(::Meta::Voice::Audio::IAudioClipStream*)>(&Meta::WitAi::TTS::TTSService::$$c__DisplayClass53_0::$OnStreamBegin$b__1)> {
  static const MethodInfo* get() {
    static auto* cs = &::il2cpp_utils::GetClassFromName("Meta.Voice.Audio", "IAudioClipStream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::TTSService::$$c__DisplayClass53_0*), "<OnStreamBegin>b__1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cs});
  }
};
