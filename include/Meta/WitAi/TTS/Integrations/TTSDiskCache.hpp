// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Meta.WitAi.TTS.Interfaces.ITTSDiskCacheHandler
#include "Meta/WitAi/TTS/Interfaces/ITTSDiskCacheHandler.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Meta::WitAi::TTS::Integrations
namespace Meta::WitAi::TTS::Integrations {
}
// Forward declaring namespace: Meta::WitAi::TTS::Data
namespace Meta::WitAi::TTS::Data {
  // Forward declaring type: TTSDiskCacheSettings
  class TTSDiskCacheSettings;
  // Forward declaring type: TTSClipData
  class TTSClipData;
}
// Forward declaring namespace: Meta::WitAi::TTS::Events
namespace Meta::WitAi::TTS::Events {
  // Forward declaring type: TTSStreamEvents
  class TTSStreamEvents;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: Meta::WitAi::Requests
namespace Meta::WitAi::Requests {
  // Forward declaring type: VRequest
  class VRequest;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
}
// Completed forward declares
// Type namespace: Meta.WitAi.TTS.Integrations
namespace Meta::WitAi::TTS::Integrations {
  // Forward declaring type: TTSDiskCache
  class TTSDiskCache;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::WitAi::TTS::Integrations::TTSDiskCache);
DEFINE_IL2CPP_ARG_TYPE(::Meta::WitAi::TTS::Integrations::TTSDiskCache*, "Meta.WitAi.TTS.Integrations", "TTSDiskCache");
// Type namespace: Meta.WitAi.TTS.Integrations
namespace Meta::WitAi::TTS::Integrations {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: Meta.WitAi.TTS.Integrations.TTSDiskCache
  // [TokenAttribute] Offset: FFFFFFFF
  class TTSDiskCache : public ::UnityEngine::MonoBehaviour/*, public ::Meta::WitAi::TTS::Interfaces::ITTSDiskCacheHandler*/ {
    public:
    // Nested type: ::Meta::WitAi::TTS::Integrations::TTSDiskCache::$$c__DisplayClass14_0
    class $$c__DisplayClass14_0;
    // Nested type: ::Meta::WitAi::TTS::Integrations::TTSDiskCache::$$c__DisplayClass15_0
    class $$c__DisplayClass15_0;
    public:
    // private System.String _diskPath
    // Size: 0x8
    // Offset: 0x20
    ::StringW diskPath;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private Meta.WitAi.TTS.Data.TTSDiskCacheSettings _defaultSettings
    // Size: 0x8
    // Offset: 0x28
    ::Meta::WitAi::TTS::Data::TTSDiskCacheSettings* defaultSettings;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::TTS::Data::TTSDiskCacheSettings*) == 0x8);
    // private Meta.WitAi.TTS.Events.TTSStreamEvents _events
    // Size: 0x8
    // Offset: 0x30
    ::Meta::WitAi::TTS::Events::TTSStreamEvents* events;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::TTS::Events::TTSStreamEvents*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.String,Meta.WitAi.Requests.VRequest> _streamRequests
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::Dictionary_2<::StringW, ::Meta::WitAi::Requests::VRequest*>* streamRequests;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::Meta::WitAi::Requests::VRequest*>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Meta::WitAi::TTS::Interfaces::ITTSDiskCacheHandler
    operator ::Meta::WitAi::TTS::Interfaces::ITTSDiskCacheHandler() noexcept {
      return *reinterpret_cast<::Meta::WitAi::TTS::Interfaces::ITTSDiskCacheHandler*>(this);
    }
    // Get instance field reference: private System.String _diskPath
    [[deprecated("Use field access instead!")]] ::StringW& dyn__diskPath();
    // Get instance field reference: private Meta.WitAi.TTS.Data.TTSDiskCacheSettings _defaultSettings
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::TTS::Data::TTSDiskCacheSettings*& dyn__defaultSettings();
    // Get instance field reference: private Meta.WitAi.TTS.Events.TTSStreamEvents _events
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::TTS::Events::TTSStreamEvents*& dyn__events();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.String,Meta.WitAi.Requests.VRequest> _streamRequests
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::Meta::WitAi::Requests::VRequest*>*& dyn__streamRequests();
    // public System.String get_DiskPath()
    // Offset: 0x4458208
    ::StringW get_DiskPath();
    // public Meta.WitAi.TTS.Data.TTSDiskCacheSettings get_DiskCacheDefaultSettings()
    // Offset: 0x4458210
    ::Meta::WitAi::TTS::Data::TTSDiskCacheSettings* get_DiskCacheDefaultSettings();
    // public Meta.WitAi.TTS.Events.TTSStreamEvents get_DiskStreamEvents()
    // Offset: 0x4458218
    ::Meta::WitAi::TTS::Events::TTSStreamEvents* get_DiskStreamEvents();
    // public System.Void set_DiskStreamEvents(Meta.WitAi.TTS.Events.TTSStreamEvents value)
    // Offset: 0x4458220
    void set_DiskStreamEvents(::Meta::WitAi::TTS::Events::TTSStreamEvents* value);
    // protected System.Void OnDestroy()
    // Offset: 0x4458228
    void OnDestroy();
    // public System.String GetDiskCachePath(Meta.WitAi.TTS.Data.TTSClipData clipData)
    // Offset: 0x44583BC
    ::StringW GetDiskCachePath(::Meta::WitAi::TTS::Data::TTSClipData* clipData);
    // public System.Boolean ShouldCacheToDisk(Meta.WitAi.TTS.Data.TTSClipData clipData)
    // Offset: 0x4458630
    bool ShouldCacheToDisk(::Meta::WitAi::TTS::Data::TTSClipData* clipData);
    // public System.Void CheckCachedToDisk(Meta.WitAi.TTS.Data.TTSClipData clipData, System.Action`2<Meta.WitAi.TTS.Data.TTSClipData,System.Boolean> onCheckComplete)
    // Offset: 0x4458670
    void CheckCachedToDisk(::Meta::WitAi::TTS::Data::TTSClipData* clipData, ::System::Action_2<::Meta::WitAi::TTS::Data::TTSClipData*, bool>* onCheckComplete);
    // public System.Void StreamFromDiskCache(Meta.WitAi.TTS.Data.TTSClipData clipData)
    // Offset: 0x4458844
    void StreamFromDiskCache(::Meta::WitAi::TTS::Data::TTSClipData* clipData);
    // public System.Void CancelDiskCacheStream(Meta.WitAi.TTS.Data.TTSClipData clipData)
    // Offset: 0x4458AB8
    void CancelDiskCacheStream(::Meta::WitAi::TTS::Data::TTSClipData* clipData);
    // protected System.Void OnStreamComplete(Meta.WitAi.TTS.Data.TTSClipData clipData, System.String error)
    // Offset: 0x4458BC0
    void OnStreamComplete(::Meta::WitAi::TTS::Data::TTSClipData* clipData, ::StringW error);
    // public System.Void .ctor()
    // Offset: 0x4458CE0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TTSDiskCache* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::TTS::Integrations::TTSDiskCache::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TTSDiskCache*, creationType>()));
    }
  }; // Meta.WitAi.TTS.Integrations.TTSDiskCache
  #pragma pack(pop)
  static check_size<sizeof(TTSDiskCache), 56 + sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::Meta::WitAi::Requests::VRequest*>*)> __Meta_WitAi_TTS_Integrations_TTSDiskCacheSizeCheck;
  static_assert(sizeof(TTSDiskCache) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::WitAi::TTS::Integrations::TTSDiskCache::get_DiskPath
// Il2CppName: get_DiskPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Meta::WitAi::TTS::Integrations::TTSDiskCache::*)()>(&Meta::WitAi::TTS::Integrations::TTSDiskCache::get_DiskPath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Integrations::TTSDiskCache*), "get_DiskPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Integrations::TTSDiskCache::get_DiskCacheDefaultSettings
// Il2CppName: get_DiskCacheDefaultSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::TTS::Data::TTSDiskCacheSettings* (Meta::WitAi::TTS::Integrations::TTSDiskCache::*)()>(&Meta::WitAi::TTS::Integrations::TTSDiskCache::get_DiskCacheDefaultSettings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Integrations::TTSDiskCache*), "get_DiskCacheDefaultSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Integrations::TTSDiskCache::get_DiskStreamEvents
// Il2CppName: get_DiskStreamEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::TTS::Events::TTSStreamEvents* (Meta::WitAi::TTS::Integrations::TTSDiskCache::*)()>(&Meta::WitAi::TTS::Integrations::TTSDiskCache::get_DiskStreamEvents)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Integrations::TTSDiskCache*), "get_DiskStreamEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Integrations::TTSDiskCache::set_DiskStreamEvents
// Il2CppName: set_DiskStreamEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::TTS::Integrations::TTSDiskCache::*)(::Meta::WitAi::TTS::Events::TTSStreamEvents*)>(&Meta::WitAi::TTS::Integrations::TTSDiskCache::set_DiskStreamEvents)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Events", "TTSStreamEvents")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Integrations::TTSDiskCache*), "set_DiskStreamEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Integrations::TTSDiskCache::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::TTS::Integrations::TTSDiskCache::*)()>(&Meta::WitAi::TTS::Integrations::TTSDiskCache::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Integrations::TTSDiskCache*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Integrations::TTSDiskCache::GetDiskCachePath
// Il2CppName: GetDiskCachePath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Meta::WitAi::TTS::Integrations::TTSDiskCache::*)(::Meta::WitAi::TTS::Data::TTSClipData*)>(&Meta::WitAi::TTS::Integrations::TTSDiskCache::GetDiskCachePath)> {
  static const MethodInfo* get() {
    static auto* clipData = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Data", "TTSClipData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Integrations::TTSDiskCache*), "GetDiskCachePath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clipData});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Integrations::TTSDiskCache::ShouldCacheToDisk
// Il2CppName: ShouldCacheToDisk
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::TTS::Integrations::TTSDiskCache::*)(::Meta::WitAi::TTS::Data::TTSClipData*)>(&Meta::WitAi::TTS::Integrations::TTSDiskCache::ShouldCacheToDisk)> {
  static const MethodInfo* get() {
    static auto* clipData = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Data", "TTSClipData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Integrations::TTSDiskCache*), "ShouldCacheToDisk", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clipData});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Integrations::TTSDiskCache::CheckCachedToDisk
// Il2CppName: CheckCachedToDisk
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::TTS::Integrations::TTSDiskCache::*)(::Meta::WitAi::TTS::Data::TTSClipData*, ::System::Action_2<::Meta::WitAi::TTS::Data::TTSClipData*, bool>*)>(&Meta::WitAi::TTS::Integrations::TTSDiskCache::CheckCachedToDisk)> {
  static const MethodInfo* get() {
    static auto* clipData = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Data", "TTSClipData")->byval_arg;
    static auto* onCheckComplete = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Data", "TTSClipData"), ::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Integrations::TTSDiskCache*), "CheckCachedToDisk", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clipData, onCheckComplete});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Integrations::TTSDiskCache::StreamFromDiskCache
// Il2CppName: StreamFromDiskCache
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::TTS::Integrations::TTSDiskCache::*)(::Meta::WitAi::TTS::Data::TTSClipData*)>(&Meta::WitAi::TTS::Integrations::TTSDiskCache::StreamFromDiskCache)> {
  static const MethodInfo* get() {
    static auto* clipData = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Data", "TTSClipData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Integrations::TTSDiskCache*), "StreamFromDiskCache", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clipData});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Integrations::TTSDiskCache::CancelDiskCacheStream
// Il2CppName: CancelDiskCacheStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::TTS::Integrations::TTSDiskCache::*)(::Meta::WitAi::TTS::Data::TTSClipData*)>(&Meta::WitAi::TTS::Integrations::TTSDiskCache::CancelDiskCacheStream)> {
  static const MethodInfo* get() {
    static auto* clipData = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Data", "TTSClipData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Integrations::TTSDiskCache*), "CancelDiskCacheStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clipData});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Integrations::TTSDiskCache::OnStreamComplete
// Il2CppName: OnStreamComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::TTS::Integrations::TTSDiskCache::*)(::Meta::WitAi::TTS::Data::TTSClipData*, ::StringW)>(&Meta::WitAi::TTS::Integrations::TTSDiskCache::OnStreamComplete)> {
  static const MethodInfo* get() {
    static auto* clipData = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Data", "TTSClipData")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Integrations::TTSDiskCache*), "OnStreamComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clipData, error});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Integrations::TTSDiskCache::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
