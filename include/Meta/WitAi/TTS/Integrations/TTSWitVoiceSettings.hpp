// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Meta.WitAi.TTS.Data.TTSVoiceSettings
#include "Meta/WitAi/TTS/Data/TTSVoiceSettings.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Forward declaring namespace: Meta::WitAi::Json
namespace Meta::WitAi::Json {
  // Forward declaring type: WitResponseNode
  class WitResponseNode;
}
// Completed forward declares
// Type namespace: Meta.WitAi.TTS.Integrations
namespace Meta::WitAi::TTS::Integrations {
  // Forward declaring type: TTSWitVoiceSettings
  class TTSWitVoiceSettings;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::WitAi::TTS::Integrations::TTSWitVoiceSettings);
DEFINE_IL2CPP_ARG_TYPE(::Meta::WitAi::TTS::Integrations::TTSWitVoiceSettings*, "Meta.WitAi.TTS.Integrations", "TTSWitVoiceSettings");
// Type namespace: Meta.WitAi.TTS.Integrations
namespace Meta::WitAi::TTS::Integrations {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: Meta.WitAi.TTS.Integrations.TTSWitVoiceSettings
  // [TokenAttribute] Offset: FFFFFFFF
  class TTSWitVoiceSettings : public ::Meta::WitAi::TTS::Data::TTSVoiceSettings {
    public:
    public:
    // public System.String voice
    // Size: 0x8
    // Offset: 0x28
    ::StringW voice;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String style
    // Size: 0x8
    // Offset: 0x30
    ::StringW style;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Int32 speed
    // Size: 0x4
    // Offset: 0x38
    int speed;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 pitch
    // Size: 0x4
    // Offset: 0x3C
    int pitch;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // static field const value: static public System.String DEFAULT_VOICE
    static constexpr const char* DEFAULT_VOICE = "Charlie";
    // Get static field: static public System.String DEFAULT_VOICE
    static ::StringW _get_DEFAULT_VOICE();
    // Set static field: static public System.String DEFAULT_VOICE
    static void _set_DEFAULT_VOICE(::StringW value);
    // static field const value: static public System.String DEFAULT_STYLE
    static constexpr const char* DEFAULT_STYLE = "default";
    // Get static field: static public System.String DEFAULT_STYLE
    static ::StringW _get_DEFAULT_STYLE();
    // Set static field: static public System.String DEFAULT_STYLE
    static void _set_DEFAULT_STYLE(::StringW value);
    // Get instance field reference: public System.String voice
    [[deprecated("Use field access instead!")]] ::StringW& dyn_voice();
    // Get instance field reference: public System.String style
    [[deprecated("Use field access instead!")]] ::StringW& dyn_style();
    // Get instance field reference: public System.Int32 speed
    [[deprecated("Use field access instead!")]] int& dyn_speed();
    // Get instance field reference: public System.Int32 pitch
    [[deprecated("Use field access instead!")]] int& dyn_pitch();
    // static public System.Boolean CanDecode(Meta.WitAi.Json.WitResponseNode responseNode)
    // Offset: 0x4459C24
    static bool CanDecode(::Meta::WitAi::Json::WitResponseNode* responseNode);
    // public System.Void .ctor()
    // Offset: 0x4459CEC
    // Implemented from: Meta.WitAi.TTS.Data.TTSVoiceSettings
    // Base method: System.Void TTSVoiceSettings::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TTSWitVoiceSettings* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::TTS::Integrations::TTSWitVoiceSettings::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TTSWitVoiceSettings*, creationType>()));
    }
  }; // Meta.WitAi.TTS.Integrations.TTSWitVoiceSettings
  #pragma pack(pop)
  static check_size<sizeof(TTSWitVoiceSettings), 60 + sizeof(int)> __Meta_WitAi_TTS_Integrations_TTSWitVoiceSettingsSizeCheck;
  static_assert(sizeof(TTSWitVoiceSettings) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::WitAi::TTS::Integrations::TTSWitVoiceSettings::CanDecode
// Il2CppName: CanDecode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Meta::WitAi::Json::WitResponseNode*)>(&Meta::WitAi::TTS::Integrations::TTSWitVoiceSettings::CanDecode)> {
  static const MethodInfo* get() {
    static auto* responseNode = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Json", "WitResponseNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Integrations::TTSWitVoiceSettings*), "CanDecode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{responseNode});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Integrations::TTSWitVoiceSettings::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
