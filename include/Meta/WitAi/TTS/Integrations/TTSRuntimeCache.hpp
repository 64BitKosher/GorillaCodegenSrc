// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Meta.WitAi.TTS.Interfaces.ITTSRuntimeCacheHandler
#include "Meta/WitAi/TTS/Interfaces/ITTSRuntimeCacheHandler.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Meta::WitAi::TTS::Events
namespace Meta::WitAi::TTS::Events {
  // Forward declaring type: TTSClipEvent
  class TTSClipEvent;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: Meta::WitAi::TTS::Data
namespace Meta::WitAi::TTS::Data {
  // Forward declaring type: TTSClipData
  class TTSClipData;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioClip
  class AudioClip;
}
// Completed forward declares
// Type namespace: Meta.WitAi.TTS.Integrations
namespace Meta::WitAi::TTS::Integrations {
  // Forward declaring type: TTSRuntimeCache
  class TTSRuntimeCache;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::WitAi::TTS::Integrations::TTSRuntimeCache);
DEFINE_IL2CPP_ARG_TYPE(::Meta::WitAi::TTS::Integrations::TTSRuntimeCache*, "Meta.WitAi.TTS.Integrations", "TTSRuntimeCache");
// Type namespace: Meta.WitAi.TTS.Integrations
namespace Meta::WitAi::TTS::Integrations {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: Meta.WitAi.TTS.Integrations.TTSRuntimeCache
  // [TokenAttribute] Offset: FFFFFFFF
  class TTSRuntimeCache : public ::UnityEngine::MonoBehaviour/*, public ::Meta::WitAi::TTS::Interfaces::ITTSRuntimeCacheHandler*/ {
    public:
    public:
    // public System.Boolean ClipLimit
    // Size: 0x1
    // Offset: 0x20
    bool ClipLimit;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: ClipLimit and: ClipCapacity
    char __padding0[0x3] = {};
    // public System.Int32 ClipCapacity
    // Size: 0x4
    // Offset: 0x24
    int ClipCapacity;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean RamLimit
    // Size: 0x1
    // Offset: 0x28
    bool RamLimit;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: RamLimit and: RamCapacity
    char __padding2[0x3] = {};
    // public System.Int32 RamCapacity
    // Size: 0x4
    // Offset: 0x2C
    int RamCapacity;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private Meta.WitAi.TTS.Events.TTSClipEvent <OnClipAdded>k__BackingField
    // Size: 0x8
    // Offset: 0x30
    ::Meta::WitAi::TTS::Events::TTSClipEvent* OnClipAdded;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::TTS::Events::TTSClipEvent*) == 0x8);
    // private Meta.WitAi.TTS.Events.TTSClipEvent <OnClipRemoved>k__BackingField
    // Size: 0x8
    // Offset: 0x38
    ::Meta::WitAi::TTS::Events::TTSClipEvent* OnClipRemoved;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::TTS::Events::TTSClipEvent*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.String,Meta.WitAi.TTS.Data.TTSClipData> _clips
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::Generic::Dictionary_2<::StringW, ::Meta::WitAi::TTS::Data::TTSClipData*>* clips;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::Meta::WitAi::TTS::Data::TTSClipData*>*) == 0x8);
    // private System.Collections.Generic.List`1<System.String> _clipOrder
    // Size: 0x8
    // Offset: 0x48
    ::System::Collections::Generic::List_1<::StringW>* clipOrder;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::StringW>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Meta::WitAi::TTS::Interfaces::ITTSRuntimeCacheHandler
    operator ::Meta::WitAi::TTS::Interfaces::ITTSRuntimeCacheHandler() noexcept {
      return *reinterpret_cast<::Meta::WitAi::TTS::Interfaces::ITTSRuntimeCacheHandler*>(this);
    }
    // Get instance field reference: public System.Boolean ClipLimit
    [[deprecated("Use field access instead!")]] bool& dyn_ClipLimit();
    // Get instance field reference: public System.Int32 ClipCapacity
    [[deprecated("Use field access instead!")]] int& dyn_ClipCapacity();
    // Get instance field reference: public System.Boolean RamLimit
    [[deprecated("Use field access instead!")]] bool& dyn_RamLimit();
    // Get instance field reference: public System.Int32 RamCapacity
    [[deprecated("Use field access instead!")]] int& dyn_RamCapacity();
    // Get instance field reference: private Meta.WitAi.TTS.Events.TTSClipEvent <OnClipAdded>k__BackingField
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::TTS::Events::TTSClipEvent*& dyn_$OnClipAdded$k__BackingField();
    // Get instance field reference: private Meta.WitAi.TTS.Events.TTSClipEvent <OnClipRemoved>k__BackingField
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::TTS::Events::TTSClipEvent*& dyn_$OnClipRemoved$k__BackingField();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.String,Meta.WitAi.TTS.Data.TTSClipData> _clips
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::Meta::WitAi::TTS::Data::TTSClipData*>*& dyn__clips();
    // Get instance field reference: private System.Collections.Generic.List`1<System.String> _clipOrder
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& dyn__clipOrder();
    // public Meta.WitAi.TTS.Events.TTSClipEvent get_OnClipAdded()
    // Offset: 0x4459064
    ::Meta::WitAi::TTS::Events::TTSClipEvent* get_OnClipAdded();
    // public System.Void set_OnClipAdded(Meta.WitAi.TTS.Events.TTSClipEvent value)
    // Offset: 0x445906C
    void set_OnClipAdded(::Meta::WitAi::TTS::Events::TTSClipEvent* value);
    // public Meta.WitAi.TTS.Events.TTSClipEvent get_OnClipRemoved()
    // Offset: 0x4459074
    ::Meta::WitAi::TTS::Events::TTSClipEvent* get_OnClipRemoved();
    // public System.Void set_OnClipRemoved(Meta.WitAi.TTS.Events.TTSClipEvent value)
    // Offset: 0x445907C
    void set_OnClipRemoved(::Meta::WitAi::TTS::Events::TTSClipEvent* value);
    // public Meta.WitAi.TTS.Data.TTSClipData[] GetClips()
    // Offset: 0x4459084
    ::ArrayW<::Meta::WitAi::TTS::Data::TTSClipData*> GetClips();
    // protected System.Void OnDestroy()
    // Offset: 0x44590F0
    void OnDestroy();
    // public Meta.WitAi.TTS.Data.TTSClipData GetClip(System.String clipID)
    // Offset: 0x4459184
    ::Meta::WitAi::TTS::Data::TTSClipData* GetClip(::StringW clipID);
    // public System.Boolean AddClip(Meta.WitAi.TTS.Data.TTSClipData clipData)
    // Offset: 0x44592E4
    bool AddClip(::Meta::WitAi::TTS::Data::TTSClipData* clipData);
    // public System.Void RemoveClip(System.String clipID)
    // Offset: 0x4459530
    void RemoveClip(::StringW clipID);
    // protected System.Boolean IsCacheFull()
    // Offset: 0x445966C
    bool IsCacheFull();
    // public System.Int32 GetCacheDiskSize()
    // Offset: 0x44596F0
    int GetCacheDiskSize();
    // static public System.Int64 GetClipBytes(UnityEngine.AudioClip clip)
    // Offset: 0x44599F4
    static int64_t GetClipBytes(::UnityEngine::AudioClip* clip);
    // static public System.Int64 GetClipBytes(System.Int32 channels, System.Int32 samples)
    // Offset: 0x44599E4
    static int64_t GetClipBytes(int channels, int samples);
    // public System.Void .ctor()
    // Offset: 0x4459A90
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TTSRuntimeCache* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::TTS::Integrations::TTSRuntimeCache::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TTSRuntimeCache*, creationType>()));
    }
  }; // Meta.WitAi.TTS.Integrations.TTSRuntimeCache
  #pragma pack(pop)
  static check_size<sizeof(TTSRuntimeCache), 72 + sizeof(::System::Collections::Generic::List_1<::StringW>*)> __Meta_WitAi_TTS_Integrations_TTSRuntimeCacheSizeCheck;
  static_assert(sizeof(TTSRuntimeCache) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::WitAi::TTS::Integrations::TTSRuntimeCache::get_OnClipAdded
// Il2CppName: get_OnClipAdded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::TTS::Events::TTSClipEvent* (Meta::WitAi::TTS::Integrations::TTSRuntimeCache::*)()>(&Meta::WitAi::TTS::Integrations::TTSRuntimeCache::get_OnClipAdded)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Integrations::TTSRuntimeCache*), "get_OnClipAdded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Integrations::TTSRuntimeCache::set_OnClipAdded
// Il2CppName: set_OnClipAdded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::TTS::Integrations::TTSRuntimeCache::*)(::Meta::WitAi::TTS::Events::TTSClipEvent*)>(&Meta::WitAi::TTS::Integrations::TTSRuntimeCache::set_OnClipAdded)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Events", "TTSClipEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Integrations::TTSRuntimeCache*), "set_OnClipAdded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Integrations::TTSRuntimeCache::get_OnClipRemoved
// Il2CppName: get_OnClipRemoved
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::TTS::Events::TTSClipEvent* (Meta::WitAi::TTS::Integrations::TTSRuntimeCache::*)()>(&Meta::WitAi::TTS::Integrations::TTSRuntimeCache::get_OnClipRemoved)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Integrations::TTSRuntimeCache*), "get_OnClipRemoved", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Integrations::TTSRuntimeCache::set_OnClipRemoved
// Il2CppName: set_OnClipRemoved
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::TTS::Integrations::TTSRuntimeCache::*)(::Meta::WitAi::TTS::Events::TTSClipEvent*)>(&Meta::WitAi::TTS::Integrations::TTSRuntimeCache::set_OnClipRemoved)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Events", "TTSClipEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Integrations::TTSRuntimeCache*), "set_OnClipRemoved", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Integrations::TTSRuntimeCache::GetClips
// Il2CppName: GetClips
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Meta::WitAi::TTS::Data::TTSClipData*> (Meta::WitAi::TTS::Integrations::TTSRuntimeCache::*)()>(&Meta::WitAi::TTS::Integrations::TTSRuntimeCache::GetClips)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Integrations::TTSRuntimeCache*), "GetClips", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Integrations::TTSRuntimeCache::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::TTS::Integrations::TTSRuntimeCache::*)()>(&Meta::WitAi::TTS::Integrations::TTSRuntimeCache::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Integrations::TTSRuntimeCache*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Integrations::TTSRuntimeCache::GetClip
// Il2CppName: GetClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::TTS::Data::TTSClipData* (Meta::WitAi::TTS::Integrations::TTSRuntimeCache::*)(::StringW)>(&Meta::WitAi::TTS::Integrations::TTSRuntimeCache::GetClip)> {
  static const MethodInfo* get() {
    static auto* clipID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Integrations::TTSRuntimeCache*), "GetClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clipID});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Integrations::TTSRuntimeCache::AddClip
// Il2CppName: AddClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::TTS::Integrations::TTSRuntimeCache::*)(::Meta::WitAi::TTS::Data::TTSClipData*)>(&Meta::WitAi::TTS::Integrations::TTSRuntimeCache::AddClip)> {
  static const MethodInfo* get() {
    static auto* clipData = &::il2cpp_utils::GetClassFromName("Meta.WitAi.TTS.Data", "TTSClipData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Integrations::TTSRuntimeCache*), "AddClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clipData});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Integrations::TTSRuntimeCache::RemoveClip
// Il2CppName: RemoveClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::TTS::Integrations::TTSRuntimeCache::*)(::StringW)>(&Meta::WitAi::TTS::Integrations::TTSRuntimeCache::RemoveClip)> {
  static const MethodInfo* get() {
    static auto* clipID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Integrations::TTSRuntimeCache*), "RemoveClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clipID});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Integrations::TTSRuntimeCache::IsCacheFull
// Il2CppName: IsCacheFull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::TTS::Integrations::TTSRuntimeCache::*)()>(&Meta::WitAi::TTS::Integrations::TTSRuntimeCache::IsCacheFull)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Integrations::TTSRuntimeCache*), "IsCacheFull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Integrations::TTSRuntimeCache::GetCacheDiskSize
// Il2CppName: GetCacheDiskSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Meta::WitAi::TTS::Integrations::TTSRuntimeCache::*)()>(&Meta::WitAi::TTS::Integrations::TTSRuntimeCache::GetCacheDiskSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Integrations::TTSRuntimeCache*), "GetCacheDiskSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Integrations::TTSRuntimeCache::GetClipBytes
// Il2CppName: GetClipBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (*)(::UnityEngine::AudioClip*)>(&Meta::WitAi::TTS::Integrations::TTSRuntimeCache::GetClipBytes)> {
  static const MethodInfo* get() {
    static auto* clip = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioClip")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Integrations::TTSRuntimeCache*), "GetClipBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clip});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Integrations::TTSRuntimeCache::GetClipBytes
// Il2CppName: GetClipBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (*)(int, int)>(&Meta::WitAi::TTS::Integrations::TTSRuntimeCache::GetClipBytes)> {
  static const MethodInfo* get() {
    static auto* channels = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* samples = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Integrations::TTSRuntimeCache*), "GetClipBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channels, samples});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Integrations::TTSRuntimeCache::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
