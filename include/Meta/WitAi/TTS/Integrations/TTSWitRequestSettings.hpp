// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Meta.WitAi.Requests.TTSWitAudioType
#include "Meta/WitAi/Requests/TTSWitAudioType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Meta::WitAi::Data::Configuration
namespace Meta::WitAi::Data::Configuration {
  // Forward declaring type: WitConfiguration
  class WitConfiguration;
}
// Completed forward declares
// Type namespace: Meta.WitAi.TTS.Integrations
namespace Meta::WitAi::TTS::Integrations {
  // Forward declaring type: TTSWitRequestSettings
  struct TTSWitRequestSettings;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Meta::WitAi::TTS::Integrations::TTSWitRequestSettings, "Meta.WitAi.TTS.Integrations", "TTSWitRequestSettings");
// Type namespace: Meta.WitAi.TTS.Integrations
namespace Meta::WitAi::TTS::Integrations {
  // Size: 0xD
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Meta.WitAi.TTS.Integrations.TTSWitRequestSettings
  // [TokenAttribute] Offset: FFFFFFFF
  struct TTSWitRequestSettings/*, public ::System::ValueType*/ {
    public:
    public:
    // public Meta.WitAi.Data.Configuration.WitConfiguration configuration
    // Size: 0x8
    // Offset: 0x0
    ::Meta::WitAi::Data::Configuration::WitConfiguration* configuration;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::Data::Configuration::WitConfiguration*) == 0x8);
    // public Meta.WitAi.Requests.TTSWitAudioType audioType
    // Size: 0x4
    // Offset: 0x8
    ::Meta::WitAi::Requests::TTSWitAudioType audioType;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::Requests::TTSWitAudioType) == 0x4);
    // public System.Boolean audioStream
    // Size: 0x1
    // Offset: 0xC
    bool audioStream;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating value type constructor for type: TTSWitRequestSettings
    constexpr TTSWitRequestSettings(::Meta::WitAi::Data::Configuration::WitConfiguration* configuration_ = {}, ::Meta::WitAi::Requests::TTSWitAudioType audioType_ = {}, bool audioStream_ = {}) noexcept : configuration{configuration_}, audioType{audioType_}, audioStream{audioStream_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public Meta.WitAi.Data.Configuration.WitConfiguration configuration
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::Data::Configuration::WitConfiguration*& dyn_configuration();
    // Get instance field reference: public Meta.WitAi.Requests.TTSWitAudioType audioType
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::Requests::TTSWitAudioType& dyn_audioType();
    // Get instance field reference: public System.Boolean audioStream
    [[deprecated("Use field access instead!")]] bool& dyn_audioStream();
  }; // Meta.WitAi.TTS.Integrations.TTSWitRequestSettings
  #pragma pack(pop)
  static check_size<sizeof(TTSWitRequestSettings), 12 + sizeof(bool)> __Meta_WitAi_TTS_Integrations_TTSWitRequestSettingsSizeCheck;
  static_assert(sizeof(TTSWitRequestSettings) == 0xD);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
