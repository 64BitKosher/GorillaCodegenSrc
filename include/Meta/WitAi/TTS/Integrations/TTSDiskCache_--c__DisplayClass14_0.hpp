// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Meta.WitAi.TTS.Integrations.TTSDiskCache
#include "Meta/WitAi/TTS/Integrations/TTSDiskCache.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Meta::WitAi::TTS::Data
namespace Meta::WitAi::TTS::Data {
  // Forward declaring type: TTSClipData
  class TTSClipData;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::WitAi::TTS::Integrations::TTSDiskCache::$$c__DisplayClass14_0);
DEFINE_IL2CPP_ARG_TYPE(::Meta::WitAi::TTS::Integrations::TTSDiskCache::$$c__DisplayClass14_0*, "Meta.WitAi.TTS.Integrations", "TTSDiskCache/<>c__DisplayClass14_0");
// Type namespace: Meta.WitAi.TTS.Integrations
namespace Meta::WitAi::TTS::Integrations {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Meta.WitAi.TTS.Integrations.TTSDiskCache/<>c__DisplayClass14_0
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  class TTSDiskCache::$$c__DisplayClass14_0 : public ::Il2CppObject {
    public:
    public:
    // public Meta.WitAi.TTS.Integrations.TTSDiskCache <>4__this
    // Size: 0x8
    // Offset: 0x10
    ::Meta::WitAi::TTS::Integrations::TTSDiskCache* $$4__this;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::TTS::Integrations::TTSDiskCache*) == 0x8);
    // public Meta.WitAi.TTS.Data.TTSClipData clipData
    // Size: 0x8
    // Offset: 0x18
    ::Meta::WitAi::TTS::Data::TTSClipData* clipData;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::TTS::Data::TTSClipData*) == 0x8);
    // public System.Action`2<Meta.WitAi.TTS.Data.TTSClipData,System.Boolean> onCheckComplete
    // Size: 0x8
    // Offset: 0x20
    ::System::Action_2<::Meta::WitAi::TTS::Data::TTSClipData*, bool>* onCheckComplete;
    // Field size check
    static_assert(sizeof(::System::Action_2<::Meta::WitAi::TTS::Data::TTSClipData*, bool>*) == 0x8);
    public:
    // Get instance field reference: public Meta.WitAi.TTS.Integrations.TTSDiskCache <>4__this
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::TTS::Integrations::TTSDiskCache*& dyn_$$4__this();
    // Get instance field reference: public Meta.WitAi.TTS.Data.TTSClipData clipData
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::TTS::Data::TTSClipData*& dyn_clipData();
    // Get instance field reference: public System.Action`2<Meta.WitAi.TTS.Data.TTSClipData,System.Boolean> onCheckComplete
    [[deprecated("Use field access instead!")]] ::System::Action_2<::Meta::WitAi::TTS::Data::TTSClipData*, bool>*& dyn_onCheckComplete();
    // public System.Void .ctor()
    // Offset: 0x445883C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TTSDiskCache::$$c__DisplayClass14_0* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::TTS::Integrations::TTSDiskCache::$$c__DisplayClass14_0::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TTSDiskCache::$$c__DisplayClass14_0*, creationType>()));
    }
    // System.Void <CheckCachedToDisk>b__0(System.Boolean success, System.String error)
    // Offset: 0x4458F3C
    void $CheckCachedToDisk$b__0(bool success, ::StringW error);
  }; // Meta.WitAi.TTS.Integrations.TTSDiskCache/<>c__DisplayClass14_0
  #pragma pack(pop)
  static check_size<sizeof(TTSDiskCache::$$c__DisplayClass14_0), 32 + sizeof(::System::Action_2<::Meta::WitAi::TTS::Data::TTSClipData*, bool>*)> __Meta_WitAi_TTS_Integrations_TTSDiskCache_$$c__DisplayClass14_0SizeCheck;
  static_assert(sizeof(TTSDiskCache::$$c__DisplayClass14_0) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::WitAi::TTS::Integrations::TTSDiskCache::$$c__DisplayClass14_0::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Meta::WitAi::TTS::Integrations::TTSDiskCache::$$c__DisplayClass14_0::$CheckCachedToDisk$b__0
// Il2CppName: <CheckCachedToDisk>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::TTS::Integrations::TTSDiskCache::$$c__DisplayClass14_0::*)(bool, ::StringW)>(&Meta::WitAi::TTS::Integrations::TTSDiskCache::$$c__DisplayClass14_0::$CheckCachedToDisk$b__0)> {
  static const MethodInfo* get() {
    static auto* success = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Integrations::TTSDiskCache::$$c__DisplayClass14_0*), "<CheckCachedToDisk>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{success, error});
  }
};
