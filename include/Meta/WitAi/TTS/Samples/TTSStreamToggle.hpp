// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Meta::WitAi::TTS::Integrations
namespace Meta::WitAi::TTS::Integrations {
  // Forward declaring type: TTSWit
  class TTSWit;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Text
  class Text;
  // Forward declaring type: Button
  class Button;
}
// Completed forward declares
// Type namespace: Meta.WitAi.TTS.Samples
namespace Meta::WitAi::TTS::Samples {
  // Forward declaring type: TTSStreamToggle
  class TTSStreamToggle;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Meta::WitAi::TTS::Samples::TTSStreamToggle);
DEFINE_IL2CPP_ARG_TYPE(::Meta::WitAi::TTS::Samples::TTSStreamToggle*, "Meta.WitAi.TTS.Samples", "TTSStreamToggle");
// Type namespace: Meta.WitAi.TTS.Samples
namespace Meta::WitAi::TTS::Samples {
  // Size: 0x39
  #pragma pack(push, 1)
  // Autogenerated type: Meta.WitAi.TTS.Samples.TTSStreamToggle
  // [TokenAttribute] Offset: FFFFFFFF
  class TTSStreamToggle : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private Meta.WitAi.TTS.Integrations.TTSWit _service
    // Size: 0x8
    // Offset: 0x20
    ::Meta::WitAi::TTS::Integrations::TTSWit* service;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::TTS::Integrations::TTSWit*) == 0x8);
    // private UnityEngine.UI.Text _label
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::UI::Text* label;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // private UnityEngine.UI.Button _button
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::UI::Button* button;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Button*) == 0x8);
    // private System.Boolean _streamEnabled
    // Size: 0x1
    // Offset: 0x38
    bool streamEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private Meta.WitAi.TTS.Integrations.TTSWit _service
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::TTS::Integrations::TTSWit*& dyn__service();
    // Get instance field reference: private UnityEngine.UI.Text _label
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn__label();
    // Get instance field reference: private UnityEngine.UI.Button _button
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Button*& dyn__button();
    // Get instance field reference: private System.Boolean _streamEnabled
    [[deprecated("Use field access instead!")]] bool& dyn__streamEnabled();
    // private System.Void OnEnable()
    // Offset: 0x4411CF8
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0x4411F10
    void OnDisable();
    // private System.Void RefreshStreaming()
    // Offset: 0x4411E5C
    void RefreshStreaming();
    // public System.Void ToggleStreaming()
    // Offset: 0x4412024
    void ToggleStreaming();
    // private System.Boolean GetStreaming()
    // Offset: 0x4411FA0
    bool GetStreaming();
    // private System.Void SetStreaming(System.Boolean toStreaming)
    // Offset: 0x4412048
    void SetStreaming(bool toStreaming);
    // private System.Void Update()
    // Offset: 0x44120E4
    void Update();
    // public System.Void .ctor()
    // Offset: 0x4412120
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TTSStreamToggle* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Meta::WitAi::TTS::Samples::TTSStreamToggle::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TTSStreamToggle*, creationType>()));
    }
  }; // Meta.WitAi.TTS.Samples.TTSStreamToggle
  #pragma pack(pop)
  static check_size<sizeof(TTSStreamToggle), 56 + sizeof(bool)> __Meta_WitAi_TTS_Samples_TTSStreamToggleSizeCheck;
  static_assert(sizeof(TTSStreamToggle) == 0x39);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Meta::WitAi::TTS::Samples::TTSStreamToggle::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::TTS::Samples::TTSStreamToggle::*)()>(&Meta::WitAi::TTS::Samples::TTSStreamToggle::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Samples::TTSStreamToggle*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Samples::TTSStreamToggle::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::TTS::Samples::TTSStreamToggle::*)()>(&Meta::WitAi::TTS::Samples::TTSStreamToggle::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Samples::TTSStreamToggle*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Samples::TTSStreamToggle::RefreshStreaming
// Il2CppName: RefreshStreaming
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::TTS::Samples::TTSStreamToggle::*)()>(&Meta::WitAi::TTS::Samples::TTSStreamToggle::RefreshStreaming)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Samples::TTSStreamToggle*), "RefreshStreaming", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Samples::TTSStreamToggle::ToggleStreaming
// Il2CppName: ToggleStreaming
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::TTS::Samples::TTSStreamToggle::*)()>(&Meta::WitAi::TTS::Samples::TTSStreamToggle::ToggleStreaming)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Samples::TTSStreamToggle*), "ToggleStreaming", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Samples::TTSStreamToggle::GetStreaming
// Il2CppName: GetStreaming
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Meta::WitAi::TTS::Samples::TTSStreamToggle::*)()>(&Meta::WitAi::TTS::Samples::TTSStreamToggle::GetStreaming)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Samples::TTSStreamToggle*), "GetStreaming", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Samples::TTSStreamToggle::SetStreaming
// Il2CppName: SetStreaming
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::TTS::Samples::TTSStreamToggle::*)(bool)>(&Meta::WitAi::TTS::Samples::TTSStreamToggle::SetStreaming)> {
  static const MethodInfo* get() {
    static auto* toStreaming = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Samples::TTSStreamToggle*), "SetStreaming", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{toStreaming});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Samples::TTSStreamToggle::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Meta::WitAi::TTS::Samples::TTSStreamToggle::*)()>(&Meta::WitAi::TTS::Samples::TTSStreamToggle::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Meta::WitAi::TTS::Samples::TTSStreamToggle*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Meta::WitAi::TTS::Samples::TTSStreamToggle::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
