// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Newtonsoft.Json.Utilities.StringUtils
#include "Newtonsoft/Json/Utilities/StringUtils.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Newtonsoft::Json::Utilities::StringUtils::SeparatedCaseState, "Newtonsoft.Json.Utilities", "StringUtils/SeparatedCaseState");
// Type namespace: Newtonsoft.Json.Utilities
namespace Newtonsoft::Json::Utilities {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: Newtonsoft.Json.Utilities.StringUtils/SeparatedCaseState
  // [TokenAttribute] Offset: FFFFFFFF
  // [NullableContextAttribute] Offset: FFFFFFFF
  struct StringUtils::SeparatedCaseState/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: SeparatedCaseState
    constexpr SeparatedCaseState(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public Newtonsoft.Json.Utilities.StringUtils/SeparatedCaseState Start
    static constexpr const int Start = 0;
    // Get static field: static public Newtonsoft.Json.Utilities.StringUtils/SeparatedCaseState Start
    static ::Newtonsoft::Json::Utilities::StringUtils::SeparatedCaseState _get_Start();
    // Set static field: static public Newtonsoft.Json.Utilities.StringUtils/SeparatedCaseState Start
    static void _set_Start(::Newtonsoft::Json::Utilities::StringUtils::SeparatedCaseState value);
    // static field const value: static public Newtonsoft.Json.Utilities.StringUtils/SeparatedCaseState Lower
    static constexpr const int Lower = 1;
    // Get static field: static public Newtonsoft.Json.Utilities.StringUtils/SeparatedCaseState Lower
    static ::Newtonsoft::Json::Utilities::StringUtils::SeparatedCaseState _get_Lower();
    // Set static field: static public Newtonsoft.Json.Utilities.StringUtils/SeparatedCaseState Lower
    static void _set_Lower(::Newtonsoft::Json::Utilities::StringUtils::SeparatedCaseState value);
    // static field const value: static public Newtonsoft.Json.Utilities.StringUtils/SeparatedCaseState Upper
    static constexpr const int Upper = 2;
    // Get static field: static public Newtonsoft.Json.Utilities.StringUtils/SeparatedCaseState Upper
    static ::Newtonsoft::Json::Utilities::StringUtils::SeparatedCaseState _get_Upper();
    // Set static field: static public Newtonsoft.Json.Utilities.StringUtils/SeparatedCaseState Upper
    static void _set_Upper(::Newtonsoft::Json::Utilities::StringUtils::SeparatedCaseState value);
    // static field const value: static public Newtonsoft.Json.Utilities.StringUtils/SeparatedCaseState NewWord
    static constexpr const int NewWord = 3;
    // Get static field: static public Newtonsoft.Json.Utilities.StringUtils/SeparatedCaseState NewWord
    static ::Newtonsoft::Json::Utilities::StringUtils::SeparatedCaseState _get_NewWord();
    // Set static field: static public Newtonsoft.Json.Utilities.StringUtils/SeparatedCaseState NewWord
    static void _set_NewWord(::Newtonsoft::Json::Utilities::StringUtils::SeparatedCaseState value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // Newtonsoft.Json.Utilities.StringUtils/SeparatedCaseState
  #pragma pack(pop)
  static check_size<sizeof(StringUtils::SeparatedCaseState), 0 + sizeof(int)> __Newtonsoft_Json_Utilities_StringUtils_SeparatedCaseStateSizeCheck;
  static_assert(sizeof(StringUtils::SeparatedCaseState) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
