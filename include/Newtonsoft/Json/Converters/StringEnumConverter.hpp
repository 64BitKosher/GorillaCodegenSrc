// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Newtonsoft.Json.JsonConverter
#include "Newtonsoft/Json/JsonConverter.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Newtonsoft::Json::Serialization
namespace Newtonsoft::Json::Serialization {
  // Forward declaring type: NamingStrategy
  class NamingStrategy;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: Newtonsoft::Json
namespace Newtonsoft::Json {
  // Forward declaring type: JsonWriter
  class JsonWriter;
  // Forward declaring type: JsonSerializer
  class JsonSerializer;
  // Forward declaring type: JsonReader
  class JsonReader;
}
// Completed forward declares
// Type namespace: Newtonsoft.Json.Converters
namespace Newtonsoft::Json::Converters {
  // Forward declaring type: StringEnumConverter
  class StringEnumConverter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Newtonsoft::Json::Converters::StringEnumConverter);
DEFINE_IL2CPP_ARG_TYPE(::Newtonsoft::Json::Converters::StringEnumConverter*, "Newtonsoft.Json.Converters", "StringEnumConverter");
// Type namespace: Newtonsoft.Json.Converters
namespace Newtonsoft::Json::Converters {
  // Size: 0x19
  #pragma pack(push, 1)
  // Autogenerated type: Newtonsoft.Json.Converters.StringEnumConverter
  // [TokenAttribute] Offset: FFFFFFFF
  // [NullableContextAttribute] Offset: FFFFFFFF
  // [NullableAttribute] Offset: FFFFFFFF
  class StringEnumConverter : public ::Newtonsoft::Json::JsonConverter {
    public:
    public:
    // private Newtonsoft.Json.Serialization.NamingStrategy <NamingStrategy>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::Newtonsoft::Json::Serialization::NamingStrategy* NamingStrategy;
    // Field size check
    static_assert(sizeof(::Newtonsoft::Json::Serialization::NamingStrategy*) == 0x8);
    // private System.Boolean <AllowIntegerValues>k__BackingField
    // Size: 0x1
    // Offset: 0x18
    bool AllowIntegerValues;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private Newtonsoft.Json.Serialization.NamingStrategy <NamingStrategy>k__BackingField
    [[deprecated("Use field access instead!")]] ::Newtonsoft::Json::Serialization::NamingStrategy*& dyn_$NamingStrategy$k__BackingField();
    // Get instance field reference: private System.Boolean <AllowIntegerValues>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$AllowIntegerValues$k__BackingField();
    // public System.Boolean get_CamelCaseText()
    // Offset: 0x4759CE8
    bool get_CamelCaseText();
    // public System.Void set_CamelCaseText(System.Boolean value)
    // Offset: 0x4759D64
    void set_CamelCaseText(bool value);
    // public Newtonsoft.Json.Serialization.NamingStrategy get_NamingStrategy()
    // Offset: 0x4759E34
    ::Newtonsoft::Json::Serialization::NamingStrategy* get_NamingStrategy();
    // public System.Void set_NamingStrategy(Newtonsoft.Json.Serialization.NamingStrategy value)
    // Offset: 0x4759E3C
    void set_NamingStrategy(::Newtonsoft::Json::Serialization::NamingStrategy* value);
    // public System.Boolean get_AllowIntegerValues()
    // Offset: 0x4759E44
    bool get_AllowIntegerValues();
    // public System.Void set_AllowIntegerValues(System.Boolean value)
    // Offset: 0x4759E4C
    void set_AllowIntegerValues(bool value);
    // public System.Void .ctor(System.Boolean camelCaseText)
    // Offset: 0x4759E68
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StringEnumConverter* New_ctor(bool camelCaseText) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Newtonsoft::Json::Converters::StringEnumConverter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StringEnumConverter*, creationType>(camelCaseText)));
    }
    // public System.Void .ctor(Newtonsoft.Json.Serialization.NamingStrategy namingStrategy, System.Boolean allowIntegerValues)
    // Offset: 0x4759EF0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StringEnumConverter* New_ctor(::Newtonsoft::Json::Serialization::NamingStrategy* namingStrategy, bool allowIntegerValues) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Newtonsoft::Json::Converters::StringEnumConverter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StringEnumConverter*, creationType>(namingStrategy, allowIntegerValues)));
    }
    // public System.Void .ctor(System.Type namingStrategyType)
    // Offset: 0x4759F38
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StringEnumConverter* New_ctor(::System::Type* namingStrategyType) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Newtonsoft::Json::Converters::StringEnumConverter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StringEnumConverter*, creationType>(namingStrategyType)));
    }
    // public System.Void .ctor(System.Type namingStrategyType, System.Object[] namingStrategyParameters)
    // Offset: 0x4759FE8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StringEnumConverter* New_ctor(::System::Type* namingStrategyType, ::ArrayW<::Il2CppObject*> namingStrategyParameters) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Newtonsoft::Json::Converters::StringEnumConverter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StringEnumConverter*, creationType>(namingStrategyType, namingStrategyParameters)));
    }
    // public System.Void .ctor(System.Type namingStrategyType, System.Object[] namingStrategyParameters, System.Boolean allowIntegerValues)
    // Offset: 0x475A0A4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StringEnumConverter* New_ctor(::System::Type* namingStrategyType, ::ArrayW<::Il2CppObject*> namingStrategyParameters, bool allowIntegerValues) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Newtonsoft::Json::Converters::StringEnumConverter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StringEnumConverter*, creationType>(namingStrategyType, namingStrategyParameters, allowIntegerValues)));
    }
    // public System.Void .ctor()
    // Offset: 0x4759E58
    // Implemented from: Newtonsoft.Json.JsonConverter
    // Base method: System.Void JsonConverter::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StringEnumConverter* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Newtonsoft::Json::Converters::StringEnumConverter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StringEnumConverter*, creationType>()));
    }
    // public override System.Void WriteJson(Newtonsoft.Json.JsonWriter writer, System.Object value, Newtonsoft.Json.JsonSerializer serializer)
    // Offset: 0x475A170
    // Implemented from: Newtonsoft.Json.JsonConverter
    // Base method: System.Void JsonConverter::WriteJson(Newtonsoft.Json.JsonWriter writer, System.Object value, Newtonsoft.Json.JsonSerializer serializer)
    void WriteJson(::Newtonsoft::Json::JsonWriter* writer, ::Il2CppObject* value, ::Newtonsoft::Json::JsonSerializer* serializer);
    // public override System.Object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, System.Object existingValue, Newtonsoft.Json.JsonSerializer serializer)
    // Offset: 0x475A360
    // Implemented from: Newtonsoft.Json.JsonConverter
    // Base method: System.Object JsonConverter::ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, System.Object existingValue, Newtonsoft.Json.JsonSerializer serializer)
    ::Il2CppObject* ReadJson(::Newtonsoft::Json::JsonReader* reader, ::System::Type* objectType, ::Il2CppObject* existingValue, ::Newtonsoft::Json::JsonSerializer* serializer);
    // public override System.Boolean CanConvert(System.Type objectType)
    // Offset: 0x475A7D0
    // Implemented from: Newtonsoft.Json.JsonConverter
    // Base method: System.Boolean JsonConverter::CanConvert(System.Type objectType)
    bool CanConvert(::System::Type* objectType);
  }; // Newtonsoft.Json.Converters.StringEnumConverter
  #pragma pack(pop)
  static check_size<sizeof(StringEnumConverter), 24 + sizeof(bool)> __Newtonsoft_Json_Converters_StringEnumConverterSizeCheck;
  static_assert(sizeof(StringEnumConverter) == 0x19);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::StringEnumConverter::get_CamelCaseText
// Il2CppName: get_CamelCaseText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Newtonsoft::Json::Converters::StringEnumConverter::*)()>(&Newtonsoft::Json::Converters::StringEnumConverter::get_CamelCaseText)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::StringEnumConverter*), "get_CamelCaseText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::StringEnumConverter::set_CamelCaseText
// Il2CppName: set_CamelCaseText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::Converters::StringEnumConverter::*)(bool)>(&Newtonsoft::Json::Converters::StringEnumConverter::set_CamelCaseText)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::StringEnumConverter*), "set_CamelCaseText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::StringEnumConverter::get_NamingStrategy
// Il2CppName: get_NamingStrategy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Newtonsoft::Json::Serialization::NamingStrategy* (Newtonsoft::Json::Converters::StringEnumConverter::*)()>(&Newtonsoft::Json::Converters::StringEnumConverter::get_NamingStrategy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::StringEnumConverter*), "get_NamingStrategy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::StringEnumConverter::set_NamingStrategy
// Il2CppName: set_NamingStrategy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::Converters::StringEnumConverter::*)(::Newtonsoft::Json::Serialization::NamingStrategy*)>(&Newtonsoft::Json::Converters::StringEnumConverter::set_NamingStrategy)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Serialization", "NamingStrategy")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::StringEnumConverter*), "set_NamingStrategy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::StringEnumConverter::get_AllowIntegerValues
// Il2CppName: get_AllowIntegerValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Newtonsoft::Json::Converters::StringEnumConverter::*)()>(&Newtonsoft::Json::Converters::StringEnumConverter::get_AllowIntegerValues)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::StringEnumConverter*), "get_AllowIntegerValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::StringEnumConverter::set_AllowIntegerValues
// Il2CppName: set_AllowIntegerValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::Converters::StringEnumConverter::*)(bool)>(&Newtonsoft::Json::Converters::StringEnumConverter::set_AllowIntegerValues)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::StringEnumConverter*), "set_AllowIntegerValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::StringEnumConverter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::StringEnumConverter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::StringEnumConverter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::StringEnumConverter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::StringEnumConverter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::StringEnumConverter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::StringEnumConverter::WriteJson
// Il2CppName: WriteJson
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Newtonsoft::Json::Converters::StringEnumConverter::*)(::Newtonsoft::Json::JsonWriter*, ::Il2CppObject*, ::Newtonsoft::Json::JsonSerializer*)>(&Newtonsoft::Json::Converters::StringEnumConverter::WriteJson)> {
  static const MethodInfo* get() {
    static auto* writer = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonWriter")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* serializer = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonSerializer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::StringEnumConverter*), "WriteJson", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{writer, value, serializer});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::StringEnumConverter::ReadJson
// Il2CppName: ReadJson
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (Newtonsoft::Json::Converters::StringEnumConverter::*)(::Newtonsoft::Json::JsonReader*, ::System::Type*, ::Il2CppObject*, ::Newtonsoft::Json::JsonSerializer*)>(&Newtonsoft::Json::Converters::StringEnumConverter::ReadJson)> {
  static const MethodInfo* get() {
    static auto* reader = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonReader")->byval_arg;
    static auto* objectType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* existingValue = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* serializer = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json", "JsonSerializer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::StringEnumConverter*), "ReadJson", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reader, objectType, existingValue, serializer});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Converters::StringEnumConverter::CanConvert
// Il2CppName: CanConvert
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Newtonsoft::Json::Converters::StringEnumConverter::*)(::System::Type*)>(&Newtonsoft::Json::Converters::StringEnumConverter::CanConvert)> {
  static const MethodInfo* get() {
    static auto* objectType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Converters::StringEnumConverter*), "CanConvert", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{objectType});
  }
};
