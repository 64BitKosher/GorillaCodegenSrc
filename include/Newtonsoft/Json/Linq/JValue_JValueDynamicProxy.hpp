// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Newtonsoft.Json.Linq.JValue
#include "Newtonsoft/Json/Linq/JValue.hpp"
// Including type: Newtonsoft.Json.Utilities.DynamicProxy`1
#include "Newtonsoft/Json/Utilities/DynamicProxy_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Dynamic
namespace System::Dynamic {
  // Forward declaring type: ConvertBinder
  class ConvertBinder;
  // Forward declaring type: BinaryOperationBinder
  class BinaryOperationBinder;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Newtonsoft::Json::Linq::JValue::JValueDynamicProxy);
DEFINE_IL2CPP_ARG_TYPE(::Newtonsoft::Json::Linq::JValue::JValueDynamicProxy*, "Newtonsoft.Json.Linq", "JValue/JValueDynamicProxy");
// Type namespace: Newtonsoft.Json.Linq
namespace Newtonsoft::Json::Linq {
  // WARNING Size may be invalid!
  // Autogenerated type: Newtonsoft.Json.Linq.JValue/JValueDynamicProxy
  // [TokenAttribute] Offset: FFFFFFFF
  // [NullableAttribute] Offset: FFFFFFFF
  class JValue::JValueDynamicProxy : public ::Newtonsoft::Json::Utilities::DynamicProxy_1<::Newtonsoft::Json::Linq::JValue*> {
    public:
    // public System.Boolean TryConvert(Newtonsoft.Json.Linq.JValue instance, System.Dynamic.ConvertBinder binder, out System.Object result)
    // Offset: 0x475223C
    bool TryConvert(::Newtonsoft::Json::Linq::JValue* instance, ::System::Dynamic::ConvertBinder* binder, ByRef<::Il2CppObject*> result);
    // public System.Boolean TryBinaryOperation(Newtonsoft.Json.Linq.JValue instance, System.Dynamic.BinaryOperationBinder binder, System.Object arg, out System.Object result)
    // Offset: 0x4752428
    bool TryBinaryOperation(::Newtonsoft::Json::Linq::JValue* instance, ::System::Dynamic::BinaryOperationBinder* binder, ::Il2CppObject* arg, ByRef<::Il2CppObject*> result);
    // public System.Void .ctor()
    // Offset: 0x4751B9C
    // Implemented from: Newtonsoft.Json.Utilities.DynamicProxy`1
    // Base method: System.Void DynamicProxy_1::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static JValue::JValueDynamicProxy* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Newtonsoft::Json::Linq::JValue::JValueDynamicProxy::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<JValue::JValueDynamicProxy*, creationType>()));
    }
  }; // Newtonsoft.Json.Linq.JValue/JValueDynamicProxy
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Newtonsoft::Json::Linq::JValue::JValueDynamicProxy::TryConvert
// Il2CppName: TryConvert
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Newtonsoft::Json::Linq::JValue::JValueDynamicProxy::*)(::Newtonsoft::Json::Linq::JValue*, ::System::Dynamic::ConvertBinder*, ByRef<::Il2CppObject*>)>(&Newtonsoft::Json::Linq::JValue::JValueDynamicProxy::TryConvert)> {
  static const MethodInfo* get() {
    static auto* instance = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Linq", "JValue")->byval_arg;
    static auto* binder = &::il2cpp_utils::GetClassFromName("System.Dynamic", "ConvertBinder")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "Object")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Linq::JValue::JValueDynamicProxy*), "TryConvert", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instance, binder, result});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Linq::JValue::JValueDynamicProxy::TryBinaryOperation
// Il2CppName: TryBinaryOperation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Newtonsoft::Json::Linq::JValue::JValueDynamicProxy::*)(::Newtonsoft::Json::Linq::JValue*, ::System::Dynamic::BinaryOperationBinder*, ::Il2CppObject*, ByRef<::Il2CppObject*>)>(&Newtonsoft::Json::Linq::JValue::JValueDynamicProxy::TryBinaryOperation)> {
  static const MethodInfo* get() {
    static auto* instance = &::il2cpp_utils::GetClassFromName("Newtonsoft.Json.Linq", "JValue")->byval_arg;
    static auto* binder = &::il2cpp_utils::GetClassFromName("System.Dynamic", "BinaryOperationBinder")->byval_arg;
    static auto* arg = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "Object")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Newtonsoft::Json::Linq::JValue::JValueDynamicProxy*), "TryBinaryOperation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instance, binder, arg, result});
  }
};
// Writing MetadataGetter for method: Newtonsoft::Json::Linq::JValue::JValueDynamicProxy::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
