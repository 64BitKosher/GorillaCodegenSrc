// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Oculus.Voice.Core.Bindings.Android.BaseAndroidConnectionImpl`1
#include "Oculus/Voice/Core/Bindings/Android/BaseAndroidConnectionImpl_1.hpp"
// Including type: Oculus.Voice.Interfaces.IPlatformVoiceService
#include "Oculus/Voice/Interfaces/IPlatformVoiceService.hpp"
// Including type: Oculus.Voice.Bindings.Android.IVCBindingEvents
#include "Oculus/Voice/Bindings/Android/IVCBindingEvents.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Voice::Bindings::Android
namespace Oculus::Voice::Bindings::Android {
  // Forward declaring type: VoiceSDKBinding
  class VoiceSDKBinding;
  // Forward declaring type: VoiceSDKListenerBinding
  class VoiceSDKListenerBinding;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: Meta::WitAi
namespace Meta::WitAi {
  // Skipping declaration: IVoiceService because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Forward declaring namespace: Meta::WitAi::Requests
namespace Meta::WitAi::Requests {
  // Forward declaring type: VoiceServiceRequest
  class VoiceServiceRequest;
  // Forward declaring type: VoiceServiceRequestEvents
  class VoiceServiceRequestEvents;
}
// Forward declaring namespace: Meta::WitAi::Interfaces
namespace Meta::WitAi::Interfaces {
  // Forward declaring type: ITranscriptionProvider
  class ITranscriptionProvider;
}
// Forward declaring namespace: Meta::WitAi::Configuration
namespace Meta::WitAi::Configuration {
  // Forward declaring type: WitRuntimeConfiguration
  class WitRuntimeConfiguration;
  // Forward declaring type: WitRequestOptions
  class WitRequestOptions;
}
// Forward declaring namespace: Meta::WitAi::Events
namespace Meta::WitAi::Events {
  // Forward declaring type: VoiceEvents
  class VoiceEvents;
  // Forward declaring type: TelemetryEvents
  class TelemetryEvents;
}
// Forward declaring namespace: Meta::Voice
namespace Meta::Voice {
  // Forward declaring type: NLPRequestInputType
  struct NLPRequestInputType;
}
// Completed forward declares
// Type namespace: Oculus.Voice.Bindings.Android
namespace Oculus::Voice::Bindings::Android {
  // Forward declaring type: VoiceSDKImpl
  class VoiceSDKImpl;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Voice::Bindings::Android::VoiceSDKImpl);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Voice::Bindings::Android::VoiceSDKImpl*, "Oculus.Voice.Bindings.Android", "VoiceSDKImpl");
// Type namespace: Oculus.Voice.Bindings.Android
namespace Oculus::Voice::Bindings::Android {
  // WARNING Size may be invalid!
  // Autogenerated type: Oculus.Voice.Bindings.Android.VoiceSDKImpl
  // [TokenAttribute] Offset: FFFFFFFF
  class VoiceSDKImpl : public ::Oculus::Voice::Core::Bindings::Android::BaseAndroidConnectionImpl_1<::Oculus::Voice::Bindings::Android::VoiceSDKBinding*>/*, public ::Oculus::Voice::Interfaces::IPlatformVoiceService, public ::Oculus::Voice::Bindings::Android::IVCBindingEvents*/ {
    public:
    public:
    // private System.Boolean _isServiceAvailable
    // Size: 0x1
    // Offset: 0x28
    bool isServiceAvailable;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Action OnServiceNotAvailableEvent
    // Size: 0x8
    // Offset: 0x30
    ::System::Action* OnServiceNotAvailableEvent;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private Meta.WitAi.IVoiceService _baseVoiceService
    // Size: 0x8
    // Offset: 0x38
    ::Meta::WitAi::IVoiceService* baseVoiceService;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::IVoiceService*) == 0x8);
    // private System.Boolean _isActive
    // Size: 0x1
    // Offset: 0x40
    bool isActive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private Oculus.Voice.Bindings.Android.VoiceSDKListenerBinding eventBinding
    // Size: 0x8
    // Offset: 0x48
    ::Oculus::Voice::Bindings::Android::VoiceSDKListenerBinding* eventBinding;
    // Field size check
    static_assert(sizeof(::Oculus::Voice::Bindings::Android::VoiceSDKListenerBinding*) == 0x8);
    // private readonly System.Collections.Generic.HashSet`1<Meta.WitAi.Requests.VoiceServiceRequest> <Requests>k__BackingField
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::Generic::HashSet_1<::Meta::WitAi::Requests::VoiceServiceRequest*>* Requests;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<::Meta::WitAi::Requests::VoiceServiceRequest*>*) == 0x8);
    // private Meta.WitAi.Interfaces.ITranscriptionProvider <TranscriptionProvider>k__BackingField
    // Size: 0x8
    // Offset: 0x58
    ::Meta::WitAi::Interfaces::ITranscriptionProvider* TranscriptionProvider;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::Interfaces::ITranscriptionProvider*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Oculus::Voice::Interfaces::IPlatformVoiceService
    operator ::Oculus::Voice::Interfaces::IPlatformVoiceService() noexcept {
      return *reinterpret_cast<::Oculus::Voice::Interfaces::IPlatformVoiceService*>(this);
    }
    // Creating interface conversion operator: operator ::Oculus::Voice::Bindings::Android::IVCBindingEvents
    operator ::Oculus::Voice::Bindings::Android::IVCBindingEvents() noexcept {
      return *reinterpret_cast<::Oculus::Voice::Bindings::Android::IVCBindingEvents*>(this);
    }
    // Get instance field reference: private System.Boolean _isServiceAvailable
    [[deprecated("Use field access instead!")]] bool& dyn__isServiceAvailable();
    // Get instance field reference: public System.Action OnServiceNotAvailableEvent
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_OnServiceNotAvailableEvent();
    // Get instance field reference: private Meta.WitAi.IVoiceService _baseVoiceService
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::IVoiceService*& dyn__baseVoiceService();
    // Get instance field reference: private System.Boolean _isActive
    [[deprecated("Use field access instead!")]] bool& dyn__isActive();
    // Get instance field reference: private Oculus.Voice.Bindings.Android.VoiceSDKListenerBinding eventBinding
    [[deprecated("Use field access instead!")]] ::Oculus::Voice::Bindings::Android::VoiceSDKListenerBinding*& dyn_eventBinding();
    // Get instance field reference: private readonly System.Collections.Generic.HashSet`1<Meta.WitAi.Requests.VoiceServiceRequest> <Requests>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::Meta::WitAi::Requests::VoiceServiceRequest*>*& dyn_$Requests$k__BackingField();
    // Get instance field reference: private Meta.WitAi.Interfaces.ITranscriptionProvider <TranscriptionProvider>k__BackingField
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::Interfaces::ITranscriptionProvider*& dyn_$TranscriptionProvider$k__BackingField();
    // public System.Void .ctor(Meta.WitAi.IVoiceService baseVoiceService)
    // Offset: 0x571E318
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VoiceSDKImpl* New_ctor(::Meta::WitAi::IVoiceService* baseVoiceService) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Voice::Bindings::Android::VoiceSDKImpl::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VoiceSDKImpl*, creationType>(baseVoiceService)));
    }
    // public System.Boolean get_UsePlatformIntegrations()
    // Offset: 0x5724310
    bool get_UsePlatformIntegrations();
    // public System.Void set_UsePlatformIntegrations(System.Boolean value)
    // Offset: 0x5724318
    void set_UsePlatformIntegrations(bool value);
    // public System.Boolean get_PlatformSupportsWit()
    // Offset: 0x571E408
    bool get_PlatformSupportsWit();
    // public System.Boolean get_Active()
    // Offset: 0x5724350
    bool get_Active();
    // public System.Boolean get_IsRequestActive()
    // Offset: 0x5724388
    bool get_IsRequestActive();
    // public System.Boolean get_MicActive()
    // Offset: 0x57243A0
    bool get_MicActive();
    // public System.Void SetRuntimeConfiguration(Meta.WitAi.Configuration.WitRuntimeConfiguration configuration)
    // Offset: 0x571E3F0
    void SetRuntimeConfiguration(::Meta::WitAi::Configuration::WitRuntimeConfiguration* configuration);
    // public System.Collections.Generic.HashSet`1<Meta.WitAi.Requests.VoiceServiceRequest> get_Requests()
    // Offset: 0x57243B8
    ::System::Collections::Generic::HashSet_1<::Meta::WitAi::Requests::VoiceServiceRequest*>* get_Requests();
    // public Meta.WitAi.Interfaces.ITranscriptionProvider get_TranscriptionProvider()
    // Offset: 0x57243C0
    ::Meta::WitAi::Interfaces::ITranscriptionProvider* get_TranscriptionProvider();
    // public System.Void set_TranscriptionProvider(Meta.WitAi.Interfaces.ITranscriptionProvider value)
    // Offset: 0x57243C8
    void set_TranscriptionProvider(::Meta::WitAi::Interfaces::ITranscriptionProvider* value);
    // public System.Boolean CanActivateAudio()
    // Offset: 0x57243D0
    bool CanActivateAudio();
    // public System.Boolean CanSend()
    // Offset: 0x57243D8
    bool CanSend();
    // private System.Void OnStoppedListening()
    // Offset: 0x57247A4
    void OnStoppedListening();
    // public Meta.WitAi.Requests.VoiceServiceRequest Activate(System.String text, Meta.WitAi.Configuration.WitRequestOptions requestOptions, Meta.WitAi.Requests.VoiceServiceRequestEvents requestEvents)
    // Offset: 0x57247AC
    ::Meta::WitAi::Requests::VoiceServiceRequest* Activate(::StringW text, ::Meta::WitAi::Configuration::WitRequestOptions* requestOptions, ::Meta::WitAi::Requests::VoiceServiceRequestEvents* requestEvents);
    // public Meta.WitAi.Requests.VoiceServiceRequest Activate(Meta.WitAi.Configuration.WitRequestOptions requestOptions, Meta.WitAi.Requests.VoiceServiceRequestEvents requestEvents)
    // Offset: 0x5724B40
    ::Meta::WitAi::Requests::VoiceServiceRequest* Activate(::Meta::WitAi::Configuration::WitRequestOptions* requestOptions, ::Meta::WitAi::Requests::VoiceServiceRequestEvents* requestEvents);
    // public Meta.WitAi.Requests.VoiceServiceRequest ActivateImmediately(Meta.WitAi.Configuration.WitRequestOptions requestOptions, Meta.WitAi.Requests.VoiceServiceRequestEvents requestEvents)
    // Offset: 0x5724C30
    ::Meta::WitAi::Requests::VoiceServiceRequest* ActivateImmediately(::Meta::WitAi::Configuration::WitRequestOptions* requestOptions, ::Meta::WitAi::Requests::VoiceServiceRequestEvents* requestEvents);
    // public System.Void Deactivate()
    // Offset: 0x5724D20
    void Deactivate();
    // public System.Void DeactivateAndAbortRequest()
    // Offset: 0x5724E94
    void DeactivateAndAbortRequest();
    // public System.Void DeactivateAndAbortRequest(Meta.WitAi.Requests.VoiceServiceRequest request)
    // Offset: 0x5725020
    void DeactivateAndAbortRequest(::Meta::WitAi::Requests::VoiceServiceRequest* request);
    // public System.Void OnServiceNotAvailable(System.String error, System.String message)
    // Offset: 0x57250B8
    void OnServiceNotAvailable(::StringW error, ::StringW message);
    // public Meta.WitAi.Events.VoiceEvents get_VoiceEvents()
    // Offset: 0x57250DC
    ::Meta::WitAi::Events::VoiceEvents* get_VoiceEvents();
    // public System.Void set_VoiceEvents(Meta.WitAi.Events.VoiceEvents value)
    // Offset: 0x5725180
    void set_VoiceEvents(::Meta::WitAi::Events::VoiceEvents* value);
    // public Meta.WitAi.Events.TelemetryEvents get_TelemetryEvents()
    // Offset: 0x572522C
    ::Meta::WitAi::Events::TelemetryEvents* get_TelemetryEvents();
    // public System.Void set_TelemetryEvents(Meta.WitAi.Events.TelemetryEvents value)
    // Offset: 0x57252D0
    void set_TelemetryEvents(::Meta::WitAi::Events::TelemetryEvents* value);
    // private Meta.WitAi.Requests.VoiceServiceRequest GetRequest(Meta.WitAi.Configuration.WitRequestOptions requestOptions, Meta.WitAi.Requests.VoiceServiceRequestEvents requestEvents, Meta.Voice.NLPRequestInputType inputType, System.Boolean audioImmediate)
    // Offset: 0x572489C
    ::Meta::WitAi::Requests::VoiceServiceRequest* GetRequest(::Meta::WitAi::Configuration::WitRequestOptions* requestOptions, ::Meta::WitAi::Requests::VoiceServiceRequestEvents* requestEvents, ::Meta::Voice::NLPRequestInputType inputType, bool audioImmediate);
    // private System.Void OnRequestCanceled(Meta.WitAi.Requests.VoiceServiceRequest request)
    // Offset: 0x57253C8
    void OnRequestCanceled(::Meta::WitAi::Requests::VoiceServiceRequest* request);
    // private System.Void OnRequestFailed(Meta.WitAi.Requests.VoiceServiceRequest request)
    // Offset: 0x57254FC
    void OnRequestFailed(::Meta::WitAi::Requests::VoiceServiceRequest* request);
    // private System.Void OnRequestSuccess(Meta.WitAi.Requests.VoiceServiceRequest request)
    // Offset: 0x5725650
    void OnRequestSuccess(::Meta::WitAi::Requests::VoiceServiceRequest* request);
    // private System.Void OnRequestComplete(Meta.WitAi.Requests.VoiceServiceRequest request)
    // Offset: 0x5725740
    void OnRequestComplete(::Meta::WitAi::Requests::VoiceServiceRequest* request);
    // public override System.Void Connect(System.String version)
    // Offset: 0x57243E0
    // Implemented from: Oculus.Voice.Core.Bindings.Android.BaseAndroidConnectionImpl`1
    // Base method: System.Void BaseAndroidConnectionImpl_1::Connect(System.String version)
    void Connect(::StringW version);
    // public override System.Void Disconnect()
    // Offset: 0x57246E0
    // Implemented from: Oculus.Voice.Core.Bindings.Android.BaseAndroidConnectionImpl`1
    // Base method: System.Void BaseAndroidConnectionImpl_1::Disconnect()
    void Disconnect();
  }; // Oculus.Voice.Bindings.Android.VoiceSDKImpl
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Voice::Bindings::Android::VoiceSDKImpl::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Voice::Bindings::Android::VoiceSDKImpl::get_UsePlatformIntegrations
// Il2CppName: get_UsePlatformIntegrations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Voice::Bindings::Android::VoiceSDKImpl::*)()>(&Oculus::Voice::Bindings::Android::VoiceSDKImpl::get_UsePlatformIntegrations)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Bindings::Android::VoiceSDKImpl*), "get_UsePlatformIntegrations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Bindings::Android::VoiceSDKImpl::set_UsePlatformIntegrations
// Il2CppName: set_UsePlatformIntegrations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::Bindings::Android::VoiceSDKImpl::*)(bool)>(&Oculus::Voice::Bindings::Android::VoiceSDKImpl::set_UsePlatformIntegrations)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Bindings::Android::VoiceSDKImpl*), "set_UsePlatformIntegrations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Bindings::Android::VoiceSDKImpl::get_PlatformSupportsWit
// Il2CppName: get_PlatformSupportsWit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Voice::Bindings::Android::VoiceSDKImpl::*)()>(&Oculus::Voice::Bindings::Android::VoiceSDKImpl::get_PlatformSupportsWit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Bindings::Android::VoiceSDKImpl*), "get_PlatformSupportsWit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Bindings::Android::VoiceSDKImpl::get_Active
// Il2CppName: get_Active
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Voice::Bindings::Android::VoiceSDKImpl::*)()>(&Oculus::Voice::Bindings::Android::VoiceSDKImpl::get_Active)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Bindings::Android::VoiceSDKImpl*), "get_Active", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Bindings::Android::VoiceSDKImpl::get_IsRequestActive
// Il2CppName: get_IsRequestActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Voice::Bindings::Android::VoiceSDKImpl::*)()>(&Oculus::Voice::Bindings::Android::VoiceSDKImpl::get_IsRequestActive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Bindings::Android::VoiceSDKImpl*), "get_IsRequestActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Bindings::Android::VoiceSDKImpl::get_MicActive
// Il2CppName: get_MicActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Voice::Bindings::Android::VoiceSDKImpl::*)()>(&Oculus::Voice::Bindings::Android::VoiceSDKImpl::get_MicActive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Bindings::Android::VoiceSDKImpl*), "get_MicActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Bindings::Android::VoiceSDKImpl::SetRuntimeConfiguration
// Il2CppName: SetRuntimeConfiguration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::Bindings::Android::VoiceSDKImpl::*)(::Meta::WitAi::Configuration::WitRuntimeConfiguration*)>(&Oculus::Voice::Bindings::Android::VoiceSDKImpl::SetRuntimeConfiguration)> {
  static const MethodInfo* get() {
    static auto* configuration = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Configuration", "WitRuntimeConfiguration")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Bindings::Android::VoiceSDKImpl*), "SetRuntimeConfiguration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{configuration});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Bindings::Android::VoiceSDKImpl::get_Requests
// Il2CppName: get_Requests
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::HashSet_1<::Meta::WitAi::Requests::VoiceServiceRequest*>* (Oculus::Voice::Bindings::Android::VoiceSDKImpl::*)()>(&Oculus::Voice::Bindings::Android::VoiceSDKImpl::get_Requests)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Bindings::Android::VoiceSDKImpl*), "get_Requests", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Bindings::Android::VoiceSDKImpl::get_TranscriptionProvider
// Il2CppName: get_TranscriptionProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Interfaces::ITranscriptionProvider* (Oculus::Voice::Bindings::Android::VoiceSDKImpl::*)()>(&Oculus::Voice::Bindings::Android::VoiceSDKImpl::get_TranscriptionProvider)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Bindings::Android::VoiceSDKImpl*), "get_TranscriptionProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Bindings::Android::VoiceSDKImpl::set_TranscriptionProvider
// Il2CppName: set_TranscriptionProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::Bindings::Android::VoiceSDKImpl::*)(::Meta::WitAi::Interfaces::ITranscriptionProvider*)>(&Oculus::Voice::Bindings::Android::VoiceSDKImpl::set_TranscriptionProvider)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Interfaces", "ITranscriptionProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Bindings::Android::VoiceSDKImpl*), "set_TranscriptionProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Bindings::Android::VoiceSDKImpl::CanActivateAudio
// Il2CppName: CanActivateAudio
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Voice::Bindings::Android::VoiceSDKImpl::*)()>(&Oculus::Voice::Bindings::Android::VoiceSDKImpl::CanActivateAudio)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Bindings::Android::VoiceSDKImpl*), "CanActivateAudio", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Bindings::Android::VoiceSDKImpl::CanSend
// Il2CppName: CanSend
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Voice::Bindings::Android::VoiceSDKImpl::*)()>(&Oculus::Voice::Bindings::Android::VoiceSDKImpl::CanSend)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Bindings::Android::VoiceSDKImpl*), "CanSend", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Bindings::Android::VoiceSDKImpl::OnStoppedListening
// Il2CppName: OnStoppedListening
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::Bindings::Android::VoiceSDKImpl::*)()>(&Oculus::Voice::Bindings::Android::VoiceSDKImpl::OnStoppedListening)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Bindings::Android::VoiceSDKImpl*), "OnStoppedListening", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Bindings::Android::VoiceSDKImpl::Activate
// Il2CppName: Activate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Requests::VoiceServiceRequest* (Oculus::Voice::Bindings::Android::VoiceSDKImpl::*)(::StringW, ::Meta::WitAi::Configuration::WitRequestOptions*, ::Meta::WitAi::Requests::VoiceServiceRequestEvents*)>(&Oculus::Voice::Bindings::Android::VoiceSDKImpl::Activate)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* requestOptions = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Configuration", "WitRequestOptions")->byval_arg;
    static auto* requestEvents = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Requests", "VoiceServiceRequestEvents")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Bindings::Android::VoiceSDKImpl*), "Activate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text, requestOptions, requestEvents});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Bindings::Android::VoiceSDKImpl::Activate
// Il2CppName: Activate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Requests::VoiceServiceRequest* (Oculus::Voice::Bindings::Android::VoiceSDKImpl::*)(::Meta::WitAi::Configuration::WitRequestOptions*, ::Meta::WitAi::Requests::VoiceServiceRequestEvents*)>(&Oculus::Voice::Bindings::Android::VoiceSDKImpl::Activate)> {
  static const MethodInfo* get() {
    static auto* requestOptions = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Configuration", "WitRequestOptions")->byval_arg;
    static auto* requestEvents = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Requests", "VoiceServiceRequestEvents")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Bindings::Android::VoiceSDKImpl*), "Activate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{requestOptions, requestEvents});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Bindings::Android::VoiceSDKImpl::ActivateImmediately
// Il2CppName: ActivateImmediately
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Requests::VoiceServiceRequest* (Oculus::Voice::Bindings::Android::VoiceSDKImpl::*)(::Meta::WitAi::Configuration::WitRequestOptions*, ::Meta::WitAi::Requests::VoiceServiceRequestEvents*)>(&Oculus::Voice::Bindings::Android::VoiceSDKImpl::ActivateImmediately)> {
  static const MethodInfo* get() {
    static auto* requestOptions = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Configuration", "WitRequestOptions")->byval_arg;
    static auto* requestEvents = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Requests", "VoiceServiceRequestEvents")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Bindings::Android::VoiceSDKImpl*), "ActivateImmediately", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{requestOptions, requestEvents});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Bindings::Android::VoiceSDKImpl::Deactivate
// Il2CppName: Deactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::Bindings::Android::VoiceSDKImpl::*)()>(&Oculus::Voice::Bindings::Android::VoiceSDKImpl::Deactivate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Bindings::Android::VoiceSDKImpl*), "Deactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Bindings::Android::VoiceSDKImpl::DeactivateAndAbortRequest
// Il2CppName: DeactivateAndAbortRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::Bindings::Android::VoiceSDKImpl::*)()>(&Oculus::Voice::Bindings::Android::VoiceSDKImpl::DeactivateAndAbortRequest)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Bindings::Android::VoiceSDKImpl*), "DeactivateAndAbortRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Bindings::Android::VoiceSDKImpl::DeactivateAndAbortRequest
// Il2CppName: DeactivateAndAbortRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::Bindings::Android::VoiceSDKImpl::*)(::Meta::WitAi::Requests::VoiceServiceRequest*)>(&Oculus::Voice::Bindings::Android::VoiceSDKImpl::DeactivateAndAbortRequest)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Requests", "VoiceServiceRequest")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Bindings::Android::VoiceSDKImpl*), "DeactivateAndAbortRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Bindings::Android::VoiceSDKImpl::OnServiceNotAvailable
// Il2CppName: OnServiceNotAvailable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::Bindings::Android::VoiceSDKImpl::*)(::StringW, ::StringW)>(&Oculus::Voice::Bindings::Android::VoiceSDKImpl::OnServiceNotAvailable)> {
  static const MethodInfo* get() {
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Bindings::Android::VoiceSDKImpl*), "OnServiceNotAvailable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{error, message});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Bindings::Android::VoiceSDKImpl::get_VoiceEvents
// Il2CppName: get_VoiceEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Events::VoiceEvents* (Oculus::Voice::Bindings::Android::VoiceSDKImpl::*)()>(&Oculus::Voice::Bindings::Android::VoiceSDKImpl::get_VoiceEvents)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Bindings::Android::VoiceSDKImpl*), "get_VoiceEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Bindings::Android::VoiceSDKImpl::set_VoiceEvents
// Il2CppName: set_VoiceEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::Bindings::Android::VoiceSDKImpl::*)(::Meta::WitAi::Events::VoiceEvents*)>(&Oculus::Voice::Bindings::Android::VoiceSDKImpl::set_VoiceEvents)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Events", "VoiceEvents")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Bindings::Android::VoiceSDKImpl*), "set_VoiceEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Bindings::Android::VoiceSDKImpl::get_TelemetryEvents
// Il2CppName: get_TelemetryEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Events::TelemetryEvents* (Oculus::Voice::Bindings::Android::VoiceSDKImpl::*)()>(&Oculus::Voice::Bindings::Android::VoiceSDKImpl::get_TelemetryEvents)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Bindings::Android::VoiceSDKImpl*), "get_TelemetryEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Bindings::Android::VoiceSDKImpl::set_TelemetryEvents
// Il2CppName: set_TelemetryEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::Bindings::Android::VoiceSDKImpl::*)(::Meta::WitAi::Events::TelemetryEvents*)>(&Oculus::Voice::Bindings::Android::VoiceSDKImpl::set_TelemetryEvents)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Events", "TelemetryEvents")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Bindings::Android::VoiceSDKImpl*), "set_TelemetryEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Bindings::Android::VoiceSDKImpl::GetRequest
// Il2CppName: GetRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Requests::VoiceServiceRequest* (Oculus::Voice::Bindings::Android::VoiceSDKImpl::*)(::Meta::WitAi::Configuration::WitRequestOptions*, ::Meta::WitAi::Requests::VoiceServiceRequestEvents*, ::Meta::Voice::NLPRequestInputType, bool)>(&Oculus::Voice::Bindings::Android::VoiceSDKImpl::GetRequest)> {
  static const MethodInfo* get() {
    static auto* requestOptions = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Configuration", "WitRequestOptions")->byval_arg;
    static auto* requestEvents = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Requests", "VoiceServiceRequestEvents")->byval_arg;
    static auto* inputType = &::il2cpp_utils::GetClassFromName("Meta.Voice", "NLPRequestInputType")->byval_arg;
    static auto* audioImmediate = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Bindings::Android::VoiceSDKImpl*), "GetRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{requestOptions, requestEvents, inputType, audioImmediate});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Bindings::Android::VoiceSDKImpl::OnRequestCanceled
// Il2CppName: OnRequestCanceled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::Bindings::Android::VoiceSDKImpl::*)(::Meta::WitAi::Requests::VoiceServiceRequest*)>(&Oculus::Voice::Bindings::Android::VoiceSDKImpl::OnRequestCanceled)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Requests", "VoiceServiceRequest")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Bindings::Android::VoiceSDKImpl*), "OnRequestCanceled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Bindings::Android::VoiceSDKImpl::OnRequestFailed
// Il2CppName: OnRequestFailed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::Bindings::Android::VoiceSDKImpl::*)(::Meta::WitAi::Requests::VoiceServiceRequest*)>(&Oculus::Voice::Bindings::Android::VoiceSDKImpl::OnRequestFailed)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Requests", "VoiceServiceRequest")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Bindings::Android::VoiceSDKImpl*), "OnRequestFailed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Bindings::Android::VoiceSDKImpl::OnRequestSuccess
// Il2CppName: OnRequestSuccess
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::Bindings::Android::VoiceSDKImpl::*)(::Meta::WitAi::Requests::VoiceServiceRequest*)>(&Oculus::Voice::Bindings::Android::VoiceSDKImpl::OnRequestSuccess)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Requests", "VoiceServiceRequest")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Bindings::Android::VoiceSDKImpl*), "OnRequestSuccess", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Bindings::Android::VoiceSDKImpl::OnRequestComplete
// Il2CppName: OnRequestComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::Bindings::Android::VoiceSDKImpl::*)(::Meta::WitAi::Requests::VoiceServiceRequest*)>(&Oculus::Voice::Bindings::Android::VoiceSDKImpl::OnRequestComplete)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Requests", "VoiceServiceRequest")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Bindings::Android::VoiceSDKImpl*), "OnRequestComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Bindings::Android::VoiceSDKImpl::Connect
// Il2CppName: Connect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::Bindings::Android::VoiceSDKImpl::*)(::StringW)>(&Oculus::Voice::Bindings::Android::VoiceSDKImpl::Connect)> {
  static const MethodInfo* get() {
    static auto* version = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Bindings::Android::VoiceSDKImpl*), "Connect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{version});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Bindings::Android::VoiceSDKImpl::Disconnect
// Il2CppName: Disconnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::Bindings::Android::VoiceSDKImpl::*)()>(&Oculus::Voice::Bindings::Android::VoiceSDKImpl::Disconnect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Bindings::Android::VoiceSDKImpl*), "Disconnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
