// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Oculus.Voice.Core.Bindings.Android.BaseAndroidConnectionImpl`1
#include "Oculus/Voice/Core/Bindings/Android/BaseAndroidConnectionImpl_1.hpp"
// Including type: Meta.WitAi.Dictation.IDictationService
#include "Meta/WitAi/Dictation/IDictationService.hpp"
// Including type: Oculus.Voice.Dictation.Bindings.Android.IServiceEvents
#include "Oculus/Voice/Dictation/Bindings/Android/IServiceEvents.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Voice::Dictation::Bindings::Android
namespace Oculus::Voice::Dictation::Bindings::Android {
  // Forward declaring type: PlatformDictationSDKBinding
  class PlatformDictationSDKBinding;
  // Forward declaring type: DictationListenerBinding
  class DictationListenerBinding;
}
// Forward declaring namespace: Meta::WitAi::Configuration
namespace Meta::WitAi::Configuration {
  // Forward declaring type: WitDictationRuntimeConfiguration
  class WitDictationRuntimeConfiguration;
  // Forward declaring type: WitRequestOptions
  class WitRequestOptions;
}
// Forward declaring namespace: Meta::WitAi::Interfaces
namespace Meta::WitAi::Interfaces {
  // Forward declaring type: ITranscriptionProvider
  class ITranscriptionProvider;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: Meta::WitAi::Dictation::Events
namespace Meta::WitAi::Dictation::Events {
  // Forward declaring type: DictationEvents
  class DictationEvents;
}
// Forward declaring namespace: Meta::WitAi::Events
namespace Meta::WitAi::Events {
  // Forward declaring type: TelemetryEvents
  class TelemetryEvents;
}
// Forward declaring namespace: Meta::WitAi::Requests
namespace Meta::WitAi::Requests {
  // Forward declaring type: VoiceServiceRequest
  class VoiceServiceRequest;
  // Forward declaring type: VoiceServiceRequestEvents
  class VoiceServiceRequestEvents;
}
// Completed forward declares
// Type namespace: Oculus.Voice.Dictation.Bindings.Android
namespace Oculus::Voice::Dictation::Bindings::Android {
  // Forward declaring type: PlatformDictationImpl
  class PlatformDictationImpl;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl*, "Oculus.Voice.Dictation.Bindings.Android", "PlatformDictationImpl");
// Type namespace: Oculus.Voice.Dictation.Bindings.Android
namespace Oculus::Voice::Dictation::Bindings::Android {
  // WARNING Size may be invalid!
  // Autogenerated type: Oculus.Voice.Dictation.Bindings.Android.PlatformDictationImpl
  // [TokenAttribute] Offset: FFFFFFFF
  class PlatformDictationImpl : public ::Oculus::Voice::Core::Bindings::Android::BaseAndroidConnectionImpl_1<::Oculus::Voice::Dictation::Bindings::Android::PlatformDictationSDKBinding*>/*, public ::Meta::WitAi::Dictation::IDictationService, public ::Oculus::Voice::Dictation::Bindings::Android::IServiceEvents*/ {
    public:
    public:
    // private readonly Meta.WitAi.Dictation.IDictationService _baseService
    // Size: 0x8
    // Offset: 0x28
    ::Meta::WitAi::Dictation::IDictationService* baseService;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::Dictation::IDictationService*) == 0x8);
    // private System.Boolean _serviceAvailable
    // Size: 0x1
    // Offset: 0x30
    bool serviceAvailable;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private Meta.WitAi.Configuration.WitDictationRuntimeConfiguration _dictationRuntimeConfiguration
    // Size: 0x8
    // Offset: 0x38
    ::Meta::WitAi::Configuration::WitDictationRuntimeConfiguration* dictationRuntimeConfiguration;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::Configuration::WitDictationRuntimeConfiguration*) == 0x8);
    // private Oculus.Voice.Dictation.Bindings.Android.DictationListenerBinding _listenerBinding
    // Size: 0x8
    // Offset: 0x40
    ::Oculus::Voice::Dictation::Bindings::Android::DictationListenerBinding* listenerBinding;
    // Field size check
    static_assert(sizeof(::Oculus::Voice::Dictation::Bindings::Android::DictationListenerBinding*) == 0x8);
    // private Meta.WitAi.Interfaces.ITranscriptionProvider <TranscriptionProvider>k__BackingField
    // Size: 0x8
    // Offset: 0x48
    ::Meta::WitAi::Interfaces::ITranscriptionProvider* TranscriptionProvider;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::Interfaces::ITranscriptionProvider*) == 0x8);
    // public System.Action OnServiceNotAvailableEvent
    // Size: 0x8
    // Offset: 0x50
    ::System::Action* OnServiceNotAvailableEvent;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Meta::WitAi::Dictation::IDictationService
    operator ::Meta::WitAi::Dictation::IDictationService() noexcept {
      return *reinterpret_cast<::Meta::WitAi::Dictation::IDictationService*>(this);
    }
    // Creating interface conversion operator: operator ::Oculus::Voice::Dictation::Bindings::Android::IServiceEvents
    operator ::Oculus::Voice::Dictation::Bindings::Android::IServiceEvents() noexcept {
      return *reinterpret_cast<::Oculus::Voice::Dictation::Bindings::Android::IServiceEvents*>(this);
    }
    // Get instance field reference: private readonly Meta.WitAi.Dictation.IDictationService _baseService
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::Dictation::IDictationService*& dyn__baseService();
    // Get instance field reference: private System.Boolean _serviceAvailable
    [[deprecated("Use field access instead!")]] bool& dyn__serviceAvailable();
    // Get instance field reference: private Meta.WitAi.Configuration.WitDictationRuntimeConfiguration _dictationRuntimeConfiguration
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::Configuration::WitDictationRuntimeConfiguration*& dyn__dictationRuntimeConfiguration();
    // Get instance field reference: private Oculus.Voice.Dictation.Bindings.Android.DictationListenerBinding _listenerBinding
    [[deprecated("Use field access instead!")]] ::Oculus::Voice::Dictation::Bindings::Android::DictationListenerBinding*& dyn__listenerBinding();
    // Get instance field reference: private Meta.WitAi.Interfaces.ITranscriptionProvider <TranscriptionProvider>k__BackingField
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::Interfaces::ITranscriptionProvider*& dyn_$TranscriptionProvider$k__BackingField();
    // Get instance field reference: public System.Action OnServiceNotAvailableEvent
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_OnServiceNotAvailableEvent();
    // public System.Void .ctor(Meta.WitAi.Dictation.IDictationService dictationService)
    // Offset: 0x571736C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PlatformDictationImpl* New_ctor(::Meta::WitAi::Dictation::IDictationService* dictationService) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PlatformDictationImpl*, creationType>(dictationService)));
    }
    // public System.Boolean get_PlatformSupportsDictation()
    // Offset: 0x57173F0
    bool get_PlatformSupportsDictation();
    // public System.Boolean get_Active()
    // Offset: 0x571A1FC
    bool get_Active();
    // public System.Boolean get_IsRequestActive()
    // Offset: 0x571A2E4
    bool get_IsRequestActive();
    // public System.Boolean get_MicActive()
    // Offset: 0x571A3CC
    bool get_MicActive();
    // public Meta.WitAi.Interfaces.ITranscriptionProvider get_TranscriptionProvider()
    // Offset: 0x571A3E4
    ::Meta::WitAi::Interfaces::ITranscriptionProvider* get_TranscriptionProvider();
    // public System.Void set_TranscriptionProvider(Meta.WitAi.Interfaces.ITranscriptionProvider value)
    // Offset: 0x571A3EC
    void set_TranscriptionProvider(::Meta::WitAi::Interfaces::ITranscriptionProvider* value);
    // public Meta.WitAi.Dictation.Events.DictationEvents get_DictationEvents()
    // Offset: 0x571A3F4
    ::Meta::WitAi::Dictation::Events::DictationEvents* get_DictationEvents();
    // public System.Void set_DictationEvents(Meta.WitAi.Dictation.Events.DictationEvents value)
    // Offset: 0x571A498
    void set_DictationEvents(::Meta::WitAi::Dictation::Events::DictationEvents* value);
    // public Meta.WitAi.Events.TelemetryEvents get_TelemetryEvents()
    // Offset: 0x571A544
    ::Meta::WitAi::Events::TelemetryEvents* get_TelemetryEvents();
    // public System.Void set_TelemetryEvents(Meta.WitAi.Events.TelemetryEvents value)
    // Offset: 0x571A5E8
    void set_TelemetryEvents(::Meta::WitAi::Events::TelemetryEvents* value);
    // public System.Void SetDictationRuntimeConfiguration(Meta.WitAi.Configuration.WitDictationRuntimeConfiguration configuration)
    // Offset: 0x571A854
    void SetDictationRuntimeConfiguration(::Meta::WitAi::Configuration::WitDictationRuntimeConfiguration* configuration);
    // private System.Void Activate()
    // Offset: 0x571A85C
    void Activate();
    // public Meta.WitAi.Requests.VoiceServiceRequest Activate(Meta.WitAi.Configuration.WitRequestOptions requestOptions, Meta.WitAi.Requests.VoiceServiceRequestEvents requestEvents)
    // Offset: 0x571A9B0
    ::Meta::WitAi::Requests::VoiceServiceRequest* Activate(::Meta::WitAi::Configuration::WitRequestOptions* requestOptions, ::Meta::WitAi::Requests::VoiceServiceRequestEvents* requestEvents);
    // public Meta.WitAi.Requests.VoiceServiceRequest ActivateImmediately(Meta.WitAi.Configuration.WitRequestOptions requestOptions, Meta.WitAi.Requests.VoiceServiceRequestEvents requestEvents)
    // Offset: 0x571A9C4
    ::Meta::WitAi::Requests::VoiceServiceRequest* ActivateImmediately(::Meta::WitAi::Configuration::WitRequestOptions* requestOptions, ::Meta::WitAi::Requests::VoiceServiceRequestEvents* requestEvents);
    // public System.Void Deactivate()
    // Offset: 0x571A9D8
    void Deactivate();
    // public System.Void Cancel()
    // Offset: 0x571AAAC
    void Cancel();
    // public System.Void OnServiceNotAvailable(System.String error, System.String message)
    // Offset: 0x571AAC4
    void OnServiceNotAvailable(::StringW error, ::StringW message);
    // public override System.Void Connect(System.String version)
    // Offset: 0x571A694
    // Implemented from: Oculus.Voice.Core.Bindings.Android.BaseAndroidConnectionImpl`1
    // Base method: System.Void BaseAndroidConnectionImpl_1::Connect(System.String version)
    void Connect(::StringW version);
    // public override System.Void Disconnect()
    // Offset: 0x571A80C
    // Implemented from: Oculus.Voice.Core.Bindings.Android.BaseAndroidConnectionImpl`1
    // Base method: System.Void BaseAndroidConnectionImpl_1::Disconnect()
    void Disconnect();
  }; // Oculus.Voice.Dictation.Bindings.Android.PlatformDictationImpl
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl::get_PlatformSupportsDictation
// Il2CppName: get_PlatformSupportsDictation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl::*)()>(&Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl::get_PlatformSupportsDictation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl*), "get_PlatformSupportsDictation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl::get_Active
// Il2CppName: get_Active
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl::*)()>(&Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl::get_Active)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl*), "get_Active", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl::get_IsRequestActive
// Il2CppName: get_IsRequestActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl::*)()>(&Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl::get_IsRequestActive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl*), "get_IsRequestActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl::get_MicActive
// Il2CppName: get_MicActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl::*)()>(&Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl::get_MicActive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl*), "get_MicActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl::get_TranscriptionProvider
// Il2CppName: get_TranscriptionProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Interfaces::ITranscriptionProvider* (Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl::*)()>(&Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl::get_TranscriptionProvider)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl*), "get_TranscriptionProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl::set_TranscriptionProvider
// Il2CppName: set_TranscriptionProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl::*)(::Meta::WitAi::Interfaces::ITranscriptionProvider*)>(&Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl::set_TranscriptionProvider)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Interfaces", "ITranscriptionProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl*), "set_TranscriptionProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl::get_DictationEvents
// Il2CppName: get_DictationEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Dictation::Events::DictationEvents* (Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl::*)()>(&Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl::get_DictationEvents)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl*), "get_DictationEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl::set_DictationEvents
// Il2CppName: set_DictationEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl::*)(::Meta::WitAi::Dictation::Events::DictationEvents*)>(&Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl::set_DictationEvents)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Dictation.Events", "DictationEvents")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl*), "set_DictationEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl::get_TelemetryEvents
// Il2CppName: get_TelemetryEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Events::TelemetryEvents* (Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl::*)()>(&Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl::get_TelemetryEvents)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl*), "get_TelemetryEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl::set_TelemetryEvents
// Il2CppName: set_TelemetryEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl::*)(::Meta::WitAi::Events::TelemetryEvents*)>(&Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl::set_TelemetryEvents)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Events", "TelemetryEvents")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl*), "set_TelemetryEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl::SetDictationRuntimeConfiguration
// Il2CppName: SetDictationRuntimeConfiguration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl::*)(::Meta::WitAi::Configuration::WitDictationRuntimeConfiguration*)>(&Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl::SetDictationRuntimeConfiguration)> {
  static const MethodInfo* get() {
    static auto* configuration = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Configuration", "WitDictationRuntimeConfiguration")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl*), "SetDictationRuntimeConfiguration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{configuration});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl::Activate
// Il2CppName: Activate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl::*)()>(&Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl::Activate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl*), "Activate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl::Activate
// Il2CppName: Activate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Requests::VoiceServiceRequest* (Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl::*)(::Meta::WitAi::Configuration::WitRequestOptions*, ::Meta::WitAi::Requests::VoiceServiceRequestEvents*)>(&Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl::Activate)> {
  static const MethodInfo* get() {
    static auto* requestOptions = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Configuration", "WitRequestOptions")->byval_arg;
    static auto* requestEvents = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Requests", "VoiceServiceRequestEvents")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl*), "Activate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{requestOptions, requestEvents});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl::ActivateImmediately
// Il2CppName: ActivateImmediately
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Requests::VoiceServiceRequest* (Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl::*)(::Meta::WitAi::Configuration::WitRequestOptions*, ::Meta::WitAi::Requests::VoiceServiceRequestEvents*)>(&Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl::ActivateImmediately)> {
  static const MethodInfo* get() {
    static auto* requestOptions = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Configuration", "WitRequestOptions")->byval_arg;
    static auto* requestEvents = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Requests", "VoiceServiceRequestEvents")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl*), "ActivateImmediately", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{requestOptions, requestEvents});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl::Deactivate
// Il2CppName: Deactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl::*)()>(&Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl::Deactivate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl*), "Deactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl::Cancel
// Il2CppName: Cancel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl::*)()>(&Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl::Cancel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl*), "Cancel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl::OnServiceNotAvailable
// Il2CppName: OnServiceNotAvailable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl::*)(::StringW, ::StringW)>(&Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl::OnServiceNotAvailable)> {
  static const MethodInfo* get() {
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl*), "OnServiceNotAvailable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{error, message});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl::Connect
// Il2CppName: Connect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl::*)(::StringW)>(&Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl::Connect)> {
  static const MethodInfo* get() {
    static auto* version = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl*), "Connect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{version});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl::Disconnect
// Il2CppName: Disconnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl::*)()>(&Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl::Disconnect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Dictation::Bindings::Android::PlatformDictationImpl*), "Disconnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
