// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.AndroidJavaProxy
#include "UnityEngine/AndroidJavaProxy.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Meta::WitAi::Dictation
namespace Meta::WitAi::Dictation {
  // Forward declaring type: IDictationService
  class IDictationService;
}
// Forward declaring namespace: Oculus::Voice::Dictation::Bindings::Android
namespace Oculus::Voice::Dictation::Bindings::Android {
  // Forward declaring type: IServiceEvents
  class IServiceEvents;
}
// Forward declaring namespace: Meta::WitAi::Dictation::Events
namespace Meta::WitAi::Dictation::Events {
  // Forward declaring type: DictationEvents
  class DictationEvents;
}
// Completed forward declares
// Type namespace: Oculus.Voice.Dictation.Bindings.Android
namespace Oculus::Voice::Dictation::Bindings::Android {
  // Forward declaring type: DictationListenerBinding
  class DictationListenerBinding;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Voice::Dictation::Bindings::Android::DictationListenerBinding);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Voice::Dictation::Bindings::Android::DictationListenerBinding*, "Oculus.Voice.Dictation.Bindings.Android", "DictationListenerBinding");
// Type namespace: Oculus.Voice.Dictation.Bindings.Android
namespace Oculus::Voice::Dictation::Bindings::Android {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Voice.Dictation.Bindings.Android.DictationListenerBinding
  // [TokenAttribute] Offset: FFFFFFFF
  class DictationListenerBinding : public ::UnityEngine::AndroidJavaProxy {
    public:
    public:
    // private Meta.WitAi.Dictation.IDictationService _dictationService
    // Size: 0x8
    // Offset: 0x20
    ::Meta::WitAi::Dictation::IDictationService* dictationService;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::Dictation::IDictationService*) == 0x8);
    // private Oculus.Voice.Dictation.Bindings.Android.IServiceEvents _serviceEvents
    // Size: 0x8
    // Offset: 0x28
    ::Oculus::Voice::Dictation::Bindings::Android::IServiceEvents* serviceEvents;
    // Field size check
    static_assert(sizeof(::Oculus::Voice::Dictation::Bindings::Android::IServiceEvents*) == 0x8);
    public:
    // Get instance field reference: private Meta.WitAi.Dictation.IDictationService _dictationService
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::Dictation::IDictationService*& dyn__dictationService();
    // Get instance field reference: private Oculus.Voice.Dictation.Bindings.Android.IServiceEvents _serviceEvents
    [[deprecated("Use field access instead!")]] ::Oculus::Voice::Dictation::Bindings::Android::IServiceEvents*& dyn__serviceEvents();
    // private Meta.WitAi.Dictation.Events.DictationEvents get_DictationEvents()
    // Offset: 0x5719BF4
    ::Meta::WitAi::Dictation::Events::DictationEvents* get_DictationEvents();
    // public System.Void .ctor(Meta.WitAi.Dictation.IDictationService dictationService, Oculus.Voice.Dictation.Bindings.Android.IServiceEvents serviceEvents)
    // Offset: 0x5719C98
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DictationListenerBinding* New_ctor(::Meta::WitAi::Dictation::IDictationService* dictationService, ::Oculus::Voice::Dictation::Bindings::Android::IServiceEvents* serviceEvents) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Voice::Dictation::Bindings::Android::DictationListenerBinding::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DictationListenerBinding*, creationType>(dictationService, serviceEvents)));
    }
    // public System.Void onStart(System.String sessionId)
    // Offset: 0x5719D38
    void onStart(::StringW sessionId);
    // public System.Void onMicAudioLevel(System.String sessionId, System.Int32 micLevel)
    // Offset: 0x5719DD8
    void onMicAudioLevel(::StringW sessionId, int micLevel);
    // public System.Void onPartialTranscription(System.String sessionId, System.String transcription)
    // Offset: 0x5719E58
    void onPartialTranscription(::StringW sessionId, ::StringW transcription);
    // public System.Void onFinalTranscription(System.String sessionId, System.String transcription)
    // Offset: 0x5719EC8
    void onFinalTranscription(::StringW sessionId, ::StringW transcription);
    // public System.Void onError(System.String sessionId, System.String errorType, System.String errorMessage)
    // Offset: 0x5719F38
    void onError(::StringW sessionId, ::StringW errorType, ::StringW errorMessage);
    // public System.Void onStopped(System.String sessionId)
    // Offset: 0x5719FBC
    void onStopped(::StringW sessionId);
    // public System.Void onServiceNotAvailable(System.String error, System.String message)
    // Offset: 0x571A054
    void onServiceNotAvailable(::StringW error, ::StringW message);
  }; // Oculus.Voice.Dictation.Bindings.Android.DictationListenerBinding
  #pragma pack(pop)
  static check_size<sizeof(DictationListenerBinding), 40 + sizeof(::Oculus::Voice::Dictation::Bindings::Android::IServiceEvents*)> __Oculus_Voice_Dictation_Bindings_Android_DictationListenerBindingSizeCheck;
  static_assert(sizeof(DictationListenerBinding) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Voice::Dictation::Bindings::Android::DictationListenerBinding::get_DictationEvents
// Il2CppName: get_DictationEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Dictation::Events::DictationEvents* (Oculus::Voice::Dictation::Bindings::Android::DictationListenerBinding::*)()>(&Oculus::Voice::Dictation::Bindings::Android::DictationListenerBinding::get_DictationEvents)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Dictation::Bindings::Android::DictationListenerBinding*), "get_DictationEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Dictation::Bindings::Android::DictationListenerBinding::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Voice::Dictation::Bindings::Android::DictationListenerBinding::onStart
// Il2CppName: onStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::Dictation::Bindings::Android::DictationListenerBinding::*)(::StringW)>(&Oculus::Voice::Dictation::Bindings::Android::DictationListenerBinding::onStart)> {
  static const MethodInfo* get() {
    static auto* sessionId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Dictation::Bindings::Android::DictationListenerBinding*), "onStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sessionId});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Dictation::Bindings::Android::DictationListenerBinding::onMicAudioLevel
// Il2CppName: onMicAudioLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::Dictation::Bindings::Android::DictationListenerBinding::*)(::StringW, int)>(&Oculus::Voice::Dictation::Bindings::Android::DictationListenerBinding::onMicAudioLevel)> {
  static const MethodInfo* get() {
    static auto* sessionId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* micLevel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Dictation::Bindings::Android::DictationListenerBinding*), "onMicAudioLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sessionId, micLevel});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Dictation::Bindings::Android::DictationListenerBinding::onPartialTranscription
// Il2CppName: onPartialTranscription
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::Dictation::Bindings::Android::DictationListenerBinding::*)(::StringW, ::StringW)>(&Oculus::Voice::Dictation::Bindings::Android::DictationListenerBinding::onPartialTranscription)> {
  static const MethodInfo* get() {
    static auto* sessionId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* transcription = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Dictation::Bindings::Android::DictationListenerBinding*), "onPartialTranscription", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sessionId, transcription});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Dictation::Bindings::Android::DictationListenerBinding::onFinalTranscription
// Il2CppName: onFinalTranscription
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::Dictation::Bindings::Android::DictationListenerBinding::*)(::StringW, ::StringW)>(&Oculus::Voice::Dictation::Bindings::Android::DictationListenerBinding::onFinalTranscription)> {
  static const MethodInfo* get() {
    static auto* sessionId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* transcription = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Dictation::Bindings::Android::DictationListenerBinding*), "onFinalTranscription", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sessionId, transcription});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Dictation::Bindings::Android::DictationListenerBinding::onError
// Il2CppName: onError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::Dictation::Bindings::Android::DictationListenerBinding::*)(::StringW, ::StringW, ::StringW)>(&Oculus::Voice::Dictation::Bindings::Android::DictationListenerBinding::onError)> {
  static const MethodInfo* get() {
    static auto* sessionId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* errorType = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* errorMessage = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Dictation::Bindings::Android::DictationListenerBinding*), "onError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sessionId, errorType, errorMessage});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Dictation::Bindings::Android::DictationListenerBinding::onStopped
// Il2CppName: onStopped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::Dictation::Bindings::Android::DictationListenerBinding::*)(::StringW)>(&Oculus::Voice::Dictation::Bindings::Android::DictationListenerBinding::onStopped)> {
  static const MethodInfo* get() {
    static auto* sessionId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Dictation::Bindings::Android::DictationListenerBinding*), "onStopped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sessionId});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Dictation::Bindings::Android::DictationListenerBinding::onServiceNotAvailable
// Il2CppName: onServiceNotAvailable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::Dictation::Bindings::Android::DictationListenerBinding::*)(::StringW, ::StringW)>(&Oculus::Voice::Dictation::Bindings::Android::DictationListenerBinding::onServiceNotAvailable)> {
  static const MethodInfo* get() {
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Dictation::Bindings::Android::DictationListenerBinding*), "onServiceNotAvailable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{error, message});
  }
};
