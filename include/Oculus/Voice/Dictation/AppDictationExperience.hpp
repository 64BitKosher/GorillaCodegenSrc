// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Meta.WitAi.Dictation.DictationService
#include "Meta/WitAi/Dictation/DictationService.hpp"
// Including type: Meta.WitAi.IWitRuntimeConfigProvider
#include "Meta/WitAi/IWitRuntimeConfigProvider.hpp"
// Including type: Meta.WitAi.Interfaces.IWitConfigurationProvider
#include "Meta/WitAi/Interfaces/IWitConfigurationProvider.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Meta::WitAi::Configuration
namespace Meta::WitAi::Configuration {
  // Forward declaring type: WitDictationRuntimeConfiguration
  class WitDictationRuntimeConfiguration;
  // Forward declaring type: WitRequestOptions
  class WitRequestOptions;
  // Forward declaring type: WitRuntimeConfiguration
  class WitRuntimeConfiguration;
}
// Forward declaring namespace: Meta::WitAi::Dictation
namespace Meta::WitAi::Dictation {
  // Skipping declaration: IDictationService because it is already included!
}
// Forward declaring namespace: Oculus::Voice::Core::Bindings::Interfaces
namespace Oculus::Voice::Core::Bindings::Interfaces {
  // Forward declaring type: IVoiceSDKLogger
  class IVoiceSDKLogger;
}
// Forward declaring namespace: Meta::WitAi::Dictation::Data
namespace Meta::WitAi::Dictation::Data {
  // Forward declaring type: DictationSession
  class DictationSession;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: Meta::WitAi::Data::Configuration
namespace Meta::WitAi::Data::Configuration {
  // Forward declaring type: WitConfiguration
  class WitConfiguration;
}
// Forward declaring namespace: Meta::WitAi::Requests
namespace Meta::WitAi::Requests {
  // Forward declaring type: VoiceServiceRequest
  class VoiceServiceRequest;
  // Forward declaring type: VoiceServiceRequestEvents
  class VoiceServiceRequestEvents;
}
// Forward declaring namespace: Meta::WitAi::Interfaces
namespace Meta::WitAi::Interfaces {
  // Forward declaring type: ITranscriptionProvider
  class ITranscriptionProvider;
}
// Completed forward declares
// Type namespace: Oculus.Voice.Dictation
namespace Oculus::Voice::Dictation {
  // Forward declaring type: AppDictationExperience
  class AppDictationExperience;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Voice::Dictation::AppDictationExperience);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Voice::Dictation::AppDictationExperience*, "Oculus.Voice.Dictation", "AppDictationExperience");
// Type namespace: Oculus.Voice.Dictation
namespace Oculus::Voice::Dictation {
  // Size: 0x70
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Voice.Dictation.AppDictationExperience
  // [TokenAttribute] Offset: FFFFFFFF
  class AppDictationExperience : public ::Meta::WitAi::Dictation::DictationService/*, public ::Meta::WitAi::IWitRuntimeConfigProvider, public ::Meta::WitAi::Interfaces::IWitConfigurationProvider*/ {
    public:
    public:
    // private Meta.WitAi.Configuration.WitDictationRuntimeConfiguration runtimeConfiguration
    // Size: 0x8
    // Offset: 0x30
    ::Meta::WitAi::Configuration::WitDictationRuntimeConfiguration* runtimeConfiguration;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::Configuration::WitDictationRuntimeConfiguration*) == 0x8);
    // private System.Boolean usePlatformServices
    // Size: 0x1
    // Offset: 0x38
    bool usePlatformServices;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean doNotFallbackToWit
    // Size: 0x1
    // Offset: 0x39
    bool doNotFallbackToWit;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean enableConsoleLogging
    // Size: 0x1
    // Offset: 0x3A
    bool enableConsoleLogging;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: enableConsoleLogging and: dictationServiceImpl
    char __padding3[0x5] = {};
    // private Meta.WitAi.Dictation.IDictationService _dictationServiceImpl
    // Size: 0x8
    // Offset: 0x40
    ::Meta::WitAi::Dictation::IDictationService* dictationServiceImpl;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::Dictation::IDictationService*) == 0x8);
    // private Oculus.Voice.Core.Bindings.Interfaces.IVoiceSDKLogger _voiceSDKLogger
    // Size: 0x8
    // Offset: 0x48
    ::Oculus::Voice::Core::Bindings::Interfaces::IVoiceSDKLogger* voiceSDKLogger;
    // Field size check
    static_assert(sizeof(::Oculus::Voice::Core::Bindings::Interfaces::IVoiceSDKLogger*) == 0x8);
    // private System.Boolean _isActive
    // Size: 0x1
    // Offset: 0x50
    bool isActive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isActive and: activeSession
    char __padding6[0x7] = {};
    // private Meta.WitAi.Dictation.Data.DictationSession _activeSession
    // Size: 0x8
    // Offset: 0x58
    ::Meta::WitAi::Dictation::Data::DictationSession* activeSession;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::Dictation::Data::DictationSession*) == 0x8);
    // private Meta.WitAi.Configuration.WitRequestOptions _activeRequestOptions
    // Size: 0x8
    // Offset: 0x60
    ::Meta::WitAi::Configuration::WitRequestOptions* activeRequestOptions;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::Configuration::WitRequestOptions*) == 0x8);
    // private System.Action OnInitialized
    // Size: 0x8
    // Offset: 0x68
    ::System::Action* OnInitialized;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Meta::WitAi::IWitRuntimeConfigProvider
    operator ::Meta::WitAi::IWitRuntimeConfigProvider() noexcept {
      return *reinterpret_cast<::Meta::WitAi::IWitRuntimeConfigProvider*>(this);
    }
    // Creating interface conversion operator: operator ::Meta::WitAi::Interfaces::IWitConfigurationProvider
    operator ::Meta::WitAi::Interfaces::IWitConfigurationProvider() noexcept {
      return *reinterpret_cast<::Meta::WitAi::Interfaces::IWitConfigurationProvider*>(this);
    }
    // Get instance field reference: private Meta.WitAi.Configuration.WitDictationRuntimeConfiguration runtimeConfiguration
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::Configuration::WitDictationRuntimeConfiguration*& dyn_runtimeConfiguration();
    // Get instance field reference: private System.Boolean usePlatformServices
    [[deprecated("Use field access instead!")]] bool& dyn_usePlatformServices();
    // Get instance field reference: private System.Boolean doNotFallbackToWit
    [[deprecated("Use field access instead!")]] bool& dyn_doNotFallbackToWit();
    // Get instance field reference: private System.Boolean enableConsoleLogging
    [[deprecated("Use field access instead!")]] bool& dyn_enableConsoleLogging();
    // Get instance field reference: private Meta.WitAi.Dictation.IDictationService _dictationServiceImpl
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::Dictation::IDictationService*& dyn__dictationServiceImpl();
    // Get instance field reference: private Oculus.Voice.Core.Bindings.Interfaces.IVoiceSDKLogger _voiceSDKLogger
    [[deprecated("Use field access instead!")]] ::Oculus::Voice::Core::Bindings::Interfaces::IVoiceSDKLogger*& dyn__voiceSDKLogger();
    // Get instance field reference: private System.Boolean _isActive
    [[deprecated("Use field access instead!")]] bool& dyn__isActive();
    // Get instance field reference: private Meta.WitAi.Dictation.Data.DictationSession _activeSession
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::Dictation::Data::DictationSession*& dyn__activeSession();
    // Get instance field reference: private Meta.WitAi.Configuration.WitRequestOptions _activeRequestOptions
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::Configuration::WitRequestOptions*& dyn__activeRequestOptions();
    // Get instance field reference: private System.Action OnInitialized
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_OnInitialized();
    // public Meta.WitAi.Configuration.WitRuntimeConfiguration get_RuntimeConfiguration()
    // Offset: 0x5716A28
    ::Meta::WitAi::Configuration::WitRuntimeConfiguration* get_RuntimeConfiguration();
    // public Meta.WitAi.Configuration.WitDictationRuntimeConfiguration get_RuntimeDictationConfiguration()
    // Offset: 0x5716A30
    ::Meta::WitAi::Configuration::WitDictationRuntimeConfiguration* get_RuntimeDictationConfiguration();
    // public System.Void set_RuntimeDictationConfiguration(Meta.WitAi.Configuration.WitDictationRuntimeConfiguration value)
    // Offset: 0x5716A38
    void set_RuntimeDictationConfiguration(::Meta::WitAi::Configuration::WitDictationRuntimeConfiguration* value);
    // public Meta.WitAi.Data.Configuration.WitConfiguration get_Configuration()
    // Offset: 0x5716A40
    ::Meta::WitAi::Data::Configuration::WitConfiguration* get_Configuration();
    // public Meta.WitAi.Dictation.Data.DictationSession get_ActiveSession()
    // Offset: 0x5716A58
    ::Meta::WitAi::Dictation::Data::DictationSession* get_ActiveSession();
    // public Meta.WitAi.Configuration.WitRequestOptions get_ActiveRequestOptions()
    // Offset: 0x5716A60
    ::Meta::WitAi::Configuration::WitRequestOptions* get_ActiveRequestOptions();
    // public System.Void add_OnInitialized(System.Action value)
    // Offset: 0x5716A68
    void add_OnInitialized(::System::Action* value);
    // public System.Void remove_OnInitialized(System.Action value)
    // Offset: 0x5716B04
    void remove_OnInitialized(::System::Action* value);
    // static private System.String get_PACKAGE_VERSION()
    // Offset: 0x5716BA0
    static ::StringW get_PACKAGE_VERSION();
    // public System.Boolean get_HasPlatformIntegrations()
    // Offset: 0x5716BF0
    bool get_HasPlatformIntegrations();
    // public System.Boolean get_UsePlatformIntegrations()
    // Offset: 0x5716C74
    bool get_UsePlatformIntegrations();
    // public System.Void set_UsePlatformIntegrations(System.Boolean value)
    // Offset: 0x5716C7C
    void set_UsePlatformIntegrations(bool value);
    // public System.Boolean get_DoNotFallbackToWit()
    // Offset: 0x5717358
    bool get_DoNotFallbackToWit();
    // public System.Void set_DoNotFallbackToWit(System.Boolean value)
    // Offset: 0x5717360
    void set_DoNotFallbackToWit(bool value);
    // private System.Void InitDictation()
    // Offset: 0x5716D50
    void InitDictation();
    // private System.Void OnPlatformServiceNotAvailable()
    // Offset: 0x5717428
    void OnPlatformServiceNotAvailable();
    // private System.Void OnDictationServiceNotAvailable()
    // Offset: 0x57176F8
    void OnDictationServiceNotAvailable();
    // private System.Void RevertToWitDictation()
    // Offset: 0x5717524
    void RevertToWitDictation();
    // public System.Void Toggle()
    // Offset: 0x5718460
    void Toggle();
    // private System.Void OnRequestInit(Meta.WitAi.Requests.VoiceServiceRequest request)
    // Offset: 0x5718948
    void OnRequestInit(::Meta::WitAi::Requests::VoiceServiceRequest* request);
    // private System.Void OnStarted()
    // Offset: 0x5718E2C
    void OnStarted();
    // private System.Void OnStopped()
    // Offset: 0x5718EEC
    void OnStopped();
    // private System.Void OnDictationSessionStarted(Meta.WitAi.Dictation.Data.DictationSession session)
    // Offset: 0x5718FE8
    void OnDictationSessionStarted(::Meta::WitAi::Dictation::Data::DictationSession* session);
    // private System.Void OnAudioDurationTrackerFinished(System.Int64 timestamp, System.Double audioDuration)
    // Offset: 0x5719114
    void OnAudioDurationTrackerFinished(int64_t timestamp, double audioDuration);
    // private System.Void OnPartialTranscription(System.String text)
    // Offset: 0x57192C8
    void OnPartialTranscription(::StringW text);
    // private System.Void OnFullTranscription(System.String text)
    // Offset: 0x571936C
    void OnFullTranscription(::StringW text);
    // private System.Void OnComplete(Meta.WitAi.Requests.VoiceServiceRequest request)
    // Offset: 0x571942C
    void OnComplete(::Meta::WitAi::Requests::VoiceServiceRequest* request);
    // private System.Void CleanupSession()
    // Offset: 0x5718918
    void CleanupSession();
    // public System.Void .ctor()
    // Offset: 0x57198B0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AppDictationExperience* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Voice::Dictation::AppDictationExperience::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AppDictationExperience*, creationType>()));
    }
    // private System.Void <OnEnable>b__37_0(System.String e)
    // Offset: 0x57198B8
    void $OnEnable$b__37_0(::StringW e);
    // protected override System.Void OnEnable()
    // Offset: 0x57177BC
    // Implemented from: Meta.WitAi.Dictation.DictationService
    // Base method: System.Void DictationService::OnEnable()
    void OnEnable();
    // protected override System.Void OnDisable()
    // Offset: 0x5717C10
    // Implemented from: Meta.WitAi.Dictation.DictationService
    // Base method: System.Void DictationService::OnDisable()
    void OnDisable();
    // public override System.Boolean get_Active()
    // Offset: 0x57180C4
    // Implemented from: Meta.WitAi.Dictation.DictationService
    // Base method: System.Boolean DictationService::get_Active()
    bool get_Active();
    // public override System.Boolean get_IsRequestActive()
    // Offset: 0x5718170
    // Implemented from: Meta.WitAi.Dictation.DictationService
    // Base method: System.Boolean DictationService::get_IsRequestActive()
    bool get_IsRequestActive();
    // public override Meta.WitAi.Interfaces.ITranscriptionProvider get_TranscriptionProvider()
    // Offset: 0x5718220
    // Implemented from: Meta.WitAi.Dictation.DictationService
    // Base method: Meta.WitAi.Interfaces.ITranscriptionProvider DictationService::get_TranscriptionProvider()
    ::Meta::WitAi::Interfaces::ITranscriptionProvider* get_TranscriptionProvider();
    // public override System.Void set_TranscriptionProvider(Meta.WitAi.Interfaces.ITranscriptionProvider value)
    // Offset: 0x57182C4
    // Implemented from: Meta.WitAi.Dictation.DictationService
    // Base method: System.Void DictationService::set_TranscriptionProvider(Meta.WitAi.Interfaces.ITranscriptionProvider value)
    void set_TranscriptionProvider(::Meta::WitAi::Interfaces::ITranscriptionProvider* value);
    // public override System.Boolean get_MicActive()
    // Offset: 0x5718370
    // Implemented from: Meta.WitAi.Dictation.DictationService
    // Base method: System.Boolean DictationService::get_MicActive()
    bool get_MicActive();
    // protected override System.Boolean get_ShouldSendMicData()
    // Offset: 0x5718420
    // Implemented from: Meta.WitAi.Dictation.DictationService
    // Base method: System.Boolean DictationService::get_ShouldSendMicData()
    bool get_ShouldSendMicData();
    // public override Meta.WitAi.Requests.VoiceServiceRequest Activate(Meta.WitAi.Configuration.WitRequestOptions requestOptions, Meta.WitAi.Requests.VoiceServiceRequestEvents requestEvents)
    // Offset: 0x57184A4
    // Implemented from: Meta.WitAi.Dictation.DictationService
    // Base method: Meta.WitAi.Requests.VoiceServiceRequest DictationService::Activate(Meta.WitAi.Configuration.WitRequestOptions requestOptions, Meta.WitAi.Requests.VoiceServiceRequestEvents requestEvents)
    ::Meta::WitAi::Requests::VoiceServiceRequest* Activate(::Meta::WitAi::Configuration::WitRequestOptions* requestOptions, ::Meta::WitAi::Requests::VoiceServiceRequestEvents* requestEvents);
    // public override Meta.WitAi.Requests.VoiceServiceRequest ActivateImmediately(Meta.WitAi.Configuration.WitRequestOptions requestOptions, Meta.WitAi.Requests.VoiceServiceRequestEvents requestEvents)
    // Offset: 0x5718618
    // Implemented from: Meta.WitAi.Dictation.DictationService
    // Base method: Meta.WitAi.Requests.VoiceServiceRequest DictationService::ActivateImmediately(Meta.WitAi.Configuration.WitRequestOptions requestOptions, Meta.WitAi.Requests.VoiceServiceRequestEvents requestEvents)
    ::Meta::WitAi::Requests::VoiceServiceRequest* ActivateImmediately(::Meta::WitAi::Configuration::WitRequestOptions* requestOptions, ::Meta::WitAi::Requests::VoiceServiceRequestEvents* requestEvents);
    // public override System.Void Deactivate()
    // Offset: 0x571878C
    // Implemented from: Meta.WitAi.Dictation.DictationService
    // Base method: System.Void DictationService::Deactivate()
    void Deactivate();
    // public override System.Void Cancel()
    // Offset: 0x5718840
    // Implemented from: Meta.WitAi.Dictation.DictationService
    // Base method: System.Void DictationService::Cancel()
    void Cancel();
  }; // Oculus.Voice.Dictation.AppDictationExperience
  #pragma pack(pop)
  static check_size<sizeof(AppDictationExperience), 104 + sizeof(::System::Action*)> __Oculus_Voice_Dictation_AppDictationExperienceSizeCheck;
  static_assert(sizeof(AppDictationExperience) == 0x70);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Voice::Dictation::AppDictationExperience::get_RuntimeConfiguration
// Il2CppName: get_RuntimeConfiguration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Configuration::WitRuntimeConfiguration* (Oculus::Voice::Dictation::AppDictationExperience::*)()>(&Oculus::Voice::Dictation::AppDictationExperience::get_RuntimeConfiguration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Dictation::AppDictationExperience*), "get_RuntimeConfiguration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Dictation::AppDictationExperience::get_RuntimeDictationConfiguration
// Il2CppName: get_RuntimeDictationConfiguration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Configuration::WitDictationRuntimeConfiguration* (Oculus::Voice::Dictation::AppDictationExperience::*)()>(&Oculus::Voice::Dictation::AppDictationExperience::get_RuntimeDictationConfiguration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Dictation::AppDictationExperience*), "get_RuntimeDictationConfiguration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Dictation::AppDictationExperience::set_RuntimeDictationConfiguration
// Il2CppName: set_RuntimeDictationConfiguration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::Dictation::AppDictationExperience::*)(::Meta::WitAi::Configuration::WitDictationRuntimeConfiguration*)>(&Oculus::Voice::Dictation::AppDictationExperience::set_RuntimeDictationConfiguration)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Configuration", "WitDictationRuntimeConfiguration")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Dictation::AppDictationExperience*), "set_RuntimeDictationConfiguration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Dictation::AppDictationExperience::get_Configuration
// Il2CppName: get_Configuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Data::Configuration::WitConfiguration* (Oculus::Voice::Dictation::AppDictationExperience::*)()>(&Oculus::Voice::Dictation::AppDictationExperience::get_Configuration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Dictation::AppDictationExperience*), "get_Configuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Dictation::AppDictationExperience::get_ActiveSession
// Il2CppName: get_ActiveSession
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Dictation::Data::DictationSession* (Oculus::Voice::Dictation::AppDictationExperience::*)()>(&Oculus::Voice::Dictation::AppDictationExperience::get_ActiveSession)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Dictation::AppDictationExperience*), "get_ActiveSession", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Dictation::AppDictationExperience::get_ActiveRequestOptions
// Il2CppName: get_ActiveRequestOptions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Configuration::WitRequestOptions* (Oculus::Voice::Dictation::AppDictationExperience::*)()>(&Oculus::Voice::Dictation::AppDictationExperience::get_ActiveRequestOptions)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Dictation::AppDictationExperience*), "get_ActiveRequestOptions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Dictation::AppDictationExperience::add_OnInitialized
// Il2CppName: add_OnInitialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::Dictation::AppDictationExperience::*)(::System::Action*)>(&Oculus::Voice::Dictation::AppDictationExperience::add_OnInitialized)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Dictation::AppDictationExperience*), "add_OnInitialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Dictation::AppDictationExperience::remove_OnInitialized
// Il2CppName: remove_OnInitialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::Dictation::AppDictationExperience::*)(::System::Action*)>(&Oculus::Voice::Dictation::AppDictationExperience::remove_OnInitialized)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Dictation::AppDictationExperience*), "remove_OnInitialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Dictation::AppDictationExperience::get_PACKAGE_VERSION
// Il2CppName: get_PACKAGE_VERSION
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)()>(&Oculus::Voice::Dictation::AppDictationExperience::get_PACKAGE_VERSION)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Dictation::AppDictationExperience*), "get_PACKAGE_VERSION", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Dictation::AppDictationExperience::get_HasPlatformIntegrations
// Il2CppName: get_HasPlatformIntegrations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Voice::Dictation::AppDictationExperience::*)()>(&Oculus::Voice::Dictation::AppDictationExperience::get_HasPlatformIntegrations)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Dictation::AppDictationExperience*), "get_HasPlatformIntegrations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Dictation::AppDictationExperience::get_UsePlatformIntegrations
// Il2CppName: get_UsePlatformIntegrations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Voice::Dictation::AppDictationExperience::*)()>(&Oculus::Voice::Dictation::AppDictationExperience::get_UsePlatformIntegrations)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Dictation::AppDictationExperience*), "get_UsePlatformIntegrations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Dictation::AppDictationExperience::set_UsePlatformIntegrations
// Il2CppName: set_UsePlatformIntegrations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::Dictation::AppDictationExperience::*)(bool)>(&Oculus::Voice::Dictation::AppDictationExperience::set_UsePlatformIntegrations)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Dictation::AppDictationExperience*), "set_UsePlatformIntegrations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Dictation::AppDictationExperience::get_DoNotFallbackToWit
// Il2CppName: get_DoNotFallbackToWit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Voice::Dictation::AppDictationExperience::*)()>(&Oculus::Voice::Dictation::AppDictationExperience::get_DoNotFallbackToWit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Dictation::AppDictationExperience*), "get_DoNotFallbackToWit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Dictation::AppDictationExperience::set_DoNotFallbackToWit
// Il2CppName: set_DoNotFallbackToWit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::Dictation::AppDictationExperience::*)(bool)>(&Oculus::Voice::Dictation::AppDictationExperience::set_DoNotFallbackToWit)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Dictation::AppDictationExperience*), "set_DoNotFallbackToWit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Dictation::AppDictationExperience::InitDictation
// Il2CppName: InitDictation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::Dictation::AppDictationExperience::*)()>(&Oculus::Voice::Dictation::AppDictationExperience::InitDictation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Dictation::AppDictationExperience*), "InitDictation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Dictation::AppDictationExperience::OnPlatformServiceNotAvailable
// Il2CppName: OnPlatformServiceNotAvailable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::Dictation::AppDictationExperience::*)()>(&Oculus::Voice::Dictation::AppDictationExperience::OnPlatformServiceNotAvailable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Dictation::AppDictationExperience*), "OnPlatformServiceNotAvailable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Dictation::AppDictationExperience::OnDictationServiceNotAvailable
// Il2CppName: OnDictationServiceNotAvailable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::Dictation::AppDictationExperience::*)()>(&Oculus::Voice::Dictation::AppDictationExperience::OnDictationServiceNotAvailable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Dictation::AppDictationExperience*), "OnDictationServiceNotAvailable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Dictation::AppDictationExperience::RevertToWitDictation
// Il2CppName: RevertToWitDictation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::Dictation::AppDictationExperience::*)()>(&Oculus::Voice::Dictation::AppDictationExperience::RevertToWitDictation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Dictation::AppDictationExperience*), "RevertToWitDictation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Dictation::AppDictationExperience::Toggle
// Il2CppName: Toggle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::Dictation::AppDictationExperience::*)()>(&Oculus::Voice::Dictation::AppDictationExperience::Toggle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Dictation::AppDictationExperience*), "Toggle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Dictation::AppDictationExperience::OnRequestInit
// Il2CppName: OnRequestInit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::Dictation::AppDictationExperience::*)(::Meta::WitAi::Requests::VoiceServiceRequest*)>(&Oculus::Voice::Dictation::AppDictationExperience::OnRequestInit)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Requests", "VoiceServiceRequest")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Dictation::AppDictationExperience*), "OnRequestInit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Dictation::AppDictationExperience::OnStarted
// Il2CppName: OnStarted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::Dictation::AppDictationExperience::*)()>(&Oculus::Voice::Dictation::AppDictationExperience::OnStarted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Dictation::AppDictationExperience*), "OnStarted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Dictation::AppDictationExperience::OnStopped
// Il2CppName: OnStopped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::Dictation::AppDictationExperience::*)()>(&Oculus::Voice::Dictation::AppDictationExperience::OnStopped)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Dictation::AppDictationExperience*), "OnStopped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Dictation::AppDictationExperience::OnDictationSessionStarted
// Il2CppName: OnDictationSessionStarted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::Dictation::AppDictationExperience::*)(::Meta::WitAi::Dictation::Data::DictationSession*)>(&Oculus::Voice::Dictation::AppDictationExperience::OnDictationSessionStarted)> {
  static const MethodInfo* get() {
    static auto* session = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Dictation.Data", "DictationSession")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Dictation::AppDictationExperience*), "OnDictationSessionStarted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{session});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Dictation::AppDictationExperience::OnAudioDurationTrackerFinished
// Il2CppName: OnAudioDurationTrackerFinished
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::Dictation::AppDictationExperience::*)(int64_t, double)>(&Oculus::Voice::Dictation::AppDictationExperience::OnAudioDurationTrackerFinished)> {
  static const MethodInfo* get() {
    static auto* timestamp = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* audioDuration = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Dictation::AppDictationExperience*), "OnAudioDurationTrackerFinished", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{timestamp, audioDuration});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Dictation::AppDictationExperience::OnPartialTranscription
// Il2CppName: OnPartialTranscription
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::Dictation::AppDictationExperience::*)(::StringW)>(&Oculus::Voice::Dictation::AppDictationExperience::OnPartialTranscription)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Dictation::AppDictationExperience*), "OnPartialTranscription", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Dictation::AppDictationExperience::OnFullTranscription
// Il2CppName: OnFullTranscription
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::Dictation::AppDictationExperience::*)(::StringW)>(&Oculus::Voice::Dictation::AppDictationExperience::OnFullTranscription)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Dictation::AppDictationExperience*), "OnFullTranscription", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Dictation::AppDictationExperience::OnComplete
// Il2CppName: OnComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::Dictation::AppDictationExperience::*)(::Meta::WitAi::Requests::VoiceServiceRequest*)>(&Oculus::Voice::Dictation::AppDictationExperience::OnComplete)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Requests", "VoiceServiceRequest")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Dictation::AppDictationExperience*), "OnComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Dictation::AppDictationExperience::CleanupSession
// Il2CppName: CleanupSession
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::Dictation::AppDictationExperience::*)()>(&Oculus::Voice::Dictation::AppDictationExperience::CleanupSession)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Dictation::AppDictationExperience*), "CleanupSession", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Dictation::AppDictationExperience::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Voice::Dictation::AppDictationExperience::$OnEnable$b__37_0
// Il2CppName: <OnEnable>b__37_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::Dictation::AppDictationExperience::*)(::StringW)>(&Oculus::Voice::Dictation::AppDictationExperience::$OnEnable$b__37_0)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Dictation::AppDictationExperience*), "<OnEnable>b__37_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Dictation::AppDictationExperience::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::Dictation::AppDictationExperience::*)()>(&Oculus::Voice::Dictation::AppDictationExperience::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Dictation::AppDictationExperience*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Dictation::AppDictationExperience::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::Dictation::AppDictationExperience::*)()>(&Oculus::Voice::Dictation::AppDictationExperience::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Dictation::AppDictationExperience*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Dictation::AppDictationExperience::get_Active
// Il2CppName: get_Active
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Voice::Dictation::AppDictationExperience::*)()>(&Oculus::Voice::Dictation::AppDictationExperience::get_Active)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Dictation::AppDictationExperience*), "get_Active", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Dictation::AppDictationExperience::get_IsRequestActive
// Il2CppName: get_IsRequestActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Voice::Dictation::AppDictationExperience::*)()>(&Oculus::Voice::Dictation::AppDictationExperience::get_IsRequestActive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Dictation::AppDictationExperience*), "get_IsRequestActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Dictation::AppDictationExperience::get_TranscriptionProvider
// Il2CppName: get_TranscriptionProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Interfaces::ITranscriptionProvider* (Oculus::Voice::Dictation::AppDictationExperience::*)()>(&Oculus::Voice::Dictation::AppDictationExperience::get_TranscriptionProvider)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Dictation::AppDictationExperience*), "get_TranscriptionProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Dictation::AppDictationExperience::set_TranscriptionProvider
// Il2CppName: set_TranscriptionProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::Dictation::AppDictationExperience::*)(::Meta::WitAi::Interfaces::ITranscriptionProvider*)>(&Oculus::Voice::Dictation::AppDictationExperience::set_TranscriptionProvider)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Interfaces", "ITranscriptionProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Dictation::AppDictationExperience*), "set_TranscriptionProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Dictation::AppDictationExperience::get_MicActive
// Il2CppName: get_MicActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Voice::Dictation::AppDictationExperience::*)()>(&Oculus::Voice::Dictation::AppDictationExperience::get_MicActive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Dictation::AppDictationExperience*), "get_MicActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Dictation::AppDictationExperience::get_ShouldSendMicData
// Il2CppName: get_ShouldSendMicData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Voice::Dictation::AppDictationExperience::*)()>(&Oculus::Voice::Dictation::AppDictationExperience::get_ShouldSendMicData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Dictation::AppDictationExperience*), "get_ShouldSendMicData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Dictation::AppDictationExperience::Activate
// Il2CppName: Activate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Requests::VoiceServiceRequest* (Oculus::Voice::Dictation::AppDictationExperience::*)(::Meta::WitAi::Configuration::WitRequestOptions*, ::Meta::WitAi::Requests::VoiceServiceRequestEvents*)>(&Oculus::Voice::Dictation::AppDictationExperience::Activate)> {
  static const MethodInfo* get() {
    static auto* requestOptions = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Configuration", "WitRequestOptions")->byval_arg;
    static auto* requestEvents = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Requests", "VoiceServiceRequestEvents")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Dictation::AppDictationExperience*), "Activate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{requestOptions, requestEvents});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Dictation::AppDictationExperience::ActivateImmediately
// Il2CppName: ActivateImmediately
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Requests::VoiceServiceRequest* (Oculus::Voice::Dictation::AppDictationExperience::*)(::Meta::WitAi::Configuration::WitRequestOptions*, ::Meta::WitAi::Requests::VoiceServiceRequestEvents*)>(&Oculus::Voice::Dictation::AppDictationExperience::ActivateImmediately)> {
  static const MethodInfo* get() {
    static auto* requestOptions = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Configuration", "WitRequestOptions")->byval_arg;
    static auto* requestEvents = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Requests", "VoiceServiceRequestEvents")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Dictation::AppDictationExperience*), "ActivateImmediately", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{requestOptions, requestEvents});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Dictation::AppDictationExperience::Deactivate
// Il2CppName: Deactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::Dictation::AppDictationExperience::*)()>(&Oculus::Voice::Dictation::AppDictationExperience::Deactivate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Dictation::AppDictationExperience*), "Deactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Dictation::AppDictationExperience::Cancel
// Il2CppName: Cancel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::Dictation::AppDictationExperience::*)()>(&Oculus::Voice::Dictation::AppDictationExperience::Cancel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Dictation::AppDictationExperience*), "Cancel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
