// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Meta.WitAi.VoiceService
#include "Meta/WitAi/VoiceService.hpp"
// Including type: Meta.WitAi.IWitRuntimeConfigProvider
#include "Meta/WitAi/IWitRuntimeConfigProvider.hpp"
// Including type: Meta.WitAi.Interfaces.IWitConfigurationProvider
#include "Meta/WitAi/Interfaces/IWitConfigurationProvider.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Meta::WitAi::Configuration
namespace Meta::WitAi::Configuration {
  // Forward declaring type: WitRuntimeConfiguration
  class WitRuntimeConfiguration;
  // Forward declaring type: WitRequestOptions
  class WitRequestOptions;
}
// Forward declaring namespace: Oculus::Voice::Interfaces
namespace Oculus::Voice::Interfaces {
  // Forward declaring type: IPlatformVoiceService
  class IPlatformVoiceService;
}
// Forward declaring namespace: Meta::WitAi
namespace Meta::WitAi {
  // Skipping declaration: IVoiceService because it is already included!
}
// Forward declaring namespace: Oculus::Voice::Core::Bindings::Interfaces
namespace Oculus::Voice::Core::Bindings::Interfaces {
  // Forward declaring type: IVoiceSDKLogger
  class IVoiceSDKLogger;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: Meta::WitAi::Data::Configuration
namespace Meta::WitAi::Data::Configuration {
  // Forward declaring type: WitConfiguration
  class WitConfiguration;
}
// Forward declaring namespace: Meta::WitAi::Requests
namespace Meta::WitAi::Requests {
  // Forward declaring type: VoiceServiceRequest
  class VoiceServiceRequest;
  // Forward declaring type: VoiceServiceRequestEvents
  class VoiceServiceRequestEvents;
}
// Forward declaring namespace: Meta::WitAi::Json
namespace Meta::WitAi::Json {
  // Forward declaring type: WitResponseNode
  class WitResponseNode;
}
// Forward declaring namespace: Meta::WitAi::Interfaces
namespace Meta::WitAi::Interfaces {
  // Forward declaring type: ITranscriptionProvider
  class ITranscriptionProvider;
}
// Completed forward declares
// Type namespace: Oculus.Voice
namespace Oculus::Voice {
  // Forward declaring type: AppVoiceExperience
  class AppVoiceExperience;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Voice::AppVoiceExperience);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Voice::AppVoiceExperience*, "Oculus.Voice", "AppVoiceExperience");
// Type namespace: Oculus.Voice
namespace Oculus::Voice {
  // Size: 0x80
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Voice.AppVoiceExperience
  // [TokenAttribute] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: FFFFFFFF
  class AppVoiceExperience : public ::Meta::WitAi::VoiceService/*, public ::Meta::WitAi::IWitRuntimeConfigProvider, public ::Meta::WitAi::Interfaces::IWitConfigurationProvider*/ {
    public:
    public:
    // private Meta.WitAi.Configuration.WitRuntimeConfiguration witRuntimeConfiguration
    // Size: 0x8
    // Offset: 0x50
    ::Meta::WitAi::Configuration::WitRuntimeConfiguration* witRuntimeConfiguration;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::Configuration::WitRuntimeConfiguration*) == 0x8);
    // private System.Boolean usePlatformServices
    // Size: 0x1
    // Offset: 0x58
    bool usePlatformServices;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean enableConsoleLogging
    // Size: 0x1
    // Offset: 0x59
    bool enableConsoleLogging;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: enableConsoleLogging and: platformService
    char __padding2[0x6] = {};
    // private Oculus.Voice.Interfaces.IPlatformVoiceService platformService
    // Size: 0x8
    // Offset: 0x60
    ::Oculus::Voice::Interfaces::IPlatformVoiceService* platformService;
    // Field size check
    static_assert(sizeof(::Oculus::Voice::Interfaces::IPlatformVoiceService*) == 0x8);
    // private Meta.WitAi.IVoiceService voiceServiceImpl
    // Size: 0x8
    // Offset: 0x68
    ::Meta::WitAi::IVoiceService* voiceServiceImpl;
    // Field size check
    static_assert(sizeof(::Meta::WitAi::IVoiceService*) == 0x8);
    // private Oculus.Voice.Core.Bindings.Interfaces.IVoiceSDKLogger voiceSDKLoggerImpl
    // Size: 0x8
    // Offset: 0x70
    ::Oculus::Voice::Core::Bindings::Interfaces::IVoiceSDKLogger* voiceSDKLoggerImpl;
    // Field size check
    static_assert(sizeof(::Oculus::Voice::Core::Bindings::Interfaces::IVoiceSDKLogger*) == 0x8);
    // private System.Action OnInitialized
    // Size: 0x8
    // Offset: 0x78
    ::System::Action* OnInitialized;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Meta::WitAi::IWitRuntimeConfigProvider
    operator ::Meta::WitAi::IWitRuntimeConfigProvider() noexcept {
      return *reinterpret_cast<::Meta::WitAi::IWitRuntimeConfigProvider*>(this);
    }
    // Creating interface conversion operator: operator ::Meta::WitAi::Interfaces::IWitConfigurationProvider
    operator ::Meta::WitAi::Interfaces::IWitConfigurationProvider() noexcept {
      return *reinterpret_cast<::Meta::WitAi::Interfaces::IWitConfigurationProvider*>(this);
    }
    // Get instance field reference: private Meta.WitAi.Configuration.WitRuntimeConfiguration witRuntimeConfiguration
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::Configuration::WitRuntimeConfiguration*& dyn_witRuntimeConfiguration();
    // Get instance field reference: private System.Boolean usePlatformServices
    [[deprecated("Use field access instead!")]] bool& dyn_usePlatformServices();
    // Get instance field reference: private System.Boolean enableConsoleLogging
    [[deprecated("Use field access instead!")]] bool& dyn_enableConsoleLogging();
    // Get instance field reference: private Oculus.Voice.Interfaces.IPlatformVoiceService platformService
    [[deprecated("Use field access instead!")]] ::Oculus::Voice::Interfaces::IPlatformVoiceService*& dyn_platformService();
    // Get instance field reference: private Meta.WitAi.IVoiceService voiceServiceImpl
    [[deprecated("Use field access instead!")]] ::Meta::WitAi::IVoiceService*& dyn_voiceServiceImpl();
    // Get instance field reference: private Oculus.Voice.Core.Bindings.Interfaces.IVoiceSDKLogger voiceSDKLoggerImpl
    [[deprecated("Use field access instead!")]] ::Oculus::Voice::Core::Bindings::Interfaces::IVoiceSDKLogger*& dyn_voiceSDKLoggerImpl();
    // Get instance field reference: private System.Action OnInitialized
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_OnInitialized();
    // public Meta.WitAi.Configuration.WitRuntimeConfiguration get_RuntimeConfiguration()
    // Offset: 0x571CE24
    ::Meta::WitAi::Configuration::WitRuntimeConfiguration* get_RuntimeConfiguration();
    // public System.Void set_RuntimeConfiguration(Meta.WitAi.Configuration.WitRuntimeConfiguration value)
    // Offset: 0x571CE2C
    void set_RuntimeConfiguration(::Meta::WitAi::Configuration::WitRuntimeConfiguration* value);
    // public Meta.WitAi.Data.Configuration.WitConfiguration get_Configuration()
    // Offset: 0x571CE34
    ::Meta::WitAi::Data::Configuration::WitConfiguration* get_Configuration();
    // static private System.String get_PACKAGE_VERSION()
    // Offset: 0x571CE4C
    static ::StringW get_PACKAGE_VERSION();
    // private System.Boolean get_Initialized()
    // Offset: 0x571CF50
    bool get_Initialized();
    // public System.Void add_OnInitialized(System.Action value)
    // Offset: 0x571CF60
    void add_OnInitialized(::System::Action* value);
    // public System.Void remove_OnInitialized(System.Action value)
    // Offset: 0x571CFFC
    void remove_OnInitialized(::System::Action* value);
    // public System.Boolean get_HasPlatformIntegrations()
    // Offset: 0x571D474
    bool get_HasPlatformIntegrations();
    // public System.Boolean get_EnableConsoleLogging()
    // Offset: 0x571D4F8
    bool get_EnableConsoleLogging();
    // private System.Void InitVoiceSDK()
    // Offset: 0x571D60C
    void InitVoiceSDK();
    // private System.Void RevertToWitUnity()
    // Offset: 0x571E440
    void RevertToWitUnity();
    // private System.Void OnApplicationFocus(System.Boolean hasFocus)
    // Offset: 0x571F52C
    void OnApplicationFocus(bool hasFocus);
    // private System.Void OnRequestInit(Meta.WitAi.Requests.VoiceServiceRequest request)
    // Offset: 0x571F578
    void OnRequestInit(::Meta::WitAi::Requests::VoiceServiceRequest* request);
    // private System.Void OnWitResponseListener(Meta.WitAi.Json.WitResponseNode witResponseNode)
    // Offset: 0x571FA5C
    void OnWitResponseListener(::Meta::WitAi::Json::WitResponseNode* witResponseNode);
    // private System.Void OnStartedListening()
    // Offset: 0x571FC54
    void OnStartedListening();
    // private System.Void OnMinimumWakeThresholdHit()
    // Offset: 0x571FD14
    void OnMinimumWakeThresholdHit();
    // private System.Void OnStoppedListening()
    // Offset: 0x571FDD4
    void OnStoppedListening();
    // private System.Void OnStoppedListeningDueToTimeout()
    // Offset: 0x571FE94
    void OnStoppedListeningDueToTimeout();
    // private System.Void OnStoppedListeningDueToInactivity()
    // Offset: 0x571FF54
    void OnStoppedListeningDueToInactivity();
    // private System.Void OnStoppedListeningDueToDeactivation()
    // Offset: 0x5720014
    void OnStoppedListeningDueToDeactivation();
    // private System.Void OnMicDataSent()
    // Offset: 0x57200D4
    void OnMicDataSent();
    // private System.Void OnSend(Meta.WitAi.Requests.VoiceServiceRequest request)
    // Offset: 0x5720194
    void OnSend(::Meta::WitAi::Requests::VoiceServiceRequest* request);
    // private System.Void OnAudioDurationTrackerFinished(System.Int64 timestamp, System.Double audioDuration)
    // Offset: 0x5720318
    void OnAudioDurationTrackerFinished(int64_t timestamp, double audioDuration);
    // private System.Void OnPartialTranscription(System.String text)
    // Offset: 0x57204CC
    void OnPartialTranscription(::StringW text);
    // private System.Void OnFullTranscription(System.String text)
    // Offset: 0x5720570
    void OnFullTranscription(::StringW text);
    // private System.Void OnRequestComplete(Meta.WitAi.Requests.VoiceServiceRequest request)
    // Offset: 0x5720630
    void OnRequestComplete(::Meta::WitAi::Requests::VoiceServiceRequest* request);
    // public System.Void .ctor()
    // Offset: 0x5720874
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AppVoiceExperience* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Voice::AppVoiceExperience::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AppVoiceExperience*, creationType>()));
    }
    // private System.Void <InitVoiceSDK>b__44_0()
    // Offset: 0x572087C
    void $InitVoiceSDK$b__44_0();
    // public override System.Boolean get_Active()
    // Offset: 0x571D098
    // Implemented from: Meta.WitAi.VoiceService
    // Base method: System.Boolean VoiceService::get_Active()
    bool get_Active();
    // public override System.Boolean get_IsRequestActive()
    // Offset: 0x571D15C
    // Implemented from: Meta.WitAi.VoiceService
    // Base method: System.Boolean VoiceService::get_IsRequestActive()
    bool get_IsRequestActive();
    // public override Meta.WitAi.Interfaces.ITranscriptionProvider get_TranscriptionProvider()
    // Offset: 0x571D220
    // Implemented from: Meta.WitAi.VoiceService
    // Base method: Meta.WitAi.Interfaces.ITranscriptionProvider VoiceService::get_TranscriptionProvider()
    ::Meta::WitAi::Interfaces::ITranscriptionProvider* get_TranscriptionProvider();
    // public override System.Void set_TranscriptionProvider(Meta.WitAi.Interfaces.ITranscriptionProvider value)
    // Offset: 0x571D2D0
    // Implemented from: Meta.WitAi.VoiceService
    // Base method: System.Void VoiceService::set_TranscriptionProvider(Meta.WitAi.Interfaces.ITranscriptionProvider value)
    void set_TranscriptionProvider(::Meta::WitAi::Interfaces::ITranscriptionProvider* value);
    // public override System.Boolean get_MicActive()
    // Offset: 0x571D384
    // Implemented from: Meta.WitAi.VoiceService
    // Base method: System.Boolean VoiceService::get_MicActive()
    bool get_MicActive();
    // protected override System.Boolean get_ShouldSendMicData()
    // Offset: 0x571D434
    // Implemented from: Meta.WitAi.VoiceService
    // Base method: System.Boolean VoiceService::get_ShouldSendMicData()
    bool get_ShouldSendMicData();
    // public override System.Boolean get_UsePlatformIntegrations()
    // Offset: 0x571D500
    // Implemented from: Meta.WitAi.VoiceService
    // Base method: System.Boolean VoiceService::get_UsePlatformIntegrations()
    bool get_UsePlatformIntegrations();
    // public override System.Void set_UsePlatformIntegrations(System.Boolean value)
    // Offset: 0x571D508
    // Implemented from: Meta.WitAi.VoiceService
    // Base method: System.Void VoiceService::set_UsePlatformIntegrations(System.Boolean value)
    void set_UsePlatformIntegrations(bool value);
    // public override System.Boolean CanSend()
    // Offset: 0x571DCD0
    // Implemented from: Meta.WitAi.VoiceService
    // Base method: System.Boolean VoiceService::CanSend()
    bool CanSend();
    // public override Meta.WitAi.Requests.VoiceServiceRequest Activate(System.String text, Meta.WitAi.Configuration.WitRequestOptions requestOptions, Meta.WitAi.Requests.VoiceServiceRequestEvents requestEvents)
    // Offset: 0x571DD90
    // Implemented from: Meta.WitAi.VoiceService
    // Base method: Meta.WitAi.Requests.VoiceServiceRequest VoiceService::Activate(System.String text, Meta.WitAi.Configuration.WitRequestOptions requestOptions, Meta.WitAi.Requests.VoiceServiceRequestEvents requestEvents)
    ::Meta::WitAi::Requests::VoiceServiceRequest* Activate(::StringW text, ::Meta::WitAi::Configuration::WitRequestOptions* requestOptions, ::Meta::WitAi::Requests::VoiceServiceRequestEvents* requestEvents);
    // public override System.Boolean CanActivateAudio()
    // Offset: 0x571DE80
    // Implemented from: Meta.WitAi.VoiceService
    // Base method: System.Boolean VoiceService::CanActivateAudio()
    bool CanActivateAudio();
    // protected override System.String GetActivateAudioError()
    // Offset: 0x571DF44
    // Implemented from: Meta.WitAi.VoiceService
    // Base method: System.String VoiceService::GetActivateAudioError()
    ::StringW GetActivateAudioError();
    // public override Meta.WitAi.Requests.VoiceServiceRequest Activate(Meta.WitAi.Configuration.WitRequestOptions requestOptions, Meta.WitAi.Requests.VoiceServiceRequestEvents requestEvents)
    // Offset: 0x571DFD0
    // Implemented from: Meta.WitAi.VoiceService
    // Base method: Meta.WitAi.Requests.VoiceServiceRequest VoiceService::Activate(Meta.WitAi.Configuration.WitRequestOptions requestOptions, Meta.WitAi.Requests.VoiceServiceRequestEvents requestEvents)
    ::Meta::WitAi::Requests::VoiceServiceRequest* Activate(::Meta::WitAi::Configuration::WitRequestOptions* requestOptions, ::Meta::WitAi::Requests::VoiceServiceRequestEvents* requestEvents);
    // public override Meta.WitAi.Requests.VoiceServiceRequest ActivateImmediately(Meta.WitAi.Configuration.WitRequestOptions requestOptions, Meta.WitAi.Requests.VoiceServiceRequestEvents requestEvents)
    // Offset: 0x571E0D0
    // Implemented from: Meta.WitAi.VoiceService
    // Base method: Meta.WitAi.Requests.VoiceServiceRequest VoiceService::ActivateImmediately(Meta.WitAi.Configuration.WitRequestOptions requestOptions, Meta.WitAi.Requests.VoiceServiceRequestEvents requestEvents)
    ::Meta::WitAi::Requests::VoiceServiceRequest* ActivateImmediately(::Meta::WitAi::Configuration::WitRequestOptions* requestOptions, ::Meta::WitAi::Requests::VoiceServiceRequestEvents* requestEvents);
    // public override System.Void Deactivate()
    // Offset: 0x571E1D0
    // Implemented from: Meta.WitAi.VoiceService
    // Base method: System.Void VoiceService::Deactivate()
    void Deactivate();
    // public override System.Void DeactivateAndAbortRequest()
    // Offset: 0x571E274
    // Implemented from: Meta.WitAi.VoiceService
    // Base method: System.Void VoiceService::DeactivateAndAbortRequest()
    void DeactivateAndAbortRequest();
    // protected override System.Void OnEnable()
    // Offset: 0x571E710
    // Implemented from: Meta.WitAi.VoiceService
    // Base method: System.Void VoiceService::OnEnable()
    void OnEnable();
    // protected override System.Void OnDisable()
    // Offset: 0x571EE08
    // Implemented from: Meta.WitAi.VoiceService
    // Base method: System.Void VoiceService::OnDisable()
    void OnDisable();
  }; // Oculus.Voice.AppVoiceExperience
  #pragma pack(pop)
  static check_size<sizeof(AppVoiceExperience), 120 + sizeof(::System::Action*)> __Oculus_Voice_AppVoiceExperienceSizeCheck;
  static_assert(sizeof(AppVoiceExperience) == 0x80);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Voice::AppVoiceExperience::get_RuntimeConfiguration
// Il2CppName: get_RuntimeConfiguration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Configuration::WitRuntimeConfiguration* (Oculus::Voice::AppVoiceExperience::*)()>(&Oculus::Voice::AppVoiceExperience::get_RuntimeConfiguration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::AppVoiceExperience*), "get_RuntimeConfiguration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::AppVoiceExperience::set_RuntimeConfiguration
// Il2CppName: set_RuntimeConfiguration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::AppVoiceExperience::*)(::Meta::WitAi::Configuration::WitRuntimeConfiguration*)>(&Oculus::Voice::AppVoiceExperience::set_RuntimeConfiguration)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Configuration", "WitRuntimeConfiguration")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::AppVoiceExperience*), "set_RuntimeConfiguration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::AppVoiceExperience::get_Configuration
// Il2CppName: get_Configuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Data::Configuration::WitConfiguration* (Oculus::Voice::AppVoiceExperience::*)()>(&Oculus::Voice::AppVoiceExperience::get_Configuration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::AppVoiceExperience*), "get_Configuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::AppVoiceExperience::get_PACKAGE_VERSION
// Il2CppName: get_PACKAGE_VERSION
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)()>(&Oculus::Voice::AppVoiceExperience::get_PACKAGE_VERSION)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::AppVoiceExperience*), "get_PACKAGE_VERSION", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::AppVoiceExperience::get_Initialized
// Il2CppName: get_Initialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Voice::AppVoiceExperience::*)()>(&Oculus::Voice::AppVoiceExperience::get_Initialized)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::AppVoiceExperience*), "get_Initialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::AppVoiceExperience::add_OnInitialized
// Il2CppName: add_OnInitialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::AppVoiceExperience::*)(::System::Action*)>(&Oculus::Voice::AppVoiceExperience::add_OnInitialized)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::AppVoiceExperience*), "add_OnInitialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::AppVoiceExperience::remove_OnInitialized
// Il2CppName: remove_OnInitialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::AppVoiceExperience::*)(::System::Action*)>(&Oculus::Voice::AppVoiceExperience::remove_OnInitialized)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::AppVoiceExperience*), "remove_OnInitialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::AppVoiceExperience::get_HasPlatformIntegrations
// Il2CppName: get_HasPlatformIntegrations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Voice::AppVoiceExperience::*)()>(&Oculus::Voice::AppVoiceExperience::get_HasPlatformIntegrations)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::AppVoiceExperience*), "get_HasPlatformIntegrations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::AppVoiceExperience::get_EnableConsoleLogging
// Il2CppName: get_EnableConsoleLogging
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Voice::AppVoiceExperience::*)()>(&Oculus::Voice::AppVoiceExperience::get_EnableConsoleLogging)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::AppVoiceExperience*), "get_EnableConsoleLogging", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::AppVoiceExperience::InitVoiceSDK
// Il2CppName: InitVoiceSDK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::AppVoiceExperience::*)()>(&Oculus::Voice::AppVoiceExperience::InitVoiceSDK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::AppVoiceExperience*), "InitVoiceSDK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::AppVoiceExperience::RevertToWitUnity
// Il2CppName: RevertToWitUnity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::AppVoiceExperience::*)()>(&Oculus::Voice::AppVoiceExperience::RevertToWitUnity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::AppVoiceExperience*), "RevertToWitUnity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::AppVoiceExperience::OnApplicationFocus
// Il2CppName: OnApplicationFocus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::AppVoiceExperience::*)(bool)>(&Oculus::Voice::AppVoiceExperience::OnApplicationFocus)> {
  static const MethodInfo* get() {
    static auto* hasFocus = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::AppVoiceExperience*), "OnApplicationFocus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hasFocus});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::AppVoiceExperience::OnRequestInit
// Il2CppName: OnRequestInit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::AppVoiceExperience::*)(::Meta::WitAi::Requests::VoiceServiceRequest*)>(&Oculus::Voice::AppVoiceExperience::OnRequestInit)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Requests", "VoiceServiceRequest")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::AppVoiceExperience*), "OnRequestInit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::AppVoiceExperience::OnWitResponseListener
// Il2CppName: OnWitResponseListener
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::AppVoiceExperience::*)(::Meta::WitAi::Json::WitResponseNode*)>(&Oculus::Voice::AppVoiceExperience::OnWitResponseListener)> {
  static const MethodInfo* get() {
    static auto* witResponseNode = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Json", "WitResponseNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::AppVoiceExperience*), "OnWitResponseListener", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{witResponseNode});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::AppVoiceExperience::OnStartedListening
// Il2CppName: OnStartedListening
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::AppVoiceExperience::*)()>(&Oculus::Voice::AppVoiceExperience::OnStartedListening)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::AppVoiceExperience*), "OnStartedListening", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::AppVoiceExperience::OnMinimumWakeThresholdHit
// Il2CppName: OnMinimumWakeThresholdHit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::AppVoiceExperience::*)()>(&Oculus::Voice::AppVoiceExperience::OnMinimumWakeThresholdHit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::AppVoiceExperience*), "OnMinimumWakeThresholdHit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::AppVoiceExperience::OnStoppedListening
// Il2CppName: OnStoppedListening
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::AppVoiceExperience::*)()>(&Oculus::Voice::AppVoiceExperience::OnStoppedListening)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::AppVoiceExperience*), "OnStoppedListening", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::AppVoiceExperience::OnStoppedListeningDueToTimeout
// Il2CppName: OnStoppedListeningDueToTimeout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::AppVoiceExperience::*)()>(&Oculus::Voice::AppVoiceExperience::OnStoppedListeningDueToTimeout)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::AppVoiceExperience*), "OnStoppedListeningDueToTimeout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::AppVoiceExperience::OnStoppedListeningDueToInactivity
// Il2CppName: OnStoppedListeningDueToInactivity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::AppVoiceExperience::*)()>(&Oculus::Voice::AppVoiceExperience::OnStoppedListeningDueToInactivity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::AppVoiceExperience*), "OnStoppedListeningDueToInactivity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::AppVoiceExperience::OnStoppedListeningDueToDeactivation
// Il2CppName: OnStoppedListeningDueToDeactivation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::AppVoiceExperience::*)()>(&Oculus::Voice::AppVoiceExperience::OnStoppedListeningDueToDeactivation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::AppVoiceExperience*), "OnStoppedListeningDueToDeactivation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::AppVoiceExperience::OnMicDataSent
// Il2CppName: OnMicDataSent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::AppVoiceExperience::*)()>(&Oculus::Voice::AppVoiceExperience::OnMicDataSent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::AppVoiceExperience*), "OnMicDataSent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::AppVoiceExperience::OnSend
// Il2CppName: OnSend
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::AppVoiceExperience::*)(::Meta::WitAi::Requests::VoiceServiceRequest*)>(&Oculus::Voice::AppVoiceExperience::OnSend)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Requests", "VoiceServiceRequest")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::AppVoiceExperience*), "OnSend", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::AppVoiceExperience::OnAudioDurationTrackerFinished
// Il2CppName: OnAudioDurationTrackerFinished
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::AppVoiceExperience::*)(int64_t, double)>(&Oculus::Voice::AppVoiceExperience::OnAudioDurationTrackerFinished)> {
  static const MethodInfo* get() {
    static auto* timestamp = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* audioDuration = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::AppVoiceExperience*), "OnAudioDurationTrackerFinished", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{timestamp, audioDuration});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::AppVoiceExperience::OnPartialTranscription
// Il2CppName: OnPartialTranscription
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::AppVoiceExperience::*)(::StringW)>(&Oculus::Voice::AppVoiceExperience::OnPartialTranscription)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::AppVoiceExperience*), "OnPartialTranscription", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::AppVoiceExperience::OnFullTranscription
// Il2CppName: OnFullTranscription
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::AppVoiceExperience::*)(::StringW)>(&Oculus::Voice::AppVoiceExperience::OnFullTranscription)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::AppVoiceExperience*), "OnFullTranscription", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::AppVoiceExperience::OnRequestComplete
// Il2CppName: OnRequestComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::AppVoiceExperience::*)(::Meta::WitAi::Requests::VoiceServiceRequest*)>(&Oculus::Voice::AppVoiceExperience::OnRequestComplete)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Requests", "VoiceServiceRequest")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::AppVoiceExperience*), "OnRequestComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::AppVoiceExperience::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Voice::AppVoiceExperience::$InitVoiceSDK$b__44_0
// Il2CppName: <InitVoiceSDK>b__44_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::AppVoiceExperience::*)()>(&Oculus::Voice::AppVoiceExperience::$InitVoiceSDK$b__44_0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::AppVoiceExperience*), "<InitVoiceSDK>b__44_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::AppVoiceExperience::get_Active
// Il2CppName: get_Active
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Voice::AppVoiceExperience::*)()>(&Oculus::Voice::AppVoiceExperience::get_Active)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::AppVoiceExperience*), "get_Active", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::AppVoiceExperience::get_IsRequestActive
// Il2CppName: get_IsRequestActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Voice::AppVoiceExperience::*)()>(&Oculus::Voice::AppVoiceExperience::get_IsRequestActive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::AppVoiceExperience*), "get_IsRequestActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::AppVoiceExperience::get_TranscriptionProvider
// Il2CppName: get_TranscriptionProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Interfaces::ITranscriptionProvider* (Oculus::Voice::AppVoiceExperience::*)()>(&Oculus::Voice::AppVoiceExperience::get_TranscriptionProvider)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::AppVoiceExperience*), "get_TranscriptionProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::AppVoiceExperience::set_TranscriptionProvider
// Il2CppName: set_TranscriptionProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::AppVoiceExperience::*)(::Meta::WitAi::Interfaces::ITranscriptionProvider*)>(&Oculus::Voice::AppVoiceExperience::set_TranscriptionProvider)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Interfaces", "ITranscriptionProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::AppVoiceExperience*), "set_TranscriptionProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::AppVoiceExperience::get_MicActive
// Il2CppName: get_MicActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Voice::AppVoiceExperience::*)()>(&Oculus::Voice::AppVoiceExperience::get_MicActive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::AppVoiceExperience*), "get_MicActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::AppVoiceExperience::get_ShouldSendMicData
// Il2CppName: get_ShouldSendMicData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Voice::AppVoiceExperience::*)()>(&Oculus::Voice::AppVoiceExperience::get_ShouldSendMicData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::AppVoiceExperience*), "get_ShouldSendMicData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::AppVoiceExperience::get_UsePlatformIntegrations
// Il2CppName: get_UsePlatformIntegrations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Voice::AppVoiceExperience::*)()>(&Oculus::Voice::AppVoiceExperience::get_UsePlatformIntegrations)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::AppVoiceExperience*), "get_UsePlatformIntegrations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::AppVoiceExperience::set_UsePlatformIntegrations
// Il2CppName: set_UsePlatformIntegrations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::AppVoiceExperience::*)(bool)>(&Oculus::Voice::AppVoiceExperience::set_UsePlatformIntegrations)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::AppVoiceExperience*), "set_UsePlatformIntegrations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::AppVoiceExperience::CanSend
// Il2CppName: CanSend
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Voice::AppVoiceExperience::*)()>(&Oculus::Voice::AppVoiceExperience::CanSend)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::AppVoiceExperience*), "CanSend", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::AppVoiceExperience::Activate
// Il2CppName: Activate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Requests::VoiceServiceRequest* (Oculus::Voice::AppVoiceExperience::*)(::StringW, ::Meta::WitAi::Configuration::WitRequestOptions*, ::Meta::WitAi::Requests::VoiceServiceRequestEvents*)>(&Oculus::Voice::AppVoiceExperience::Activate)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* requestOptions = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Configuration", "WitRequestOptions")->byval_arg;
    static auto* requestEvents = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Requests", "VoiceServiceRequestEvents")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::AppVoiceExperience*), "Activate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text, requestOptions, requestEvents});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::AppVoiceExperience::CanActivateAudio
// Il2CppName: CanActivateAudio
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Voice::AppVoiceExperience::*)()>(&Oculus::Voice::AppVoiceExperience::CanActivateAudio)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::AppVoiceExperience*), "CanActivateAudio", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::AppVoiceExperience::GetActivateAudioError
// Il2CppName: GetActivateAudioError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Oculus::Voice::AppVoiceExperience::*)()>(&Oculus::Voice::AppVoiceExperience::GetActivateAudioError)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::AppVoiceExperience*), "GetActivateAudioError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::AppVoiceExperience::Activate
// Il2CppName: Activate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Requests::VoiceServiceRequest* (Oculus::Voice::AppVoiceExperience::*)(::Meta::WitAi::Configuration::WitRequestOptions*, ::Meta::WitAi::Requests::VoiceServiceRequestEvents*)>(&Oculus::Voice::AppVoiceExperience::Activate)> {
  static const MethodInfo* get() {
    static auto* requestOptions = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Configuration", "WitRequestOptions")->byval_arg;
    static auto* requestEvents = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Requests", "VoiceServiceRequestEvents")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::AppVoiceExperience*), "Activate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{requestOptions, requestEvents});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::AppVoiceExperience::ActivateImmediately
// Il2CppName: ActivateImmediately
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Meta::WitAi::Requests::VoiceServiceRequest* (Oculus::Voice::AppVoiceExperience::*)(::Meta::WitAi::Configuration::WitRequestOptions*, ::Meta::WitAi::Requests::VoiceServiceRequestEvents*)>(&Oculus::Voice::AppVoiceExperience::ActivateImmediately)> {
  static const MethodInfo* get() {
    static auto* requestOptions = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Configuration", "WitRequestOptions")->byval_arg;
    static auto* requestEvents = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Requests", "VoiceServiceRequestEvents")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::AppVoiceExperience*), "ActivateImmediately", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{requestOptions, requestEvents});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::AppVoiceExperience::Deactivate
// Il2CppName: Deactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::AppVoiceExperience::*)()>(&Oculus::Voice::AppVoiceExperience::Deactivate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::AppVoiceExperience*), "Deactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::AppVoiceExperience::DeactivateAndAbortRequest
// Il2CppName: DeactivateAndAbortRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::AppVoiceExperience::*)()>(&Oculus::Voice::AppVoiceExperience::DeactivateAndAbortRequest)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::AppVoiceExperience*), "DeactivateAndAbortRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::AppVoiceExperience::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::AppVoiceExperience::*)()>(&Oculus::Voice::AppVoiceExperience::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::AppVoiceExperience*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::AppVoiceExperience::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::AppVoiceExperience::*)()>(&Oculus::Voice::AppVoiceExperience::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::AppVoiceExperience*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
