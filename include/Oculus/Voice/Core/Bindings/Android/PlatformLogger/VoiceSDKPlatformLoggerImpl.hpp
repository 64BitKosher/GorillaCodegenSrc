// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Oculus.Voice.Core.Bindings.Android.BaseAndroidConnectionImpl`1
#include "Oculus/Voice/Core/Bindings/Android/BaseAndroidConnectionImpl_1.hpp"
// Including type: Oculus.Voice.Core.Bindings.Interfaces.IVoiceSDKLogger
#include "Oculus/Voice/Core/Bindings/Interfaces/IVoiceSDKLogger.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Voice::Core::Bindings::Android::PlatformLogger
namespace Oculus::Voice::Core::Bindings::Android::PlatformLogger {
  // Forward declaring type: VoiceSDKLoggerBinding
  class VoiceSDKLoggerBinding;
  // Forward declaring type: VoiceSDKConsoleLoggerImpl
  class VoiceSDKConsoleLoggerImpl;
}
// Completed forward declares
// Type namespace: Oculus.Voice.Core.Bindings.Android.PlatformLogger
namespace Oculus::Voice::Core::Bindings::Android::PlatformLogger {
  // Forward declaring type: VoiceSDKPlatformLoggerImpl
  class VoiceSDKPlatformLoggerImpl;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Voice::Core::Bindings::Android::PlatformLogger::VoiceSDKPlatformLoggerImpl);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Voice::Core::Bindings::Android::PlatformLogger::VoiceSDKPlatformLoggerImpl*, "Oculus.Voice.Core.Bindings.Android.PlatformLogger", "VoiceSDKPlatformLoggerImpl");
// Type namespace: Oculus.Voice.Core.Bindings.Android.PlatformLogger
namespace Oculus::Voice::Core::Bindings::Android::PlatformLogger {
  // WARNING Size may be invalid!
  // Autogenerated type: Oculus.Voice.Core.Bindings.Android.PlatformLogger.VoiceSDKPlatformLoggerImpl
  // [TokenAttribute] Offset: FFFFFFFF
  class VoiceSDKPlatformLoggerImpl : public ::Oculus::Voice::Core::Bindings::Android::BaseAndroidConnectionImpl_1<::Oculus::Voice::Core::Bindings::Android::PlatformLogger::VoiceSDKLoggerBinding*>/*, public ::Oculus::Voice::Core::Bindings::Interfaces::IVoiceSDKLogger*/ {
    public:
    public:
    // private System.Boolean <IsUsingPlatformIntegration>k__BackingField
    // Size: 0x1
    // Offset: 0x28
    bool IsUsingPlatformIntegration;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.String <WitApplication>k__BackingField
    // Size: 0x8
    // Offset: 0x30
    ::StringW WitApplication;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private Oculus.Voice.Core.Bindings.Android.PlatformLogger.VoiceSDKConsoleLoggerImpl consoleLoggerImpl
    // Size: 0x8
    // Offset: 0x38
    ::Oculus::Voice::Core::Bindings::Android::PlatformLogger::VoiceSDKConsoleLoggerImpl* consoleLoggerImpl;
    // Field size check
    static_assert(sizeof(::Oculus::Voice::Core::Bindings::Android::PlatformLogger::VoiceSDKConsoleLoggerImpl*) == 0x8);
    // private System.Boolean loggedFirstTranscriptionTime
    // Size: 0x1
    // Offset: 0x40
    bool loggedFirstTranscriptionTime;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::Oculus::Voice::Core::Bindings::Interfaces::IVoiceSDKLogger
    operator ::Oculus::Voice::Core::Bindings::Interfaces::IVoiceSDKLogger() noexcept {
      return *reinterpret_cast<::Oculus::Voice::Core::Bindings::Interfaces::IVoiceSDKLogger*>(this);
    }
    // Get instance field reference: private System.Boolean <IsUsingPlatformIntegration>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$IsUsingPlatformIntegration$k__BackingField();
    // Get instance field reference: private System.String <WitApplication>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$WitApplication$k__BackingField();
    // Get instance field reference: private Oculus.Voice.Core.Bindings.Android.PlatformLogger.VoiceSDKConsoleLoggerImpl consoleLoggerImpl
    [[deprecated("Use field access instead!")]] ::Oculus::Voice::Core::Bindings::Android::PlatformLogger::VoiceSDKConsoleLoggerImpl*& dyn_consoleLoggerImpl();
    // Get instance field reference: private System.Boolean loggedFirstTranscriptionTime
    [[deprecated("Use field access instead!")]] bool& dyn_loggedFirstTranscriptionTime();
    // public System.Boolean get_IsUsingPlatformIntegration()
    // Offset: 0x2982450
    bool get_IsUsingPlatformIntegration();
    // public System.Void set_IsUsingPlatformIntegration(System.Boolean value)
    // Offset: 0x2982458
    void set_IsUsingPlatformIntegration(bool value);
    // public System.String get_WitApplication()
    // Offset: 0x2982464
    ::StringW get_WitApplication();
    // public System.Void set_WitApplication(System.String value)
    // Offset: 0x298246C
    void set_WitApplication(::StringW value);
    // public System.Boolean get_ShouldLogToConsole()
    // Offset: 0x2982474
    bool get_ShouldLogToConsole();
    // public System.Void set_ShouldLogToConsole(System.Boolean value)
    // Offset: 0x2982490
    void set_ShouldLogToConsole(bool value);
    // public System.Void .ctor()
    // Offset: 0x29824B0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VoiceSDKPlatformLoggerImpl* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Voice::Core::Bindings::Android::PlatformLogger::VoiceSDKPlatformLoggerImpl::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VoiceSDKPlatformLoggerImpl*, creationType>()));
    }
    // public System.Void LogInteractionStart(System.String requestId, System.String witApi)
    // Offset: 0x2982688
    void LogInteractionStart(::StringW requestId, ::StringW witApi);
    // public System.Void LogInteractionEndSuccess()
    // Offset: 0x2982868
    void LogInteractionEndSuccess();
    // public System.Void LogInteractionEndFailure(System.String errorMessage)
    // Offset: 0x29828E8
    void LogInteractionEndFailure(::StringW errorMessage);
    // public System.Void LogInteractionPoint(System.String interactionPoint)
    // Offset: 0x2982974
    void LogInteractionPoint(::StringW interactionPoint);
    // public System.Void LogAnnotation(System.String annotationKey, System.String annotationValue)
    // Offset: 0x2982828
    void LogAnnotation(::StringW annotationKey, ::StringW annotationValue);
    // public System.Void LogFirstTranscriptionTime()
    // Offset: 0x2982A00
    void LogFirstTranscriptionTime();
    // public override System.Void Connect(System.String version)
    // Offset: 0x2982550
    // Implemented from: Oculus.Voice.Core.Bindings.Android.BaseAndroidConnectionImpl`1
    // Base method: System.Void BaseAndroidConnectionImpl_1::Connect(System.String version)
    void Connect(::StringW version);
    // public override System.Void Disconnect()
    // Offset: 0x29825FC
    // Implemented from: Oculus.Voice.Core.Bindings.Android.BaseAndroidConnectionImpl`1
    // Base method: System.Void BaseAndroidConnectionImpl_1::Disconnect()
    void Disconnect();
  }; // Oculus.Voice.Core.Bindings.Android.PlatformLogger.VoiceSDKPlatformLoggerImpl
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Voice::Core::Bindings::Android::PlatformLogger::VoiceSDKPlatformLoggerImpl::get_IsUsingPlatformIntegration
// Il2CppName: get_IsUsingPlatformIntegration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Voice::Core::Bindings::Android::PlatformLogger::VoiceSDKPlatformLoggerImpl::*)()>(&Oculus::Voice::Core::Bindings::Android::PlatformLogger::VoiceSDKPlatformLoggerImpl::get_IsUsingPlatformIntegration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Core::Bindings::Android::PlatformLogger::VoiceSDKPlatformLoggerImpl*), "get_IsUsingPlatformIntegration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Core::Bindings::Android::PlatformLogger::VoiceSDKPlatformLoggerImpl::set_IsUsingPlatformIntegration
// Il2CppName: set_IsUsingPlatformIntegration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::Core::Bindings::Android::PlatformLogger::VoiceSDKPlatformLoggerImpl::*)(bool)>(&Oculus::Voice::Core::Bindings::Android::PlatformLogger::VoiceSDKPlatformLoggerImpl::set_IsUsingPlatformIntegration)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Core::Bindings::Android::PlatformLogger::VoiceSDKPlatformLoggerImpl*), "set_IsUsingPlatformIntegration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Core::Bindings::Android::PlatformLogger::VoiceSDKPlatformLoggerImpl::get_WitApplication
// Il2CppName: get_WitApplication
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Oculus::Voice::Core::Bindings::Android::PlatformLogger::VoiceSDKPlatformLoggerImpl::*)()>(&Oculus::Voice::Core::Bindings::Android::PlatformLogger::VoiceSDKPlatformLoggerImpl::get_WitApplication)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Core::Bindings::Android::PlatformLogger::VoiceSDKPlatformLoggerImpl*), "get_WitApplication", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Core::Bindings::Android::PlatformLogger::VoiceSDKPlatformLoggerImpl::set_WitApplication
// Il2CppName: set_WitApplication
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::Core::Bindings::Android::PlatformLogger::VoiceSDKPlatformLoggerImpl::*)(::StringW)>(&Oculus::Voice::Core::Bindings::Android::PlatformLogger::VoiceSDKPlatformLoggerImpl::set_WitApplication)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Core::Bindings::Android::PlatformLogger::VoiceSDKPlatformLoggerImpl*), "set_WitApplication", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Core::Bindings::Android::PlatformLogger::VoiceSDKPlatformLoggerImpl::get_ShouldLogToConsole
// Il2CppName: get_ShouldLogToConsole
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Voice::Core::Bindings::Android::PlatformLogger::VoiceSDKPlatformLoggerImpl::*)()>(&Oculus::Voice::Core::Bindings::Android::PlatformLogger::VoiceSDKPlatformLoggerImpl::get_ShouldLogToConsole)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Core::Bindings::Android::PlatformLogger::VoiceSDKPlatformLoggerImpl*), "get_ShouldLogToConsole", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Core::Bindings::Android::PlatformLogger::VoiceSDKPlatformLoggerImpl::set_ShouldLogToConsole
// Il2CppName: set_ShouldLogToConsole
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::Core::Bindings::Android::PlatformLogger::VoiceSDKPlatformLoggerImpl::*)(bool)>(&Oculus::Voice::Core::Bindings::Android::PlatformLogger::VoiceSDKPlatformLoggerImpl::set_ShouldLogToConsole)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Core::Bindings::Android::PlatformLogger::VoiceSDKPlatformLoggerImpl*), "set_ShouldLogToConsole", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Core::Bindings::Android::PlatformLogger::VoiceSDKPlatformLoggerImpl::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Voice::Core::Bindings::Android::PlatformLogger::VoiceSDKPlatformLoggerImpl::LogInteractionStart
// Il2CppName: LogInteractionStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::Core::Bindings::Android::PlatformLogger::VoiceSDKPlatformLoggerImpl::*)(::StringW, ::StringW)>(&Oculus::Voice::Core::Bindings::Android::PlatformLogger::VoiceSDKPlatformLoggerImpl::LogInteractionStart)> {
  static const MethodInfo* get() {
    static auto* requestId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* witApi = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Core::Bindings::Android::PlatformLogger::VoiceSDKPlatformLoggerImpl*), "LogInteractionStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{requestId, witApi});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Core::Bindings::Android::PlatformLogger::VoiceSDKPlatformLoggerImpl::LogInteractionEndSuccess
// Il2CppName: LogInteractionEndSuccess
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::Core::Bindings::Android::PlatformLogger::VoiceSDKPlatformLoggerImpl::*)()>(&Oculus::Voice::Core::Bindings::Android::PlatformLogger::VoiceSDKPlatformLoggerImpl::LogInteractionEndSuccess)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Core::Bindings::Android::PlatformLogger::VoiceSDKPlatformLoggerImpl*), "LogInteractionEndSuccess", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Core::Bindings::Android::PlatformLogger::VoiceSDKPlatformLoggerImpl::LogInteractionEndFailure
// Il2CppName: LogInteractionEndFailure
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::Core::Bindings::Android::PlatformLogger::VoiceSDKPlatformLoggerImpl::*)(::StringW)>(&Oculus::Voice::Core::Bindings::Android::PlatformLogger::VoiceSDKPlatformLoggerImpl::LogInteractionEndFailure)> {
  static const MethodInfo* get() {
    static auto* errorMessage = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Core::Bindings::Android::PlatformLogger::VoiceSDKPlatformLoggerImpl*), "LogInteractionEndFailure", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{errorMessage});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Core::Bindings::Android::PlatformLogger::VoiceSDKPlatformLoggerImpl::LogInteractionPoint
// Il2CppName: LogInteractionPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::Core::Bindings::Android::PlatformLogger::VoiceSDKPlatformLoggerImpl::*)(::StringW)>(&Oculus::Voice::Core::Bindings::Android::PlatformLogger::VoiceSDKPlatformLoggerImpl::LogInteractionPoint)> {
  static const MethodInfo* get() {
    static auto* interactionPoint = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Core::Bindings::Android::PlatformLogger::VoiceSDKPlatformLoggerImpl*), "LogInteractionPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactionPoint});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Core::Bindings::Android::PlatformLogger::VoiceSDKPlatformLoggerImpl::LogAnnotation
// Il2CppName: LogAnnotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::Core::Bindings::Android::PlatformLogger::VoiceSDKPlatformLoggerImpl::*)(::StringW, ::StringW)>(&Oculus::Voice::Core::Bindings::Android::PlatformLogger::VoiceSDKPlatformLoggerImpl::LogAnnotation)> {
  static const MethodInfo* get() {
    static auto* annotationKey = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* annotationValue = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Core::Bindings::Android::PlatformLogger::VoiceSDKPlatformLoggerImpl*), "LogAnnotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{annotationKey, annotationValue});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Core::Bindings::Android::PlatformLogger::VoiceSDKPlatformLoggerImpl::LogFirstTranscriptionTime
// Il2CppName: LogFirstTranscriptionTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::Core::Bindings::Android::PlatformLogger::VoiceSDKPlatformLoggerImpl::*)()>(&Oculus::Voice::Core::Bindings::Android::PlatformLogger::VoiceSDKPlatformLoggerImpl::LogFirstTranscriptionTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Core::Bindings::Android::PlatformLogger::VoiceSDKPlatformLoggerImpl*), "LogFirstTranscriptionTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Core::Bindings::Android::PlatformLogger::VoiceSDKPlatformLoggerImpl::Connect
// Il2CppName: Connect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::Core::Bindings::Android::PlatformLogger::VoiceSDKPlatformLoggerImpl::*)(::StringW)>(&Oculus::Voice::Core::Bindings::Android::PlatformLogger::VoiceSDKPlatformLoggerImpl::Connect)> {
  static const MethodInfo* get() {
    static auto* version = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Core::Bindings::Android::PlatformLogger::VoiceSDKPlatformLoggerImpl*), "Connect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{version});
  }
};
// Writing MetadataGetter for method: Oculus::Voice::Core::Bindings::Android::PlatformLogger::VoiceSDKPlatformLoggerImpl::Disconnect
// Il2CppName: Disconnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Voice::Core::Bindings::Android::PlatformLogger::VoiceSDKPlatformLoggerImpl::*)()>(&Oculus::Voice::Core::Bindings::Android::PlatformLogger::VoiceSDKPlatformLoggerImpl::Disconnect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Voice::Core::Bindings::Android::PlatformLogger::VoiceSDKPlatformLoggerImpl*), "Disconnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
