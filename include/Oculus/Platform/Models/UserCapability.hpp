// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: Oculus.Platform.Models
namespace Oculus::Platform::Models {
  // Forward declaring type: UserCapability
  class UserCapability;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Platform::Models::UserCapability);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Platform::Models::UserCapability*, "Oculus.Platform.Models", "UserCapability");
// Type namespace: Oculus.Platform.Models
namespace Oculus::Platform::Models {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Platform.Models.UserCapability
  // [TokenAttribute] Offset: FFFFFFFF
  class UserCapability : public ::Il2CppObject {
    public:
    public:
    // public readonly System.String Description
    // Size: 0x8
    // Offset: 0x10
    ::StringW Description;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public readonly System.Boolean IsEnabled
    // Size: 0x1
    // Offset: 0x18
    bool IsEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: IsEnabled and: Name
    char __padding1[0x7] = {};
    // public readonly System.String Name
    // Size: 0x8
    // Offset: 0x20
    ::StringW Name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public readonly System.String ReasonCode
    // Size: 0x8
    // Offset: 0x28
    ::StringW ReasonCode;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: public readonly System.String Description
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Description();
    // Get instance field reference: public readonly System.Boolean IsEnabled
    [[deprecated("Use field access instead!")]] bool& dyn_IsEnabled();
    // Get instance field reference: public readonly System.String Name
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Name();
    // Get instance field reference: public readonly System.String ReasonCode
    [[deprecated("Use field access instead!")]] ::StringW& dyn_ReasonCode();
    // public System.Void .ctor(System.IntPtr o)
    // Offset: 0x488A9BC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UserCapability* New_ctor(::System::IntPtr o) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Platform::Models::UserCapability::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UserCapability*, creationType>(o)));
    }
  }; // Oculus.Platform.Models.UserCapability
  #pragma pack(pop)
  static check_size<sizeof(UserCapability), 40 + sizeof(::StringW)> __Oculus_Platform_Models_UserCapabilitySizeCheck;
  static_assert(sizeof(UserCapability) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Platform::Models::UserCapability::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
