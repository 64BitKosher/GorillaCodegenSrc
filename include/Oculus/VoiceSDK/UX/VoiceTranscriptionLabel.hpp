// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Text
  class Text;
}
// Forward declaring namespace: Meta::WitAi
namespace Meta::WitAi {
  // Forward declaring type: VoiceService
  class VoiceService;
}
// Forward declaring namespace: Meta::WitAi::Requests
namespace Meta::WitAi::Requests {
  // Forward declaring type: VoiceServiceRequest
  class VoiceServiceRequest;
}
// Completed forward declares
// Type namespace: Oculus.VoiceSDK.UX
namespace Oculus::VoiceSDK::UX {
  // Forward declaring type: VoiceTranscriptionLabel
  class VoiceTranscriptionLabel;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::VoiceSDK::UX::VoiceTranscriptionLabel);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::VoiceSDK::UX::VoiceTranscriptionLabel*, "Oculus.VoiceSDK.UX", "VoiceTranscriptionLabel");
// Type namespace: Oculus.VoiceSDK.UX
namespace Oculus::VoiceSDK::UX {
  // Size: 0x70
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.VoiceSDK.UX.VoiceTranscriptionLabel
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExecuteInEditMode] Offset: FFFFFFFF
  // [RequireComponent] Offset: FFFFFFFF
  class VoiceTranscriptionLabel : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.UI.Text _label
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::UI::Text* label;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // private Meta.WitAi.VoiceService[] _voiceServices
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::Meta::WitAi::VoiceService*> voiceServices;
    // Field size check
    static_assert(sizeof(::ArrayW<::Meta::WitAi::VoiceService*>) == 0x8);
    // private UnityEngine.Color _transcriptionColor
    // Size: 0x10
    // Offset: 0x30
    ::UnityEngine::Color transcriptionColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color _promptColor
    // Size: 0x10
    // Offset: 0x40
    ::UnityEngine::Color promptColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private System.String _promptDefault
    // Size: 0x8
    // Offset: 0x50
    ::StringW promptDefault;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String _promptListening
    // Size: 0x8
    // Offset: 0x58
    ::StringW promptListening;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private UnityEngine.Color _errorColor
    // Size: 0x10
    // Offset: 0x60
    ::UnityEngine::Color errorColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    public:
    // Get instance field reference: private UnityEngine.UI.Text _label
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn__label();
    // Get instance field reference: private Meta.WitAi.VoiceService[] _voiceServices
    [[deprecated("Use field access instead!")]] ::ArrayW<::Meta::WitAi::VoiceService*>& dyn__voiceServices();
    // Get instance field reference: private UnityEngine.Color _transcriptionColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__transcriptionColor();
    // Get instance field reference: private UnityEngine.Color _promptColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__promptColor();
    // Get instance field reference: private System.String _promptDefault
    [[deprecated("Use field access instead!")]] ::StringW& dyn__promptDefault();
    // Get instance field reference: private System.String _promptListening
    [[deprecated("Use field access instead!")]] ::StringW& dyn__promptListening();
    // Get instance field reference: private UnityEngine.Color _errorColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__errorColor();
    // public UnityEngine.UI.Text get_Label()
    // Offset: 0x571B21C
    ::UnityEngine::UI::Text* get_Label();
    // private System.Void Awake()
    // Offset: 0x571B2D4
    void Awake();
    // private System.Void OnEnable()
    // Offset: 0x571B368
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0x571B650
    void OnDisable();
    // private System.Void OnStartListening()
    // Offset: 0x571B938
    void OnStartListening();
    // private System.Void OnTranscriptionChange(System.String text)
    // Offset: 0x571BACC
    void OnTranscriptionChange(::StringW text);
    // private System.Void OnError(System.String status, System.String error)
    // Offset: 0x571BAD8
    void OnError(::StringW status, ::StringW error);
    // private System.Void OnComplete(Meta.WitAi.Requests.VoiceServiceRequest request)
    // Offset: 0x571BB6C
    void OnComplete(::Meta::WitAi::Requests::VoiceServiceRequest* request);
    // private System.Void SetText(System.String newText, UnityEngine.Color newColor)
    // Offset: 0x571B948
    void SetText(::StringW newText, ::UnityEngine::Color newColor);
    // public System.Void .ctor()
    // Offset: 0x571BC28
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VoiceTranscriptionLabel* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::VoiceSDK::UX::VoiceTranscriptionLabel::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VoiceTranscriptionLabel*, creationType>()));
    }
  }; // Oculus.VoiceSDK.UX.VoiceTranscriptionLabel
  #pragma pack(pop)
  static check_size<sizeof(VoiceTranscriptionLabel), 96 + sizeof(::UnityEngine::Color)> __Oculus_VoiceSDK_UX_VoiceTranscriptionLabelSizeCheck;
  static_assert(sizeof(VoiceTranscriptionLabel) == 0x70);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::VoiceSDK::UX::VoiceTranscriptionLabel::get_Label
// Il2CppName: get_Label
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UI::Text* (Oculus::VoiceSDK::UX::VoiceTranscriptionLabel::*)()>(&Oculus::VoiceSDK::UX::VoiceTranscriptionLabel::get_Label)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::VoiceSDK::UX::VoiceTranscriptionLabel*), "get_Label", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::VoiceSDK::UX::VoiceTranscriptionLabel::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::VoiceSDK::UX::VoiceTranscriptionLabel::*)()>(&Oculus::VoiceSDK::UX::VoiceTranscriptionLabel::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::VoiceSDK::UX::VoiceTranscriptionLabel*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::VoiceSDK::UX::VoiceTranscriptionLabel::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::VoiceSDK::UX::VoiceTranscriptionLabel::*)()>(&Oculus::VoiceSDK::UX::VoiceTranscriptionLabel::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::VoiceSDK::UX::VoiceTranscriptionLabel*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::VoiceSDK::UX::VoiceTranscriptionLabel::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::VoiceSDK::UX::VoiceTranscriptionLabel::*)()>(&Oculus::VoiceSDK::UX::VoiceTranscriptionLabel::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::VoiceSDK::UX::VoiceTranscriptionLabel*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::VoiceSDK::UX::VoiceTranscriptionLabel::OnStartListening
// Il2CppName: OnStartListening
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::VoiceSDK::UX::VoiceTranscriptionLabel::*)()>(&Oculus::VoiceSDK::UX::VoiceTranscriptionLabel::OnStartListening)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::VoiceSDK::UX::VoiceTranscriptionLabel*), "OnStartListening", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::VoiceSDK::UX::VoiceTranscriptionLabel::OnTranscriptionChange
// Il2CppName: OnTranscriptionChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::VoiceSDK::UX::VoiceTranscriptionLabel::*)(::StringW)>(&Oculus::VoiceSDK::UX::VoiceTranscriptionLabel::OnTranscriptionChange)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::VoiceSDK::UX::VoiceTranscriptionLabel*), "OnTranscriptionChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text});
  }
};
// Writing MetadataGetter for method: Oculus::VoiceSDK::UX::VoiceTranscriptionLabel::OnError
// Il2CppName: OnError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::VoiceSDK::UX::VoiceTranscriptionLabel::*)(::StringW, ::StringW)>(&Oculus::VoiceSDK::UX::VoiceTranscriptionLabel::OnError)> {
  static const MethodInfo* get() {
    static auto* status = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::VoiceSDK::UX::VoiceTranscriptionLabel*), "OnError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{status, error});
  }
};
// Writing MetadataGetter for method: Oculus::VoiceSDK::UX::VoiceTranscriptionLabel::OnComplete
// Il2CppName: OnComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::VoiceSDK::UX::VoiceTranscriptionLabel::*)(::Meta::WitAi::Requests::VoiceServiceRequest*)>(&Oculus::VoiceSDK::UX::VoiceTranscriptionLabel::OnComplete)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("Meta.WitAi.Requests", "VoiceServiceRequest")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::VoiceSDK::UX::VoiceTranscriptionLabel*), "OnComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request});
  }
};
// Writing MetadataGetter for method: Oculus::VoiceSDK::UX::VoiceTranscriptionLabel::SetText
// Il2CppName: SetText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::VoiceSDK::UX::VoiceTranscriptionLabel::*)(::StringW, ::UnityEngine::Color)>(&Oculus::VoiceSDK::UX::VoiceTranscriptionLabel::SetText)> {
  static const MethodInfo* get() {
    static auto* newText = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* newColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::VoiceSDK::UX::VoiceTranscriptionLabel*), "SetText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newText, newColor});
  }
};
// Writing MetadataGetter for method: Oculus::VoiceSDK::UX::VoiceTranscriptionLabel::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
