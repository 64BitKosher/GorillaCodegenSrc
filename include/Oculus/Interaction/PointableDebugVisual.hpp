// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Object because it is already included!
  // Forward declaring type: Renderer
  class Renderer;
  // Forward declaring type: Material
  class Material;
}
// Forward declaring namespace: Oculus::Interaction
namespace Oculus::Interaction {
  // Forward declaring type: IPointable
  class IPointable;
  // Forward declaring type: PointerEvent
  struct PointerEvent;
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: PointableDebugVisual
  class PointableDebugVisual;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::PointableDebugVisual);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::PointableDebugVisual*, "Oculus.Interaction", "PointableDebugVisual");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x73
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.PointableDebugVisual
  // [TokenAttribute] Offset: FFFFFFFF
  class PointableDebugVisual : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.Object _pointable
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Object* pointable;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private UnityEngine.Renderer _renderer
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Renderer* renderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::Renderer*) == 0x8);
    // private UnityEngine.Color _normalColor
    // Size: 0x10
    // Offset: 0x30
    ::UnityEngine::Color normalColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color _hoverColor
    // Size: 0x10
    // Offset: 0x40
    ::UnityEngine::Color hoverColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color _selectColor
    // Size: 0x10
    // Offset: 0x50
    ::UnityEngine::Color selectColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private Oculus.Interaction.IPointable Pointable
    // Size: 0x8
    // Offset: 0x60
    ::Oculus::Interaction::IPointable* Pointable;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::IPointable*) == 0x8);
    // private UnityEngine.Material _material
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::Material* material;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private System.Boolean _hover
    // Size: 0x1
    // Offset: 0x70
    bool hover;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _select
    // Size: 0x1
    // Offset: 0x71
    bool select;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean _started
    // Size: 0x1
    // Offset: 0x72
    bool started;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private UnityEngine.Object _pointable
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__pointable();
    // Get instance field reference: private UnityEngine.Renderer _renderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& dyn__renderer();
    // Get instance field reference: private UnityEngine.Color _normalColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__normalColor();
    // Get instance field reference: private UnityEngine.Color _hoverColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__hoverColor();
    // Get instance field reference: private UnityEngine.Color _selectColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__selectColor();
    // Get instance field reference: private Oculus.Interaction.IPointable Pointable
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::IPointable*& dyn_Pointable();
    // Get instance field reference: private UnityEngine.Material _material
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn__material();
    // Get instance field reference: private System.Boolean _hover
    [[deprecated("Use field access instead!")]] bool& dyn__hover();
    // Get instance field reference: private System.Boolean _select
    [[deprecated("Use field access instead!")]] bool& dyn__select();
    // Get instance field reference: protected System.Boolean _started
    [[deprecated("Use field access instead!")]] bool& dyn__started();
    // public UnityEngine.Color get_NormalColor()
    // Offset: 0x47C3438
    ::UnityEngine::Color get_NormalColor();
    // public System.Void set_NormalColor(UnityEngine.Color value)
    // Offset: 0x47C3444
    void set_NormalColor(::UnityEngine::Color value);
    // public UnityEngine.Color get_HoverColor()
    // Offset: 0x47C3450
    ::UnityEngine::Color get_HoverColor();
    // public System.Void set_HoverColor(UnityEngine.Color value)
    // Offset: 0x47C345C
    void set_HoverColor(::UnityEngine::Color value);
    // public UnityEngine.Color get_SelectColor()
    // Offset: 0x47C3468
    ::UnityEngine::Color get_SelectColor();
    // public System.Void set_SelectColor(UnityEngine.Color value)
    // Offset: 0x47C3474
    void set_SelectColor(::UnityEngine::Color value);
    // protected System.Void Awake()
    // Offset: 0x47C3480
    void Awake();
    // protected System.Void Start()
    // Offset: 0x47C34E8
    void Start();
    // protected System.Void OnEnable()
    // Offset: 0x47C3560
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x47C36E0
    void OnDisable();
    // private System.Void OnDestroy()
    // Offset: 0x47C37E0
    void OnDestroy();
    // private System.Void HandlePointerEventRaised(Oculus.Interaction.PointerEvent evt)
    // Offset: 0x47C383C
    void HandlePointerEventRaised(::Oculus::Interaction::PointerEvent evt);
    // private System.Void UpdateMaterialColor()
    // Offset: 0x47C3664
    void UpdateMaterialColor();
    // public System.Void InjectAllPointableDebugVisual(Oculus.Interaction.IPointable pointable, UnityEngine.Renderer renderer)
    // Offset: 0x47C388C
    void InjectAllPointableDebugVisual(::Oculus::Interaction::IPointable* pointable, ::UnityEngine::Renderer* renderer);
    // public System.Void InjectPointable(Oculus.Interaction.IPointable pointable)
    // Offset: 0x47C38B8
    void InjectPointable(::Oculus::Interaction::IPointable* pointable);
    // public System.Void InjectRenderer(UnityEngine.Renderer renderer)
    // Offset: 0x47C3988
    void InjectRenderer(::UnityEngine::Renderer* renderer);
    // public System.Void .ctor()
    // Offset: 0x47C3990
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PointableDebugVisual* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::PointableDebugVisual::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PointableDebugVisual*, creationType>()));
    }
  }; // Oculus.Interaction.PointableDebugVisual
  #pragma pack(pop)
  static check_size<sizeof(PointableDebugVisual), 114 + sizeof(bool)> __Oculus_Interaction_PointableDebugVisualSizeCheck;
  static_assert(sizeof(PointableDebugVisual) == 0x73);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::PointableDebugVisual::get_NormalColor
// Il2CppName: get_NormalColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (Oculus::Interaction::PointableDebugVisual::*)()>(&Oculus::Interaction::PointableDebugVisual::get_NormalColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableDebugVisual*), "get_NormalColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableDebugVisual::set_NormalColor
// Il2CppName: set_NormalColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PointableDebugVisual::*)(::UnityEngine::Color)>(&Oculus::Interaction::PointableDebugVisual::set_NormalColor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableDebugVisual*), "set_NormalColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableDebugVisual::get_HoverColor
// Il2CppName: get_HoverColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (Oculus::Interaction::PointableDebugVisual::*)()>(&Oculus::Interaction::PointableDebugVisual::get_HoverColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableDebugVisual*), "get_HoverColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableDebugVisual::set_HoverColor
// Il2CppName: set_HoverColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PointableDebugVisual::*)(::UnityEngine::Color)>(&Oculus::Interaction::PointableDebugVisual::set_HoverColor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableDebugVisual*), "set_HoverColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableDebugVisual::get_SelectColor
// Il2CppName: get_SelectColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (Oculus::Interaction::PointableDebugVisual::*)()>(&Oculus::Interaction::PointableDebugVisual::get_SelectColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableDebugVisual*), "get_SelectColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableDebugVisual::set_SelectColor
// Il2CppName: set_SelectColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PointableDebugVisual::*)(::UnityEngine::Color)>(&Oculus::Interaction::PointableDebugVisual::set_SelectColor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableDebugVisual*), "set_SelectColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableDebugVisual::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PointableDebugVisual::*)()>(&Oculus::Interaction::PointableDebugVisual::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableDebugVisual*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableDebugVisual::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PointableDebugVisual::*)()>(&Oculus::Interaction::PointableDebugVisual::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableDebugVisual*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableDebugVisual::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PointableDebugVisual::*)()>(&Oculus::Interaction::PointableDebugVisual::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableDebugVisual*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableDebugVisual::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PointableDebugVisual::*)()>(&Oculus::Interaction::PointableDebugVisual::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableDebugVisual*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableDebugVisual::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PointableDebugVisual::*)()>(&Oculus::Interaction::PointableDebugVisual::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableDebugVisual*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableDebugVisual::HandlePointerEventRaised
// Il2CppName: HandlePointerEventRaised
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PointableDebugVisual::*)(::Oculus::Interaction::PointerEvent)>(&Oculus::Interaction::PointableDebugVisual::HandlePointerEventRaised)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "PointerEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableDebugVisual*), "HandlePointerEventRaised", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableDebugVisual::UpdateMaterialColor
// Il2CppName: UpdateMaterialColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PointableDebugVisual::*)()>(&Oculus::Interaction::PointableDebugVisual::UpdateMaterialColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableDebugVisual*), "UpdateMaterialColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableDebugVisual::InjectAllPointableDebugVisual
// Il2CppName: InjectAllPointableDebugVisual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PointableDebugVisual::*)(::Oculus::Interaction::IPointable*, ::UnityEngine::Renderer*)>(&Oculus::Interaction::PointableDebugVisual::InjectAllPointableDebugVisual)> {
  static const MethodInfo* get() {
    static auto* pointable = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IPointable")->byval_arg;
    static auto* renderer = &::il2cpp_utils::GetClassFromName("UnityEngine", "Renderer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableDebugVisual*), "InjectAllPointableDebugVisual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pointable, renderer});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableDebugVisual::InjectPointable
// Il2CppName: InjectPointable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PointableDebugVisual::*)(::Oculus::Interaction::IPointable*)>(&Oculus::Interaction::PointableDebugVisual::InjectPointable)> {
  static const MethodInfo* get() {
    static auto* pointable = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IPointable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableDebugVisual*), "InjectPointable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pointable});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableDebugVisual::InjectRenderer
// Il2CppName: InjectRenderer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PointableDebugVisual::*)(::UnityEngine::Renderer*)>(&Oculus::Interaction::PointableDebugVisual::InjectRenderer)> {
  static const MethodInfo* get() {
    static auto* renderer = &::il2cpp_utils::GetClassFromName("UnityEngine", "Renderer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableDebugVisual*), "InjectRenderer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderer});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableDebugVisual::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
