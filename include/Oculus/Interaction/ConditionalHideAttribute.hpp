// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.PropertyAttribute
#include "UnityEngine/PropertyAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: ConditionalHideAttribute
  class ConditionalHideAttribute;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::ConditionalHideAttribute);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::ConditionalHideAttribute*, "Oculus.Interaction", "ConditionalHideAttribute");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.ConditionalHideAttribute
  // [TokenAttribute] Offset: FFFFFFFF
  class ConditionalHideAttribute : public ::UnityEngine::PropertyAttribute {
    public:
    // Writing base type padding for base size: 0x14 to desired offset: 0x18
    char ___base_padding[0x4] = {};
    public:
    // private System.String <ConditionalFieldPath>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::StringW ConditionalFieldPath;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Object <HideValue>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    ::Il2CppObject* HideValue;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    public:
    // Deleting conversion operator: operator int
    constexpr operator int() const noexcept = delete;
    // Get instance field reference: private System.String <ConditionalFieldPath>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$ConditionalFieldPath$k__BackingField();
    // Get instance field reference: private System.Object <HideValue>k__BackingField
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_$HideValue$k__BackingField();
    // public System.String get_ConditionalFieldPath()
    // Offset: 0x4770560
    ::StringW get_ConditionalFieldPath();
    // private System.Void set_ConditionalFieldPath(System.String value)
    // Offset: 0x4770568
    void set_ConditionalFieldPath(::StringW value);
    // public System.Object get_HideValue()
    // Offset: 0x4770570
    ::Il2CppObject* get_HideValue();
    // private System.Void set_HideValue(System.Object value)
    // Offset: 0x4770578
    void set_HideValue(::Il2CppObject* value);
    // public System.Void .ctor(System.String fieldName, System.Object hideValue)
    // Offset: 0x4770580
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ConditionalHideAttribute* New_ctor(::StringW fieldName, ::Il2CppObject* hideValue) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::ConditionalHideAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ConditionalHideAttribute*, creationType>(fieldName, hideValue)));
    }
  }; // Oculus.Interaction.ConditionalHideAttribute
  #pragma pack(pop)
  static check_size<sizeof(ConditionalHideAttribute), 32 + sizeof(::Il2CppObject*)> __Oculus_Interaction_ConditionalHideAttributeSizeCheck;
  static_assert(sizeof(ConditionalHideAttribute) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::ConditionalHideAttribute::get_ConditionalFieldPath
// Il2CppName: get_ConditionalFieldPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Oculus::Interaction::ConditionalHideAttribute::*)()>(&Oculus::Interaction::ConditionalHideAttribute::get_ConditionalFieldPath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ConditionalHideAttribute*), "get_ConditionalFieldPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ConditionalHideAttribute::set_ConditionalFieldPath
// Il2CppName: set_ConditionalFieldPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ConditionalHideAttribute::*)(::StringW)>(&Oculus::Interaction::ConditionalHideAttribute::set_ConditionalFieldPath)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ConditionalHideAttribute*), "set_ConditionalFieldPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ConditionalHideAttribute::get_HideValue
// Il2CppName: get_HideValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (Oculus::Interaction::ConditionalHideAttribute::*)()>(&Oculus::Interaction::ConditionalHideAttribute::get_HideValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ConditionalHideAttribute*), "get_HideValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ConditionalHideAttribute::set_HideValue
// Il2CppName: set_HideValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ConditionalHideAttribute::*)(::Il2CppObject*)>(&Oculus::Interaction::ConditionalHideAttribute::set_HideValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ConditionalHideAttribute*), "set_HideValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ConditionalHideAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
