// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Oculus.Interaction.PointerInteractable`2
#include "Oculus/Interaction/PointerInteractable_2.hpp"
// Including type: Oculus.Interaction.IRigidbodyRef
#include "Oculus/Interaction/IRigidbodyRef.hpp"
// Including type: Oculus.Interaction.ICollidersRef
#include "Oculus/Interaction/ICollidersRef.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction
namespace Oculus::Interaction {
  // Forward declaring type: GrabInteractor
  class GrabInteractor;
  // Forward declaring type: PhysicsGrabbable
  class PhysicsGrabbable;
  // Forward declaring type: CollisionInteractionRegistry`2<TInteractor, TInteractable>
  template<typename TInteractor, typename TInteractable>
  class CollisionInteractionRegistry_2;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Collider
  class Collider;
  // Forward declaring type: Rigidbody
  class Rigidbody;
  // Forward declaring type: Transform
  class Transform;
  // Skipping declaration: Pose because it is already included!
  // Skipping declaration: Vector3 because it is already included!
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: GrabInteractable
  class GrabInteractable;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::GrabInteractable);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::GrabInteractable*, "Oculus.Interaction", "GrabInteractable");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // WARNING Size may be invalid!
  // Autogenerated type: Oculus.Interaction.GrabInteractable
  // [TokenAttribute] Offset: FFFFFFFF
  class GrabInteractable : public ::Oculus::Interaction::PointerInteractable_2<::Oculus::Interaction::GrabInteractor*, ::Oculus::Interaction::GrabInteractable*>/*, public ::Oculus::Interaction::IRigidbodyRef, public ::Oculus::Interaction::ICollidersRef*/ {
    public:
    public:
    // private UnityEngine.Collider[] _colliders
    // Size: 0x8
    // Offset: 0xC8
    ::ArrayW<::UnityEngine::Collider*> colliders;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Collider*>) == 0x8);
    // private UnityEngine.Rigidbody _rigidbody
    // Size: 0x8
    // Offset: 0xD0
    ::UnityEngine::Rigidbody* rigidbody;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rigidbody*) == 0x8);
    // private UnityEngine.Transform _grabSource
    // Size: 0x8
    // Offset: 0xD8
    ::UnityEngine::Transform* grabSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private System.Boolean _useClosestPointAsGrabSource
    // Size: 0x1
    // Offset: 0xE0
    bool useClosestPointAsGrabSource;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Single _releaseDistance
    // Size: 0x4
    // Offset: 0xE4
    float releaseDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _resetGrabOnGrabsUpdated
    // Size: 0x1
    // Offset: 0xE8
    bool resetGrabOnGrabsUpdated;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private Oculus.Interaction.PhysicsGrabbable _physicsGrabbable
    // Size: 0x8
    // Offset: 0xF0
    ::Oculus::Interaction::PhysicsGrabbable* physicsGrabbable;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::PhysicsGrabbable*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::IRigidbodyRef
    operator ::Oculus::Interaction::IRigidbodyRef() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::IRigidbodyRef*>(this);
    }
    // Creating interface conversion operator: operator ::Oculus::Interaction::ICollidersRef
    operator ::Oculus::Interaction::ICollidersRef() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::ICollidersRef*>(this);
    }
    // Get static field: static private Oculus.Interaction.CollisionInteractionRegistry`2<Oculus.Interaction.GrabInteractor,Oculus.Interaction.GrabInteractable> _grabRegistry
    static ::Oculus::Interaction::CollisionInteractionRegistry_2<::Oculus::Interaction::GrabInteractor*, ::Oculus::Interaction::GrabInteractable*>* _get__grabRegistry();
    // Set static field: static private Oculus.Interaction.CollisionInteractionRegistry`2<Oculus.Interaction.GrabInteractor,Oculus.Interaction.GrabInteractable> _grabRegistry
    static void _set__grabRegistry(::Oculus::Interaction::CollisionInteractionRegistry_2<::Oculus::Interaction::GrabInteractor*, ::Oculus::Interaction::GrabInteractable*>* value);
    // Get instance field reference: private UnityEngine.Collider[] _colliders
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Collider*>& dyn__colliders();
    // Get instance field reference: private UnityEngine.Rigidbody _rigidbody
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rigidbody*& dyn__rigidbody();
    // Get instance field reference: private UnityEngine.Transform _grabSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__grabSource();
    // Get instance field reference: private System.Boolean _useClosestPointAsGrabSource
    [[deprecated("Use field access instead!")]] bool& dyn__useClosestPointAsGrabSource();
    // Get instance field reference: private System.Single _releaseDistance
    [[deprecated("Use field access instead!")]] float& dyn__releaseDistance();
    // Get instance field reference: private System.Boolean _resetGrabOnGrabsUpdated
    [[deprecated("Use field access instead!")]] bool& dyn__resetGrabOnGrabsUpdated();
    // Get instance field reference: private Oculus.Interaction.PhysicsGrabbable _physicsGrabbable
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::PhysicsGrabbable*& dyn__physicsGrabbable();
    // public UnityEngine.Collider[] get_Colliders()
    // Offset: 0x47A974C
    ::ArrayW<::UnityEngine::Collider*> get_Colliders();
    // public UnityEngine.Rigidbody get_Rigidbody()
    // Offset: 0x47A9754
    ::UnityEngine::Rigidbody* get_Rigidbody();
    // public System.Boolean get_UseClosestPointAsGrabSource()
    // Offset: 0x47A975C
    bool get_UseClosestPointAsGrabSource();
    // public System.Void set_UseClosestPointAsGrabSource(System.Boolean value)
    // Offset: 0x47A9764
    void set_UseClosestPointAsGrabSource(bool value);
    // public System.Single get_ReleaseDistance()
    // Offset: 0x47A9770
    float get_ReleaseDistance();
    // public System.Void set_ReleaseDistance(System.Single value)
    // Offset: 0x47A9778
    void set_ReleaseDistance(float value);
    // public System.Boolean get_ResetGrabOnGrabsUpdated()
    // Offset: 0x47A9780
    bool get_ResetGrabOnGrabsUpdated();
    // public System.Void set_ResetGrabOnGrabsUpdated(System.Boolean value)
    // Offset: 0x47A9788
    void set_ResetGrabOnGrabsUpdated(bool value);
    // public UnityEngine.Pose GetGrabSourceForTarget(UnityEngine.Pose target)
    // Offset: 0x47A994C
    ::UnityEngine::Pose GetGrabSourceForTarget(::UnityEngine::Pose target);
    // public System.Void ApplyVelocities(UnityEngine.Vector3 linearVelocity, UnityEngine.Vector3 angularVelocity)
    // Offset: 0x47A9A4C
    void ApplyVelocities(::UnityEngine::Vector3 linearVelocity, ::UnityEngine::Vector3 angularVelocity);
    // public System.Void InjectAllGrabInteractable(UnityEngine.Rigidbody rigidbody)
    // Offset: 0x47A9B24
    void InjectAllGrabInteractable(::UnityEngine::Rigidbody* rigidbody);
    // public System.Void InjectRigidbody(UnityEngine.Rigidbody rigidbody)
    // Offset: 0x47A9B2C
    void InjectRigidbody(::UnityEngine::Rigidbody* rigidbody);
    // public System.Void InjectOptionalGrabSource(UnityEngine.Transform grabSource)
    // Offset: 0x47A9B34
    void InjectOptionalGrabSource(::UnityEngine::Transform* grabSource);
    // public System.Void InjectOptionalReleaseDistance(System.Single releaseDistance)
    // Offset: 0x47A9B3C
    void InjectOptionalReleaseDistance(float releaseDistance);
    // public System.Void InjectOptionalPhysicsGrabbable(Oculus.Interaction.PhysicsGrabbable physicsGrabbable)
    // Offset: 0x47A9B44
    void InjectOptionalPhysicsGrabbable(::Oculus::Interaction::PhysicsGrabbable* physicsGrabbable);
    // private System.Void <Start>b__22_0()
    // Offset: 0x47A9B9C
    void $Start$b__22_0();
    // protected override System.Void Awake()
    // Offset: 0x47A9794
    // Implemented from: Oculus.Interaction.PointerInteractable`2
    // Base method: System.Void PointerInteractable_2::Awake()
    void Awake();
    // protected override System.Void Start()
    // Offset: 0x47A97DC
    // Implemented from: Oculus.Interaction.PointerInteractable`2
    // Base method: System.Void PointerInteractable_2::Start()
    void Start();
    // public System.Void .ctor()
    // Offset: 0x47A9B4C
    // Implemented from: Oculus.Interaction.PointerInteractable`2
    // Base method: System.Void PointerInteractable_2::.ctor()
    // Base method: System.Void Interactable_2::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GrabInteractable* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::GrabInteractable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GrabInteractable*, creationType>()));
    }
  }; // Oculus.Interaction.GrabInteractable
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::GrabInteractable::get_Colliders
// Il2CppName: get_Colliders
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Collider*> (Oculus::Interaction::GrabInteractable::*)()>(&Oculus::Interaction::GrabInteractable::get_Colliders)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::GrabInteractable*), "get_Colliders", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::GrabInteractable::get_Rigidbody
// Il2CppName: get_Rigidbody
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rigidbody* (Oculus::Interaction::GrabInteractable::*)()>(&Oculus::Interaction::GrabInteractable::get_Rigidbody)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::GrabInteractable*), "get_Rigidbody", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::GrabInteractable::get_UseClosestPointAsGrabSource
// Il2CppName: get_UseClosestPointAsGrabSource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::GrabInteractable::*)()>(&Oculus::Interaction::GrabInteractable::get_UseClosestPointAsGrabSource)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::GrabInteractable*), "get_UseClosestPointAsGrabSource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::GrabInteractable::set_UseClosestPointAsGrabSource
// Il2CppName: set_UseClosestPointAsGrabSource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::GrabInteractable::*)(bool)>(&Oculus::Interaction::GrabInteractable::set_UseClosestPointAsGrabSource)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::GrabInteractable*), "set_UseClosestPointAsGrabSource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::GrabInteractable::get_ReleaseDistance
// Il2CppName: get_ReleaseDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::GrabInteractable::*)()>(&Oculus::Interaction::GrabInteractable::get_ReleaseDistance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::GrabInteractable*), "get_ReleaseDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::GrabInteractable::set_ReleaseDistance
// Il2CppName: set_ReleaseDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::GrabInteractable::*)(float)>(&Oculus::Interaction::GrabInteractable::set_ReleaseDistance)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::GrabInteractable*), "set_ReleaseDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::GrabInteractable::get_ResetGrabOnGrabsUpdated
// Il2CppName: get_ResetGrabOnGrabsUpdated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::GrabInteractable::*)()>(&Oculus::Interaction::GrabInteractable::get_ResetGrabOnGrabsUpdated)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::GrabInteractable*), "get_ResetGrabOnGrabsUpdated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::GrabInteractable::set_ResetGrabOnGrabsUpdated
// Il2CppName: set_ResetGrabOnGrabsUpdated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::GrabInteractable::*)(bool)>(&Oculus::Interaction::GrabInteractable::set_ResetGrabOnGrabsUpdated)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::GrabInteractable*), "set_ResetGrabOnGrabsUpdated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::GrabInteractable::GetGrabSourceForTarget
// Il2CppName: GetGrabSourceForTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Pose (Oculus::Interaction::GrabInteractable::*)(::UnityEngine::Pose)>(&Oculus::Interaction::GrabInteractable::GetGrabSourceForTarget)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::GrabInteractable*), "GetGrabSourceForTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::GrabInteractable::ApplyVelocities
// Il2CppName: ApplyVelocities
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::GrabInteractable::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Oculus::Interaction::GrabInteractable::ApplyVelocities)> {
  static const MethodInfo* get() {
    static auto* linearVelocity = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* angularVelocity = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::GrabInteractable*), "ApplyVelocities", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{linearVelocity, angularVelocity});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::GrabInteractable::InjectAllGrabInteractable
// Il2CppName: InjectAllGrabInteractable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::GrabInteractable::*)(::UnityEngine::Rigidbody*)>(&Oculus::Interaction::GrabInteractable::InjectAllGrabInteractable)> {
  static const MethodInfo* get() {
    static auto* rigidbody = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rigidbody")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::GrabInteractable*), "InjectAllGrabInteractable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rigidbody});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::GrabInteractable::InjectRigidbody
// Il2CppName: InjectRigidbody
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::GrabInteractable::*)(::UnityEngine::Rigidbody*)>(&Oculus::Interaction::GrabInteractable::InjectRigidbody)> {
  static const MethodInfo* get() {
    static auto* rigidbody = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rigidbody")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::GrabInteractable*), "InjectRigidbody", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rigidbody});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::GrabInteractable::InjectOptionalGrabSource
// Il2CppName: InjectOptionalGrabSource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::GrabInteractable::*)(::UnityEngine::Transform*)>(&Oculus::Interaction::GrabInteractable::InjectOptionalGrabSource)> {
  static const MethodInfo* get() {
    static auto* grabSource = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::GrabInteractable*), "InjectOptionalGrabSource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{grabSource});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::GrabInteractable::InjectOptionalReleaseDistance
// Il2CppName: InjectOptionalReleaseDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::GrabInteractable::*)(float)>(&Oculus::Interaction::GrabInteractable::InjectOptionalReleaseDistance)> {
  static const MethodInfo* get() {
    static auto* releaseDistance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::GrabInteractable*), "InjectOptionalReleaseDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{releaseDistance});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::GrabInteractable::InjectOptionalPhysicsGrabbable
// Il2CppName: InjectOptionalPhysicsGrabbable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::GrabInteractable::*)(::Oculus::Interaction::PhysicsGrabbable*)>(&Oculus::Interaction::GrabInteractable::InjectOptionalPhysicsGrabbable)> {
  static const MethodInfo* get() {
    static auto* physicsGrabbable = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "PhysicsGrabbable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::GrabInteractable*), "InjectOptionalPhysicsGrabbable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{physicsGrabbable});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::GrabInteractable::$Start$b__22_0
// Il2CppName: <Start>b__22_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::GrabInteractable::*)()>(&Oculus::Interaction::GrabInteractable::$Start$b__22_0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::GrabInteractable*), "<Start>b__22_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::GrabInteractable::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::GrabInteractable::*)()>(&Oculus::Interaction::GrabInteractable::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::GrabInteractable*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::GrabInteractable::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::GrabInteractable::*)()>(&Oculus::Interaction::GrabInteractable::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::GrabInteractable*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::GrabInteractable::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
