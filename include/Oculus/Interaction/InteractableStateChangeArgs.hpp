// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Oculus.Interaction.InteractableState
#include "Oculus/Interaction/InteractableState.hpp"
// Completed includes
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: InteractableStateChangeArgs
  struct InteractableStateChangeArgs;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::InteractableStateChangeArgs, "Oculus.Interaction", "InteractableStateChangeArgs");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Oculus.Interaction.InteractableStateChangeArgs
  // [TokenAttribute] Offset: FFFFFFFF
  struct InteractableStateChangeArgs/*, public ::System::ValueType*/ {
    public:
    public:
    // private readonly Oculus.Interaction.InteractableState <PreviousState>k__BackingField
    // Size: 0x4
    // Offset: 0x0
    ::Oculus::Interaction::InteractableState PreviousState;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::InteractableState) == 0x4);
    // private readonly Oculus.Interaction.InteractableState <NewState>k__BackingField
    // Size: 0x4
    // Offset: 0x4
    ::Oculus::Interaction::InteractableState NewState;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::InteractableState) == 0x4);
    public:
    // Creating value type constructor for type: InteractableStateChangeArgs
    constexpr InteractableStateChangeArgs(::Oculus::Interaction::InteractableState PreviousState_ = {}, ::Oculus::Interaction::InteractableState NewState_ = {}) noexcept : PreviousState{PreviousState_}, NewState{NewState_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private readonly Oculus.Interaction.InteractableState <PreviousState>k__BackingField
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::InteractableState& dyn_$PreviousState$k__BackingField();
    // Get instance field reference: private readonly Oculus.Interaction.InteractableState <NewState>k__BackingField
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::InteractableState& dyn_$NewState$k__BackingField();
    // public Oculus.Interaction.InteractableState get_PreviousState()
    // Offset: 0x4783350
    ::Oculus::Interaction::InteractableState get_PreviousState();
    // public Oculus.Interaction.InteractableState get_NewState()
    // Offset: 0x4783358
    ::Oculus::Interaction::InteractableState get_NewState();
    // public System.Void .ctor(Oculus.Interaction.InteractableState previousState, Oculus.Interaction.InteractableState newState)
    // Offset: 0x4783360
    // ABORTED: conflicts with another method.  InteractableStateChangeArgs(::Oculus::Interaction::InteractableState previousState, ::Oculus::Interaction::InteractableState newState);
  }; // Oculus.Interaction.InteractableStateChangeArgs
  #pragma pack(pop)
  static check_size<sizeof(InteractableStateChangeArgs), 4 + sizeof(::Oculus::Interaction::InteractableState)> __Oculus_Interaction_InteractableStateChangeArgsSizeCheck;
  static_assert(sizeof(InteractableStateChangeArgs) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::InteractableStateChangeArgs::get_PreviousState
// Il2CppName: get_PreviousState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::InteractableState (Oculus::Interaction::InteractableStateChangeArgs::*)()>(&Oculus::Interaction::InteractableStateChangeArgs::get_PreviousState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractableStateChangeArgs), "get_PreviousState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractableStateChangeArgs::get_NewState
// Il2CppName: get_NewState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::InteractableState (Oculus::Interaction::InteractableStateChangeArgs::*)()>(&Oculus::Interaction::InteractableStateChangeArgs::get_NewState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractableStateChangeArgs), "get_NewState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractableStateChangeArgs::InteractableStateChangeArgs
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
