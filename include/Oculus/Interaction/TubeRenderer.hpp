// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Rendering.VertexAttributeDescriptor
#include "UnityEngine/Rendering/VertexAttributeDescriptor.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: Unity.Collections.NativeArray`1
#include "Unity/Collections/NativeArray_1.hpp"
// Including type: Oculus.Interaction.TubePoint
#include "Oculus/Interaction/TubePoint.hpp"
// Including type: UnityEngine.Color32
#include "UnityEngine/Color32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Mesh
  class Mesh;
  // Forward declaring type: MeshFilter
  class MeshFilter;
  // Forward declaring type: MeshRenderer
  class MeshRenderer;
  // Forward declaring type: Gradient
  class Gradient;
  // Forward declaring type: Space
  struct Space;
  // Forward declaring type: Pose
  struct Pose;
  // Skipping declaration: Quaternion because it is already included!
}
// Forward declaring namespace: Oculus::Interaction
namespace Oculus::Interaction {
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: TubeRenderer
  class TubeRenderer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::TubeRenderer);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::TubeRenderer*, "Oculus.Interaction", "TubeRenderer");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // WARNING Size may be invalid!
  // Autogenerated type: Oculus.Interaction.TubeRenderer
  // [TokenAttribute] Offset: FFFFFFFF
  class TubeRenderer : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::Oculus::Interaction::TubeRenderer::VertexLayout
    struct VertexLayout;
    // Nested type: ::Oculus::Interaction::TubeRenderer::$$c__DisplayClass73_0
    struct $$c__DisplayClass73_0;
    // Size: 0x18
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Oculus.Interaction.TubeRenderer/VertexLayout
    // [TokenAttribute] Offset: FFFFFFFF
    struct VertexLayout/*, public ::System::ValueType*/ {
      public:
      public:
      // public UnityEngine.Vector3 pos
      // Size: 0xC
      // Offset: 0x0
      ::UnityEngine::Vector3 pos;
      // Field size check
      static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
      // public UnityEngine.Color32 color
      // Size: 0x4
      // Offset: 0xC
      ::UnityEngine::Color32 color;
      // Field size check
      static_assert(sizeof(::UnityEngine::Color32) == 0x4);
      // public UnityEngine.Vector2 uv
      // Size: 0x8
      // Offset: 0x10
      ::UnityEngine::Vector2 uv;
      // Field size check
      static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
      public:
      // Creating value type constructor for type: VertexLayout
      constexpr VertexLayout(::UnityEngine::Vector3 pos_ = {}, ::UnityEngine::Color32 color_ = {}, ::UnityEngine::Vector2 uv_ = {}) noexcept : pos{pos_}, color{color_}, uv{uv_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public UnityEngine.Vector3 pos
      [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_pos();
      // Get instance field reference: public UnityEngine.Color32 color
      [[deprecated("Use field access instead!")]] ::UnityEngine::Color32& dyn_color();
      // Get instance field reference: public UnityEngine.Vector2 uv
      [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_uv();
    }; // Oculus.Interaction.TubeRenderer/VertexLayout
    #pragma pack(pop)
    static check_size<sizeof(TubeRenderer::VertexLayout), 16 + sizeof(::UnityEngine::Vector2)> __Oculus_Interaction_TubeRenderer_VertexLayoutSizeCheck;
    static_assert(sizeof(TubeRenderer::VertexLayout) == 0x18);
    public:
    // private UnityEngine.MeshFilter _filter
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::MeshFilter* filter;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshFilter*) == 0x8);
    // private UnityEngine.MeshRenderer _renderer
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::MeshRenderer* renderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshRenderer*) == 0x8);
    // private System.Int32 _divisions
    // Size: 0x4
    // Offset: 0x30
    int divisions;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _bevel
    // Size: 0x4
    // Offset: 0x34
    int bevel;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _renderQueue
    // Size: 0x4
    // Offset: 0x38
    int renderQueue;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Vector2 _renderOffset
    // Size: 0x8
    // Offset: 0x3C
    ::UnityEngine::Vector2 renderOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private System.Single _radius
    // Size: 0x4
    // Offset: 0x44
    float radius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Gradient _gradient
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Gradient* gradient;
    // Field size check
    static_assert(sizeof(::UnityEngine::Gradient*) == 0x8);
    // private UnityEngine.Color _tint
    // Size: 0x10
    // Offset: 0x50
    ::UnityEngine::Color tint;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private System.Single _progressFade
    // Size: 0x4
    // Offset: 0x60
    float progressFade;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _startFadeThresold
    // Size: 0x4
    // Offset: 0x64
    float startFadeThresold;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _endFadeThresold
    // Size: 0x4
    // Offset: 0x68
    float endFadeThresold;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _invertThreshold
    // Size: 0x1
    // Offset: 0x6C
    bool invertThreshold;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Single _feather
    // Size: 0x4
    // Offset: 0x70
    float feather;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _mirrorTexture
    // Size: 0x1
    // Offset: 0x74
    bool mirrorTexture;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Single <Progress>k__BackingField
    // Size: 0x4
    // Offset: 0x78
    float Progress;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Rendering.VertexAttributeDescriptor[] _dataLayout
    // Size: 0x8
    // Offset: 0x80
    ::ArrayW<::UnityEngine::Rendering::VertexAttributeDescriptor> dataLayout;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Rendering::VertexAttributeDescriptor>) == 0x8);
    // private Unity.Collections.NativeArray`1<Oculus.Interaction.TubeRenderer/VertexLayout> _vertsData
    // Size: 0xFFFFFFFF
    // Offset: 0x88
    ::Unity::Collections::NativeArray_1<::Oculus::Interaction::TubeRenderer::VertexLayout> vertsData;
    // private Oculus.Interaction.TubeRenderer/VertexLayout _layout
    // Size: 0x18
    // Offset: 0x98
    ::Oculus::Interaction::TubeRenderer::VertexLayout layout;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::TubeRenderer::VertexLayout) == 0x18);
    // private UnityEngine.Mesh _mesh
    // Size: 0x8
    // Offset: 0xB0
    ::UnityEngine::Mesh* mesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::Mesh*) == 0x8);
    // private System.Int32[] _tris
    // Size: 0x8
    // Offset: 0xB8
    ::ArrayW<int> tris;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // private System.Int32 _initializedSteps
    // Size: 0x4
    // Offset: 0xC0
    int initializedSteps;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _vertsCount
    // Size: 0x4
    // Offset: 0xC4
    int vertsCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single _totalLength
    // Size: 0x4
    // Offset: 0xC8
    float totalLength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get static field: static private readonly System.Int32 _fadeLimitsShaderID
    static int _get__fadeLimitsShaderID();
    // Set static field: static private readonly System.Int32 _fadeLimitsShaderID
    static void _set__fadeLimitsShaderID(int value);
    // Get static field: static private readonly System.Int32 _fadeSignShaderID
    static int _get__fadeSignShaderID();
    // Set static field: static private readonly System.Int32 _fadeSignShaderID
    static void _set__fadeSignShaderID(int value);
    // Get static field: static private readonly System.Int32 _offsetFactorShaderPropertyID
    static int _get__offsetFactorShaderPropertyID();
    // Set static field: static private readonly System.Int32 _offsetFactorShaderPropertyID
    static void _set__offsetFactorShaderPropertyID(int value);
    // Get static field: static private readonly System.Int32 _offsetUnitsShaderPropertyID
    static int _get__offsetUnitsShaderPropertyID();
    // Set static field: static private readonly System.Int32 _offsetUnitsShaderPropertyID
    static void _set__offsetUnitsShaderPropertyID(int value);
    // Get instance field reference: private UnityEngine.MeshFilter _filter
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshFilter*& dyn__filter();
    // Get instance field reference: private UnityEngine.MeshRenderer _renderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& dyn__renderer();
    // Get instance field reference: private System.Int32 _divisions
    [[deprecated("Use field access instead!")]] int& dyn__divisions();
    // Get instance field reference: private System.Int32 _bevel
    [[deprecated("Use field access instead!")]] int& dyn__bevel();
    // Get instance field reference: private System.Int32 _renderQueue
    [[deprecated("Use field access instead!")]] int& dyn__renderQueue();
    // Get instance field reference: private UnityEngine.Vector2 _renderOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn__renderOffset();
    // Get instance field reference: private System.Single _radius
    [[deprecated("Use field access instead!")]] float& dyn__radius();
    // Get instance field reference: private UnityEngine.Gradient _gradient
    [[deprecated("Use field access instead!")]] ::UnityEngine::Gradient*& dyn__gradient();
    // Get instance field reference: private UnityEngine.Color _tint
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__tint();
    // Get instance field reference: private System.Single _progressFade
    [[deprecated("Use field access instead!")]] float& dyn__progressFade();
    // Get instance field reference: private System.Single _startFadeThresold
    [[deprecated("Use field access instead!")]] float& dyn__startFadeThresold();
    // Get instance field reference: private System.Single _endFadeThresold
    [[deprecated("Use field access instead!")]] float& dyn__endFadeThresold();
    // Get instance field reference: private System.Boolean _invertThreshold
    [[deprecated("Use field access instead!")]] bool& dyn__invertThreshold();
    // Get instance field reference: private System.Single _feather
    [[deprecated("Use field access instead!")]] float& dyn__feather();
    // Get instance field reference: private System.Boolean _mirrorTexture
    [[deprecated("Use field access instead!")]] bool& dyn__mirrorTexture();
    // Get instance field reference: private System.Single <Progress>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$Progress$k__BackingField();
    // Get instance field reference: private UnityEngine.Rendering.VertexAttributeDescriptor[] _dataLayout
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Rendering::VertexAttributeDescriptor>& dyn__dataLayout();
    // Get instance field reference: private Unity.Collections.NativeArray`1<Oculus.Interaction.TubeRenderer/VertexLayout> _vertsData
    [[deprecated("Use field access instead!")]] ::Unity::Collections::NativeArray_1<::Oculus::Interaction::TubeRenderer::VertexLayout>& dyn__vertsData();
    // Get instance field reference: private Oculus.Interaction.TubeRenderer/VertexLayout _layout
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::TubeRenderer::VertexLayout& dyn__layout();
    // Get instance field reference: private UnityEngine.Mesh _mesh
    [[deprecated("Use field access instead!")]] ::UnityEngine::Mesh*& dyn__mesh();
    // Get instance field reference: private System.Int32[] _tris
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn__tris();
    // Get instance field reference: private System.Int32 _initializedSteps
    [[deprecated("Use field access instead!")]] int& dyn__initializedSteps();
    // Get instance field reference: private System.Int32 _vertsCount
    [[deprecated("Use field access instead!")]] int& dyn__vertsCount();
    // Get instance field reference: private System.Single _totalLength
    [[deprecated("Use field access instead!")]] float& dyn__totalLength();
    // public System.Int32 get_RenderQueue()
    // Offset: 0x4771340
    int get_RenderQueue();
    // public System.Void set_RenderQueue(System.Int32 value)
    // Offset: 0x4771348
    void set_RenderQueue(int value);
    // public UnityEngine.Vector2 get_RenderOffset()
    // Offset: 0x4771350
    ::UnityEngine::Vector2 get_RenderOffset();
    // public System.Void set_RenderOffset(UnityEngine.Vector2 value)
    // Offset: 0x4771358
    void set_RenderOffset(::UnityEngine::Vector2 value);
    // public System.Single get_Radius()
    // Offset: 0x4771360
    float get_Radius();
    // public System.Void set_Radius(System.Single value)
    // Offset: 0x4771368
    void set_Radius(float value);
    // public UnityEngine.Gradient get_Gradient()
    // Offset: 0x4771370
    ::UnityEngine::Gradient* get_Gradient();
    // public System.Void set_Gradient(UnityEngine.Gradient value)
    // Offset: 0x4771378
    void set_Gradient(::UnityEngine::Gradient* value);
    // public UnityEngine.Color get_Tint()
    // Offset: 0x4771380
    ::UnityEngine::Color get_Tint();
    // public System.Void set_Tint(UnityEngine.Color value)
    // Offset: 0x477138C
    void set_Tint(::UnityEngine::Color value);
    // public System.Single get_ProgressFade()
    // Offset: 0x4771398
    float get_ProgressFade();
    // public System.Void set_ProgressFade(System.Single value)
    // Offset: 0x47713A0
    void set_ProgressFade(float value);
    // public System.Single get_StartFadeThresold()
    // Offset: 0x47713A8
    float get_StartFadeThresold();
    // public System.Void set_StartFadeThresold(System.Single value)
    // Offset: 0x47713B0
    void set_StartFadeThresold(float value);
    // public System.Single get_EndFadeThresold()
    // Offset: 0x47713B8
    float get_EndFadeThresold();
    // public System.Void set_EndFadeThresold(System.Single value)
    // Offset: 0x47713C0
    void set_EndFadeThresold(float value);
    // public System.Boolean get_InvertThreshold()
    // Offset: 0x47713C8
    bool get_InvertThreshold();
    // public System.Void set_InvertThreshold(System.Boolean value)
    // Offset: 0x47713D0
    void set_InvertThreshold(bool value);
    // public System.Single get_Feather()
    // Offset: 0x47713DC
    float get_Feather();
    // public System.Void set_Feather(System.Single value)
    // Offset: 0x47713E4
    void set_Feather(float value);
    // public System.Boolean get_MirrorTexture()
    // Offset: 0x47713EC
    bool get_MirrorTexture();
    // public System.Void set_MirrorTexture(System.Boolean value)
    // Offset: 0x47713F4
    void set_MirrorTexture(bool value);
    // public System.Single get_Progress()
    // Offset: 0x4771400
    float get_Progress();
    // public System.Void set_Progress(System.Single value)
    // Offset: 0x4771408
    void set_Progress(float value);
    // public System.Single get_TotalLength()
    // Offset: 0x4771410
    float get_TotalLength();
    // protected System.Void Reset()
    // Offset: 0x4771418
    void Reset();
    // protected System.Void OnEnable()
    // Offset: 0x47714A8
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x47714C8
    void OnDisable();
    // public System.Void RenderTube(Oculus.Interaction.TubePoint[] points, UnityEngine.Space space)
    // Offset: 0x47714E8
    void RenderTube(::ArrayW<::Oculus::Interaction::TubePoint> points, ::UnityEngine::Space space);
    // public System.Void Hide()
    // Offset: 0x4771D84
    void Hide();
    // private System.Void InitializeMeshData(System.Int32 steps)
    // Offset: 0x47715C0
    void InitializeMeshData(int steps);
    // private System.Void UpdateMeshData(Oculus.Interaction.TubePoint[] points, UnityEngine.Space space)
    // Offset: 0x477182C
    void UpdateMeshData(::ArrayW<::Oculus::Interaction::TubePoint> points, ::UnityEngine::Space space);
    // public System.Void RedrawFadeThresholds()
    // Offset: 0x47723BC
    void RedrawFadeThresholds();
    // private System.Void BevelCap(in UnityEngine.Pose pose, System.Boolean end, System.Int32 indexOffset)
    // Offset: 0x477207C
    void BevelCap(ByRef<::UnityEngine::Pose> pose, bool end, int indexOffset);
    // private System.Void WriteCircle(UnityEngine.Vector3 point, UnityEngine.Quaternion rotation, System.Single width, System.Int32 index, System.Single progress)
    // Offset: 0x4772228
    void WriteCircle(::UnityEngine::Vector3 point, ::UnityEngine::Quaternion rotation, float width, int index, float progress);
    // private System.Int32 SetVertexCount(System.Int32 positionCount, System.Int32 divisions, System.Int32 bevelCap)
    // Offset: 0x4771DA4
    int SetVertexCount(int positionCount, int divisions, int bevelCap);
    // public System.Void InjectAllTubeRenderer(UnityEngine.MeshFilter filter, UnityEngine.MeshRenderer renderer, System.Int32 divisions, System.Int32 bevel)
    // Offset: 0x4772614
    void InjectAllTubeRenderer(::UnityEngine::MeshFilter* filter, ::UnityEngine::MeshRenderer* renderer, int divisions, int bevel);
    // public System.Void InjectFilter(UnityEngine.MeshFilter filter)
    // Offset: 0x477265C
    void InjectFilter(::UnityEngine::MeshFilter* filter);
    // public System.Void InjectRenderer(UnityEngine.MeshRenderer renderer)
    // Offset: 0x4772664
    void InjectRenderer(::UnityEngine::MeshRenderer* renderer);
    // public System.Void InjectDivisions(System.Int32 divisions)
    // Offset: 0x477266C
    void InjectDivisions(int divisions);
    // public System.Void InjectBevel(System.Int32 bevel)
    // Offset: 0x4772674
    void InjectBevel(int bevel);
    // public System.Void .ctor()
    // Offset: 0x477267C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TubeRenderer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::TubeRenderer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TubeRenderer*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x4772718
    static void _cctor();
    // static System.Void <UpdateMeshData>g__TransformPose|73_0(in Oculus.Interaction.TubePoint tubePoint, ref UnityEngine.Pose pose, ref Oculus.Interaction.TubeRenderer/<>c__DisplayClass73_0 )
    // Offset: 0x4771F78
    static void $UpdateMeshData$g__TransformPose_73_0(ByRef<::Oculus::Interaction::TubePoint> tubePoint, ByRef<::UnityEngine::Pose> pose, ByRef<::Oculus::Interaction::TubeRenderer::$$c__DisplayClass73_0> param_2);
    // private System.Void <SetVertexCount>g__Cap|77_0(System.Int32 t, System.Int32 firstVert, System.Int32 lastVert, System.Boolean clockwise)
    // Offset: 0x4772574
    void $SetVertexCount$g__Cap_77_0(int t, int firstVert, int lastVert, bool clockwise);
  }; // Oculus.Interaction.TubeRenderer
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::TubeRenderer::VertexLayout, "Oculus.Interaction", "TubeRenderer/VertexLayout");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::TubeRenderer::get_RenderQueue
// Il2CppName: get_RenderQueue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Oculus::Interaction::TubeRenderer::*)()>(&Oculus::Interaction::TubeRenderer::get_RenderQueue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TubeRenderer*), "get_RenderQueue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TubeRenderer::set_RenderQueue
// Il2CppName: set_RenderQueue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TubeRenderer::*)(int)>(&Oculus::Interaction::TubeRenderer::set_RenderQueue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TubeRenderer*), "set_RenderQueue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TubeRenderer::get_RenderOffset
// Il2CppName: get_RenderOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (Oculus::Interaction::TubeRenderer::*)()>(&Oculus::Interaction::TubeRenderer::get_RenderOffset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TubeRenderer*), "get_RenderOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TubeRenderer::set_RenderOffset
// Il2CppName: set_RenderOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TubeRenderer::*)(::UnityEngine::Vector2)>(&Oculus::Interaction::TubeRenderer::set_RenderOffset)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TubeRenderer*), "set_RenderOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TubeRenderer::get_Radius
// Il2CppName: get_Radius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::TubeRenderer::*)()>(&Oculus::Interaction::TubeRenderer::get_Radius)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TubeRenderer*), "get_Radius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TubeRenderer::set_Radius
// Il2CppName: set_Radius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TubeRenderer::*)(float)>(&Oculus::Interaction::TubeRenderer::set_Radius)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TubeRenderer*), "set_Radius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TubeRenderer::get_Gradient
// Il2CppName: get_Gradient
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Gradient* (Oculus::Interaction::TubeRenderer::*)()>(&Oculus::Interaction::TubeRenderer::get_Gradient)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TubeRenderer*), "get_Gradient", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TubeRenderer::set_Gradient
// Il2CppName: set_Gradient
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TubeRenderer::*)(::UnityEngine::Gradient*)>(&Oculus::Interaction::TubeRenderer::set_Gradient)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Gradient")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TubeRenderer*), "set_Gradient", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TubeRenderer::get_Tint
// Il2CppName: get_Tint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (Oculus::Interaction::TubeRenderer::*)()>(&Oculus::Interaction::TubeRenderer::get_Tint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TubeRenderer*), "get_Tint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TubeRenderer::set_Tint
// Il2CppName: set_Tint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TubeRenderer::*)(::UnityEngine::Color)>(&Oculus::Interaction::TubeRenderer::set_Tint)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TubeRenderer*), "set_Tint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TubeRenderer::get_ProgressFade
// Il2CppName: get_ProgressFade
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::TubeRenderer::*)()>(&Oculus::Interaction::TubeRenderer::get_ProgressFade)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TubeRenderer*), "get_ProgressFade", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TubeRenderer::set_ProgressFade
// Il2CppName: set_ProgressFade
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TubeRenderer::*)(float)>(&Oculus::Interaction::TubeRenderer::set_ProgressFade)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TubeRenderer*), "set_ProgressFade", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TubeRenderer::get_StartFadeThresold
// Il2CppName: get_StartFadeThresold
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::TubeRenderer::*)()>(&Oculus::Interaction::TubeRenderer::get_StartFadeThresold)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TubeRenderer*), "get_StartFadeThresold", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TubeRenderer::set_StartFadeThresold
// Il2CppName: set_StartFadeThresold
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TubeRenderer::*)(float)>(&Oculus::Interaction::TubeRenderer::set_StartFadeThresold)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TubeRenderer*), "set_StartFadeThresold", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TubeRenderer::get_EndFadeThresold
// Il2CppName: get_EndFadeThresold
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::TubeRenderer::*)()>(&Oculus::Interaction::TubeRenderer::get_EndFadeThresold)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TubeRenderer*), "get_EndFadeThresold", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TubeRenderer::set_EndFadeThresold
// Il2CppName: set_EndFadeThresold
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TubeRenderer::*)(float)>(&Oculus::Interaction::TubeRenderer::set_EndFadeThresold)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TubeRenderer*), "set_EndFadeThresold", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TubeRenderer::get_InvertThreshold
// Il2CppName: get_InvertThreshold
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::TubeRenderer::*)()>(&Oculus::Interaction::TubeRenderer::get_InvertThreshold)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TubeRenderer*), "get_InvertThreshold", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TubeRenderer::set_InvertThreshold
// Il2CppName: set_InvertThreshold
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TubeRenderer::*)(bool)>(&Oculus::Interaction::TubeRenderer::set_InvertThreshold)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TubeRenderer*), "set_InvertThreshold", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TubeRenderer::get_Feather
// Il2CppName: get_Feather
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::TubeRenderer::*)()>(&Oculus::Interaction::TubeRenderer::get_Feather)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TubeRenderer*), "get_Feather", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TubeRenderer::set_Feather
// Il2CppName: set_Feather
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TubeRenderer::*)(float)>(&Oculus::Interaction::TubeRenderer::set_Feather)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TubeRenderer*), "set_Feather", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TubeRenderer::get_MirrorTexture
// Il2CppName: get_MirrorTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::TubeRenderer::*)()>(&Oculus::Interaction::TubeRenderer::get_MirrorTexture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TubeRenderer*), "get_MirrorTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TubeRenderer::set_MirrorTexture
// Il2CppName: set_MirrorTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TubeRenderer::*)(bool)>(&Oculus::Interaction::TubeRenderer::set_MirrorTexture)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TubeRenderer*), "set_MirrorTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TubeRenderer::get_Progress
// Il2CppName: get_Progress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::TubeRenderer::*)()>(&Oculus::Interaction::TubeRenderer::get_Progress)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TubeRenderer*), "get_Progress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TubeRenderer::set_Progress
// Il2CppName: set_Progress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TubeRenderer::*)(float)>(&Oculus::Interaction::TubeRenderer::set_Progress)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TubeRenderer*), "set_Progress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TubeRenderer::get_TotalLength
// Il2CppName: get_TotalLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::TubeRenderer::*)()>(&Oculus::Interaction::TubeRenderer::get_TotalLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TubeRenderer*), "get_TotalLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TubeRenderer::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TubeRenderer::*)()>(&Oculus::Interaction::TubeRenderer::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TubeRenderer*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TubeRenderer::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TubeRenderer::*)()>(&Oculus::Interaction::TubeRenderer::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TubeRenderer*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TubeRenderer::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TubeRenderer::*)()>(&Oculus::Interaction::TubeRenderer::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TubeRenderer*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TubeRenderer::RenderTube
// Il2CppName: RenderTube
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TubeRenderer::*)(::ArrayW<::Oculus::Interaction::TubePoint>, ::UnityEngine::Space)>(&Oculus::Interaction::TubeRenderer::RenderTube)> {
  static const MethodInfo* get() {
    static auto* points = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Oculus.Interaction", "TubePoint"), 1)->byval_arg;
    static auto* space = &::il2cpp_utils::GetClassFromName("UnityEngine", "Space")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TubeRenderer*), "RenderTube", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{points, space});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TubeRenderer::Hide
// Il2CppName: Hide
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TubeRenderer::*)()>(&Oculus::Interaction::TubeRenderer::Hide)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TubeRenderer*), "Hide", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TubeRenderer::InitializeMeshData
// Il2CppName: InitializeMeshData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TubeRenderer::*)(int)>(&Oculus::Interaction::TubeRenderer::InitializeMeshData)> {
  static const MethodInfo* get() {
    static auto* steps = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TubeRenderer*), "InitializeMeshData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{steps});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TubeRenderer::UpdateMeshData
// Il2CppName: UpdateMeshData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TubeRenderer::*)(::ArrayW<::Oculus::Interaction::TubePoint>, ::UnityEngine::Space)>(&Oculus::Interaction::TubeRenderer::UpdateMeshData)> {
  static const MethodInfo* get() {
    static auto* points = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Oculus.Interaction", "TubePoint"), 1)->byval_arg;
    static auto* space = &::il2cpp_utils::GetClassFromName("UnityEngine", "Space")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TubeRenderer*), "UpdateMeshData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{points, space});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TubeRenderer::RedrawFadeThresholds
// Il2CppName: RedrawFadeThresholds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TubeRenderer::*)()>(&Oculus::Interaction::TubeRenderer::RedrawFadeThresholds)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TubeRenderer*), "RedrawFadeThresholds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TubeRenderer::BevelCap
// Il2CppName: BevelCap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TubeRenderer::*)(ByRef<::UnityEngine::Pose>, bool, int)>(&Oculus::Interaction::TubeRenderer::BevelCap)> {
  static const MethodInfo* get() {
    static auto* pose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* indexOffset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TubeRenderer*), "BevelCap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pose, end, indexOffset});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TubeRenderer::WriteCircle
// Il2CppName: WriteCircle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TubeRenderer::*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion, float, int, float)>(&Oculus::Interaction::TubeRenderer::WriteCircle)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* width = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* progress = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TubeRenderer*), "WriteCircle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point, rotation, width, index, progress});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TubeRenderer::SetVertexCount
// Il2CppName: SetVertexCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Oculus::Interaction::TubeRenderer::*)(int, int, int)>(&Oculus::Interaction::TubeRenderer::SetVertexCount)> {
  static const MethodInfo* get() {
    static auto* positionCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* divisions = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bevelCap = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TubeRenderer*), "SetVertexCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{positionCount, divisions, bevelCap});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TubeRenderer::InjectAllTubeRenderer
// Il2CppName: InjectAllTubeRenderer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TubeRenderer::*)(::UnityEngine::MeshFilter*, ::UnityEngine::MeshRenderer*, int, int)>(&Oculus::Interaction::TubeRenderer::InjectAllTubeRenderer)> {
  static const MethodInfo* get() {
    static auto* filter = &::il2cpp_utils::GetClassFromName("UnityEngine", "MeshFilter")->byval_arg;
    static auto* renderer = &::il2cpp_utils::GetClassFromName("UnityEngine", "MeshRenderer")->byval_arg;
    static auto* divisions = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bevel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TubeRenderer*), "InjectAllTubeRenderer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{filter, renderer, divisions, bevel});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TubeRenderer::InjectFilter
// Il2CppName: InjectFilter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TubeRenderer::*)(::UnityEngine::MeshFilter*)>(&Oculus::Interaction::TubeRenderer::InjectFilter)> {
  static const MethodInfo* get() {
    static auto* filter = &::il2cpp_utils::GetClassFromName("UnityEngine", "MeshFilter")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TubeRenderer*), "InjectFilter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{filter});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TubeRenderer::InjectRenderer
// Il2CppName: InjectRenderer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TubeRenderer::*)(::UnityEngine::MeshRenderer*)>(&Oculus::Interaction::TubeRenderer::InjectRenderer)> {
  static const MethodInfo* get() {
    static auto* renderer = &::il2cpp_utils::GetClassFromName("UnityEngine", "MeshRenderer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TubeRenderer*), "InjectRenderer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderer});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TubeRenderer::InjectDivisions
// Il2CppName: InjectDivisions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TubeRenderer::*)(int)>(&Oculus::Interaction::TubeRenderer::InjectDivisions)> {
  static const MethodInfo* get() {
    static auto* divisions = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TubeRenderer*), "InjectDivisions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{divisions});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TubeRenderer::InjectBevel
// Il2CppName: InjectBevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TubeRenderer::*)(int)>(&Oculus::Interaction::TubeRenderer::InjectBevel)> {
  static const MethodInfo* get() {
    static auto* bevel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TubeRenderer*), "InjectBevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bevel});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TubeRenderer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Interaction::TubeRenderer::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Oculus::Interaction::TubeRenderer::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TubeRenderer*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TubeRenderer::$UpdateMeshData$g__TransformPose_73_0
// Il2CppName: <UpdateMeshData>g__TransformPose|73_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::Oculus::Interaction::TubePoint>, ByRef<::UnityEngine::Pose>, ByRef<::Oculus::Interaction::TubeRenderer::$$c__DisplayClass73_0>)>(&Oculus::Interaction::TubeRenderer::$UpdateMeshData$g__TransformPose_73_0)> {
  static const MethodInfo* get() {
    static auto* tubePoint = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "TubePoint")->this_arg;
    static auto* pose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    static auto* param_2 = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "TubeRenderer/<>c__DisplayClass73_0")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TubeRenderer*), "<UpdateMeshData>g__TransformPose|73_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tubePoint, pose, param_2});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TubeRenderer::$SetVertexCount$g__Cap_77_0
// Il2CppName: <SetVertexCount>g__Cap|77_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TubeRenderer::*)(int, int, int, bool)>(&Oculus::Interaction::TubeRenderer::$SetVertexCount$g__Cap_77_0)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* firstVert = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* lastVert = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* clockwise = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TubeRenderer*), "<SetVertexCount>g__Cap|77_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, firstVert, lastVert, clockwise});
  }
};
