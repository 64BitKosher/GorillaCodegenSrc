// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Oculus.Interaction.MAction`1
#include "Oculus/Interaction/MAction_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: MultiAction`1<T>
  template<typename T>
  class MultiAction_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::Oculus::Interaction::MultiAction_1, "Oculus.Interaction", "MultiAction`1");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // WARNING Size may be invalid!
  // Autogenerated type: Oculus.Interaction.MultiAction`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class MultiAction_1 : public ::Il2CppObject/*, public ::Oculus::Interaction::MAction_1<T>*/ {
    public:
    public:
    // protected System.Collections.Generic.HashSet`1<System.Action`1<T>> actions
    // Size: 0x8
    // Offset: 0x0
    ::System::Collections::Generic::HashSet_1<::System::Action_1<T>*>* actions;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<::System::Action_1<T>*>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::MAction_1<T>
    operator ::Oculus::Interaction::MAction_1<T>() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::MAction_1<T>*>(this);
    }
    // Creating conversion operator: operator ::System::Collections::Generic::HashSet_1<::System::Action_1<T>*>*
    constexpr operator ::System::Collections::Generic::HashSet_1<::System::Action_1<T>*>*() const noexcept {
      return actions;
    }
    // Autogenerated instance field getter
    // Get instance field: protected System.Collections.Generic.HashSet`1<System.Action`1<T>> actions
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::System::Action_1<T>*>*& dyn_actions() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::MultiAction_1::dyn_actions");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "actions"))->offset;
      return *reinterpret_cast<::System::Collections::Generic::HashSet_1<::System::Action_1<T>*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Void add_Action(System.Action`1<T> value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void add_Action(::System::Action_1<T>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::MultiAction_1::add_Action");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Oculus::Interaction::MultiAction_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Void remove_Action(System.Action`1<T> value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void remove_Action(::System::Action_1<T>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::MultiAction_1::remove_Action");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Oculus::Interaction::MultiAction_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Void Invoke(T t)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Invoke(T t) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::MultiAction_1::Invoke");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, t);
    }
    // public System.Void .ctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MultiAction_1<T>* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::MultiAction_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MultiAction_1<T>*, creationType>()));
    }
  }; // Oculus.Interaction.MultiAction`1
  // Could not write size check! Type: Oculus.Interaction.MultiAction`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
