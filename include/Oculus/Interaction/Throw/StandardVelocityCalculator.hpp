// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Oculus.Interaction.Throw.IVelocityCalculator
#include "Oculus/Interaction/Throw/IVelocityCalculator.hpp"
// Including type: Oculus.Interaction.Input.OneEuroFilterPropertyBlock
#include "Oculus/Interaction/Input/OneEuroFilterPropertyBlock.hpp"
// Including type: System.Nullable`1
#include "System/Nullable_1.hpp"
// Including type: UnityEngine.Pose
#include "UnityEngine/Pose.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction::Throw
namespace Oculus::Interaction::Throw {
  // Forward declaring type: IPoseInputDevice
  class IPoseInputDevice;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`1<TResult>
  template<typename TResult>
  class Func_1;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: ValueTuple`2<T1, T2>
  template<typename T1, typename T2>
  struct ValueTuple_2;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Object because it is already included!
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: Oculus::Interaction::Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: IOneEuroFilter`1<TData>
  template<typename TData>
  class IOneEuroFilter_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: IReadOnlyList`1<T>
  template<typename T>
  class IReadOnlyList_1;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.Throw
namespace Oculus::Interaction::Throw {
  // Forward declaring type: StandardVelocityCalculator
  class StandardVelocityCalculator;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Throw::StandardVelocityCalculator);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Throw::StandardVelocityCalculator*, "Oculus.Interaction.Throw", "StandardVelocityCalculator");
// Type namespace: Oculus.Interaction.Throw
namespace Oculus::Interaction::Throw {
  // WARNING Size may be invalid!
  // Autogenerated type: Oculus.Interaction.Throw.StandardVelocityCalculator
  // [TokenAttribute] Offset: FFFFFFFF
  class StandardVelocityCalculator : public ::UnityEngine::MonoBehaviour/*, public ::Oculus::Interaction::Throw::IVelocityCalculator*/ {
    public:
    // Nested type: ::Oculus::Interaction::Throw::StandardVelocityCalculator::BufferingParams
    class BufferingParams;
    // Nested type: ::Oculus::Interaction::Throw::StandardVelocityCalculator::SamplePoseData
    struct SamplePoseData;
    // Nested type: ::Oculus::Interaction::Throw::StandardVelocityCalculator::$$c
    class $$c;
    // Size: 0x38
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Oculus.Interaction.Throw.StandardVelocityCalculator/SamplePoseData
    // [TokenAttribute] Offset: FFFFFFFF
    struct SamplePoseData/*, public ::System::ValueType*/ {
      public:
      public:
      // public readonly UnityEngine.Pose TransformPose
      // Size: 0x1C
      // Offset: 0x0
      ::UnityEngine::Pose TransformPose;
      // Field size check
      static_assert(sizeof(::UnityEngine::Pose) == 0x1C);
      // public readonly UnityEngine.Vector3 LinearVelocity
      // Size: 0xC
      // Offset: 0x1C
      ::UnityEngine::Vector3 LinearVelocity;
      // Field size check
      static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
      // public readonly UnityEngine.Vector3 AngularVelocity
      // Size: 0xC
      // Offset: 0x28
      ::UnityEngine::Vector3 AngularVelocity;
      // Field size check
      static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
      // public readonly System.Single Time
      // Size: 0x4
      // Offset: 0x34
      float Time;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      public:
      // Creating value type constructor for type: SamplePoseData
      constexpr SamplePoseData(::UnityEngine::Pose TransformPose_ = {}, ::UnityEngine::Vector3 LinearVelocity_ = {}, ::UnityEngine::Vector3 AngularVelocity_ = {}, float Time_ = {}) noexcept : TransformPose{TransformPose_}, LinearVelocity{LinearVelocity_}, AngularVelocity{AngularVelocity_}, Time{Time_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public readonly UnityEngine.Pose TransformPose
      [[deprecated("Use field access instead!")]] ::UnityEngine::Pose& dyn_TransformPose();
      // Get instance field reference: public readonly UnityEngine.Vector3 LinearVelocity
      [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_LinearVelocity();
      // Get instance field reference: public readonly UnityEngine.Vector3 AngularVelocity
      [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_AngularVelocity();
      // Get instance field reference: public readonly System.Single Time
      [[deprecated("Use field access instead!")]] float& dyn_Time();
      // public System.Void .ctor(UnityEngine.Pose transformPose, UnityEngine.Vector3 linearVelocity, UnityEngine.Vector3 angularVelocity, System.Single time)
      // Offset: 0x47E5A74
      // ABORTED: conflicts with another method.  SamplePoseData(::UnityEngine::Pose transformPose, ::UnityEngine::Vector3 linearVelocity, ::UnityEngine::Vector3 angularVelocity, float time);
    }; // Oculus.Interaction.Throw.StandardVelocityCalculator/SamplePoseData
    #pragma pack(pop)
    static check_size<sizeof(StandardVelocityCalculator::SamplePoseData), 52 + sizeof(float)> __Oculus_Interaction_Throw_StandardVelocityCalculator_SamplePoseDataSizeCheck;
    static_assert(sizeof(StandardVelocityCalculator::SamplePoseData) == 0x38);
    public:
    // private UnityEngine.Object _throwInputDevice
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Object* throwInputDevice;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.Throw.IPoseInputDevice <ThrowInputDevice>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    ::Oculus::Interaction::Throw::IPoseInputDevice* ThrowInputDevice;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Throw::IPoseInputDevice*) == 0x8);
    // private UnityEngine.Vector3 _referenceOffset
    // Size: 0xC
    // Offset: 0x30
    ::UnityEngine::Vector3 referenceOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private Oculus.Interaction.Throw.StandardVelocityCalculator/BufferingParams _bufferingParams
    // Size: 0x8
    // Offset: 0x40
    ::Oculus::Interaction::Throw::StandardVelocityCalculator::BufferingParams* bufferingParams;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Throw::StandardVelocityCalculator::BufferingParams*) == 0x8);
    // private System.Single _instantVelocityInfluence
    // Size: 0x4
    // Offset: 0x48
    float instantVelocityInfluence;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _trendVelocityInfluence
    // Size: 0x4
    // Offset: 0x4C
    float trendVelocityInfluence;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _tangentialVelocityInfluence
    // Size: 0x4
    // Offset: 0x50
    float tangentialVelocityInfluence;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _externalVelocityInfluence
    // Size: 0x4
    // Offset: 0x54
    float externalVelocityInfluence;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _stepBackTime
    // Size: 0x4
    // Offset: 0x58
    float stepBackTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _maxPercentZeroSamplesTrendVeloc
    // Size: 0x4
    // Offset: 0x5C
    float maxPercentZeroSamplesTrendVeloc;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private Oculus.Interaction.Input.OneEuroFilterPropertyBlock _filterProps
    // Size: 0xC
    // Offset: 0x60
    ::Oculus::Interaction::Input::OneEuroFilterPropertyBlock filterProps;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::OneEuroFilterPropertyBlock) == 0xC);
    // private System.Single _updateFrequency
    // Size: 0x4
    // Offset: 0x6C
    float updateFrequency;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _updateLatency
    // Size: 0x4
    // Offset: 0x70
    float updateLatency;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _lastUpdateTime
    // Size: 0x4
    // Offset: 0x74
    float lastUpdateTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private Oculus.Interaction.Input.IOneEuroFilter`1<UnityEngine.Vector3> _linearVelocityFilter
    // Size: 0x8
    // Offset: 0x78
    ::Oculus::Interaction::Input::IOneEuroFilter_1<::UnityEngine::Vector3>* linearVelocityFilter;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::IOneEuroFilter_1<::UnityEngine::Vector3>*) == 0x8);
    // private UnityEngine.Vector3 <AddedInstantLinearVelocity>k__BackingField
    // Size: 0xC
    // Offset: 0x80
    ::UnityEngine::Vector3 AddedInstantLinearVelocity;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 <AddedTrendLinearVelocity>k__BackingField
    // Size: 0xC
    // Offset: 0x8C
    ::UnityEngine::Vector3 AddedTrendLinearVelocity;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 <AddedTangentialLinearVelocity>k__BackingField
    // Size: 0xC
    // Offset: 0x98
    ::UnityEngine::Vector3 AddedTangentialLinearVelocity;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 <AxisOfRotation>k__BackingField
    // Size: 0xC
    // Offset: 0xA4
    ::UnityEngine::Vector3 AxisOfRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 <CenterOfMassToObject>k__BackingField
    // Size: 0xC
    // Offset: 0xB0
    ::UnityEngine::Vector3 CenterOfMassToObject;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 <TangentialDirection>k__BackingField
    // Size: 0xC
    // Offset: 0xBC
    ::UnityEngine::Vector3 TangentialDirection;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 <AxisOfRotationOrigin>k__BackingField
    // Size: 0xC
    // Offset: 0xC8
    ::UnityEngine::Vector3 AxisOfRotationOrigin;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Collections.Generic.List`1<Oculus.Interaction.Throw.ReleaseVelocityInformation> _currentThrowVelocities
    // Size: 0x8
    // Offset: 0xD8
    ::System::Collections::Generic::List_1<::Oculus::Interaction::Throw::ReleaseVelocityInformation>* currentThrowVelocities;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Oculus::Interaction::Throw::ReleaseVelocityInformation>*) == 0x8);
    // private System.Action`1<System.Collections.Generic.List`1<Oculus.Interaction.Throw.ReleaseVelocityInformation>> WhenThrowVelocitiesChanged
    // Size: 0x8
    // Offset: 0xE0
    ::System::Action_1<::System::Collections::Generic::List_1<::Oculus::Interaction::Throw::ReleaseVelocityInformation>*>* WhenThrowVelocitiesChanged;
    // Field size check
    static_assert(sizeof(::System::Action_1<::System::Collections::Generic::List_1<::Oculus::Interaction::Throw::ReleaseVelocityInformation>*>*) == 0x8);
    // private System.Action`1<Oculus.Interaction.Throw.ReleaseVelocityInformation> WhenNewSampleAvailable
    // Size: 0x8
    // Offset: 0xE8
    ::System::Action_1<::Oculus::Interaction::Throw::ReleaseVelocityInformation>* WhenNewSampleAvailable;
    // Field size check
    static_assert(sizeof(::System::Action_1<::Oculus::Interaction::Throw::ReleaseVelocityInformation>*) == 0x8);
    // private UnityEngine.Vector3 _linearVelocity
    // Size: 0xC
    // Offset: 0xF0
    ::UnityEngine::Vector3 linearVelocity;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 _angularVelocity
    // Size: 0xC
    // Offset: 0xFC
    ::UnityEngine::Vector3 angularVelocity;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Nullable`1<UnityEngine.Vector3> _previousReferencePosition
    // Size: 0xFFFFFFFF
    // Offset: 0x108
    ::System::Nullable_1<::UnityEngine::Vector3> previousReferencePosition;
    // private System.Nullable`1<UnityEngine.Quaternion> _previousReferenceRotation
    // Size: 0xFFFFFFFF
    // Offset: 0x118
    ::System::Nullable_1<::UnityEngine::Quaternion> previousReferenceRotation;
    // private System.Single _accumulatedDelta
    // Size: 0x4
    // Offset: 0x12C
    float accumulatedDelta;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Collections.Generic.List`1<Oculus.Interaction.Throw.StandardVelocityCalculator/SamplePoseData> _bufferedPoses
    // Size: 0x8
    // Offset: 0x130
    ::System::Collections::Generic::List_1<::Oculus::Interaction::Throw::StandardVelocityCalculator::SamplePoseData>* bufferedPoses;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Oculus::Interaction::Throw::StandardVelocityCalculator::SamplePoseData>*) == 0x8);
    // private System.Int32 _lastWritePos
    // Size: 0x4
    // Offset: 0x138
    int lastWritePos;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _bufferSize
    // Size: 0x4
    // Offset: 0x13C
    int bufferSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Collections.Generic.List`1<Oculus.Interaction.Throw.StandardVelocityCalculator/SamplePoseData> _windowWithMovement
    // Size: 0x8
    // Offset: 0x140
    ::System::Collections::Generic::List_1<::Oculus::Interaction::Throw::StandardVelocityCalculator::SamplePoseData>* windowWithMovement;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Oculus::Interaction::Throw::StandardVelocityCalculator::SamplePoseData>*) == 0x8);
    // private System.Collections.Generic.List`1<Oculus.Interaction.Throw.StandardVelocityCalculator/SamplePoseData> _tempWindow
    // Size: 0x8
    // Offset: 0x148
    ::System::Collections::Generic::List_1<::Oculus::Interaction::Throw::StandardVelocityCalculator::SamplePoseData>* tempWindow;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Oculus::Interaction::Throw::StandardVelocityCalculator::SamplePoseData>*) == 0x8);
    // private System.Func`1<System.Single> _timeProvider
    // Size: 0x8
    // Offset: 0x150
    ::System::Func_1<float>* timeProvider;
    // Field size check
    static_assert(sizeof(::System::Func_1<float>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::Throw::IVelocityCalculator
    operator ::Oculus::Interaction::Throw::IVelocityCalculator() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::Throw::IVelocityCalculator*>(this);
    }
    // static field const value: static private System.Single _TREND_DOT_THRESHOLD
    static constexpr const float _TREND_DOT_THRESHOLD = 0.6;
    // Get static field: static private System.Single _TREND_DOT_THRESHOLD
    static float _get__TREND_DOT_THRESHOLD();
    // Set static field: static private System.Single _TREND_DOT_THRESHOLD
    static void _set__TREND_DOT_THRESHOLD(float value);
    // Get instance field reference: private UnityEngine.Object _throwInputDevice
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__throwInputDevice();
    // Get instance field reference: private Oculus.Interaction.Throw.IPoseInputDevice <ThrowInputDevice>k__BackingField
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Throw::IPoseInputDevice*& dyn_$ThrowInputDevice$k__BackingField();
    // Get instance field reference: private UnityEngine.Vector3 _referenceOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__referenceOffset();
    // Get instance field reference: private Oculus.Interaction.Throw.StandardVelocityCalculator/BufferingParams _bufferingParams
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Throw::StandardVelocityCalculator::BufferingParams*& dyn__bufferingParams();
    // Get instance field reference: private System.Single _instantVelocityInfluence
    [[deprecated("Use field access instead!")]] float& dyn__instantVelocityInfluence();
    // Get instance field reference: private System.Single _trendVelocityInfluence
    [[deprecated("Use field access instead!")]] float& dyn__trendVelocityInfluence();
    // Get instance field reference: private System.Single _tangentialVelocityInfluence
    [[deprecated("Use field access instead!")]] float& dyn__tangentialVelocityInfluence();
    // Get instance field reference: private System.Single _externalVelocityInfluence
    [[deprecated("Use field access instead!")]] float& dyn__externalVelocityInfluence();
    // Get instance field reference: private System.Single _stepBackTime
    [[deprecated("Use field access instead!")]] float& dyn__stepBackTime();
    // Get instance field reference: private System.Single _maxPercentZeroSamplesTrendVeloc
    [[deprecated("Use field access instead!")]] float& dyn__maxPercentZeroSamplesTrendVeloc();
    // Get instance field reference: private Oculus.Interaction.Input.OneEuroFilterPropertyBlock _filterProps
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::OneEuroFilterPropertyBlock& dyn__filterProps();
    // Get instance field reference: private System.Single _updateFrequency
    [[deprecated("Use field access instead!")]] float& dyn__updateFrequency();
    // Get instance field reference: private System.Single _updateLatency
    [[deprecated("Use field access instead!")]] float& dyn__updateLatency();
    // Get instance field reference: private System.Single _lastUpdateTime
    [[deprecated("Use field access instead!")]] float& dyn__lastUpdateTime();
    // Get instance field reference: private Oculus.Interaction.Input.IOneEuroFilter`1<UnityEngine.Vector3> _linearVelocityFilter
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::IOneEuroFilter_1<::UnityEngine::Vector3>*& dyn__linearVelocityFilter();
    // Get instance field reference: private UnityEngine.Vector3 <AddedInstantLinearVelocity>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_$AddedInstantLinearVelocity$k__BackingField();
    // Get instance field reference: private UnityEngine.Vector3 <AddedTrendLinearVelocity>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_$AddedTrendLinearVelocity$k__BackingField();
    // Get instance field reference: private UnityEngine.Vector3 <AddedTangentialLinearVelocity>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_$AddedTangentialLinearVelocity$k__BackingField();
    // Get instance field reference: private UnityEngine.Vector3 <AxisOfRotation>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_$AxisOfRotation$k__BackingField();
    // Get instance field reference: private UnityEngine.Vector3 <CenterOfMassToObject>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_$CenterOfMassToObject$k__BackingField();
    // Get instance field reference: private UnityEngine.Vector3 <TangentialDirection>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_$TangentialDirection$k__BackingField();
    // Get instance field reference: private UnityEngine.Vector3 <AxisOfRotationOrigin>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_$AxisOfRotationOrigin$k__BackingField();
    // Get instance field reference: private System.Collections.Generic.List`1<Oculus.Interaction.Throw.ReleaseVelocityInformation> _currentThrowVelocities
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Oculus::Interaction::Throw::ReleaseVelocityInformation>*& dyn__currentThrowVelocities();
    // Get instance field reference: private System.Action`1<System.Collections.Generic.List`1<Oculus.Interaction.Throw.ReleaseVelocityInformation>> WhenThrowVelocitiesChanged
    [[deprecated("Use field access instead!")]] ::System::Action_1<::System::Collections::Generic::List_1<::Oculus::Interaction::Throw::ReleaseVelocityInformation>*>*& dyn_WhenThrowVelocitiesChanged();
    // Get instance field reference: private System.Action`1<Oculus.Interaction.Throw.ReleaseVelocityInformation> WhenNewSampleAvailable
    [[deprecated("Use field access instead!")]] ::System::Action_1<::Oculus::Interaction::Throw::ReleaseVelocityInformation>*& dyn_WhenNewSampleAvailable();
    // Get instance field reference: private UnityEngine.Vector3 _linearVelocity
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__linearVelocity();
    // Get instance field reference: private UnityEngine.Vector3 _angularVelocity
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__angularVelocity();
    // Get instance field reference: private System.Nullable`1<UnityEngine.Vector3> _previousReferencePosition
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<::UnityEngine::Vector3>& dyn__previousReferencePosition();
    // Get instance field reference: private System.Nullable`1<UnityEngine.Quaternion> _previousReferenceRotation
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<::UnityEngine::Quaternion>& dyn__previousReferenceRotation();
    // Get instance field reference: private System.Single _accumulatedDelta
    [[deprecated("Use field access instead!")]] float& dyn__accumulatedDelta();
    // Get instance field reference: private System.Collections.Generic.List`1<Oculus.Interaction.Throw.StandardVelocityCalculator/SamplePoseData> _bufferedPoses
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Oculus::Interaction::Throw::StandardVelocityCalculator::SamplePoseData>*& dyn__bufferedPoses();
    // Get instance field reference: private System.Int32 _lastWritePos
    [[deprecated("Use field access instead!")]] int& dyn__lastWritePos();
    // Get instance field reference: private System.Int32 _bufferSize
    [[deprecated("Use field access instead!")]] int& dyn__bufferSize();
    // Get instance field reference: private System.Collections.Generic.List`1<Oculus.Interaction.Throw.StandardVelocityCalculator/SamplePoseData> _windowWithMovement
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Oculus::Interaction::Throw::StandardVelocityCalculator::SamplePoseData>*& dyn__windowWithMovement();
    // Get instance field reference: private System.Collections.Generic.List`1<Oculus.Interaction.Throw.StandardVelocityCalculator/SamplePoseData> _tempWindow
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Oculus::Interaction::Throw::StandardVelocityCalculator::SamplePoseData>*& dyn__tempWindow();
    // Get instance field reference: private System.Func`1<System.Single> _timeProvider
    [[deprecated("Use field access instead!")]] ::System::Func_1<float>*& dyn__timeProvider();
    // public Oculus.Interaction.Throw.IPoseInputDevice get_ThrowInputDevice()
    // Offset: 0x47E2E18
    ::Oculus::Interaction::Throw::IPoseInputDevice* get_ThrowInputDevice();
    // private System.Void set_ThrowInputDevice(Oculus.Interaction.Throw.IPoseInputDevice value)
    // Offset: 0x47E2E20
    void set_ThrowInputDevice(::Oculus::Interaction::Throw::IPoseInputDevice* value);
    // public System.Single get_UpdateFrequency()
    // Offset: 0x47E2E28
    float get_UpdateFrequency();
    // public UnityEngine.Vector3 get_ReferenceOffset()
    // Offset: 0x47E2E30
    ::UnityEngine::Vector3 get_ReferenceOffset();
    // public System.Void set_ReferenceOffset(UnityEngine.Vector3 value)
    // Offset: 0x47E2E3C
    void set_ReferenceOffset(::UnityEngine::Vector3 value);
    // public System.Single get_InstantVelocityInfluence()
    // Offset: 0x47E2E48
    float get_InstantVelocityInfluence();
    // public System.Void set_InstantVelocityInfluence(System.Single value)
    // Offset: 0x47E2E50
    void set_InstantVelocityInfluence(float value);
    // public System.Single get_TrendVelocityInfluence()
    // Offset: 0x47E2E58
    float get_TrendVelocityInfluence();
    // public System.Void set_TrendVelocityInfluence(System.Single value)
    // Offset: 0x47E2E60
    void set_TrendVelocityInfluence(float value);
    // public System.Single get_TangentialVelocityInfluence()
    // Offset: 0x47E2E68
    float get_TangentialVelocityInfluence();
    // public System.Void set_TangentialVelocityInfluence(System.Single value)
    // Offset: 0x47E2E70
    void set_TangentialVelocityInfluence(float value);
    // public System.Single get_ExternalVelocityInfluence()
    // Offset: 0x47E2E78
    float get_ExternalVelocityInfluence();
    // public System.Void set_ExternalVelocityInfluence(System.Single value)
    // Offset: 0x47E2E80
    void set_ExternalVelocityInfluence(float value);
    // public System.Single get_StepBackTime()
    // Offset: 0x47E2E88
    float get_StepBackTime();
    // public System.Void set_StepBackTime(System.Single value)
    // Offset: 0x47E2E90
    void set_StepBackTime(float value);
    // public System.Single get_MaxPercentZeroSamplesTrendVeloc()
    // Offset: 0x47E2E98
    float get_MaxPercentZeroSamplesTrendVeloc();
    // public System.Void set_MaxPercentZeroSamplesTrendVeloc(System.Single value)
    // Offset: 0x47E2EA0
    void set_MaxPercentZeroSamplesTrendVeloc(float value);
    // public UnityEngine.Vector3 get_AddedInstantLinearVelocity()
    // Offset: 0x47E2EA8
    ::UnityEngine::Vector3 get_AddedInstantLinearVelocity();
    // private System.Void set_AddedInstantLinearVelocity(UnityEngine.Vector3 value)
    // Offset: 0x47E2EB4
    void set_AddedInstantLinearVelocity(::UnityEngine::Vector3 value);
    // public UnityEngine.Vector3 get_AddedTrendLinearVelocity()
    // Offset: 0x47E2EC0
    ::UnityEngine::Vector3 get_AddedTrendLinearVelocity();
    // private System.Void set_AddedTrendLinearVelocity(UnityEngine.Vector3 value)
    // Offset: 0x47E2ECC
    void set_AddedTrendLinearVelocity(::UnityEngine::Vector3 value);
    // public UnityEngine.Vector3 get_AddedTangentialLinearVelocity()
    // Offset: 0x47E2ED8
    ::UnityEngine::Vector3 get_AddedTangentialLinearVelocity();
    // private System.Void set_AddedTangentialLinearVelocity(UnityEngine.Vector3 value)
    // Offset: 0x47E2EE4
    void set_AddedTangentialLinearVelocity(::UnityEngine::Vector3 value);
    // public UnityEngine.Vector3 get_AxisOfRotation()
    // Offset: 0x47E2EF0
    ::UnityEngine::Vector3 get_AxisOfRotation();
    // private System.Void set_AxisOfRotation(UnityEngine.Vector3 value)
    // Offset: 0x47E2EFC
    void set_AxisOfRotation(::UnityEngine::Vector3 value);
    // public UnityEngine.Vector3 get_CenterOfMassToObject()
    // Offset: 0x47E2F08
    ::UnityEngine::Vector3 get_CenterOfMassToObject();
    // private System.Void set_CenterOfMassToObject(UnityEngine.Vector3 value)
    // Offset: 0x47E2F14
    void set_CenterOfMassToObject(::UnityEngine::Vector3 value);
    // public UnityEngine.Vector3 get_TangentialDirection()
    // Offset: 0x47E2F20
    ::UnityEngine::Vector3 get_TangentialDirection();
    // private System.Void set_TangentialDirection(UnityEngine.Vector3 value)
    // Offset: 0x47E2F2C
    void set_TangentialDirection(::UnityEngine::Vector3 value);
    // public UnityEngine.Vector3 get_AxisOfRotationOrigin()
    // Offset: 0x47E2F38
    ::UnityEngine::Vector3 get_AxisOfRotationOrigin();
    // private System.Void set_AxisOfRotationOrigin(UnityEngine.Vector3 value)
    // Offset: 0x47E2F44
    void set_AxisOfRotationOrigin(::UnityEngine::Vector3 value);
    // public System.Void add_WhenThrowVelocitiesChanged(System.Action`1<System.Collections.Generic.List`1<Oculus.Interaction.Throw.ReleaseVelocityInformation>> value)
    // Offset: 0x47E2F50
    void add_WhenThrowVelocitiesChanged(::System::Action_1<::System::Collections::Generic::List_1<::Oculus::Interaction::Throw::ReleaseVelocityInformation>*>* value);
    // public System.Void remove_WhenThrowVelocitiesChanged(System.Action`1<System.Collections.Generic.List`1<Oculus.Interaction.Throw.ReleaseVelocityInformation>> value)
    // Offset: 0x47E3000
    void remove_WhenThrowVelocitiesChanged(::System::Action_1<::System::Collections::Generic::List_1<::Oculus::Interaction::Throw::ReleaseVelocityInformation>*>* value);
    // public System.Void add_WhenNewSampleAvailable(System.Action`1<Oculus.Interaction.Throw.ReleaseVelocityInformation> value)
    // Offset: 0x47E30B0
    void add_WhenNewSampleAvailable(::System::Action_1<::Oculus::Interaction::Throw::ReleaseVelocityInformation>* value);
    // public System.Void remove_WhenNewSampleAvailable(System.Action`1<Oculus.Interaction.Throw.ReleaseVelocityInformation> value)
    // Offset: 0x47E3160
    void remove_WhenNewSampleAvailable(::System::Action_1<::Oculus::Interaction::Throw::ReleaseVelocityInformation>* value);
    // protected System.Void Awake()
    // Offset: 0x47E3210
    void Awake();
    // protected System.Void Start()
    // Offset: 0x47E3324
    void Start();
    // public Oculus.Interaction.Throw.ReleaseVelocityInformation CalculateThrowVelocity(UnityEngine.Transform objectThrown)
    // Offset: 0x47E3400
    ::Oculus::Interaction::Throw::ReleaseVelocityInformation CalculateThrowVelocity(::UnityEngine::Transform* objectThrown);
    // private System.Void IncludeInstantVelocities(System.Single currentTime, ref UnityEngine.Vector3 linearVelocity, ref UnityEngine.Vector3 angularVelocity)
    // Offset: 0x47E38DC
    void IncludeInstantVelocities(float currentTime, ByRef<::UnityEngine::Vector3> linearVelocity, ByRef<::UnityEngine::Vector3> angularVelocity);
    // private System.Void IncludeEstimatedReleaseVelocities(System.Single currentTime, ref UnityEngine.Vector3 linearVelocity, ref UnityEngine.Vector3 angularVelocity)
    // Offset: 0x47E3DD0
    void IncludeEstimatedReleaseVelocities(float currentTime, ByRef<::UnityEngine::Vector3> linearVelocity, ByRef<::UnityEngine::Vector3> angularVelocity);
    // private System.Void IncludeTrendVelocities(ref UnityEngine.Vector3 linearVelocity, ref UnityEngine.Vector3 angularVelocity)
    // Offset: 0x47E39D4
    void IncludeTrendVelocities(ByRef<::UnityEngine::Vector3> linearVelocity, ByRef<::UnityEngine::Vector3> angularVelocity);
    // private System.Void IncludeTangentialInfluence(ref UnityEngine.Vector3 linearVelocity, UnityEngine.Vector3 interactablePosition)
    // Offset: 0x47E3A64
    void IncludeTangentialInfluence(ByRef<::UnityEngine::Vector3> linearVelocity, ::UnityEngine::Vector3 interactablePosition);
    // private System.Void IncludeExternalVelocities(ref UnityEngine.Vector3 linearVelocity, ref UnityEngine.Vector3 angularVelocity)
    // Offset: 0x47E3AB8
    void IncludeExternalVelocities(ByRef<::UnityEngine::Vector3> linearVelocity, ByRef<::UnityEngine::Vector3> angularVelocity);
    // private System.ValueTuple`2<System.Int32,System.Int32> FindPoseIndicesAdjacentToTime(System.Single time)
    // Offset: 0x47E3FC0
    ::System::ValueTuple_2<int, int> FindPoseIndicesAdjacentToTime(float time);
    // private System.ValueTuple`2<UnityEngine.Vector3,UnityEngine.Vector3> ComputeTrendVelocities()
    // Offset: 0x47E42B8
    ::System::ValueTuple_2<::UnityEngine::Vector3, ::UnityEngine::Vector3> ComputeTrendVelocities();
    // private System.Boolean BufferedVelocitiesValid()
    // Offset: 0x47E4924
    bool BufferedVelocitiesValid();
    // private System.Void FindLargestWindowWithMovement()
    // Offset: 0x47E4AE4
    void FindLargestWindowWithMovement();
    // private System.ValueTuple`2<UnityEngine.Vector3,UnityEngine.Vector3> FindMostRecentBufferedSampleWithMovement()
    // Offset: 0x47E4F30
    ::System::ValueTuple_2<::UnityEngine::Vector3, ::UnityEngine::Vector3> FindMostRecentBufferedSampleWithMovement();
    // private System.Void TransferToDestBuffer(System.Collections.Generic.List`1<Oculus.Interaction.Throw.StandardVelocityCalculator/SamplePoseData> source, System.Collections.Generic.List`1<Oculus.Interaction.Throw.StandardVelocityCalculator/SamplePoseData> dest)
    // Offset: 0x47E50D0
    void TransferToDestBuffer(::System::Collections::Generic::List_1<::Oculus::Interaction::Throw::StandardVelocityCalculator::SamplePoseData>* source, ::System::Collections::Generic::List_1<::Oculus::Interaction::Throw::StandardVelocityCalculator::SamplePoseData>* dest);
    // private UnityEngine.Vector3 CalculateTangentialVector(UnityEngine.Vector3 objectPosition)
    // Offset: 0x47E45A4
    ::UnityEngine::Vector3 CalculateTangentialVector(::UnityEngine::Vector3 objectPosition);
    // public System.Collections.Generic.IReadOnlyList`1<Oculus.Interaction.Throw.ReleaseVelocityInformation> LastThrowVelocities()
    // Offset: 0x47E5300
    ::System::Collections::Generic::IReadOnlyList_1<::Oculus::Interaction::Throw::ReleaseVelocityInformation>* LastThrowVelocities();
    // public System.Void SetUpdateFrequency(System.Single frequency)
    // Offset: 0x47E5308
    void SetUpdateFrequency(float frequency);
    // protected System.Void LateUpdate()
    // Offset: 0x47E541C
    void LateUpdate();
    // private System.Void CalculateLatestVelocitiesAndUpdateBuffer(System.Single delta, System.Single currentTime, UnityEngine.Pose referencePose)
    // Offset: 0x47E5654
    void CalculateLatestVelocitiesAndUpdateBuffer(float delta, float currentTime, ::UnityEngine::Pose referencePose);
    // private System.Void UpdateLatestVelocitiesAndPoseValues(UnityEngine.Pose referencePose, System.Single delta)
    // Offset: 0x47E5828
    void UpdateLatestVelocitiesAndPoseValues(::UnityEngine::Pose referencePose, float delta);
    // private System.ValueTuple`2<UnityEngine.Vector3,UnityEngine.Vector3> GetLatestLinearAndAngularVelocities(UnityEngine.Pose referencePose, System.Single delta)
    // Offset: 0x47E5AA0
    ::System::ValueTuple_2<::UnityEngine::Vector3, ::UnityEngine::Vector3> GetLatestLinearAndAngularVelocities(::UnityEngine::Pose referencePose, float delta);
    // public System.Void InjectAllStandardVelocityCalculator(Oculus.Interaction.Throw.IPoseInputDevice poseInputDevice, Oculus.Interaction.Throw.StandardVelocityCalculator/BufferingParams bufferingParams)
    // Offset: 0x47E5D98
    void InjectAllStandardVelocityCalculator(::Oculus::Interaction::Throw::IPoseInputDevice* poseInputDevice, ::Oculus::Interaction::Throw::StandardVelocityCalculator::BufferingParams* bufferingParams);
    // public System.Void InjectPoseInputDevice(Oculus.Interaction.Throw.IPoseInputDevice poseInputDevice)
    // Offset: 0x47E5DC4
    void InjectPoseInputDevice(::Oculus::Interaction::Throw::IPoseInputDevice* poseInputDevice);
    // public System.Void InjectBufferingParams(Oculus.Interaction.Throw.StandardVelocityCalculator/BufferingParams bufferingParams)
    // Offset: 0x47E5E94
    void InjectBufferingParams(::Oculus::Interaction::Throw::StandardVelocityCalculator::BufferingParams* bufferingParams);
    // public System.Void InjectOptionalTimeProvider(System.Func`1<System.Single> timeProvider)
    // Offset: 0x47E5E9C
    void InjectOptionalTimeProvider(::System::Func_1<float>* timeProvider);
    // public System.Void .ctor()
    // Offset: 0x47E5EAC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StandardVelocityCalculator* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Throw::StandardVelocityCalculator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StandardVelocityCalculator*, creationType>()));
    }
  }; // Oculus.Interaction.Throw.StandardVelocityCalculator
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Throw::StandardVelocityCalculator::SamplePoseData, "Oculus.Interaction.Throw", "StandardVelocityCalculator/SamplePoseData");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Throw::StandardVelocityCalculator::get_ThrowInputDevice
// Il2CppName: get_ThrowInputDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Throw::IPoseInputDevice* (Oculus::Interaction::Throw::StandardVelocityCalculator::*)()>(&Oculus::Interaction::Throw::StandardVelocityCalculator::get_ThrowInputDevice)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::StandardVelocityCalculator*), "get_ThrowInputDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::StandardVelocityCalculator::set_ThrowInputDevice
// Il2CppName: set_ThrowInputDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Throw::StandardVelocityCalculator::*)(::Oculus::Interaction::Throw::IPoseInputDevice*)>(&Oculus::Interaction::Throw::StandardVelocityCalculator::set_ThrowInputDevice)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Throw", "IPoseInputDevice")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::StandardVelocityCalculator*), "set_ThrowInputDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::StandardVelocityCalculator::get_UpdateFrequency
// Il2CppName: get_UpdateFrequency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::Throw::StandardVelocityCalculator::*)()>(&Oculus::Interaction::Throw::StandardVelocityCalculator::get_UpdateFrequency)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::StandardVelocityCalculator*), "get_UpdateFrequency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::StandardVelocityCalculator::get_ReferenceOffset
// Il2CppName: get_ReferenceOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Oculus::Interaction::Throw::StandardVelocityCalculator::*)()>(&Oculus::Interaction::Throw::StandardVelocityCalculator::get_ReferenceOffset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::StandardVelocityCalculator*), "get_ReferenceOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::StandardVelocityCalculator::set_ReferenceOffset
// Il2CppName: set_ReferenceOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Throw::StandardVelocityCalculator::*)(::UnityEngine::Vector3)>(&Oculus::Interaction::Throw::StandardVelocityCalculator::set_ReferenceOffset)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::StandardVelocityCalculator*), "set_ReferenceOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::StandardVelocityCalculator::get_InstantVelocityInfluence
// Il2CppName: get_InstantVelocityInfluence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::Throw::StandardVelocityCalculator::*)()>(&Oculus::Interaction::Throw::StandardVelocityCalculator::get_InstantVelocityInfluence)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::StandardVelocityCalculator*), "get_InstantVelocityInfluence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::StandardVelocityCalculator::set_InstantVelocityInfluence
// Il2CppName: set_InstantVelocityInfluence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Throw::StandardVelocityCalculator::*)(float)>(&Oculus::Interaction::Throw::StandardVelocityCalculator::set_InstantVelocityInfluence)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::StandardVelocityCalculator*), "set_InstantVelocityInfluence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::StandardVelocityCalculator::get_TrendVelocityInfluence
// Il2CppName: get_TrendVelocityInfluence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::Throw::StandardVelocityCalculator::*)()>(&Oculus::Interaction::Throw::StandardVelocityCalculator::get_TrendVelocityInfluence)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::StandardVelocityCalculator*), "get_TrendVelocityInfluence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::StandardVelocityCalculator::set_TrendVelocityInfluence
// Il2CppName: set_TrendVelocityInfluence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Throw::StandardVelocityCalculator::*)(float)>(&Oculus::Interaction::Throw::StandardVelocityCalculator::set_TrendVelocityInfluence)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::StandardVelocityCalculator*), "set_TrendVelocityInfluence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::StandardVelocityCalculator::get_TangentialVelocityInfluence
// Il2CppName: get_TangentialVelocityInfluence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::Throw::StandardVelocityCalculator::*)()>(&Oculus::Interaction::Throw::StandardVelocityCalculator::get_TangentialVelocityInfluence)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::StandardVelocityCalculator*), "get_TangentialVelocityInfluence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::StandardVelocityCalculator::set_TangentialVelocityInfluence
// Il2CppName: set_TangentialVelocityInfluence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Throw::StandardVelocityCalculator::*)(float)>(&Oculus::Interaction::Throw::StandardVelocityCalculator::set_TangentialVelocityInfluence)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::StandardVelocityCalculator*), "set_TangentialVelocityInfluence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::StandardVelocityCalculator::get_ExternalVelocityInfluence
// Il2CppName: get_ExternalVelocityInfluence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::Throw::StandardVelocityCalculator::*)()>(&Oculus::Interaction::Throw::StandardVelocityCalculator::get_ExternalVelocityInfluence)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::StandardVelocityCalculator*), "get_ExternalVelocityInfluence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::StandardVelocityCalculator::set_ExternalVelocityInfluence
// Il2CppName: set_ExternalVelocityInfluence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Throw::StandardVelocityCalculator::*)(float)>(&Oculus::Interaction::Throw::StandardVelocityCalculator::set_ExternalVelocityInfluence)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::StandardVelocityCalculator*), "set_ExternalVelocityInfluence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::StandardVelocityCalculator::get_StepBackTime
// Il2CppName: get_StepBackTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::Throw::StandardVelocityCalculator::*)()>(&Oculus::Interaction::Throw::StandardVelocityCalculator::get_StepBackTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::StandardVelocityCalculator*), "get_StepBackTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::StandardVelocityCalculator::set_StepBackTime
// Il2CppName: set_StepBackTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Throw::StandardVelocityCalculator::*)(float)>(&Oculus::Interaction::Throw::StandardVelocityCalculator::set_StepBackTime)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::StandardVelocityCalculator*), "set_StepBackTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::StandardVelocityCalculator::get_MaxPercentZeroSamplesTrendVeloc
// Il2CppName: get_MaxPercentZeroSamplesTrendVeloc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::Throw::StandardVelocityCalculator::*)()>(&Oculus::Interaction::Throw::StandardVelocityCalculator::get_MaxPercentZeroSamplesTrendVeloc)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::StandardVelocityCalculator*), "get_MaxPercentZeroSamplesTrendVeloc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::StandardVelocityCalculator::set_MaxPercentZeroSamplesTrendVeloc
// Il2CppName: set_MaxPercentZeroSamplesTrendVeloc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Throw::StandardVelocityCalculator::*)(float)>(&Oculus::Interaction::Throw::StandardVelocityCalculator::set_MaxPercentZeroSamplesTrendVeloc)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::StandardVelocityCalculator*), "set_MaxPercentZeroSamplesTrendVeloc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::StandardVelocityCalculator::get_AddedInstantLinearVelocity
// Il2CppName: get_AddedInstantLinearVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Oculus::Interaction::Throw::StandardVelocityCalculator::*)()>(&Oculus::Interaction::Throw::StandardVelocityCalculator::get_AddedInstantLinearVelocity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::StandardVelocityCalculator*), "get_AddedInstantLinearVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::StandardVelocityCalculator::set_AddedInstantLinearVelocity
// Il2CppName: set_AddedInstantLinearVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Throw::StandardVelocityCalculator::*)(::UnityEngine::Vector3)>(&Oculus::Interaction::Throw::StandardVelocityCalculator::set_AddedInstantLinearVelocity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::StandardVelocityCalculator*), "set_AddedInstantLinearVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::StandardVelocityCalculator::get_AddedTrendLinearVelocity
// Il2CppName: get_AddedTrendLinearVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Oculus::Interaction::Throw::StandardVelocityCalculator::*)()>(&Oculus::Interaction::Throw::StandardVelocityCalculator::get_AddedTrendLinearVelocity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::StandardVelocityCalculator*), "get_AddedTrendLinearVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::StandardVelocityCalculator::set_AddedTrendLinearVelocity
// Il2CppName: set_AddedTrendLinearVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Throw::StandardVelocityCalculator::*)(::UnityEngine::Vector3)>(&Oculus::Interaction::Throw::StandardVelocityCalculator::set_AddedTrendLinearVelocity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::StandardVelocityCalculator*), "set_AddedTrendLinearVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::StandardVelocityCalculator::get_AddedTangentialLinearVelocity
// Il2CppName: get_AddedTangentialLinearVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Oculus::Interaction::Throw::StandardVelocityCalculator::*)()>(&Oculus::Interaction::Throw::StandardVelocityCalculator::get_AddedTangentialLinearVelocity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::StandardVelocityCalculator*), "get_AddedTangentialLinearVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::StandardVelocityCalculator::set_AddedTangentialLinearVelocity
// Il2CppName: set_AddedTangentialLinearVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Throw::StandardVelocityCalculator::*)(::UnityEngine::Vector3)>(&Oculus::Interaction::Throw::StandardVelocityCalculator::set_AddedTangentialLinearVelocity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::StandardVelocityCalculator*), "set_AddedTangentialLinearVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::StandardVelocityCalculator::get_AxisOfRotation
// Il2CppName: get_AxisOfRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Oculus::Interaction::Throw::StandardVelocityCalculator::*)()>(&Oculus::Interaction::Throw::StandardVelocityCalculator::get_AxisOfRotation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::StandardVelocityCalculator*), "get_AxisOfRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::StandardVelocityCalculator::set_AxisOfRotation
// Il2CppName: set_AxisOfRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Throw::StandardVelocityCalculator::*)(::UnityEngine::Vector3)>(&Oculus::Interaction::Throw::StandardVelocityCalculator::set_AxisOfRotation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::StandardVelocityCalculator*), "set_AxisOfRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::StandardVelocityCalculator::get_CenterOfMassToObject
// Il2CppName: get_CenterOfMassToObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Oculus::Interaction::Throw::StandardVelocityCalculator::*)()>(&Oculus::Interaction::Throw::StandardVelocityCalculator::get_CenterOfMassToObject)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::StandardVelocityCalculator*), "get_CenterOfMassToObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::StandardVelocityCalculator::set_CenterOfMassToObject
// Il2CppName: set_CenterOfMassToObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Throw::StandardVelocityCalculator::*)(::UnityEngine::Vector3)>(&Oculus::Interaction::Throw::StandardVelocityCalculator::set_CenterOfMassToObject)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::StandardVelocityCalculator*), "set_CenterOfMassToObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::StandardVelocityCalculator::get_TangentialDirection
// Il2CppName: get_TangentialDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Oculus::Interaction::Throw::StandardVelocityCalculator::*)()>(&Oculus::Interaction::Throw::StandardVelocityCalculator::get_TangentialDirection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::StandardVelocityCalculator*), "get_TangentialDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::StandardVelocityCalculator::set_TangentialDirection
// Il2CppName: set_TangentialDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Throw::StandardVelocityCalculator::*)(::UnityEngine::Vector3)>(&Oculus::Interaction::Throw::StandardVelocityCalculator::set_TangentialDirection)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::StandardVelocityCalculator*), "set_TangentialDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::StandardVelocityCalculator::get_AxisOfRotationOrigin
// Il2CppName: get_AxisOfRotationOrigin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Oculus::Interaction::Throw::StandardVelocityCalculator::*)()>(&Oculus::Interaction::Throw::StandardVelocityCalculator::get_AxisOfRotationOrigin)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::StandardVelocityCalculator*), "get_AxisOfRotationOrigin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::StandardVelocityCalculator::set_AxisOfRotationOrigin
// Il2CppName: set_AxisOfRotationOrigin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Throw::StandardVelocityCalculator::*)(::UnityEngine::Vector3)>(&Oculus::Interaction::Throw::StandardVelocityCalculator::set_AxisOfRotationOrigin)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::StandardVelocityCalculator*), "set_AxisOfRotationOrigin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::StandardVelocityCalculator::add_WhenThrowVelocitiesChanged
// Il2CppName: add_WhenThrowVelocitiesChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Throw::StandardVelocityCalculator::*)(::System::Action_1<::System::Collections::Generic::List_1<::Oculus::Interaction::Throw::ReleaseVelocityInformation>*>*)>(&Oculus::Interaction::Throw::StandardVelocityCalculator::add_WhenThrowVelocitiesChanged)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Interaction.Throw", "ReleaseVelocityInformation")})})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::StandardVelocityCalculator*), "add_WhenThrowVelocitiesChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::StandardVelocityCalculator::remove_WhenThrowVelocitiesChanged
// Il2CppName: remove_WhenThrowVelocitiesChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Throw::StandardVelocityCalculator::*)(::System::Action_1<::System::Collections::Generic::List_1<::Oculus::Interaction::Throw::ReleaseVelocityInformation>*>*)>(&Oculus::Interaction::Throw::StandardVelocityCalculator::remove_WhenThrowVelocitiesChanged)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Interaction.Throw", "ReleaseVelocityInformation")})})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::StandardVelocityCalculator*), "remove_WhenThrowVelocitiesChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::StandardVelocityCalculator::add_WhenNewSampleAvailable
// Il2CppName: add_WhenNewSampleAvailable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Throw::StandardVelocityCalculator::*)(::System::Action_1<::Oculus::Interaction::Throw::ReleaseVelocityInformation>*)>(&Oculus::Interaction::Throw::StandardVelocityCalculator::add_WhenNewSampleAvailable)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Interaction.Throw", "ReleaseVelocityInformation")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::StandardVelocityCalculator*), "add_WhenNewSampleAvailable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::StandardVelocityCalculator::remove_WhenNewSampleAvailable
// Il2CppName: remove_WhenNewSampleAvailable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Throw::StandardVelocityCalculator::*)(::System::Action_1<::Oculus::Interaction::Throw::ReleaseVelocityInformation>*)>(&Oculus::Interaction::Throw::StandardVelocityCalculator::remove_WhenNewSampleAvailable)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Interaction.Throw", "ReleaseVelocityInformation")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::StandardVelocityCalculator*), "remove_WhenNewSampleAvailable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::StandardVelocityCalculator::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Throw::StandardVelocityCalculator::*)()>(&Oculus::Interaction::Throw::StandardVelocityCalculator::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::StandardVelocityCalculator*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::StandardVelocityCalculator::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Throw::StandardVelocityCalculator::*)()>(&Oculus::Interaction::Throw::StandardVelocityCalculator::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::StandardVelocityCalculator*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::StandardVelocityCalculator::CalculateThrowVelocity
// Il2CppName: CalculateThrowVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Throw::ReleaseVelocityInformation (Oculus::Interaction::Throw::StandardVelocityCalculator::*)(::UnityEngine::Transform*)>(&Oculus::Interaction::Throw::StandardVelocityCalculator::CalculateThrowVelocity)> {
  static const MethodInfo* get() {
    static auto* objectThrown = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::StandardVelocityCalculator*), "CalculateThrowVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{objectThrown});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::StandardVelocityCalculator::IncludeInstantVelocities
// Il2CppName: IncludeInstantVelocities
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Throw::StandardVelocityCalculator::*)(float, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>)>(&Oculus::Interaction::Throw::StandardVelocityCalculator::IncludeInstantVelocities)> {
  static const MethodInfo* get() {
    static auto* currentTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* linearVelocity = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* angularVelocity = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::StandardVelocityCalculator*), "IncludeInstantVelocities", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currentTime, linearVelocity, angularVelocity});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::StandardVelocityCalculator::IncludeEstimatedReleaseVelocities
// Il2CppName: IncludeEstimatedReleaseVelocities
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Throw::StandardVelocityCalculator::*)(float, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>)>(&Oculus::Interaction::Throw::StandardVelocityCalculator::IncludeEstimatedReleaseVelocities)> {
  static const MethodInfo* get() {
    static auto* currentTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* linearVelocity = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* angularVelocity = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::StandardVelocityCalculator*), "IncludeEstimatedReleaseVelocities", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currentTime, linearVelocity, angularVelocity});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::StandardVelocityCalculator::IncludeTrendVelocities
// Il2CppName: IncludeTrendVelocities
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Throw::StandardVelocityCalculator::*)(ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>)>(&Oculus::Interaction::Throw::StandardVelocityCalculator::IncludeTrendVelocities)> {
  static const MethodInfo* get() {
    static auto* linearVelocity = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* angularVelocity = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::StandardVelocityCalculator*), "IncludeTrendVelocities", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{linearVelocity, angularVelocity});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::StandardVelocityCalculator::IncludeTangentialInfluence
// Il2CppName: IncludeTangentialInfluence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Throw::StandardVelocityCalculator::*)(ByRef<::UnityEngine::Vector3>, ::UnityEngine::Vector3)>(&Oculus::Interaction::Throw::StandardVelocityCalculator::IncludeTangentialInfluence)> {
  static const MethodInfo* get() {
    static auto* linearVelocity = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* interactablePosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::StandardVelocityCalculator*), "IncludeTangentialInfluence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{linearVelocity, interactablePosition});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::StandardVelocityCalculator::IncludeExternalVelocities
// Il2CppName: IncludeExternalVelocities
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Throw::StandardVelocityCalculator::*)(ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>)>(&Oculus::Interaction::Throw::StandardVelocityCalculator::IncludeExternalVelocities)> {
  static const MethodInfo* get() {
    static auto* linearVelocity = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* angularVelocity = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::StandardVelocityCalculator*), "IncludeExternalVelocities", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{linearVelocity, angularVelocity});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::StandardVelocityCalculator::FindPoseIndicesAdjacentToTime
// Il2CppName: FindPoseIndicesAdjacentToTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ValueTuple_2<int, int> (Oculus::Interaction::Throw::StandardVelocityCalculator::*)(float)>(&Oculus::Interaction::Throw::StandardVelocityCalculator::FindPoseIndicesAdjacentToTime)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::StandardVelocityCalculator*), "FindPoseIndicesAdjacentToTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::StandardVelocityCalculator::ComputeTrendVelocities
// Il2CppName: ComputeTrendVelocities
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ValueTuple_2<::UnityEngine::Vector3, ::UnityEngine::Vector3> (Oculus::Interaction::Throw::StandardVelocityCalculator::*)()>(&Oculus::Interaction::Throw::StandardVelocityCalculator::ComputeTrendVelocities)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::StandardVelocityCalculator*), "ComputeTrendVelocities", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::StandardVelocityCalculator::BufferedVelocitiesValid
// Il2CppName: BufferedVelocitiesValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Throw::StandardVelocityCalculator::*)()>(&Oculus::Interaction::Throw::StandardVelocityCalculator::BufferedVelocitiesValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::StandardVelocityCalculator*), "BufferedVelocitiesValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::StandardVelocityCalculator::FindLargestWindowWithMovement
// Il2CppName: FindLargestWindowWithMovement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Throw::StandardVelocityCalculator::*)()>(&Oculus::Interaction::Throw::StandardVelocityCalculator::FindLargestWindowWithMovement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::StandardVelocityCalculator*), "FindLargestWindowWithMovement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::StandardVelocityCalculator::FindMostRecentBufferedSampleWithMovement
// Il2CppName: FindMostRecentBufferedSampleWithMovement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ValueTuple_2<::UnityEngine::Vector3, ::UnityEngine::Vector3> (Oculus::Interaction::Throw::StandardVelocityCalculator::*)()>(&Oculus::Interaction::Throw::StandardVelocityCalculator::FindMostRecentBufferedSampleWithMovement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::StandardVelocityCalculator*), "FindMostRecentBufferedSampleWithMovement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::StandardVelocityCalculator::TransferToDestBuffer
// Il2CppName: TransferToDestBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Throw::StandardVelocityCalculator::*)(::System::Collections::Generic::List_1<::Oculus::Interaction::Throw::StandardVelocityCalculator::SamplePoseData>*, ::System::Collections::Generic::List_1<::Oculus::Interaction::Throw::StandardVelocityCalculator::SamplePoseData>*)>(&Oculus::Interaction::Throw::StandardVelocityCalculator::TransferToDestBuffer)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Interaction.Throw", "StandardVelocityCalculator/SamplePoseData")})->byval_arg;
    static auto* dest = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Interaction.Throw", "StandardVelocityCalculator/SamplePoseData")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::StandardVelocityCalculator*), "TransferToDestBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, dest});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::StandardVelocityCalculator::CalculateTangentialVector
// Il2CppName: CalculateTangentialVector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Oculus::Interaction::Throw::StandardVelocityCalculator::*)(::UnityEngine::Vector3)>(&Oculus::Interaction::Throw::StandardVelocityCalculator::CalculateTangentialVector)> {
  static const MethodInfo* get() {
    static auto* objectPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::StandardVelocityCalculator*), "CalculateTangentialVector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{objectPosition});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::StandardVelocityCalculator::LastThrowVelocities
// Il2CppName: LastThrowVelocities
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IReadOnlyList_1<::Oculus::Interaction::Throw::ReleaseVelocityInformation>* (Oculus::Interaction::Throw::StandardVelocityCalculator::*)()>(&Oculus::Interaction::Throw::StandardVelocityCalculator::LastThrowVelocities)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::StandardVelocityCalculator*), "LastThrowVelocities", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::StandardVelocityCalculator::SetUpdateFrequency
// Il2CppName: SetUpdateFrequency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Throw::StandardVelocityCalculator::*)(float)>(&Oculus::Interaction::Throw::StandardVelocityCalculator::SetUpdateFrequency)> {
  static const MethodInfo* get() {
    static auto* frequency = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::StandardVelocityCalculator*), "SetUpdateFrequency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{frequency});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::StandardVelocityCalculator::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Throw::StandardVelocityCalculator::*)()>(&Oculus::Interaction::Throw::StandardVelocityCalculator::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::StandardVelocityCalculator*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::StandardVelocityCalculator::CalculateLatestVelocitiesAndUpdateBuffer
// Il2CppName: CalculateLatestVelocitiesAndUpdateBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Throw::StandardVelocityCalculator::*)(float, float, ::UnityEngine::Pose)>(&Oculus::Interaction::Throw::StandardVelocityCalculator::CalculateLatestVelocitiesAndUpdateBuffer)> {
  static const MethodInfo* get() {
    static auto* delta = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* currentTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* referencePose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::StandardVelocityCalculator*), "CalculateLatestVelocitiesAndUpdateBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{delta, currentTime, referencePose});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::StandardVelocityCalculator::UpdateLatestVelocitiesAndPoseValues
// Il2CppName: UpdateLatestVelocitiesAndPoseValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Throw::StandardVelocityCalculator::*)(::UnityEngine::Pose, float)>(&Oculus::Interaction::Throw::StandardVelocityCalculator::UpdateLatestVelocitiesAndPoseValues)> {
  static const MethodInfo* get() {
    static auto* referencePose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->byval_arg;
    static auto* delta = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::StandardVelocityCalculator*), "UpdateLatestVelocitiesAndPoseValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{referencePose, delta});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::StandardVelocityCalculator::GetLatestLinearAndAngularVelocities
// Il2CppName: GetLatestLinearAndAngularVelocities
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ValueTuple_2<::UnityEngine::Vector3, ::UnityEngine::Vector3> (Oculus::Interaction::Throw::StandardVelocityCalculator::*)(::UnityEngine::Pose, float)>(&Oculus::Interaction::Throw::StandardVelocityCalculator::GetLatestLinearAndAngularVelocities)> {
  static const MethodInfo* get() {
    static auto* referencePose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->byval_arg;
    static auto* delta = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::StandardVelocityCalculator*), "GetLatestLinearAndAngularVelocities", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{referencePose, delta});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::StandardVelocityCalculator::InjectAllStandardVelocityCalculator
// Il2CppName: InjectAllStandardVelocityCalculator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Throw::StandardVelocityCalculator::*)(::Oculus::Interaction::Throw::IPoseInputDevice*, ::Oculus::Interaction::Throw::StandardVelocityCalculator::BufferingParams*)>(&Oculus::Interaction::Throw::StandardVelocityCalculator::InjectAllStandardVelocityCalculator)> {
  static const MethodInfo* get() {
    static auto* poseInputDevice = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Throw", "IPoseInputDevice")->byval_arg;
    static auto* bufferingParams = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Throw", "StandardVelocityCalculator/BufferingParams")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::StandardVelocityCalculator*), "InjectAllStandardVelocityCalculator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{poseInputDevice, bufferingParams});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::StandardVelocityCalculator::InjectPoseInputDevice
// Il2CppName: InjectPoseInputDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Throw::StandardVelocityCalculator::*)(::Oculus::Interaction::Throw::IPoseInputDevice*)>(&Oculus::Interaction::Throw::StandardVelocityCalculator::InjectPoseInputDevice)> {
  static const MethodInfo* get() {
    static auto* poseInputDevice = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Throw", "IPoseInputDevice")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::StandardVelocityCalculator*), "InjectPoseInputDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{poseInputDevice});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::StandardVelocityCalculator::InjectBufferingParams
// Il2CppName: InjectBufferingParams
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Throw::StandardVelocityCalculator::*)(::Oculus::Interaction::Throw::StandardVelocityCalculator::BufferingParams*)>(&Oculus::Interaction::Throw::StandardVelocityCalculator::InjectBufferingParams)> {
  static const MethodInfo* get() {
    static auto* bufferingParams = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Throw", "StandardVelocityCalculator/BufferingParams")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::StandardVelocityCalculator*), "InjectBufferingParams", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bufferingParams});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::StandardVelocityCalculator::InjectOptionalTimeProvider
// Il2CppName: InjectOptionalTimeProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Throw::StandardVelocityCalculator::*)(::System::Func_1<float>*)>(&Oculus::Interaction::Throw::StandardVelocityCalculator::InjectOptionalTimeProvider)> {
  static const MethodInfo* get() {
    static auto* timeProvider = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Func`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::StandardVelocityCalculator*), "InjectOptionalTimeProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{timeProvider});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::StandardVelocityCalculator::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
