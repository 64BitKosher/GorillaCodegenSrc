// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Oculus.Interaction.Throw.IPoseInputDevice
#include "Oculus/Interaction/Throw/IPoseInputDevice.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction::Throw
namespace Oculus::Interaction::Throw {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Object because it is already included!
  // Forward declaring type: Pose
  struct Pose;
}
// Forward declaring namespace: Oculus::Interaction::Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: IHand
  class IHand;
  // Forward declaring type: HandFinger
  struct HandFinger;
  // Forward declaring type: HandJointId
  struct HandJointId;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: ValueTuple`2<T1, T2>
  template<typename T1, typename T2>
  struct ValueTuple_2;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.Throw
namespace Oculus::Interaction::Throw {
  // Forward declaring type: HandPoseInputDevice
  class HandPoseInputDevice;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Throw::HandPoseInputDevice);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Throw::HandPoseInputDevice*, "Oculus.Interaction.Throw", "HandPoseInputDevice");
// Type namespace: Oculus.Interaction.Throw
namespace Oculus::Interaction::Throw {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.Throw.HandPoseInputDevice
  // [TokenAttribute] Offset: FFFFFFFF
  class HandPoseInputDevice : public ::UnityEngine::MonoBehaviour/*, public ::Oculus::Interaction::Throw::IPoseInputDevice*/ {
    public:
    // Nested type: ::Oculus::Interaction::Throw::HandPoseInputDevice::HandJointPoseMetaData
    class HandJointPoseMetaData;
    public:
    // private UnityEngine.Object _hand
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Object* hand;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.Input.IHand <Hand>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    ::Oculus::Interaction::Input::IHand* Hand;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::IHand*) == 0x8);
    // private System.Single _bufferLengthSeconds
    // Size: 0x4
    // Offset: 0x30
    float bufferLengthSeconds;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _sampleFrequency
    // Size: 0x4
    // Offset: 0x34
    float sampleFrequency;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 _bufferSize
    // Size: 0x4
    // Offset: 0x38
    int bufferSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: bufferSize and: jointPoseInfoArray
    char __padding4[0x4] = {};
    // private Oculus.Interaction.Throw.HandPoseInputDevice/HandJointPoseMetaData[] _jointPoseInfoArray
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<::Oculus::Interaction::Throw::HandPoseInputDevice::HandJointPoseMetaData*> jointPoseInfoArray;
    // Field size check
    static_assert(sizeof(::ArrayW<::Oculus::Interaction::Throw::HandPoseInputDevice::HandJointPoseMetaData*>) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::Throw::IPoseInputDevice
    operator ::Oculus::Interaction::Throw::IPoseInputDevice() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::Throw::IPoseInputDevice*>(this);
    }
    // Get instance field reference: private UnityEngine.Object _hand
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__hand();
    // Get instance field reference: private Oculus.Interaction.Input.IHand <Hand>k__BackingField
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::IHand*& dyn_$Hand$k__BackingField();
    // Get instance field reference: private System.Single _bufferLengthSeconds
    [[deprecated("Use field access instead!")]] float& dyn__bufferLengthSeconds();
    // Get instance field reference: private System.Single _sampleFrequency
    [[deprecated("Use field access instead!")]] float& dyn__sampleFrequency();
    // Get instance field reference: private System.Int32 _bufferSize
    [[deprecated("Use field access instead!")]] int& dyn__bufferSize();
    // Get instance field reference: private Oculus.Interaction.Throw.HandPoseInputDevice/HandJointPoseMetaData[] _jointPoseInfoArray
    [[deprecated("Use field access instead!")]] ::ArrayW<::Oculus::Interaction::Throw::HandPoseInputDevice::HandJointPoseMetaData*>& dyn__jointPoseInfoArray();
    // public Oculus.Interaction.Input.IHand get_Hand()
    // Offset: 0x47E1AB0
    ::Oculus::Interaction::Input::IHand* get_Hand();
    // private System.Void set_Hand(Oculus.Interaction.Input.IHand value)
    // Offset: 0x47E1AB8
    void set_Hand(::Oculus::Interaction::Input::IHand* value);
    // public System.Single get_BufferLengthSeconds()
    // Offset: 0x47E1AC0
    float get_BufferLengthSeconds();
    // public System.Void set_BufferLengthSeconds(System.Single value)
    // Offset: 0x47E1AC8
    void set_BufferLengthSeconds(float value);
    // public System.Single get_SampleFrequency()
    // Offset: 0x47E1AD0
    float get_SampleFrequency();
    // public System.Void set_SampleFrequency(System.Single value)
    // Offset: 0x47E1AD8
    void set_SampleFrequency(float value);
    // public System.Boolean get_IsInputValid()
    // Offset: 0x47E1AE0
    bool get_IsInputValid();
    // public System.Boolean get_IsHighConfidence()
    // Offset: 0x47E1B84
    bool get_IsHighConfidence();
    // public System.Boolean GetRootPose(out UnityEngine.Pose pose)
    // Offset: 0x47E1C28
    bool GetRootPose(ByRef<::UnityEngine::Pose> pose);
    // protected System.Void Awake()
    // Offset: 0x47E1E24
    void Awake();
    // protected System.Void Start()
    // Offset: 0x47E1E7C
    void Start();
    // protected System.Void LateUpdate()
    // Offset: 0x47E1EFC
    void LateUpdate();
    // private System.Void BufferFingerVelocities()
    // Offset: 0x47E1F00
    void BufferFingerVelocities();
    // private System.Void AllocateFingerBonesArrayIfNecessary()
    // Offset: 0x47E1F2C
    void AllocateFingerBonesArrayIfNecessary();
    // private System.Boolean GetFingerIsHighConfidence(Oculus.Interaction.Input.HandFinger handFinger)
    // Offset: 0x47E2308
    bool GetFingerIsHighConfidence(::Oculus::Interaction::Input::HandFinger handFinger);
    // private System.Boolean GetJointPose(Oculus.Interaction.Input.HandJointId handJointId, out UnityEngine.Pose pose)
    // Offset: 0x47E2438
    bool GetJointPose(::Oculus::Interaction::Input::HandJointId handJointId, ByRef<::UnityEngine::Pose> pose);
    // private System.Void BufferFingerBoneVelocities()
    // Offset: 0x47E2188
    void BufferFingerBoneVelocities();
    // public System.ValueTuple`2<UnityEngine.Vector3,UnityEngine.Vector3> GetExternalVelocities()
    // Offset: 0x47E27CC
    ::System::ValueTuple_2<::UnityEngine::Vector3, ::UnityEngine::Vector3> GetExternalVelocities();
    // public System.Void InjectAllHandPoseInputDevice(Oculus.Interaction.Input.IHand hand)
    // Offset: 0x47E2BD4
    void InjectAllHandPoseInputDevice(::Oculus::Interaction::Input::IHand* hand);
    // public System.Void InjectHand(Oculus.Interaction.Input.IHand hand)
    // Offset: 0x47E2BD8
    void InjectHand(::Oculus::Interaction::Input::IHand* hand);
    // public System.Void .ctor()
    // Offset: 0x47E2CA8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HandPoseInputDevice* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Throw::HandPoseInputDevice::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HandPoseInputDevice*, creationType>()));
    }
  }; // Oculus.Interaction.Throw.HandPoseInputDevice
  #pragma pack(pop)
  static check_size<sizeof(HandPoseInputDevice), 64 + sizeof(::ArrayW<::Oculus::Interaction::Throw::HandPoseInputDevice::HandJointPoseMetaData*>)> __Oculus_Interaction_Throw_HandPoseInputDeviceSizeCheck;
  static_assert(sizeof(HandPoseInputDevice) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Throw::HandPoseInputDevice::get_Hand
// Il2CppName: get_Hand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Input::IHand* (Oculus::Interaction::Throw::HandPoseInputDevice::*)()>(&Oculus::Interaction::Throw::HandPoseInputDevice::get_Hand)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::HandPoseInputDevice*), "get_Hand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::HandPoseInputDevice::set_Hand
// Il2CppName: set_Hand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Throw::HandPoseInputDevice::*)(::Oculus::Interaction::Input::IHand*)>(&Oculus::Interaction::Throw::HandPoseInputDevice::set_Hand)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::HandPoseInputDevice*), "set_Hand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::HandPoseInputDevice::get_BufferLengthSeconds
// Il2CppName: get_BufferLengthSeconds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::Throw::HandPoseInputDevice::*)()>(&Oculus::Interaction::Throw::HandPoseInputDevice::get_BufferLengthSeconds)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::HandPoseInputDevice*), "get_BufferLengthSeconds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::HandPoseInputDevice::set_BufferLengthSeconds
// Il2CppName: set_BufferLengthSeconds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Throw::HandPoseInputDevice::*)(float)>(&Oculus::Interaction::Throw::HandPoseInputDevice::set_BufferLengthSeconds)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::HandPoseInputDevice*), "set_BufferLengthSeconds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::HandPoseInputDevice::get_SampleFrequency
// Il2CppName: get_SampleFrequency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::Throw::HandPoseInputDevice::*)()>(&Oculus::Interaction::Throw::HandPoseInputDevice::get_SampleFrequency)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::HandPoseInputDevice*), "get_SampleFrequency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::HandPoseInputDevice::set_SampleFrequency
// Il2CppName: set_SampleFrequency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Throw::HandPoseInputDevice::*)(float)>(&Oculus::Interaction::Throw::HandPoseInputDevice::set_SampleFrequency)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::HandPoseInputDevice*), "set_SampleFrequency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::HandPoseInputDevice::get_IsInputValid
// Il2CppName: get_IsInputValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Throw::HandPoseInputDevice::*)()>(&Oculus::Interaction::Throw::HandPoseInputDevice::get_IsInputValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::HandPoseInputDevice*), "get_IsInputValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::HandPoseInputDevice::get_IsHighConfidence
// Il2CppName: get_IsHighConfidence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Throw::HandPoseInputDevice::*)()>(&Oculus::Interaction::Throw::HandPoseInputDevice::get_IsHighConfidence)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::HandPoseInputDevice*), "get_IsHighConfidence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::HandPoseInputDevice::GetRootPose
// Il2CppName: GetRootPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Throw::HandPoseInputDevice::*)(ByRef<::UnityEngine::Pose>)>(&Oculus::Interaction::Throw::HandPoseInputDevice::GetRootPose)> {
  static const MethodInfo* get() {
    static auto* pose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::HandPoseInputDevice*), "GetRootPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pose});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::HandPoseInputDevice::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Throw::HandPoseInputDevice::*)()>(&Oculus::Interaction::Throw::HandPoseInputDevice::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::HandPoseInputDevice*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::HandPoseInputDevice::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Throw::HandPoseInputDevice::*)()>(&Oculus::Interaction::Throw::HandPoseInputDevice::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::HandPoseInputDevice*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::HandPoseInputDevice::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Throw::HandPoseInputDevice::*)()>(&Oculus::Interaction::Throw::HandPoseInputDevice::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::HandPoseInputDevice*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::HandPoseInputDevice::BufferFingerVelocities
// Il2CppName: BufferFingerVelocities
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Throw::HandPoseInputDevice::*)()>(&Oculus::Interaction::Throw::HandPoseInputDevice::BufferFingerVelocities)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::HandPoseInputDevice*), "BufferFingerVelocities", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::HandPoseInputDevice::AllocateFingerBonesArrayIfNecessary
// Il2CppName: AllocateFingerBonesArrayIfNecessary
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Throw::HandPoseInputDevice::*)()>(&Oculus::Interaction::Throw::HandPoseInputDevice::AllocateFingerBonesArrayIfNecessary)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::HandPoseInputDevice*), "AllocateFingerBonesArrayIfNecessary", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::HandPoseInputDevice::GetFingerIsHighConfidence
// Il2CppName: GetFingerIsHighConfidence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Throw::HandPoseInputDevice::*)(::Oculus::Interaction::Input::HandFinger)>(&Oculus::Interaction::Throw::HandPoseInputDevice::GetFingerIsHighConfidence)> {
  static const MethodInfo* get() {
    static auto* handFinger = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "HandFinger")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::HandPoseInputDevice*), "GetFingerIsHighConfidence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handFinger});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::HandPoseInputDevice::GetJointPose
// Il2CppName: GetJointPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Throw::HandPoseInputDevice::*)(::Oculus::Interaction::Input::HandJointId, ByRef<::UnityEngine::Pose>)>(&Oculus::Interaction::Throw::HandPoseInputDevice::GetJointPose)> {
  static const MethodInfo* get() {
    static auto* handJointId = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "HandJointId")->byval_arg;
    static auto* pose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::HandPoseInputDevice*), "GetJointPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handJointId, pose});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::HandPoseInputDevice::BufferFingerBoneVelocities
// Il2CppName: BufferFingerBoneVelocities
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Throw::HandPoseInputDevice::*)()>(&Oculus::Interaction::Throw::HandPoseInputDevice::BufferFingerBoneVelocities)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::HandPoseInputDevice*), "BufferFingerBoneVelocities", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::HandPoseInputDevice::GetExternalVelocities
// Il2CppName: GetExternalVelocities
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ValueTuple_2<::UnityEngine::Vector3, ::UnityEngine::Vector3> (Oculus::Interaction::Throw::HandPoseInputDevice::*)()>(&Oculus::Interaction::Throw::HandPoseInputDevice::GetExternalVelocities)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::HandPoseInputDevice*), "GetExternalVelocities", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::HandPoseInputDevice::InjectAllHandPoseInputDevice
// Il2CppName: InjectAllHandPoseInputDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Throw::HandPoseInputDevice::*)(::Oculus::Interaction::Input::IHand*)>(&Oculus::Interaction::Throw::HandPoseInputDevice::InjectAllHandPoseInputDevice)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::HandPoseInputDevice*), "InjectAllHandPoseInputDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::HandPoseInputDevice::InjectHand
// Il2CppName: InjectHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Throw::HandPoseInputDevice::*)(::Oculus::Interaction::Input::IHand*)>(&Oculus::Interaction::Throw::HandPoseInputDevice::InjectHand)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::HandPoseInputDevice*), "InjectHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::HandPoseInputDevice::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
