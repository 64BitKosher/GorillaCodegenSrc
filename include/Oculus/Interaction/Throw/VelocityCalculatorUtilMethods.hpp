// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction::Throw
namespace Oculus::Interaction::Throw {
  // Forward declaring type: TransformSample
  struct TransformSample;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Quaternion
  struct Quaternion;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: ValueTuple`2<T1, T2>
  template<typename T1, typename T2>
  struct ValueTuple_2;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.Throw
namespace Oculus::Interaction::Throw {
  // Forward declaring type: VelocityCalculatorUtilMethods
  class VelocityCalculatorUtilMethods;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Throw::VelocityCalculatorUtilMethods);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Throw::VelocityCalculatorUtilMethods*, "Oculus.Interaction.Throw", "VelocityCalculatorUtilMethods");
// Type namespace: Oculus.Interaction.Throw
namespace Oculus::Interaction::Throw {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.Throw.VelocityCalculatorUtilMethods
  // [TokenAttribute] Offset: FFFFFFFF
  class VelocityCalculatorUtilMethods : public ::Il2CppObject {
    public:
    // static public UnityEngine.Vector3 ToLinearVelocity(UnityEngine.Vector3 startPosition, UnityEngine.Vector3 destinationPosition, System.Single deltaTime)
    // Offset: 0x47E6288
    static ::UnityEngine::Vector3 ToLinearVelocity(::UnityEngine::Vector3 startPosition, ::UnityEngine::Vector3 destinationPosition, float deltaTime);
    // static public UnityEngine.Vector3 ToAngularVelocity(UnityEngine.Quaternion startQuaternion, UnityEngine.Quaternion destinationQuaternion, System.Single deltaTime)
    // Offset: 0x47E5C28
    static ::UnityEngine::Vector3 ToAngularVelocity(::UnityEngine::Quaternion startQuaternion, ::UnityEngine::Quaternion destinationQuaternion, float deltaTime);
    // static public UnityEngine.Quaternion AngularVelocityToQuat(UnityEngine.Vector3 angularVelocity)
    // Offset: 0x47E4138
    static ::UnityEngine::Quaternion AngularVelocityToQuat(::UnityEngine::Vector3 angularVelocity);
    // static public System.ValueTuple`2<System.Single,UnityEngine.Vector3> QuatToAngleAxis(UnityEngine.Quaternion inputQuat)
    // Offset: 0x47E6468
    static ::System::ValueTuple_2<float, ::UnityEngine::Vector3> QuatToAngleAxis(::UnityEngine::Quaternion inputQuat);
    // static public UnityEngine.Vector3 QuatToAngularVeloc(UnityEngine.Quaternion inputQuat)
    // Offset: 0x47E4248
    static ::UnityEngine::Vector3 QuatToAngularVeloc(::UnityEngine::Quaternion inputQuat);
    // static public UnityEngine.Vector3 DeltaRotationToAngularVelocity(UnityEngine.Quaternion deltaRotation, System.Single deltaTime)
    // Offset: 0x47E636C
    static ::UnityEngine::Vector3 DeltaRotationToAngularVelocity(::UnityEngine::Quaternion deltaRotation, float deltaTime);
    // static public System.ValueTuple`2<UnityEngine.Vector3,UnityEngine.Vector3> GetVelocityAndAngularVelocity(Oculus.Interaction.Throw.TransformSample startSample, Oculus.Interaction.Throw.TransformSample endSample, System.Single duration)
    // Offset: 0x47E65AC
    static ::System::ValueTuple_2<::UnityEngine::Vector3, ::UnityEngine::Vector3> GetVelocityAndAngularVelocity(::Oculus::Interaction::Throw::TransformSample startSample, ::Oculus::Interaction::Throw::TransformSample endSample, float duration);
    // public System.Void .ctor()
    // Offset: 0x47E6680
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VelocityCalculatorUtilMethods* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Throw::VelocityCalculatorUtilMethods::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VelocityCalculatorUtilMethods*, creationType>()));
    }
  }; // Oculus.Interaction.Throw.VelocityCalculatorUtilMethods
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Throw::VelocityCalculatorUtilMethods::ToLinearVelocity
// Il2CppName: ToLinearVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, float)>(&Oculus::Interaction::Throw::VelocityCalculatorUtilMethods::ToLinearVelocity)> {
  static const MethodInfo* get() {
    static auto* startPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* destinationPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::VelocityCalculatorUtilMethods*), "ToLinearVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{startPosition, destinationPosition, deltaTime});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::VelocityCalculatorUtilMethods::ToAngularVelocity
// Il2CppName: ToAngularVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Quaternion, ::UnityEngine::Quaternion, float)>(&Oculus::Interaction::Throw::VelocityCalculatorUtilMethods::ToAngularVelocity)> {
  static const MethodInfo* get() {
    static auto* startQuaternion = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* destinationQuaternion = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::VelocityCalculatorUtilMethods*), "ToAngularVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{startQuaternion, destinationQuaternion, deltaTime});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::VelocityCalculatorUtilMethods::AngularVelocityToQuat
// Il2CppName: AngularVelocityToQuat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (*)(::UnityEngine::Vector3)>(&Oculus::Interaction::Throw::VelocityCalculatorUtilMethods::AngularVelocityToQuat)> {
  static const MethodInfo* get() {
    static auto* angularVelocity = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::VelocityCalculatorUtilMethods*), "AngularVelocityToQuat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{angularVelocity});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::VelocityCalculatorUtilMethods::QuatToAngleAxis
// Il2CppName: QuatToAngleAxis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ValueTuple_2<float, ::UnityEngine::Vector3> (*)(::UnityEngine::Quaternion)>(&Oculus::Interaction::Throw::VelocityCalculatorUtilMethods::QuatToAngleAxis)> {
  static const MethodInfo* get() {
    static auto* inputQuat = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::VelocityCalculatorUtilMethods*), "QuatToAngleAxis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inputQuat});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::VelocityCalculatorUtilMethods::QuatToAngularVeloc
// Il2CppName: QuatToAngularVeloc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Quaternion)>(&Oculus::Interaction::Throw::VelocityCalculatorUtilMethods::QuatToAngularVeloc)> {
  static const MethodInfo* get() {
    static auto* inputQuat = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::VelocityCalculatorUtilMethods*), "QuatToAngularVeloc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inputQuat});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::VelocityCalculatorUtilMethods::DeltaRotationToAngularVelocity
// Il2CppName: DeltaRotationToAngularVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Quaternion, float)>(&Oculus::Interaction::Throw::VelocityCalculatorUtilMethods::DeltaRotationToAngularVelocity)> {
  static const MethodInfo* get() {
    static auto* deltaRotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::VelocityCalculatorUtilMethods*), "DeltaRotationToAngularVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{deltaRotation, deltaTime});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::VelocityCalculatorUtilMethods::GetVelocityAndAngularVelocity
// Il2CppName: GetVelocityAndAngularVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ValueTuple_2<::UnityEngine::Vector3, ::UnityEngine::Vector3> (*)(::Oculus::Interaction::Throw::TransformSample, ::Oculus::Interaction::Throw::TransformSample, float)>(&Oculus::Interaction::Throw::VelocityCalculatorUtilMethods::GetVelocityAndAngularVelocity)> {
  static const MethodInfo* get() {
    static auto* startSample = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Throw", "TransformSample")->byval_arg;
    static auto* endSample = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Throw", "TransformSample")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::VelocityCalculatorUtilMethods*), "GetVelocityAndAngularVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{startSample, endSample, duration});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::VelocityCalculatorUtilMethods::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
