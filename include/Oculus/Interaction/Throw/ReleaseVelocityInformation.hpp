// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Completed includes
// Type namespace: Oculus.Interaction.Throw
namespace Oculus::Interaction::Throw {
  // Forward declaring type: ReleaseVelocityInformation
  struct ReleaseVelocityInformation;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Throw::ReleaseVelocityInformation, "Oculus.Interaction.Throw", "ReleaseVelocityInformation");
// Type namespace: Oculus.Interaction.Throw
namespace Oculus::Interaction::Throw {
  // Size: 0x25
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Oculus.Interaction.Throw.ReleaseVelocityInformation
  // [TokenAttribute] Offset: FFFFFFFF
  struct ReleaseVelocityInformation/*, public ::System::ValueType*/ {
    public:
    public:
    // public UnityEngine.Vector3 LinearVelocity
    // Size: 0xC
    // Offset: 0x0
    ::UnityEngine::Vector3 LinearVelocity;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 AngularVelocity
    // Size: 0xC
    // Offset: 0xC
    ::UnityEngine::Vector3 AngularVelocity;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 Origin
    // Size: 0xC
    // Offset: 0x18
    ::UnityEngine::Vector3 Origin;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.Boolean IsSelectedVelocity
    // Size: 0x1
    // Offset: 0x24
    bool IsSelectedVelocity;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating value type constructor for type: ReleaseVelocityInformation
    constexpr ReleaseVelocityInformation(::UnityEngine::Vector3 LinearVelocity_ = {}, ::UnityEngine::Vector3 AngularVelocity_ = {}, ::UnityEngine::Vector3 Origin_ = {}, bool IsSelectedVelocity_ = {}) noexcept : LinearVelocity{LinearVelocity_}, AngularVelocity{AngularVelocity_}, Origin{Origin_}, IsSelectedVelocity{IsSelectedVelocity_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public UnityEngine.Vector3 LinearVelocity
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_LinearVelocity();
    // Get instance field reference: public UnityEngine.Vector3 AngularVelocity
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_AngularVelocity();
    // Get instance field reference: public UnityEngine.Vector3 Origin
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_Origin();
    // Get instance field reference: public System.Boolean IsSelectedVelocity
    [[deprecated("Use field access instead!")]] bool& dyn_IsSelectedVelocity();
    // public System.Void .ctor(UnityEngine.Vector3 linearVelocity, UnityEngine.Vector3 angularVelocity, UnityEngine.Vector3 origin, System.Boolean isSelectedVelocity)
    // Offset: 0x47E2DF0
    // ABORTED: conflicts with another method.  ReleaseVelocityInformation(::UnityEngine::Vector3 linearVelocity, ::UnityEngine::Vector3 angularVelocity, ::UnityEngine::Vector3 origin, bool isSelectedVelocity);
  }; // Oculus.Interaction.Throw.ReleaseVelocityInformation
  #pragma pack(pop)
  static check_size<sizeof(ReleaseVelocityInformation), 36 + sizeof(bool)> __Oculus_Interaction_Throw_ReleaseVelocityInformationSizeCheck;
  static_assert(sizeof(ReleaseVelocityInformation) == 0x25);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Throw::ReleaseVelocityInformation::ReleaseVelocityInformation
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
