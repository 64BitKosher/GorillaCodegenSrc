// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Oculus.Interaction.Throw.StandardVelocityCalculator
#include "Oculus/Interaction/Throw/StandardVelocityCalculator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Throw::StandardVelocityCalculator::BufferingParams);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Throw::StandardVelocityCalculator::BufferingParams*, "Oculus.Interaction.Throw", "StandardVelocityCalculator/BufferingParams");
// Type namespace: Oculus.Interaction.Throw
namespace Oculus::Interaction::Throw {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.Throw.StandardVelocityCalculator/BufferingParams
  // [TokenAttribute] Offset: FFFFFFFF
  class StandardVelocityCalculator::BufferingParams : public ::Il2CppObject {
    public:
    public:
    // public System.Single BufferLengthSeconds
    // Size: 0x4
    // Offset: 0x10
    float BufferLengthSeconds;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single SampleFrequency
    // Size: 0x4
    // Offset: 0x14
    float SampleFrequency;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: public System.Single BufferLengthSeconds
    [[deprecated("Use field access instead!")]] float& dyn_BufferLengthSeconds();
    // Get instance field reference: public System.Single SampleFrequency
    [[deprecated("Use field access instead!")]] float& dyn_SampleFrequency();
    // public System.Void Validate()
    // Offset: 0x47E33FC
    void Validate();
    // public System.Void .ctor()
    // Offset: 0x47E61F4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StandardVelocityCalculator::BufferingParams* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Throw::StandardVelocityCalculator::BufferingParams::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StandardVelocityCalculator::BufferingParams*, creationType>()));
    }
  }; // Oculus.Interaction.Throw.StandardVelocityCalculator/BufferingParams
  #pragma pack(pop)
  static check_size<sizeof(StandardVelocityCalculator::BufferingParams), 20 + sizeof(float)> __Oculus_Interaction_Throw_StandardVelocityCalculator_BufferingParamsSizeCheck;
  static_assert(sizeof(StandardVelocityCalculator::BufferingParams) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Throw::StandardVelocityCalculator::BufferingParams::Validate
// Il2CppName: Validate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Throw::StandardVelocityCalculator::BufferingParams::*)()>(&Oculus::Interaction::Throw::StandardVelocityCalculator::BufferingParams::Validate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::StandardVelocityCalculator::BufferingParams*), "Validate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::StandardVelocityCalculator::BufferingParams::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
