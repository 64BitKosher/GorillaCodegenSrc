// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Oculus.Interaction.Throw.IPoseInputDevice
#include "Oculus/Interaction/Throw/IPoseInputDevice.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Object because it is already included!
  // Forward declaring type: Pose
  struct Pose;
}
// Forward declaring namespace: Oculus::Interaction::Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: IController
  class IController;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: ValueTuple`2<T1, T2>
  template<typename T1, typename T2>
  struct ValueTuple_2;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.Throw
namespace Oculus::Interaction::Throw {
  // Forward declaring type: ControllerPoseInputDevice
  class ControllerPoseInputDevice;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Throw::ControllerPoseInputDevice);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Throw::ControllerPoseInputDevice*, "Oculus.Interaction.Throw", "ControllerPoseInputDevice");
// Type namespace: Oculus.Interaction.Throw
namespace Oculus::Interaction::Throw {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.Throw.ControllerPoseInputDevice
  // [TokenAttribute] Offset: FFFFFFFF
  class ControllerPoseInputDevice : public ::UnityEngine::MonoBehaviour/*, public ::Oculus::Interaction::Throw::IPoseInputDevice*/ {
    public:
    public:
    // private UnityEngine.Object _controller
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Object* controller;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.Input.IController <Controller>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    ::Oculus::Interaction::Input::IController* Controller;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::IController*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::Throw::IPoseInputDevice
    operator ::Oculus::Interaction::Throw::IPoseInputDevice() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::Throw::IPoseInputDevice*>(this);
    }
    // Get instance field reference: private UnityEngine.Object _controller
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__controller();
    // Get instance field reference: private Oculus.Interaction.Input.IController <Controller>k__BackingField
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::IController*& dyn_$Controller$k__BackingField();
    // public Oculus.Interaction.Input.IController get_Controller()
    // Offset: 0x47E168C
    ::Oculus::Interaction::Input::IController* get_Controller();
    // private System.Void set_Controller(Oculus.Interaction.Input.IController value)
    // Offset: 0x47E1694
    void set_Controller(::Oculus::Interaction::Input::IController* value);
    // public System.Boolean get_IsInputValid()
    // Offset: 0x47E169C
    bool get_IsInputValid();
    // public System.Boolean get_IsHighConfidence()
    // Offset: 0x47E17B8
    bool get_IsHighConfidence();
    // public System.Boolean GetRootPose(out UnityEngine.Pose pose)
    // Offset: 0x47E17BC
    bool GetRootPose(ByRef<::UnityEngine::Pose> pose);
    // protected System.Void Awake()
    // Offset: 0x47E18E4
    void Awake();
    // protected System.Void Start()
    // Offset: 0x47E193C
    void Start();
    // public System.ValueTuple`2<UnityEngine.Vector3,UnityEngine.Vector3> GetExternalVelocities()
    // Offset: 0x47E1940
    ::System::ValueTuple_2<::UnityEngine::Vector3, ::UnityEngine::Vector3> GetExternalVelocities();
    // public System.Void InjectAllControllerPoseInputDevice(Oculus.Interaction.Input.IController controller)
    // Offset: 0x47E19D4
    void InjectAllControllerPoseInputDevice(::Oculus::Interaction::Input::IController* controller);
    // public System.Void InjectController(Oculus.Interaction.Input.IController controller)
    // Offset: 0x47E19D8
    void InjectController(::Oculus::Interaction::Input::IController* controller);
    // public System.Void .ctor()
    // Offset: 0x47E1AA8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ControllerPoseInputDevice* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Throw::ControllerPoseInputDevice::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ControllerPoseInputDevice*, creationType>()));
    }
  }; // Oculus.Interaction.Throw.ControllerPoseInputDevice
  #pragma pack(pop)
  static check_size<sizeof(ControllerPoseInputDevice), 40 + sizeof(::Oculus::Interaction::Input::IController*)> __Oculus_Interaction_Throw_ControllerPoseInputDeviceSizeCheck;
  static_assert(sizeof(ControllerPoseInputDevice) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Throw::ControllerPoseInputDevice::get_Controller
// Il2CppName: get_Controller
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Input::IController* (Oculus::Interaction::Throw::ControllerPoseInputDevice::*)()>(&Oculus::Interaction::Throw::ControllerPoseInputDevice::get_Controller)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::ControllerPoseInputDevice*), "get_Controller", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::ControllerPoseInputDevice::set_Controller
// Il2CppName: set_Controller
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Throw::ControllerPoseInputDevice::*)(::Oculus::Interaction::Input::IController*)>(&Oculus::Interaction::Throw::ControllerPoseInputDevice::set_Controller)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::ControllerPoseInputDevice*), "set_Controller", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::ControllerPoseInputDevice::get_IsInputValid
// Il2CppName: get_IsInputValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Throw::ControllerPoseInputDevice::*)()>(&Oculus::Interaction::Throw::ControllerPoseInputDevice::get_IsInputValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::ControllerPoseInputDevice*), "get_IsInputValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::ControllerPoseInputDevice::get_IsHighConfidence
// Il2CppName: get_IsHighConfidence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Throw::ControllerPoseInputDevice::*)()>(&Oculus::Interaction::Throw::ControllerPoseInputDevice::get_IsHighConfidence)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::ControllerPoseInputDevice*), "get_IsHighConfidence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::ControllerPoseInputDevice::GetRootPose
// Il2CppName: GetRootPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Throw::ControllerPoseInputDevice::*)(ByRef<::UnityEngine::Pose>)>(&Oculus::Interaction::Throw::ControllerPoseInputDevice::GetRootPose)> {
  static const MethodInfo* get() {
    static auto* pose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::ControllerPoseInputDevice*), "GetRootPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pose});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::ControllerPoseInputDevice::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Throw::ControllerPoseInputDevice::*)()>(&Oculus::Interaction::Throw::ControllerPoseInputDevice::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::ControllerPoseInputDevice*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::ControllerPoseInputDevice::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Throw::ControllerPoseInputDevice::*)()>(&Oculus::Interaction::Throw::ControllerPoseInputDevice::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::ControllerPoseInputDevice*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::ControllerPoseInputDevice::GetExternalVelocities
// Il2CppName: GetExternalVelocities
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ValueTuple_2<::UnityEngine::Vector3, ::UnityEngine::Vector3> (Oculus::Interaction::Throw::ControllerPoseInputDevice::*)()>(&Oculus::Interaction::Throw::ControllerPoseInputDevice::GetExternalVelocities)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::ControllerPoseInputDevice*), "GetExternalVelocities", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::ControllerPoseInputDevice::InjectAllControllerPoseInputDevice
// Il2CppName: InjectAllControllerPoseInputDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Throw::ControllerPoseInputDevice::*)(::Oculus::Interaction::Input::IController*)>(&Oculus::Interaction::Throw::ControllerPoseInputDevice::InjectAllControllerPoseInputDevice)> {
  static const MethodInfo* get() {
    static auto* controller = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::ControllerPoseInputDevice*), "InjectAllControllerPoseInputDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controller});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::ControllerPoseInputDevice::InjectController
// Il2CppName: InjectController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Throw::ControllerPoseInputDevice::*)(::Oculus::Interaction::Input::IController*)>(&Oculus::Interaction::Throw::ControllerPoseInputDevice::InjectController)> {
  static const MethodInfo* get() {
    static auto* controller = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Throw::ControllerPoseInputDevice*), "InjectController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controller});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Throw::ControllerPoseInputDevice::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
