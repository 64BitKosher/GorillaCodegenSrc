// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Oculus.Interaction.IHandVisual
#include "Oculus/Interaction/IHandVisual.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction
namespace Oculus::Interaction {
  // Forward declaring type: MaterialPropertyBlockEditor
  class MaterialPropertyBlockEditor;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Object because it is already included!
  // Forward declaring type: SkinnedMeshRenderer
  class SkinnedMeshRenderer;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Pose
  struct Pose;
  // Forward declaring type: Space
  struct Space;
}
// Forward declaring namespace: Oculus::Interaction::Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: IHand
  class IHand;
  // Forward declaring type: HandJointId
  struct HandJointId;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: IList`1<T>
  template<typename T>
  class IList_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: HandVisual
  class HandVisual;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::HandVisual);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::HandVisual*, "Oculus.Interaction", "HandVisual");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x66
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.HandVisual
  // [TokenAttribute] Offset: FFFFFFFF
  class HandVisual : public ::UnityEngine::MonoBehaviour/*, public ::Oculus::Interaction::IHandVisual*/ {
    public:
    // Nested type: ::Oculus::Interaction::HandVisual::$$c
    class $$c;
    public:
    // private UnityEngine.Object _hand
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Object* hand;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.Input.IHand <Hand>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    ::Oculus::Interaction::Input::IHand* Hand;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::IHand*) == 0x8);
    // private UnityEngine.SkinnedMeshRenderer _skinnedMeshRenderer
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::SkinnedMeshRenderer* skinnedMeshRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::SkinnedMeshRenderer*) == 0x8);
    // private System.Boolean _updateRootPose
    // Size: 0x1
    // Offset: 0x38
    bool updateRootPose;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _updateRootScale
    // Size: 0x1
    // Offset: 0x39
    bool updateRootScale;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: updateRootScale and: root
    char __padding4[0x6] = {};
    // private UnityEngine.Transform _root
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Transform* root;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private Oculus.Interaction.MaterialPropertyBlockEditor _handMaterialPropertyBlockEditor
    // Size: 0x8
    // Offset: 0x48
    ::Oculus::Interaction::MaterialPropertyBlockEditor* handMaterialPropertyBlockEditor;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::MaterialPropertyBlockEditor*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.Transform> _jointTransforms
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::Generic::List_1<::UnityEngine::Transform*>* jointTransforms;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Transform*>*) == 0x8);
    // private System.Action WhenHandVisualUpdated
    // Size: 0x8
    // Offset: 0x58
    ::System::Action* WhenHandVisualUpdated;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private System.Int32 _wristScalePropertyId
    // Size: 0x4
    // Offset: 0x60
    int wristScalePropertyId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean <ForceOffVisibility>k__BackingField
    // Size: 0x1
    // Offset: 0x64
    bool ForceOffVisibility;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _started
    // Size: 0x1
    // Offset: 0x65
    bool started;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::IHandVisual
    operator ::Oculus::Interaction::IHandVisual() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::IHandVisual*>(this);
    }
    // Get instance field reference: private UnityEngine.Object _hand
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__hand();
    // Get instance field reference: private Oculus.Interaction.Input.IHand <Hand>k__BackingField
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::IHand*& dyn_$Hand$k__BackingField();
    // Get instance field reference: private UnityEngine.SkinnedMeshRenderer _skinnedMeshRenderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::SkinnedMeshRenderer*& dyn__skinnedMeshRenderer();
    // Get instance field reference: private System.Boolean _updateRootPose
    [[deprecated("Use field access instead!")]] bool& dyn__updateRootPose();
    // Get instance field reference: private System.Boolean _updateRootScale
    [[deprecated("Use field access instead!")]] bool& dyn__updateRootScale();
    // Get instance field reference: private UnityEngine.Transform _root
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__root();
    // Get instance field reference: private Oculus.Interaction.MaterialPropertyBlockEditor _handMaterialPropertyBlockEditor
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::MaterialPropertyBlockEditor*& dyn__handMaterialPropertyBlockEditor();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Transform> _jointTransforms
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Transform*>*& dyn__jointTransforms();
    // Get instance field reference: private System.Action WhenHandVisualUpdated
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_WhenHandVisualUpdated();
    // Get instance field reference: private System.Int32 _wristScalePropertyId
    [[deprecated("Use field access instead!")]] int& dyn__wristScalePropertyId();
    // Get instance field reference: private System.Boolean <ForceOffVisibility>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$ForceOffVisibility$k__BackingField();
    // Get instance field reference: private System.Boolean _started
    [[deprecated("Use field access instead!")]] bool& dyn__started();
    // public Oculus.Interaction.Input.IHand get_Hand()
    // Offset: 0x47C6EE0
    ::Oculus::Interaction::Input::IHand* get_Hand();
    // private System.Void set_Hand(Oculus.Interaction.Input.IHand value)
    // Offset: 0x47C6EE8
    void set_Hand(::Oculus::Interaction::Input::IHand* value);
    // public System.Void add_WhenHandVisualUpdated(System.Action value)
    // Offset: 0x47C6EF0
    void add_WhenHandVisualUpdated(::System::Action* value);
    // public System.Void remove_WhenHandVisualUpdated(System.Action value)
    // Offset: 0x47C6F8C
    void remove_WhenHandVisualUpdated(::System::Action* value);
    // public System.Boolean get_IsVisible()
    // Offset: 0x47C7028
    bool get_IsVisible();
    // public System.Collections.Generic.IList`1<UnityEngine.Transform> get_Joints()
    // Offset: 0x47C70B0
    ::System::Collections::Generic::IList_1<::UnityEngine::Transform*>* get_Joints();
    // public System.Boolean get_ForceOffVisibility()
    // Offset: 0x47C70B8
    bool get_ForceOffVisibility();
    // public System.Void set_ForceOffVisibility(System.Boolean value)
    // Offset: 0x47C70C0
    void set_ForceOffVisibility(bool value);
    // protected System.Void Awake()
    // Offset: 0x47C70CC
    void Awake();
    // protected System.Void Start()
    // Offset: 0x47C721C
    void Start();
    // protected System.Void OnEnable()
    // Offset: 0x47C72CC
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x47C73CC
    void OnDisable();
    // public System.Void UpdateSkeleton()
    // Offset: 0x47C7508
    void UpdateSkeleton();
    // public UnityEngine.Transform GetTransformByHandJointId(Oculus.Interaction.Input.HandJointId handJointId)
    // Offset: 0x47C7AA8
    ::UnityEngine::Transform* GetTransformByHandJointId(::Oculus::Interaction::Input::HandJointId handJointId);
    // public UnityEngine.Pose GetJointPose(Oculus.Interaction.Input.HandJointId jointId, UnityEngine.Space space)
    // Offset: 0x47C7B00
    ::UnityEngine::Pose GetJointPose(::Oculus::Interaction::Input::HandJointId jointId, ::UnityEngine::Space space);
    // public System.Void InjectAllHandSkeletonVisual(Oculus.Interaction.Input.IHand hand, UnityEngine.SkinnedMeshRenderer skinnedMeshRenderer)
    // Offset: 0x47C7B48
    void InjectAllHandSkeletonVisual(::Oculus::Interaction::Input::IHand* hand, ::UnityEngine::SkinnedMeshRenderer* skinnedMeshRenderer);
    // public System.Void InjectHand(Oculus.Interaction.Input.IHand hand)
    // Offset: 0x47C7B74
    void InjectHand(::Oculus::Interaction::Input::IHand* hand);
    // public System.Void InjectSkinnedMeshRenderer(UnityEngine.SkinnedMeshRenderer skinnedMeshRenderer)
    // Offset: 0x47C7C44
    void InjectSkinnedMeshRenderer(::UnityEngine::SkinnedMeshRenderer* skinnedMeshRenderer);
    // public System.Void InjectOptionalUpdateRootPose(System.Boolean updateRootPose)
    // Offset: 0x47C7C4C
    void InjectOptionalUpdateRootPose(bool updateRootPose);
    // public System.Void InjectOptionalUpdateRootScale(System.Boolean updateRootScale)
    // Offset: 0x47C7C58
    void InjectOptionalUpdateRootScale(bool updateRootScale);
    // public System.Void InjectOptionalRoot(UnityEngine.Transform root)
    // Offset: 0x47C7C64
    void InjectOptionalRoot(::UnityEngine::Transform* root);
    // public System.Void InjectOptionalMaterialPropertyBlockEditor(Oculus.Interaction.MaterialPropertyBlockEditor editor)
    // Offset: 0x47C7C6C
    void InjectOptionalMaterialPropertyBlockEditor(::Oculus::Interaction::MaterialPropertyBlockEditor* editor);
    // public System.Void .ctor()
    // Offset: 0x47C7C74
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HandVisual* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::HandVisual::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HandVisual*, creationType>()));
    }
  }; // Oculus.Interaction.HandVisual
  #pragma pack(pop)
  static check_size<sizeof(HandVisual), 101 + sizeof(bool)> __Oculus_Interaction_HandVisualSizeCheck;
  static_assert(sizeof(HandVisual) == 0x66);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::HandVisual::get_Hand
// Il2CppName: get_Hand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Input::IHand* (Oculus::Interaction::HandVisual::*)()>(&Oculus::Interaction::HandVisual::get_Hand)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandVisual*), "get_Hand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandVisual::set_Hand
// Il2CppName: set_Hand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandVisual::*)(::Oculus::Interaction::Input::IHand*)>(&Oculus::Interaction::HandVisual::set_Hand)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandVisual*), "set_Hand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandVisual::add_WhenHandVisualUpdated
// Il2CppName: add_WhenHandVisualUpdated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandVisual::*)(::System::Action*)>(&Oculus::Interaction::HandVisual::add_WhenHandVisualUpdated)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandVisual*), "add_WhenHandVisualUpdated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandVisual::remove_WhenHandVisualUpdated
// Il2CppName: remove_WhenHandVisualUpdated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandVisual::*)(::System::Action*)>(&Oculus::Interaction::HandVisual::remove_WhenHandVisualUpdated)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandVisual*), "remove_WhenHandVisualUpdated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandVisual::get_IsVisible
// Il2CppName: get_IsVisible
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::HandVisual::*)()>(&Oculus::Interaction::HandVisual::get_IsVisible)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandVisual*), "get_IsVisible", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandVisual::get_Joints
// Il2CppName: get_Joints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IList_1<::UnityEngine::Transform*>* (Oculus::Interaction::HandVisual::*)()>(&Oculus::Interaction::HandVisual::get_Joints)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandVisual*), "get_Joints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandVisual::get_ForceOffVisibility
// Il2CppName: get_ForceOffVisibility
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::HandVisual::*)()>(&Oculus::Interaction::HandVisual::get_ForceOffVisibility)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandVisual*), "get_ForceOffVisibility", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandVisual::set_ForceOffVisibility
// Il2CppName: set_ForceOffVisibility
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandVisual::*)(bool)>(&Oculus::Interaction::HandVisual::set_ForceOffVisibility)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandVisual*), "set_ForceOffVisibility", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandVisual::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandVisual::*)()>(&Oculus::Interaction::HandVisual::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandVisual*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandVisual::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandVisual::*)()>(&Oculus::Interaction::HandVisual::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandVisual*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandVisual::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandVisual::*)()>(&Oculus::Interaction::HandVisual::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandVisual*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandVisual::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandVisual::*)()>(&Oculus::Interaction::HandVisual::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandVisual*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandVisual::UpdateSkeleton
// Il2CppName: UpdateSkeleton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandVisual::*)()>(&Oculus::Interaction::HandVisual::UpdateSkeleton)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandVisual*), "UpdateSkeleton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandVisual::GetTransformByHandJointId
// Il2CppName: GetTransformByHandJointId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (Oculus::Interaction::HandVisual::*)(::Oculus::Interaction::Input::HandJointId)>(&Oculus::Interaction::HandVisual::GetTransformByHandJointId)> {
  static const MethodInfo* get() {
    static auto* handJointId = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "HandJointId")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandVisual*), "GetTransformByHandJointId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handJointId});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandVisual::GetJointPose
// Il2CppName: GetJointPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Pose (Oculus::Interaction::HandVisual::*)(::Oculus::Interaction::Input::HandJointId, ::UnityEngine::Space)>(&Oculus::Interaction::HandVisual::GetJointPose)> {
  static const MethodInfo* get() {
    static auto* jointId = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "HandJointId")->byval_arg;
    static auto* space = &::il2cpp_utils::GetClassFromName("UnityEngine", "Space")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandVisual*), "GetJointPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{jointId, space});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandVisual::InjectAllHandSkeletonVisual
// Il2CppName: InjectAllHandSkeletonVisual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandVisual::*)(::Oculus::Interaction::Input::IHand*, ::UnityEngine::SkinnedMeshRenderer*)>(&Oculus::Interaction::HandVisual::InjectAllHandSkeletonVisual)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHand")->byval_arg;
    static auto* skinnedMeshRenderer = &::il2cpp_utils::GetClassFromName("UnityEngine", "SkinnedMeshRenderer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandVisual*), "InjectAllHandSkeletonVisual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand, skinnedMeshRenderer});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandVisual::InjectHand
// Il2CppName: InjectHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandVisual::*)(::Oculus::Interaction::Input::IHand*)>(&Oculus::Interaction::HandVisual::InjectHand)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandVisual*), "InjectHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandVisual::InjectSkinnedMeshRenderer
// Il2CppName: InjectSkinnedMeshRenderer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandVisual::*)(::UnityEngine::SkinnedMeshRenderer*)>(&Oculus::Interaction::HandVisual::InjectSkinnedMeshRenderer)> {
  static const MethodInfo* get() {
    static auto* skinnedMeshRenderer = &::il2cpp_utils::GetClassFromName("UnityEngine", "SkinnedMeshRenderer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandVisual*), "InjectSkinnedMeshRenderer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{skinnedMeshRenderer});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandVisual::InjectOptionalUpdateRootPose
// Il2CppName: InjectOptionalUpdateRootPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandVisual::*)(bool)>(&Oculus::Interaction::HandVisual::InjectOptionalUpdateRootPose)> {
  static const MethodInfo* get() {
    static auto* updateRootPose = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandVisual*), "InjectOptionalUpdateRootPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{updateRootPose});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandVisual::InjectOptionalUpdateRootScale
// Il2CppName: InjectOptionalUpdateRootScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandVisual::*)(bool)>(&Oculus::Interaction::HandVisual::InjectOptionalUpdateRootScale)> {
  static const MethodInfo* get() {
    static auto* updateRootScale = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandVisual*), "InjectOptionalUpdateRootScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{updateRootScale});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandVisual::InjectOptionalRoot
// Il2CppName: InjectOptionalRoot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandVisual::*)(::UnityEngine::Transform*)>(&Oculus::Interaction::HandVisual::InjectOptionalRoot)> {
  static const MethodInfo* get() {
    static auto* root = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandVisual*), "InjectOptionalRoot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{root});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandVisual::InjectOptionalMaterialPropertyBlockEditor
// Il2CppName: InjectOptionalMaterialPropertyBlockEditor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandVisual::*)(::Oculus::Interaction::MaterialPropertyBlockEditor*)>(&Oculus::Interaction::HandVisual::InjectOptionalMaterialPropertyBlockEditor)> {
  static const MethodInfo* get() {
    static auto* editor = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "MaterialPropertyBlockEditor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandVisual*), "InjectOptionalMaterialPropertyBlockEditor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{editor});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandVisual::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
