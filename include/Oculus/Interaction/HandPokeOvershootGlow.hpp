// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: Oculus.Interaction.Input.HandFinger
#include "Oculus/Interaction/Input/HandFinger.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction::Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: IHand
  class IHand;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Object because it is already included!
  // Forward declaring type: SkinnedMeshRenderer
  class SkinnedMeshRenderer;
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: Oculus::Interaction
namespace Oculus::Interaction {
  // Forward declaring type: PokeInteractor
  class PokeInteractor;
  // Forward declaring type: HandVisual
  class HandVisual;
  // Forward declaring type: MaterialPropertyBlockEditor
  class MaterialPropertyBlockEditor;
  // Skipping declaration: GlowType because it is already included!
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: HandPokeOvershootGlow
  class HandPokeOvershootGlow;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::HandPokeOvershootGlow);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::HandPokeOvershootGlow*, "Oculus.Interaction", "HandPokeOvershootGlow");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x8D
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.HandPokeOvershootGlow
  // [TokenAttribute] Offset: FFFFFFFF
  class HandPokeOvershootGlow : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::Oculus::Interaction::HandPokeOvershootGlow::GlowType
    struct GlowType;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Oculus.Interaction.HandPokeOvershootGlow/GlowType
    // [TokenAttribute] Offset: FFFFFFFF
    struct GlowType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: GlowType
      constexpr GlowType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Oculus.Interaction.HandPokeOvershootGlow/GlowType Fill
      static constexpr const int Fill = 30;
      // Get static field: static public Oculus.Interaction.HandPokeOvershootGlow/GlowType Fill
      static ::Oculus::Interaction::HandPokeOvershootGlow::GlowType _get_Fill();
      // Set static field: static public Oculus.Interaction.HandPokeOvershootGlow/GlowType Fill
      static void _set_Fill(::Oculus::Interaction::HandPokeOvershootGlow::GlowType value);
      // static field const value: static public Oculus.Interaction.HandPokeOvershootGlow/GlowType Outline
      static constexpr const int Outline = 31;
      // Get static field: static public Oculus.Interaction.HandPokeOvershootGlow/GlowType Outline
      static ::Oculus::Interaction::HandPokeOvershootGlow::GlowType _get_Outline();
      // Set static field: static public Oculus.Interaction.HandPokeOvershootGlow/GlowType Outline
      static void _set_Outline(::Oculus::Interaction::HandPokeOvershootGlow::GlowType value);
      // static field const value: static public Oculus.Interaction.HandPokeOvershootGlow/GlowType Both
      static constexpr const int Both = 32;
      // Get static field: static public Oculus.Interaction.HandPokeOvershootGlow/GlowType Both
      static ::Oculus::Interaction::HandPokeOvershootGlow::GlowType _get_Both();
      // Set static field: static public Oculus.Interaction.HandPokeOvershootGlow/GlowType Both
      static void _set_Both(::Oculus::Interaction::HandPokeOvershootGlow::GlowType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Oculus.Interaction.HandPokeOvershootGlow/GlowType
    #pragma pack(pop)
    static check_size<sizeof(HandPokeOvershootGlow::GlowType), 0 + sizeof(int)> __Oculus_Interaction_HandPokeOvershootGlow_GlowTypeSizeCheck;
    static_assert(sizeof(HandPokeOvershootGlow::GlowType) == 0x4);
    public:
    // private UnityEngine.Object _hand
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Object* hand;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.PokeInteractor _pokeInteractor
    // Size: 0x8
    // Offset: 0x28
    ::Oculus::Interaction::PokeInteractor* pokeInteractor;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::PokeInteractor*) == 0x8);
    // private Oculus.Interaction.HandVisual _handVisual
    // Size: 0x8
    // Offset: 0x30
    ::Oculus::Interaction::HandVisual* handVisual;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::HandVisual*) == 0x8);
    // private UnityEngine.SkinnedMeshRenderer _handRenderer
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::SkinnedMeshRenderer* handRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::SkinnedMeshRenderer*) == 0x8);
    // private Oculus.Interaction.MaterialPropertyBlockEditor _materialEditor
    // Size: 0x8
    // Offset: 0x40
    ::Oculus::Interaction::MaterialPropertyBlockEditor* materialEditor;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::MaterialPropertyBlockEditor*) == 0x8);
    // private UnityEngine.Color _glowColor
    // Size: 0x10
    // Offset: 0x48
    ::UnityEngine::Color glowColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private System.Single _overshootMaxDistance
    // Size: 0x4
    // Offset: 0x58
    float overshootMaxDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private Oculus.Interaction.Input.HandFinger _pokeFinger
    // Size: 0x4
    // Offset: 0x5C
    ::Oculus::Interaction::Input::HandFinger pokeFinger;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::HandFinger) == 0x4);
    // private System.Single _maxGradientLength
    // Size: 0x4
    // Offset: 0x60
    float maxGradientLength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private Oculus.Interaction.HandPokeOvershootGlow/GlowType _glowType
    // Size: 0x4
    // Offset: 0x64
    ::Oculus::Interaction::HandPokeOvershootGlow::GlowType glowType;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::HandPokeOvershootGlow::GlowType) == 0x4);
    // private Oculus.Interaction.Input.IHand Hand
    // Size: 0x8
    // Offset: 0x68
    ::Oculus::Interaction::Input::IHand* Hand;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::IHand*) == 0x8);
    // private System.Boolean _glowEnabled
    // Size: 0x1
    // Offset: 0x70
    bool glowEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: glowEnabled and: glowFingerIndexID
    char __padding11[0x3] = {};
    // private readonly System.Int32 _glowFingerIndexID
    // Size: 0x4
    // Offset: 0x74
    int glowFingerIndexID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Int32 _generateGlowID
    // Size: 0x4
    // Offset: 0x78
    int generateGlowID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Int32 _glowColorID
    // Size: 0x4
    // Offset: 0x7C
    int glowColorID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Int32 _glowTypeID
    // Size: 0x4
    // Offset: 0x80
    int glowTypeID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Int32 _glowParameterID
    // Size: 0x4
    // Offset: 0x84
    int glowParameterID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Int32 _glowMaxLengthID
    // Size: 0x4
    // Offset: 0x88
    int glowMaxLengthID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Boolean _started
    // Size: 0x1
    // Offset: 0x8C
    bool started;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private UnityEngine.Object _hand
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__hand();
    // Get instance field reference: private Oculus.Interaction.PokeInteractor _pokeInteractor
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::PokeInteractor*& dyn__pokeInteractor();
    // Get instance field reference: private Oculus.Interaction.HandVisual _handVisual
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::HandVisual*& dyn__handVisual();
    // Get instance field reference: private UnityEngine.SkinnedMeshRenderer _handRenderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::SkinnedMeshRenderer*& dyn__handRenderer();
    // Get instance field reference: private Oculus.Interaction.MaterialPropertyBlockEditor _materialEditor
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::MaterialPropertyBlockEditor*& dyn__materialEditor();
    // Get instance field reference: private UnityEngine.Color _glowColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__glowColor();
    // Get instance field reference: private System.Single _overshootMaxDistance
    [[deprecated("Use field access instead!")]] float& dyn__overshootMaxDistance();
    // Get instance field reference: private Oculus.Interaction.Input.HandFinger _pokeFinger
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::HandFinger& dyn__pokeFinger();
    // Get instance field reference: private System.Single _maxGradientLength
    [[deprecated("Use field access instead!")]] float& dyn__maxGradientLength();
    // Get instance field reference: private Oculus.Interaction.HandPokeOvershootGlow/GlowType _glowType
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::HandPokeOvershootGlow::GlowType& dyn__glowType();
    // Get instance field reference: private Oculus.Interaction.Input.IHand Hand
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::IHand*& dyn_Hand();
    // Get instance field reference: private System.Boolean _glowEnabled
    [[deprecated("Use field access instead!")]] bool& dyn__glowEnabled();
    // Get instance field reference: private readonly System.Int32 _glowFingerIndexID
    [[deprecated("Use field access instead!")]] int& dyn__glowFingerIndexID();
    // Get instance field reference: private readonly System.Int32 _generateGlowID
    [[deprecated("Use field access instead!")]] int& dyn__generateGlowID();
    // Get instance field reference: private readonly System.Int32 _glowColorID
    [[deprecated("Use field access instead!")]] int& dyn__glowColorID();
    // Get instance field reference: private readonly System.Int32 _glowTypeID
    [[deprecated("Use field access instead!")]] int& dyn__glowTypeID();
    // Get instance field reference: private readonly System.Int32 _glowParameterID
    [[deprecated("Use field access instead!")]] int& dyn__glowParameterID();
    // Get instance field reference: private readonly System.Int32 _glowMaxLengthID
    [[deprecated("Use field access instead!")]] int& dyn__glowMaxLengthID();
    // Get instance field reference: protected System.Boolean _started
    [[deprecated("Use field access instead!")]] bool& dyn__started();
    // protected System.Void Awake()
    // Offset: 0x4776ACC
    void Awake();
    // protected System.Void Start()
    // Offset: 0x4776B34
    void Start();
    // protected System.Void OnEnable()
    // Offset: 0x4776BDC
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x4776C8C
    void OnDisable();
    // private System.Void UpdateOvershoot(System.Single normalizedDistance)
    // Offset: 0x4776D3C
    void UpdateOvershoot(float normalizedDistance);
    // private System.Void UpdateVisual()
    // Offset: 0x4776E60
    void UpdateVisual();
    // public System.Void InjectAllHandPokeOvershootGlow(Oculus.Interaction.Input.IHand hand, Oculus.Interaction.PokeInteractor pokeInteractor, Oculus.Interaction.MaterialPropertyBlockEditor materialEditor, UnityEngine.Color glowColor, System.Single distanceMultiplier, UnityEngine.Transform wristTransform, Oculus.Interaction.HandPokeOvershootGlow/GlowType glowType)
    // Offset: 0x4776FD0
    void InjectAllHandPokeOvershootGlow(::Oculus::Interaction::Input::IHand* hand, ::Oculus::Interaction::PokeInteractor* pokeInteractor, ::Oculus::Interaction::MaterialPropertyBlockEditor* materialEditor, ::UnityEngine::Color glowColor, float distanceMultiplier, ::UnityEngine::Transform* wristTransform, ::Oculus::Interaction::HandPokeOvershootGlow::GlowType glowType);
    // public System.Void InjectAllHandPokeOvershootGlow(Oculus.Interaction.Input.IHand hand, Oculus.Interaction.PokeInteractor pokeInteractor, Oculus.Interaction.HandVisual handVisual, UnityEngine.SkinnedMeshRenderer handRenderer, Oculus.Interaction.MaterialPropertyBlockEditor materialEditor)
    // Offset: 0x477712C
    void InjectAllHandPokeOvershootGlow(::Oculus::Interaction::Input::IHand* hand, ::Oculus::Interaction::PokeInteractor* pokeInteractor, ::Oculus::Interaction::HandVisual* handVisual, ::UnityEngine::SkinnedMeshRenderer* handRenderer, ::Oculus::Interaction::MaterialPropertyBlockEditor* materialEditor);
    // public System.Void InjectHand(Oculus.Interaction.Input.IHand hand)
    // Offset: 0x477705C
    void InjectHand(::Oculus::Interaction::Input::IHand* hand);
    // public System.Void InjectPokeInteractor(Oculus.Interaction.PokeInteractor pokeInteractor)
    // Offset: 0x477719C
    void InjectPokeInteractor(::Oculus::Interaction::PokeInteractor* pokeInteractor);
    // public System.Void InjectHandRenderer(UnityEngine.SkinnedMeshRenderer handRenderer)
    // Offset: 0x47771A4
    void InjectHandRenderer(::UnityEngine::SkinnedMeshRenderer* handRenderer);
    // public System.Void InjectHandVisual(Oculus.Interaction.HandVisual handVisual)
    // Offset: 0x47771AC
    void InjectHandVisual(::Oculus::Interaction::HandVisual* handVisual);
    // public System.Void InjectMaterialPropertyBlockEditor(Oculus.Interaction.MaterialPropertyBlockEditor materialEditor)
    // Offset: 0x47771B4
    void InjectMaterialPropertyBlockEditor(::Oculus::Interaction::MaterialPropertyBlockEditor* materialEditor);
    // public System.Void InjectGlowColor(UnityEngine.Color glowColor)
    // Offset: 0x47771BC
    void InjectGlowColor(::UnityEngine::Color glowColor);
    // public System.Void InjectOvershootMaxDistance(System.Single overshootMaxDistance)
    // Offset: 0x47771C8
    void InjectOvershootMaxDistance(float overshootMaxDistance);
    // public System.Void InjectGlowType(Oculus.Interaction.HandPokeOvershootGlow/GlowType glowType)
    // Offset: 0x47771D0
    void InjectGlowType(::Oculus::Interaction::HandPokeOvershootGlow::GlowType glowType);
    // public System.Void .ctor()
    // Offset: 0x47771D8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HandPokeOvershootGlow* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::HandPokeOvershootGlow::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HandPokeOvershootGlow*, creationType>()));
    }
  }; // Oculus.Interaction.HandPokeOvershootGlow
  #pragma pack(pop)
  static check_size<sizeof(HandPokeOvershootGlow), 140 + sizeof(bool)> __Oculus_Interaction_HandPokeOvershootGlowSizeCheck;
  static_assert(sizeof(HandPokeOvershootGlow) == 0x8D);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::HandPokeOvershootGlow::GlowType, "Oculus.Interaction", "HandPokeOvershootGlow/GlowType");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::HandPokeOvershootGlow::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandPokeOvershootGlow::*)()>(&Oculus::Interaction::HandPokeOvershootGlow::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandPokeOvershootGlow*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandPokeOvershootGlow::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandPokeOvershootGlow::*)()>(&Oculus::Interaction::HandPokeOvershootGlow::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandPokeOvershootGlow*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandPokeOvershootGlow::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandPokeOvershootGlow::*)()>(&Oculus::Interaction::HandPokeOvershootGlow::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandPokeOvershootGlow*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandPokeOvershootGlow::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandPokeOvershootGlow::*)()>(&Oculus::Interaction::HandPokeOvershootGlow::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandPokeOvershootGlow*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandPokeOvershootGlow::UpdateOvershoot
// Il2CppName: UpdateOvershoot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandPokeOvershootGlow::*)(float)>(&Oculus::Interaction::HandPokeOvershootGlow::UpdateOvershoot)> {
  static const MethodInfo* get() {
    static auto* normalizedDistance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandPokeOvershootGlow*), "UpdateOvershoot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{normalizedDistance});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandPokeOvershootGlow::UpdateVisual
// Il2CppName: UpdateVisual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandPokeOvershootGlow::*)()>(&Oculus::Interaction::HandPokeOvershootGlow::UpdateVisual)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandPokeOvershootGlow*), "UpdateVisual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandPokeOvershootGlow::InjectAllHandPokeOvershootGlow
// Il2CppName: InjectAllHandPokeOvershootGlow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandPokeOvershootGlow::*)(::Oculus::Interaction::Input::IHand*, ::Oculus::Interaction::PokeInteractor*, ::Oculus::Interaction::MaterialPropertyBlockEditor*, ::UnityEngine::Color, float, ::UnityEngine::Transform*, ::Oculus::Interaction::HandPokeOvershootGlow::GlowType)>(&Oculus::Interaction::HandPokeOvershootGlow::InjectAllHandPokeOvershootGlow)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHand")->byval_arg;
    static auto* pokeInteractor = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "PokeInteractor")->byval_arg;
    static auto* materialEditor = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "MaterialPropertyBlockEditor")->byval_arg;
    static auto* glowColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* distanceMultiplier = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* wristTransform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* glowType = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "HandPokeOvershootGlow/GlowType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandPokeOvershootGlow*), "InjectAllHandPokeOvershootGlow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand, pokeInteractor, materialEditor, glowColor, distanceMultiplier, wristTransform, glowType});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandPokeOvershootGlow::InjectAllHandPokeOvershootGlow
// Il2CppName: InjectAllHandPokeOvershootGlow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandPokeOvershootGlow::*)(::Oculus::Interaction::Input::IHand*, ::Oculus::Interaction::PokeInteractor*, ::Oculus::Interaction::HandVisual*, ::UnityEngine::SkinnedMeshRenderer*, ::Oculus::Interaction::MaterialPropertyBlockEditor*)>(&Oculus::Interaction::HandPokeOvershootGlow::InjectAllHandPokeOvershootGlow)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHand")->byval_arg;
    static auto* pokeInteractor = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "PokeInteractor")->byval_arg;
    static auto* handVisual = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "HandVisual")->byval_arg;
    static auto* handRenderer = &::il2cpp_utils::GetClassFromName("UnityEngine", "SkinnedMeshRenderer")->byval_arg;
    static auto* materialEditor = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "MaterialPropertyBlockEditor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandPokeOvershootGlow*), "InjectAllHandPokeOvershootGlow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand, pokeInteractor, handVisual, handRenderer, materialEditor});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandPokeOvershootGlow::InjectHand
// Il2CppName: InjectHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandPokeOvershootGlow::*)(::Oculus::Interaction::Input::IHand*)>(&Oculus::Interaction::HandPokeOvershootGlow::InjectHand)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandPokeOvershootGlow*), "InjectHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandPokeOvershootGlow::InjectPokeInteractor
// Il2CppName: InjectPokeInteractor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandPokeOvershootGlow::*)(::Oculus::Interaction::PokeInteractor*)>(&Oculus::Interaction::HandPokeOvershootGlow::InjectPokeInteractor)> {
  static const MethodInfo* get() {
    static auto* pokeInteractor = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "PokeInteractor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandPokeOvershootGlow*), "InjectPokeInteractor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pokeInteractor});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandPokeOvershootGlow::InjectHandRenderer
// Il2CppName: InjectHandRenderer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandPokeOvershootGlow::*)(::UnityEngine::SkinnedMeshRenderer*)>(&Oculus::Interaction::HandPokeOvershootGlow::InjectHandRenderer)> {
  static const MethodInfo* get() {
    static auto* handRenderer = &::il2cpp_utils::GetClassFromName("UnityEngine", "SkinnedMeshRenderer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandPokeOvershootGlow*), "InjectHandRenderer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handRenderer});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandPokeOvershootGlow::InjectHandVisual
// Il2CppName: InjectHandVisual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandPokeOvershootGlow::*)(::Oculus::Interaction::HandVisual*)>(&Oculus::Interaction::HandPokeOvershootGlow::InjectHandVisual)> {
  static const MethodInfo* get() {
    static auto* handVisual = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "HandVisual")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandPokeOvershootGlow*), "InjectHandVisual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handVisual});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandPokeOvershootGlow::InjectMaterialPropertyBlockEditor
// Il2CppName: InjectMaterialPropertyBlockEditor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandPokeOvershootGlow::*)(::Oculus::Interaction::MaterialPropertyBlockEditor*)>(&Oculus::Interaction::HandPokeOvershootGlow::InjectMaterialPropertyBlockEditor)> {
  static const MethodInfo* get() {
    static auto* materialEditor = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "MaterialPropertyBlockEditor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandPokeOvershootGlow*), "InjectMaterialPropertyBlockEditor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{materialEditor});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandPokeOvershootGlow::InjectGlowColor
// Il2CppName: InjectGlowColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandPokeOvershootGlow::*)(::UnityEngine::Color)>(&Oculus::Interaction::HandPokeOvershootGlow::InjectGlowColor)> {
  static const MethodInfo* get() {
    static auto* glowColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandPokeOvershootGlow*), "InjectGlowColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{glowColor});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandPokeOvershootGlow::InjectOvershootMaxDistance
// Il2CppName: InjectOvershootMaxDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandPokeOvershootGlow::*)(float)>(&Oculus::Interaction::HandPokeOvershootGlow::InjectOvershootMaxDistance)> {
  static const MethodInfo* get() {
    static auto* overshootMaxDistance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandPokeOvershootGlow*), "InjectOvershootMaxDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{overshootMaxDistance});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandPokeOvershootGlow::InjectGlowType
// Il2CppName: InjectGlowType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandPokeOvershootGlow::*)(::Oculus::Interaction::HandPokeOvershootGlow::GlowType)>(&Oculus::Interaction::HandPokeOvershootGlow::InjectGlowType)> {
  static const MethodInfo* get() {
    static auto* glowType = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "HandPokeOvershootGlow/GlowType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandPokeOvershootGlow*), "InjectGlowType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{glowType});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandPokeOvershootGlow::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
