// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Collider
  class Collider;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: ColliderGroup
  class ColliderGroup;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::ColliderGroup);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::ColliderGroup*, "Oculus.Interaction", "ColliderGroup");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.ColliderGroup
  // [TokenAttribute] Offset: FFFFFFFF
  class ColliderGroup : public ::Il2CppObject {
    public:
    public:
    // private UnityEngine.Collider _boundsCollider
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::Collider* boundsCollider;
    // Field size check
    static_assert(sizeof(::UnityEngine::Collider*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.Collider> _colliders
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::UnityEngine::Collider*>* colliders;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Collider*>*) == 0x8);
    public:
    // Get instance field reference: private UnityEngine.Collider _boundsCollider
    [[deprecated("Use field access instead!")]] ::UnityEngine::Collider*& dyn__boundsCollider();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Collider> _colliders
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Collider*>*& dyn__colliders();
    // public UnityEngine.Collider get_Bounds()
    // Offset: 0x4770C9C
    ::UnityEngine::Collider* get_Bounds();
    // public System.Collections.Generic.List`1<UnityEngine.Collider> get_Colliders()
    // Offset: 0x4770CA4
    ::System::Collections::Generic::List_1<::UnityEngine::Collider*>* get_Colliders();
    // public System.Void .ctor(System.Collections.Generic.List`1<UnityEngine.Collider> colliders, UnityEngine.Collider boundsCollider)
    // Offset: 0x4770CAC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ColliderGroup* New_ctor(::System::Collections::Generic::List_1<::UnityEngine::Collider*>* colliders, ::UnityEngine::Collider* boundsCollider) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::ColliderGroup::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ColliderGroup*, creationType>(colliders, boundsCollider)));
    }
  }; // Oculus.Interaction.ColliderGroup
  #pragma pack(pop)
  static check_size<sizeof(ColliderGroup), 24 + sizeof(::System::Collections::Generic::List_1<::UnityEngine::Collider*>*)> __Oculus_Interaction_ColliderGroupSizeCheck;
  static_assert(sizeof(ColliderGroup) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::ColliderGroup::get_Bounds
// Il2CppName: get_Bounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Collider* (Oculus::Interaction::ColliderGroup::*)()>(&Oculus::Interaction::ColliderGroup::get_Bounds)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ColliderGroup*), "get_Bounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ColliderGroup::get_Colliders
// Il2CppName: get_Colliders
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::Collider*>* (Oculus::Interaction::ColliderGroup::*)()>(&Oculus::Interaction::ColliderGroup::get_Colliders)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ColliderGroup*), "get_Colliders", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ColliderGroup::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
