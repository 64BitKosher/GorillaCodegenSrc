// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.PropertyAttribute
#include "UnityEngine/PropertyAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: InterfaceAttribute
  class InterfaceAttribute;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::InterfaceAttribute);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::InterfaceAttribute*, "Oculus.Interaction", "InterfaceAttribute");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.InterfaceAttribute
  // [TokenAttribute] Offset: FFFFFFFF
  // [AttributeUsageAttribute] Offset: FFFFFFFF
  class InterfaceAttribute : public ::UnityEngine::PropertyAttribute {
    public:
    // Writing base type padding for base size: 0x14 to desired offset: 0x18
    char ___base_padding[0x4] = {};
    public:
    // public System.Type[] Types
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::System::Type*> Types;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::Type*>) == 0x8);
    // public System.String TypeFromFieldName
    // Size: 0x8
    // Offset: 0x20
    ::StringW TypeFromFieldName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Deleting conversion operator: operator int
    constexpr operator int() const noexcept = delete;
    // Get instance field reference: public System.Type[] Types
    [[deprecated("Use field access instead!")]] ::ArrayW<::System::Type*>& dyn_Types();
    // Get instance field reference: public System.String TypeFromFieldName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_TypeFromFieldName();
    // public System.Void .ctor(System.Type type, params System.Type[] types)
    // Offset: 0x47DD514
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InterfaceAttribute* New_ctor(::System::Type* type, ::ArrayW<::System::Type*> types) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::InterfaceAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InterfaceAttribute*, creationType>(type, types)));
    }
    // public System.Void .ctor(System.String typeFromFieldName)
    // Offset: 0x47DD660
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InterfaceAttribute* New_ctor(::StringW typeFromFieldName) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::InterfaceAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InterfaceAttribute*, creationType>(typeFromFieldName)));
    }
  }; // Oculus.Interaction.InterfaceAttribute
  #pragma pack(pop)
  static check_size<sizeof(InterfaceAttribute), 32 + sizeof(::StringW)> __Oculus_Interaction_InterfaceAttributeSizeCheck;
  static_assert(sizeof(InterfaceAttribute) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::InterfaceAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Interaction::InterfaceAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
