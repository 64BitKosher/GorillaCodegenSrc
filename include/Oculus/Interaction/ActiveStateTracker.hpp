// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Object because it is already included!
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: Oculus::Interaction
namespace Oculus::Interaction {
  // Forward declaring type: IActiveState
  class IActiveState;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: ActiveStateTracker
  class ActiveStateTracker;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::ActiveStateTracker);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::ActiveStateTracker*, "Oculus.Interaction", "ActiveStateTracker");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x49
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.ActiveStateTracker
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultExecutionOrder] Offset: FFFFFFFF
  class ActiveStateTracker : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.Object _activeState
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Object* activeState;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.IActiveState ActiveState
    // Size: 0x8
    // Offset: 0x28
    ::Oculus::Interaction::IActiveState* ActiveState;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::IActiveState*) == 0x8);
    // private System.Boolean _includeChildrenAsDependents
    // Size: 0x1
    // Offset: 0x30
    bool includeChildrenAsDependents;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: includeChildrenAsDependents and: gameObjects
    char __padding2[0x7] = {};
    // private System.Collections.Generic.List`1<UnityEngine.GameObject> _gameObjects
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* gameObjects;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.MonoBehaviour> _monoBehaviours
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::Generic::List_1<::UnityEngine::MonoBehaviour*>* monoBehaviours;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::MonoBehaviour*>*) == 0x8);
    // private System.Boolean _active
    // Size: 0x1
    // Offset: 0x48
    bool active;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private UnityEngine.Object _activeState
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__activeState();
    // Get instance field reference: private Oculus.Interaction.IActiveState ActiveState
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::IActiveState*& dyn_ActiveState();
    // Get instance field reference: private System.Boolean _includeChildrenAsDependents
    [[deprecated("Use field access instead!")]] bool& dyn__includeChildrenAsDependents();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.GameObject> _gameObjects
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*& dyn__gameObjects();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.MonoBehaviour> _monoBehaviours
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::MonoBehaviour*>*& dyn__monoBehaviours();
    // Get instance field reference: private System.Boolean _active
    [[deprecated("Use field access instead!")]] bool& dyn__active();
    // protected System.Void Awake()
    // Offset: 0x477A740
    void Awake();
    // protected System.Void Start()
    // Offset: 0x477A7A8
    void Start();
    // protected System.Void Update()
    // Offset: 0x477A9C4
    void Update();
    // private System.Void SetDependentsActive(System.Boolean active)
    // Offset: 0x477A8C4
    void SetDependentsActive(bool active);
    // public System.Void InjectAllActiveStateTracker(Oculus.Interaction.IActiveState activeState)
    // Offset: 0x477AB60
    void InjectAllActiveStateTracker(::Oculus::Interaction::IActiveState* activeState);
    // public System.Void InjectActiveState(Oculus.Interaction.IActiveState activeState)
    // Offset: 0x477AB64
    void InjectActiveState(::Oculus::Interaction::IActiveState* activeState);
    // public System.Void InjectOptionalIncludeChildrenAsDependents(System.Boolean includeChildrenAsDependents)
    // Offset: 0x477AC34
    void InjectOptionalIncludeChildrenAsDependents(bool includeChildrenAsDependents);
    // public System.Void InjectOptionalGameObjects(System.Collections.Generic.List`1<UnityEngine.GameObject> gameObjects)
    // Offset: 0x477AC40
    void InjectOptionalGameObjects(::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* gameObjects);
    // public System.Void InjectOptionalMonoBehaviours(System.Collections.Generic.List`1<UnityEngine.MonoBehaviour> monoBehaviours)
    // Offset: 0x477AC48
    void InjectOptionalMonoBehaviours(::System::Collections::Generic::List_1<::UnityEngine::MonoBehaviour*>* monoBehaviours);
    // public System.Void .ctor()
    // Offset: 0x477AC50
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ActiveStateTracker* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::ActiveStateTracker::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ActiveStateTracker*, creationType>()));
    }
  }; // Oculus.Interaction.ActiveStateTracker
  #pragma pack(pop)
  static check_size<sizeof(ActiveStateTracker), 72 + sizeof(bool)> __Oculus_Interaction_ActiveStateTrackerSizeCheck;
  static_assert(sizeof(ActiveStateTracker) == 0x49);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::ActiveStateTracker::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ActiveStateTracker::*)()>(&Oculus::Interaction::ActiveStateTracker::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ActiveStateTracker*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ActiveStateTracker::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ActiveStateTracker::*)()>(&Oculus::Interaction::ActiveStateTracker::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ActiveStateTracker*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ActiveStateTracker::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ActiveStateTracker::*)()>(&Oculus::Interaction::ActiveStateTracker::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ActiveStateTracker*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ActiveStateTracker::SetDependentsActive
// Il2CppName: SetDependentsActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ActiveStateTracker::*)(bool)>(&Oculus::Interaction::ActiveStateTracker::SetDependentsActive)> {
  static const MethodInfo* get() {
    static auto* active = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ActiveStateTracker*), "SetDependentsActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{active});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ActiveStateTracker::InjectAllActiveStateTracker
// Il2CppName: InjectAllActiveStateTracker
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ActiveStateTracker::*)(::Oculus::Interaction::IActiveState*)>(&Oculus::Interaction::ActiveStateTracker::InjectAllActiveStateTracker)> {
  static const MethodInfo* get() {
    static auto* activeState = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IActiveState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ActiveStateTracker*), "InjectAllActiveStateTracker", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{activeState});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ActiveStateTracker::InjectActiveState
// Il2CppName: InjectActiveState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ActiveStateTracker::*)(::Oculus::Interaction::IActiveState*)>(&Oculus::Interaction::ActiveStateTracker::InjectActiveState)> {
  static const MethodInfo* get() {
    static auto* activeState = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IActiveState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ActiveStateTracker*), "InjectActiveState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{activeState});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ActiveStateTracker::InjectOptionalIncludeChildrenAsDependents
// Il2CppName: InjectOptionalIncludeChildrenAsDependents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ActiveStateTracker::*)(bool)>(&Oculus::Interaction::ActiveStateTracker::InjectOptionalIncludeChildrenAsDependents)> {
  static const MethodInfo* get() {
    static auto* includeChildrenAsDependents = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ActiveStateTracker*), "InjectOptionalIncludeChildrenAsDependents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{includeChildrenAsDependents});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ActiveStateTracker::InjectOptionalGameObjects
// Il2CppName: InjectOptionalGameObjects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ActiveStateTracker::*)(::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*)>(&Oculus::Interaction::ActiveStateTracker::InjectOptionalGameObjects)> {
  static const MethodInfo* get() {
    static auto* gameObjects = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ActiveStateTracker*), "InjectOptionalGameObjects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObjects});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ActiveStateTracker::InjectOptionalMonoBehaviours
// Il2CppName: InjectOptionalMonoBehaviours
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ActiveStateTracker::*)(::System::Collections::Generic::List_1<::UnityEngine::MonoBehaviour*>*)>(&Oculus::Interaction::ActiveStateTracker::InjectOptionalMonoBehaviours)> {
  static const MethodInfo* get() {
    static auto* monoBehaviours = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "MonoBehaviour")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ActiveStateTracker*), "InjectOptionalMonoBehaviours", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{monoBehaviours});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ActiveStateTracker::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
