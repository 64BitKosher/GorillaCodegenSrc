// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Oculus.Interaction.IActiveState
#include "Oculus/Interaction/IActiveState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction
namespace Oculus::Interaction {
  // Skipping declaration: ActiveStateGroupLogicOperator because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Object because it is already included!
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: ActiveStateGroup
  class ActiveStateGroup;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::ActiveStateGroup);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::ActiveStateGroup*, "Oculus.Interaction", "ActiveStateGroup");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x34
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.ActiveStateGroup
  // [TokenAttribute] Offset: FFFFFFFF
  class ActiveStateGroup : public ::UnityEngine::MonoBehaviour/*, public ::Oculus::Interaction::IActiveState*/ {
    public:
    // Nested type: ::Oculus::Interaction::ActiveStateGroup::ActiveStateGroupLogicOperator
    struct ActiveStateGroupLogicOperator;
    // Nested type: ::Oculus::Interaction::ActiveStateGroup::DebugModel
    class DebugModel;
    // Nested type: ::Oculus::Interaction::ActiveStateGroup::$$c
    class $$c;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Oculus.Interaction.ActiveStateGroup/ActiveStateGroupLogicOperator
    // [TokenAttribute] Offset: FFFFFFFF
    struct ActiveStateGroupLogicOperator/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: ActiveStateGroupLogicOperator
      constexpr ActiveStateGroupLogicOperator(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Oculus.Interaction.ActiveStateGroup/ActiveStateGroupLogicOperator AND
      static constexpr const int AND = 0;
      // Get static field: static public Oculus.Interaction.ActiveStateGroup/ActiveStateGroupLogicOperator AND
      static ::Oculus::Interaction::ActiveStateGroup::ActiveStateGroupLogicOperator _get_AND();
      // Set static field: static public Oculus.Interaction.ActiveStateGroup/ActiveStateGroupLogicOperator AND
      static void _set_AND(::Oculus::Interaction::ActiveStateGroup::ActiveStateGroupLogicOperator value);
      // static field const value: static public Oculus.Interaction.ActiveStateGroup/ActiveStateGroupLogicOperator OR
      static constexpr const int OR = 1;
      // Get static field: static public Oculus.Interaction.ActiveStateGroup/ActiveStateGroupLogicOperator OR
      static ::Oculus::Interaction::ActiveStateGroup::ActiveStateGroupLogicOperator _get_OR();
      // Set static field: static public Oculus.Interaction.ActiveStateGroup/ActiveStateGroupLogicOperator OR
      static void _set_OR(::Oculus::Interaction::ActiveStateGroup::ActiveStateGroupLogicOperator value);
      // static field const value: static public Oculus.Interaction.ActiveStateGroup/ActiveStateGroupLogicOperator XOR
      static constexpr const int XOR = 2;
      // Get static field: static public Oculus.Interaction.ActiveStateGroup/ActiveStateGroupLogicOperator XOR
      static ::Oculus::Interaction::ActiveStateGroup::ActiveStateGroupLogicOperator _get_XOR();
      // Set static field: static public Oculus.Interaction.ActiveStateGroup/ActiveStateGroupLogicOperator XOR
      static void _set_XOR(::Oculus::Interaction::ActiveStateGroup::ActiveStateGroupLogicOperator value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Oculus.Interaction.ActiveStateGroup/ActiveStateGroupLogicOperator
    #pragma pack(pop)
    static check_size<sizeof(ActiveStateGroup::ActiveStateGroupLogicOperator), 0 + sizeof(int)> __Oculus_Interaction_ActiveStateGroup_ActiveStateGroupLogicOperatorSizeCheck;
    static_assert(sizeof(ActiveStateGroup::ActiveStateGroupLogicOperator) == 0x4);
    public:
    // private System.Collections.Generic.List`1<UnityEngine.Object> _activeStates
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::UnityEngine::Object*>* activeStates;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Object*>*) == 0x8);
    // private System.Collections.Generic.List`1<Oculus.Interaction.IActiveState> ActiveStates
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::List_1<::Oculus::Interaction::IActiveState*>* ActiveStates;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Oculus::Interaction::IActiveState*>*) == 0x8);
    // private Oculus.Interaction.ActiveStateGroup/ActiveStateGroupLogicOperator _logicOperator
    // Size: 0x4
    // Offset: 0x30
    ::Oculus::Interaction::ActiveStateGroup::ActiveStateGroupLogicOperator logicOperator;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::ActiveStateGroup::ActiveStateGroupLogicOperator) == 0x4);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::IActiveState
    operator ::Oculus::Interaction::IActiveState() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::IActiveState*>(this);
    }
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Object> _activeStates
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Object*>*& dyn__activeStates();
    // Get instance field reference: private System.Collections.Generic.List`1<Oculus.Interaction.IActiveState> ActiveStates
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Oculus::Interaction::IActiveState*>*& dyn_ActiveStates();
    // Get instance field reference: private Oculus.Interaction.ActiveStateGroup/ActiveStateGroupLogicOperator _logicOperator
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::ActiveStateGroup::ActiveStateGroupLogicOperator& dyn__logicOperator();
    // protected System.Void Awake()
    // Offset: 0x4778DB8
    void Awake();
    // protected System.Void Start()
    // Offset: 0x4778ECC
    void Start();
    // public System.Boolean get_Active()
    // Offset: 0x4778ED0
    bool get_Active();
    // static private System.Void .cctor()
    // Offset: 0x4779328
    static void _cctor();
    // public System.Void InjectAllActiveStateGroup(System.Collections.Generic.List`1<Oculus.Interaction.IActiveState> activeStates)
    // Offset: 0x47793FC
    void InjectAllActiveStateGroup(::System::Collections::Generic::List_1<::Oculus::Interaction::IActiveState*>* activeStates);
    // public System.Void InjectActiveStates(System.Collections.Generic.List`1<Oculus.Interaction.IActiveState> activeStates)
    // Offset: 0x4779400
    void InjectActiveStates(::System::Collections::Generic::List_1<::Oculus::Interaction::IActiveState*>* activeStates);
    // public System.Void InjectOptionalLogicOperator(Oculus.Interaction.ActiveStateGroup/ActiveStateGroupLogicOperator logicOperator)
    // Offset: 0x4779524
    void InjectOptionalLogicOperator(::Oculus::Interaction::ActiveStateGroup::ActiveStateGroupLogicOperator logicOperator);
    // public System.Void .ctor()
    // Offset: 0x477952C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ActiveStateGroup* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::ActiveStateGroup::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ActiveStateGroup*, creationType>()));
    }
  }; // Oculus.Interaction.ActiveStateGroup
  #pragma pack(pop)
  static check_size<sizeof(ActiveStateGroup), 48 + sizeof(::Oculus::Interaction::ActiveStateGroup::ActiveStateGroupLogicOperator)> __Oculus_Interaction_ActiveStateGroupSizeCheck;
  static_assert(sizeof(ActiveStateGroup) == 0x34);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::ActiveStateGroup::ActiveStateGroupLogicOperator, "Oculus.Interaction", "ActiveStateGroup/ActiveStateGroupLogicOperator");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::ActiveStateGroup::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ActiveStateGroup::*)()>(&Oculus::Interaction::ActiveStateGroup::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ActiveStateGroup*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ActiveStateGroup::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ActiveStateGroup::*)()>(&Oculus::Interaction::ActiveStateGroup::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ActiveStateGroup*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ActiveStateGroup::get_Active
// Il2CppName: get_Active
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::ActiveStateGroup::*)()>(&Oculus::Interaction::ActiveStateGroup::get_Active)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ActiveStateGroup*), "get_Active", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ActiveStateGroup::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Oculus::Interaction::ActiveStateGroup::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ActiveStateGroup*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ActiveStateGroup::InjectAllActiveStateGroup
// Il2CppName: InjectAllActiveStateGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ActiveStateGroup::*)(::System::Collections::Generic::List_1<::Oculus::Interaction::IActiveState*>*)>(&Oculus::Interaction::ActiveStateGroup::InjectAllActiveStateGroup)> {
  static const MethodInfo* get() {
    static auto* activeStates = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IActiveState")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ActiveStateGroup*), "InjectAllActiveStateGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{activeStates});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ActiveStateGroup::InjectActiveStates
// Il2CppName: InjectActiveStates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ActiveStateGroup::*)(::System::Collections::Generic::List_1<::Oculus::Interaction::IActiveState*>*)>(&Oculus::Interaction::ActiveStateGroup::InjectActiveStates)> {
  static const MethodInfo* get() {
    static auto* activeStates = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IActiveState")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ActiveStateGroup*), "InjectActiveStates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{activeStates});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ActiveStateGroup::InjectOptionalLogicOperator
// Il2CppName: InjectOptionalLogicOperator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ActiveStateGroup::*)(::Oculus::Interaction::ActiveStateGroup::ActiveStateGroupLogicOperator)>(&Oculus::Interaction::ActiveStateGroup::InjectOptionalLogicOperator)> {
  static const MethodInfo* get() {
    static auto* logicOperator = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "ActiveStateGroup/ActiveStateGroupLogicOperator")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ActiveStateGroup*), "InjectOptionalLogicOperator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{logicOperator});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ActiveStateGroup::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
