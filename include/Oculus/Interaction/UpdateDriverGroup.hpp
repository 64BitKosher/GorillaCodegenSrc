// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Oculus.Interaction.IUpdateDriver
#include "Oculus/Interaction/IUpdateDriver.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction
namespace Oculus::Interaction {
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Object because it is already included!
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: UpdateDriverGroup
  class UpdateDriverGroup;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::UpdateDriverGroup);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::UpdateDriverGroup*, "Oculus.Interaction", "UpdateDriverGroup");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x3C
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.UpdateDriverGroup
  // [TokenAttribute] Offset: FFFFFFFF
  class UpdateDriverGroup : public ::UnityEngine::MonoBehaviour/*, public ::Oculus::Interaction::IUpdateDriver*/ {
    public:
    // Nested type: ::Oculus::Interaction::UpdateDriverGroup::$$c
    class $$c;
    public:
    // private System.Boolean <IsRootDriver>k__BackingField
    // Size: 0x1
    // Offset: 0x20
    bool IsRootDriver;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: IsRootDriver and: updateDrivers
    char __padding0[0x7] = {};
    // private System.Collections.Generic.List`1<UnityEngine.Object> _updateDrivers
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::List_1<::UnityEngine::Object*>* updateDrivers;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Object*>*) == 0x8);
    // protected System.Collections.Generic.List`1<Oculus.Interaction.IUpdateDriver> Drivers
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::List_1<::Oculus::Interaction::IUpdateDriver*>* Drivers;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Oculus::Interaction::IUpdateDriver*>*) == 0x8);
    // private System.Int32 _iterations
    // Size: 0x4
    // Offset: 0x38
    int iterations;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::IUpdateDriver
    operator ::Oculus::Interaction::IUpdateDriver() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::IUpdateDriver*>(this);
    }
    // Get instance field reference: private System.Boolean <IsRootDriver>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$IsRootDriver$k__BackingField();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Object> _updateDrivers
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Object*>*& dyn__updateDrivers();
    // Get instance field reference: protected System.Collections.Generic.List`1<Oculus.Interaction.IUpdateDriver> Drivers
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Oculus::Interaction::IUpdateDriver*>*& dyn_Drivers();
    // Get instance field reference: private System.Int32 _iterations
    [[deprecated("Use field access instead!")]] int& dyn__iterations();
    // public System.Boolean get_IsRootDriver()
    // Offset: 0x478A054
    bool get_IsRootDriver();
    // public System.Void set_IsRootDriver(System.Boolean value)
    // Offset: 0x478A05C
    void set_IsRootDriver(bool value);
    // public System.Int32 get_Iterations()
    // Offset: 0x478A068
    int get_Iterations();
    // public System.Void set_Iterations(System.Int32 value)
    // Offset: 0x478A070
    void set_Iterations(int value);
    // protected System.Void Awake()
    // Offset: 0x478A078
    void Awake();
    // protected System.Void Start()
    // Offset: 0x478A18C
    void Start();
    // protected System.Void Update()
    // Offset: 0x478A190
    void Update();
    // public System.Void Drive()
    // Offset: 0x478A1A0
    void Drive();
    // public System.Void InjectAllUpdateDriverGroup(System.Collections.Generic.List`1<Oculus.Interaction.IUpdateDriver> updateDrivers)
    // Offset: 0x478A394
    void InjectAllUpdateDriverGroup(::System::Collections::Generic::List_1<::Oculus::Interaction::IUpdateDriver*>* updateDrivers);
    // public System.Void InjectUpdateDrivers(System.Collections.Generic.List`1<Oculus.Interaction.IUpdateDriver> updateDrivers)
    // Offset: 0x478A398
    void InjectUpdateDrivers(::System::Collections::Generic::List_1<::Oculus::Interaction::IUpdateDriver*>* updateDrivers);
    // public System.Void .ctor()
    // Offset: 0x478A4BC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UpdateDriverGroup* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::UpdateDriverGroup::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UpdateDriverGroup*, creationType>()));
    }
  }; // Oculus.Interaction.UpdateDriverGroup
  #pragma pack(pop)
  static check_size<sizeof(UpdateDriverGroup), 56 + sizeof(int)> __Oculus_Interaction_UpdateDriverGroupSizeCheck;
  static_assert(sizeof(UpdateDriverGroup) == 0x3C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::UpdateDriverGroup::get_IsRootDriver
// Il2CppName: get_IsRootDriver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::UpdateDriverGroup::*)()>(&Oculus::Interaction::UpdateDriverGroup::get_IsRootDriver)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UpdateDriverGroup*), "get_IsRootDriver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UpdateDriverGroup::set_IsRootDriver
// Il2CppName: set_IsRootDriver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::UpdateDriverGroup::*)(bool)>(&Oculus::Interaction::UpdateDriverGroup::set_IsRootDriver)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UpdateDriverGroup*), "set_IsRootDriver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UpdateDriverGroup::get_Iterations
// Il2CppName: get_Iterations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Oculus::Interaction::UpdateDriverGroup::*)()>(&Oculus::Interaction::UpdateDriverGroup::get_Iterations)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UpdateDriverGroup*), "get_Iterations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UpdateDriverGroup::set_Iterations
// Il2CppName: set_Iterations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::UpdateDriverGroup::*)(int)>(&Oculus::Interaction::UpdateDriverGroup::set_Iterations)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UpdateDriverGroup*), "set_Iterations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UpdateDriverGroup::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::UpdateDriverGroup::*)()>(&Oculus::Interaction::UpdateDriverGroup::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UpdateDriverGroup*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UpdateDriverGroup::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::UpdateDriverGroup::*)()>(&Oculus::Interaction::UpdateDriverGroup::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UpdateDriverGroup*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UpdateDriverGroup::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::UpdateDriverGroup::*)()>(&Oculus::Interaction::UpdateDriverGroup::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UpdateDriverGroup*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UpdateDriverGroup::Drive
// Il2CppName: Drive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::UpdateDriverGroup::*)()>(&Oculus::Interaction::UpdateDriverGroup::Drive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UpdateDriverGroup*), "Drive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UpdateDriverGroup::InjectAllUpdateDriverGroup
// Il2CppName: InjectAllUpdateDriverGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::UpdateDriverGroup::*)(::System::Collections::Generic::List_1<::Oculus::Interaction::IUpdateDriver*>*)>(&Oculus::Interaction::UpdateDriverGroup::InjectAllUpdateDriverGroup)> {
  static const MethodInfo* get() {
    static auto* updateDrivers = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IUpdateDriver")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UpdateDriverGroup*), "InjectAllUpdateDriverGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{updateDrivers});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UpdateDriverGroup::InjectUpdateDrivers
// Il2CppName: InjectUpdateDrivers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::UpdateDriverGroup::*)(::System::Collections::Generic::List_1<::Oculus::Interaction::IUpdateDriver*>*)>(&Oculus::Interaction::UpdateDriverGroup::InjectUpdateDrivers)> {
  static const MethodInfo* get() {
    static auto* updateDrivers = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IUpdateDriver")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UpdateDriverGroup*), "InjectUpdateDrivers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{updateDrivers});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UpdateDriverGroup::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
