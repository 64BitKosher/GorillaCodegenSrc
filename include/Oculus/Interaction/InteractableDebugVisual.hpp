// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Object because it is already included!
  // Forward declaring type: Renderer
  class Renderer;
  // Forward declaring type: Material
  class Material;
}
// Forward declaring namespace: Oculus::Interaction
namespace Oculus::Interaction {
  // Forward declaring type: IInteractableView
  class IInteractableView;
  // Forward declaring type: InteractableStateChangeArgs
  struct InteractableStateChangeArgs;
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: InteractableDebugVisual
  class InteractableDebugVisual;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::InteractableDebugVisual);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::InteractableDebugVisual*, "Oculus.Interaction", "InteractableDebugVisual");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x81
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.InteractableDebugVisual
  // [TokenAttribute] Offset: FFFFFFFF
  class InteractableDebugVisual : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.Object _interactableView
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Object* interactableView;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private UnityEngine.Renderer _renderer
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Renderer* renderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::Renderer*) == 0x8);
    // private UnityEngine.Color _normalColor
    // Size: 0x10
    // Offset: 0x30
    ::UnityEngine::Color normalColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color _hoverColor
    // Size: 0x10
    // Offset: 0x40
    ::UnityEngine::Color hoverColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color _selectColor
    // Size: 0x10
    // Offset: 0x50
    ::UnityEngine::Color selectColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color _disabledColor
    // Size: 0x10
    // Offset: 0x60
    ::UnityEngine::Color disabledColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private Oculus.Interaction.IInteractableView InteractableView
    // Size: 0x8
    // Offset: 0x70
    ::Oculus::Interaction::IInteractableView* InteractableView;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::IInteractableView*) == 0x8);
    // private UnityEngine.Material _material
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::Material* material;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // protected System.Boolean _started
    // Size: 0x1
    // Offset: 0x80
    bool started;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private UnityEngine.Object _interactableView
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__interactableView();
    // Get instance field reference: private UnityEngine.Renderer _renderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& dyn__renderer();
    // Get instance field reference: private UnityEngine.Color _normalColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__normalColor();
    // Get instance field reference: private UnityEngine.Color _hoverColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__hoverColor();
    // Get instance field reference: private UnityEngine.Color _selectColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__selectColor();
    // Get instance field reference: private UnityEngine.Color _disabledColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__disabledColor();
    // Get instance field reference: private Oculus.Interaction.IInteractableView InteractableView
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::IInteractableView*& dyn_InteractableView();
    // Get instance field reference: private UnityEngine.Material _material
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn__material();
    // Get instance field reference: protected System.Boolean _started
    [[deprecated("Use field access instead!")]] bool& dyn__started();
    // public UnityEngine.Color get_NormalColor()
    // Offset: 0x47C88D0
    ::UnityEngine::Color get_NormalColor();
    // public System.Void set_NormalColor(UnityEngine.Color value)
    // Offset: 0x47C88DC
    void set_NormalColor(::UnityEngine::Color value);
    // public UnityEngine.Color get_HoverColor()
    // Offset: 0x47C88E8
    ::UnityEngine::Color get_HoverColor();
    // public System.Void set_HoverColor(UnityEngine.Color value)
    // Offset: 0x47C88F4
    void set_HoverColor(::UnityEngine::Color value);
    // public UnityEngine.Color get_SelectColor()
    // Offset: 0x47C8900
    ::UnityEngine::Color get_SelectColor();
    // public System.Void set_SelectColor(UnityEngine.Color value)
    // Offset: 0x47C890C
    void set_SelectColor(::UnityEngine::Color value);
    // public UnityEngine.Color get_DisabledColor()
    // Offset: 0x47C8918
    ::UnityEngine::Color get_DisabledColor();
    // public System.Void set_DisabledColor(UnityEngine.Color value)
    // Offset: 0x47C8924
    void set_DisabledColor(::UnityEngine::Color value);
    // protected System.Void Awake()
    // Offset: 0x47C8930
    void Awake();
    // protected System.Void Start()
    // Offset: 0x47C8998
    void Start();
    // protected System.Void OnEnable()
    // Offset: 0x47C8B44
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x47C8C4C
    void OnDisable();
    // private System.Void OnDestroy()
    // Offset: 0x47C8D4C
    void OnDestroy();
    // public System.Void SetNormalColor(UnityEngine.Color color)
    // Offset: 0x47C8DA8
    void SetNormalColor(::UnityEngine::Color color);
    // private System.Void UpdateVisual()
    // Offset: 0x47C89FC
    void UpdateVisual();
    // private System.Void UpdateVisualState(Oculus.Interaction.InteractableStateChangeArgs args)
    // Offset: 0x47C8DB4
    void UpdateVisualState(::Oculus::Interaction::InteractableStateChangeArgs args);
    // public System.Void InjectAllInteractableDebugVisual(Oculus.Interaction.IInteractableView interactableView, UnityEngine.Renderer renderer)
    // Offset: 0x47C8DB8
    void InjectAllInteractableDebugVisual(::Oculus::Interaction::IInteractableView* interactableView, ::UnityEngine::Renderer* renderer);
    // public System.Void InjectInteractableView(Oculus.Interaction.IInteractableView interactableView)
    // Offset: 0x47C8DE4
    void InjectInteractableView(::Oculus::Interaction::IInteractableView* interactableView);
    // public System.Void InjectRenderer(UnityEngine.Renderer renderer)
    // Offset: 0x47C8EB4
    void InjectRenderer(::UnityEngine::Renderer* renderer);
    // public System.Void .ctor()
    // Offset: 0x47C8EBC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InteractableDebugVisual* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::InteractableDebugVisual::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InteractableDebugVisual*, creationType>()));
    }
  }; // Oculus.Interaction.InteractableDebugVisual
  #pragma pack(pop)
  static check_size<sizeof(InteractableDebugVisual), 128 + sizeof(bool)> __Oculus_Interaction_InteractableDebugVisualSizeCheck;
  static_assert(sizeof(InteractableDebugVisual) == 0x81);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::InteractableDebugVisual::get_NormalColor
// Il2CppName: get_NormalColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (Oculus::Interaction::InteractableDebugVisual::*)()>(&Oculus::Interaction::InteractableDebugVisual::get_NormalColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractableDebugVisual*), "get_NormalColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractableDebugVisual::set_NormalColor
// Il2CppName: set_NormalColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractableDebugVisual::*)(::UnityEngine::Color)>(&Oculus::Interaction::InteractableDebugVisual::set_NormalColor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractableDebugVisual*), "set_NormalColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractableDebugVisual::get_HoverColor
// Il2CppName: get_HoverColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (Oculus::Interaction::InteractableDebugVisual::*)()>(&Oculus::Interaction::InteractableDebugVisual::get_HoverColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractableDebugVisual*), "get_HoverColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractableDebugVisual::set_HoverColor
// Il2CppName: set_HoverColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractableDebugVisual::*)(::UnityEngine::Color)>(&Oculus::Interaction::InteractableDebugVisual::set_HoverColor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractableDebugVisual*), "set_HoverColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractableDebugVisual::get_SelectColor
// Il2CppName: get_SelectColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (Oculus::Interaction::InteractableDebugVisual::*)()>(&Oculus::Interaction::InteractableDebugVisual::get_SelectColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractableDebugVisual*), "get_SelectColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractableDebugVisual::set_SelectColor
// Il2CppName: set_SelectColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractableDebugVisual::*)(::UnityEngine::Color)>(&Oculus::Interaction::InteractableDebugVisual::set_SelectColor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractableDebugVisual*), "set_SelectColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractableDebugVisual::get_DisabledColor
// Il2CppName: get_DisabledColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (Oculus::Interaction::InteractableDebugVisual::*)()>(&Oculus::Interaction::InteractableDebugVisual::get_DisabledColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractableDebugVisual*), "get_DisabledColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractableDebugVisual::set_DisabledColor
// Il2CppName: set_DisabledColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractableDebugVisual::*)(::UnityEngine::Color)>(&Oculus::Interaction::InteractableDebugVisual::set_DisabledColor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractableDebugVisual*), "set_DisabledColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractableDebugVisual::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractableDebugVisual::*)()>(&Oculus::Interaction::InteractableDebugVisual::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractableDebugVisual*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractableDebugVisual::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractableDebugVisual::*)()>(&Oculus::Interaction::InteractableDebugVisual::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractableDebugVisual*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractableDebugVisual::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractableDebugVisual::*)()>(&Oculus::Interaction::InteractableDebugVisual::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractableDebugVisual*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractableDebugVisual::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractableDebugVisual::*)()>(&Oculus::Interaction::InteractableDebugVisual::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractableDebugVisual*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractableDebugVisual::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractableDebugVisual::*)()>(&Oculus::Interaction::InteractableDebugVisual::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractableDebugVisual*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractableDebugVisual::SetNormalColor
// Il2CppName: SetNormalColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractableDebugVisual::*)(::UnityEngine::Color)>(&Oculus::Interaction::InteractableDebugVisual::SetNormalColor)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractableDebugVisual*), "SetNormalColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractableDebugVisual::UpdateVisual
// Il2CppName: UpdateVisual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractableDebugVisual::*)()>(&Oculus::Interaction::InteractableDebugVisual::UpdateVisual)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractableDebugVisual*), "UpdateVisual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractableDebugVisual::UpdateVisualState
// Il2CppName: UpdateVisualState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractableDebugVisual::*)(::Oculus::Interaction::InteractableStateChangeArgs)>(&Oculus::Interaction::InteractableDebugVisual::UpdateVisualState)> {
  static const MethodInfo* get() {
    static auto* args = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "InteractableStateChangeArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractableDebugVisual*), "UpdateVisualState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{args});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractableDebugVisual::InjectAllInteractableDebugVisual
// Il2CppName: InjectAllInteractableDebugVisual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractableDebugVisual::*)(::Oculus::Interaction::IInteractableView*, ::UnityEngine::Renderer*)>(&Oculus::Interaction::InteractableDebugVisual::InjectAllInteractableDebugVisual)> {
  static const MethodInfo* get() {
    static auto* interactableView = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IInteractableView")->byval_arg;
    static auto* renderer = &::il2cpp_utils::GetClassFromName("UnityEngine", "Renderer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractableDebugVisual*), "InjectAllInteractableDebugVisual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactableView, renderer});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractableDebugVisual::InjectInteractableView
// Il2CppName: InjectInteractableView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractableDebugVisual::*)(::Oculus::Interaction::IInteractableView*)>(&Oculus::Interaction::InteractableDebugVisual::InjectInteractableView)> {
  static const MethodInfo* get() {
    static auto* interactableView = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IInteractableView")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractableDebugVisual*), "InjectInteractableView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactableView});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractableDebugVisual::InjectRenderer
// Il2CppName: InjectRenderer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractableDebugVisual::*)(::UnityEngine::Renderer*)>(&Oculus::Interaction::InteractableDebugVisual::InjectRenderer)> {
  static const MethodInfo* get() {
    static auto* renderer = &::il2cpp_utils::GetClassFromName("UnityEngine", "Renderer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractableDebugVisual*), "InjectRenderer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderer});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractableDebugVisual::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
