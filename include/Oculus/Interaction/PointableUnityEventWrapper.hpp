// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Oculus.Interaction.PointerEvent
#include "Oculus/Interaction/PointerEvent.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Object because it is already included!
}
// Forward declaring namespace: Oculus::Interaction
namespace Oculus::Interaction {
  // Forward declaring type: IPointable
  class IPointable;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Forward declaring namespace: UnityEngine::Events
namespace UnityEngine::Events {
  // Forward declaring type: UnityEvent`1<T0>
  template<typename T0>
  class UnityEvent_1;
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: PointableUnityEventWrapper
  class PointableUnityEventWrapper;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::PointableUnityEventWrapper);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::PointableUnityEventWrapper*, "Oculus.Interaction", "PointableUnityEventWrapper");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x71
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.PointableUnityEventWrapper
  // [TokenAttribute] Offset: FFFFFFFF
  class PointableUnityEventWrapper : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.Object _pointable
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Object* pointable;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.IPointable Pointable
    // Size: 0x8
    // Offset: 0x28
    ::Oculus::Interaction::IPointable* Pointable;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::IPointable*) == 0x8);
    // private System.Collections.Generic.HashSet`1<System.Int32> _pointers
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::HashSet_1<int>* pointers;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<int>*) == 0x8);
    // private UnityEngine.Events.UnityEvent`1<Oculus.Interaction.PointerEvent> _whenRelease
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Events::UnityEvent_1<::Oculus::Interaction::PointerEvent>* whenRelease;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent_1<::Oculus::Interaction::PointerEvent>*) == 0x8);
    // private UnityEngine.Events.UnityEvent`1<Oculus.Interaction.PointerEvent> _whenHover
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Events::UnityEvent_1<::Oculus::Interaction::PointerEvent>* whenHover;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent_1<::Oculus::Interaction::PointerEvent>*) == 0x8);
    // private UnityEngine.Events.UnityEvent`1<Oculus.Interaction.PointerEvent> _whenUnhover
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Events::UnityEvent_1<::Oculus::Interaction::PointerEvent>* whenUnhover;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent_1<::Oculus::Interaction::PointerEvent>*) == 0x8);
    // private UnityEngine.Events.UnityEvent`1<Oculus.Interaction.PointerEvent> _whenSelect
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::Events::UnityEvent_1<::Oculus::Interaction::PointerEvent>* whenSelect;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent_1<::Oculus::Interaction::PointerEvent>*) == 0x8);
    // private UnityEngine.Events.UnityEvent`1<Oculus.Interaction.PointerEvent> _whenUnselect
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::Events::UnityEvent_1<::Oculus::Interaction::PointerEvent>* whenUnselect;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent_1<::Oculus::Interaction::PointerEvent>*) == 0x8);
    // private UnityEngine.Events.UnityEvent`1<Oculus.Interaction.PointerEvent> _whenMove
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::Events::UnityEvent_1<::Oculus::Interaction::PointerEvent>* whenMove;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent_1<::Oculus::Interaction::PointerEvent>*) == 0x8);
    // private UnityEngine.Events.UnityEvent`1<Oculus.Interaction.PointerEvent> _whenCancel
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::Events::UnityEvent_1<::Oculus::Interaction::PointerEvent>* whenCancel;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent_1<::Oculus::Interaction::PointerEvent>*) == 0x8);
    // protected System.Boolean _started
    // Size: 0x1
    // Offset: 0x70
    bool started;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private UnityEngine.Object _pointable
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__pointable();
    // Get instance field reference: private Oculus.Interaction.IPointable Pointable
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::IPointable*& dyn_Pointable();
    // Get instance field reference: private System.Collections.Generic.HashSet`1<System.Int32> _pointers
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<int>*& dyn__pointers();
    // Get instance field reference: private UnityEngine.Events.UnityEvent`1<Oculus.Interaction.PointerEvent> _whenRelease
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent_1<::Oculus::Interaction::PointerEvent>*& dyn__whenRelease();
    // Get instance field reference: private UnityEngine.Events.UnityEvent`1<Oculus.Interaction.PointerEvent> _whenHover
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent_1<::Oculus::Interaction::PointerEvent>*& dyn__whenHover();
    // Get instance field reference: private UnityEngine.Events.UnityEvent`1<Oculus.Interaction.PointerEvent> _whenUnhover
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent_1<::Oculus::Interaction::PointerEvent>*& dyn__whenUnhover();
    // Get instance field reference: private UnityEngine.Events.UnityEvent`1<Oculus.Interaction.PointerEvent> _whenSelect
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent_1<::Oculus::Interaction::PointerEvent>*& dyn__whenSelect();
    // Get instance field reference: private UnityEngine.Events.UnityEvent`1<Oculus.Interaction.PointerEvent> _whenUnselect
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent_1<::Oculus::Interaction::PointerEvent>*& dyn__whenUnselect();
    // Get instance field reference: private UnityEngine.Events.UnityEvent`1<Oculus.Interaction.PointerEvent> _whenMove
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent_1<::Oculus::Interaction::PointerEvent>*& dyn__whenMove();
    // Get instance field reference: private UnityEngine.Events.UnityEvent`1<Oculus.Interaction.PointerEvent> _whenCancel
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent_1<::Oculus::Interaction::PointerEvent>*& dyn__whenCancel();
    // Get instance field reference: protected System.Boolean _started
    [[deprecated("Use field access instead!")]] bool& dyn__started();
    // public UnityEngine.Events.UnityEvent`1<Oculus.Interaction.PointerEvent> get_WhenRelease()
    // Offset: 0x47DA374
    ::UnityEngine::Events::UnityEvent_1<::Oculus::Interaction::PointerEvent>* get_WhenRelease();
    // public UnityEngine.Events.UnityEvent`1<Oculus.Interaction.PointerEvent> get_WhenHover()
    // Offset: 0x47DA37C
    ::UnityEngine::Events::UnityEvent_1<::Oculus::Interaction::PointerEvent>* get_WhenHover();
    // public UnityEngine.Events.UnityEvent`1<Oculus.Interaction.PointerEvent> get_WhenUnhover()
    // Offset: 0x47DA384
    ::UnityEngine::Events::UnityEvent_1<::Oculus::Interaction::PointerEvent>* get_WhenUnhover();
    // public UnityEngine.Events.UnityEvent`1<Oculus.Interaction.PointerEvent> get_WhenSelect()
    // Offset: 0x47DA38C
    ::UnityEngine::Events::UnityEvent_1<::Oculus::Interaction::PointerEvent>* get_WhenSelect();
    // public UnityEngine.Events.UnityEvent`1<Oculus.Interaction.PointerEvent> get_WhenUnselect()
    // Offset: 0x47DA394
    ::UnityEngine::Events::UnityEvent_1<::Oculus::Interaction::PointerEvent>* get_WhenUnselect();
    // public UnityEngine.Events.UnityEvent`1<Oculus.Interaction.PointerEvent> get_WhenMove()
    // Offset: 0x47DA39C
    ::UnityEngine::Events::UnityEvent_1<::Oculus::Interaction::PointerEvent>* get_WhenMove();
    // public UnityEngine.Events.UnityEvent`1<Oculus.Interaction.PointerEvent> get_WhenCancel()
    // Offset: 0x47DA3A4
    ::UnityEngine::Events::UnityEvent_1<::Oculus::Interaction::PointerEvent>* get_WhenCancel();
    // protected System.Void Awake()
    // Offset: 0x47DA3AC
    void Awake();
    // protected System.Void Start()
    // Offset: 0x47DA414
    void Start();
    // protected System.Void OnEnable()
    // Offset: 0x47DA4B8
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x47DA5B4
    void OnDisable();
    // private System.Void HandlePointerEventRaised(Oculus.Interaction.PointerEvent evt)
    // Offset: 0x47DA6B4
    void HandlePointerEventRaised(::Oculus::Interaction::PointerEvent evt);
    // public System.Void InjectAllPointableUnityEventWrapper(Oculus.Interaction.IPointable pointable)
    // Offset: 0x47DA8C4
    void InjectAllPointableUnityEventWrapper(::Oculus::Interaction::IPointable* pointable);
    // public System.Void InjectPointable(Oculus.Interaction.IPointable pointable)
    // Offset: 0x47DA8C8
    void InjectPointable(::Oculus::Interaction::IPointable* pointable);
    // public System.Void .ctor()
    // Offset: 0x47DA998
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PointableUnityEventWrapper* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::PointableUnityEventWrapper::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PointableUnityEventWrapper*, creationType>()));
    }
  }; // Oculus.Interaction.PointableUnityEventWrapper
  #pragma pack(pop)
  static check_size<sizeof(PointableUnityEventWrapper), 112 + sizeof(bool)> __Oculus_Interaction_PointableUnityEventWrapperSizeCheck;
  static_assert(sizeof(PointableUnityEventWrapper) == 0x71);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::PointableUnityEventWrapper::get_WhenRelease
// Il2CppName: get_WhenRelease
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Events::UnityEvent_1<::Oculus::Interaction::PointerEvent>* (Oculus::Interaction::PointableUnityEventWrapper::*)()>(&Oculus::Interaction::PointableUnityEventWrapper::get_WhenRelease)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableUnityEventWrapper*), "get_WhenRelease", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableUnityEventWrapper::get_WhenHover
// Il2CppName: get_WhenHover
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Events::UnityEvent_1<::Oculus::Interaction::PointerEvent>* (Oculus::Interaction::PointableUnityEventWrapper::*)()>(&Oculus::Interaction::PointableUnityEventWrapper::get_WhenHover)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableUnityEventWrapper*), "get_WhenHover", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableUnityEventWrapper::get_WhenUnhover
// Il2CppName: get_WhenUnhover
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Events::UnityEvent_1<::Oculus::Interaction::PointerEvent>* (Oculus::Interaction::PointableUnityEventWrapper::*)()>(&Oculus::Interaction::PointableUnityEventWrapper::get_WhenUnhover)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableUnityEventWrapper*), "get_WhenUnhover", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableUnityEventWrapper::get_WhenSelect
// Il2CppName: get_WhenSelect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Events::UnityEvent_1<::Oculus::Interaction::PointerEvent>* (Oculus::Interaction::PointableUnityEventWrapper::*)()>(&Oculus::Interaction::PointableUnityEventWrapper::get_WhenSelect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableUnityEventWrapper*), "get_WhenSelect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableUnityEventWrapper::get_WhenUnselect
// Il2CppName: get_WhenUnselect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Events::UnityEvent_1<::Oculus::Interaction::PointerEvent>* (Oculus::Interaction::PointableUnityEventWrapper::*)()>(&Oculus::Interaction::PointableUnityEventWrapper::get_WhenUnselect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableUnityEventWrapper*), "get_WhenUnselect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableUnityEventWrapper::get_WhenMove
// Il2CppName: get_WhenMove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Events::UnityEvent_1<::Oculus::Interaction::PointerEvent>* (Oculus::Interaction::PointableUnityEventWrapper::*)()>(&Oculus::Interaction::PointableUnityEventWrapper::get_WhenMove)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableUnityEventWrapper*), "get_WhenMove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableUnityEventWrapper::get_WhenCancel
// Il2CppName: get_WhenCancel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Events::UnityEvent_1<::Oculus::Interaction::PointerEvent>* (Oculus::Interaction::PointableUnityEventWrapper::*)()>(&Oculus::Interaction::PointableUnityEventWrapper::get_WhenCancel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableUnityEventWrapper*), "get_WhenCancel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableUnityEventWrapper::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PointableUnityEventWrapper::*)()>(&Oculus::Interaction::PointableUnityEventWrapper::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableUnityEventWrapper*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableUnityEventWrapper::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PointableUnityEventWrapper::*)()>(&Oculus::Interaction::PointableUnityEventWrapper::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableUnityEventWrapper*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableUnityEventWrapper::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PointableUnityEventWrapper::*)()>(&Oculus::Interaction::PointableUnityEventWrapper::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableUnityEventWrapper*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableUnityEventWrapper::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PointableUnityEventWrapper::*)()>(&Oculus::Interaction::PointableUnityEventWrapper::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableUnityEventWrapper*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableUnityEventWrapper::HandlePointerEventRaised
// Il2CppName: HandlePointerEventRaised
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PointableUnityEventWrapper::*)(::Oculus::Interaction::PointerEvent)>(&Oculus::Interaction::PointableUnityEventWrapper::HandlePointerEventRaised)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "PointerEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableUnityEventWrapper*), "HandlePointerEventRaised", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableUnityEventWrapper::InjectAllPointableUnityEventWrapper
// Il2CppName: InjectAllPointableUnityEventWrapper
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PointableUnityEventWrapper::*)(::Oculus::Interaction::IPointable*)>(&Oculus::Interaction::PointableUnityEventWrapper::InjectAllPointableUnityEventWrapper)> {
  static const MethodInfo* get() {
    static auto* pointable = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IPointable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableUnityEventWrapper*), "InjectAllPointableUnityEventWrapper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pointable});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableUnityEventWrapper::InjectPointable
// Il2CppName: InjectPointable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PointableUnityEventWrapper::*)(::Oculus::Interaction::IPointable*)>(&Oculus::Interaction::PointableUnityEventWrapper::InjectPointable)> {
  static const MethodInfo* get() {
    static auto* pointable = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IPointable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableUnityEventWrapper*), "InjectPointable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pointable});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableUnityEventWrapper::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
