// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Vector2Int
#include "UnityEngine/Vector2Int.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction::UnityCanvas
namespace Oculus::Interaction::UnityCanvas {
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Canvas
  class Canvas;
  // Forward declaring type: Texture
  class Texture;
  // Forward declaring type: RenderTexture
  class RenderTexture;
  // Forward declaring type: Camera
  class Camera;
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.UnityCanvas
namespace Oculus::Interaction::UnityCanvas {
  // Forward declaring type: CanvasRenderTexture
  class CanvasRenderTexture;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::UnityCanvas::CanvasRenderTexture);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::UnityCanvas::CanvasRenderTexture*, "Oculus.Interaction.UnityCanvas", "CanvasRenderTexture");
// Type namespace: Oculus.Interaction.UnityCanvas
namespace Oculus::Interaction::UnityCanvas {
  // Size: 0x69
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.UnityCanvas.CanvasRenderTexture
  // [TokenAttribute] Offset: FFFFFFFF
  // [DisallowMultipleComponent] Offset: FFFFFFFF
  class CanvasRenderTexture : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::Oculus::Interaction::UnityCanvas::CanvasRenderTexture::TransformChangeListener
    class TransformChangeListener;
    // Nested type: ::Oculus::Interaction::UnityCanvas::CanvasRenderTexture::DriveMode
    struct DriveMode;
    // Nested type: ::Oculus::Interaction::UnityCanvas::CanvasRenderTexture::Properties
    class Properties;
    // Nested type: ::Oculus::Interaction::UnityCanvas::CanvasRenderTexture::$$c
    class $$c;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Oculus.Interaction.UnityCanvas.CanvasRenderTexture/DriveMode
    // [TokenAttribute] Offset: FFFFFFFF
    struct DriveMode/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: DriveMode
      constexpr DriveMode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Oculus.Interaction.UnityCanvas.CanvasRenderTexture/DriveMode Auto
      static constexpr const int Auto = 0;
      // Get static field: static public Oculus.Interaction.UnityCanvas.CanvasRenderTexture/DriveMode Auto
      static ::Oculus::Interaction::UnityCanvas::CanvasRenderTexture::DriveMode _get_Auto();
      // Set static field: static public Oculus.Interaction.UnityCanvas.CanvasRenderTexture/DriveMode Auto
      static void _set_Auto(::Oculus::Interaction::UnityCanvas::CanvasRenderTexture::DriveMode value);
      // static field const value: static public Oculus.Interaction.UnityCanvas.CanvasRenderTexture/DriveMode Manual
      static constexpr const int Manual = 1;
      // Get static field: static public Oculus.Interaction.UnityCanvas.CanvasRenderTexture/DriveMode Manual
      static ::Oculus::Interaction::UnityCanvas::CanvasRenderTexture::DriveMode _get_Manual();
      // Set static field: static public Oculus.Interaction.UnityCanvas.CanvasRenderTexture/DriveMode Manual
      static void _set_Manual(::Oculus::Interaction::UnityCanvas::CanvasRenderTexture::DriveMode value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Oculus.Interaction.UnityCanvas.CanvasRenderTexture/DriveMode
    #pragma pack(pop)
    static check_size<sizeof(CanvasRenderTexture::DriveMode), 0 + sizeof(int)> __Oculus_Interaction_UnityCanvas_CanvasRenderTexture_DriveModeSizeCheck;
    static_assert(sizeof(CanvasRenderTexture::DriveMode) == 0x4);
    public:
    // private UnityEngine.Canvas _canvas
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Canvas* canvas;
    // Field size check
    static_assert(sizeof(::UnityEngine::Canvas*) == 0x8);
    // private System.Int32 _renderScale
    // Size: 0x4
    // Offset: 0x28
    int renderScale;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private Oculus.Interaction.UnityCanvas.CanvasRenderTexture/DriveMode _dimensionsDriveMode
    // Size: 0x4
    // Offset: 0x2C
    ::Oculus::Interaction::UnityCanvas::CanvasRenderTexture::DriveMode dimensionsDriveMode;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::UnityCanvas::CanvasRenderTexture::DriveMode) == 0x4);
    // private UnityEngine.Vector2Int _resolution
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Vector2Int resolution;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2Int) == 0x8);
    // private System.Boolean _generateMipMaps
    // Size: 0x1
    // Offset: 0x38
    bool generateMipMaps;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: generateMipMaps and: pixelsPerUnit
    char __padding4[0x3] = {};
    // private System.Int32 _pixelsPerUnit
    // Size: 0x4
    // Offset: 0x3C
    int pixelsPerUnit;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.LayerMask _renderingLayers
    // Size: 0x4
    // Offset: 0x40
    ::UnityEngine::LayerMask renderingLayers;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // Padding between fields: renderingLayers and: OnUpdateRenderTexture
    char __padding6[0x4] = {};
    // public System.Action`1<UnityEngine.Texture> OnUpdateRenderTexture
    // Size: 0x8
    // Offset: 0x48
    ::System::Action_1<::UnityEngine::Texture*>* OnUpdateRenderTexture;
    // Field size check
    static_assert(sizeof(::System::Action_1<::UnityEngine::Texture*>*) == 0x8);
    // private Oculus.Interaction.UnityCanvas.CanvasRenderTexture/TransformChangeListener _listener
    // Size: 0x8
    // Offset: 0x50
    ::Oculus::Interaction::UnityCanvas::CanvasRenderTexture::TransformChangeListener* listener;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::UnityCanvas::CanvasRenderTexture::TransformChangeListener*) == 0x8);
    // private UnityEngine.RenderTexture _tex
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::RenderTexture* tex;
    // Field size check
    static_assert(sizeof(::UnityEngine::RenderTexture*) == 0x8);
    // private UnityEngine.Camera _camera
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::Camera* camera;
    // Field size check
    static_assert(sizeof(::UnityEngine::Camera*) == 0x8);
    // protected System.Boolean _started
    // Size: 0x1
    // Offset: 0x68
    bool started;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // static field const value: static public System.Int32 DEFAULT_UI_LAYERMASK
    static constexpr const int DEFAULT_UI_LAYERMASK = 32;
    // Get static field: static public System.Int32 DEFAULT_UI_LAYERMASK
    static int _get_DEFAULT_UI_LAYERMASK();
    // Set static field: static public System.Int32 DEFAULT_UI_LAYERMASK
    static void _set_DEFAULT_UI_LAYERMASK(int value);
    // Get static field: static private readonly UnityEngine.Vector2Int DEFAULT_TEXTURE_RES
    static ::UnityEngine::Vector2Int _get_DEFAULT_TEXTURE_RES();
    // Set static field: static private readonly UnityEngine.Vector2Int DEFAULT_TEXTURE_RES
    static void _set_DEFAULT_TEXTURE_RES(::UnityEngine::Vector2Int value);
    // Get instance field reference: private UnityEngine.Canvas _canvas
    [[deprecated("Use field access instead!")]] ::UnityEngine::Canvas*& dyn__canvas();
    // Get instance field reference: private System.Int32 _renderScale
    [[deprecated("Use field access instead!")]] int& dyn__renderScale();
    // Get instance field reference: private Oculus.Interaction.UnityCanvas.CanvasRenderTexture/DriveMode _dimensionsDriveMode
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::UnityCanvas::CanvasRenderTexture::DriveMode& dyn__dimensionsDriveMode();
    // Get instance field reference: private UnityEngine.Vector2Int _resolution
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2Int& dyn__resolution();
    // Get instance field reference: private System.Boolean _generateMipMaps
    [[deprecated("Use field access instead!")]] bool& dyn__generateMipMaps();
    // Get instance field reference: private System.Int32 _pixelsPerUnit
    [[deprecated("Use field access instead!")]] int& dyn__pixelsPerUnit();
    // Get instance field reference: private UnityEngine.LayerMask _renderingLayers
    [[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& dyn__renderingLayers();
    // Get instance field reference: public System.Action`1<UnityEngine.Texture> OnUpdateRenderTexture
    [[deprecated("Use field access instead!")]] ::System::Action_1<::UnityEngine::Texture*>*& dyn_OnUpdateRenderTexture();
    // Get instance field reference: private Oculus.Interaction.UnityCanvas.CanvasRenderTexture/TransformChangeListener _listener
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::UnityCanvas::CanvasRenderTexture::TransformChangeListener*& dyn__listener();
    // Get instance field reference: private UnityEngine.RenderTexture _tex
    [[deprecated("Use field access instead!")]] ::UnityEngine::RenderTexture*& dyn__tex();
    // Get instance field reference: private UnityEngine.Camera _camera
    [[deprecated("Use field access instead!")]] ::UnityEngine::Camera*& dyn__camera();
    // Get instance field reference: protected System.Boolean _started
    [[deprecated("Use field access instead!")]] bool& dyn__started();
    // public UnityEngine.LayerMask get_RenderingLayers()
    // Offset: 0x47DFFDC
    ::UnityEngine::LayerMask get_RenderingLayers();
    // public System.Int32 get_RenderScale()
    // Offset: 0x47DFFE4
    int get_RenderScale();
    // public System.Void set_RenderScale(System.Int32 value)
    // Offset: 0x47DFFEC
    void set_RenderScale(int value);
    // public UnityEngine.Camera get_OverlayCamera()
    // Offset: 0x47E02FC
    ::UnityEngine::Camera* get_OverlayCamera();
    // public UnityEngine.Texture get_Texture()
    // Offset: 0x47E0304
    ::UnityEngine::Texture* get_Texture();
    // public UnityEngine.Vector2Int CalcAutoResolution()
    // Offset: 0x47E030C
    ::UnityEngine::Vector2Int CalcAutoResolution();
    // public UnityEngine.Vector2Int GetBaseResolutionToUse()
    // Offset: 0x47DEB7C
    ::UnityEngine::Vector2Int GetBaseResolutionToUse();
    // public UnityEngine.Vector2Int GetScaledResolutionToUse()
    // Offset: 0x47E05FC
    ::UnityEngine::Vector2Int GetScaledResolutionToUse();
    // public System.Single PixelsToUnits(System.Single pixels)
    // Offset: 0x47DEB90
    float PixelsToUnits(float pixels);
    // public System.Single UnitsToPixels(System.Single units)
    // Offset: 0x47E05EC
    float UnitsToPixels(float units);
    // protected System.Void Start()
    // Offset: 0x47E0644
    void Start();
    // protected System.Void OnEnable()
    // Offset: 0x47E067C
    void OnEnable();
    // private System.Void WhenCanvasRectTransformDimensionsChanged()
    // Offset: 0x47E0838
    void WhenCanvasRectTransformDimensionsChanged();
    // protected System.Void OnDisable()
    // Offset: 0x47E083C
    void OnDisable();
    // protected System.Void UpdateCamera()
    // Offset: 0x47E0104
    void UpdateCamera();
    // protected System.Void UpdateRenderTexture()
    // Offset: 0x47E0C10
    void UpdateRenderTexture();
    // private System.Void UpdateOrthoSize()
    // Offset: 0x47E0E8C
    void UpdateOrthoSize();
    // private System.Void UpdateCameraCullingMask()
    // Offset: 0x47E0F50
    void UpdateCameraCullingMask();
    // protected UnityEngine.GameObject CreateChildObject(System.String name)
    // Offset: 0x47E0A68
    ::UnityEngine::GameObject* CreateChildObject(::StringW name);
    // public System.Void InjectAllCanvasRenderTexture(UnityEngine.Canvas canvas, System.Int32 pixelsPerUnit, System.Int32 renderScale, UnityEngine.LayerMask renderingLayers, System.Boolean generateMipMaps)
    // Offset: 0x47E0FE8
    void InjectAllCanvasRenderTexture(::UnityEngine::Canvas* canvas, int pixelsPerUnit, int renderScale, ::UnityEngine::LayerMask renderingLayers, bool generateMipMaps);
    // public System.Void InjectCanvas(UnityEngine.Canvas canvas)
    // Offset: 0x47E1034
    void InjectCanvas(::UnityEngine::Canvas* canvas);
    // public System.Void InjectPixelsPerUnit(System.Int32 pixelsPerUnit)
    // Offset: 0x47E103C
    void InjectPixelsPerUnit(int pixelsPerUnit);
    // public System.Void InjectRenderScale(System.Int32 renderScale)
    // Offset: 0x47E1044
    void InjectRenderScale(int renderScale);
    // public System.Void InjectRenderingLayers(UnityEngine.LayerMask renderingLayers)
    // Offset: 0x47E104C
    void InjectRenderingLayers(::UnityEngine::LayerMask renderingLayers);
    // public System.Void InjectGenerateMipMaps(System.Boolean generateMipMaps)
    // Offset: 0x47E1054
    void InjectGenerateMipMaps(bool generateMipMaps);
    // public System.Void .ctor()
    // Offset: 0x47E1060
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CanvasRenderTexture* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::UnityCanvas::CanvasRenderTexture::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CanvasRenderTexture*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x47E11A4
    static void _cctor();
  }; // Oculus.Interaction.UnityCanvas.CanvasRenderTexture
  #pragma pack(pop)
  static check_size<sizeof(CanvasRenderTexture), 104 + sizeof(bool)> __Oculus_Interaction_UnityCanvas_CanvasRenderTextureSizeCheck;
  static_assert(sizeof(CanvasRenderTexture) == 0x69);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::UnityCanvas::CanvasRenderTexture::DriveMode, "Oculus.Interaction.UnityCanvas", "CanvasRenderTexture/DriveMode");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::CanvasRenderTexture::get_RenderingLayers
// Il2CppName: get_RenderingLayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::LayerMask (Oculus::Interaction::UnityCanvas::CanvasRenderTexture::*)()>(&Oculus::Interaction::UnityCanvas::CanvasRenderTexture::get_RenderingLayers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UnityCanvas::CanvasRenderTexture*), "get_RenderingLayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::CanvasRenderTexture::get_RenderScale
// Il2CppName: get_RenderScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Oculus::Interaction::UnityCanvas::CanvasRenderTexture::*)()>(&Oculus::Interaction::UnityCanvas::CanvasRenderTexture::get_RenderScale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UnityCanvas::CanvasRenderTexture*), "get_RenderScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::CanvasRenderTexture::set_RenderScale
// Il2CppName: set_RenderScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::UnityCanvas::CanvasRenderTexture::*)(int)>(&Oculus::Interaction::UnityCanvas::CanvasRenderTexture::set_RenderScale)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UnityCanvas::CanvasRenderTexture*), "set_RenderScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::CanvasRenderTexture::get_OverlayCamera
// Il2CppName: get_OverlayCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Camera* (Oculus::Interaction::UnityCanvas::CanvasRenderTexture::*)()>(&Oculus::Interaction::UnityCanvas::CanvasRenderTexture::get_OverlayCamera)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UnityCanvas::CanvasRenderTexture*), "get_OverlayCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::CanvasRenderTexture::get_Texture
// Il2CppName: get_Texture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Texture* (Oculus::Interaction::UnityCanvas::CanvasRenderTexture::*)()>(&Oculus::Interaction::UnityCanvas::CanvasRenderTexture::get_Texture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UnityCanvas::CanvasRenderTexture*), "get_Texture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::CanvasRenderTexture::CalcAutoResolution
// Il2CppName: CalcAutoResolution
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2Int (Oculus::Interaction::UnityCanvas::CanvasRenderTexture::*)()>(&Oculus::Interaction::UnityCanvas::CanvasRenderTexture::CalcAutoResolution)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UnityCanvas::CanvasRenderTexture*), "CalcAutoResolution", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::CanvasRenderTexture::GetBaseResolutionToUse
// Il2CppName: GetBaseResolutionToUse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2Int (Oculus::Interaction::UnityCanvas::CanvasRenderTexture::*)()>(&Oculus::Interaction::UnityCanvas::CanvasRenderTexture::GetBaseResolutionToUse)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UnityCanvas::CanvasRenderTexture*), "GetBaseResolutionToUse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::CanvasRenderTexture::GetScaledResolutionToUse
// Il2CppName: GetScaledResolutionToUse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2Int (Oculus::Interaction::UnityCanvas::CanvasRenderTexture::*)()>(&Oculus::Interaction::UnityCanvas::CanvasRenderTexture::GetScaledResolutionToUse)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UnityCanvas::CanvasRenderTexture*), "GetScaledResolutionToUse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::CanvasRenderTexture::PixelsToUnits
// Il2CppName: PixelsToUnits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::UnityCanvas::CanvasRenderTexture::*)(float)>(&Oculus::Interaction::UnityCanvas::CanvasRenderTexture::PixelsToUnits)> {
  static const MethodInfo* get() {
    static auto* pixels = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UnityCanvas::CanvasRenderTexture*), "PixelsToUnits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pixels});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::CanvasRenderTexture::UnitsToPixels
// Il2CppName: UnitsToPixels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::UnityCanvas::CanvasRenderTexture::*)(float)>(&Oculus::Interaction::UnityCanvas::CanvasRenderTexture::UnitsToPixels)> {
  static const MethodInfo* get() {
    static auto* units = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UnityCanvas::CanvasRenderTexture*), "UnitsToPixels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{units});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::CanvasRenderTexture::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::UnityCanvas::CanvasRenderTexture::*)()>(&Oculus::Interaction::UnityCanvas::CanvasRenderTexture::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UnityCanvas::CanvasRenderTexture*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::CanvasRenderTexture::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::UnityCanvas::CanvasRenderTexture::*)()>(&Oculus::Interaction::UnityCanvas::CanvasRenderTexture::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UnityCanvas::CanvasRenderTexture*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::CanvasRenderTexture::WhenCanvasRectTransformDimensionsChanged
// Il2CppName: WhenCanvasRectTransformDimensionsChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::UnityCanvas::CanvasRenderTexture::*)()>(&Oculus::Interaction::UnityCanvas::CanvasRenderTexture::WhenCanvasRectTransformDimensionsChanged)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UnityCanvas::CanvasRenderTexture*), "WhenCanvasRectTransformDimensionsChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::CanvasRenderTexture::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::UnityCanvas::CanvasRenderTexture::*)()>(&Oculus::Interaction::UnityCanvas::CanvasRenderTexture::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UnityCanvas::CanvasRenderTexture*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::CanvasRenderTexture::UpdateCamera
// Il2CppName: UpdateCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::UnityCanvas::CanvasRenderTexture::*)()>(&Oculus::Interaction::UnityCanvas::CanvasRenderTexture::UpdateCamera)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UnityCanvas::CanvasRenderTexture*), "UpdateCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::CanvasRenderTexture::UpdateRenderTexture
// Il2CppName: UpdateRenderTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::UnityCanvas::CanvasRenderTexture::*)()>(&Oculus::Interaction::UnityCanvas::CanvasRenderTexture::UpdateRenderTexture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UnityCanvas::CanvasRenderTexture*), "UpdateRenderTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::CanvasRenderTexture::UpdateOrthoSize
// Il2CppName: UpdateOrthoSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::UnityCanvas::CanvasRenderTexture::*)()>(&Oculus::Interaction::UnityCanvas::CanvasRenderTexture::UpdateOrthoSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UnityCanvas::CanvasRenderTexture*), "UpdateOrthoSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::CanvasRenderTexture::UpdateCameraCullingMask
// Il2CppName: UpdateCameraCullingMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::UnityCanvas::CanvasRenderTexture::*)()>(&Oculus::Interaction::UnityCanvas::CanvasRenderTexture::UpdateCameraCullingMask)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UnityCanvas::CanvasRenderTexture*), "UpdateCameraCullingMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::CanvasRenderTexture::CreateChildObject
// Il2CppName: CreateChildObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (Oculus::Interaction::UnityCanvas::CanvasRenderTexture::*)(::StringW)>(&Oculus::Interaction::UnityCanvas::CanvasRenderTexture::CreateChildObject)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UnityCanvas::CanvasRenderTexture*), "CreateChildObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::CanvasRenderTexture::InjectAllCanvasRenderTexture
// Il2CppName: InjectAllCanvasRenderTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::UnityCanvas::CanvasRenderTexture::*)(::UnityEngine::Canvas*, int, int, ::UnityEngine::LayerMask, bool)>(&Oculus::Interaction::UnityCanvas::CanvasRenderTexture::InjectAllCanvasRenderTexture)> {
  static const MethodInfo* get() {
    static auto* canvas = &::il2cpp_utils::GetClassFromName("UnityEngine", "Canvas")->byval_arg;
    static auto* pixelsPerUnit = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* renderScale = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* renderingLayers = &::il2cpp_utils::GetClassFromName("UnityEngine", "LayerMask")->byval_arg;
    static auto* generateMipMaps = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UnityCanvas::CanvasRenderTexture*), "InjectAllCanvasRenderTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{canvas, pixelsPerUnit, renderScale, renderingLayers, generateMipMaps});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::CanvasRenderTexture::InjectCanvas
// Il2CppName: InjectCanvas
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::UnityCanvas::CanvasRenderTexture::*)(::UnityEngine::Canvas*)>(&Oculus::Interaction::UnityCanvas::CanvasRenderTexture::InjectCanvas)> {
  static const MethodInfo* get() {
    static auto* canvas = &::il2cpp_utils::GetClassFromName("UnityEngine", "Canvas")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UnityCanvas::CanvasRenderTexture*), "InjectCanvas", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{canvas});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::CanvasRenderTexture::InjectPixelsPerUnit
// Il2CppName: InjectPixelsPerUnit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::UnityCanvas::CanvasRenderTexture::*)(int)>(&Oculus::Interaction::UnityCanvas::CanvasRenderTexture::InjectPixelsPerUnit)> {
  static const MethodInfo* get() {
    static auto* pixelsPerUnit = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UnityCanvas::CanvasRenderTexture*), "InjectPixelsPerUnit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pixelsPerUnit});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::CanvasRenderTexture::InjectRenderScale
// Il2CppName: InjectRenderScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::UnityCanvas::CanvasRenderTexture::*)(int)>(&Oculus::Interaction::UnityCanvas::CanvasRenderTexture::InjectRenderScale)> {
  static const MethodInfo* get() {
    static auto* renderScale = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UnityCanvas::CanvasRenderTexture*), "InjectRenderScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderScale});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::CanvasRenderTexture::InjectRenderingLayers
// Il2CppName: InjectRenderingLayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::UnityCanvas::CanvasRenderTexture::*)(::UnityEngine::LayerMask)>(&Oculus::Interaction::UnityCanvas::CanvasRenderTexture::InjectRenderingLayers)> {
  static const MethodInfo* get() {
    static auto* renderingLayers = &::il2cpp_utils::GetClassFromName("UnityEngine", "LayerMask")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UnityCanvas::CanvasRenderTexture*), "InjectRenderingLayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderingLayers});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::CanvasRenderTexture::InjectGenerateMipMaps
// Il2CppName: InjectGenerateMipMaps
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::UnityCanvas::CanvasRenderTexture::*)(bool)>(&Oculus::Interaction::UnityCanvas::CanvasRenderTexture::InjectGenerateMipMaps)> {
  static const MethodInfo* get() {
    static auto* generateMipMaps = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UnityCanvas::CanvasRenderTexture*), "InjectGenerateMipMaps", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{generateMipMaps});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::CanvasRenderTexture::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::CanvasRenderTexture::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Oculus::Interaction::UnityCanvas::CanvasRenderTexture::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UnityCanvas::CanvasRenderTexture*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
