// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Oculus.Interaction.UnityCanvas.CanvasCylinder
#include "Oculus/Interaction/UnityCanvas/CanvasCylinder.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::UnityCanvas::CanvasCylinder::$$c__DisplayClass31_0, "Oculus.Interaction.UnityCanvas", "CanvasCylinder/<>c__DisplayClass31_0");
// Type namespace: Oculus.Interaction.UnityCanvas
namespace Oculus::Interaction::UnityCanvas {
  // Size: 0x1C
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.UnityCanvas.CanvasCylinder/<>c__DisplayClass31_0
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  struct CanvasCylinder::$$c__DisplayClass31_0/*, public ::System::ValueType*/ {
    public:
    public:
    // public Oculus.Interaction.UnityCanvas.CanvasCylinder <>4__this
    // Size: 0x8
    // Offset: 0x0
    ::Oculus::Interaction::UnityCanvas::CanvasCylinder* $$4__this;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::UnityCanvas::CanvasCylinder*) == 0x8);
    // public System.Single scaledRadius
    // Size: 0x4
    // Offset: 0x8
    float scaledRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single xNeg
    // Size: 0x4
    // Offset: 0xC
    float xNeg;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single xPos
    // Size: 0x4
    // Offset: 0x10
    float xPos;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single yNeg
    // Size: 0x4
    // Offset: 0x14
    float yNeg;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single yPos
    // Size: 0x4
    // Offset: 0x18
    float yPos;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating value type constructor for type: $$c__DisplayClass31_0
    constexpr $$c__DisplayClass31_0(::Oculus::Interaction::UnityCanvas::CanvasCylinder* $$4__this_ = {}, float scaledRadius_ = {}, float xNeg_ = {}, float xPos_ = {}, float yNeg_ = {}, float yPos_ = {}) noexcept : $$4__this{$$4__this_}, scaledRadius{scaledRadius_}, xNeg{xNeg_}, xPos{xPos_}, yNeg{yNeg_}, yPos{yPos_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public Oculus.Interaction.UnityCanvas.CanvasCylinder <>4__this
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::UnityCanvas::CanvasCylinder*& dyn_$$4__this();
    // Get instance field reference: public System.Single scaledRadius
    [[deprecated("Use field access instead!")]] float& dyn_scaledRadius();
    // Get instance field reference: public System.Single xNeg
    [[deprecated("Use field access instead!")]] float& dyn_xNeg();
    // Get instance field reference: public System.Single xPos
    [[deprecated("Use field access instead!")]] float& dyn_xPos();
    // Get instance field reference: public System.Single yNeg
    [[deprecated("Use field access instead!")]] float& dyn_yNeg();
    // Get instance field reference: public System.Single yPos
    [[deprecated("Use field access instead!")]] float& dyn_yPos();
  }; // Oculus.Interaction.UnityCanvas.CanvasCylinder/<>c__DisplayClass31_0
  #pragma pack(pop)
  static check_size<sizeof(CanvasCylinder::$$c__DisplayClass31_0), 24 + sizeof(float)> __Oculus_Interaction_UnityCanvas_CanvasCylinder_$$c__DisplayClass31_0SizeCheck;
  static_assert(sizeof(CanvasCylinder::$$c__DisplayClass31_0) == 0x1C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
