// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Oculus.Interaction.UnityCanvas.CanvasMeshRenderer
#include "Oculus/Interaction/UnityCanvas/CanvasMeshRenderer.hpp"
// Including type: OVROverlay
#include "GlobalNamespace/OVROverlay.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction::UnityCanvas
namespace Oculus::Interaction::UnityCanvas {
  // Forward declaring type: CanvasMesh
  class CanvasMesh;
  // Forward declaring type: OVRRenderingMode
  struct OVRRenderingMode;
  // Forward declaring type: CanvasRenderTexture
  class CanvasRenderTexture;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Texture
  class Texture;
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: MeshRenderer
  class MeshRenderer;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.UnityCanvas
namespace Oculus::Interaction::UnityCanvas {
  // Forward declaring type: OVRCanvasMeshRenderer
  class OVRCanvasMeshRenderer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::UnityCanvas::OVRCanvasMeshRenderer);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::UnityCanvas::OVRCanvasMeshRenderer*, "Oculus.Interaction.UnityCanvas", "OVRCanvasMeshRenderer");
// Type namespace: Oculus.Interaction.UnityCanvas
namespace Oculus::Interaction::UnityCanvas {
  // Size: 0x70
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.UnityCanvas.OVRCanvasMeshRenderer
  // [TokenAttribute] Offset: FFFFFFFF
  class OVRCanvasMeshRenderer : public ::Oculus::Interaction::UnityCanvas::CanvasMeshRenderer {
    public:
    // Writing base type padding for base size: 0x49 to desired offset: 0x50
    char ___base_padding[0x7] = {};
    // Nested type: ::Oculus::Interaction::UnityCanvas::OVRCanvasMeshRenderer::Properties
    class Properties;
    public:
    // protected Oculus.Interaction.UnityCanvas.CanvasMesh _canvasMesh
    // Size: 0x8
    // Offset: 0x50
    ::Oculus::Interaction::UnityCanvas::CanvasMesh* canvasMesh;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::UnityCanvas::CanvasMesh*) == 0x8);
    // protected UnityEngine.Vector3 _runtimeOffset
    // Size: 0xC
    // Offset: 0x58
    ::UnityEngine::Vector3 runtimeOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // protected System.Boolean _enableSuperSampling
    // Size: 0x1
    // Offset: 0x64
    bool enableSuperSampling;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _doUnderlayAntiAliasing
    // Size: 0x1
    // Offset: 0x65
    bool doUnderlayAntiAliasing;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _emulateWhileInEditor
    // Size: 0x1
    // Offset: 0x66
    bool emulateWhileInEditor;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: emulateWhileInEditor and: overlay
    char __padding4[0x1] = {};
    // protected OVROverlay _overlay
    // Size: 0x8
    // Offset: 0x68
    ::GlobalNamespace::OVROverlay* overlay;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVROverlay*) == 0x8);
    public:
    // Get instance field reference: protected Oculus.Interaction.UnityCanvas.CanvasMesh _canvasMesh
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::UnityCanvas::CanvasMesh*& dyn__canvasMesh();
    // Get instance field reference: protected UnityEngine.Vector3 _runtimeOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__runtimeOffset();
    // Get instance field reference: protected System.Boolean _enableSuperSampling
    [[deprecated("Use field access instead!")]] bool& dyn__enableSuperSampling();
    // Get instance field reference: private System.Boolean _doUnderlayAntiAliasing
    [[deprecated("Use field access instead!")]] bool& dyn__doUnderlayAntiAliasing();
    // Get instance field reference: private System.Boolean _emulateWhileInEditor
    [[deprecated("Use field access instead!")]] bool& dyn__emulateWhileInEditor();
    // Get instance field reference: protected OVROverlay _overlay
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVROverlay*& dyn__overlay();
    // private Oculus.Interaction.UnityCanvas.OVRRenderingMode get_RenderingMode()
    // Offset: 0x478DBA8
    ::Oculus::Interaction::UnityCanvas::OVRRenderingMode get_RenderingMode();
    // public System.Boolean get_ShouldUseOVROverlay()
    // Offset: 0x478DBB0
    bool get_ShouldUseOVROverlay();
    // private System.Boolean UseEditorEmulation()
    // Offset: 0x478DBE0
    bool UseEditorEmulation();
    // private System.Boolean GetOverlayParameters(out OVROverlay/OverlayShape shape, out UnityEngine.Vector3 position, out UnityEngine.Vector3 scale)
    // Offset: 0x478E0F0
    bool GetOverlayParameters(ByRef<::GlobalNamespace::OVROverlay::OverlayShape> shape, ByRef<::UnityEngine::Vector3> position, ByRef<::UnityEngine::Vector3> scale);
    // protected System.Void UpdateOverlay(UnityEngine.Texture texture)
    // Offset: 0x478DD74
    void UpdateOverlay(::UnityEngine::Texture* texture);
    // protected UnityEngine.GameObject CreateChildObject(System.String name)
    // Offset: 0x478E404
    ::UnityEngine::GameObject* CreateChildObject(::StringW name);
    // public System.Void InjectAllOVRCanvasMeshRenderer(Oculus.Interaction.UnityCanvas.CanvasRenderTexture canvasRenderTexture, UnityEngine.MeshRenderer meshRenderer, Oculus.Interaction.UnityCanvas.CanvasMesh canvasMesh)
    // Offset: 0x478E5A4
    void InjectAllOVRCanvasMeshRenderer(::Oculus::Interaction::UnityCanvas::CanvasRenderTexture* canvasRenderTexture, ::UnityEngine::MeshRenderer* meshRenderer, ::Oculus::Interaction::UnityCanvas::CanvasMesh* canvasMesh);
    // public System.Void InjectCanvasMesh(Oculus.Interaction.UnityCanvas.CanvasMesh canvasMesh)
    // Offset: 0x478E5D4
    void InjectCanvasMesh(::Oculus::Interaction::UnityCanvas::CanvasMesh* canvasMesh);
    // public System.Void InjectOptionalRenderingMode(Oculus.Interaction.UnityCanvas.OVRRenderingMode ovrRenderingMode)
    // Offset: 0x478E5DC
    void InjectOptionalRenderingMode(::Oculus::Interaction::UnityCanvas::OVRRenderingMode ovrRenderingMode);
    // public System.Void InjectOptionalDoUnderlayAntiAliasing(System.Boolean doUnderlayAntiAliasing)
    // Offset: 0x478E5E4
    void InjectOptionalDoUnderlayAntiAliasing(bool doUnderlayAntiAliasing);
    // public System.Void InjectOptionalEnableSuperSampling(System.Boolean enableSuperSampling)
    // Offset: 0x478E5F0
    void InjectOptionalEnableSuperSampling(bool enableSuperSampling);
    // public System.Void .ctor()
    // Offset: 0x478E5FC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OVRCanvasMeshRenderer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::UnityCanvas::OVRCanvasMeshRenderer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OVRCanvasMeshRenderer*, creationType>()));
    }
    // private System.Void <Start>b__15_0()
    // Offset: 0x478E668
    void $Start$b__15_0();
    // protected override System.String GetShaderName()
    // Offset: 0x478DC50
    // Implemented from: Oculus.Interaction.UnityCanvas.CanvasMeshRenderer
    // Base method: System.String CanvasMeshRenderer::GetShaderName()
    ::StringW GetShaderName();
    // protected override System.Single GetAlphaCutoutThreshold()
    // Offset: 0x478DD00
    // Implemented from: Oculus.Interaction.UnityCanvas.CanvasMeshRenderer
    // Base method: System.Single CanvasMeshRenderer::GetAlphaCutoutThreshold()
    float GetAlphaCutoutThreshold();
    // protected override System.Void HandleUpdateRenderTexture(UnityEngine.Texture texture)
    // Offset: 0x478DD48
    // Implemented from: Oculus.Interaction.UnityCanvas.CanvasMeshRenderer
    // Base method: System.Void CanvasMeshRenderer::HandleUpdateRenderTexture(UnityEngine.Texture texture)
    void HandleUpdateRenderTexture(::UnityEngine::Texture* texture);
    // protected override System.Void Start()
    // Offset: 0x478E368
    // Implemented from: Oculus.Interaction.UnityCanvas.CanvasMeshRenderer
    // Base method: System.Void CanvasMeshRenderer::Start()
    void Start();
  }; // Oculus.Interaction.UnityCanvas.OVRCanvasMeshRenderer
  #pragma pack(pop)
  static check_size<sizeof(OVRCanvasMeshRenderer), 104 + sizeof(::GlobalNamespace::OVROverlay*)> __Oculus_Interaction_UnityCanvas_OVRCanvasMeshRendererSizeCheck;
  static_assert(sizeof(OVRCanvasMeshRenderer) == 0x70);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::OVRCanvasMeshRenderer::get_RenderingMode
// Il2CppName: get_RenderingMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::UnityCanvas::OVRRenderingMode (Oculus::Interaction::UnityCanvas::OVRCanvasMeshRenderer::*)()>(&Oculus::Interaction::UnityCanvas::OVRCanvasMeshRenderer::get_RenderingMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UnityCanvas::OVRCanvasMeshRenderer*), "get_RenderingMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::OVRCanvasMeshRenderer::get_ShouldUseOVROverlay
// Il2CppName: get_ShouldUseOVROverlay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::UnityCanvas::OVRCanvasMeshRenderer::*)()>(&Oculus::Interaction::UnityCanvas::OVRCanvasMeshRenderer::get_ShouldUseOVROverlay)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UnityCanvas::OVRCanvasMeshRenderer*), "get_ShouldUseOVROverlay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::OVRCanvasMeshRenderer::UseEditorEmulation
// Il2CppName: UseEditorEmulation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::UnityCanvas::OVRCanvasMeshRenderer::*)()>(&Oculus::Interaction::UnityCanvas::OVRCanvasMeshRenderer::UseEditorEmulation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UnityCanvas::OVRCanvasMeshRenderer*), "UseEditorEmulation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::OVRCanvasMeshRenderer::GetOverlayParameters
// Il2CppName: GetOverlayParameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::UnityCanvas::OVRCanvasMeshRenderer::*)(ByRef<::GlobalNamespace::OVROverlay::OverlayShape>, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>)>(&Oculus::Interaction::UnityCanvas::OVRCanvasMeshRenderer::GetOverlayParameters)> {
  static const MethodInfo* get() {
    static auto* shape = &::il2cpp_utils::GetClassFromName("", "OVROverlay/OverlayShape")->this_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* scale = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UnityCanvas::OVRCanvasMeshRenderer*), "GetOverlayParameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shape, position, scale});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::OVRCanvasMeshRenderer::UpdateOverlay
// Il2CppName: UpdateOverlay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::UnityCanvas::OVRCanvasMeshRenderer::*)(::UnityEngine::Texture*)>(&Oculus::Interaction::UnityCanvas::OVRCanvasMeshRenderer::UpdateOverlay)> {
  static const MethodInfo* get() {
    static auto* texture = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UnityCanvas::OVRCanvasMeshRenderer*), "UpdateOverlay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{texture});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::OVRCanvasMeshRenderer::CreateChildObject
// Il2CppName: CreateChildObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (Oculus::Interaction::UnityCanvas::OVRCanvasMeshRenderer::*)(::StringW)>(&Oculus::Interaction::UnityCanvas::OVRCanvasMeshRenderer::CreateChildObject)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UnityCanvas::OVRCanvasMeshRenderer*), "CreateChildObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::OVRCanvasMeshRenderer::InjectAllOVRCanvasMeshRenderer
// Il2CppName: InjectAllOVRCanvasMeshRenderer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::UnityCanvas::OVRCanvasMeshRenderer::*)(::Oculus::Interaction::UnityCanvas::CanvasRenderTexture*, ::UnityEngine::MeshRenderer*, ::Oculus::Interaction::UnityCanvas::CanvasMesh*)>(&Oculus::Interaction::UnityCanvas::OVRCanvasMeshRenderer::InjectAllOVRCanvasMeshRenderer)> {
  static const MethodInfo* get() {
    static auto* canvasRenderTexture = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.UnityCanvas", "CanvasRenderTexture")->byval_arg;
    static auto* meshRenderer = &::il2cpp_utils::GetClassFromName("UnityEngine", "MeshRenderer")->byval_arg;
    static auto* canvasMesh = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.UnityCanvas", "CanvasMesh")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UnityCanvas::OVRCanvasMeshRenderer*), "InjectAllOVRCanvasMeshRenderer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{canvasRenderTexture, meshRenderer, canvasMesh});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::OVRCanvasMeshRenderer::InjectCanvasMesh
// Il2CppName: InjectCanvasMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::UnityCanvas::OVRCanvasMeshRenderer::*)(::Oculus::Interaction::UnityCanvas::CanvasMesh*)>(&Oculus::Interaction::UnityCanvas::OVRCanvasMeshRenderer::InjectCanvasMesh)> {
  static const MethodInfo* get() {
    static auto* canvasMesh = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.UnityCanvas", "CanvasMesh")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UnityCanvas::OVRCanvasMeshRenderer*), "InjectCanvasMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{canvasMesh});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::OVRCanvasMeshRenderer::InjectOptionalRenderingMode
// Il2CppName: InjectOptionalRenderingMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::UnityCanvas::OVRCanvasMeshRenderer::*)(::Oculus::Interaction::UnityCanvas::OVRRenderingMode)>(&Oculus::Interaction::UnityCanvas::OVRCanvasMeshRenderer::InjectOptionalRenderingMode)> {
  static const MethodInfo* get() {
    static auto* ovrRenderingMode = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.UnityCanvas", "OVRRenderingMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UnityCanvas::OVRCanvasMeshRenderer*), "InjectOptionalRenderingMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ovrRenderingMode});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::OVRCanvasMeshRenderer::InjectOptionalDoUnderlayAntiAliasing
// Il2CppName: InjectOptionalDoUnderlayAntiAliasing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::UnityCanvas::OVRCanvasMeshRenderer::*)(bool)>(&Oculus::Interaction::UnityCanvas::OVRCanvasMeshRenderer::InjectOptionalDoUnderlayAntiAliasing)> {
  static const MethodInfo* get() {
    static auto* doUnderlayAntiAliasing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UnityCanvas::OVRCanvasMeshRenderer*), "InjectOptionalDoUnderlayAntiAliasing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{doUnderlayAntiAliasing});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::OVRCanvasMeshRenderer::InjectOptionalEnableSuperSampling
// Il2CppName: InjectOptionalEnableSuperSampling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::UnityCanvas::OVRCanvasMeshRenderer::*)(bool)>(&Oculus::Interaction::UnityCanvas::OVRCanvasMeshRenderer::InjectOptionalEnableSuperSampling)> {
  static const MethodInfo* get() {
    static auto* enableSuperSampling = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UnityCanvas::OVRCanvasMeshRenderer*), "InjectOptionalEnableSuperSampling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enableSuperSampling});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::OVRCanvasMeshRenderer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::OVRCanvasMeshRenderer::$Start$b__15_0
// Il2CppName: <Start>b__15_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::UnityCanvas::OVRCanvasMeshRenderer::*)()>(&Oculus::Interaction::UnityCanvas::OVRCanvasMeshRenderer::$Start$b__15_0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UnityCanvas::OVRCanvasMeshRenderer*), "<Start>b__15_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::OVRCanvasMeshRenderer::GetShaderName
// Il2CppName: GetShaderName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Oculus::Interaction::UnityCanvas::OVRCanvasMeshRenderer::*)()>(&Oculus::Interaction::UnityCanvas::OVRCanvasMeshRenderer::GetShaderName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UnityCanvas::OVRCanvasMeshRenderer*), "GetShaderName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::OVRCanvasMeshRenderer::GetAlphaCutoutThreshold
// Il2CppName: GetAlphaCutoutThreshold
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::UnityCanvas::OVRCanvasMeshRenderer::*)()>(&Oculus::Interaction::UnityCanvas::OVRCanvasMeshRenderer::GetAlphaCutoutThreshold)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UnityCanvas::OVRCanvasMeshRenderer*), "GetAlphaCutoutThreshold", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::OVRCanvasMeshRenderer::HandleUpdateRenderTexture
// Il2CppName: HandleUpdateRenderTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::UnityCanvas::OVRCanvasMeshRenderer::*)(::UnityEngine::Texture*)>(&Oculus::Interaction::UnityCanvas::OVRCanvasMeshRenderer::HandleUpdateRenderTexture)> {
  static const MethodInfo* get() {
    static auto* texture = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UnityCanvas::OVRCanvasMeshRenderer*), "HandleUpdateRenderTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{texture});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::OVRCanvasMeshRenderer::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::UnityCanvas::OVRCanvasMeshRenderer::*)()>(&Oculus::Interaction::UnityCanvas::OVRCanvasMeshRenderer::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UnityCanvas::OVRCanvasMeshRenderer*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
