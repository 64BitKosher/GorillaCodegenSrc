// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction::UnityCanvas
namespace Oculus::Interaction::UnityCanvas {
  // Forward declaring type: CanvasRenderTexture
  class CanvasRenderTexture;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: MeshFilter
  class MeshFilter;
  // Forward declaring type: MeshCollider
  class MeshCollider;
  // Forward declaring type: Texture
  class Texture;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.UnityCanvas
namespace Oculus::Interaction::UnityCanvas {
  // Forward declaring type: CanvasMesh
  class CanvasMesh;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::UnityCanvas::CanvasMesh);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::UnityCanvas::CanvasMesh*, "Oculus.Interaction.UnityCanvas", "CanvasMesh");
// Type namespace: Oculus.Interaction.UnityCanvas
namespace Oculus::Interaction::UnityCanvas {
  // Size: 0x39
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.UnityCanvas.CanvasMesh
  // [TokenAttribute] Offset: FFFFFFFF
  // [DisallowMultipleComponent] Offset: FFFFFFFF
  class CanvasMesh : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // protected Oculus.Interaction.UnityCanvas.CanvasRenderTexture _canvasRenderTexture
    // Size: 0x8
    // Offset: 0x20
    ::Oculus::Interaction::UnityCanvas::CanvasRenderTexture* canvasRenderTexture;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::UnityCanvas::CanvasRenderTexture*) == 0x8);
    // protected UnityEngine.MeshFilter _meshFilter
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::MeshFilter* meshFilter;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshFilter*) == 0x8);
    // protected UnityEngine.MeshCollider _meshCollider
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::MeshCollider* meshCollider;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshCollider*) == 0x8);
    // protected System.Boolean _started
    // Size: 0x1
    // Offset: 0x38
    bool started;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: protected Oculus.Interaction.UnityCanvas.CanvasRenderTexture _canvasRenderTexture
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::UnityCanvas::CanvasRenderTexture*& dyn__canvasRenderTexture();
    // Get instance field reference: protected UnityEngine.MeshFilter _meshFilter
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshFilter*& dyn__meshFilter();
    // Get instance field reference: protected UnityEngine.MeshCollider _meshCollider
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshCollider*& dyn__meshCollider();
    // Get instance field reference: protected System.Boolean _started
    [[deprecated("Use field access instead!")]] bool& dyn__started();
    // protected UnityEngine.Vector3 MeshInverseTransform(UnityEngine.Vector3 localPosition)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::UnityEngine::Vector3 MeshInverseTransform(::UnityEngine::Vector3 localPosition);
    // protected System.Void GenerateMesh(out System.Collections.Generic.List`1<UnityEngine.Vector3> verts, out System.Collections.Generic.List`1<System.Int32> tris, out System.Collections.Generic.List`1<UnityEngine.Vector2> uvs)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void GenerateMesh(ByRef<::System::Collections::Generic::List_1<::UnityEngine::Vector3>*> verts, ByRef<::System::Collections::Generic::List_1<int>*> tris, ByRef<::System::Collections::Generic::List_1<::UnityEngine::Vector2>*> uvs);
    // public UnityEngine.Vector3 ImposterToCanvasTransformPoint(UnityEngine.Vector3 worldPosition)
    // Offset: 0x47D6B8C
    ::UnityEngine::Vector3 ImposterToCanvasTransformPoint(::UnityEngine::Vector3 worldPosition);
    // protected System.Void Start()
    // Offset: 0x47DECA0
    void Start();
    // protected System.Void OnEnable()
    // Offset: 0x47DECD8
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x47DEE34
    void OnDisable();
    // protected System.Void HandleUpdateRenderTexture(UnityEngine.Texture texture)
    // Offset: 0x47DEF20
    void HandleUpdateRenderTexture(::UnityEngine::Texture* texture);
    // protected System.Void UpdateImposter()
    // Offset: 0x47DD86C
    void UpdateImposter();
    // public System.Void InjectAllCanvasMesh(Oculus.Interaction.UnityCanvas.CanvasRenderTexture canvasRenderTexture, UnityEngine.MeshFilter meshFilter)
    // Offset: 0x47DEC00
    void InjectAllCanvasMesh(::Oculus::Interaction::UnityCanvas::CanvasRenderTexture* canvasRenderTexture, ::UnityEngine::MeshFilter* meshFilter);
    // public System.Void InjectCanvasRenderTexture(Oculus.Interaction.UnityCanvas.CanvasRenderTexture canvasRenderTexture)
    // Offset: 0x47DEF2C
    void InjectCanvasRenderTexture(::Oculus::Interaction::UnityCanvas::CanvasRenderTexture* canvasRenderTexture);
    // public System.Void InjectMeshFilter(UnityEngine.MeshFilter meshFilter)
    // Offset: 0x47DEF34
    void InjectMeshFilter(::UnityEngine::MeshFilter* meshFilter);
    // public System.Void InjectOptionalMeshCollider(UnityEngine.MeshCollider meshCollider)
    // Offset: 0x47DEF3C
    void InjectOptionalMeshCollider(::UnityEngine::MeshCollider* meshCollider);
    // protected System.Void .ctor()
    // Offset: 0x47DEC60
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CanvasMesh* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::UnityCanvas::CanvasMesh::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CanvasMesh*, creationType>()));
    }
  }; // Oculus.Interaction.UnityCanvas.CanvasMesh
  #pragma pack(pop)
  static check_size<sizeof(CanvasMesh), 56 + sizeof(bool)> __Oculus_Interaction_UnityCanvas_CanvasMeshSizeCheck;
  static_assert(sizeof(CanvasMesh) == 0x39);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::CanvasMesh::MeshInverseTransform
// Il2CppName: MeshInverseTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Oculus::Interaction::UnityCanvas::CanvasMesh::*)(::UnityEngine::Vector3)>(&Oculus::Interaction::UnityCanvas::CanvasMesh::MeshInverseTransform)> {
  static const MethodInfo* get() {
    static auto* localPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UnityCanvas::CanvasMesh*), "MeshInverseTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{localPosition});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::CanvasMesh::GenerateMesh
// Il2CppName: GenerateMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::UnityCanvas::CanvasMesh::*)(ByRef<::System::Collections::Generic::List_1<::UnityEngine::Vector3>*>, ByRef<::System::Collections::Generic::List_1<int>*>, ByRef<::System::Collections::Generic::List_1<::UnityEngine::Vector2>*>)>(&Oculus::Interaction::UnityCanvas::CanvasMesh::GenerateMesh)> {
  static const MethodInfo* get() {
    static auto* verts = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->this_arg;
    static auto* tris = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->this_arg;
    static auto* uvs = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")})->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UnityCanvas::CanvasMesh*), "GenerateMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{verts, tris, uvs});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::CanvasMesh::ImposterToCanvasTransformPoint
// Il2CppName: ImposterToCanvasTransformPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Oculus::Interaction::UnityCanvas::CanvasMesh::*)(::UnityEngine::Vector3)>(&Oculus::Interaction::UnityCanvas::CanvasMesh::ImposterToCanvasTransformPoint)> {
  static const MethodInfo* get() {
    static auto* worldPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UnityCanvas::CanvasMesh*), "ImposterToCanvasTransformPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{worldPosition});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::CanvasMesh::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::UnityCanvas::CanvasMesh::*)()>(&Oculus::Interaction::UnityCanvas::CanvasMesh::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UnityCanvas::CanvasMesh*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::CanvasMesh::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::UnityCanvas::CanvasMesh::*)()>(&Oculus::Interaction::UnityCanvas::CanvasMesh::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UnityCanvas::CanvasMesh*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::CanvasMesh::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::UnityCanvas::CanvasMesh::*)()>(&Oculus::Interaction::UnityCanvas::CanvasMesh::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UnityCanvas::CanvasMesh*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::CanvasMesh::HandleUpdateRenderTexture
// Il2CppName: HandleUpdateRenderTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::UnityCanvas::CanvasMesh::*)(::UnityEngine::Texture*)>(&Oculus::Interaction::UnityCanvas::CanvasMesh::HandleUpdateRenderTexture)> {
  static const MethodInfo* get() {
    static auto* texture = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UnityCanvas::CanvasMesh*), "HandleUpdateRenderTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{texture});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::CanvasMesh::UpdateImposter
// Il2CppName: UpdateImposter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::UnityCanvas::CanvasMesh::*)()>(&Oculus::Interaction::UnityCanvas::CanvasMesh::UpdateImposter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UnityCanvas::CanvasMesh*), "UpdateImposter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::CanvasMesh::InjectAllCanvasMesh
// Il2CppName: InjectAllCanvasMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::UnityCanvas::CanvasMesh::*)(::Oculus::Interaction::UnityCanvas::CanvasRenderTexture*, ::UnityEngine::MeshFilter*)>(&Oculus::Interaction::UnityCanvas::CanvasMesh::InjectAllCanvasMesh)> {
  static const MethodInfo* get() {
    static auto* canvasRenderTexture = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.UnityCanvas", "CanvasRenderTexture")->byval_arg;
    static auto* meshFilter = &::il2cpp_utils::GetClassFromName("UnityEngine", "MeshFilter")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UnityCanvas::CanvasMesh*), "InjectAllCanvasMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{canvasRenderTexture, meshFilter});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::CanvasMesh::InjectCanvasRenderTexture
// Il2CppName: InjectCanvasRenderTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::UnityCanvas::CanvasMesh::*)(::Oculus::Interaction::UnityCanvas::CanvasRenderTexture*)>(&Oculus::Interaction::UnityCanvas::CanvasMesh::InjectCanvasRenderTexture)> {
  static const MethodInfo* get() {
    static auto* canvasRenderTexture = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.UnityCanvas", "CanvasRenderTexture")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UnityCanvas::CanvasMesh*), "InjectCanvasRenderTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{canvasRenderTexture});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::CanvasMesh::InjectMeshFilter
// Il2CppName: InjectMeshFilter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::UnityCanvas::CanvasMesh::*)(::UnityEngine::MeshFilter*)>(&Oculus::Interaction::UnityCanvas::CanvasMesh::InjectMeshFilter)> {
  static const MethodInfo* get() {
    static auto* meshFilter = &::il2cpp_utils::GetClassFromName("UnityEngine", "MeshFilter")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UnityCanvas::CanvasMesh*), "InjectMeshFilter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{meshFilter});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::CanvasMesh::InjectOptionalMeshCollider
// Il2CppName: InjectOptionalMeshCollider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::UnityCanvas::CanvasMesh::*)(::UnityEngine::MeshCollider*)>(&Oculus::Interaction::UnityCanvas::CanvasMesh::InjectOptionalMeshCollider)> {
  static const MethodInfo* get() {
    static auto* meshCollider = &::il2cpp_utils::GetClassFromName("UnityEngine", "MeshCollider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UnityCanvas::CanvasMesh*), "InjectOptionalMeshCollider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{meshCollider});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::CanvasMesh::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
