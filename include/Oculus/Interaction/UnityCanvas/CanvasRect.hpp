// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Oculus.Interaction.UnityCanvas.CanvasMesh
#include "Oculus/Interaction/UnityCanvas/CanvasMesh.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction::UnityCanvas
namespace Oculus::Interaction::UnityCanvas {
  // Forward declaring type: CanvasRenderTexture
  class CanvasRenderTexture;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: MeshFilter
  class MeshFilter;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.UnityCanvas
namespace Oculus::Interaction::UnityCanvas {
  // Forward declaring type: CanvasRect
  class CanvasRect;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::UnityCanvas::CanvasRect);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::UnityCanvas::CanvasRect*, "Oculus.Interaction.UnityCanvas", "CanvasRect");
// Type namespace: Oculus.Interaction.UnityCanvas
namespace Oculus::Interaction::UnityCanvas {
  // Size: 0x39
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.UnityCanvas.CanvasRect
  // [TokenAttribute] Offset: FFFFFFFF
  class CanvasRect : public ::Oculus::Interaction::UnityCanvas::CanvasMesh {
    public:
    // public System.Void InjectAllCanvasRect(Oculus.Interaction.UnityCanvas.CanvasRenderTexture canvasRenderTexture, UnityEngine.MeshFilter meshFilter)
    // Offset: 0x47DFFA4
    void InjectAllCanvasRect(::Oculus::Interaction::UnityCanvas::CanvasRenderTexture* canvasRenderTexture, ::UnityEngine::MeshFilter* meshFilter);
    // protected override UnityEngine.Vector3 MeshInverseTransform(UnityEngine.Vector3 localPosition)
    // Offset: 0x47DF688
    // Implemented from: Oculus.Interaction.UnityCanvas.CanvasMesh
    // Base method: UnityEngine.Vector3 CanvasMesh::MeshInverseTransform(UnityEngine.Vector3 localPosition)
    ::UnityEngine::Vector3 MeshInverseTransform(::UnityEngine::Vector3 localPosition);
    // protected override System.Void GenerateMesh(out System.Collections.Generic.List`1<UnityEngine.Vector3> verts, out System.Collections.Generic.List`1<System.Int32> tris, out System.Collections.Generic.List`1<UnityEngine.Vector2> uvs)
    // Offset: 0x47DF68C
    // Implemented from: Oculus.Interaction.UnityCanvas.CanvasMesh
    // Base method: System.Void CanvasMesh::GenerateMesh(out System.Collections.Generic.List`1<UnityEngine.Vector3> verts, out System.Collections.Generic.List`1<System.Int32> tris, out System.Collections.Generic.List`1<UnityEngine.Vector2> uvs)
    void GenerateMesh(ByRef<::System::Collections::Generic::List_1<::UnityEngine::Vector3>*> verts, ByRef<::System::Collections::Generic::List_1<int>*> tris, ByRef<::System::Collections::Generic::List_1<::UnityEngine::Vector2>*> uvs);
    // public System.Void .ctor()
    // Offset: 0x47DFFD4
    // Implemented from: Oculus.Interaction.UnityCanvas.CanvasMesh
    // Base method: System.Void CanvasMesh::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CanvasRect* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::UnityCanvas::CanvasRect::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CanvasRect*, creationType>()));
    }
  }; // Oculus.Interaction.UnityCanvas.CanvasRect
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::CanvasRect::InjectAllCanvasRect
// Il2CppName: InjectAllCanvasRect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::UnityCanvas::CanvasRect::*)(::Oculus::Interaction::UnityCanvas::CanvasRenderTexture*, ::UnityEngine::MeshFilter*)>(&Oculus::Interaction::UnityCanvas::CanvasRect::InjectAllCanvasRect)> {
  static const MethodInfo* get() {
    static auto* canvasRenderTexture = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.UnityCanvas", "CanvasRenderTexture")->byval_arg;
    static auto* meshFilter = &::il2cpp_utils::GetClassFromName("UnityEngine", "MeshFilter")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UnityCanvas::CanvasRect*), "InjectAllCanvasRect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{canvasRenderTexture, meshFilter});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::CanvasRect::MeshInverseTransform
// Il2CppName: MeshInverseTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Oculus::Interaction::UnityCanvas::CanvasRect::*)(::UnityEngine::Vector3)>(&Oculus::Interaction::UnityCanvas::CanvasRect::MeshInverseTransform)> {
  static const MethodInfo* get() {
    static auto* localPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UnityCanvas::CanvasRect*), "MeshInverseTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{localPosition});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::CanvasRect::GenerateMesh
// Il2CppName: GenerateMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::UnityCanvas::CanvasRect::*)(ByRef<::System::Collections::Generic::List_1<::UnityEngine::Vector3>*>, ByRef<::System::Collections::Generic::List_1<int>*>, ByRef<::System::Collections::Generic::List_1<::UnityEngine::Vector2>*>)>(&Oculus::Interaction::UnityCanvas::CanvasRect::GenerateMesh)> {
  static const MethodInfo* get() {
    static auto* verts = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->this_arg;
    static auto* tris = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->this_arg;
    static auto* uvs = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")})->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UnityCanvas::CanvasRect*), "GenerateMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{verts, tris, uvs});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::CanvasRect::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
