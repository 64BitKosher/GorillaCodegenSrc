// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction::UnityCanvas
namespace Oculus::Interaction::UnityCanvas {
  // Forward declaring type: CanvasRenderTexture
  class CanvasRenderTexture;
  // Forward declaring type: RenderingMode
  struct RenderingMode;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: MeshRenderer
  class MeshRenderer;
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: MaterialPropertyBlock
  class MaterialPropertyBlock;
  // Forward declaring type: Texture
  class Texture;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.UnityCanvas
namespace Oculus::Interaction::UnityCanvas {
  // Forward declaring type: CanvasMeshRenderer
  class CanvasMeshRenderer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::UnityCanvas::CanvasMeshRenderer);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::UnityCanvas::CanvasMeshRenderer*, "Oculus.Interaction.UnityCanvas", "CanvasMeshRenderer");
// Type namespace: Oculus.Interaction.UnityCanvas
namespace Oculus::Interaction::UnityCanvas {
  // Size: 0x49
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.UnityCanvas.CanvasMeshRenderer
  // [TokenAttribute] Offset: FFFFFFFF
  class CanvasMeshRenderer : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::Oculus::Interaction::UnityCanvas::CanvasMeshRenderer::Properties
    class Properties;
    public:
    // protected Oculus.Interaction.UnityCanvas.CanvasRenderTexture _canvasRenderTexture
    // Size: 0x8
    // Offset: 0x20
    ::Oculus::Interaction::UnityCanvas::CanvasRenderTexture* canvasRenderTexture;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::UnityCanvas::CanvasRenderTexture*) == 0x8);
    // protected UnityEngine.MeshRenderer _meshRenderer
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::MeshRenderer* meshRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshRenderer*) == 0x8);
    // protected System.Int32 _renderingMode
    // Size: 0x4
    // Offset: 0x30
    int renderingMode;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean _useAlphaToMask
    // Size: 0x1
    // Offset: 0x34
    bool useAlphaToMask;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: useAlphaToMask and: alphaCutoutThreshold
    char __padding3[0x3] = {};
    // private System.Single _alphaCutoutThreshold
    // Size: 0x4
    // Offset: 0x38
    float alphaCutoutThreshold;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: alphaCutoutThreshold and: material
    char __padding4[0x4] = {};
    // protected UnityEngine.Material _material
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Material* material;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // protected System.Boolean _started
    // Size: 0x1
    // Offset: 0x48
    bool started;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get static field: static private readonly System.Int32 MainTexShaderID
    static int _get_MainTexShaderID();
    // Set static field: static private readonly System.Int32 MainTexShaderID
    static void _set_MainTexShaderID(int value);
    // Get instance field reference: protected Oculus.Interaction.UnityCanvas.CanvasRenderTexture _canvasRenderTexture
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::UnityCanvas::CanvasRenderTexture*& dyn__canvasRenderTexture();
    // Get instance field reference: protected UnityEngine.MeshRenderer _meshRenderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& dyn__meshRenderer();
    // Get instance field reference: protected System.Int32 _renderingMode
    [[deprecated("Use field access instead!")]] int& dyn__renderingMode();
    // Get instance field reference: private System.Boolean _useAlphaToMask
    [[deprecated("Use field access instead!")]] bool& dyn__useAlphaToMask();
    // Get instance field reference: private System.Single _alphaCutoutThreshold
    [[deprecated("Use field access instead!")]] float& dyn__alphaCutoutThreshold();
    // Get instance field reference: protected UnityEngine.Material _material
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn__material();
    // Get instance field reference: protected System.Boolean _started
    [[deprecated("Use field access instead!")]] bool& dyn__started();
    // private Oculus.Interaction.UnityCanvas.RenderingMode get_RenderingMode()
    // Offset: 0x47DEF44
    ::Oculus::Interaction::UnityCanvas::RenderingMode get_RenderingMode();
    // protected System.String GetShaderName()
    // Offset: 0x47DEF4C
    ::StringW GetShaderName();
    // protected System.Void SetAdditionalProperties(UnityEngine.MaterialPropertyBlock block)
    // Offset: 0x47DEFF0
    void SetAdditionalProperties(::UnityEngine::MaterialPropertyBlock* block);
    // protected System.Single GetAlphaCutoutThreshold()
    // Offset: 0x47DF058
    float GetAlphaCutoutThreshold();
    // protected System.Void HandleUpdateRenderTexture(UnityEngine.Texture texture)
    // Offset: 0x47DF07C
    void HandleUpdateRenderTexture(::UnityEngine::Texture* texture);
    // protected System.Void Start()
    // Offset: 0x47DF170
    void Start();
    // protected System.Void OnEnable()
    // Offset: 0x47DF1A8
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x47DF388
    void OnDisable();
    // public System.Void InjectAllCanvasMeshRenderer(Oculus.Interaction.UnityCanvas.CanvasRenderTexture canvasRenderTexture, UnityEngine.MeshRenderer meshRenderer)
    // Offset: 0x47DF4E4
    void InjectAllCanvasMeshRenderer(::Oculus::Interaction::UnityCanvas::CanvasRenderTexture* canvasRenderTexture, ::UnityEngine::MeshRenderer* meshRenderer);
    // public System.Void InjectCanvasRenderTexture(Oculus.Interaction.UnityCanvas.CanvasRenderTexture canvasRenderTexture)
    // Offset: 0x47DF514
    void InjectCanvasRenderTexture(::Oculus::Interaction::UnityCanvas::CanvasRenderTexture* canvasRenderTexture);
    // public System.Void InjectMeshRenderer(UnityEngine.MeshRenderer meshRenderer)
    // Offset: 0x47DF51C
    void InjectMeshRenderer(::UnityEngine::MeshRenderer* meshRenderer);
    // public System.Void InjectOptionalRenderingMode(Oculus.Interaction.UnityCanvas.RenderingMode renderingMode)
    // Offset: 0x47DF524
    void InjectOptionalRenderingMode(::Oculus::Interaction::UnityCanvas::RenderingMode renderingMode);
    // public System.Void InjectOptionalAlphaCutoutThreshold(System.Single alphaCutoutThreshold)
    // Offset: 0x47DF52C
    void InjectOptionalAlphaCutoutThreshold(float alphaCutoutThreshold);
    // public System.Void InjectOptionalUseAlphaToMask(System.Boolean useAlphaToMask)
    // Offset: 0x47DF534
    void InjectOptionalUseAlphaToMask(bool useAlphaToMask);
    // public System.Void .ctor()
    // Offset: 0x47DF540
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CanvasMeshRenderer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::UnityCanvas::CanvasMeshRenderer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CanvasMeshRenderer*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x47DF55C
    static void _cctor();
  }; // Oculus.Interaction.UnityCanvas.CanvasMeshRenderer
  #pragma pack(pop)
  static check_size<sizeof(CanvasMeshRenderer), 72 + sizeof(bool)> __Oculus_Interaction_UnityCanvas_CanvasMeshRendererSizeCheck;
  static_assert(sizeof(CanvasMeshRenderer) == 0x49);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::CanvasMeshRenderer::get_RenderingMode
// Il2CppName: get_RenderingMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::UnityCanvas::RenderingMode (Oculus::Interaction::UnityCanvas::CanvasMeshRenderer::*)()>(&Oculus::Interaction::UnityCanvas::CanvasMeshRenderer::get_RenderingMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UnityCanvas::CanvasMeshRenderer*), "get_RenderingMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::CanvasMeshRenderer::GetShaderName
// Il2CppName: GetShaderName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Oculus::Interaction::UnityCanvas::CanvasMeshRenderer::*)()>(&Oculus::Interaction::UnityCanvas::CanvasMeshRenderer::GetShaderName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UnityCanvas::CanvasMeshRenderer*), "GetShaderName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::CanvasMeshRenderer::SetAdditionalProperties
// Il2CppName: SetAdditionalProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::UnityCanvas::CanvasMeshRenderer::*)(::UnityEngine::MaterialPropertyBlock*)>(&Oculus::Interaction::UnityCanvas::CanvasMeshRenderer::SetAdditionalProperties)> {
  static const MethodInfo* get() {
    static auto* block = &::il2cpp_utils::GetClassFromName("UnityEngine", "MaterialPropertyBlock")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UnityCanvas::CanvasMeshRenderer*), "SetAdditionalProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{block});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::CanvasMeshRenderer::GetAlphaCutoutThreshold
// Il2CppName: GetAlphaCutoutThreshold
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::UnityCanvas::CanvasMeshRenderer::*)()>(&Oculus::Interaction::UnityCanvas::CanvasMeshRenderer::GetAlphaCutoutThreshold)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UnityCanvas::CanvasMeshRenderer*), "GetAlphaCutoutThreshold", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::CanvasMeshRenderer::HandleUpdateRenderTexture
// Il2CppName: HandleUpdateRenderTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::UnityCanvas::CanvasMeshRenderer::*)(::UnityEngine::Texture*)>(&Oculus::Interaction::UnityCanvas::CanvasMeshRenderer::HandleUpdateRenderTexture)> {
  static const MethodInfo* get() {
    static auto* texture = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UnityCanvas::CanvasMeshRenderer*), "HandleUpdateRenderTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{texture});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::CanvasMeshRenderer::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::UnityCanvas::CanvasMeshRenderer::*)()>(&Oculus::Interaction::UnityCanvas::CanvasMeshRenderer::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UnityCanvas::CanvasMeshRenderer*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::CanvasMeshRenderer::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::UnityCanvas::CanvasMeshRenderer::*)()>(&Oculus::Interaction::UnityCanvas::CanvasMeshRenderer::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UnityCanvas::CanvasMeshRenderer*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::CanvasMeshRenderer::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::UnityCanvas::CanvasMeshRenderer::*)()>(&Oculus::Interaction::UnityCanvas::CanvasMeshRenderer::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UnityCanvas::CanvasMeshRenderer*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::CanvasMeshRenderer::InjectAllCanvasMeshRenderer
// Il2CppName: InjectAllCanvasMeshRenderer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::UnityCanvas::CanvasMeshRenderer::*)(::Oculus::Interaction::UnityCanvas::CanvasRenderTexture*, ::UnityEngine::MeshRenderer*)>(&Oculus::Interaction::UnityCanvas::CanvasMeshRenderer::InjectAllCanvasMeshRenderer)> {
  static const MethodInfo* get() {
    static auto* canvasRenderTexture = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.UnityCanvas", "CanvasRenderTexture")->byval_arg;
    static auto* meshRenderer = &::il2cpp_utils::GetClassFromName("UnityEngine", "MeshRenderer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UnityCanvas::CanvasMeshRenderer*), "InjectAllCanvasMeshRenderer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{canvasRenderTexture, meshRenderer});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::CanvasMeshRenderer::InjectCanvasRenderTexture
// Il2CppName: InjectCanvasRenderTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::UnityCanvas::CanvasMeshRenderer::*)(::Oculus::Interaction::UnityCanvas::CanvasRenderTexture*)>(&Oculus::Interaction::UnityCanvas::CanvasMeshRenderer::InjectCanvasRenderTexture)> {
  static const MethodInfo* get() {
    static auto* canvasRenderTexture = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.UnityCanvas", "CanvasRenderTexture")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UnityCanvas::CanvasMeshRenderer*), "InjectCanvasRenderTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{canvasRenderTexture});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::CanvasMeshRenderer::InjectMeshRenderer
// Il2CppName: InjectMeshRenderer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::UnityCanvas::CanvasMeshRenderer::*)(::UnityEngine::MeshRenderer*)>(&Oculus::Interaction::UnityCanvas::CanvasMeshRenderer::InjectMeshRenderer)> {
  static const MethodInfo* get() {
    static auto* meshRenderer = &::il2cpp_utils::GetClassFromName("UnityEngine", "MeshRenderer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UnityCanvas::CanvasMeshRenderer*), "InjectMeshRenderer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{meshRenderer});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::CanvasMeshRenderer::InjectOptionalRenderingMode
// Il2CppName: InjectOptionalRenderingMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::UnityCanvas::CanvasMeshRenderer::*)(::Oculus::Interaction::UnityCanvas::RenderingMode)>(&Oculus::Interaction::UnityCanvas::CanvasMeshRenderer::InjectOptionalRenderingMode)> {
  static const MethodInfo* get() {
    static auto* renderingMode = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.UnityCanvas", "RenderingMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UnityCanvas::CanvasMeshRenderer*), "InjectOptionalRenderingMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderingMode});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::CanvasMeshRenderer::InjectOptionalAlphaCutoutThreshold
// Il2CppName: InjectOptionalAlphaCutoutThreshold
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::UnityCanvas::CanvasMeshRenderer::*)(float)>(&Oculus::Interaction::UnityCanvas::CanvasMeshRenderer::InjectOptionalAlphaCutoutThreshold)> {
  static const MethodInfo* get() {
    static auto* alphaCutoutThreshold = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UnityCanvas::CanvasMeshRenderer*), "InjectOptionalAlphaCutoutThreshold", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{alphaCutoutThreshold});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::CanvasMeshRenderer::InjectOptionalUseAlphaToMask
// Il2CppName: InjectOptionalUseAlphaToMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::UnityCanvas::CanvasMeshRenderer::*)(bool)>(&Oculus::Interaction::UnityCanvas::CanvasMeshRenderer::InjectOptionalUseAlphaToMask)> {
  static const MethodInfo* get() {
    static auto* useAlphaToMask = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UnityCanvas::CanvasMeshRenderer*), "InjectOptionalUseAlphaToMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{useAlphaToMask});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::CanvasMeshRenderer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Interaction::UnityCanvas::CanvasMeshRenderer::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Oculus::Interaction::UnityCanvas::CanvasMeshRenderer::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UnityCanvas::CanvasMeshRenderer*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
