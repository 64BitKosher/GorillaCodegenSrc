// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Oculus.Interaction.PointerInteractor`2
#include "Oculus/Interaction/PointerInteractor_2.hpp"
// Including type: Oculus.Interaction.Surfaces.SurfaceHit
#include "Oculus/Interaction/Surfaces/SurfaceHit.hpp"
// Including type: System.Nullable`1
#include "System/Nullable_1.hpp"
// Including type: UnityEngine.Ray
#include "UnityEngine/Ray.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction
namespace Oculus::Interaction {
  // Forward declaring type: RayInteractable
  class RayInteractable;
  // Forward declaring type: IMovement
  class IMovement;
  // Forward declaring type: ISelector
  class ISelector;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Object because it is already included!
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: RayInteractor
  class RayInteractor;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::RayInteractor);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::RayInteractor*, "Oculus.Interaction", "RayInteractor");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // WARNING Size may be invalid!
  // Autogenerated type: Oculus.Interaction.RayInteractor
  // [TokenAttribute] Offset: FFFFFFFF
  class RayInteractor : public ::Oculus::Interaction::PointerInteractor_2<::Oculus::Interaction::RayInteractor*, ::Oculus::Interaction::RayInteractable*> {
    public:
    // Nested type: ::Oculus::Interaction::RayInteractor::RayCandidateProperties
    class RayCandidateProperties;
    public:
    // private UnityEngine.Object _selector
    // Size: 0x8
    // Offset: 0x118
    ::UnityEngine::Object* selector;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private UnityEngine.Transform _rayOrigin
    // Size: 0x8
    // Offset: 0x120
    ::UnityEngine::Transform* rayOrigin;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private System.Single _maxRayLength
    // Size: 0x4
    // Offset: 0x128
    float maxRayLength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _equalDistanceThreshold
    // Size: 0x4
    // Offset: 0x12C
    float equalDistanceThreshold;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private Oculus.Interaction.RayInteractor/RayCandidateProperties _rayCandidateProperties
    // Size: 0x8
    // Offset: 0x130
    ::Oculus::Interaction::RayInteractor::RayCandidateProperties* rayCandidateProperties;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::RayInteractor::RayCandidateProperties*) == 0x8);
    // private Oculus.Interaction.IMovement _movement
    // Size: 0x8
    // Offset: 0x138
    ::Oculus::Interaction::IMovement* movement;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::IMovement*) == 0x8);
    // private Oculus.Interaction.Surfaces.SurfaceHit _movedHit
    // Size: 0x1C
    // Offset: 0x140
    ::Oculus::Interaction::Surfaces::SurfaceHit movedHit;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Surfaces::SurfaceHit) == 0x1C);
    // private UnityEngine.Pose _movementHitDelta
    // Size: 0x1C
    // Offset: 0x15C
    ::UnityEngine::Pose movementHitDelta;
    // Field size check
    static_assert(sizeof(::UnityEngine::Pose) == 0x1C);
    // private UnityEngine.Vector3 <Origin>k__BackingField
    // Size: 0xC
    // Offset: 0x178
    ::UnityEngine::Vector3 Origin;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Quaternion <Rotation>k__BackingField
    // Size: 0x10
    // Offset: 0x184
    ::UnityEngine::Quaternion Rotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private UnityEngine.Vector3 <Forward>k__BackingField
    // Size: 0xC
    // Offset: 0x194
    ::UnityEngine::Vector3 Forward;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 <End>k__BackingField
    // Size: 0xC
    // Offset: 0x1A0
    ::UnityEngine::Vector3 End;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Nullable`1<Oculus.Interaction.Surfaces.SurfaceHit> <CollisionInfo>k__BackingField
    // Size: 0xFFFFFFFF
    // Offset: 0x1AC
    ::System::Nullable_1<::Oculus::Interaction::Surfaces::SurfaceHit> CollisionInfo;
    // private UnityEngine.Ray <Ray>k__BackingField
    // Size: 0x18
    // Offset: 0x1CC
    ::UnityEngine::Ray Ray;
    // Field size check
    static_assert(sizeof(::UnityEngine::Ray) == 0x18);
    public:
    // Get instance field reference: private UnityEngine.Object _selector
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__selector();
    // Get instance field reference: private UnityEngine.Transform _rayOrigin
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__rayOrigin();
    // Get instance field reference: private System.Single _maxRayLength
    [[deprecated("Use field access instead!")]] float& dyn__maxRayLength();
    // Get instance field reference: private System.Single _equalDistanceThreshold
    [[deprecated("Use field access instead!")]] float& dyn__equalDistanceThreshold();
    // Get instance field reference: private Oculus.Interaction.RayInteractor/RayCandidateProperties _rayCandidateProperties
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::RayInteractor::RayCandidateProperties*& dyn__rayCandidateProperties();
    // Get instance field reference: private Oculus.Interaction.IMovement _movement
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::IMovement*& dyn__movement();
    // Get instance field reference: private Oculus.Interaction.Surfaces.SurfaceHit _movedHit
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Surfaces::SurfaceHit& dyn__movedHit();
    // Get instance field reference: private UnityEngine.Pose _movementHitDelta
    [[deprecated("Use field access instead!")]] ::UnityEngine::Pose& dyn__movementHitDelta();
    // Get instance field reference: private UnityEngine.Vector3 <Origin>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_$Origin$k__BackingField();
    // Get instance field reference: private UnityEngine.Quaternion <Rotation>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_$Rotation$k__BackingField();
    // Get instance field reference: private UnityEngine.Vector3 <Forward>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_$Forward$k__BackingField();
    // Get instance field reference: private UnityEngine.Vector3 <End>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_$End$k__BackingField();
    // Get instance field reference: private System.Nullable`1<Oculus.Interaction.Surfaces.SurfaceHit> <CollisionInfo>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<::Oculus::Interaction::Surfaces::SurfaceHit>& dyn_$CollisionInfo$k__BackingField();
    // Get instance field reference: private UnityEngine.Ray <Ray>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Ray& dyn_$Ray$k__BackingField();
    // public UnityEngine.Vector3 get_Origin()
    // Offset: 0x47B3D9C
    ::UnityEngine::Vector3 get_Origin();
    // protected System.Void set_Origin(UnityEngine.Vector3 value)
    // Offset: 0x47B3DAC
    void set_Origin(::UnityEngine::Vector3 value);
    // public UnityEngine.Quaternion get_Rotation()
    // Offset: 0x47B3DBC
    ::UnityEngine::Quaternion get_Rotation();
    // protected System.Void set_Rotation(UnityEngine.Quaternion value)
    // Offset: 0x47B3DD0
    void set_Rotation(::UnityEngine::Quaternion value);
    // public UnityEngine.Vector3 get_Forward()
    // Offset: 0x47B3DE4
    ::UnityEngine::Vector3 get_Forward();
    // protected System.Void set_Forward(UnityEngine.Vector3 value)
    // Offset: 0x47B3DF4
    void set_Forward(::UnityEngine::Vector3 value);
    // public UnityEngine.Vector3 get_End()
    // Offset: 0x47B3E04
    ::UnityEngine::Vector3 get_End();
    // public System.Void set_End(UnityEngine.Vector3 value)
    // Offset: 0x47B3E14
    void set_End(::UnityEngine::Vector3 value);
    // public System.Single get_MaxRayLength()
    // Offset: 0x47B3E24
    float get_MaxRayLength();
    // public System.Void set_MaxRayLength(System.Single value)
    // Offset: 0x47B3E2C
    void set_MaxRayLength(float value);
    // public System.Nullable`1<Oculus.Interaction.Surfaces.SurfaceHit> get_CollisionInfo()
    // Offset: 0x47B3E34
    ::System::Nullable_1<::Oculus::Interaction::Surfaces::SurfaceHit> get_CollisionInfo();
    // protected System.Void set_CollisionInfo(System.Nullable`1<Oculus.Interaction.Surfaces.SurfaceHit> value)
    // Offset: 0x47B3E44
    void set_CollisionInfo(::System::Nullable_1<::Oculus::Interaction::Surfaces::SurfaceHit> value);
    // public UnityEngine.Ray get_Ray()
    // Offset: 0x47B3E54
    ::UnityEngine::Ray get_Ray();
    // protected System.Void set_Ray(UnityEngine.Ray value)
    // Offset: 0x47B3E6C
    void set_Ray(::UnityEngine::Ray value);
    // protected Oculus.Interaction.RayInteractable ComputeCandidate()
    // Offset: 0x47B4140
    ::Oculus::Interaction::RayInteractable* ComputeCandidate();
    // protected System.Int32 ComputeCandidateTiebreaker(Oculus.Interaction.RayInteractable a, Oculus.Interaction.RayInteractable b)
    // Offset: 0x47B4600
    int ComputeCandidateTiebreaker(::Oculus::Interaction::RayInteractable* a, ::Oculus::Interaction::RayInteractable* b);
    // protected System.Void InteractableSelected(Oculus.Interaction.RayInteractable interactable)
    // Offset: 0x47B4694
    void InteractableSelected(::Oculus::Interaction::RayInteractable* interactable);
    // protected System.Void InteractableUnselected(Oculus.Interaction.RayInteractable interactable)
    // Offset: 0x47B4980
    void InteractableUnselected(::Oculus::Interaction::RayInteractable* interactable);
    // public System.Void InjectAllRayInteractor(Oculus.Interaction.ISelector selector, UnityEngine.Transform rayOrigin)
    // Offset: 0x47B50D8
    void InjectAllRayInteractor(::Oculus::Interaction::ISelector* selector, ::UnityEngine::Transform* rayOrigin);
    // public System.Void InjectSelector(Oculus.Interaction.ISelector selector)
    // Offset: 0x47B5104
    void InjectSelector(::Oculus::Interaction::ISelector* selector);
    // public System.Void InjectRayOrigin(UnityEngine.Transform rayOrigin)
    // Offset: 0x47B51E8
    void InjectRayOrigin(::UnityEngine::Transform* rayOrigin);
    // public System.Void InjectOptionalEqualDistanceThreshold(System.Single equalDistanceThreshold)
    // Offset: 0x47B51F8
    void InjectOptionalEqualDistanceThreshold(float equalDistanceThreshold);
    // protected override System.Void Awake()
    // Offset: 0x47B3E84
    // Implemented from: Oculus.Interaction.Interactor`2
    // Base method: System.Void Interactor_2::Awake()
    void Awake();
    // protected override System.Void Start()
    // Offset: 0x47B3F30
    // Implemented from: Oculus.Interaction.Interactor`2
    // Base method: System.Void Interactor_2::Start()
    void Start();
    // protected override System.Void DoPreprocess()
    // Offset: 0x47B3F78
    // Implemented from: Oculus.Interaction.Interactor`2
    // Base method: System.Void Interactor_2::DoPreprocess()
    void DoPreprocess();
    // public override System.Object get_CandidateProperties()
    // Offset: 0x47B4138
    // Implemented from: Oculus.Interaction.Interactor`2
    // Base method: System.Object Interactor_2::get_CandidateProperties()
    ::Il2CppObject* get_CandidateProperties();
    // protected override System.Void DoSelectUpdate()
    // Offset: 0x47B4AFC
    // Implemented from: Oculus.Interaction.Interactor`2
    // Base method: System.Void Interactor_2::DoSelectUpdate()
    void DoSelectUpdate();
    // protected override UnityEngine.Pose ComputePointerPose()
    // Offset: 0x47B4EAC
    // Implemented from: Oculus.Interaction.PointerInteractor`2
    // Base method: UnityEngine.Pose PointerInteractor_2::ComputePointerPose()
    ::UnityEngine::Pose ComputePointerPose();
    // public System.Void .ctor()
    // Offset: 0x47B5200
    // Implemented from: Oculus.Interaction.PointerInteractor`2
    // Base method: System.Void PointerInteractor_2::.ctor()
    // Base method: System.Void Interactor_2::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RayInteractor* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::RayInteractor::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RayInteractor*, creationType>()));
    }
  }; // Oculus.Interaction.RayInteractor
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::RayInteractor::get_Origin
// Il2CppName: get_Origin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Oculus::Interaction::RayInteractor::*)()>(&Oculus::Interaction::RayInteractor::get_Origin)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::RayInteractor*), "get_Origin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::RayInteractor::set_Origin
// Il2CppName: set_Origin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::RayInteractor::*)(::UnityEngine::Vector3)>(&Oculus::Interaction::RayInteractor::set_Origin)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::RayInteractor*), "set_Origin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::RayInteractor::get_Rotation
// Il2CppName: get_Rotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (Oculus::Interaction::RayInteractor::*)()>(&Oculus::Interaction::RayInteractor::get_Rotation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::RayInteractor*), "get_Rotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::RayInteractor::set_Rotation
// Il2CppName: set_Rotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::RayInteractor::*)(::UnityEngine::Quaternion)>(&Oculus::Interaction::RayInteractor::set_Rotation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::RayInteractor*), "set_Rotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::RayInteractor::get_Forward
// Il2CppName: get_Forward
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Oculus::Interaction::RayInteractor::*)()>(&Oculus::Interaction::RayInteractor::get_Forward)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::RayInteractor*), "get_Forward", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::RayInteractor::set_Forward
// Il2CppName: set_Forward
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::RayInteractor::*)(::UnityEngine::Vector3)>(&Oculus::Interaction::RayInteractor::set_Forward)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::RayInteractor*), "set_Forward", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::RayInteractor::get_End
// Il2CppName: get_End
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Oculus::Interaction::RayInteractor::*)()>(&Oculus::Interaction::RayInteractor::get_End)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::RayInteractor*), "get_End", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::RayInteractor::set_End
// Il2CppName: set_End
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::RayInteractor::*)(::UnityEngine::Vector3)>(&Oculus::Interaction::RayInteractor::set_End)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::RayInteractor*), "set_End", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::RayInteractor::get_MaxRayLength
// Il2CppName: get_MaxRayLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::RayInteractor::*)()>(&Oculus::Interaction::RayInteractor::get_MaxRayLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::RayInteractor*), "get_MaxRayLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::RayInteractor::set_MaxRayLength
// Il2CppName: set_MaxRayLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::RayInteractor::*)(float)>(&Oculus::Interaction::RayInteractor::set_MaxRayLength)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::RayInteractor*), "set_MaxRayLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::RayInteractor::get_CollisionInfo
// Il2CppName: get_CollisionInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Nullable_1<::Oculus::Interaction::Surfaces::SurfaceHit> (Oculus::Interaction::RayInteractor::*)()>(&Oculus::Interaction::RayInteractor::get_CollisionInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::RayInteractor*), "get_CollisionInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::RayInteractor::set_CollisionInfo
// Il2CppName: set_CollisionInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::RayInteractor::*)(::System::Nullable_1<::Oculus::Interaction::Surfaces::SurfaceHit>)>(&Oculus::Interaction::RayInteractor::set_CollisionInfo)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Interaction.Surfaces", "SurfaceHit")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::RayInteractor*), "set_CollisionInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::RayInteractor::get_Ray
// Il2CppName: get_Ray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Ray (Oculus::Interaction::RayInteractor::*)()>(&Oculus::Interaction::RayInteractor::get_Ray)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::RayInteractor*), "get_Ray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::RayInteractor::set_Ray
// Il2CppName: set_Ray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::RayInteractor::*)(::UnityEngine::Ray)>(&Oculus::Interaction::RayInteractor::set_Ray)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Ray")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::RayInteractor*), "set_Ray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::RayInteractor::ComputeCandidate
// Il2CppName: ComputeCandidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::RayInteractable* (Oculus::Interaction::RayInteractor::*)()>(&Oculus::Interaction::RayInteractor::ComputeCandidate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::RayInteractor*), "ComputeCandidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::RayInteractor::ComputeCandidateTiebreaker
// Il2CppName: ComputeCandidateTiebreaker
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Oculus::Interaction::RayInteractor::*)(::Oculus::Interaction::RayInteractable*, ::Oculus::Interaction::RayInteractable*)>(&Oculus::Interaction::RayInteractor::ComputeCandidateTiebreaker)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "RayInteractable")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "RayInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::RayInteractor*), "ComputeCandidateTiebreaker", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::RayInteractor::InteractableSelected
// Il2CppName: InteractableSelected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::RayInteractor::*)(::Oculus::Interaction::RayInteractable*)>(&Oculus::Interaction::RayInteractor::InteractableSelected)> {
  static const MethodInfo* get() {
    static auto* interactable = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "RayInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::RayInteractor*), "InteractableSelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactable});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::RayInteractor::InteractableUnselected
// Il2CppName: InteractableUnselected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::RayInteractor::*)(::Oculus::Interaction::RayInteractable*)>(&Oculus::Interaction::RayInteractor::InteractableUnselected)> {
  static const MethodInfo* get() {
    static auto* interactable = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "RayInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::RayInteractor*), "InteractableUnselected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactable});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::RayInteractor::InjectAllRayInteractor
// Il2CppName: InjectAllRayInteractor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::RayInteractor::*)(::Oculus::Interaction::ISelector*, ::UnityEngine::Transform*)>(&Oculus::Interaction::RayInteractor::InjectAllRayInteractor)> {
  static const MethodInfo* get() {
    static auto* selector = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "ISelector")->byval_arg;
    static auto* rayOrigin = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::RayInteractor*), "InjectAllRayInteractor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{selector, rayOrigin});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::RayInteractor::InjectSelector
// Il2CppName: InjectSelector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::RayInteractor::*)(::Oculus::Interaction::ISelector*)>(&Oculus::Interaction::RayInteractor::InjectSelector)> {
  static const MethodInfo* get() {
    static auto* selector = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "ISelector")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::RayInteractor*), "InjectSelector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{selector});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::RayInteractor::InjectRayOrigin
// Il2CppName: InjectRayOrigin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::RayInteractor::*)(::UnityEngine::Transform*)>(&Oculus::Interaction::RayInteractor::InjectRayOrigin)> {
  static const MethodInfo* get() {
    static auto* rayOrigin = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::RayInteractor*), "InjectRayOrigin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rayOrigin});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::RayInteractor::InjectOptionalEqualDistanceThreshold
// Il2CppName: InjectOptionalEqualDistanceThreshold
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::RayInteractor::*)(float)>(&Oculus::Interaction::RayInteractor::InjectOptionalEqualDistanceThreshold)> {
  static const MethodInfo* get() {
    static auto* equalDistanceThreshold = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::RayInteractor*), "InjectOptionalEqualDistanceThreshold", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{equalDistanceThreshold});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::RayInteractor::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::RayInteractor::*)()>(&Oculus::Interaction::RayInteractor::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::RayInteractor*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::RayInteractor::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::RayInteractor::*)()>(&Oculus::Interaction::RayInteractor::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::RayInteractor*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::RayInteractor::DoPreprocess
// Il2CppName: DoPreprocess
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::RayInteractor::*)()>(&Oculus::Interaction::RayInteractor::DoPreprocess)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::RayInteractor*), "DoPreprocess", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::RayInteractor::get_CandidateProperties
// Il2CppName: get_CandidateProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (Oculus::Interaction::RayInteractor::*)()>(&Oculus::Interaction::RayInteractor::get_CandidateProperties)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::RayInteractor*), "get_CandidateProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::RayInteractor::DoSelectUpdate
// Il2CppName: DoSelectUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::RayInteractor::*)()>(&Oculus::Interaction::RayInteractor::DoSelectUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::RayInteractor*), "DoSelectUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::RayInteractor::ComputePointerPose
// Il2CppName: ComputePointerPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Pose (Oculus::Interaction::RayInteractor::*)()>(&Oculus::Interaction::RayInteractor::ComputePointerPose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::RayInteractor*), "ComputePointerPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::RayInteractor::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
