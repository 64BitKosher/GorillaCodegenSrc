// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Oculus.Interaction.AudioPhysics
#include "Oculus/Interaction/AudioPhysics.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction
namespace Oculus::Interaction {
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Collision
  class Collision;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::AudioPhysics::CollisionEvents);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::AudioPhysics::CollisionEvents*, "Oculus.Interaction", "AudioPhysics/CollisionEvents");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.AudioPhysics/CollisionEvents
  // [TokenAttribute] Offset: FFFFFFFF
  class AudioPhysics::CollisionEvents : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::Oculus::Interaction::AudioPhysics::CollisionEvents::$$c
    class $$c;
    public:
    // private System.Action`1<UnityEngine.Collision> WhenCollisionEnter
    // Size: 0x8
    // Offset: 0x20
    ::System::Action_1<::UnityEngine::Collision*>* WhenCollisionEnter;
    // Field size check
    static_assert(sizeof(::System::Action_1<::UnityEngine::Collision*>*) == 0x8);
    public:
    // Get instance field reference: private System.Action`1<UnityEngine.Collision> WhenCollisionEnter
    [[deprecated("Use field access instead!")]] ::System::Action_1<::UnityEngine::Collision*>*& dyn_WhenCollisionEnter();
    // public System.Void add_WhenCollisionEnter(System.Action`1<UnityEngine.Collision> value)
    // Offset: 0x4797DE0
    void add_WhenCollisionEnter(::System::Action_1<::UnityEngine::Collision*>* value);
    // public System.Void remove_WhenCollisionEnter(System.Action`1<UnityEngine.Collision> value)
    // Offset: 0x4797F28
    void remove_WhenCollisionEnter(::System::Action_1<::UnityEngine::Collision*>* value);
    // private System.Void OnCollisionEnter(UnityEngine.Collision collision)
    // Offset: 0x47984CC
    void OnCollisionEnter(::UnityEngine::Collision* collision);
    // public System.Void .ctor()
    // Offset: 0x47984F0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AudioPhysics::CollisionEvents* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::AudioPhysics::CollisionEvents::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AudioPhysics::CollisionEvents*, creationType>()));
    }
  }; // Oculus.Interaction.AudioPhysics/CollisionEvents
  #pragma pack(pop)
  static check_size<sizeof(AudioPhysics::CollisionEvents), 32 + sizeof(::System::Action_1<::UnityEngine::Collision*>*)> __Oculus_Interaction_AudioPhysics_CollisionEventsSizeCheck;
  static_assert(sizeof(AudioPhysics::CollisionEvents) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::AudioPhysics::CollisionEvents::add_WhenCollisionEnter
// Il2CppName: add_WhenCollisionEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::AudioPhysics::CollisionEvents::*)(::System::Action_1<::UnityEngine::Collision*>*)>(&Oculus::Interaction::AudioPhysics::CollisionEvents::add_WhenCollisionEnter)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Collision")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::AudioPhysics::CollisionEvents*), "add_WhenCollisionEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::AudioPhysics::CollisionEvents::remove_WhenCollisionEnter
// Il2CppName: remove_WhenCollisionEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::AudioPhysics::CollisionEvents::*)(::System::Action_1<::UnityEngine::Collision*>*)>(&Oculus::Interaction::AudioPhysics::CollisionEvents::remove_WhenCollisionEnter)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Collision")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::AudioPhysics::CollisionEvents*), "remove_WhenCollisionEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::AudioPhysics::CollisionEvents::OnCollisionEnter
// Il2CppName: OnCollisionEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::AudioPhysics::CollisionEvents::*)(::UnityEngine::Collision*)>(&Oculus::Interaction::AudioPhysics::CollisionEvents::OnCollisionEnter)> {
  static const MethodInfo* get() {
    static auto* collision = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collision")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::AudioPhysics::CollisionEvents*), "OnCollisionEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{collision});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::AudioPhysics::CollisionEvents::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
