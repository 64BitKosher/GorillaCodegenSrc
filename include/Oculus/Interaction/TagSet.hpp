// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: TagSet
  class TagSet;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::TagSet);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::TagSet*, "Oculus.Interaction", "TagSet");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.TagSet
  // [TokenAttribute] Offset: FFFFFFFF
  class TagSet : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private System.Collections.Generic.List`1<System.String> _tags
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::StringW>* tags;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::StringW>*) == 0x8);
    // private readonly System.Collections.Generic.HashSet`1<System.String> _tagSet
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::HashSet_1<::StringW>* tagSet;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<::StringW>*) == 0x8);
    public:
    // Get instance field reference: private System.Collections.Generic.List`1<System.String> _tags
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& dyn__tags();
    // Get instance field reference: private readonly System.Collections.Generic.HashSet`1<System.String> _tagSet
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::StringW>*& dyn__tagSet();
    // protected System.Void Start()
    // Offset: 0x478919C
    void Start();
    // public System.Boolean ContainsTag(System.String tag)
    // Offset: 0x4789308
    bool ContainsTag(::StringW tag);
    // public System.Void AddTag(System.String tag)
    // Offset: 0x4789360
    void AddTag(::StringW tag);
    // public System.Void RemoveTag(System.String tag)
    // Offset: 0x47893B8
    void RemoveTag(::StringW tag);
    // public System.Void InjectOptionalTags(System.Collections.Generic.List`1<System.String> tags)
    // Offset: 0x4789410
    void InjectOptionalTags(::System::Collections::Generic::List_1<::StringW>* tags);
    // public System.Void .ctor()
    // Offset: 0x4789418
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TagSet* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::TagSet::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TagSet*, creationType>()));
    }
  }; // Oculus.Interaction.TagSet
  #pragma pack(pop)
  static check_size<sizeof(TagSet), 40 + sizeof(::System::Collections::Generic::HashSet_1<::StringW>*)> __Oculus_Interaction_TagSetSizeCheck;
  static_assert(sizeof(TagSet) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::TagSet::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TagSet::*)()>(&Oculus::Interaction::TagSet::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TagSet*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TagSet::ContainsTag
// Il2CppName: ContainsTag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::TagSet::*)(::StringW)>(&Oculus::Interaction::TagSet::ContainsTag)> {
  static const MethodInfo* get() {
    static auto* tag = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TagSet*), "ContainsTag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tag});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TagSet::AddTag
// Il2CppName: AddTag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TagSet::*)(::StringW)>(&Oculus::Interaction::TagSet::AddTag)> {
  static const MethodInfo* get() {
    static auto* tag = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TagSet*), "AddTag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tag});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TagSet::RemoveTag
// Il2CppName: RemoveTag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TagSet::*)(::StringW)>(&Oculus::Interaction::TagSet::RemoveTag)> {
  static const MethodInfo* get() {
    static auto* tag = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TagSet*), "RemoveTag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tag});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TagSet::InjectOptionalTags
// Il2CppName: InjectOptionalTags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TagSet::*)(::System::Collections::Generic::List_1<::StringW>*)>(&Oculus::Interaction::TagSet::InjectOptionalTags)> {
  static const MethodInfo* get() {
    static auto* tags = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TagSet*), "InjectOptionalTags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tags});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TagSet::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
