// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Oculus.Interaction.IGameObjectFilter
#include "Oculus/Interaction/IGameObjectFilter.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Object because it is already included!
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: Oculus::Interaction
namespace Oculus::Interaction {
  // Forward declaring type: IInteractable
  class IInteractable;
  // Forward declaring type: IInteractorView
  class IInteractorView;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: SecondaryInteractorFilter
  class SecondaryInteractorFilter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::SecondaryInteractorFilter);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::SecondaryInteractorFilter*, "Oculus.Interaction", "SecondaryInteractorFilter");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x51
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.SecondaryInteractorFilter
  // [TokenAttribute] Offset: FFFFFFFF
  class SecondaryInteractorFilter : public ::UnityEngine::MonoBehaviour/*, public ::Oculus::Interaction::IGameObjectFilter*/ {
    public:
    public:
    // private UnityEngine.Object _primaryInteractable
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Object* primaryInteractable;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.IInteractable <PrimaryInteractable>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    ::Oculus::Interaction::IInteractable* PrimaryInteractable;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::IInteractable*) == 0x8);
    // private UnityEngine.Object _secondaryInteractable
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Object* secondaryInteractable;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.IInteractable <SecondaryInteractable>k__BackingField
    // Size: 0x8
    // Offset: 0x38
    ::Oculus::Interaction::IInteractable* SecondaryInteractable;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::IInteractable*) == 0x8);
    // private System.Boolean _selectRequired
    // Size: 0x1
    // Offset: 0x40
    bool selectRequired;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: selectRequired and: primaryToSecondaryMap
    char __padding4[0x7] = {};
    // private System.Collections.Generic.Dictionary`2<Oculus.Interaction.IInteractorView,System.Collections.Generic.List`1<Oculus.Interaction.IInteractorView>> _primaryToSecondaryMap
    // Size: 0x8
    // Offset: 0x48
    ::System::Collections::Generic::Dictionary_2<::Oculus::Interaction::IInteractorView*, ::System::Collections::Generic::List_1<::Oculus::Interaction::IInteractorView*>*>* primaryToSecondaryMap;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::Oculus::Interaction::IInteractorView*, ::System::Collections::Generic::List_1<::Oculus::Interaction::IInteractorView*>*>*) == 0x8);
    // protected System.Boolean _started
    // Size: 0x1
    // Offset: 0x50
    bool started;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::IGameObjectFilter
    operator ::Oculus::Interaction::IGameObjectFilter() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::IGameObjectFilter*>(this);
    }
    // Get instance field reference: private UnityEngine.Object _primaryInteractable
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__primaryInteractable();
    // Get instance field reference: private Oculus.Interaction.IInteractable <PrimaryInteractable>k__BackingField
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::IInteractable*& dyn_$PrimaryInteractable$k__BackingField();
    // Get instance field reference: private UnityEngine.Object _secondaryInteractable
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__secondaryInteractable();
    // Get instance field reference: private Oculus.Interaction.IInteractable <SecondaryInteractable>k__BackingField
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::IInteractable*& dyn_$SecondaryInteractable$k__BackingField();
    // Get instance field reference: private System.Boolean _selectRequired
    [[deprecated("Use field access instead!")]] bool& dyn__selectRequired();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<Oculus.Interaction.IInteractorView,System.Collections.Generic.List`1<Oculus.Interaction.IInteractorView>> _primaryToSecondaryMap
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::Oculus::Interaction::IInteractorView*, ::System::Collections::Generic::List_1<::Oculus::Interaction::IInteractorView*>*>*& dyn__primaryToSecondaryMap();
    // Get instance field reference: protected System.Boolean _started
    [[deprecated("Use field access instead!")]] bool& dyn__started();
    // public Oculus.Interaction.IInteractable get_PrimaryInteractable()
    // Offset: 0x47882EC
    ::Oculus::Interaction::IInteractable* get_PrimaryInteractable();
    // private System.Void set_PrimaryInteractable(Oculus.Interaction.IInteractable value)
    // Offset: 0x47882F4
    void set_PrimaryInteractable(::Oculus::Interaction::IInteractable* value);
    // public Oculus.Interaction.IInteractable get_SecondaryInteractable()
    // Offset: 0x47882FC
    ::Oculus::Interaction::IInteractable* get_SecondaryInteractable();
    // private System.Void set_SecondaryInteractable(Oculus.Interaction.IInteractable value)
    // Offset: 0x4788304
    void set_SecondaryInteractable(::Oculus::Interaction::IInteractable* value);
    // protected System.Void Awake()
    // Offset: 0x478830C
    void Awake();
    // protected System.Void Start()
    // Offset: 0x47883D4
    void Start();
    // protected System.Void OnEnable()
    // Offset: 0x4788404
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x4788594
    void OnDisable();
    // public System.Boolean Filter(UnityEngine.GameObject gameObject)
    // Offset: 0x4788724
    bool Filter(::UnityEngine::GameObject* gameObject);
    // private System.Void ClearInteractorsForPrimary(Oculus.Interaction.IInteractorView primary)
    // Offset: 0x4788CDC
    void ClearInteractorsForPrimary(::Oculus::Interaction::IInteractorView* primary);
    // private System.Void HandleWhenInteractorViewRemoved(Oculus.Interaction.IInteractorView primaryView)
    // Offset: 0x4788FB0
    void HandleWhenInteractorViewRemoved(::Oculus::Interaction::IInteractorView* primaryView);
    // private System.Void HandleWhenSelectingInteractorViewRemoved(Oculus.Interaction.IInteractorView primaryView)
    // Offset: 0x4788FB4
    void HandleWhenSelectingInteractorViewRemoved(::Oculus::Interaction::IInteractorView* primaryView);
    // public System.Void InjectAllSecondaryInteractorFilter(Oculus.Interaction.IInteractable primaryInteractable, Oculus.Interaction.IInteractable secondaryInteractable, System.Boolean selectRequired)
    // Offset: 0x4788FB8
    void InjectAllSecondaryInteractorFilter(::Oculus::Interaction::IInteractable* primaryInteractable, ::Oculus::Interaction::IInteractable* secondaryInteractable, bool selectRequired);
    // private System.Void InjectPrimaryInteractable(Oculus.Interaction.IInteractable interactableView)
    // Offset: 0x4788FF0
    void InjectPrimaryInteractable(::Oculus::Interaction::IInteractable* interactableView);
    // private System.Void InjectSecondaryInteractable(Oculus.Interaction.IInteractable interactable)
    // Offset: 0x47890BC
    void InjectSecondaryInteractable(::Oculus::Interaction::IInteractable* interactable);
    // private System.Void InjectSelectRequired(System.Boolean selectRequired)
    // Offset: 0x4789188
    void InjectSelectRequired(bool selectRequired);
    // public System.Void .ctor()
    // Offset: 0x4789194
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SecondaryInteractorFilter* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::SecondaryInteractorFilter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SecondaryInteractorFilter*, creationType>()));
    }
  }; // Oculus.Interaction.SecondaryInteractorFilter
  #pragma pack(pop)
  static check_size<sizeof(SecondaryInteractorFilter), 80 + sizeof(bool)> __Oculus_Interaction_SecondaryInteractorFilterSizeCheck;
  static_assert(sizeof(SecondaryInteractorFilter) == 0x51);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::SecondaryInteractorFilter::get_PrimaryInteractable
// Il2CppName: get_PrimaryInteractable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::IInteractable* (Oculus::Interaction::SecondaryInteractorFilter::*)()>(&Oculus::Interaction::SecondaryInteractorFilter::get_PrimaryInteractable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SecondaryInteractorFilter*), "get_PrimaryInteractable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SecondaryInteractorFilter::set_PrimaryInteractable
// Il2CppName: set_PrimaryInteractable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SecondaryInteractorFilter::*)(::Oculus::Interaction::IInteractable*)>(&Oculus::Interaction::SecondaryInteractorFilter::set_PrimaryInteractable)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SecondaryInteractorFilter*), "set_PrimaryInteractable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SecondaryInteractorFilter::get_SecondaryInteractable
// Il2CppName: get_SecondaryInteractable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::IInteractable* (Oculus::Interaction::SecondaryInteractorFilter::*)()>(&Oculus::Interaction::SecondaryInteractorFilter::get_SecondaryInteractable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SecondaryInteractorFilter*), "get_SecondaryInteractable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SecondaryInteractorFilter::set_SecondaryInteractable
// Il2CppName: set_SecondaryInteractable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SecondaryInteractorFilter::*)(::Oculus::Interaction::IInteractable*)>(&Oculus::Interaction::SecondaryInteractorFilter::set_SecondaryInteractable)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SecondaryInteractorFilter*), "set_SecondaryInteractable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SecondaryInteractorFilter::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SecondaryInteractorFilter::*)()>(&Oculus::Interaction::SecondaryInteractorFilter::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SecondaryInteractorFilter*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SecondaryInteractorFilter::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SecondaryInteractorFilter::*)()>(&Oculus::Interaction::SecondaryInteractorFilter::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SecondaryInteractorFilter*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SecondaryInteractorFilter::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SecondaryInteractorFilter::*)()>(&Oculus::Interaction::SecondaryInteractorFilter::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SecondaryInteractorFilter*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SecondaryInteractorFilter::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SecondaryInteractorFilter::*)()>(&Oculus::Interaction::SecondaryInteractorFilter::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SecondaryInteractorFilter*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SecondaryInteractorFilter::Filter
// Il2CppName: Filter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::SecondaryInteractorFilter::*)(::UnityEngine::GameObject*)>(&Oculus::Interaction::SecondaryInteractorFilter::Filter)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SecondaryInteractorFilter*), "Filter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SecondaryInteractorFilter::ClearInteractorsForPrimary
// Il2CppName: ClearInteractorsForPrimary
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SecondaryInteractorFilter::*)(::Oculus::Interaction::IInteractorView*)>(&Oculus::Interaction::SecondaryInteractorFilter::ClearInteractorsForPrimary)> {
  static const MethodInfo* get() {
    static auto* primary = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IInteractorView")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SecondaryInteractorFilter*), "ClearInteractorsForPrimary", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{primary});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SecondaryInteractorFilter::HandleWhenInteractorViewRemoved
// Il2CppName: HandleWhenInteractorViewRemoved
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SecondaryInteractorFilter::*)(::Oculus::Interaction::IInteractorView*)>(&Oculus::Interaction::SecondaryInteractorFilter::HandleWhenInteractorViewRemoved)> {
  static const MethodInfo* get() {
    static auto* primaryView = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IInteractorView")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SecondaryInteractorFilter*), "HandleWhenInteractorViewRemoved", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{primaryView});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SecondaryInteractorFilter::HandleWhenSelectingInteractorViewRemoved
// Il2CppName: HandleWhenSelectingInteractorViewRemoved
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SecondaryInteractorFilter::*)(::Oculus::Interaction::IInteractorView*)>(&Oculus::Interaction::SecondaryInteractorFilter::HandleWhenSelectingInteractorViewRemoved)> {
  static const MethodInfo* get() {
    static auto* primaryView = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IInteractorView")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SecondaryInteractorFilter*), "HandleWhenSelectingInteractorViewRemoved", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{primaryView});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SecondaryInteractorFilter::InjectAllSecondaryInteractorFilter
// Il2CppName: InjectAllSecondaryInteractorFilter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SecondaryInteractorFilter::*)(::Oculus::Interaction::IInteractable*, ::Oculus::Interaction::IInteractable*, bool)>(&Oculus::Interaction::SecondaryInteractorFilter::InjectAllSecondaryInteractorFilter)> {
  static const MethodInfo* get() {
    static auto* primaryInteractable = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IInteractable")->byval_arg;
    static auto* secondaryInteractable = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IInteractable")->byval_arg;
    static auto* selectRequired = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SecondaryInteractorFilter*), "InjectAllSecondaryInteractorFilter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{primaryInteractable, secondaryInteractable, selectRequired});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SecondaryInteractorFilter::InjectPrimaryInteractable
// Il2CppName: InjectPrimaryInteractable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SecondaryInteractorFilter::*)(::Oculus::Interaction::IInteractable*)>(&Oculus::Interaction::SecondaryInteractorFilter::InjectPrimaryInteractable)> {
  static const MethodInfo* get() {
    static auto* interactableView = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SecondaryInteractorFilter*), "InjectPrimaryInteractable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactableView});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SecondaryInteractorFilter::InjectSecondaryInteractable
// Il2CppName: InjectSecondaryInteractable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SecondaryInteractorFilter::*)(::Oculus::Interaction::IInteractable*)>(&Oculus::Interaction::SecondaryInteractorFilter::InjectSecondaryInteractable)> {
  static const MethodInfo* get() {
    static auto* interactable = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SecondaryInteractorFilter*), "InjectSecondaryInteractable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactable});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SecondaryInteractorFilter::InjectSelectRequired
// Il2CppName: InjectSelectRequired
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SecondaryInteractorFilter::*)(bool)>(&Oculus::Interaction::SecondaryInteractorFilter::InjectSelectRequired)> {
  static const MethodInfo* get() {
    static auto* selectRequired = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SecondaryInteractorFilter*), "InjectSelectRequired", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{selectRequired});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SecondaryInteractorFilter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
