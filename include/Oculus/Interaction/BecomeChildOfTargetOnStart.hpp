// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: BecomeChildOfTargetOnStart
  class BecomeChildOfTargetOnStart;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::BecomeChildOfTargetOnStart);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::BecomeChildOfTargetOnStart*, "Oculus.Interaction", "BecomeChildOfTargetOnStart");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x29
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.BecomeChildOfTargetOnStart
  // [TokenAttribute] Offset: FFFFFFFF
  class BecomeChildOfTargetOnStart : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.Transform _target
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Transform* target;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private System.Boolean _keepWorldPosition
    // Size: 0x1
    // Offset: 0x28
    bool keepWorldPosition;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private UnityEngine.Transform _target
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__target();
    // Get instance field reference: private System.Boolean _keepWorldPosition
    [[deprecated("Use field access instead!")]] bool& dyn__keepWorldPosition();
    // protected System.Void Start()
    // Offset: 0x47C551C
    void Start();
    // public System.Void InjectAllChildToTransform(UnityEngine.Transform target)
    // Offset: 0x47C5548
    void InjectAllChildToTransform(::UnityEngine::Transform* target);
    // public System.Void InjectTarget(UnityEngine.Transform target)
    // Offset: 0x47C5550
    void InjectTarget(::UnityEngine::Transform* target);
    // public System.Void InjectOptionalKeepWorldPosition(System.Boolean keepWorldPosition)
    // Offset: 0x47C5558
    void InjectOptionalKeepWorldPosition(bool keepWorldPosition);
    // public System.Void .ctor()
    // Offset: 0x47C5564
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BecomeChildOfTargetOnStart* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::BecomeChildOfTargetOnStart::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BecomeChildOfTargetOnStart*, creationType>()));
    }
  }; // Oculus.Interaction.BecomeChildOfTargetOnStart
  #pragma pack(pop)
  static check_size<sizeof(BecomeChildOfTargetOnStart), 40 + sizeof(bool)> __Oculus_Interaction_BecomeChildOfTargetOnStartSizeCheck;
  static_assert(sizeof(BecomeChildOfTargetOnStart) == 0x29);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::BecomeChildOfTargetOnStart::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::BecomeChildOfTargetOnStart::*)()>(&Oculus::Interaction::BecomeChildOfTargetOnStart::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::BecomeChildOfTargetOnStart*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::BecomeChildOfTargetOnStart::InjectAllChildToTransform
// Il2CppName: InjectAllChildToTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::BecomeChildOfTargetOnStart::*)(::UnityEngine::Transform*)>(&Oculus::Interaction::BecomeChildOfTargetOnStart::InjectAllChildToTransform)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::BecomeChildOfTargetOnStart*), "InjectAllChildToTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::BecomeChildOfTargetOnStart::InjectTarget
// Il2CppName: InjectTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::BecomeChildOfTargetOnStart::*)(::UnityEngine::Transform*)>(&Oculus::Interaction::BecomeChildOfTargetOnStart::InjectTarget)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::BecomeChildOfTargetOnStart*), "InjectTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::BecomeChildOfTargetOnStart::InjectOptionalKeepWorldPosition
// Il2CppName: InjectOptionalKeepWorldPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::BecomeChildOfTargetOnStart::*)(bool)>(&Oculus::Interaction::BecomeChildOfTargetOnStart::InjectOptionalKeepWorldPosition)> {
  static const MethodInfo* get() {
    static auto* keepWorldPosition = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::BecomeChildOfTargetOnStart*), "InjectOptionalKeepWorldPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{keepWorldPosition});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::BecomeChildOfTargetOnStart::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
