// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Oculus.Interaction.Interactable`2
#include "Oculus/Interaction/Interactable_2.hpp"
// Including type: Oculus.Interaction.IPointable
#include "Oculus/Interaction/IPointable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction
namespace Oculus::Interaction {
  // Skipping declaration: <>c because it is already included!
  // Forward declaring type: Interactor`2<TInteractor, TInteractable>
  template<typename TInteractor, typename TInteractable>
  class Interactor_2;
  // Forward declaring type: IPointableElement
  class IPointableElement;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Object because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: PointerInteractable`2<TInteractor, TInteractable>
  template<typename TInteractor, typename TInteractable>
  class PointerInteractable_2;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::Oculus::Interaction::PointerInteractable_2, "Oculus.Interaction", "PointerInteractable`2");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // WARNING Size may be invalid!
  // Autogenerated type: Oculus.Interaction.PointerInteractable`2
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename TInteractor, typename TInteractable>
  class PointerInteractable_2 : public ::Oculus::Interaction::Interactable_2<TInteractor, TInteractable>/*, public ::Oculus::Interaction::IPointable*/ {
    public:
    // Nested type: ::Oculus::Interaction::PointerInteractable_2::$$c<TInteractor, TInteractable>
    class $$c;
    // WARNING Size may be invalid!
    // Autogenerated type: Oculus.Interaction.PointerInteractable`2/<>c
    // [TokenAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: FFFFFFFF
    class $$c : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject {
      public:
      using declaring_type = PointerInteractable_2<TInteractor, TInteractable>*;
      static constexpr std::string_view NESTED_NAME = "<>c";
      static constexpr bool IS_VALUE_TYPE = false;
      // Autogenerated static field getter
      // Get static field: static public readonly Oculus.Interaction.PointerInteractable`2/<>c<TInteractor,TInteractable> <>9
      static typename ::Oculus::Interaction::PointerInteractable_2<TInteractor, TInteractable>::$$c* _get_$$9() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::PointerInteractable_2::$$c::_get_$$9");
        return THROW_UNLESS((il2cpp_utils::GetFieldValue<typename ::Oculus::Interaction::PointerInteractable_2<TInteractor, TInteractable>::$$c*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename PointerInteractable_2<TInteractor, TInteractable>::$$c*>::get(), "<>9")));
      }
      // Autogenerated static field setter
      // Set static field: static public readonly Oculus.Interaction.PointerInteractable`2/<>c<TInteractor,TInteractable> <>9
      static void _set_$$9(typename ::Oculus::Interaction::PointerInteractable_2<TInteractor, TInteractable>::$$c* value) {
        static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::PointerInteractable_2::$$c::_set_$$9");
        THROW_UNLESS((il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename PointerInteractable_2<TInteractor, TInteractable>::$$c*>::get(), "<>9", value)));
      }
      // Autogenerated static field getter
      // Get static field: static public System.Action`1<Oculus.Interaction.PointerEvent> <>9__14_0
      static ::System::Action_1<::Oculus::Interaction::PointerEvent>* _get_$$9__14_0() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::PointerInteractable_2::$$c::_get_$$9__14_0");
        return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Action_1<::Oculus::Interaction::PointerEvent>*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename PointerInteractable_2<TInteractor, TInteractable>::$$c*>::get(), "<>9__14_0")));
      }
      // Autogenerated static field setter
      // Set static field: static public System.Action`1<Oculus.Interaction.PointerEvent> <>9__14_0
      static void _set_$$9__14_0(::System::Action_1<::Oculus::Interaction::PointerEvent>* value) {
        static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::PointerInteractable_2::$$c::_set_$$9__14_0");
        THROW_UNLESS((il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename PointerInteractable_2<TInteractor, TInteractable>::$$c*>::get(), "<>9__14_0", value)));
      }
      // static private System.Void .cctor()
      // Offset: 0xFFFFFFFFFFFFFFFF
      static void _cctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::PointerInteractable_2::$$c::.cctor");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename PointerInteractable_2<TInteractor, TInteractable>::$$c*>::get(), ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFFFFFFFFFF
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename PointerInteractable_2<TInteractor, TInteractable>::$$c* New_ctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::PointerInteractable_2::$$c::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename PointerInteractable_2<TInteractor, TInteractable>::$$c*, creationType>()));
      }
      // System.Void <.ctor>b__14_0(Oculus.Interaction.PointerEvent <p0>)
      // Offset: 0xFFFFFFFFFFFFFFFF
      void $_ctor$b__14_0(::Oculus::Interaction::PointerEvent $p0$) {
        static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::PointerInteractable_2::$$c::<.ctor>b__14_0");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.ctor>b__14_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType($p0$)})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, $p0$);
      }
    }; // Oculus.Interaction.PointerInteractable`2/<>c
    // Could not write size check! Type: Oculus.Interaction.PointerInteractable`2/<>c is generic, or has no fields that are valid for size checks!
    public:
    // private UnityEngine.Object _pointableElement
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::Object* pointableElement;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.IPointableElement <PointableElement>k__BackingField
    // Size: 0x8
    // Offset: 0x0
    ::Oculus::Interaction::IPointableElement* PointableElement;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::IPointableElement*) == 0x8);
    // private System.Action`1<Oculus.Interaction.PointerEvent> WhenPointerEventRaised
    // Size: 0x8
    // Offset: 0x0
    ::System::Action_1<::Oculus::Interaction::PointerEvent>* WhenPointerEventRaised;
    // Field size check
    static_assert(sizeof(::System::Action_1<::Oculus::Interaction::PointerEvent>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::IPointable
    operator ::Oculus::Interaction::IPointable() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::IPointable*>(this);
    }
    // Autogenerated instance field getter
    // Get instance field: private UnityEngine.Object _pointableElement
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__pointableElement() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::PointerInteractable_2::dyn__pointableElement");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_pointableElement"))->offset;
      return *reinterpret_cast<::UnityEngine::Object**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private Oculus.Interaction.IPointableElement <PointableElement>k__BackingField
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::IPointableElement*& dyn_$PointableElement$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::PointerInteractable_2::dyn_$PointableElement$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<PointableElement>k__BackingField"))->offset;
      return *reinterpret_cast<::Oculus::Interaction::IPointableElement**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Action`1<Oculus.Interaction.PointerEvent> WhenPointerEventRaised
    [[deprecated("Use field access instead!")]] ::System::Action_1<::Oculus::Interaction::PointerEvent>*& dyn_WhenPointerEventRaised() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::PointerInteractable_2::dyn_WhenPointerEventRaised");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "WhenPointerEventRaised"))->offset;
      return *reinterpret_cast<::System::Action_1<::Oculus::Interaction::PointerEvent>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public Oculus.Interaction.IPointableElement get_PointableElement()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Oculus::Interaction::IPointableElement* get_PointableElement() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::PointerInteractable_2::get_PointableElement");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_PointableElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::Oculus::Interaction::IPointableElement*, false>(this, ___internal__method);
    }
    // protected System.Void set_PointableElement(Oculus.Interaction.IPointableElement value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_PointableElement(::Oculus::Interaction::IPointableElement* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::PointerInteractable_2::set_PointableElement");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_PointableElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Void add_WhenPointerEventRaised(System.Action`1<Oculus.Interaction.PointerEvent> value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void add_WhenPointerEventRaised(::System::Action_1<::Oculus::Interaction::PointerEvent>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::PointerInteractable_2::add_WhenPointerEventRaised");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::Oculus::Interaction::PointerInteractable_2<TInteractor, TInteractable>*), -1)));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Void remove_WhenPointerEventRaised(System.Action`1<Oculus.Interaction.PointerEvent> value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void remove_WhenPointerEventRaised(::System::Action_1<::Oculus::Interaction::PointerEvent>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::PointerInteractable_2::remove_WhenPointerEventRaised");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::Oculus::Interaction::PointerInteractable_2<TInteractor, TInteractable>*), -1)));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Void PublishPointerEvent(Oculus.Interaction.PointerEvent evt)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void PublishPointerEvent(::Oculus::Interaction::PointerEvent evt) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::PointerInteractable_2::PublishPointerEvent");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PublishPointerEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(evt)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, evt);
    }
    // public System.Void InjectOptionalPointableElement(Oculus.Interaction.IPointableElement pointableElement)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void InjectOptionalPointableElement(::Oculus::Interaction::IPointableElement* pointableElement) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::PointerInteractable_2::InjectOptionalPointableElement");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InjectOptionalPointableElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pointableElement)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, pointableElement);
    }
    // private System.Void <Start>b__10_0()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void $Start$b__10_0() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::PointerInteractable_2::<Start>b__10_0");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__10_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // protected override System.Void Awake()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: Oculus.Interaction.Interactable`2
    // Base method: System.Void Interactable_2::Awake()
    void Awake() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::PointerInteractable_2::Awake");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::Oculus::Interaction::Interactable_2<TInteractor, TInteractable>*), -1)));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // protected override System.Void Start()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: Oculus.Interaction.Interactable`2
    // Base method: System.Void Interactable_2::Start()
    void Start() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::PointerInteractable_2::Start");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::Oculus::Interaction::Interactable_2<TInteractor, TInteractable>*), -1)));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // protected override System.Void OnEnable()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: Oculus.Interaction.Interactable`2
    // Base method: System.Void Interactable_2::OnEnable()
    void OnEnable() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::PointerInteractable_2::OnEnable");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::Oculus::Interaction::Interactable_2<TInteractor, TInteractable>*), -1)));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // protected override System.Void OnDisable()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: Oculus.Interaction.Interactable`2
    // Base method: System.Void Interactable_2::OnDisable()
    void OnDisable() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::PointerInteractable_2::OnDisable");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::Oculus::Interaction::Interactable_2<TInteractor, TInteractable>*), -1)));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // protected System.Void .ctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: Oculus.Interaction.Interactable`2
    // Base method: System.Void Interactable_2::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PointerInteractable_2<TInteractor, TInteractable>* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::PointerInteractable_2::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PointerInteractable_2<TInteractor, TInteractable>*, creationType>()));
    }
  }; // Oculus.Interaction.PointerInteractable`2
  // Could not write size check! Type: Oculus.Interaction.PointerInteractable`2 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
