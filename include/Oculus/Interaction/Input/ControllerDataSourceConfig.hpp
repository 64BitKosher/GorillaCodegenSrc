// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Oculus.Interaction.Input.Handedness
#include "Oculus/Interaction/Input/Handedness.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction::Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: ITrackingToWorldTransformer
  class ITrackingToWorldTransformer;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: ControllerDataSourceConfig
  class ControllerDataSourceConfig;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Input::ControllerDataSourceConfig);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Input::ControllerDataSourceConfig*, "Oculus.Interaction.Input", "ControllerDataSourceConfig");
// Type namespace: Oculus.Interaction.Input
namespace Oculus::Interaction::Input {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.Input.ControllerDataSourceConfig
  // [TokenAttribute] Offset: FFFFFFFF
  class ControllerDataSourceConfig : public ::Il2CppObject {
    public:
    public:
    // private Oculus.Interaction.Input.Handedness <Handedness>k__BackingField
    // Size: 0x4
    // Offset: 0x10
    ::Oculus::Interaction::Input::Handedness Handedness;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::Handedness) == 0x4);
    // Padding between fields: Handedness and: TrackingToWorldTransformer
    char __padding0[0x4] = {};
    // private Oculus.Interaction.Input.ITrackingToWorldTransformer <TrackingToWorldTransformer>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::Oculus::Interaction::Input::ITrackingToWorldTransformer* TrackingToWorldTransformer;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::ITrackingToWorldTransformer*) == 0x8);
    public:
    // Get instance field reference: private Oculus.Interaction.Input.Handedness <Handedness>k__BackingField
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::Handedness& dyn_$Handedness$k__BackingField();
    // Get instance field reference: private Oculus.Interaction.Input.ITrackingToWorldTransformer <TrackingToWorldTransformer>k__BackingField
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::ITrackingToWorldTransformer*& dyn_$TrackingToWorldTransformer$k__BackingField();
    // public Oculus.Interaction.Input.Handedness get_Handedness()
    // Offset: 0x48132F4
    ::Oculus::Interaction::Input::Handedness get_Handedness();
    // public System.Void set_Handedness(Oculus.Interaction.Input.Handedness value)
    // Offset: 0x48132FC
    void set_Handedness(::Oculus::Interaction::Input::Handedness value);
    // public Oculus.Interaction.Input.ITrackingToWorldTransformer get_TrackingToWorldTransformer()
    // Offset: 0x4813304
    ::Oculus::Interaction::Input::ITrackingToWorldTransformer* get_TrackingToWorldTransformer();
    // public System.Void set_TrackingToWorldTransformer(Oculus.Interaction.Input.ITrackingToWorldTransformer value)
    // Offset: 0x481330C
    void set_TrackingToWorldTransformer(::Oculus::Interaction::Input::ITrackingToWorldTransformer* value);
    // public System.Void .ctor()
    // Offset: 0x4813314
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ControllerDataSourceConfig* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Input::ControllerDataSourceConfig::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ControllerDataSourceConfig*, creationType>()));
    }
  }; // Oculus.Interaction.Input.ControllerDataSourceConfig
  #pragma pack(pop)
  static check_size<sizeof(ControllerDataSourceConfig), 24 + sizeof(::Oculus::Interaction::Input::ITrackingToWorldTransformer*)> __Oculus_Interaction_Input_ControllerDataSourceConfigSizeCheck;
  static_assert(sizeof(ControllerDataSourceConfig) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Input::ControllerDataSourceConfig::get_Handedness
// Il2CppName: get_Handedness
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Input::Handedness (Oculus::Interaction::Input::ControllerDataSourceConfig::*)()>(&Oculus::Interaction::Input::ControllerDataSourceConfig::get_Handedness)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::ControllerDataSourceConfig*), "get_Handedness", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::ControllerDataSourceConfig::set_Handedness
// Il2CppName: set_Handedness
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::ControllerDataSourceConfig::*)(::Oculus::Interaction::Input::Handedness)>(&Oculus::Interaction::Input::ControllerDataSourceConfig::set_Handedness)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "Handedness")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::ControllerDataSourceConfig*), "set_Handedness", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::ControllerDataSourceConfig::get_TrackingToWorldTransformer
// Il2CppName: get_TrackingToWorldTransformer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Input::ITrackingToWorldTransformer* (Oculus::Interaction::Input::ControllerDataSourceConfig::*)()>(&Oculus::Interaction::Input::ControllerDataSourceConfig::get_TrackingToWorldTransformer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::ControllerDataSourceConfig*), "get_TrackingToWorldTransformer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::ControllerDataSourceConfig::set_TrackingToWorldTransformer
// Il2CppName: set_TrackingToWorldTransformer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::ControllerDataSourceConfig::*)(::Oculus::Interaction::Input::ITrackingToWorldTransformer*)>(&Oculus::Interaction::Input::ControllerDataSourceConfig::set_TrackingToWorldTransformer)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "ITrackingToWorldTransformer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::ControllerDataSourceConfig*), "set_TrackingToWorldTransformer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::ControllerDataSourceConfig::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
