// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Oculus.Interaction.Input.OneEuroFilter
#include "Oculus/Interaction/Input/OneEuroFilter.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Input::OneEuroFilter::LowPassFilter);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Input::OneEuroFilter::LowPassFilter*, "Oculus.Interaction.Input", "OneEuroFilter/LowPassFilter");
// Type namespace: Oculus.Interaction.Input
namespace Oculus::Interaction::Input {
  // Size: 0x1C
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.Input.OneEuroFilter/LowPassFilter
  // [TokenAttribute] Offset: FFFFFFFF
  class OneEuroFilter::LowPassFilter : public ::Il2CppObject {
    public:
    public:
    // private System.Boolean _isFirstUpdate
    // Size: 0x1
    // Offset: 0x10
    bool isFirstUpdate;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isFirstUpdate and: hatx
    char __padding0[0x3] = {};
    // private System.Single _hatx
    // Size: 0x4
    // Offset: 0x14
    float hatx;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _hatxprev
    // Size: 0x4
    // Offset: 0x18
    float hatxprev;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: private System.Boolean _isFirstUpdate
    [[deprecated("Use field access instead!")]] bool& dyn__isFirstUpdate();
    // Get instance field reference: private System.Single _hatx
    [[deprecated("Use field access instead!")]] float& dyn__hatx();
    // Get instance field reference: private System.Single _hatxprev
    [[deprecated("Use field access instead!")]] float& dyn__hatxprev();
    // public System.Single get_PrevValue()
    // Offset: 0x481F178
    float get_PrevValue();
    // public System.Void .ctor()
    // Offset: 0x481EBB0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OneEuroFilter::LowPassFilter* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Input::OneEuroFilter::LowPassFilter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OneEuroFilter::LowPassFilter*, creationType>()));
    }
    // public System.Void Reset()
    // Offset: 0x481ED94
    void Reset();
    // public System.Single Filter(System.Single x, System.Single alpha)
    // Offset: 0x481ED24
    float Filter(float x, float alpha);
  }; // Oculus.Interaction.Input.OneEuroFilter/LowPassFilter
  #pragma pack(pop)
  static check_size<sizeof(OneEuroFilter::LowPassFilter), 24 + sizeof(float)> __Oculus_Interaction_Input_OneEuroFilter_LowPassFilterSizeCheck;
  static_assert(sizeof(OneEuroFilter::LowPassFilter) == 0x1C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Input::OneEuroFilter::LowPassFilter::get_PrevValue
// Il2CppName: get_PrevValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::Input::OneEuroFilter::LowPassFilter::*)()>(&Oculus::Interaction::Input::OneEuroFilter::LowPassFilter::get_PrevValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::OneEuroFilter::LowPassFilter*), "get_PrevValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::OneEuroFilter::LowPassFilter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Interaction::Input::OneEuroFilter::LowPassFilter::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::OneEuroFilter::LowPassFilter::*)()>(&Oculus::Interaction::Input::OneEuroFilter::LowPassFilter::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::OneEuroFilter::LowPassFilter*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::OneEuroFilter::LowPassFilter::Filter
// Il2CppName: Filter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::Input::OneEuroFilter::LowPassFilter::*)(float, float)>(&Oculus::Interaction::Input::OneEuroFilter::LowPassFilter::Filter)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* alpha = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::OneEuroFilter::LowPassFilter*), "Filter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, alpha});
  }
};
