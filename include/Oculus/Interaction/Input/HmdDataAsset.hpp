// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Oculus.Interaction.Input.ICopyFrom`1
#include "Oculus/Interaction/Input/ICopyFrom_1.hpp"
// Including type: UnityEngine.Pose
#include "UnityEngine/Pose.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction::Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: HmdDataSourceConfig
  class HmdDataSourceConfig;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: HmdDataAsset
  class HmdDataAsset;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Input::HmdDataAsset);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Input::HmdDataAsset*, "Oculus.Interaction.Input", "HmdDataAsset");
// Type namespace: Oculus.Interaction.Input
namespace Oculus::Interaction::Input {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.Input.HmdDataAsset
  // [TokenAttribute] Offset: FFFFFFFF
  class HmdDataAsset : public ::Il2CppObject/*, public ::Oculus::Interaction::Input::ICopyFrom_1<::Oculus::Interaction::Input::HmdDataAsset*>*/ {
    public:
    public:
    // public UnityEngine.Pose Root
    // Size: 0x1C
    // Offset: 0x10
    ::UnityEngine::Pose Root;
    // Field size check
    static_assert(sizeof(::UnityEngine::Pose) == 0x1C);
    // public System.Boolean IsTracked
    // Size: 0x1
    // Offset: 0x2C
    bool IsTracked;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: IsTracked and: FrameId
    char __padding1[0x3] = {};
    // public System.Int32 FrameId
    // Size: 0x4
    // Offset: 0x30
    int FrameId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: FrameId and: Config
    char __padding2[0x4] = {};
    // public Oculus.Interaction.Input.HmdDataSourceConfig Config
    // Size: 0x8
    // Offset: 0x38
    ::Oculus::Interaction::Input::HmdDataSourceConfig* Config;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::HmdDataSourceConfig*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::Input::ICopyFrom_1<::Oculus::Interaction::Input::HmdDataAsset*>
    operator ::Oculus::Interaction::Input::ICopyFrom_1<::Oculus::Interaction::Input::HmdDataAsset*>() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::Input::ICopyFrom_1<::Oculus::Interaction::Input::HmdDataAsset*>*>(this);
    }
    // Get instance field reference: public UnityEngine.Pose Root
    [[deprecated("Use field access instead!")]] ::UnityEngine::Pose& dyn_Root();
    // Get instance field reference: public System.Boolean IsTracked
    [[deprecated("Use field access instead!")]] bool& dyn_IsTracked();
    // Get instance field reference: public System.Int32 FrameId
    [[deprecated("Use field access instead!")]] int& dyn_FrameId();
    // Get instance field reference: public Oculus.Interaction.Input.HmdDataSourceConfig Config
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::HmdDataSourceConfig*& dyn_Config();
    // public System.Void CopyFrom(Oculus.Interaction.Input.HmdDataAsset source)
    // Offset: 0x481E708
    void CopyFrom(::Oculus::Interaction::Input::HmdDataAsset* source);
    // public System.Void .ctor()
    // Offset: 0x481E74C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HmdDataAsset* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Input::HmdDataAsset::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HmdDataAsset*, creationType>()));
    }
  }; // Oculus.Interaction.Input.HmdDataAsset
  #pragma pack(pop)
  static check_size<sizeof(HmdDataAsset), 56 + sizeof(::Oculus::Interaction::Input::HmdDataSourceConfig*)> __Oculus_Interaction_Input_HmdDataAssetSizeCheck;
  static_assert(sizeof(HmdDataAsset) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Input::HmdDataAsset::CopyFrom
// Il2CppName: CopyFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::HmdDataAsset::*)(::Oculus::Interaction::Input::HmdDataAsset*)>(&Oculus::Interaction::Input::HmdDataAsset::CopyFrom)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "HmdDataAsset")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::HmdDataAsset*), "CopyFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::HmdDataAsset::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
