// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Oculus.Interaction.Input.DataSource`1
#include "Oculus/Interaction/Input/DataSource_1.hpp"
// Including type: Oculus.Interaction.Input.Handedness
#include "Oculus/Interaction/Input/Handedness.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction::Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: HandDataAsset
  class HandDataAsset;
  // Forward declaring type: IHandSkeletonProvider
  class IHandSkeletonProvider;
  // Forward declaring type: ITrackingToWorldTransformer
  class ITrackingToWorldTransformer;
  // Forward declaring type: HandJointId
  struct HandJointId;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Skipping declaration: Object because it is already included!
}
// Completed forward declares
// Type namespace: Oculus.Interaction.Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: FromHandPrefabDataSource
  class FromHandPrefabDataSource;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Input::FromHandPrefabDataSource);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Input::FromHandPrefabDataSource*, "Oculus.Interaction.Input", "FromHandPrefabDataSource");
// Type namespace: Oculus.Interaction.Input
namespace Oculus::Interaction::Input {
  // WARNING Size may be invalid!
  // Autogenerated type: Oculus.Interaction.Input.FromHandPrefabDataSource
  // [TokenAttribute] Offset: FFFFFFFF
  class FromHandPrefabDataSource : public ::Oculus::Interaction::Input::DataSource_1<::Oculus::Interaction::Input::HandDataAsset*> {
    public:
    public:
    // private readonly Oculus.Interaction.Input.HandDataAsset _handDataAsset
    // Size: 0x8
    // Offset: 0x48
    ::Oculus::Interaction::Input::HandDataAsset* handDataAsset;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::HandDataAsset*) == 0x8);
    // private Oculus.Interaction.Input.Handedness _handedness
    // Size: 0x4
    // Offset: 0x50
    ::Oculus::Interaction::Input::Handedness handedness;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::Handedness) == 0x4);
    // private System.Boolean _hidePrefabOnStart
    // Size: 0x1
    // Offset: 0x54
    bool hidePrefabOnStart;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Collections.Generic.List`1<UnityEngine.Transform> _jointTransforms
    // Size: 0x8
    // Offset: 0x58
    ::System::Collections::Generic::List_1<::UnityEngine::Transform*>* jointTransforms;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Transform*>*) == 0x8);
    // private UnityEngine.Object _handSkeletonProvider
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::Object* handSkeletonProvider;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.Input.IHandSkeletonProvider HandSkeletonProvider
    // Size: 0x8
    // Offset: 0x68
    ::Oculus::Interaction::Input::IHandSkeletonProvider* HandSkeletonProvider;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::IHandSkeletonProvider*) == 0x8);
    // private UnityEngine.Object _trackingToWorldTransformer
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::Object* trackingToWorldTransformer;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.Input.ITrackingToWorldTransformer TrackingToWorldTransformer
    // Size: 0x8
    // Offset: 0x78
    ::Oculus::Interaction::Input::ITrackingToWorldTransformer* TrackingToWorldTransformer;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::ITrackingToWorldTransformer*) == 0x8);
    public:
    // Get instance field reference: private readonly Oculus.Interaction.Input.HandDataAsset _handDataAsset
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::HandDataAsset*& dyn__handDataAsset();
    // Get instance field reference: private Oculus.Interaction.Input.Handedness _handedness
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::Handedness& dyn__handedness();
    // Get instance field reference: private System.Boolean _hidePrefabOnStart
    [[deprecated("Use field access instead!")]] bool& dyn__hidePrefabOnStart();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Transform> _jointTransforms
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Transform*>*& dyn__jointTransforms();
    // Get instance field reference: private UnityEngine.Object _handSkeletonProvider
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__handSkeletonProvider();
    // Get instance field reference: private Oculus.Interaction.Input.IHandSkeletonProvider HandSkeletonProvider
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::IHandSkeletonProvider*& dyn_HandSkeletonProvider();
    // Get instance field reference: private UnityEngine.Object _trackingToWorldTransformer
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__trackingToWorldTransformer();
    // Get instance field reference: private Oculus.Interaction.Input.ITrackingToWorldTransformer TrackingToWorldTransformer
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::ITrackingToWorldTransformer*& dyn_TrackingToWorldTransformer();
    // protected Oculus.Interaction.Input.HandDataAsset get_DataAsset()
    // Offset: 0x4816930
    ::Oculus::Interaction::Input::HandDataAsset* get_DataAsset();
    // public Oculus.Interaction.Input.Handedness get_Handedness()
    // Offset: 0x4816938
    ::Oculus::Interaction::Input::Handedness get_Handedness();
    // public System.Collections.Generic.List`1<UnityEngine.Transform> get_JointTransforms()
    // Offset: 0x4816940
    ::System::Collections::Generic::List_1<::UnityEngine::Transform*>* get_JointTransforms();
    // protected System.Void Awake()
    // Offset: 0x4816948
    void Awake();
    // public UnityEngine.Transform GetTransformFor(Oculus.Interaction.Input.HandJointId jointId)
    // Offset: 0x4816D7C
    ::UnityEngine::Transform* GetTransformFor(::Oculus::Interaction::Input::HandJointId jointId);
    // protected override System.Void Start()
    // Offset: 0x4816A5C
    // Implemented from: Oculus.Interaction.Input.DataSource`1
    // Base method: System.Void DataSource_1::Start()
    void Start();
    // protected override System.Void UpdateData()
    // Offset: 0x4816BE0
    // Implemented from: Oculus.Interaction.Input.DataSource`1
    // Base method: System.Void DataSource_1::UpdateData()
    void UpdateData();
    // public System.Void .ctor()
    // Offset: 0x4816DD4
    // Implemented from: Oculus.Interaction.Input.DataSource`1
    // Base method: System.Void DataSource_1::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FromHandPrefabDataSource* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Input::FromHandPrefabDataSource::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FromHandPrefabDataSource*, creationType>()));
    }
  }; // Oculus.Interaction.Input.FromHandPrefabDataSource
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromHandPrefabDataSource::get_DataAsset
// Il2CppName: get_DataAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Input::HandDataAsset* (Oculus::Interaction::Input::FromHandPrefabDataSource::*)()>(&Oculus::Interaction::Input::FromHandPrefabDataSource::get_DataAsset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromHandPrefabDataSource*), "get_DataAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromHandPrefabDataSource::get_Handedness
// Il2CppName: get_Handedness
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Input::Handedness (Oculus::Interaction::Input::FromHandPrefabDataSource::*)()>(&Oculus::Interaction::Input::FromHandPrefabDataSource::get_Handedness)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromHandPrefabDataSource*), "get_Handedness", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromHandPrefabDataSource::get_JointTransforms
// Il2CppName: get_JointTransforms
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::Transform*>* (Oculus::Interaction::Input::FromHandPrefabDataSource::*)()>(&Oculus::Interaction::Input::FromHandPrefabDataSource::get_JointTransforms)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromHandPrefabDataSource*), "get_JointTransforms", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromHandPrefabDataSource::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::FromHandPrefabDataSource::*)()>(&Oculus::Interaction::Input::FromHandPrefabDataSource::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromHandPrefabDataSource*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromHandPrefabDataSource::GetTransformFor
// Il2CppName: GetTransformFor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (Oculus::Interaction::Input::FromHandPrefabDataSource::*)(::Oculus::Interaction::Input::HandJointId)>(&Oculus::Interaction::Input::FromHandPrefabDataSource::GetTransformFor)> {
  static const MethodInfo* get() {
    static auto* jointId = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "HandJointId")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromHandPrefabDataSource*), "GetTransformFor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{jointId});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromHandPrefabDataSource::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::FromHandPrefabDataSource::*)()>(&Oculus::Interaction::Input::FromHandPrefabDataSource::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromHandPrefabDataSource*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromHandPrefabDataSource::UpdateData
// Il2CppName: UpdateData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::FromHandPrefabDataSource::*)()>(&Oculus::Interaction::Input::FromHandPrefabDataSource::UpdateData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromHandPrefabDataSource*), "UpdateData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromHandPrefabDataSource::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
