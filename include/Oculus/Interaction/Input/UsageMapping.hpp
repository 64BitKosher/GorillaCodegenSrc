// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Oculus.Interaction.Input.ControllerButtonUsage
#include "Oculus/Interaction/Input/ControllerButtonUsage.hpp"
// Including type: OVRInput/Touch
#include "GlobalNamespace/OVRInput_Touch.hpp"
// Including type: OVRInput/Button
#include "GlobalNamespace/OVRInput_Button.hpp"
// Completed includes
// Type namespace: Oculus.Interaction.Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: UsageMapping
  struct UsageMapping;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Input::UsageMapping, "Oculus.Interaction.Input", "UsageMapping");
// Type namespace: Oculus.Interaction.Input
namespace Oculus::Interaction::Input {
  // Size: 0xC
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Oculus.Interaction.Input.UsageMapping
  // [TokenAttribute] Offset: FFFFFFFF
  struct UsageMapping/*, public ::System::ValueType*/ {
    public:
    public:
    // private readonly Oculus.Interaction.Input.ControllerButtonUsage <Usage>k__BackingField
    // Size: 0x4
    // Offset: 0x0
    ::Oculus::Interaction::Input::ControllerButtonUsage Usage;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::ControllerButtonUsage) == 0x4);
    // private readonly OVRInput/Touch <Touch>k__BackingField
    // Size: 0x4
    // Offset: 0x4
    ::GlobalNamespace::OVRInput::Touch Touch;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRInput::Touch) == 0x4);
    // private readonly OVRInput/Button <Button>k__BackingField
    // Size: 0x4
    // Offset: 0x8
    ::GlobalNamespace::OVRInput::Button Button;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRInput::Button) == 0x4);
    public:
    // Creating value type constructor for type: UsageMapping
    constexpr UsageMapping(::Oculus::Interaction::Input::ControllerButtonUsage Usage_ = {}, ::GlobalNamespace::OVRInput::Touch Touch_ = {}, ::GlobalNamespace::OVRInput::Button Button_ = {}) noexcept : Usage{Usage_}, Touch{Touch_}, Button{Button_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private readonly Oculus.Interaction.Input.ControllerButtonUsage <Usage>k__BackingField
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::ControllerButtonUsage& dyn_$Usage$k__BackingField();
    // Get instance field reference: private readonly OVRInput/Touch <Touch>k__BackingField
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRInput::Touch& dyn_$Touch$k__BackingField();
    // Get instance field reference: private readonly OVRInput/Button <Button>k__BackingField
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRInput::Button& dyn_$Button$k__BackingField();
    // public System.Void .ctor(Oculus.Interaction.Input.ControllerButtonUsage usage, OVRInput/Touch touch)
    // Offset: 0x478F240
    UsageMapping(::Oculus::Interaction::Input::ControllerButtonUsage usage, ::GlobalNamespace::OVRInput::Touch touch);
    // public System.Void .ctor(Oculus.Interaction.Input.ControllerButtonUsage usage, OVRInput/Button button)
    // Offset: 0x478F24C
    UsageMapping(::Oculus::Interaction::Input::ControllerButtonUsage usage, ::GlobalNamespace::OVRInput::Button button);
    // public System.Boolean get_IsTouch()
    // Offset: 0x478F258
    bool get_IsTouch();
    // public System.Boolean get_IsButton()
    // Offset: 0x478F268
    bool get_IsButton();
    // public Oculus.Interaction.Input.ControllerButtonUsage get_Usage()
    // Offset: 0x478F278
    ::Oculus::Interaction::Input::ControllerButtonUsage get_Usage();
    // public OVRInput/Touch get_Touch()
    // Offset: 0x478F280
    ::GlobalNamespace::OVRInput::Touch get_Touch();
    // public OVRInput/Button get_Button()
    // Offset: 0x478F288
    ::GlobalNamespace::OVRInput::Button get_Button();
  }; // Oculus.Interaction.Input.UsageMapping
  #pragma pack(pop)
  static check_size<sizeof(UsageMapping), 8 + sizeof(::GlobalNamespace::OVRInput::Button)> __Oculus_Interaction_Input_UsageMappingSizeCheck;
  static_assert(sizeof(UsageMapping) == 0xC);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Input::UsageMapping::UsageMapping
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Interaction::Input::UsageMapping::UsageMapping
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Interaction::Input::UsageMapping::get_IsTouch
// Il2CppName: get_IsTouch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Input::UsageMapping::*)()>(&Oculus::Interaction::Input::UsageMapping::get_IsTouch)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::UsageMapping), "get_IsTouch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::UsageMapping::get_IsButton
// Il2CppName: get_IsButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Input::UsageMapping::*)()>(&Oculus::Interaction::Input::UsageMapping::get_IsButton)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::UsageMapping), "get_IsButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::UsageMapping::get_Usage
// Il2CppName: get_Usage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Input::ControllerButtonUsage (Oculus::Interaction::Input::UsageMapping::*)()>(&Oculus::Interaction::Input::UsageMapping::get_Usage)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::UsageMapping), "get_Usage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::UsageMapping::get_Touch
// Il2CppName: get_Touch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRInput::Touch (Oculus::Interaction::Input::UsageMapping::*)()>(&Oculus::Interaction::Input::UsageMapping::get_Touch)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::UsageMapping), "get_Touch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::UsageMapping::get_Button
// Il2CppName: get_Button
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRInput::Button (Oculus::Interaction::Input::UsageMapping::*)()>(&Oculus::Interaction::Input::UsageMapping::get_Button)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::UsageMapping), "get_Button", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
