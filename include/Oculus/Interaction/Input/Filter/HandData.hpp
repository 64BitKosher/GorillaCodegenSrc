// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Pose
  struct Pose;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.Input.Filter
namespace Oculus::Interaction::Input::Filter {
  // Forward declaring type: HandData
  struct HandData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Input::Filter::HandData, "Oculus.Interaction.Input.Filter", "HandData");
// Type namespace: Oculus.Interaction.Input.Filter
namespace Oculus::Interaction::Input::Filter {
  // Size: 0x24
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Oculus.Interaction.Input.Filter.HandData
  // [TokenAttribute] Offset: FFFFFFFF
  struct HandData/*, public ::System::ValueType*/ {
    public:
    public:
    // private System.Single[] jointValues
    // Size: 0x8
    // Offset: 0x0
    ::ArrayW<float> jointValues;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // private System.Single _rootRotX
    // Size: 0x4
    // Offset: 0x8
    float rootRotX;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _rootRotY
    // Size: 0x4
    // Offset: 0xC
    float rootRotY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _rootRotZ
    // Size: 0x4
    // Offset: 0x10
    float rootRotZ;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _rootRotW
    // Size: 0x4
    // Offset: 0x14
    float rootRotW;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _rootPosX
    // Size: 0x4
    // Offset: 0x18
    float rootPosX;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _rootPosY
    // Size: 0x4
    // Offset: 0x1C
    float rootPosY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _rootPosZ
    // Size: 0x4
    // Offset: 0x20
    float rootPosZ;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating value type constructor for type: HandData
    constexpr HandData(::ArrayW<float> jointValues_ = ::ArrayW<float>(static_cast<void*>(nullptr)), float rootRotX_ = {}, float rootRotY_ = {}, float rootRotZ_ = {}, float rootRotW_ = {}, float rootPosX_ = {}, float rootPosY_ = {}, float rootPosZ_ = {}) noexcept : jointValues{jointValues_}, rootRotX{rootRotX_}, rootRotY{rootRotY_}, rootRotZ{rootRotZ_}, rootRotW{rootRotW_}, rootPosX{rootPosX_}, rootPosY{rootPosY_}, rootPosZ{rootPosZ_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // static field const value: static private System.Int32 NumHandJoints
    static constexpr const int NumHandJoints = 24;
    // Get static field: static private System.Int32 NumHandJoints
    static int _get_NumHandJoints();
    // Set static field: static private System.Int32 NumHandJoints
    static void _set_NumHandJoints(int value);
    // Get instance field reference: private System.Single[] jointValues
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_jointValues();
    // Get instance field reference: private System.Single _rootRotX
    [[deprecated("Use field access instead!")]] float& dyn__rootRotX();
    // Get instance field reference: private System.Single _rootRotY
    [[deprecated("Use field access instead!")]] float& dyn__rootRotY();
    // Get instance field reference: private System.Single _rootRotZ
    [[deprecated("Use field access instead!")]] float& dyn__rootRotZ();
    // Get instance field reference: private System.Single _rootRotW
    [[deprecated("Use field access instead!")]] float& dyn__rootRotW();
    // Get instance field reference: private System.Single _rootPosX
    [[deprecated("Use field access instead!")]] float& dyn__rootPosX();
    // Get instance field reference: private System.Single _rootPosY
    [[deprecated("Use field access instead!")]] float& dyn__rootPosY();
    // Get instance field reference: private System.Single _rootPosZ
    [[deprecated("Use field access instead!")]] float& dyn__rootPosZ();
    // public System.Void Init()
    // Offset: 0x481F5A8
    void Init();
    // public System.Void SetData(UnityEngine.Quaternion[] joints, UnityEngine.Pose root)
    // Offset: 0x481F600
    void SetData(::ArrayW<::UnityEngine::Quaternion> joints, ::UnityEngine::Pose root);
    // public System.Void GetData(ref UnityEngine.Quaternion[] joints, out UnityEngine.Pose root)
    // Offset: 0x481F6D4
    void GetData(ByRef<::ArrayW<::UnityEngine::Quaternion>> joints, ByRef<::UnityEngine::Pose> root);
  }; // Oculus.Interaction.Input.Filter.HandData
  #pragma pack(pop)
  static check_size<sizeof(HandData), 32 + sizeof(float)> __Oculus_Interaction_Input_Filter_HandDataSizeCheck;
  static_assert(sizeof(HandData) == 0x24);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Input::Filter::HandData::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::Filter::HandData::*)()>(&Oculus::Interaction::Input::Filter::HandData::Init)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::Filter::HandData), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::Filter::HandData::SetData
// Il2CppName: SetData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::Filter::HandData::*)(::ArrayW<::UnityEngine::Quaternion>, ::UnityEngine::Pose)>(&Oculus::Interaction::Input::Filter::HandData::SetData)> {
  static const MethodInfo* get() {
    static auto* joints = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion"), 1)->byval_arg;
    static auto* root = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::Filter::HandData), "SetData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{joints, root});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::Filter::HandData::GetData
// Il2CppName: GetData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::Filter::HandData::*)(ByRef<::ArrayW<::UnityEngine::Quaternion>>, ByRef<::UnityEngine::Pose>)>(&Oculus::Interaction::Input::Filter::HandData::GetData)> {
  static const MethodInfo* get() {
    static auto* joints = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion"), 1)->this_arg;
    static auto* root = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::Filter::HandData), "GetData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{joints, root});
  }
};
