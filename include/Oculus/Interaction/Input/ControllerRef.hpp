// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Oculus.Interaction.Input.IController
#include "Oculus/Interaction/Input/IController.hpp"
// Including type: Oculus.Interaction.IActiveState
#include "Oculus/Interaction/IActiveState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Object because it is already included!
  // Forward declaring type: Pose
  struct Pose;
}
// Forward declaring namespace: Oculus::Interaction::Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: Handedness
  struct Handedness;
  // Forward declaring type: ControllerButtonUsage
  struct ControllerButtonUsage;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: ControllerRef
  class ControllerRef;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Input::ControllerRef);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Input::ControllerRef*, "Oculus.Interaction.Input", "ControllerRef");
// Type namespace: Oculus.Interaction.Input
namespace Oculus::Interaction::Input {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.Input.ControllerRef
  // [TokenAttribute] Offset: FFFFFFFF
  class ControllerRef : public ::UnityEngine::MonoBehaviour/*, public ::Oculus::Interaction::Input::IController, public ::Oculus::Interaction::IActiveState*/ {
    public:
    public:
    // private UnityEngine.Object _controller
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Object* controller;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.Input.IController Controller
    // Size: 0x8
    // Offset: 0x28
    ::Oculus::Interaction::Input::IController* Controller;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::IController*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::Input::IController
    operator ::Oculus::Interaction::Input::IController() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::Input::IController*>(this);
    }
    // Creating interface conversion operator: operator ::Oculus::Interaction::IActiveState
    operator ::Oculus::Interaction::IActiveState() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::IActiveState*>(this);
    }
    // Get instance field reference: private UnityEngine.Object _controller
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__controller();
    // Get instance field reference: private Oculus.Interaction.Input.IController Controller
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::IController*& dyn_Controller();
    // protected System.Void Awake()
    // Offset: 0x481331C
    void Awake();
    // protected System.Void Start()
    // Offset: 0x4813384
    void Start();
    // public Oculus.Interaction.Input.Handedness get_Handedness()
    // Offset: 0x4813388
    ::Oculus::Interaction::Input::Handedness get_Handedness();
    // public System.Boolean get_IsConnected()
    // Offset: 0x4813428
    bool get_IsConnected();
    // public System.Boolean get_IsPoseValid()
    // Offset: 0x48134CC
    bool get_IsPoseValid();
    // public System.Void add_WhenUpdated(System.Action value)
    // Offset: 0x4813570
    void add_WhenUpdated(::System::Action* value);
    // public System.Void remove_WhenUpdated(System.Action value)
    // Offset: 0x481361C
    void remove_WhenUpdated(::System::Action* value);
    // public System.Boolean get_Active()
    // Offset: 0x48136C8
    bool get_Active();
    // public System.Boolean TryGetPose(out UnityEngine.Pose pose)
    // Offset: 0x48136CC
    bool TryGetPose(ByRef<::UnityEngine::Pose> pose);
    // public System.Boolean TryGetPointerPose(out UnityEngine.Pose pose)
    // Offset: 0x4813778
    bool TryGetPointerPose(ByRef<::UnityEngine::Pose> pose);
    // public System.Single get_Scale()
    // Offset: 0x4813824
    float get_Scale();
    // public System.Boolean IsButtonUsageAnyActive(Oculus.Interaction.Input.ControllerButtonUsage buttonUsage)
    // Offset: 0x48138C8
    bool IsButtonUsageAnyActive(::Oculus::Interaction::Input::ControllerButtonUsage buttonUsage);
    // public System.Boolean IsButtonUsageAllActive(Oculus.Interaction.Input.ControllerButtonUsage buttonUsage)
    // Offset: 0x4813974
    bool IsButtonUsageAllActive(::Oculus::Interaction::Input::ControllerButtonUsage buttonUsage);
    // public System.Void InjectAllControllerRef(Oculus.Interaction.Input.IController controller)
    // Offset: 0x4813A20
    void InjectAllControllerRef(::Oculus::Interaction::Input::IController* controller);
    // public System.Void InjectController(Oculus.Interaction.Input.IController controller)
    // Offset: 0x4813A24
    void InjectController(::Oculus::Interaction::Input::IController* controller);
    // public System.Void .ctor()
    // Offset: 0x4813AF4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ControllerRef* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Input::ControllerRef::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ControllerRef*, creationType>()));
    }
  }; // Oculus.Interaction.Input.ControllerRef
  #pragma pack(pop)
  static check_size<sizeof(ControllerRef), 40 + sizeof(::Oculus::Interaction::Input::IController*)> __Oculus_Interaction_Input_ControllerRefSizeCheck;
  static_assert(sizeof(ControllerRef) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Input::ControllerRef::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::ControllerRef::*)()>(&Oculus::Interaction::Input::ControllerRef::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::ControllerRef*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::ControllerRef::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::ControllerRef::*)()>(&Oculus::Interaction::Input::ControllerRef::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::ControllerRef*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::ControllerRef::get_Handedness
// Il2CppName: get_Handedness
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Input::Handedness (Oculus::Interaction::Input::ControllerRef::*)()>(&Oculus::Interaction::Input::ControllerRef::get_Handedness)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::ControllerRef*), "get_Handedness", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::ControllerRef::get_IsConnected
// Il2CppName: get_IsConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Input::ControllerRef::*)()>(&Oculus::Interaction::Input::ControllerRef::get_IsConnected)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::ControllerRef*), "get_IsConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::ControllerRef::get_IsPoseValid
// Il2CppName: get_IsPoseValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Input::ControllerRef::*)()>(&Oculus::Interaction::Input::ControllerRef::get_IsPoseValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::ControllerRef*), "get_IsPoseValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::ControllerRef::add_WhenUpdated
// Il2CppName: add_WhenUpdated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::ControllerRef::*)(::System::Action*)>(&Oculus::Interaction::Input::ControllerRef::add_WhenUpdated)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::ControllerRef*), "add_WhenUpdated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::ControllerRef::remove_WhenUpdated
// Il2CppName: remove_WhenUpdated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::ControllerRef::*)(::System::Action*)>(&Oculus::Interaction::Input::ControllerRef::remove_WhenUpdated)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::ControllerRef*), "remove_WhenUpdated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::ControllerRef::get_Active
// Il2CppName: get_Active
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Input::ControllerRef::*)()>(&Oculus::Interaction::Input::ControllerRef::get_Active)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::ControllerRef*), "get_Active", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::ControllerRef::TryGetPose
// Il2CppName: TryGetPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Input::ControllerRef::*)(ByRef<::UnityEngine::Pose>)>(&Oculus::Interaction::Input::ControllerRef::TryGetPose)> {
  static const MethodInfo* get() {
    static auto* pose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::ControllerRef*), "TryGetPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pose});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::ControllerRef::TryGetPointerPose
// Il2CppName: TryGetPointerPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Input::ControllerRef::*)(ByRef<::UnityEngine::Pose>)>(&Oculus::Interaction::Input::ControllerRef::TryGetPointerPose)> {
  static const MethodInfo* get() {
    static auto* pose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::ControllerRef*), "TryGetPointerPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pose});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::ControllerRef::get_Scale
// Il2CppName: get_Scale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::Input::ControllerRef::*)()>(&Oculus::Interaction::Input::ControllerRef::get_Scale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::ControllerRef*), "get_Scale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::ControllerRef::IsButtonUsageAnyActive
// Il2CppName: IsButtonUsageAnyActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Input::ControllerRef::*)(::Oculus::Interaction::Input::ControllerButtonUsage)>(&Oculus::Interaction::Input::ControllerRef::IsButtonUsageAnyActive)> {
  static const MethodInfo* get() {
    static auto* buttonUsage = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "ControllerButtonUsage")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::ControllerRef*), "IsButtonUsageAnyActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buttonUsage});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::ControllerRef::IsButtonUsageAllActive
// Il2CppName: IsButtonUsageAllActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Input::ControllerRef::*)(::Oculus::Interaction::Input::ControllerButtonUsage)>(&Oculus::Interaction::Input::ControllerRef::IsButtonUsageAllActive)> {
  static const MethodInfo* get() {
    static auto* buttonUsage = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "ControllerButtonUsage")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::ControllerRef*), "IsButtonUsageAllActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buttonUsage});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::ControllerRef::InjectAllControllerRef
// Il2CppName: InjectAllControllerRef
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::ControllerRef::*)(::Oculus::Interaction::Input::IController*)>(&Oculus::Interaction::Input::ControllerRef::InjectAllControllerRef)> {
  static const MethodInfo* get() {
    static auto* controller = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::ControllerRef*), "InjectAllControllerRef", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controller});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::ControllerRef::InjectController
// Il2CppName: InjectController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::ControllerRef::*)(::Oculus::Interaction::Input::IController*)>(&Oculus::Interaction::Input::ControllerRef::InjectController)> {
  static const MethodInfo* get() {
    static auto* controller = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::ControllerRef*), "InjectController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controller});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::ControllerRef::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
