// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Oculus.Interaction.Input.DataModifier`1
#include "Oculus/Interaction/Input/DataModifier_1.hpp"
// Including type: Oculus.Interaction.Input.IController
#include "Oculus/Interaction/Input/IController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction::Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: ControllerDataAsset
  class ControllerDataAsset;
  // Forward declaring type: Handedness
  struct Handedness;
  // Forward declaring type: ITrackingToWorldTransformer
  class ITrackingToWorldTransformer;
  // Forward declaring type: ControllerButtonUsage
  struct ControllerButtonUsage;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Pose
  struct Pose;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: Controller
  class Controller;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Input::Controller);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Input::Controller*, "Oculus.Interaction.Input", "Controller");
// Type namespace: Oculus.Interaction.Input
namespace Oculus::Interaction::Input {
  // WARNING Size may be invalid!
  // Autogenerated type: Oculus.Interaction.Input.Controller
  // [TokenAttribute] Offset: FFFFFFFF
  class Controller : public ::Oculus::Interaction::Input::DataModifier_1<::Oculus::Interaction::Input::ControllerDataAsset*>/*, public ::Oculus::Interaction::Input::IController*/ {
    public:
    // Nested type: ::Oculus::Interaction::Input::Controller::$$c
    class $$c;
    public:
    // private System.Action WhenUpdated
    // Size: 0x8
    // Offset: 0x70
    ::System::Action* WhenUpdated;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::Input::IController
    operator ::Oculus::Interaction::Input::IController() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::Input::IController*>(this);
    }
    // Get instance field reference: private System.Action WhenUpdated
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_WhenUpdated();
    // public Oculus.Interaction.Input.Handedness get_Handedness()
    // Offset: 0x4812560
    ::Oculus::Interaction::Input::Handedness get_Handedness();
    // public System.Boolean get_IsConnected()
    // Offset: 0x48125C0
    bool get_IsConnected();
    // public System.Boolean get_IsPoseValid()
    // Offset: 0x4812630
    bool get_IsPoseValid();
    // public System.Boolean get_IsPointerPoseValid()
    // Offset: 0x48126A0
    bool get_IsPointerPoseValid();
    // public System.Void add_WhenUpdated(System.Action value)
    // Offset: 0x4812710
    void add_WhenUpdated(::System::Action* value);
    // public System.Void remove_WhenUpdated(System.Action value)
    // Offset: 0x48127AC
    void remove_WhenUpdated(::System::Action* value);
    // private Oculus.Interaction.Input.ITrackingToWorldTransformer get_TrackingToWorldTransformer()
    // Offset: 0x4812848
    ::Oculus::Interaction::Input::ITrackingToWorldTransformer* get_TrackingToWorldTransformer();
    // public System.Single get_Scale()
    // Offset: 0x48128A8
    float get_Scale();
    // public System.Boolean IsButtonUsageAnyActive(Oculus.Interaction.Input.ControllerButtonUsage buttonUsage)
    // Offset: 0x4812974
    bool IsButtonUsageAnyActive(::Oculus::Interaction::Input::ControllerButtonUsage buttonUsage);
    // public System.Boolean IsButtonUsageAllActive(Oculus.Interaction.Input.ControllerButtonUsage buttonUsage)
    // Offset: 0x48129F0
    bool IsButtonUsageAllActive(::Oculus::Interaction::Input::ControllerButtonUsage buttonUsage);
    // public System.Boolean TryGetPose(out UnityEngine.Pose pose)
    // Offset: 0x4812A6C
    bool TryGetPose(ByRef<::UnityEngine::Pose> pose);
    // public System.Boolean TryGetPointerPose(out UnityEngine.Pose pose)
    // Offset: 0x4812C10
    bool TryGetPointerPose(ByRef<::UnityEngine::Pose> pose);
    // protected System.Void Apply(Oculus.Interaction.Input.ControllerDataAsset data)
    // Offset: 0x4812E38
    void Apply(::Oculus::Interaction::Input::ControllerDataAsset* data);
    // public override System.Void MarkInputDataRequiresUpdate()
    // Offset: 0x4812DB4
    // Implemented from: Oculus.Interaction.Input.DataSource`1
    // Base method: System.Void DataSource_1::MarkInputDataRequiresUpdate()
    void MarkInputDataRequiresUpdate();
    // public System.Void .ctor()
    // Offset: 0x4812E3C
    // Implemented from: Oculus.Interaction.Input.DataModifier`1
    // Base method: System.Void DataModifier_1::.ctor()
    // Base method: System.Void DataSource_1::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Controller* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Input::Controller::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Controller*, creationType>()));
    }
  }; // Oculus.Interaction.Input.Controller
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Input::Controller::get_Handedness
// Il2CppName: get_Handedness
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Input::Handedness (Oculus::Interaction::Input::Controller::*)()>(&Oculus::Interaction::Input::Controller::get_Handedness)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::Controller*), "get_Handedness", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::Controller::get_IsConnected
// Il2CppName: get_IsConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Input::Controller::*)()>(&Oculus::Interaction::Input::Controller::get_IsConnected)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::Controller*), "get_IsConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::Controller::get_IsPoseValid
// Il2CppName: get_IsPoseValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Input::Controller::*)()>(&Oculus::Interaction::Input::Controller::get_IsPoseValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::Controller*), "get_IsPoseValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::Controller::get_IsPointerPoseValid
// Il2CppName: get_IsPointerPoseValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Input::Controller::*)()>(&Oculus::Interaction::Input::Controller::get_IsPointerPoseValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::Controller*), "get_IsPointerPoseValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::Controller::add_WhenUpdated
// Il2CppName: add_WhenUpdated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::Controller::*)(::System::Action*)>(&Oculus::Interaction::Input::Controller::add_WhenUpdated)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::Controller*), "add_WhenUpdated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::Controller::remove_WhenUpdated
// Il2CppName: remove_WhenUpdated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::Controller::*)(::System::Action*)>(&Oculus::Interaction::Input::Controller::remove_WhenUpdated)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::Controller*), "remove_WhenUpdated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::Controller::get_TrackingToWorldTransformer
// Il2CppName: get_TrackingToWorldTransformer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Input::ITrackingToWorldTransformer* (Oculus::Interaction::Input::Controller::*)()>(&Oculus::Interaction::Input::Controller::get_TrackingToWorldTransformer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::Controller*), "get_TrackingToWorldTransformer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::Controller::get_Scale
// Il2CppName: get_Scale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::Input::Controller::*)()>(&Oculus::Interaction::Input::Controller::get_Scale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::Controller*), "get_Scale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::Controller::IsButtonUsageAnyActive
// Il2CppName: IsButtonUsageAnyActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Input::Controller::*)(::Oculus::Interaction::Input::ControllerButtonUsage)>(&Oculus::Interaction::Input::Controller::IsButtonUsageAnyActive)> {
  static const MethodInfo* get() {
    static auto* buttonUsage = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "ControllerButtonUsage")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::Controller*), "IsButtonUsageAnyActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buttonUsage});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::Controller::IsButtonUsageAllActive
// Il2CppName: IsButtonUsageAllActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Input::Controller::*)(::Oculus::Interaction::Input::ControllerButtonUsage)>(&Oculus::Interaction::Input::Controller::IsButtonUsageAllActive)> {
  static const MethodInfo* get() {
    static auto* buttonUsage = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "ControllerButtonUsage")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::Controller*), "IsButtonUsageAllActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buttonUsage});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::Controller::TryGetPose
// Il2CppName: TryGetPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Input::Controller::*)(ByRef<::UnityEngine::Pose>)>(&Oculus::Interaction::Input::Controller::TryGetPose)> {
  static const MethodInfo* get() {
    static auto* pose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::Controller*), "TryGetPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pose});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::Controller::TryGetPointerPose
// Il2CppName: TryGetPointerPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Input::Controller::*)(ByRef<::UnityEngine::Pose>)>(&Oculus::Interaction::Input::Controller::TryGetPointerPose)> {
  static const MethodInfo* get() {
    static auto* pose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::Controller*), "TryGetPointerPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pose});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::Controller::Apply
// Il2CppName: Apply
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::Controller::*)(::Oculus::Interaction::Input::ControllerDataAsset*)>(&Oculus::Interaction::Input::Controller::Apply)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "ControllerDataAsset")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::Controller*), "Apply", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::Controller::MarkInputDataRequiresUpdate
// Il2CppName: MarkInputDataRequiresUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::Controller::*)()>(&Oculus::Interaction::Input::Controller::MarkInputDataRequiresUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::Controller*), "MarkInputDataRequiresUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::Controller::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
