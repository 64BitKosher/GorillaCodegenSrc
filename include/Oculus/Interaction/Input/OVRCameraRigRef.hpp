// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Oculus.Interaction.Input.IOVRCameraRigRef
#include "Oculus/Interaction/Input/IOVRCameraRigRef.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction::Input
namespace Oculus::Interaction::Input {
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: OVRCameraRig
  class OVRCameraRig;
  // Forward declaring type: OVRHand
  class OVRHand;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: OVRCameraRigRef
  class OVRCameraRigRef;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Input::OVRCameraRigRef);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Input::OVRCameraRigRef*, "Oculus.Interaction.Input", "OVRCameraRigRef");
// Type namespace: Oculus.Interaction.Input
namespace Oculus::Interaction::Input {
  // Size: 0x4A
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.Input.OVRCameraRigRef
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultExecutionOrder] Offset: FFFFFFFF
  class OVRCameraRigRef : public ::UnityEngine::MonoBehaviour/*, public ::Oculus::Interaction::Input::IOVRCameraRigRef*/ {
    public:
    // Nested type: ::Oculus::Interaction::Input::OVRCameraRigRef::$$c
    class $$c;
    public:
    // private OVRCameraRig _ovrCameraRig
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::OVRCameraRig* ovrCameraRig;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRCameraRig*) == 0x8);
    // private System.Boolean _requireOvrHands
    // Size: 0x1
    // Offset: 0x28
    bool requireOvrHands;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: requireOvrHands and: leftHand
    char __padding1[0x7] = {};
    // private OVRHand _leftHand
    // Size: 0x8
    // Offset: 0x30
    ::GlobalNamespace::OVRHand* leftHand;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRHand*) == 0x8);
    // private OVRHand _rightHand
    // Size: 0x8
    // Offset: 0x38
    ::GlobalNamespace::OVRHand* rightHand;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRHand*) == 0x8);
    // private System.Action`1<System.Boolean> WhenInputDataDirtied
    // Size: 0x8
    // Offset: 0x40
    ::System::Action_1<bool>* WhenInputDataDirtied;
    // Field size check
    static_assert(sizeof(::System::Action_1<bool>*) == 0x8);
    // protected System.Boolean _started
    // Size: 0x1
    // Offset: 0x48
    bool started;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _isLateUpdate
    // Size: 0x1
    // Offset: 0x49
    bool isLateUpdate;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::Input::IOVRCameraRigRef
    operator ::Oculus::Interaction::Input::IOVRCameraRigRef() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::Input::IOVRCameraRigRef*>(this);
    }
    // Get instance field reference: private OVRCameraRig _ovrCameraRig
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRCameraRig*& dyn__ovrCameraRig();
    // Get instance field reference: private System.Boolean _requireOvrHands
    [[deprecated("Use field access instead!")]] bool& dyn__requireOvrHands();
    // Get instance field reference: private OVRHand _leftHand
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRHand*& dyn__leftHand();
    // Get instance field reference: private OVRHand _rightHand
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRHand*& dyn__rightHand();
    // Get instance field reference: private System.Action`1<System.Boolean> WhenInputDataDirtied
    [[deprecated("Use field access instead!")]] ::System::Action_1<bool>*& dyn_WhenInputDataDirtied();
    // Get instance field reference: protected System.Boolean _started
    [[deprecated("Use field access instead!")]] bool& dyn__started();
    // Get instance field reference: private System.Boolean _isLateUpdate
    [[deprecated("Use field access instead!")]] bool& dyn__isLateUpdate();
    // public OVRCameraRig get_CameraRig()
    // Offset: 0x47935DC
    ::GlobalNamespace::OVRCameraRig* get_CameraRig();
    // public OVRHand get_LeftHand()
    // Offset: 0x47935E4
    ::GlobalNamespace::OVRHand* get_LeftHand();
    // public OVRHand get_RightHand()
    // Offset: 0x47936B8
    ::GlobalNamespace::OVRHand* get_RightHand();
    // public UnityEngine.Transform get_LeftController()
    // Offset: 0x47936D8
    ::UnityEngine::Transform* get_LeftController();
    // public UnityEngine.Transform get_RightController()
    // Offset: 0x47936F4
    ::UnityEngine::Transform* get_RightController();
    // public System.Void add_WhenInputDataDirtied(System.Action`1<System.Boolean> value)
    // Offset: 0x4793710
    void add_WhenInputDataDirtied(::System::Action_1<bool>* value);
    // public System.Void remove_WhenInputDataDirtied(System.Action`1<System.Boolean> value)
    // Offset: 0x47937C0
    void remove_WhenInputDataDirtied(::System::Action_1<bool>* value);
    // protected System.Void Start()
    // Offset: 0x4793870
    void Start();
    // protected System.Void FixedUpdate()
    // Offset: 0x47938A8
    void FixedUpdate();
    // protected System.Void Update()
    // Offset: 0x47938B0
    void Update();
    // protected System.Void LateUpdate()
    // Offset: 0x47938B8
    void LateUpdate();
    // protected System.Void OnEnable()
    // Offset: 0x47938C4
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x4793960
    void OnDisable();
    // private OVRHand GetHandCached(ref OVRHand cachedValue, UnityEngine.Transform handAnchor)
    // Offset: 0x4793604
    ::GlobalNamespace::OVRHand* GetHandCached(ByRef<::GlobalNamespace::OVRHand*> cachedValue, ::UnityEngine::Transform* handAnchor);
    // private System.Void HandleInputDataDirtied(OVRCameraRig cameraRig)
    // Offset: 0x47939FC
    void HandleInputDataDirtied(::GlobalNamespace::OVRCameraRig* cameraRig);
    // public System.Void InjectAllOVRCameraRigRef(OVRCameraRig ovrCameraRig, System.Boolean requireHands)
    // Offset: 0x4793A24
    void InjectAllOVRCameraRigRef(::GlobalNamespace::OVRCameraRig* ovrCameraRig, bool requireHands);
    // public System.Void InjectInteractionOVRCameraRig(OVRCameraRig ovrCameraRig)
    // Offset: 0x4793A4C
    void InjectInteractionOVRCameraRig(::GlobalNamespace::OVRCameraRig* ovrCameraRig);
    // public System.Void InjectRequireHands(System.Boolean requireHands)
    // Offset: 0x4793A80
    void InjectRequireHands(bool requireHands);
    // public System.Void .ctor()
    // Offset: 0x4793A8C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OVRCameraRigRef* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Input::OVRCameraRigRef::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OVRCameraRigRef*, creationType>()));
    }
  }; // Oculus.Interaction.Input.OVRCameraRigRef
  #pragma pack(pop)
  static check_size<sizeof(OVRCameraRigRef), 73 + sizeof(bool)> __Oculus_Interaction_Input_OVRCameraRigRefSizeCheck;
  static_assert(sizeof(OVRCameraRigRef) == 0x4A);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Input::OVRCameraRigRef::get_CameraRig
// Il2CppName: get_CameraRig
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRCameraRig* (Oculus::Interaction::Input::OVRCameraRigRef::*)()>(&Oculus::Interaction::Input::OVRCameraRigRef::get_CameraRig)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::OVRCameraRigRef*), "get_CameraRig", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::OVRCameraRigRef::get_LeftHand
// Il2CppName: get_LeftHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRHand* (Oculus::Interaction::Input::OVRCameraRigRef::*)()>(&Oculus::Interaction::Input::OVRCameraRigRef::get_LeftHand)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::OVRCameraRigRef*), "get_LeftHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::OVRCameraRigRef::get_RightHand
// Il2CppName: get_RightHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRHand* (Oculus::Interaction::Input::OVRCameraRigRef::*)()>(&Oculus::Interaction::Input::OVRCameraRigRef::get_RightHand)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::OVRCameraRigRef*), "get_RightHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::OVRCameraRigRef::get_LeftController
// Il2CppName: get_LeftController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (Oculus::Interaction::Input::OVRCameraRigRef::*)()>(&Oculus::Interaction::Input::OVRCameraRigRef::get_LeftController)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::OVRCameraRigRef*), "get_LeftController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::OVRCameraRigRef::get_RightController
// Il2CppName: get_RightController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (Oculus::Interaction::Input::OVRCameraRigRef::*)()>(&Oculus::Interaction::Input::OVRCameraRigRef::get_RightController)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::OVRCameraRigRef*), "get_RightController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::OVRCameraRigRef::add_WhenInputDataDirtied
// Il2CppName: add_WhenInputDataDirtied
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::OVRCameraRigRef::*)(::System::Action_1<bool>*)>(&Oculus::Interaction::Input::OVRCameraRigRef::add_WhenInputDataDirtied)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::OVRCameraRigRef*), "add_WhenInputDataDirtied", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::OVRCameraRigRef::remove_WhenInputDataDirtied
// Il2CppName: remove_WhenInputDataDirtied
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::OVRCameraRigRef::*)(::System::Action_1<bool>*)>(&Oculus::Interaction::Input::OVRCameraRigRef::remove_WhenInputDataDirtied)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::OVRCameraRigRef*), "remove_WhenInputDataDirtied", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::OVRCameraRigRef::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::OVRCameraRigRef::*)()>(&Oculus::Interaction::Input::OVRCameraRigRef::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::OVRCameraRigRef*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::OVRCameraRigRef::FixedUpdate
// Il2CppName: FixedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::OVRCameraRigRef::*)()>(&Oculus::Interaction::Input::OVRCameraRigRef::FixedUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::OVRCameraRigRef*), "FixedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::OVRCameraRigRef::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::OVRCameraRigRef::*)()>(&Oculus::Interaction::Input::OVRCameraRigRef::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::OVRCameraRigRef*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::OVRCameraRigRef::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::OVRCameraRigRef::*)()>(&Oculus::Interaction::Input::OVRCameraRigRef::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::OVRCameraRigRef*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::OVRCameraRigRef::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::OVRCameraRigRef::*)()>(&Oculus::Interaction::Input::OVRCameraRigRef::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::OVRCameraRigRef*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::OVRCameraRigRef::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::OVRCameraRigRef::*)()>(&Oculus::Interaction::Input::OVRCameraRigRef::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::OVRCameraRigRef*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::OVRCameraRigRef::GetHandCached
// Il2CppName: GetHandCached
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRHand* (Oculus::Interaction::Input::OVRCameraRigRef::*)(ByRef<::GlobalNamespace::OVRHand*>, ::UnityEngine::Transform*)>(&Oculus::Interaction::Input::OVRCameraRigRef::GetHandCached)> {
  static const MethodInfo* get() {
    static auto* cachedValue = &::il2cpp_utils::GetClassFromName("", "OVRHand")->this_arg;
    static auto* handAnchor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::OVRCameraRigRef*), "GetHandCached", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cachedValue, handAnchor});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::OVRCameraRigRef::HandleInputDataDirtied
// Il2CppName: HandleInputDataDirtied
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::OVRCameraRigRef::*)(::GlobalNamespace::OVRCameraRig*)>(&Oculus::Interaction::Input::OVRCameraRigRef::HandleInputDataDirtied)> {
  static const MethodInfo* get() {
    static auto* cameraRig = &::il2cpp_utils::GetClassFromName("", "OVRCameraRig")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::OVRCameraRigRef*), "HandleInputDataDirtied", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cameraRig});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::OVRCameraRigRef::InjectAllOVRCameraRigRef
// Il2CppName: InjectAllOVRCameraRigRef
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::OVRCameraRigRef::*)(::GlobalNamespace::OVRCameraRig*, bool)>(&Oculus::Interaction::Input::OVRCameraRigRef::InjectAllOVRCameraRigRef)> {
  static const MethodInfo* get() {
    static auto* ovrCameraRig = &::il2cpp_utils::GetClassFromName("", "OVRCameraRig")->byval_arg;
    static auto* requireHands = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::OVRCameraRigRef*), "InjectAllOVRCameraRigRef", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ovrCameraRig, requireHands});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::OVRCameraRigRef::InjectInteractionOVRCameraRig
// Il2CppName: InjectInteractionOVRCameraRig
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::OVRCameraRigRef::*)(::GlobalNamespace::OVRCameraRig*)>(&Oculus::Interaction::Input::OVRCameraRigRef::InjectInteractionOVRCameraRig)> {
  static const MethodInfo* get() {
    static auto* ovrCameraRig = &::il2cpp_utils::GetClassFromName("", "OVRCameraRig")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::OVRCameraRigRef*), "InjectInteractionOVRCameraRig", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ovrCameraRig});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::OVRCameraRigRef::InjectRequireHands
// Il2CppName: InjectRequireHands
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::OVRCameraRigRef::*)(bool)>(&Oculus::Interaction::Input::OVRCameraRigRef::InjectRequireHands)> {
  static const MethodInfo* get() {
    static auto* requireHands = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::OVRCameraRigRef*), "InjectRequireHands", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{requireHands});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::OVRCameraRigRef::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
