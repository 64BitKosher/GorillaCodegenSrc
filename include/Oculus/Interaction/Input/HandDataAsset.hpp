// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Oculus.Interaction.Input.ICopyFrom`1
#include "Oculus/Interaction/Input/ICopyFrom_1.hpp"
// Including type: UnityEngine.Pose
#include "UnityEngine/Pose.hpp"
// Including type: Oculus.Interaction.Input.PoseOrigin
#include "Oculus/Interaction/Input/PoseOrigin.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction::Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: HandDataSourceConfig
  class HandDataSourceConfig;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: HandDataAsset
  class HandDataAsset;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Input::HandDataAsset);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Input::HandDataAsset*, "Oculus.Interaction.Input", "HandDataAsset");
// Type namespace: Oculus.Interaction.Input
namespace Oculus::Interaction::Input {
  // Size: 0x90
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.Input.HandDataAsset
  // [TokenAttribute] Offset: FFFFFFFF
  class HandDataAsset : public ::Il2CppObject/*, public ::Oculus::Interaction::Input::ICopyFrom_1<::Oculus::Interaction::Input::HandDataAsset*>*/ {
    public:
    public:
    // public System.Boolean IsDataValid
    // Size: 0x1
    // Offset: 0x10
    bool IsDataValid;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean IsConnected
    // Size: 0x1
    // Offset: 0x11
    bool IsConnected;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean IsTracked
    // Size: 0x1
    // Offset: 0x12
    bool IsTracked;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: IsTracked and: Root
    char __padding2[0x1] = {};
    // public UnityEngine.Pose Root
    // Size: 0x1C
    // Offset: 0x14
    ::UnityEngine::Pose Root;
    // Field size check
    static_assert(sizeof(::UnityEngine::Pose) == 0x1C);
    // public Oculus.Interaction.Input.PoseOrigin RootPoseOrigin
    // Size: 0x4
    // Offset: 0x30
    ::Oculus::Interaction::Input::PoseOrigin RootPoseOrigin;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::PoseOrigin) == 0x4);
    // Padding between fields: RootPoseOrigin and: Joints
    char __padding4[0x4] = {};
    // public UnityEngine.Quaternion[] Joints
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<::UnityEngine::Quaternion> Joints;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Quaternion>) == 0x8);
    // public System.Boolean IsHighConfidence
    // Size: 0x1
    // Offset: 0x40
    bool IsHighConfidence;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: IsHighConfidence and: IsFingerPinching
    char __padding6[0x7] = {};
    // public System.Boolean[] IsFingerPinching
    // Size: 0x8
    // Offset: 0x48
    ::ArrayW<bool> IsFingerPinching;
    // Field size check
    static_assert(sizeof(::ArrayW<bool>) == 0x8);
    // public System.Boolean[] IsFingerHighConfidence
    // Size: 0x8
    // Offset: 0x50
    ::ArrayW<bool> IsFingerHighConfidence;
    // Field size check
    static_assert(sizeof(::ArrayW<bool>) == 0x8);
    // public System.Single[] FingerPinchStrength
    // Size: 0x8
    // Offset: 0x58
    ::ArrayW<float> FingerPinchStrength;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // public System.Single HandScale
    // Size: 0x4
    // Offset: 0x60
    float HandScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Pose PointerPose
    // Size: 0x1C
    // Offset: 0x64
    ::UnityEngine::Pose PointerPose;
    // Field size check
    static_assert(sizeof(::UnityEngine::Pose) == 0x1C);
    // public Oculus.Interaction.Input.PoseOrigin PointerPoseOrigin
    // Size: 0x4
    // Offset: 0x80
    ::Oculus::Interaction::Input::PoseOrigin PointerPoseOrigin;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::PoseOrigin) == 0x4);
    // public System.Boolean IsDominantHand
    // Size: 0x1
    // Offset: 0x84
    bool IsDominantHand;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: IsDominantHand and: Config
    char __padding13[0x3] = {};
    // public Oculus.Interaction.Input.HandDataSourceConfig Config
    // Size: 0x8
    // Offset: 0x88
    ::Oculus::Interaction::Input::HandDataSourceConfig* Config;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::HandDataSourceConfig*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::Input::ICopyFrom_1<::Oculus::Interaction::Input::HandDataAsset*>
    operator ::Oculus::Interaction::Input::ICopyFrom_1<::Oculus::Interaction::Input::HandDataAsset*>() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::Input::ICopyFrom_1<::Oculus::Interaction::Input::HandDataAsset*>*>(this);
    }
    // Get instance field reference: public System.Boolean IsDataValid
    [[deprecated("Use field access instead!")]] bool& dyn_IsDataValid();
    // Get instance field reference: public System.Boolean IsConnected
    [[deprecated("Use field access instead!")]] bool& dyn_IsConnected();
    // Get instance field reference: public System.Boolean IsTracked
    [[deprecated("Use field access instead!")]] bool& dyn_IsTracked();
    // Get instance field reference: public UnityEngine.Pose Root
    [[deprecated("Use field access instead!")]] ::UnityEngine::Pose& dyn_Root();
    // Get instance field reference: public Oculus.Interaction.Input.PoseOrigin RootPoseOrigin
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::PoseOrigin& dyn_RootPoseOrigin();
    // Get instance field reference: public UnityEngine.Quaternion[] Joints
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Quaternion>& dyn_Joints();
    // Get instance field reference: public System.Boolean IsHighConfidence
    [[deprecated("Use field access instead!")]] bool& dyn_IsHighConfidence();
    // Get instance field reference: public System.Boolean[] IsFingerPinching
    [[deprecated("Use field access instead!")]] ::ArrayW<bool>& dyn_IsFingerPinching();
    // Get instance field reference: public System.Boolean[] IsFingerHighConfidence
    [[deprecated("Use field access instead!")]] ::ArrayW<bool>& dyn_IsFingerHighConfidence();
    // Get instance field reference: public System.Single[] FingerPinchStrength
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_FingerPinchStrength();
    // Get instance field reference: public System.Single HandScale
    [[deprecated("Use field access instead!")]] float& dyn_HandScale();
    // Get instance field reference: public UnityEngine.Pose PointerPose
    [[deprecated("Use field access instead!")]] ::UnityEngine::Pose& dyn_PointerPose();
    // Get instance field reference: public Oculus.Interaction.Input.PoseOrigin PointerPoseOrigin
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::PoseOrigin& dyn_PointerPoseOrigin();
    // Get instance field reference: public System.Boolean IsDominantHand
    [[deprecated("Use field access instead!")]] bool& dyn_IsDominantHand();
    // Get instance field reference: public Oculus.Interaction.Input.HandDataSourceConfig Config
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::HandDataSourceConfig*& dyn_Config();
    // public System.Boolean get_IsDataValidAndConnected()
    // Offset: 0x481711C
    bool get_IsDataValidAndConnected();
    // public System.Void CopyFrom(Oculus.Interaction.Input.HandDataAsset source)
    // Offset: 0x4814340
    void CopyFrom(::Oculus::Interaction::Input::HandDataAsset* source);
    // public System.Void CopyPosesFrom(Oculus.Interaction.Input.HandDataAsset source)
    // Offset: 0x48143A0
    void CopyPosesFrom(::Oculus::Interaction::Input::HandDataAsset* source);
    // public System.Void .ctor()
    // Offset: 0x4814504
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HandDataAsset* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Input::HandDataAsset::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HandDataAsset*, creationType>()));
    }
  }; // Oculus.Interaction.Input.HandDataAsset
  #pragma pack(pop)
  static check_size<sizeof(HandDataAsset), 136 + sizeof(::Oculus::Interaction::Input::HandDataSourceConfig*)> __Oculus_Interaction_Input_HandDataAssetSizeCheck;
  static_assert(sizeof(HandDataAsset) == 0x90);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Input::HandDataAsset::get_IsDataValidAndConnected
// Il2CppName: get_IsDataValidAndConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Input::HandDataAsset::*)()>(&Oculus::Interaction::Input::HandDataAsset::get_IsDataValidAndConnected)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::HandDataAsset*), "get_IsDataValidAndConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::HandDataAsset::CopyFrom
// Il2CppName: CopyFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::HandDataAsset::*)(::Oculus::Interaction::Input::HandDataAsset*)>(&Oculus::Interaction::Input::HandDataAsset::CopyFrom)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "HandDataAsset")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::HandDataAsset*), "CopyFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::HandDataAsset::CopyPosesFrom
// Il2CppName: CopyPosesFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::HandDataAsset::*)(::Oculus::Interaction::Input::HandDataAsset*)>(&Oculus::Interaction::Input::HandDataAsset::CopyPosesFrom)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "HandDataAsset")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::HandDataAsset*), "CopyPosesFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::HandDataAsset::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
