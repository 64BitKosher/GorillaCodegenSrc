// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: Oculus.Interaction.Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: SetDisplayRefresh
  class SetDisplayRefresh;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Input::SetDisplayRefresh);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Input::SetDisplayRefresh*, "Oculus.Interaction.Input", "SetDisplayRefresh");
// Type namespace: Oculus.Interaction.Input
namespace Oculus::Interaction::Input {
  // Size: 0x24
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.Input.SetDisplayRefresh
  // [TokenAttribute] Offset: FFFFFFFF
  class SetDisplayRefresh : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private System.Single _desiredDisplayFrequency
    // Size: 0x4
    // Offset: 0x20
    float desiredDisplayFrequency;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: private System.Single _desiredDisplayFrequency
    [[deprecated("Use field access instead!")]] float& dyn__desiredDisplayFrequency();
    // public System.Void SetDesiredDisplayFrequency(System.Single desiredDisplayFrequency)
    // Offset: 0x47953C4
    void SetDesiredDisplayFrequency(float desiredDisplayFrequency);
    // protected System.Void Awake()
    // Offset: 0x47954EC
    void Awake();
    // public System.Void .ctor()
    // Offset: 0x47954F0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SetDisplayRefresh* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Input::SetDisplayRefresh::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SetDisplayRefresh*, creationType>()));
    }
  }; // Oculus.Interaction.Input.SetDisplayRefresh
  #pragma pack(pop)
  static check_size<sizeof(SetDisplayRefresh), 32 + sizeof(float)> __Oculus_Interaction_Input_SetDisplayRefreshSizeCheck;
  static_assert(sizeof(SetDisplayRefresh) == 0x24);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Input::SetDisplayRefresh::SetDesiredDisplayFrequency
// Il2CppName: SetDesiredDisplayFrequency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::SetDisplayRefresh::*)(float)>(&Oculus::Interaction::Input::SetDisplayRefresh::SetDesiredDisplayFrequency)> {
  static const MethodInfo* get() {
    static auto* desiredDisplayFrequency = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::SetDisplayRefresh*), "SetDesiredDisplayFrequency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{desiredDisplayFrequency});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::SetDisplayRefresh::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::SetDisplayRefresh::*)()>(&Oculus::Interaction::Input::SetDisplayRefresh::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::SetDisplayRefresh*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::SetDisplayRefresh::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
