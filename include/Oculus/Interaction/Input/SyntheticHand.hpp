// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Oculus.Interaction.Input.Hand
#include "Oculus/Interaction/Input/Hand.hpp"
// Including type: UnityEngine.Pose
#include "UnityEngine/Pose.hpp"
// Including type: Oculus.Interaction.Input.JointFreedom
#include "Oculus/Interaction/Input/JointFreedom.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction::Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: HandDataAsset
  class HandDataAsset;
  // Forward declaring type: HandFinger
  struct HandFinger;
  // Forward declaring type: HandJointId
  struct HandJointId;
  // Skipping declaration: IDataSource because it is already included!
}
// Forward declaring namespace: Oculus::Interaction
namespace Oculus::Interaction {
  // Forward declaring type: ProgressCurve
  class ProgressCurve;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Vector3 because it is already included!
}
// Completed forward declares
// Type namespace: Oculus.Interaction.Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: SyntheticHand
  class SyntheticHand;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Input::SyntheticHand);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Input::SyntheticHand*, "Oculus.Interaction.Input", "SyntheticHand");
// Type namespace: Oculus.Interaction.Input
namespace Oculus::Interaction::Input {
  // WARNING Size may be invalid!
  // Autogenerated type: Oculus.Interaction.Input.SyntheticHand
  // [TokenAttribute] Offset: FFFFFFFF
  class SyntheticHand : public ::Oculus::Interaction::Input::Hand {
    public:
    // Nested type: ::Oculus::Interaction::Input::SyntheticHand::WristLockMode
    struct WristLockMode;
    // Nested type: ::Oculus::Interaction::Input::SyntheticHand::$$c
    class $$c;
    public:
    // private Oculus.Interaction.ProgressCurve _wristPositionLockCurve
    // Size: 0x8
    // Offset: 0x80
    ::Oculus::Interaction::ProgressCurve* wristPositionLockCurve;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::ProgressCurve*) == 0x8);
    // private Oculus.Interaction.ProgressCurve _wristPositionUnlockCurve
    // Size: 0x8
    // Offset: 0x88
    ::Oculus::Interaction::ProgressCurve* wristPositionUnlockCurve;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::ProgressCurve*) == 0x8);
    // private Oculus.Interaction.ProgressCurve _wristRotationLockCurve
    // Size: 0x8
    // Offset: 0x90
    ::Oculus::Interaction::ProgressCurve* wristRotationLockCurve;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::ProgressCurve*) == 0x8);
    // private Oculus.Interaction.ProgressCurve _wristRotationUnlockCurve
    // Size: 0x8
    // Offset: 0x98
    ::Oculus::Interaction::ProgressCurve* wristRotationUnlockCurve;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::ProgressCurve*) == 0x8);
    // private Oculus.Interaction.ProgressCurve _jointLockCurve
    // Size: 0x8
    // Offset: 0xA0
    ::Oculus::Interaction::ProgressCurve* jointLockCurve;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::ProgressCurve*) == 0x8);
    // private Oculus.Interaction.ProgressCurve _jointUnlockCurve
    // Size: 0x8
    // Offset: 0xA8
    ::Oculus::Interaction::ProgressCurve* jointUnlockCurve;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::ProgressCurve*) == 0x8);
    // private System.Single _spreadAllowance
    // Size: 0x4
    // Offset: 0xB0
    float spreadAllowance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Action UpdateRequired
    // Size: 0x8
    // Offset: 0xB8
    ::System::Action* UpdateRequired;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private readonly Oculus.Interaction.Input.HandDataAsset _lastStates
    // Size: 0x8
    // Offset: 0xC0
    ::Oculus::Interaction::Input::HandDataAsset* lastStates;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::HandDataAsset*) == 0x8);
    // private System.Single _wristPositionOverrideFactor
    // Size: 0x4
    // Offset: 0xC8
    float wristPositionOverrideFactor;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _wristRotationOverrideFactor
    // Size: 0x4
    // Offset: 0xCC
    float wristRotationOverrideFactor;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single[] _jointsOverrideFactor
    // Size: 0x8
    // Offset: 0xD0
    ::ArrayW<float> jointsOverrideFactor;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // private Oculus.Interaction.ProgressCurve[] _jointLockProgressCurves
    // Size: 0x8
    // Offset: 0xD8
    ::ArrayW<::Oculus::Interaction::ProgressCurve*> jointLockProgressCurves;
    // Field size check
    static_assert(sizeof(::ArrayW<::Oculus::Interaction::ProgressCurve*>) == 0x8);
    // private Oculus.Interaction.ProgressCurve[] _jointUnlockProgressCurves
    // Size: 0x8
    // Offset: 0xE0
    ::ArrayW<::Oculus::Interaction::ProgressCurve*> jointUnlockProgressCurves;
    // Field size check
    static_assert(sizeof(::ArrayW<::Oculus::Interaction::ProgressCurve*>) == 0x8);
    // private UnityEngine.Pose _desiredWristPose
    // Size: 0x1C
    // Offset: 0xE8
    ::UnityEngine::Pose desiredWristPose;
    // Field size check
    static_assert(sizeof(::UnityEngine::Pose) == 0x1C);
    // private System.Boolean _wristPositionLocked
    // Size: 0x1
    // Offset: 0x104
    bool wristPositionLocked;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _wristRotationLocked
    // Size: 0x1
    // Offset: 0x105
    bool wristRotationLocked;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private UnityEngine.Pose _constrainedWristPose
    // Size: 0x1C
    // Offset: 0x108
    ::UnityEngine::Pose constrainedWristPose;
    // Field size check
    static_assert(sizeof(::UnityEngine::Pose) == 0x1C);
    // private UnityEngine.Pose _lastWristPose
    // Size: 0x1C
    // Offset: 0x124
    ::UnityEngine::Pose lastWristPose;
    // Field size check
    static_assert(sizeof(::UnityEngine::Pose) == 0x1C);
    // private UnityEngine.Quaternion[] _desiredJointsRotation
    // Size: 0x8
    // Offset: 0x140
    ::ArrayW<::UnityEngine::Quaternion> desiredJointsRotation;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Quaternion>) == 0x8);
    // private UnityEngine.Quaternion[] _constrainedJointRotations
    // Size: 0x8
    // Offset: 0x148
    ::ArrayW<::UnityEngine::Quaternion> constrainedJointRotations;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Quaternion>) == 0x8);
    // private UnityEngine.Quaternion[] _lastSyntheticRotation
    // Size: 0x8
    // Offset: 0x150
    ::ArrayW<::UnityEngine::Quaternion> lastSyntheticRotation;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Quaternion>) == 0x8);
    // private Oculus.Interaction.Input.JointFreedom[] _jointsFreedomLevels
    // Size: 0x8
    // Offset: 0x158
    ::ArrayW<::Oculus::Interaction::Input::JointFreedom> jointsFreedomLevels;
    // Field size check
    static_assert(sizeof(::ArrayW<::Oculus::Interaction::Input::JointFreedom>) == 0x8);
    // private System.Boolean _hasConnectedData
    // Size: 0x1
    // Offset: 0x160
    bool hasConnectedData;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private Oculus.Interaction.ProgressCurve _wristPositionLockCurve
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::ProgressCurve*& dyn__wristPositionLockCurve();
    // Get instance field reference: private Oculus.Interaction.ProgressCurve _wristPositionUnlockCurve
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::ProgressCurve*& dyn__wristPositionUnlockCurve();
    // Get instance field reference: private Oculus.Interaction.ProgressCurve _wristRotationLockCurve
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::ProgressCurve*& dyn__wristRotationLockCurve();
    // Get instance field reference: private Oculus.Interaction.ProgressCurve _wristRotationUnlockCurve
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::ProgressCurve*& dyn__wristRotationUnlockCurve();
    // Get instance field reference: private Oculus.Interaction.ProgressCurve _jointLockCurve
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::ProgressCurve*& dyn__jointLockCurve();
    // Get instance field reference: private Oculus.Interaction.ProgressCurve _jointUnlockCurve
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::ProgressCurve*& dyn__jointUnlockCurve();
    // Get instance field reference: private System.Single _spreadAllowance
    [[deprecated("Use field access instead!")]] float& dyn__spreadAllowance();
    // Get instance field reference: public System.Action UpdateRequired
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_UpdateRequired();
    // Get instance field reference: private readonly Oculus.Interaction.Input.HandDataAsset _lastStates
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::HandDataAsset*& dyn__lastStates();
    // Get instance field reference: private System.Single _wristPositionOverrideFactor
    [[deprecated("Use field access instead!")]] float& dyn__wristPositionOverrideFactor();
    // Get instance field reference: private System.Single _wristRotationOverrideFactor
    [[deprecated("Use field access instead!")]] float& dyn__wristRotationOverrideFactor();
    // Get instance field reference: private System.Single[] _jointsOverrideFactor
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn__jointsOverrideFactor();
    // Get instance field reference: private Oculus.Interaction.ProgressCurve[] _jointLockProgressCurves
    [[deprecated("Use field access instead!")]] ::ArrayW<::Oculus::Interaction::ProgressCurve*>& dyn__jointLockProgressCurves();
    // Get instance field reference: private Oculus.Interaction.ProgressCurve[] _jointUnlockProgressCurves
    [[deprecated("Use field access instead!")]] ::ArrayW<::Oculus::Interaction::ProgressCurve*>& dyn__jointUnlockProgressCurves();
    // Get instance field reference: private UnityEngine.Pose _desiredWristPose
    [[deprecated("Use field access instead!")]] ::UnityEngine::Pose& dyn__desiredWristPose();
    // Get instance field reference: private System.Boolean _wristPositionLocked
    [[deprecated("Use field access instead!")]] bool& dyn__wristPositionLocked();
    // Get instance field reference: private System.Boolean _wristRotationLocked
    [[deprecated("Use field access instead!")]] bool& dyn__wristRotationLocked();
    // Get instance field reference: private UnityEngine.Pose _constrainedWristPose
    [[deprecated("Use field access instead!")]] ::UnityEngine::Pose& dyn__constrainedWristPose();
    // Get instance field reference: private UnityEngine.Pose _lastWristPose
    [[deprecated("Use field access instead!")]] ::UnityEngine::Pose& dyn__lastWristPose();
    // Get instance field reference: private UnityEngine.Quaternion[] _desiredJointsRotation
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Quaternion>& dyn__desiredJointsRotation();
    // Get instance field reference: private UnityEngine.Quaternion[] _constrainedJointRotations
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Quaternion>& dyn__constrainedJointRotations();
    // Get instance field reference: private UnityEngine.Quaternion[] _lastSyntheticRotation
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Quaternion>& dyn__lastSyntheticRotation();
    // Get instance field reference: private Oculus.Interaction.Input.JointFreedom[] _jointsFreedomLevels
    [[deprecated("Use field access instead!")]] ::ArrayW<::Oculus::Interaction::Input::JointFreedom>& dyn__jointsFreedomLevels();
    // Get instance field reference: private System.Boolean _hasConnectedData
    [[deprecated("Use field access instead!")]] bool& dyn__hasConnectedData();
    // private System.Void UpdateRootPose(ref UnityEngine.Pose root)
    // Offset: 0x4814F5C
    void UpdateRootPose(ByRef<::UnityEngine::Pose> root);
    // private System.Void UpdateJointsRotation(Oculus.Interaction.Input.HandDataAsset data)
    // Offset: 0x48148DC
    void UpdateJointsRotation(::Oculus::Interaction::Input::HandDataAsset* data);
    // public System.Void OverrideAllJoints(in UnityEngine.Quaternion[] jointRotations, System.Single overrideFactor)
    // Offset: 0x4815248
    void OverrideAllJoints(ByRef<::ArrayW<::UnityEngine::Quaternion>> jointRotations, float overrideFactor);
    // public System.Void OverrideFingerRotations(Oculus.Interaction.Input.HandFinger finger, UnityEngine.Quaternion[] rotations, System.Single overrideFactor)
    // Offset: 0x4815334
    void OverrideFingerRotations(::Oculus::Interaction::Input::HandFinger finger, ::ArrayW<::UnityEngine::Quaternion> rotations, float overrideFactor);
    // public System.Void OverrideJointRotation(Oculus.Interaction.Input.HandJointId jointId, UnityEngine.Quaternion rotation, System.Single overrideFactor)
    // Offset: 0x481548C
    void OverrideJointRotation(::Oculus::Interaction::Input::HandJointId jointId, ::UnityEngine::Quaternion rotation, float overrideFactor);
    // private System.Void OverrideJointRotationAtIndex(System.Int32 jointIndex, UnityEngine.Quaternion rotation, System.Single overrideFactor)
    // Offset: 0x4815438
    void OverrideJointRotationAtIndex(int jointIndex, ::UnityEngine::Quaternion rotation, float overrideFactor);
    // public System.Void LockFingerAtCurrent(in Oculus.Interaction.Input.HandFinger finger)
    // Offset: 0x4815538
    void LockFingerAtCurrent(ByRef<::Oculus::Interaction::Input::HandFinger> finger);
    // public System.Void LockJoint(in Oculus.Interaction.Input.HandJointId jointId, UnityEngine.Quaternion rotation, System.Single overrideFactor)
    // Offset: 0x4815798
    void LockJoint(ByRef<::Oculus::Interaction::Input::HandJointId> jointId, ::UnityEngine::Quaternion rotation, float overrideFactor);
    // public System.Void SetFingerFreedom(in Oculus.Interaction.Input.HandFinger finger, in Oculus.Interaction.Input.JointFreedom freedomLevel, System.Boolean skipAnimation)
    // Offset: 0x48156B0
    void SetFingerFreedom(ByRef<::Oculus::Interaction::Input::HandFinger> finger, ByRef<::Oculus::Interaction::Input::JointFreedom> freedomLevel, bool skipAnimation);
    // public System.Void SetJointFreedom(in Oculus.Interaction.Input.HandJointId jointId, in Oculus.Interaction.Input.JointFreedom freedomLevel, System.Boolean skipAnimation)
    // Offset: 0x4815980
    void SetJointFreedom(ByRef<::Oculus::Interaction::Input::HandJointId> jointId, ByRef<::Oculus::Interaction::Input::JointFreedom> freedomLevel, bool skipAnimation);
    // public Oculus.Interaction.Input.JointFreedom GetJointFreedom(in Oculus.Interaction.Input.HandJointId jointId)
    // Offset: 0x4815A00
    ::Oculus::Interaction::Input::JointFreedom GetJointFreedom(ByRef<::Oculus::Interaction::Input::HandJointId> jointId);
    // public System.Void FreeAllJoints()
    // Offset: 0x4815A88
    void FreeAllJoints();
    // private System.Void SetJointFreedomAtIndex(System.Int32 jointId, in Oculus.Interaction.Input.JointFreedom freedomLevel, System.Boolean skipAnimation)
    // Offset: 0x4815880
    void SetJointFreedomAtIndex(int jointId, ByRef<::Oculus::Interaction::Input::JointFreedom> freedomLevel, bool skipAnimation);
    // public System.Void LockWristPose(UnityEngine.Pose wristPose, System.Single overrideFactor, Oculus.Interaction.Input.SyntheticHand/WristLockMode lockMode, System.Boolean worldPose, System.Boolean skipAnimation)
    // Offset: 0x4815B54
    void LockWristPose(::UnityEngine::Pose wristPose, float overrideFactor, ::Oculus::Interaction::Input::SyntheticHand::WristLockMode lockMode, bool worldPose, bool skipAnimation);
    // public System.Void LockWristPosition(UnityEngine.Vector3 position, System.Single overrideFactor, System.Boolean skipAnimation)
    // Offset: 0x4815D20
    void LockWristPosition(::UnityEngine::Vector3 position, float overrideFactor, bool skipAnimation);
    // public System.Void LockWristRotation(UnityEngine.Quaternion rotation, System.Single overrideFactor, System.Boolean skipAnimation)
    // Offset: 0x4815D78
    void LockWristRotation(::UnityEngine::Quaternion rotation, float overrideFactor, bool skipAnimation);
    // public System.Void FreeWrist(Oculus.Interaction.Input.SyntheticHand/WristLockMode lockMode)
    // Offset: 0x4815E38
    void FreeWrist(::Oculus::Interaction::Input::SyntheticHand::WristLockMode lockMode);
    // private System.Void SyntheticWristLockChangedState(Oculus.Interaction.Input.SyntheticHand/WristLockMode lockMode, System.Boolean skipAnimation)
    // Offset: 0x4815DC8
    void SyntheticWristLockChangedState(::Oculus::Interaction::Input::SyntheticHand::WristLockMode lockMode, bool skipAnimation);
    // static private System.Single OverFlex(in UnityEngine.Quaternion desiredLocalRot, in UnityEngine.Quaternion maxLocalRot)
    // Offset: 0x48150B4
    static float OverFlex(ByRef<::UnityEngine::Quaternion> desiredLocalRot, ByRef<::UnityEngine::Quaternion> maxLocalRot);
    // static private System.Void UpdateProgressCurve(ref Oculus.Interaction.ProgressCurve lockProgress, ref Oculus.Interaction.ProgressCurve unlockProgress, System.Boolean locked, System.Boolean skipAnimation)
    // Offset: 0x4815B24
    static void UpdateProgressCurve(ByRef<::Oculus::Interaction::ProgressCurve*> lockProgress, ByRef<::Oculus::Interaction::ProgressCurve*> unlockProgress, bool locked, bool skipAnimation);
    // public System.Void InjectAllSyntheticHandModifier(Oculus.Interaction.Input.DataSource`1/UpdateModeFlags<Oculus.Interaction.Input.HandDataAsset> updateMode, Oculus.Interaction.Input.IDataSource updateAfter, Oculus.Interaction.Input.DataModifier`1<Oculus.Interaction.Input.HandDataAsset> modifyDataFromSource, System.Boolean applyModifier, Oculus.Interaction.ProgressCurve wristPositionLockCurve, Oculus.Interaction.ProgressCurve wristPositionUnlockCurve, Oculus.Interaction.ProgressCurve wristRotationLockCurve, Oculus.Interaction.ProgressCurve wristRotationUnlockCurve, Oculus.Interaction.ProgressCurve jointLockCurve, Oculus.Interaction.ProgressCurve jointUnlockCurve, System.Single spreadAllowance)
    // Offset: 0x4815EC0
    void InjectAllSyntheticHandModifier(typename ::Oculus::Interaction::Input::DataSource_1<::Oculus::Interaction::Input::HandDataAsset*>::UpdateModeFlags updateMode, ::Oculus::Interaction::Input::IDataSource* updateAfter, ::Oculus::Interaction::Input::DataModifier_1<::Oculus::Interaction::Input::HandDataAsset*>* modifyDataFromSource, bool applyModifier, ::Oculus::Interaction::ProgressCurve* wristPositionLockCurve, ::Oculus::Interaction::ProgressCurve* wristPositionUnlockCurve, ::Oculus::Interaction::ProgressCurve* wristRotationLockCurve, ::Oculus::Interaction::ProgressCurve* wristRotationUnlockCurve, ::Oculus::Interaction::ProgressCurve* jointLockCurve, ::Oculus::Interaction::ProgressCurve* jointUnlockCurve, float spreadAllowance);
    // public System.Void InjectWristPositionLockCurve(Oculus.Interaction.ProgressCurve wristPositionLockCurve)
    // Offset: 0x4815F74
    void InjectWristPositionLockCurve(::Oculus::Interaction::ProgressCurve* wristPositionLockCurve);
    // public System.Void InjectWristPositionUnlockCurve(Oculus.Interaction.ProgressCurve wristPositionUnlockCurve)
    // Offset: 0x4815F7C
    void InjectWristPositionUnlockCurve(::Oculus::Interaction::ProgressCurve* wristPositionUnlockCurve);
    // public System.Void InjectWristRotationLockCurve(Oculus.Interaction.ProgressCurve wristRotationLockCurve)
    // Offset: 0x4815F84
    void InjectWristRotationLockCurve(::Oculus::Interaction::ProgressCurve* wristRotationLockCurve);
    // public System.Void InjectWristRotationUnlockCurve(Oculus.Interaction.ProgressCurve wristRotationUnlockCurve)
    // Offset: 0x4815F8C
    void InjectWristRotationUnlockCurve(::Oculus::Interaction::ProgressCurve* wristRotationUnlockCurve);
    // public System.Void InjectJointLockCurve(Oculus.Interaction.ProgressCurve jointLockCurve)
    // Offset: 0x4815F94
    void InjectJointLockCurve(::Oculus::Interaction::ProgressCurve* jointLockCurve);
    // public System.Void InjectJointUnlockCurve(Oculus.Interaction.ProgressCurve jointUnlockCurve)
    // Offset: 0x4815F9C
    void InjectJointUnlockCurve(::Oculus::Interaction::ProgressCurve* jointUnlockCurve);
    // public System.Void InjectSpreadAllowance(System.Single spreadAllowance)
    // Offset: 0x4815FA4
    void InjectSpreadAllowance(float spreadAllowance);
    // private System.Void <Start>b__25_0()
    // Offset: 0x48162AC
    void $Start$b__25_0();
    // protected override System.Void Start()
    // Offset: 0x481462C
    // Implemented from: Oculus.Interaction.Input.DataModifier`1
    // Base method: System.Void DataModifier_1::Start()
    void Start();
    // protected override System.Void Apply(Oculus.Interaction.Input.HandDataAsset data)
    // Offset: 0x48147FC
    // Implemented from: Oculus.Interaction.Input.Hand
    // Base method: System.Void Hand::Apply(Oculus.Interaction.Input.HandDataAsset data)
    void Apply(::Oculus::Interaction::Input::HandDataAsset* data);
    // public System.Void .ctor()
    // Offset: 0x4815FAC
    // Implemented from: Oculus.Interaction.Input.Hand
    // Base method: System.Void Hand::.ctor()
    // Base method: System.Void DataModifier_1::.ctor()
    // Base method: System.Void DataSource_1::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SyntheticHand* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Input::SyntheticHand::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SyntheticHand*, creationType>()));
    }
  }; // Oculus.Interaction.Input.SyntheticHand
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Input::SyntheticHand::UpdateRootPose
// Il2CppName: UpdateRootPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::SyntheticHand::*)(ByRef<::UnityEngine::Pose>)>(&Oculus::Interaction::Input::SyntheticHand::UpdateRootPose)> {
  static const MethodInfo* get() {
    static auto* root = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::SyntheticHand*), "UpdateRootPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{root});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::SyntheticHand::UpdateJointsRotation
// Il2CppName: UpdateJointsRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::SyntheticHand::*)(::Oculus::Interaction::Input::HandDataAsset*)>(&Oculus::Interaction::Input::SyntheticHand::UpdateJointsRotation)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "HandDataAsset")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::SyntheticHand*), "UpdateJointsRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::SyntheticHand::OverrideAllJoints
// Il2CppName: OverrideAllJoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::SyntheticHand::*)(ByRef<::ArrayW<::UnityEngine::Quaternion>>, float)>(&Oculus::Interaction::Input::SyntheticHand::OverrideAllJoints)> {
  static const MethodInfo* get() {
    static auto* jointRotations = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion"), 1)->this_arg;
    static auto* overrideFactor = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::SyntheticHand*), "OverrideAllJoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{jointRotations, overrideFactor});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::SyntheticHand::OverrideFingerRotations
// Il2CppName: OverrideFingerRotations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::SyntheticHand::*)(::Oculus::Interaction::Input::HandFinger, ::ArrayW<::UnityEngine::Quaternion>, float)>(&Oculus::Interaction::Input::SyntheticHand::OverrideFingerRotations)> {
  static const MethodInfo* get() {
    static auto* finger = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "HandFinger")->byval_arg;
    static auto* rotations = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion"), 1)->byval_arg;
    static auto* overrideFactor = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::SyntheticHand*), "OverrideFingerRotations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{finger, rotations, overrideFactor});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::SyntheticHand::OverrideJointRotation
// Il2CppName: OverrideJointRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::SyntheticHand::*)(::Oculus::Interaction::Input::HandJointId, ::UnityEngine::Quaternion, float)>(&Oculus::Interaction::Input::SyntheticHand::OverrideJointRotation)> {
  static const MethodInfo* get() {
    static auto* jointId = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "HandJointId")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* overrideFactor = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::SyntheticHand*), "OverrideJointRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{jointId, rotation, overrideFactor});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::SyntheticHand::OverrideJointRotationAtIndex
// Il2CppName: OverrideJointRotationAtIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::SyntheticHand::*)(int, ::UnityEngine::Quaternion, float)>(&Oculus::Interaction::Input::SyntheticHand::OverrideJointRotationAtIndex)> {
  static const MethodInfo* get() {
    static auto* jointIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* overrideFactor = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::SyntheticHand*), "OverrideJointRotationAtIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{jointIndex, rotation, overrideFactor});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::SyntheticHand::LockFingerAtCurrent
// Il2CppName: LockFingerAtCurrent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::SyntheticHand::*)(ByRef<::Oculus::Interaction::Input::HandFinger>)>(&Oculus::Interaction::Input::SyntheticHand::LockFingerAtCurrent)> {
  static const MethodInfo* get() {
    static auto* finger = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "HandFinger")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::SyntheticHand*), "LockFingerAtCurrent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{finger});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::SyntheticHand::LockJoint
// Il2CppName: LockJoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::SyntheticHand::*)(ByRef<::Oculus::Interaction::Input::HandJointId>, ::UnityEngine::Quaternion, float)>(&Oculus::Interaction::Input::SyntheticHand::LockJoint)> {
  static const MethodInfo* get() {
    static auto* jointId = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "HandJointId")->this_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* overrideFactor = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::SyntheticHand*), "LockJoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{jointId, rotation, overrideFactor});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::SyntheticHand::SetFingerFreedom
// Il2CppName: SetFingerFreedom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::SyntheticHand::*)(ByRef<::Oculus::Interaction::Input::HandFinger>, ByRef<::Oculus::Interaction::Input::JointFreedom>, bool)>(&Oculus::Interaction::Input::SyntheticHand::SetFingerFreedom)> {
  static const MethodInfo* get() {
    static auto* finger = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "HandFinger")->this_arg;
    static auto* freedomLevel = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "JointFreedom")->this_arg;
    static auto* skipAnimation = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::SyntheticHand*), "SetFingerFreedom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{finger, freedomLevel, skipAnimation});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::SyntheticHand::SetJointFreedom
// Il2CppName: SetJointFreedom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::SyntheticHand::*)(ByRef<::Oculus::Interaction::Input::HandJointId>, ByRef<::Oculus::Interaction::Input::JointFreedom>, bool)>(&Oculus::Interaction::Input::SyntheticHand::SetJointFreedom)> {
  static const MethodInfo* get() {
    static auto* jointId = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "HandJointId")->this_arg;
    static auto* freedomLevel = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "JointFreedom")->this_arg;
    static auto* skipAnimation = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::SyntheticHand*), "SetJointFreedom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{jointId, freedomLevel, skipAnimation});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::SyntheticHand::GetJointFreedom
// Il2CppName: GetJointFreedom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Input::JointFreedom (Oculus::Interaction::Input::SyntheticHand::*)(ByRef<::Oculus::Interaction::Input::HandJointId>)>(&Oculus::Interaction::Input::SyntheticHand::GetJointFreedom)> {
  static const MethodInfo* get() {
    static auto* jointId = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "HandJointId")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::SyntheticHand*), "GetJointFreedom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{jointId});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::SyntheticHand::FreeAllJoints
// Il2CppName: FreeAllJoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::SyntheticHand::*)()>(&Oculus::Interaction::Input::SyntheticHand::FreeAllJoints)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::SyntheticHand*), "FreeAllJoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::SyntheticHand::SetJointFreedomAtIndex
// Il2CppName: SetJointFreedomAtIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::SyntheticHand::*)(int, ByRef<::Oculus::Interaction::Input::JointFreedom>, bool)>(&Oculus::Interaction::Input::SyntheticHand::SetJointFreedomAtIndex)> {
  static const MethodInfo* get() {
    static auto* jointId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* freedomLevel = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "JointFreedom")->this_arg;
    static auto* skipAnimation = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::SyntheticHand*), "SetJointFreedomAtIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{jointId, freedomLevel, skipAnimation});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::SyntheticHand::LockWristPose
// Il2CppName: LockWristPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::SyntheticHand::*)(::UnityEngine::Pose, float, ::Oculus::Interaction::Input::SyntheticHand::WristLockMode, bool, bool)>(&Oculus::Interaction::Input::SyntheticHand::LockWristPose)> {
  static const MethodInfo* get() {
    static auto* wristPose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->byval_arg;
    static auto* overrideFactor = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* lockMode = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "SyntheticHand/WristLockMode")->byval_arg;
    static auto* worldPose = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* skipAnimation = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::SyntheticHand*), "LockWristPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{wristPose, overrideFactor, lockMode, worldPose, skipAnimation});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::SyntheticHand::LockWristPosition
// Il2CppName: LockWristPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::SyntheticHand::*)(::UnityEngine::Vector3, float, bool)>(&Oculus::Interaction::Input::SyntheticHand::LockWristPosition)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* overrideFactor = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* skipAnimation = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::SyntheticHand*), "LockWristPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, overrideFactor, skipAnimation});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::SyntheticHand::LockWristRotation
// Il2CppName: LockWristRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::SyntheticHand::*)(::UnityEngine::Quaternion, float, bool)>(&Oculus::Interaction::Input::SyntheticHand::LockWristRotation)> {
  static const MethodInfo* get() {
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* overrideFactor = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* skipAnimation = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::SyntheticHand*), "LockWristRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rotation, overrideFactor, skipAnimation});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::SyntheticHand::FreeWrist
// Il2CppName: FreeWrist
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::SyntheticHand::*)(::Oculus::Interaction::Input::SyntheticHand::WristLockMode)>(&Oculus::Interaction::Input::SyntheticHand::FreeWrist)> {
  static const MethodInfo* get() {
    static auto* lockMode = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "SyntheticHand/WristLockMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::SyntheticHand*), "FreeWrist", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lockMode});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::SyntheticHand::SyntheticWristLockChangedState
// Il2CppName: SyntheticWristLockChangedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::SyntheticHand::*)(::Oculus::Interaction::Input::SyntheticHand::WristLockMode, bool)>(&Oculus::Interaction::Input::SyntheticHand::SyntheticWristLockChangedState)> {
  static const MethodInfo* get() {
    static auto* lockMode = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "SyntheticHand/WristLockMode")->byval_arg;
    static auto* skipAnimation = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::SyntheticHand*), "SyntheticWristLockChangedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lockMode, skipAnimation});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::SyntheticHand::OverFlex
// Il2CppName: OverFlex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(ByRef<::UnityEngine::Quaternion>, ByRef<::UnityEngine::Quaternion>)>(&Oculus::Interaction::Input::SyntheticHand::OverFlex)> {
  static const MethodInfo* get() {
    static auto* desiredLocalRot = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    static auto* maxLocalRot = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::SyntheticHand*), "OverFlex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{desiredLocalRot, maxLocalRot});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::SyntheticHand::UpdateProgressCurve
// Il2CppName: UpdateProgressCurve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::Oculus::Interaction::ProgressCurve*>, ByRef<::Oculus::Interaction::ProgressCurve*>, bool, bool)>(&Oculus::Interaction::Input::SyntheticHand::UpdateProgressCurve)> {
  static const MethodInfo* get() {
    static auto* lockProgress = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "ProgressCurve")->this_arg;
    static auto* unlockProgress = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "ProgressCurve")->this_arg;
    static auto* locked = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* skipAnimation = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::SyntheticHand*), "UpdateProgressCurve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lockProgress, unlockProgress, locked, skipAnimation});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::SyntheticHand::InjectAllSyntheticHandModifier
// Il2CppName: InjectAllSyntheticHandModifier
// Cannot write MetadataGetter for a method that has a nested type with a declaring generic type anywhere within it!
// Talk to sc2ad if this is something you want
// Writing MetadataGetter for method: Oculus::Interaction::Input::SyntheticHand::InjectWristPositionLockCurve
// Il2CppName: InjectWristPositionLockCurve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::SyntheticHand::*)(::Oculus::Interaction::ProgressCurve*)>(&Oculus::Interaction::Input::SyntheticHand::InjectWristPositionLockCurve)> {
  static const MethodInfo* get() {
    static auto* wristPositionLockCurve = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "ProgressCurve")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::SyntheticHand*), "InjectWristPositionLockCurve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{wristPositionLockCurve});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::SyntheticHand::InjectWristPositionUnlockCurve
// Il2CppName: InjectWristPositionUnlockCurve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::SyntheticHand::*)(::Oculus::Interaction::ProgressCurve*)>(&Oculus::Interaction::Input::SyntheticHand::InjectWristPositionUnlockCurve)> {
  static const MethodInfo* get() {
    static auto* wristPositionUnlockCurve = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "ProgressCurve")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::SyntheticHand*), "InjectWristPositionUnlockCurve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{wristPositionUnlockCurve});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::SyntheticHand::InjectWristRotationLockCurve
// Il2CppName: InjectWristRotationLockCurve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::SyntheticHand::*)(::Oculus::Interaction::ProgressCurve*)>(&Oculus::Interaction::Input::SyntheticHand::InjectWristRotationLockCurve)> {
  static const MethodInfo* get() {
    static auto* wristRotationLockCurve = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "ProgressCurve")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::SyntheticHand*), "InjectWristRotationLockCurve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{wristRotationLockCurve});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::SyntheticHand::InjectWristRotationUnlockCurve
// Il2CppName: InjectWristRotationUnlockCurve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::SyntheticHand::*)(::Oculus::Interaction::ProgressCurve*)>(&Oculus::Interaction::Input::SyntheticHand::InjectWristRotationUnlockCurve)> {
  static const MethodInfo* get() {
    static auto* wristRotationUnlockCurve = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "ProgressCurve")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::SyntheticHand*), "InjectWristRotationUnlockCurve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{wristRotationUnlockCurve});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::SyntheticHand::InjectJointLockCurve
// Il2CppName: InjectJointLockCurve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::SyntheticHand::*)(::Oculus::Interaction::ProgressCurve*)>(&Oculus::Interaction::Input::SyntheticHand::InjectJointLockCurve)> {
  static const MethodInfo* get() {
    static auto* jointLockCurve = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "ProgressCurve")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::SyntheticHand*), "InjectJointLockCurve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{jointLockCurve});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::SyntheticHand::InjectJointUnlockCurve
// Il2CppName: InjectJointUnlockCurve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::SyntheticHand::*)(::Oculus::Interaction::ProgressCurve*)>(&Oculus::Interaction::Input::SyntheticHand::InjectJointUnlockCurve)> {
  static const MethodInfo* get() {
    static auto* jointUnlockCurve = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "ProgressCurve")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::SyntheticHand*), "InjectJointUnlockCurve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{jointUnlockCurve});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::SyntheticHand::InjectSpreadAllowance
// Il2CppName: InjectSpreadAllowance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::SyntheticHand::*)(float)>(&Oculus::Interaction::Input::SyntheticHand::InjectSpreadAllowance)> {
  static const MethodInfo* get() {
    static auto* spreadAllowance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::SyntheticHand*), "InjectSpreadAllowance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{spreadAllowance});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::SyntheticHand::$Start$b__25_0
// Il2CppName: <Start>b__25_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::SyntheticHand::*)()>(&Oculus::Interaction::Input::SyntheticHand::$Start$b__25_0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::SyntheticHand*), "<Start>b__25_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::SyntheticHand::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::SyntheticHand::*)()>(&Oculus::Interaction::Input::SyntheticHand::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::SyntheticHand*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::SyntheticHand::Apply
// Il2CppName: Apply
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::SyntheticHand::*)(::Oculus::Interaction::Input::HandDataAsset*)>(&Oculus::Interaction::Input::SyntheticHand::Apply)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "HandDataAsset")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::SyntheticHand*), "Apply", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::SyntheticHand::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
