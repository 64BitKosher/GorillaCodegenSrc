// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Oculus.Interaction.Input.DataModifier`1
#include "Oculus/Interaction/Input/DataModifier_1.hpp"
// Including type: Oculus.Interaction.Input.IHand
#include "Oculus/Interaction/Input/IHand.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction::Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: HandDataAsset
  class HandDataAsset;
  // Forward declaring type: HandJointCache
  class HandJointCache;
  // Forward declaring type: Handedness
  struct Handedness;
  // Forward declaring type: ITrackingToWorldTransformer
  class ITrackingToWorldTransformer;
  // Forward declaring type: HandSkeleton
  class HandSkeleton;
  // Forward declaring type: HandFinger
  struct HandFinger;
  // Forward declaring type: HandJointId
  struct HandJointId;
  // Forward declaring type: ReadOnlyHandJointPoses
  class ReadOnlyHandJointPoses;
  // Forward declaring type: PoseOrigin
  struct PoseOrigin;
  // Skipping declaration: IDataSource because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Pose
  struct Pose;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: Hand
  class Hand;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Input::Hand);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Input::Hand*, "Oculus.Interaction.Input", "Hand");
// Type namespace: Oculus.Interaction.Input
namespace Oculus::Interaction::Input {
  // WARNING Size may be invalid!
  // Autogenerated type: Oculus.Interaction.Input.Hand
  // [TokenAttribute] Offset: FFFFFFFF
  class Hand : public ::Oculus::Interaction::Input::DataModifier_1<::Oculus::Interaction::Input::HandDataAsset*>/*, public ::Oculus::Interaction::Input::IHand*/ {
    public:
    // Nested type: ::Oculus::Interaction::Input::Hand::$$c
    class $$c;
    public:
    // private Oculus.Interaction.Input.HandJointCache _jointPosesCache
    // Size: 0x8
    // Offset: 0x70
    ::Oculus::Interaction::Input::HandJointCache* jointPosesCache;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::HandJointCache*) == 0x8);
    // private System.Action WhenHandUpdated
    // Size: 0x8
    // Offset: 0x78
    ::System::Action* WhenHandUpdated;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::Input::IHand
    operator ::Oculus::Interaction::Input::IHand() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::Input::IHand*>(this);
    }
    // Get static field: static private readonly UnityEngine.Vector3 PALM_LOCAL_OFFSET
    static ::UnityEngine::Vector3 _get_PALM_LOCAL_OFFSET();
    // Set static field: static private readonly UnityEngine.Vector3 PALM_LOCAL_OFFSET
    static void _set_PALM_LOCAL_OFFSET(::UnityEngine::Vector3 value);
    // Get instance field reference: private Oculus.Interaction.Input.HandJointCache _jointPosesCache
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::HandJointCache*& dyn__jointPosesCache();
    // Get instance field reference: private System.Action WhenHandUpdated
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_WhenHandUpdated();
    // public Oculus.Interaction.Input.Handedness get_Handedness()
    // Offset: 0x4816EB4
    ::Oculus::Interaction::Input::Handedness get_Handedness();
    // public Oculus.Interaction.Input.ITrackingToWorldTransformer get_TrackingToWorldTransformer()
    // Offset: 0x4815CC0
    ::Oculus::Interaction::Input::ITrackingToWorldTransformer* get_TrackingToWorldTransformer();
    // public Oculus.Interaction.Input.HandSkeleton get_HandSkeleton()
    // Offset: 0x4816F14
    ::Oculus::Interaction::Input::HandSkeleton* get_HandSkeleton();
    // public System.Void add_WhenHandUpdated(System.Action value)
    // Offset: 0x4816F74
    void add_WhenHandUpdated(::System::Action* value);
    // public System.Void remove_WhenHandUpdated(System.Action value)
    // Offset: 0x4817010
    void remove_WhenHandUpdated(::System::Action* value);
    // public System.Boolean get_IsConnected()
    // Offset: 0x48170AC
    bool get_IsConnected();
    // public System.Boolean get_IsHighConfidence()
    // Offset: 0x481713C
    bool get_IsHighConfidence();
    // public System.Boolean get_IsDominantHand()
    // Offset: 0x4817194
    bool get_IsDominantHand();
    // public System.Single get_Scale()
    // Offset: 0x48171EC
    float get_Scale();
    // protected System.Void Apply(Oculus.Interaction.Input.HandDataAsset data)
    // Offset: 0x48172F0
    void Apply(::Oculus::Interaction::Input::HandDataAsset* data);
    // private System.Void InitializeJointPosesCache()
    // Offset: 0x4817380
    void InitializeJointPosesCache();
    // private System.Void CheckJointPosesCacheUpdate()
    // Offset: 0x481768C
    void CheckJointPosesCacheUpdate();
    // public System.Boolean GetFingerIsPinching(Oculus.Interaction.Input.HandFinger finger)
    // Offset: 0x481776C
    bool GetFingerIsPinching(::Oculus::Interaction::Input::HandFinger finger);
    // public System.Boolean GetIndexFingerIsPinching()
    // Offset: 0x4817804
    bool GetIndexFingerIsPinching();
    // public System.Boolean get_IsPointerPoseValid()
    // Offset: 0x481780C
    bool get_IsPointerPoseValid();
    // public System.Boolean GetPointerPose(out UnityEngine.Pose pose)
    // Offset: 0x4817878
    bool GetPointerPose(ByRef<::UnityEngine::Pose> pose);
    // public System.Boolean GetJointPose(Oculus.Interaction.Input.HandJointId handJointId, out UnityEngine.Pose pose)
    // Offset: 0x4817A9C
    bool GetJointPose(::Oculus::Interaction::Input::HandJointId handJointId, ByRef<::UnityEngine::Pose> pose);
    // public System.Boolean GetJointPoseLocal(Oculus.Interaction.Input.HandJointId handJointId, out UnityEngine.Pose pose)
    // Offset: 0x4817E48
    bool GetJointPoseLocal(::Oculus::Interaction::Input::HandJointId handJointId, ByRef<::UnityEngine::Pose> pose);
    // public System.Boolean GetJointPosesLocal(out Oculus.Interaction.Input.ReadOnlyHandJointPoses localJointPoses)
    // Offset: 0x4817F20
    bool GetJointPosesLocal(ByRef<::Oculus::Interaction::Input::ReadOnlyHandJointPoses*> localJointPoses);
    // public System.Boolean GetJointPoseFromWrist(Oculus.Interaction.Input.HandJointId handJointId, out UnityEngine.Pose pose)
    // Offset: 0x481807C
    bool GetJointPoseFromWrist(::Oculus::Interaction::Input::HandJointId handJointId, ByRef<::UnityEngine::Pose> pose);
    // public System.Boolean GetJointPosesFromWrist(out Oculus.Interaction.Input.ReadOnlyHandJointPoses jointPosesFromWrist)
    // Offset: 0x4818154
    bool GetJointPosesFromWrist(ByRef<::Oculus::Interaction::Input::ReadOnlyHandJointPoses*> jointPosesFromWrist);
    // public System.Boolean GetPalmPoseLocal(out UnityEngine.Pose pose)
    // Offset: 0x481827C
    bool GetPalmPoseLocal(ByRef<::UnityEngine::Pose> pose);
    // public System.Boolean GetFingerIsHighConfidence(Oculus.Interaction.Input.HandFinger finger)
    // Offset: 0x48183C0
    bool GetFingerIsHighConfidence(::Oculus::Interaction::Input::HandFinger finger);
    // public System.Single GetFingerPinchStrength(Oculus.Interaction.Input.HandFinger finger)
    // Offset: 0x4818440
    float GetFingerPinchStrength(::Oculus::Interaction::Input::HandFinger finger);
    // public System.Boolean get_IsTrackedDataValid()
    // Offset: 0x4817BCC
    bool get_IsTrackedDataValid();
    // public System.Boolean GetRootPose(out UnityEngine.Pose pose)
    // Offset: 0x4817C2C
    bool GetRootPose(ByRef<::UnityEngine::Pose> pose);
    // private System.Boolean ValidatePose(in UnityEngine.Pose sourcePose, Oculus.Interaction.Input.PoseOrigin sourcePoseOrigin, out UnityEngine.Pose pose)
    // Offset: 0x48178E8
    bool ValidatePose(ByRef<::UnityEngine::Pose> sourcePose, ::Oculus::Interaction::Input::PoseOrigin sourcePoseOrigin, ByRef<::UnityEngine::Pose> pose);
    // private System.Boolean IsPoseOriginAllowed(Oculus.Interaction.Input.PoseOrigin poseOrigin)
    // Offset: 0x481786C
    bool IsPoseOriginAllowed(::Oculus::Interaction::Input::PoseOrigin poseOrigin);
    // private System.Boolean IsPoseOriginDisallowed(Oculus.Interaction.Input.PoseOrigin poseOrigin)
    // Offset: 0x48184C0
    bool IsPoseOriginDisallowed(::Oculus::Interaction::Input::PoseOrigin poseOrigin);
    // public System.Void InjectAllHand(Oculus.Interaction.Input.DataSource`1/UpdateModeFlags<Oculus.Interaction.Input.HandDataAsset> updateMode, Oculus.Interaction.Input.IDataSource updateAfter, Oculus.Interaction.Input.DataModifier`1<Oculus.Interaction.Input.HandDataAsset> modifyDataFromSource, System.Boolean applyModifier)
    // Offset: 0x4813BD8
    void InjectAllHand(typename ::Oculus::Interaction::Input::DataSource_1<::Oculus::Interaction::Input::HandDataAsset*>::UpdateModeFlags updateMode, ::Oculus::Interaction::Input::IDataSource* updateAfter, ::Oculus::Interaction::Input::DataModifier_1<::Oculus::Interaction::Input::HandDataAsset*>* modifyDataFromSource, bool applyModifier);
    // public override System.Void MarkInputDataRequiresUpdate()
    // Offset: 0x48172F4
    // Implemented from: Oculus.Interaction.Input.DataSource`1
    // Base method: System.Void DataSource_1::MarkInputDataRequiresUpdate()
    void MarkInputDataRequiresUpdate();
    // public System.Void .ctor()
    // Offset: 0x4813CB4
    // Implemented from: Oculus.Interaction.Input.DataModifier`1
    // Base method: System.Void DataModifier_1::.ctor()
    // Base method: System.Void DataSource_1::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Hand* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Input::Hand::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Hand*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x48184CC
    // Implemented from: Oculus.Interaction.Input.DataModifier`1
    // Base method: System.Void DataModifier_1::.cctor()
    static void _cctor();
  }; // Oculus.Interaction.Input.Hand
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Input::Hand::get_Handedness
// Il2CppName: get_Handedness
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Input::Handedness (Oculus::Interaction::Input::Hand::*)()>(&Oculus::Interaction::Input::Hand::get_Handedness)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::Hand*), "get_Handedness", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::Hand::get_TrackingToWorldTransformer
// Il2CppName: get_TrackingToWorldTransformer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Input::ITrackingToWorldTransformer* (Oculus::Interaction::Input::Hand::*)()>(&Oculus::Interaction::Input::Hand::get_TrackingToWorldTransformer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::Hand*), "get_TrackingToWorldTransformer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::Hand::get_HandSkeleton
// Il2CppName: get_HandSkeleton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Input::HandSkeleton* (Oculus::Interaction::Input::Hand::*)()>(&Oculus::Interaction::Input::Hand::get_HandSkeleton)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::Hand*), "get_HandSkeleton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::Hand::add_WhenHandUpdated
// Il2CppName: add_WhenHandUpdated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::Hand::*)(::System::Action*)>(&Oculus::Interaction::Input::Hand::add_WhenHandUpdated)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::Hand*), "add_WhenHandUpdated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::Hand::remove_WhenHandUpdated
// Il2CppName: remove_WhenHandUpdated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::Hand::*)(::System::Action*)>(&Oculus::Interaction::Input::Hand::remove_WhenHandUpdated)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::Hand*), "remove_WhenHandUpdated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::Hand::get_IsConnected
// Il2CppName: get_IsConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Input::Hand::*)()>(&Oculus::Interaction::Input::Hand::get_IsConnected)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::Hand*), "get_IsConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::Hand::get_IsHighConfidence
// Il2CppName: get_IsHighConfidence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Input::Hand::*)()>(&Oculus::Interaction::Input::Hand::get_IsHighConfidence)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::Hand*), "get_IsHighConfidence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::Hand::get_IsDominantHand
// Il2CppName: get_IsDominantHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Input::Hand::*)()>(&Oculus::Interaction::Input::Hand::get_IsDominantHand)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::Hand*), "get_IsDominantHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::Hand::get_Scale
// Il2CppName: get_Scale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::Input::Hand::*)()>(&Oculus::Interaction::Input::Hand::get_Scale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::Hand*), "get_Scale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::Hand::Apply
// Il2CppName: Apply
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::Hand::*)(::Oculus::Interaction::Input::HandDataAsset*)>(&Oculus::Interaction::Input::Hand::Apply)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "HandDataAsset")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::Hand*), "Apply", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::Hand::InitializeJointPosesCache
// Il2CppName: InitializeJointPosesCache
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::Hand::*)()>(&Oculus::Interaction::Input::Hand::InitializeJointPosesCache)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::Hand*), "InitializeJointPosesCache", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::Hand::CheckJointPosesCacheUpdate
// Il2CppName: CheckJointPosesCacheUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::Hand::*)()>(&Oculus::Interaction::Input::Hand::CheckJointPosesCacheUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::Hand*), "CheckJointPosesCacheUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::Hand::GetFingerIsPinching
// Il2CppName: GetFingerIsPinching
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Input::Hand::*)(::Oculus::Interaction::Input::HandFinger)>(&Oculus::Interaction::Input::Hand::GetFingerIsPinching)> {
  static const MethodInfo* get() {
    static auto* finger = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "HandFinger")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::Hand*), "GetFingerIsPinching", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{finger});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::Hand::GetIndexFingerIsPinching
// Il2CppName: GetIndexFingerIsPinching
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Input::Hand::*)()>(&Oculus::Interaction::Input::Hand::GetIndexFingerIsPinching)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::Hand*), "GetIndexFingerIsPinching", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::Hand::get_IsPointerPoseValid
// Il2CppName: get_IsPointerPoseValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Input::Hand::*)()>(&Oculus::Interaction::Input::Hand::get_IsPointerPoseValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::Hand*), "get_IsPointerPoseValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::Hand::GetPointerPose
// Il2CppName: GetPointerPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Input::Hand::*)(ByRef<::UnityEngine::Pose>)>(&Oculus::Interaction::Input::Hand::GetPointerPose)> {
  static const MethodInfo* get() {
    static auto* pose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::Hand*), "GetPointerPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pose});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::Hand::GetJointPose
// Il2CppName: GetJointPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Input::Hand::*)(::Oculus::Interaction::Input::HandJointId, ByRef<::UnityEngine::Pose>)>(&Oculus::Interaction::Input::Hand::GetJointPose)> {
  static const MethodInfo* get() {
    static auto* handJointId = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "HandJointId")->byval_arg;
    static auto* pose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::Hand*), "GetJointPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handJointId, pose});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::Hand::GetJointPoseLocal
// Il2CppName: GetJointPoseLocal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Input::Hand::*)(::Oculus::Interaction::Input::HandJointId, ByRef<::UnityEngine::Pose>)>(&Oculus::Interaction::Input::Hand::GetJointPoseLocal)> {
  static const MethodInfo* get() {
    static auto* handJointId = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "HandJointId")->byval_arg;
    static auto* pose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::Hand*), "GetJointPoseLocal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handJointId, pose});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::Hand::GetJointPosesLocal
// Il2CppName: GetJointPosesLocal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Input::Hand::*)(ByRef<::Oculus::Interaction::Input::ReadOnlyHandJointPoses*>)>(&Oculus::Interaction::Input::Hand::GetJointPosesLocal)> {
  static const MethodInfo* get() {
    static auto* localJointPoses = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "ReadOnlyHandJointPoses")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::Hand*), "GetJointPosesLocal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{localJointPoses});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::Hand::GetJointPoseFromWrist
// Il2CppName: GetJointPoseFromWrist
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Input::Hand::*)(::Oculus::Interaction::Input::HandJointId, ByRef<::UnityEngine::Pose>)>(&Oculus::Interaction::Input::Hand::GetJointPoseFromWrist)> {
  static const MethodInfo* get() {
    static auto* handJointId = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "HandJointId")->byval_arg;
    static auto* pose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::Hand*), "GetJointPoseFromWrist", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handJointId, pose});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::Hand::GetJointPosesFromWrist
// Il2CppName: GetJointPosesFromWrist
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Input::Hand::*)(ByRef<::Oculus::Interaction::Input::ReadOnlyHandJointPoses*>)>(&Oculus::Interaction::Input::Hand::GetJointPosesFromWrist)> {
  static const MethodInfo* get() {
    static auto* jointPosesFromWrist = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "ReadOnlyHandJointPoses")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::Hand*), "GetJointPosesFromWrist", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{jointPosesFromWrist});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::Hand::GetPalmPoseLocal
// Il2CppName: GetPalmPoseLocal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Input::Hand::*)(ByRef<::UnityEngine::Pose>)>(&Oculus::Interaction::Input::Hand::GetPalmPoseLocal)> {
  static const MethodInfo* get() {
    static auto* pose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::Hand*), "GetPalmPoseLocal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pose});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::Hand::GetFingerIsHighConfidence
// Il2CppName: GetFingerIsHighConfidence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Input::Hand::*)(::Oculus::Interaction::Input::HandFinger)>(&Oculus::Interaction::Input::Hand::GetFingerIsHighConfidence)> {
  static const MethodInfo* get() {
    static auto* finger = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "HandFinger")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::Hand*), "GetFingerIsHighConfidence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{finger});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::Hand::GetFingerPinchStrength
// Il2CppName: GetFingerPinchStrength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::Input::Hand::*)(::Oculus::Interaction::Input::HandFinger)>(&Oculus::Interaction::Input::Hand::GetFingerPinchStrength)> {
  static const MethodInfo* get() {
    static auto* finger = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "HandFinger")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::Hand*), "GetFingerPinchStrength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{finger});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::Hand::get_IsTrackedDataValid
// Il2CppName: get_IsTrackedDataValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Input::Hand::*)()>(&Oculus::Interaction::Input::Hand::get_IsTrackedDataValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::Hand*), "get_IsTrackedDataValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::Hand::GetRootPose
// Il2CppName: GetRootPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Input::Hand::*)(ByRef<::UnityEngine::Pose>)>(&Oculus::Interaction::Input::Hand::GetRootPose)> {
  static const MethodInfo* get() {
    static auto* pose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::Hand*), "GetRootPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pose});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::Hand::ValidatePose
// Il2CppName: ValidatePose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Input::Hand::*)(ByRef<::UnityEngine::Pose>, ::Oculus::Interaction::Input::PoseOrigin, ByRef<::UnityEngine::Pose>)>(&Oculus::Interaction::Input::Hand::ValidatePose)> {
  static const MethodInfo* get() {
    static auto* sourcePose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    static auto* sourcePoseOrigin = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "PoseOrigin")->byval_arg;
    static auto* pose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::Hand*), "ValidatePose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sourcePose, sourcePoseOrigin, pose});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::Hand::IsPoseOriginAllowed
// Il2CppName: IsPoseOriginAllowed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Input::Hand::*)(::Oculus::Interaction::Input::PoseOrigin)>(&Oculus::Interaction::Input::Hand::IsPoseOriginAllowed)> {
  static const MethodInfo* get() {
    static auto* poseOrigin = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "PoseOrigin")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::Hand*), "IsPoseOriginAllowed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{poseOrigin});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::Hand::IsPoseOriginDisallowed
// Il2CppName: IsPoseOriginDisallowed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Input::Hand::*)(::Oculus::Interaction::Input::PoseOrigin)>(&Oculus::Interaction::Input::Hand::IsPoseOriginDisallowed)> {
  static const MethodInfo* get() {
    static auto* poseOrigin = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "PoseOrigin")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::Hand*), "IsPoseOriginDisallowed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{poseOrigin});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::Hand::InjectAllHand
// Il2CppName: InjectAllHand
// Cannot write MetadataGetter for a method that has a nested type with a declaring generic type anywhere within it!
// Talk to sc2ad if this is something you want
// Writing MetadataGetter for method: Oculus::Interaction::Input::Hand::MarkInputDataRequiresUpdate
// Il2CppName: MarkInputDataRequiresUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::Hand::*)()>(&Oculus::Interaction::Input::Hand::MarkInputDataRequiresUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::Hand*), "MarkInputDataRequiresUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::Hand::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Interaction::Input::Hand::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Oculus::Interaction::Input::Hand::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::Hand*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
