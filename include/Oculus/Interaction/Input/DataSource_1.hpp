// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Oculus.Interaction.Input.IDataSource`1
#include "Oculus/Interaction/Input/IDataSource_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction::Input
namespace Oculus::Interaction::Input {
  // Skipping declaration: UpdateModeFlags because it is already included!
  // Skipping declaration: <>c because it is already included!
  // Forward declaring type: ICopyFrom`1<TSelfType>
  template<typename TSelfType>
  class ICopyFrom_1;
  // Skipping declaration: IDataSource because it is already included!
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Object because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: DataSource`1<TData>
  template<typename TData>
  class DataSource_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::Oculus::Interaction::Input::DataSource_1, "Oculus.Interaction.Input", "DataSource`1");
// Type namespace: Oculus.Interaction.Input
namespace Oculus::Interaction::Input {
  // WARNING Size may be invalid!
  // Autogenerated type: Oculus.Interaction.Input.DataSource`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename TData>
  class DataSource_1 : public ::UnityEngine::MonoBehaviour/*, public ::Oculus::Interaction::Input::IDataSource_1<TData>*/ {
    public:
    // Nested type: ::Oculus::Interaction::Input::DataSource_1::UpdateModeFlags<TData>
    struct UpdateModeFlags;
    // Nested type: ::Oculus::Interaction::Input::DataSource_1::$$c<TData>
    class $$c;
    // WARNING Size may be invalid!
    // Autogenerated type: Oculus.Interaction.Input.DataSource`1/UpdateModeFlags
    // [TokenAttribute] Offset: FFFFFFFF
    // [FlagsAttribute] Offset: FFFFFFFF
    struct UpdateModeFlags : public ::il2cpp_utils::il2cpp_type_check::NestedType/*, public ::System::Enum*/ {
      public:
      using declaring_type = DataSource_1<TData>*;
      static constexpr std::string_view NESTED_NAME = "UpdateModeFlags";
      static constexpr bool IS_VALUE_TYPE = true;
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: UpdateModeFlags
      constexpr UpdateModeFlags(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // Autogenerated static field getter
      // Get static field: static public Oculus.Interaction.Input.DataSource`1/UpdateModeFlags<TData> Manual
      static typename ::Oculus::Interaction::Input::DataSource_1<TData>::UpdateModeFlags _get_Manual() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Input::DataSource_1::UpdateModeFlags::_get_Manual");
        return THROW_UNLESS(il2cpp_utils::GetFieldValue<typename ::Oculus::Interaction::Input::DataSource_1<TData>::UpdateModeFlags>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename DataSource_1<TData>::UpdateModeFlags>::get(), "Manual"));
      }
      // Autogenerated static field setter
      // Set static field: static public Oculus.Interaction.Input.DataSource`1/UpdateModeFlags<TData> Manual
      static void _set_Manual(typename ::Oculus::Interaction::Input::DataSource_1<TData>::UpdateModeFlags value) {
        static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Input::DataSource_1::UpdateModeFlags::_set_Manual");
        THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename DataSource_1<TData>::UpdateModeFlags>::get(), "Manual", value));
      }
      // Autogenerated static field getter
      // Get static field: static public Oculus.Interaction.Input.DataSource`1/UpdateModeFlags<TData> UnityUpdate
      static typename ::Oculus::Interaction::Input::DataSource_1<TData>::UpdateModeFlags _get_UnityUpdate() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Input::DataSource_1::UpdateModeFlags::_get_UnityUpdate");
        return THROW_UNLESS(il2cpp_utils::GetFieldValue<typename ::Oculus::Interaction::Input::DataSource_1<TData>::UpdateModeFlags>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename DataSource_1<TData>::UpdateModeFlags>::get(), "UnityUpdate"));
      }
      // Autogenerated static field setter
      // Set static field: static public Oculus.Interaction.Input.DataSource`1/UpdateModeFlags<TData> UnityUpdate
      static void _set_UnityUpdate(typename ::Oculus::Interaction::Input::DataSource_1<TData>::UpdateModeFlags value) {
        static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Input::DataSource_1::UpdateModeFlags::_set_UnityUpdate");
        THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename DataSource_1<TData>::UpdateModeFlags>::get(), "UnityUpdate", value));
      }
      // Autogenerated static field getter
      // Get static field: static public Oculus.Interaction.Input.DataSource`1/UpdateModeFlags<TData> UnityFixedUpdate
      static typename ::Oculus::Interaction::Input::DataSource_1<TData>::UpdateModeFlags _get_UnityFixedUpdate() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Input::DataSource_1::UpdateModeFlags::_get_UnityFixedUpdate");
        return THROW_UNLESS(il2cpp_utils::GetFieldValue<typename ::Oculus::Interaction::Input::DataSource_1<TData>::UpdateModeFlags>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename DataSource_1<TData>::UpdateModeFlags>::get(), "UnityFixedUpdate"));
      }
      // Autogenerated static field setter
      // Set static field: static public Oculus.Interaction.Input.DataSource`1/UpdateModeFlags<TData> UnityFixedUpdate
      static void _set_UnityFixedUpdate(typename ::Oculus::Interaction::Input::DataSource_1<TData>::UpdateModeFlags value) {
        static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Input::DataSource_1::UpdateModeFlags::_set_UnityFixedUpdate");
        THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename DataSource_1<TData>::UpdateModeFlags>::get(), "UnityFixedUpdate", value));
      }
      // Autogenerated static field getter
      // Get static field: static public Oculus.Interaction.Input.DataSource`1/UpdateModeFlags<TData> UnityLateUpdate
      static typename ::Oculus::Interaction::Input::DataSource_1<TData>::UpdateModeFlags _get_UnityLateUpdate() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Input::DataSource_1::UpdateModeFlags::_get_UnityLateUpdate");
        return THROW_UNLESS(il2cpp_utils::GetFieldValue<typename ::Oculus::Interaction::Input::DataSource_1<TData>::UpdateModeFlags>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename DataSource_1<TData>::UpdateModeFlags>::get(), "UnityLateUpdate"));
      }
      // Autogenerated static field setter
      // Set static field: static public Oculus.Interaction.Input.DataSource`1/UpdateModeFlags<TData> UnityLateUpdate
      static void _set_UnityLateUpdate(typename ::Oculus::Interaction::Input::DataSource_1<TData>::UpdateModeFlags value) {
        static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Input::DataSource_1::UpdateModeFlags::_set_UnityLateUpdate");
        THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename DataSource_1<TData>::UpdateModeFlags>::get(), "UnityLateUpdate", value));
      }
      // Autogenerated static field getter
      // Get static field: static public Oculus.Interaction.Input.DataSource`1/UpdateModeFlags<TData> AfterPreviousStep
      static typename ::Oculus::Interaction::Input::DataSource_1<TData>::UpdateModeFlags _get_AfterPreviousStep() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Input::DataSource_1::UpdateModeFlags::_get_AfterPreviousStep");
        return THROW_UNLESS(il2cpp_utils::GetFieldValue<typename ::Oculus::Interaction::Input::DataSource_1<TData>::UpdateModeFlags>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename DataSource_1<TData>::UpdateModeFlags>::get(), "AfterPreviousStep"));
      }
      // Autogenerated static field setter
      // Set static field: static public Oculus.Interaction.Input.DataSource`1/UpdateModeFlags<TData> AfterPreviousStep
      static void _set_AfterPreviousStep(typename ::Oculus::Interaction::Input::DataSource_1<TData>::UpdateModeFlags value) {
        static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Input::DataSource_1::UpdateModeFlags::_set_AfterPreviousStep");
        THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename DataSource_1<TData>::UpdateModeFlags>::get(), "AfterPreviousStep", value));
      }
      // Autogenerated instance field getter
      // Get instance field: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Input::DataSource_1::UpdateModeFlags::dyn_value__");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
    }; // Oculus.Interaction.Input.DataSource`1/UpdateModeFlags
    // Could not write size check! Type: Oculus.Interaction.Input.DataSource`1/UpdateModeFlags is generic, or has no fields that are valid for size checks!
    // WARNING Size may be invalid!
    // Autogenerated type: Oculus.Interaction.Input.DataSource`1/<>c
    // [TokenAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: FFFFFFFF
    class $$c : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject {
      public:
      using declaring_type = DataSource_1<TData>*;
      static constexpr std::string_view NESTED_NAME = "<>c";
      static constexpr bool IS_VALUE_TYPE = false;
      // Autogenerated static field getter
      // Get static field: static public readonly Oculus.Interaction.Input.DataSource`1/<>c<TData> <>9
      static typename ::Oculus::Interaction::Input::DataSource_1<TData>::$$c* _get_$$9() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Input::DataSource_1::$$c::_get_$$9");
        return THROW_UNLESS((il2cpp_utils::GetFieldValue<typename ::Oculus::Interaction::Input::DataSource_1<TData>::$$c*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename DataSource_1<TData>::$$c*>::get(), "<>9")));
      }
      // Autogenerated static field setter
      // Set static field: static public readonly Oculus.Interaction.Input.DataSource`1/<>c<TData> <>9
      static void _set_$$9(typename ::Oculus::Interaction::Input::DataSource_1<TData>::$$c* value) {
        static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Input::DataSource_1::$$c::_set_$$9");
        THROW_UNLESS((il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename DataSource_1<TData>::$$c*>::get(), "<>9", value)));
      }
      // Autogenerated static field getter
      // Get static field: static public System.Action <>9__34_0
      static ::System::Action* _get_$$9__34_0() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Input::DataSource_1::$$c::_get_$$9__34_0");
        return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Action*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename DataSource_1<TData>::$$c*>::get(), "<>9__34_0")));
      }
      // Autogenerated static field setter
      // Set static field: static public System.Action <>9__34_0
      static void _set_$$9__34_0(::System::Action* value) {
        static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Input::DataSource_1::$$c::_set_$$9__34_0");
        THROW_UNLESS((il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename DataSource_1<TData>::$$c*>::get(), "<>9__34_0", value)));
      }
      // static private System.Void .cctor()
      // Offset: 0xFFFFFFFFFFFFFFFF
      static void _cctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Input::DataSource_1::$$c::.cctor");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename DataSource_1<TData>::$$c*>::get(), ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFFFFFFFFFF
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename DataSource_1<TData>::$$c* New_ctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Input::DataSource_1::$$c::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename DataSource_1<TData>::$$c*, creationType>()));
      }
      // System.Void <.ctor>b__34_0()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void $_ctor$b__34_0() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Input::DataSource_1::$$c::<.ctor>b__34_0");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.ctor>b__34_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
    }; // Oculus.Interaction.Input.DataSource`1/<>c
    // Could not write size check! Type: Oculus.Interaction.Input.DataSource`1/<>c is generic, or has no fields that are valid for size checks!
    public:
    // protected System.Boolean _started
    // Size: 0x1
    // Offset: 0x0
    bool started;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _requiresUpdate
    // Size: 0x1
    // Offset: 0x0
    bool requiresUpdate;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private Oculus.Interaction.Input.DataSource`1/UpdateModeFlags<TData> _updateMode
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    typename ::Oculus::Interaction::Input::DataSource_1<TData>::UpdateModeFlags updateMode;
    // private UnityEngine.Object _updateAfter
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::Object* updateAfter;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.Input.IDataSource UpdateAfter
    // Size: 0x8
    // Offset: 0x0
    ::Oculus::Interaction::Input::IDataSource* UpdateAfter;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::IDataSource*) == 0x8);
    // private System.Int32 _currentDataVersion
    // Size: 0x4
    // Offset: 0x0
    int currentDataVersion;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Action InputDataAvailable
    // Size: 0x8
    // Offset: 0x0
    ::System::Action* InputDataAvailable;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::Input::IDataSource_1<TData>
    operator ::Oculus::Interaction::Input::IDataSource_1<TData>() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::Input::IDataSource_1<TData>*>(this);
    }
    // Autogenerated instance field getter
    // Get instance field: protected System.Boolean _started
    [[deprecated("Use field access instead!")]] bool& dyn__started() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Input::DataSource_1::dyn__started");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_started"))->offset;
      return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Boolean _requiresUpdate
    [[deprecated("Use field access instead!")]] bool& dyn__requiresUpdate() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Input::DataSource_1::dyn__requiresUpdate");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_requiresUpdate"))->offset;
      return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private Oculus.Interaction.Input.DataSource`1/UpdateModeFlags<TData> _updateMode
    [[deprecated("Use field access instead!")]] typename ::Oculus::Interaction::Input::DataSource_1<TData>::UpdateModeFlags& dyn__updateMode() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Input::DataSource_1::dyn__updateMode");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_updateMode"))->offset;
      return *reinterpret_cast<typename ::Oculus::Interaction::Input::DataSource_1<TData>::UpdateModeFlags*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private UnityEngine.Object _updateAfter
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__updateAfter() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Input::DataSource_1::dyn__updateAfter");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_updateAfter"))->offset;
      return *reinterpret_cast<::UnityEngine::Object**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private Oculus.Interaction.Input.IDataSource UpdateAfter
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::IDataSource*& dyn_UpdateAfter() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Input::DataSource_1::dyn_UpdateAfter");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "UpdateAfter"))->offset;
      return *reinterpret_cast<::Oculus::Interaction::Input::IDataSource**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 _currentDataVersion
    [[deprecated("Use field access instead!")]] int& dyn__currentDataVersion() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Input::DataSource_1::dyn__currentDataVersion");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_currentDataVersion"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Action InputDataAvailable
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_InputDataAvailable() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Input::DataSource_1::dyn_InputDataAvailable");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "InputDataAvailable"))->offset;
      return *reinterpret_cast<::System::Action**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Boolean get_Started()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_Started() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Input::DataSource_1::get_Started");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Started", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // public Oculus.Interaction.Input.DataSource`1/UpdateModeFlags<TData> get_UpdateMode()
    // Offset: 0xFFFFFFFFFFFFFFFF
    typename ::Oculus::Interaction::Input::DataSource_1<TData>::UpdateModeFlags get_UpdateMode() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Input::DataSource_1::get_UpdateMode");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_UpdateMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<typename ::Oculus::Interaction::Input::DataSource_1<TData>::UpdateModeFlags, false>(this, ___internal__method);
    }
    // protected System.Boolean get_UpdateModeAfterPrevious()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_UpdateModeAfterPrevious() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Input::DataSource_1::get_UpdateModeAfterPrevious");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_UpdateModeAfterPrevious", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // public System.Void add_InputDataAvailable(System.Action value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void add_InputDataAvailable(::System::Action* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Input::DataSource_1::add_InputDataAvailable");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Oculus::Interaction::Input::DataSource_1<TData>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Void remove_InputDataAvailable(System.Action value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void remove_InputDataAvailable(::System::Action* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Input::DataSource_1::remove_InputDataAvailable");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Oculus::Interaction::Input::DataSource_1<TData>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Int32 get_CurrentDataVersion()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_CurrentDataVersion() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Input::DataSource_1::get_CurrentDataVersion");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Oculus::Interaction::Input::DataSource_1<TData>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // protected System.Void Start()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Start() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Input::DataSource_1::Start");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Oculus::Interaction::Input::DataSource_1<TData>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // protected System.Void OnEnable()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnEnable() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Input::DataSource_1::OnEnable");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Oculus::Interaction::Input::DataSource_1<TData>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // protected System.Void OnDisable()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnDisable() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Input::DataSource_1::OnDisable");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Oculus::Interaction::Input::DataSource_1<TData>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // protected System.Void Update()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Update() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Input::DataSource_1::Update");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Oculus::Interaction::Input::DataSource_1<TData>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // protected System.Void FixedUpdate()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void FixedUpdate() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Input::DataSource_1::FixedUpdate");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Oculus::Interaction::Input::DataSource_1<TData>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // protected System.Void LateUpdate()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void LateUpdate() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Input::DataSource_1::LateUpdate");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Oculus::Interaction::Input::DataSource_1<TData>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // protected System.Void ResetUpdateAfter(Oculus.Interaction.Input.IDataSource updateAfter, Oculus.Interaction.Input.DataSource`1/UpdateModeFlags<TData> updateMode)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void ResetUpdateAfter(::Oculus::Interaction::Input::IDataSource* updateAfter, typename ::Oculus::Interaction::Input::DataSource_1<TData>::UpdateModeFlags updateMode) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Input::DataSource_1::ResetUpdateAfter");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetUpdateAfter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(updateAfter), ::il2cpp_utils::ExtractType(updateMode)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, updateAfter, updateMode);
    }
    // public TData GetData()
    // Offset: 0xFFFFFFFFFFFFFFFF
    TData GetData() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Input::DataSource_1::GetData");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Oculus::Interaction::Input::DataSource_1<TData>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<TData, false>(this, ___internal__method);
    }
    // protected System.Boolean RequiresUpdate()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool RequiresUpdate() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Input::DataSource_1::RequiresUpdate");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RequiresUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // public System.Void MarkInputDataRequiresUpdate()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void MarkInputDataRequiresUpdate() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Input::DataSource_1::MarkInputDataRequiresUpdate");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Oculus::Interaction::Input::DataSource_1<TData>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // protected System.Void UpdateData()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void UpdateData() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Input::DataSource_1::UpdateData");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Oculus::Interaction::Input::DataSource_1<TData>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // protected TData get_DataAsset()
    // Offset: 0xFFFFFFFFFFFFFFFF
    TData get_DataAsset() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Input::DataSource_1::get_DataAsset");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Oculus::Interaction::Input::DataSource_1<TData>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<TData, false>(this, ___internal__method);
    }
    // public System.Void InjectAllDataSource(Oculus.Interaction.Input.DataSource`1/UpdateModeFlags<TData> updateMode, Oculus.Interaction.Input.IDataSource updateAfter)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void InjectAllDataSource(typename ::Oculus::Interaction::Input::DataSource_1<TData>::UpdateModeFlags updateMode, ::Oculus::Interaction::Input::IDataSource* updateAfter) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Input::DataSource_1::InjectAllDataSource");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InjectAllDataSource", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(updateMode), ::il2cpp_utils::ExtractType(updateAfter)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, updateMode, updateAfter);
    }
    // public System.Void InjectUpdateMode(Oculus.Interaction.Input.DataSource`1/UpdateModeFlags<TData> updateMode)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void InjectUpdateMode(typename ::Oculus::Interaction::Input::DataSource_1<TData>::UpdateModeFlags updateMode) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Input::DataSource_1::InjectUpdateMode");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InjectUpdateMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(updateMode)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, updateMode);
    }
    // public System.Void InjectUpdateAfter(Oculus.Interaction.Input.IDataSource updateAfter)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void InjectUpdateAfter(::Oculus::Interaction::Input::IDataSource* updateAfter) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Input::DataSource_1::InjectUpdateAfter");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InjectUpdateAfter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(updateAfter)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, updateAfter);
    }
    // protected System.Void .ctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DataSource_1<TData>* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Input::DataSource_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DataSource_1<TData>*, creationType>()));
    }
  }; // Oculus.Interaction.Input.DataSource`1
  // Could not write size check! Type: Oculus.Interaction.Input.DataSource`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
