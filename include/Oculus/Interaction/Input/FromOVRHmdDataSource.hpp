// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Oculus.Interaction.Input.DataSource`1
#include "Oculus/Interaction/Input/DataSource_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction::Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: HmdDataAsset
  class HmdDataAsset;
  // Forward declaring type: IOVRCameraRigRef
  class IOVRCameraRigRef;
  // Forward declaring type: ITrackingToWorldTransformer
  class ITrackingToWorldTransformer;
  // Forward declaring type: HmdDataSourceConfig
  class HmdDataSourceConfig;
  // Skipping declaration: IDataSource because it is already included!
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Object because it is already included!
}
// Completed forward declares
// Type namespace: Oculus.Interaction.Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: FromOVRHmdDataSource
  class FromOVRHmdDataSource;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Input::FromOVRHmdDataSource);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Input::FromOVRHmdDataSource*, "Oculus.Interaction.Input", "FromOVRHmdDataSource");
// Type namespace: Oculus.Interaction.Input
namespace Oculus::Interaction::Input {
  // WARNING Size may be invalid!
  // Autogenerated type: Oculus.Interaction.Input.FromOVRHmdDataSource
  // [TokenAttribute] Offset: FFFFFFFF
  class FromOVRHmdDataSource : public ::Oculus::Interaction::Input::DataSource_1<::Oculus::Interaction::Input::HmdDataAsset*> {
    public:
    public:
    // private UnityEngine.Object _cameraRigRef
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Object* cameraRigRef;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.Input.IOVRCameraRigRef <CameraRigRef>k__BackingField
    // Size: 0x8
    // Offset: 0x50
    ::Oculus::Interaction::Input::IOVRCameraRigRef* CameraRigRef;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::IOVRCameraRigRef*) == 0x8);
    // private System.Boolean _processLateUpdates
    // Size: 0x1
    // Offset: 0x58
    bool processLateUpdates;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _useOvrManagerEmulatedPose
    // Size: 0x1
    // Offset: 0x59
    bool useOvrManagerEmulatedPose;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private UnityEngine.Object _trackingToWorldTransformer
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::Object* trackingToWorldTransformer;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.Input.ITrackingToWorldTransformer TrackingToWorldTransformer
    // Size: 0x8
    // Offset: 0x68
    ::Oculus::Interaction::Input::ITrackingToWorldTransformer* TrackingToWorldTransformer;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::ITrackingToWorldTransformer*) == 0x8);
    // private Oculus.Interaction.Input.HmdDataAsset _hmdDataAsset
    // Size: 0x8
    // Offset: 0x70
    ::Oculus::Interaction::Input::HmdDataAsset* hmdDataAsset;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::HmdDataAsset*) == 0x8);
    // private Oculus.Interaction.Input.HmdDataSourceConfig _config
    // Size: 0x8
    // Offset: 0x78
    ::Oculus::Interaction::Input::HmdDataSourceConfig* config;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::HmdDataSourceConfig*) == 0x8);
    public:
    // Get instance field reference: private UnityEngine.Object _cameraRigRef
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__cameraRigRef();
    // Get instance field reference: private Oculus.Interaction.Input.IOVRCameraRigRef <CameraRigRef>k__BackingField
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::IOVRCameraRigRef*& dyn_$CameraRigRef$k__BackingField();
    // Get instance field reference: private System.Boolean _processLateUpdates
    [[deprecated("Use field access instead!")]] bool& dyn__processLateUpdates();
    // Get instance field reference: private System.Boolean _useOvrManagerEmulatedPose
    [[deprecated("Use field access instead!")]] bool& dyn__useOvrManagerEmulatedPose();
    // Get instance field reference: private UnityEngine.Object _trackingToWorldTransformer
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__trackingToWorldTransformer();
    // Get instance field reference: private Oculus.Interaction.Input.ITrackingToWorldTransformer TrackingToWorldTransformer
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::ITrackingToWorldTransformer*& dyn_TrackingToWorldTransformer();
    // Get instance field reference: private Oculus.Interaction.Input.HmdDataAsset _hmdDataAsset
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::HmdDataAsset*& dyn__hmdDataAsset();
    // Get instance field reference: private Oculus.Interaction.Input.HmdDataSourceConfig _config
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::HmdDataSourceConfig*& dyn__config();
    // public Oculus.Interaction.Input.IOVRCameraRigRef get_CameraRigRef()
    // Offset: 0x4792808
    ::Oculus::Interaction::Input::IOVRCameraRigRef* get_CameraRigRef();
    // private System.Void set_CameraRigRef(Oculus.Interaction.Input.IOVRCameraRigRef value)
    // Offset: 0x4792810
    void set_CameraRigRef(::Oculus::Interaction::Input::IOVRCameraRigRef* value);
    // public System.Boolean get_ProcessLateUpdates()
    // Offset: 0x4792818
    bool get_ProcessLateUpdates();
    // public System.Void set_ProcessLateUpdates(System.Boolean value)
    // Offset: 0x4792820
    void set_ProcessLateUpdates(bool value);
    // protected System.Void Awake()
    // Offset: 0x479282C
    void Awake();
    // private System.Void HandleInputDataDirtied(System.Boolean isLateUpdate)
    // Offset: 0x4792B9C
    void HandleInputDataDirtied(bool isLateUpdate);
    // private Oculus.Interaction.Input.HmdDataSourceConfig get_Config()
    // Offset: 0x4792BBC
    ::Oculus::Interaction::Input::HmdDataSourceConfig* get_Config();
    // protected Oculus.Interaction.Input.HmdDataAsset get_DataAsset()
    // Offset: 0x4792F74
    ::Oculus::Interaction::Input::HmdDataAsset* get_DataAsset();
    // public System.Void InjectAllFromOVRHmdDataSource(Oculus.Interaction.Input.DataSource`1/UpdateModeFlags<Oculus.Interaction.Input.HmdDataAsset> updateMode, Oculus.Interaction.Input.IDataSource updateAfter, System.Boolean useOvrManagerEmulatedPose, Oculus.Interaction.Input.ITrackingToWorldTransformer trackingToWorldTransformer)
    // Offset: 0x4792F7C
    void InjectAllFromOVRHmdDataSource(typename ::Oculus::Interaction::Input::DataSource_1<::Oculus::Interaction::Input::HmdDataAsset*>::UpdateModeFlags updateMode, ::Oculus::Interaction::Input::IDataSource* updateAfter, bool useOvrManagerEmulatedPose, ::Oculus::Interaction::Input::ITrackingToWorldTransformer* trackingToWorldTransformer);
    // public System.Void InjectUseOvrManagerEmulatedPose(System.Boolean useOvrManagerEmulatedPose)
    // Offset: 0x47930D0
    void InjectUseOvrManagerEmulatedPose(bool useOvrManagerEmulatedPose);
    // public System.Void InjectTrackingToWorldTransformer(Oculus.Interaction.Input.ITrackingToWorldTransformer trackingToWorldTransformer)
    // Offset: 0x4793000
    void InjectTrackingToWorldTransformer(::Oculus::Interaction::Input::ITrackingToWorldTransformer* trackingToWorldTransformer);
    // public System.Void .ctor()
    // Offset: 0x47930DC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FromOVRHmdDataSource* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Input::FromOVRHmdDataSource::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FromOVRHmdDataSource*, creationType>()));
    }
    // private System.Void <Start>b__15_0()
    // Offset: 0x4793164
    void $Start$b__15_0();
    // protected override System.Void Start()
    // Offset: 0x47928CC
    // Implemented from: Oculus.Interaction.Input.DataSource`1
    // Base method: System.Void DataSource_1::Start()
    void Start();
    // protected override System.Void OnEnable()
    // Offset: 0x4792968
    // Implemented from: Oculus.Interaction.Input.DataSource`1
    // Base method: System.Void DataSource_1::OnEnable()
    void OnEnable();
    // protected override System.Void OnDisable()
    // Offset: 0x4792A88
    // Implemented from: Oculus.Interaction.Input.DataSource`1
    // Base method: System.Void DataSource_1::OnDisable()
    void OnDisable();
    // protected override System.Void UpdateData()
    // Offset: 0x4792C48
    // Implemented from: Oculus.Interaction.Input.DataSource`1
    // Base method: System.Void DataSource_1::UpdateData()
    void UpdateData();
  }; // Oculus.Interaction.Input.FromOVRHmdDataSource
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRHmdDataSource::get_CameraRigRef
// Il2CppName: get_CameraRigRef
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Input::IOVRCameraRigRef* (Oculus::Interaction::Input::FromOVRHmdDataSource::*)()>(&Oculus::Interaction::Input::FromOVRHmdDataSource::get_CameraRigRef)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromOVRHmdDataSource*), "get_CameraRigRef", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRHmdDataSource::set_CameraRigRef
// Il2CppName: set_CameraRigRef
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::FromOVRHmdDataSource::*)(::Oculus::Interaction::Input::IOVRCameraRigRef*)>(&Oculus::Interaction::Input::FromOVRHmdDataSource::set_CameraRigRef)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IOVRCameraRigRef")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromOVRHmdDataSource*), "set_CameraRigRef", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRHmdDataSource::get_ProcessLateUpdates
// Il2CppName: get_ProcessLateUpdates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Input::FromOVRHmdDataSource::*)()>(&Oculus::Interaction::Input::FromOVRHmdDataSource::get_ProcessLateUpdates)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromOVRHmdDataSource*), "get_ProcessLateUpdates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRHmdDataSource::set_ProcessLateUpdates
// Il2CppName: set_ProcessLateUpdates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::FromOVRHmdDataSource::*)(bool)>(&Oculus::Interaction::Input::FromOVRHmdDataSource::set_ProcessLateUpdates)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromOVRHmdDataSource*), "set_ProcessLateUpdates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRHmdDataSource::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::FromOVRHmdDataSource::*)()>(&Oculus::Interaction::Input::FromOVRHmdDataSource::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromOVRHmdDataSource*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRHmdDataSource::HandleInputDataDirtied
// Il2CppName: HandleInputDataDirtied
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::FromOVRHmdDataSource::*)(bool)>(&Oculus::Interaction::Input::FromOVRHmdDataSource::HandleInputDataDirtied)> {
  static const MethodInfo* get() {
    static auto* isLateUpdate = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromOVRHmdDataSource*), "HandleInputDataDirtied", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isLateUpdate});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRHmdDataSource::get_Config
// Il2CppName: get_Config
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Input::HmdDataSourceConfig* (Oculus::Interaction::Input::FromOVRHmdDataSource::*)()>(&Oculus::Interaction::Input::FromOVRHmdDataSource::get_Config)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromOVRHmdDataSource*), "get_Config", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRHmdDataSource::get_DataAsset
// Il2CppName: get_DataAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Input::HmdDataAsset* (Oculus::Interaction::Input::FromOVRHmdDataSource::*)()>(&Oculus::Interaction::Input::FromOVRHmdDataSource::get_DataAsset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromOVRHmdDataSource*), "get_DataAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRHmdDataSource::InjectAllFromOVRHmdDataSource
// Il2CppName: InjectAllFromOVRHmdDataSource
// Cannot write MetadataGetter for a method that has a nested type with a declaring generic type anywhere within it!
// Talk to sc2ad if this is something you want
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRHmdDataSource::InjectUseOvrManagerEmulatedPose
// Il2CppName: InjectUseOvrManagerEmulatedPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::FromOVRHmdDataSource::*)(bool)>(&Oculus::Interaction::Input::FromOVRHmdDataSource::InjectUseOvrManagerEmulatedPose)> {
  static const MethodInfo* get() {
    static auto* useOvrManagerEmulatedPose = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromOVRHmdDataSource*), "InjectUseOvrManagerEmulatedPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{useOvrManagerEmulatedPose});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRHmdDataSource::InjectTrackingToWorldTransformer
// Il2CppName: InjectTrackingToWorldTransformer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::FromOVRHmdDataSource::*)(::Oculus::Interaction::Input::ITrackingToWorldTransformer*)>(&Oculus::Interaction::Input::FromOVRHmdDataSource::InjectTrackingToWorldTransformer)> {
  static const MethodInfo* get() {
    static auto* trackingToWorldTransformer = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "ITrackingToWorldTransformer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromOVRHmdDataSource*), "InjectTrackingToWorldTransformer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trackingToWorldTransformer});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRHmdDataSource::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRHmdDataSource::$Start$b__15_0
// Il2CppName: <Start>b__15_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::FromOVRHmdDataSource::*)()>(&Oculus::Interaction::Input::FromOVRHmdDataSource::$Start$b__15_0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromOVRHmdDataSource*), "<Start>b__15_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRHmdDataSource::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::FromOVRHmdDataSource::*)()>(&Oculus::Interaction::Input::FromOVRHmdDataSource::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromOVRHmdDataSource*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRHmdDataSource::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::FromOVRHmdDataSource::*)()>(&Oculus::Interaction::Input::FromOVRHmdDataSource::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromOVRHmdDataSource*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRHmdDataSource::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::FromOVRHmdDataSource::*)()>(&Oculus::Interaction::Input::FromOVRHmdDataSource::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromOVRHmdDataSource*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRHmdDataSource::UpdateData
// Il2CppName: UpdateData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::FromOVRHmdDataSource::*)()>(&Oculus::Interaction::Input::FromOVRHmdDataSource::UpdateData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromOVRHmdDataSource*), "UpdateData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
