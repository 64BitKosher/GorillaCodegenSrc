// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Oculus.Interaction.Input.Hand
#include "Oculus/Interaction/Input/Hand.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction::Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: HandDataAsset
  class HandDataAsset;
  // Skipping declaration: IDataSource because it is already included!
}
// Completed forward declares
// Type namespace: Oculus.Interaction.Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: JointRotationHistoryHand
  class JointRotationHistoryHand;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Input::JointRotationHistoryHand);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Input::JointRotationHistoryHand*, "Oculus.Interaction.Input", "JointRotationHistoryHand");
// Type namespace: Oculus.Interaction.Input
namespace Oculus::Interaction::Input {
  // WARNING Size may be invalid!
  // Autogenerated type: Oculus.Interaction.Input.JointRotationHistoryHand
  // [TokenAttribute] Offset: FFFFFFFF
  class JointRotationHistoryHand : public ::Oculus::Interaction::Input::Hand {
    public:
    public:
    // private System.Int32 _historyLength
    // Size: 0x4
    // Offset: 0x80
    int historyLength;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _historyOffset
    // Size: 0x4
    // Offset: 0x84
    int historyOffset;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Quaternion[][] _jointHistory
    // Size: 0x8
    // Offset: 0x88
    ::ArrayW<::ArrayW<::UnityEngine::Quaternion>> jointHistory;
    // Field size check
    static_assert(sizeof(::ArrayW<::ArrayW<::UnityEngine::Quaternion>>) == 0x8);
    // private System.Int32 _historyIndex
    // Size: 0x4
    // Offset: 0x90
    int historyIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _capturedDataVersion
    // Size: 0x4
    // Offset: 0x94
    int capturedDataVersion;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: private System.Int32 _historyLength
    [[deprecated("Use field access instead!")]] int& dyn__historyLength();
    // Get instance field reference: private System.Int32 _historyOffset
    [[deprecated("Use field access instead!")]] int& dyn__historyOffset();
    // Get instance field reference: private UnityEngine.Quaternion[][] _jointHistory
    [[deprecated("Use field access instead!")]] ::ArrayW<::ArrayW<::UnityEngine::Quaternion>>& dyn__jointHistory();
    // Get instance field reference: private System.Int32 _historyIndex
    [[deprecated("Use field access instead!")]] int& dyn__historyIndex();
    // Get instance field reference: private System.Int32 _capturedDataVersion
    [[deprecated("Use field access instead!")]] int& dyn__capturedDataVersion();
    // public System.Void SetHistoryOffset(System.Int32 offset)
    // Offset: 0x48141A8
    void SetHistoryOffset(int offset);
    // public System.Void InjectAllJointHistoryHand(Oculus.Interaction.Input.DataSource`1/UpdateModeFlags<Oculus.Interaction.Input.HandDataAsset> updateMode, Oculus.Interaction.Input.IDataSource updateAfter, Oculus.Interaction.Input.DataModifier`1<Oculus.Interaction.Input.HandDataAsset> modifyDataFromSource, System.Boolean applyModifier, System.Int32 historyLength, System.Int32 historyOffset)
    // Offset: 0x48141BC
    void InjectAllJointHistoryHand(typename ::Oculus::Interaction::Input::DataSource_1<::Oculus::Interaction::Input::HandDataAsset*>::UpdateModeFlags updateMode, ::Oculus::Interaction::Input::IDataSource* updateAfter, ::Oculus::Interaction::Input::DataModifier_1<::Oculus::Interaction::Input::HandDataAsset*>* modifyDataFromSource, bool applyModifier, int historyLength, int historyOffset);
    // public System.Void InjectHistoryLength(System.Int32 historyLength)
    // Offset: 0x48141F8
    void InjectHistoryLength(int historyLength);
    // protected override System.Void Start()
    // Offset: 0x4813DE4
    // Implemented from: Oculus.Interaction.Input.DataModifier`1
    // Base method: System.Void DataModifier_1::Start()
    void Start();
    // protected override System.Void Apply(Oculus.Interaction.Input.HandDataAsset data)
    // Offset: 0x4813F34
    // Implemented from: Oculus.Interaction.Input.Hand
    // Base method: System.Void Hand::Apply(Oculus.Interaction.Input.HandDataAsset data)
    void Apply(::Oculus::Interaction::Input::HandDataAsset* data);
    // public System.Void .ctor()
    // Offset: 0x4814200
    // Implemented from: Oculus.Interaction.Input.Hand
    // Base method: System.Void Hand::.ctor()
    // Base method: System.Void DataModifier_1::.ctor()
    // Base method: System.Void DataSource_1::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static JointRotationHistoryHand* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Input::JointRotationHistoryHand::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<JointRotationHistoryHand*, creationType>()));
    }
  }; // Oculus.Interaction.Input.JointRotationHistoryHand
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Input::JointRotationHistoryHand::SetHistoryOffset
// Il2CppName: SetHistoryOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::JointRotationHistoryHand::*)(int)>(&Oculus::Interaction::Input::JointRotationHistoryHand::SetHistoryOffset)> {
  static const MethodInfo* get() {
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::JointRotationHistoryHand*), "SetHistoryOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{offset});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::JointRotationHistoryHand::InjectAllJointHistoryHand
// Il2CppName: InjectAllJointHistoryHand
// Cannot write MetadataGetter for a method that has a nested type with a declaring generic type anywhere within it!
// Talk to sc2ad if this is something you want
// Writing MetadataGetter for method: Oculus::Interaction::Input::JointRotationHistoryHand::InjectHistoryLength
// Il2CppName: InjectHistoryLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::JointRotationHistoryHand::*)(int)>(&Oculus::Interaction::Input::JointRotationHistoryHand::InjectHistoryLength)> {
  static const MethodInfo* get() {
    static auto* historyLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::JointRotationHistoryHand*), "InjectHistoryLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{historyLength});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::JointRotationHistoryHand::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::JointRotationHistoryHand::*)()>(&Oculus::Interaction::Input::JointRotationHistoryHand::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::JointRotationHistoryHand*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::JointRotationHistoryHand::Apply
// Il2CppName: Apply
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::JointRotationHistoryHand::*)(::Oculus::Interaction::Input::HandDataAsset*)>(&Oculus::Interaction::Input::JointRotationHistoryHand::Apply)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "HandDataAsset")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::JointRotationHistoryHand*), "Apply", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::JointRotationHistoryHand::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
