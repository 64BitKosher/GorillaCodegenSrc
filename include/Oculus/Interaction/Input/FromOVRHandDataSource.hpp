// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Oculus.Interaction.Input.DataSource`1
#include "Oculus/Interaction/Input/DataSource_1.hpp"
// Including type: Oculus.Interaction.Input.Handedness
#include "Oculus/Interaction/Input/Handedness.hpp"
// Including type: OVRInput/Controller
#include "GlobalNamespace/OVRInput.hpp"
// Including type: OVRSkeleton
#include "GlobalNamespace/OVRSkeleton.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction::Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: HandDataAsset
  class HandDataAsset;
  // Forward declaring type: ITrackingToWorldTransformer
  class ITrackingToWorldTransformer;
  // Forward declaring type: IHandSkeletonProvider
  class IHandSkeletonProvider;
  // Forward declaring type: HandDataSourceConfig
  class HandDataSourceConfig;
  // Forward declaring type: IOVRCameraRigRef
  class IOVRCameraRigRef;
  // Skipping declaration: IDataSource because it is already included!
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Object because it is already included!
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: OVRHand
  class OVRHand;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: FromOVRHandDataSource
  class FromOVRHandDataSource;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Input::FromOVRHandDataSource);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Input::FromOVRHandDataSource*, "Oculus.Interaction.Input", "FromOVRHandDataSource");
// Type namespace: Oculus.Interaction.Input
namespace Oculus::Interaction::Input {
  // WARNING Size may be invalid!
  // Autogenerated type: Oculus.Interaction.Input.FromOVRHandDataSource
  // [TokenAttribute] Offset: FFFFFFFF
  class FromOVRHandDataSource : public ::Oculus::Interaction::Input::DataSource_1<::Oculus::Interaction::Input::HandDataAsset*> {
    public:
    public:
    // private UnityEngine.Object _cameraRigRef
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Object* cameraRigRef;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private System.Boolean _processLateUpdates
    // Size: 0x1
    // Offset: 0x50
    bool processLateUpdates;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private Oculus.Interaction.Input.Handedness _handedness
    // Size: 0x4
    // Offset: 0x54
    ::Oculus::Interaction::Input::Handedness handedness;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::Handedness) == 0x4);
    // private UnityEngine.Object _trackingToWorldTransformer
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::Object* trackingToWorldTransformer;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.Input.ITrackingToWorldTransformer TrackingToWorldTransformer
    // Size: 0x8
    // Offset: 0x60
    ::Oculus::Interaction::Input::ITrackingToWorldTransformer* TrackingToWorldTransformer;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::ITrackingToWorldTransformer*) == 0x8);
    // private UnityEngine.Object _handSkeletonProvider
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::Object* handSkeletonProvider;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.Input.IHandSkeletonProvider HandSkeletonProvider
    // Size: 0x8
    // Offset: 0x70
    ::Oculus::Interaction::Input::IHandSkeletonProvider* HandSkeletonProvider;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::IHandSkeletonProvider*) == 0x8);
    // private readonly Oculus.Interaction.Input.HandDataAsset _handDataAsset
    // Size: 0x8
    // Offset: 0x78
    ::Oculus::Interaction::Input::HandDataAsset* handDataAsset;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::HandDataAsset*) == 0x8);
    // private OVRHand _ovrHand
    // Size: 0x8
    // Offset: 0x80
    ::GlobalNamespace::OVRHand* ovrHand;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRHand*) == 0x8);
    // private OVRInput/Controller _ovrController
    // Size: 0x4
    // Offset: 0x88
    ::GlobalNamespace::OVRInput::Controller ovrController;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRInput::Controller) == 0x4);
    // private System.Single _lastHandScale
    // Size: 0x4
    // Offset: 0x8C
    float lastHandScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private Oculus.Interaction.Input.HandDataSourceConfig _config
    // Size: 0x8
    // Offset: 0x90
    ::Oculus::Interaction::Input::HandDataSourceConfig* config;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::HandDataSourceConfig*) == 0x8);
    // private Oculus.Interaction.Input.IOVRCameraRigRef CameraRigRef
    // Size: 0x8
    // Offset: 0x98
    ::Oculus::Interaction::Input::IOVRCameraRigRef* CameraRigRef;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::IOVRCameraRigRef*) == 0x8);
    public:
    // Get static field: static private readonly UnityEngine.Quaternion <WristFixupRotation>k__BackingField
    static ::UnityEngine::Quaternion _get_$WristFixupRotation$k__BackingField();
    // Set static field: static private readonly UnityEngine.Quaternion <WristFixupRotation>k__BackingField
    static void _set_$WristFixupRotation$k__BackingField(::UnityEngine::Quaternion value);
    // Get instance field reference: private UnityEngine.Object _cameraRigRef
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__cameraRigRef();
    // Get instance field reference: private System.Boolean _processLateUpdates
    [[deprecated("Use field access instead!")]] bool& dyn__processLateUpdates();
    // Get instance field reference: private Oculus.Interaction.Input.Handedness _handedness
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::Handedness& dyn__handedness();
    // Get instance field reference: private UnityEngine.Object _trackingToWorldTransformer
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__trackingToWorldTransformer();
    // Get instance field reference: private Oculus.Interaction.Input.ITrackingToWorldTransformer TrackingToWorldTransformer
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::ITrackingToWorldTransformer*& dyn_TrackingToWorldTransformer();
    // Get instance field reference: private UnityEngine.Object _handSkeletonProvider
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__handSkeletonProvider();
    // Get instance field reference: private Oculus.Interaction.Input.IHandSkeletonProvider HandSkeletonProvider
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::IHandSkeletonProvider*& dyn_HandSkeletonProvider();
    // Get instance field reference: private readonly Oculus.Interaction.Input.HandDataAsset _handDataAsset
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::HandDataAsset*& dyn__handDataAsset();
    // Get instance field reference: private OVRHand _ovrHand
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRHand*& dyn__ovrHand();
    // Get instance field reference: private OVRInput/Controller _ovrController
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRInput::Controller& dyn__ovrController();
    // Get instance field reference: private System.Single _lastHandScale
    [[deprecated("Use field access instead!")]] float& dyn__lastHandScale();
    // Get instance field reference: private Oculus.Interaction.Input.HandDataSourceConfig _config
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::HandDataSourceConfig*& dyn__config();
    // Get instance field reference: private Oculus.Interaction.Input.IOVRCameraRigRef CameraRigRef
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::IOVRCameraRigRef*& dyn_CameraRigRef();
    // public System.Boolean get_ProcessLateUpdates()
    // Offset: 0x4791744
    bool get_ProcessLateUpdates();
    // public System.Void set_ProcessLateUpdates(System.Boolean value)
    // Offset: 0x479174C
    void set_ProcessLateUpdates(bool value);
    // protected Oculus.Interaction.Input.HandDataAsset get_DataAsset()
    // Offset: 0x4791758
    ::Oculus::Interaction::Input::HandDataAsset* get_DataAsset();
    // static public UnityEngine.Quaternion get_WristFixupRotation()
    // Offset: 0x4791760
    static ::UnityEngine::Quaternion get_WristFixupRotation();
    // protected System.Void Awake()
    // Offset: 0x47917BC
    void Awake();
    // private System.Void HandleInputDataDirtied(System.Boolean isLateUpdate)
    // Offset: 0x4791D94
    void HandleInputDataDirtied(bool isLateUpdate);
    // private Oculus.Interaction.Input.HandDataSourceConfig get_Config()
    // Offset: 0x4791DB4
    ::Oculus::Interaction::Input::HandDataSourceConfig* get_Config();
    // private System.Void UpdateConfig()
    // Offset: 0x47918C8
    void UpdateConfig();
    // private System.Void UpdateDataPoses(OVRSkeleton/SkeletonPoseData poseData)
    // Offset: 0x4792114
    void UpdateDataPoses(::GlobalNamespace::OVRSkeleton::SkeletonPoseData poseData);
    // public System.Void InjectAllFromOVRHandDataSource(Oculus.Interaction.Input.DataSource`1/UpdateModeFlags<Oculus.Interaction.Input.HandDataAsset> updateMode, Oculus.Interaction.Input.IDataSource updateAfter, Oculus.Interaction.Input.Handedness handedness, Oculus.Interaction.Input.ITrackingToWorldTransformer trackingToWorldTransformer, Oculus.Interaction.Input.IHandSkeletonProvider handSkeletonProvider)
    // Offset: 0x47924A8
    void InjectAllFromOVRHandDataSource(typename ::Oculus::Interaction::Input::DataSource_1<::Oculus::Interaction::Input::HandDataAsset*>::UpdateModeFlags updateMode, ::Oculus::Interaction::Input::IDataSource* updateAfter, ::Oculus::Interaction::Input::Handedness handedness, ::Oculus::Interaction::Input::ITrackingToWorldTransformer* trackingToWorldTransformer, ::Oculus::Interaction::Input::IHandSkeletonProvider* handSkeletonProvider);
    // public System.Void InjectHandedness(Oculus.Interaction.Input.Handedness handedness)
    // Offset: 0x47926E0
    void InjectHandedness(::Oculus::Interaction::Input::Handedness handedness);
    // public System.Void InjectTrackingToWorldTransformer(Oculus.Interaction.Input.ITrackingToWorldTransformer trackingToWorldTransformer)
    // Offset: 0x4792540
    void InjectTrackingToWorldTransformer(::Oculus::Interaction::Input::ITrackingToWorldTransformer* trackingToWorldTransformer);
    // public System.Void InjectHandSkeletonProvider(Oculus.Interaction.Input.IHandSkeletonProvider handSkeletonProvider)
    // Offset: 0x4792610
    void InjectHandSkeletonProvider(::Oculus::Interaction::Input::IHandSkeletonProvider* handSkeletonProvider);
    // public System.Void .ctor()
    // Offset: 0x47926E8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FromOVRHandDataSource* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Input::FromOVRHandDataSource::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FromOVRHandDataSource*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x4792770
    static void _cctor();
    // private System.Void <Start>b__22_0()
    // Offset: 0x47927C0
    void $Start$b__22_0();
    // protected override System.Void Start()
    // Offset: 0x47919BC
    // Implemented from: Oculus.Interaction.Input.DataSource`1
    // Base method: System.Void DataSource_1::Start()
    void Start();
    // protected override System.Void OnEnable()
    // Offset: 0x4791B60
    // Implemented from: Oculus.Interaction.Input.DataSource`1
    // Base method: System.Void DataSource_1::OnEnable()
    void OnEnable();
    // protected override System.Void OnDisable()
    // Offset: 0x4791C80
    // Implemented from: Oculus.Interaction.Input.DataSource`1
    // Base method: System.Void DataSource_1::OnDisable()
    void OnDisable();
    // protected override System.Void UpdateData()
    // Offset: 0x4791E38
    // Implemented from: Oculus.Interaction.Input.DataSource`1
    // Base method: System.Void DataSource_1::UpdateData()
    void UpdateData();
  }; // Oculus.Interaction.Input.FromOVRHandDataSource
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRHandDataSource::get_ProcessLateUpdates
// Il2CppName: get_ProcessLateUpdates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Input::FromOVRHandDataSource::*)()>(&Oculus::Interaction::Input::FromOVRHandDataSource::get_ProcessLateUpdates)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromOVRHandDataSource*), "get_ProcessLateUpdates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRHandDataSource::set_ProcessLateUpdates
// Il2CppName: set_ProcessLateUpdates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::FromOVRHandDataSource::*)(bool)>(&Oculus::Interaction::Input::FromOVRHandDataSource::set_ProcessLateUpdates)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromOVRHandDataSource*), "set_ProcessLateUpdates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRHandDataSource::get_DataAsset
// Il2CppName: get_DataAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Input::HandDataAsset* (Oculus::Interaction::Input::FromOVRHandDataSource::*)()>(&Oculus::Interaction::Input::FromOVRHandDataSource::get_DataAsset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromOVRHandDataSource*), "get_DataAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRHandDataSource::get_WristFixupRotation
// Il2CppName: get_WristFixupRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (*)()>(&Oculus::Interaction::Input::FromOVRHandDataSource::get_WristFixupRotation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromOVRHandDataSource*), "get_WristFixupRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRHandDataSource::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::FromOVRHandDataSource::*)()>(&Oculus::Interaction::Input::FromOVRHandDataSource::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromOVRHandDataSource*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRHandDataSource::HandleInputDataDirtied
// Il2CppName: HandleInputDataDirtied
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::FromOVRHandDataSource::*)(bool)>(&Oculus::Interaction::Input::FromOVRHandDataSource::HandleInputDataDirtied)> {
  static const MethodInfo* get() {
    static auto* isLateUpdate = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromOVRHandDataSource*), "HandleInputDataDirtied", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isLateUpdate});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRHandDataSource::get_Config
// Il2CppName: get_Config
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Input::HandDataSourceConfig* (Oculus::Interaction::Input::FromOVRHandDataSource::*)()>(&Oculus::Interaction::Input::FromOVRHandDataSource::get_Config)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromOVRHandDataSource*), "get_Config", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRHandDataSource::UpdateConfig
// Il2CppName: UpdateConfig
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::FromOVRHandDataSource::*)()>(&Oculus::Interaction::Input::FromOVRHandDataSource::UpdateConfig)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromOVRHandDataSource*), "UpdateConfig", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRHandDataSource::UpdateDataPoses
// Il2CppName: UpdateDataPoses
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::FromOVRHandDataSource::*)(::GlobalNamespace::OVRSkeleton::SkeletonPoseData)>(&Oculus::Interaction::Input::FromOVRHandDataSource::UpdateDataPoses)> {
  static const MethodInfo* get() {
    static auto* poseData = &::il2cpp_utils::GetClassFromName("", "OVRSkeleton/SkeletonPoseData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromOVRHandDataSource*), "UpdateDataPoses", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{poseData});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRHandDataSource::InjectAllFromOVRHandDataSource
// Il2CppName: InjectAllFromOVRHandDataSource
// Cannot write MetadataGetter for a method that has a nested type with a declaring generic type anywhere within it!
// Talk to sc2ad if this is something you want
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRHandDataSource::InjectHandedness
// Il2CppName: InjectHandedness
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::FromOVRHandDataSource::*)(::Oculus::Interaction::Input::Handedness)>(&Oculus::Interaction::Input::FromOVRHandDataSource::InjectHandedness)> {
  static const MethodInfo* get() {
    static auto* handedness = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "Handedness")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromOVRHandDataSource*), "InjectHandedness", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handedness});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRHandDataSource::InjectTrackingToWorldTransformer
// Il2CppName: InjectTrackingToWorldTransformer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::FromOVRHandDataSource::*)(::Oculus::Interaction::Input::ITrackingToWorldTransformer*)>(&Oculus::Interaction::Input::FromOVRHandDataSource::InjectTrackingToWorldTransformer)> {
  static const MethodInfo* get() {
    static auto* trackingToWorldTransformer = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "ITrackingToWorldTransformer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromOVRHandDataSource*), "InjectTrackingToWorldTransformer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trackingToWorldTransformer});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRHandDataSource::InjectHandSkeletonProvider
// Il2CppName: InjectHandSkeletonProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::FromOVRHandDataSource::*)(::Oculus::Interaction::Input::IHandSkeletonProvider*)>(&Oculus::Interaction::Input::FromOVRHandDataSource::InjectHandSkeletonProvider)> {
  static const MethodInfo* get() {
    static auto* handSkeletonProvider = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHandSkeletonProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromOVRHandDataSource*), "InjectHandSkeletonProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handSkeletonProvider});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRHandDataSource::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRHandDataSource::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Oculus::Interaction::Input::FromOVRHandDataSource::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromOVRHandDataSource*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRHandDataSource::$Start$b__22_0
// Il2CppName: <Start>b__22_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::FromOVRHandDataSource::*)()>(&Oculus::Interaction::Input::FromOVRHandDataSource::$Start$b__22_0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromOVRHandDataSource*), "<Start>b__22_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRHandDataSource::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::FromOVRHandDataSource::*)()>(&Oculus::Interaction::Input::FromOVRHandDataSource::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromOVRHandDataSource*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRHandDataSource::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::FromOVRHandDataSource::*)()>(&Oculus::Interaction::Input::FromOVRHandDataSource::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromOVRHandDataSource*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRHandDataSource::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::FromOVRHandDataSource::*)()>(&Oculus::Interaction::Input::FromOVRHandDataSource::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromOVRHandDataSource*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRHandDataSource::UpdateData
// Il2CppName: UpdateData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::FromOVRHandDataSource::*)()>(&Oculus::Interaction::Input::FromOVRHandDataSource::UpdateData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromOVRHandDataSource*), "UpdateData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
