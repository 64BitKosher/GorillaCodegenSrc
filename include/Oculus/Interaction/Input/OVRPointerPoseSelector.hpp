// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Pose
#include "UnityEngine/Pose.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction::Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: Handedness
  struct Handedness;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: OVRPointerPoseSelector
  struct OVRPointerPoseSelector;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Input::OVRPointerPoseSelector, "Oculus.Interaction.Input", "OVRPointerPoseSelector");
// Type namespace: Oculus.Interaction.Input
namespace Oculus::Interaction::Input {
  // Size: 0x1C
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Oculus.Interaction.Input.OVRPointerPoseSelector
  // [TokenAttribute] Offset: FFFFFFFF
  struct OVRPointerPoseSelector/*, public ::System::ValueType*/ {
    public:
    public:
    // private UnityEngine.Pose <LocalPointerPose>k__BackingField
    // Size: 0x1C
    // Offset: 0x0
    ::UnityEngine::Pose LocalPointerPose;
    // Field size check
    static_assert(sizeof(::UnityEngine::Pose) == 0x1C);
    public:
    // Creating value type constructor for type: OVRPointerPoseSelector
    constexpr OVRPointerPoseSelector(::UnityEngine::Pose LocalPointerPose_ = {}) noexcept : LocalPointerPose{LocalPointerPose_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating conversion operator: operator ::UnityEngine::Pose
    constexpr operator ::UnityEngine::Pose() const noexcept {
      return LocalPointerPose;
    }
    // Get static field: static private readonly UnityEngine.Pose[] QUEST1_POINTERS
    static ::ArrayW<::UnityEngine::Pose> _get_QUEST1_POINTERS();
    // Set static field: static private readonly UnityEngine.Pose[] QUEST1_POINTERS
    static void _set_QUEST1_POINTERS(::ArrayW<::UnityEngine::Pose> value);
    // Get static field: static private readonly UnityEngine.Pose[] QUEST2_POINTERS
    static ::ArrayW<::UnityEngine::Pose> _get_QUEST2_POINTERS();
    // Set static field: static private readonly UnityEngine.Pose[] QUEST2_POINTERS
    static void _set_QUEST2_POINTERS(::ArrayW<::UnityEngine::Pose> value);
    // Get instance field reference: private UnityEngine.Pose <LocalPointerPose>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Pose& dyn_$LocalPointerPose$k__BackingField();
    // public UnityEngine.Pose get_LocalPointerPose()
    // Offset: 0x478F290
    ::UnityEngine::Pose get_LocalPointerPose();
    // private System.Void set_LocalPointerPose(UnityEngine.Pose value)
    // Offset: 0x478F2A4
    void set_LocalPointerPose(::UnityEngine::Pose value);
    // public System.Void .ctor(Oculus.Interaction.Input.Handedness handedness)
    // Offset: 0x478F2C0
    OVRPointerPoseSelector(::Oculus::Interaction::Input::Handedness handedness);
    // static private System.Void .cctor()
    // Offset: 0x478F3C0
    static void _cctor();
  }; // Oculus.Interaction.Input.OVRPointerPoseSelector
  #pragma pack(pop)
  static check_size<sizeof(OVRPointerPoseSelector), 0 + sizeof(::UnityEngine::Pose)> __Oculus_Interaction_Input_OVRPointerPoseSelectorSizeCheck;
  static_assert(sizeof(OVRPointerPoseSelector) == 0x1C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Input::OVRPointerPoseSelector::get_LocalPointerPose
// Il2CppName: get_LocalPointerPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Pose (Oculus::Interaction::Input::OVRPointerPoseSelector::*)()>(&Oculus::Interaction::Input::OVRPointerPoseSelector::get_LocalPointerPose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::OVRPointerPoseSelector), "get_LocalPointerPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::OVRPointerPoseSelector::set_LocalPointerPose
// Il2CppName: set_LocalPointerPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::OVRPointerPoseSelector::*)(::UnityEngine::Pose)>(&Oculus::Interaction::Input::OVRPointerPoseSelector::set_LocalPointerPose)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::OVRPointerPoseSelector), "set_LocalPointerPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::OVRPointerPoseSelector::OVRPointerPoseSelector
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Interaction::Input::OVRPointerPoseSelector::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Oculus::Interaction::Input::OVRPointerPoseSelector::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::OVRPointerPoseSelector), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
