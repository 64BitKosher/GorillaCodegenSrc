// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Oculus.Interaction.Input.IButton
#include "Oculus/Interaction/Input/IButton.hpp"
// Including type: OVRInput/Controller
#include "GlobalNamespace/OVRInput.hpp"
// Including type: OVRInput/Touch
#include "GlobalNamespace/OVRInput_Touch.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: Oculus.Interaction.Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: OVRTouch
  class OVRTouch;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Input::OVRTouch);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Input::OVRTouch*, "Oculus.Interaction.Input", "OVRTouch");
// Type namespace: Oculus.Interaction.Input
namespace Oculus::Interaction::Input {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.Input.OVRTouch
  // [TokenAttribute] Offset: FFFFFFFF
  class OVRTouch : public ::UnityEngine::MonoBehaviour/*, public ::Oculus::Interaction::Input::IButton*/ {
    public:
    public:
    // private OVRInput/Controller _controller
    // Size: 0x4
    // Offset: 0x20
    ::GlobalNamespace::OVRInput::Controller controller;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRInput::Controller) == 0x4);
    // private OVRInput/Touch _touch
    // Size: 0x4
    // Offset: 0x24
    ::GlobalNamespace::OVRInput::Touch touch;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRInput::Touch) == 0x4);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::Input::IButton
    operator ::Oculus::Interaction::Input::IButton() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::Input::IButton*>(this);
    }
    // Get instance field reference: private OVRInput/Controller _controller
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRInput::Controller& dyn__controller();
    // Get instance field reference: private OVRInput/Touch _touch
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRInput::Touch& dyn__touch();
    // public System.Boolean Value()
    // Offset: 0x479535C
    bool Value();
    // public System.Void .ctor()
    // Offset: 0x47953BC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OVRTouch* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Input::OVRTouch::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OVRTouch*, creationType>()));
    }
  }; // Oculus.Interaction.Input.OVRTouch
  #pragma pack(pop)
  static check_size<sizeof(OVRTouch), 36 + sizeof(::GlobalNamespace::OVRInput::Touch)> __Oculus_Interaction_Input_OVRTouchSizeCheck;
  static_assert(sizeof(OVRTouch) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Input::OVRTouch::Value
// Il2CppName: Value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Input::OVRTouch::*)()>(&Oculus::Interaction::Input::OVRTouch::Value)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::OVRTouch*), "Value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::OVRTouch::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
