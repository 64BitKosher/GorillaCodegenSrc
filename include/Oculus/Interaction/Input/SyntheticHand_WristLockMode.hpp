// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Oculus.Interaction.Input.SyntheticHand
#include "Oculus/Interaction/Input/SyntheticHand.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Input::SyntheticHand::WristLockMode, "Oculus.Interaction.Input", "SyntheticHand/WristLockMode");
// Type namespace: Oculus.Interaction.Input
namespace Oculus::Interaction::Input {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.Input.SyntheticHand/WristLockMode
  // [TokenAttribute] Offset: FFFFFFFF
  // [FlagsAttribute] Offset: FFFFFFFF
  struct SyntheticHand::WristLockMode/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: WristLockMode
    constexpr WristLockMode(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public Oculus.Interaction.Input.SyntheticHand/WristLockMode Position
    static constexpr const int Position = 1;
    // Get static field: static public Oculus.Interaction.Input.SyntheticHand/WristLockMode Position
    static ::Oculus::Interaction::Input::SyntheticHand::WristLockMode _get_Position();
    // Set static field: static public Oculus.Interaction.Input.SyntheticHand/WristLockMode Position
    static void _set_Position(::Oculus::Interaction::Input::SyntheticHand::WristLockMode value);
    // static field const value: static public Oculus.Interaction.Input.SyntheticHand/WristLockMode Rotation
    static constexpr const int Rotation = 2;
    // Get static field: static public Oculus.Interaction.Input.SyntheticHand/WristLockMode Rotation
    static ::Oculus::Interaction::Input::SyntheticHand::WristLockMode _get_Rotation();
    // Set static field: static public Oculus.Interaction.Input.SyntheticHand/WristLockMode Rotation
    static void _set_Rotation(::Oculus::Interaction::Input::SyntheticHand::WristLockMode value);
    // static field const value: static public Oculus.Interaction.Input.SyntheticHand/WristLockMode Full
    static constexpr const int Full = 3;
    // Get static field: static public Oculus.Interaction.Input.SyntheticHand/WristLockMode Full
    static ::Oculus::Interaction::Input::SyntheticHand::WristLockMode _get_Full();
    // Set static field: static public Oculus.Interaction.Input.SyntheticHand/WristLockMode Full
    static void _set_Full(::Oculus::Interaction::Input::SyntheticHand::WristLockMode value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // Oculus.Interaction.Input.SyntheticHand/WristLockMode
  #pragma pack(pop)
  static check_size<sizeof(SyntheticHand::WristLockMode), 0 + sizeof(int)> __Oculus_Interaction_Input_SyntheticHand_WristLockModeSizeCheck;
  static_assert(sizeof(SyntheticHand::WristLockMode) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
