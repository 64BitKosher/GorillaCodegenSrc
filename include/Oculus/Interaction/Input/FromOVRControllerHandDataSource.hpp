// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Oculus.Interaction.Input.DataSource`1
#include "Oculus/Interaction/Input/DataSource_1.hpp"
// Including type: Oculus.Interaction.Input.Handedness
#include "Oculus/Interaction/Input/Handedness.hpp"
// Including type: OVRInput/Controller
#include "GlobalNamespace/OVRInput.hpp"
// Including type: UnityEngine.Pose
#include "UnityEngine/Pose.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction::Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: HandDataAsset
  class HandDataAsset;
  // Forward declaring type: IOVRCameraRigRef
  class IOVRCameraRigRef;
  // Forward declaring type: ITrackingToWorldTransformer
  class ITrackingToWorldTransformer;
  // Forward declaring type: HandDataSourceConfig
  class HandDataSourceConfig;
  // Forward declaring type: HandSkeleton
  class HandSkeleton;
  // Skipping declaration: IDataSource because it is already included!
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
  // Skipping declaration: Object because it is already included!
}
// Completed forward declares
// Type namespace: Oculus.Interaction.Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: FromOVRControllerHandDataSource
  class FromOVRControllerHandDataSource;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Input::FromOVRControllerHandDataSource);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Input::FromOVRControllerHandDataSource*, "Oculus.Interaction.Input", "FromOVRControllerHandDataSource");
// Type namespace: Oculus.Interaction.Input
namespace Oculus::Interaction::Input {
  // WARNING Size may be invalid!
  // Autogenerated type: Oculus.Interaction.Input.FromOVRControllerHandDataSource
  // [TokenAttribute] Offset: FFFFFFFF
  class FromOVRControllerHandDataSource : public ::Oculus::Interaction::Input::DataSource_1<::Oculus::Interaction::Input::HandDataAsset*> {
    public:
    public:
    // private UnityEngine.Transform[] _bones
    // Size: 0x8
    // Offset: 0x48
    ::ArrayW<::UnityEngine::Transform*> bones;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Transform*>) == 0x8);
    // private UnityEngine.AnimationCurve _pinchCurve
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::AnimationCurve* pinchCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // private UnityEngine.Vector3 _rootOffset
    // Size: 0xC
    // Offset: 0x58
    ::UnityEngine::Vector3 rootOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 _rootAngleOffset
    // Size: 0xC
    // Offset: 0x64
    ::UnityEngine::Vector3 rootAngleOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Object _cameraRigRef
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::Object* cameraRigRef;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.Input.IOVRCameraRigRef CameraRigRef
    // Size: 0x8
    // Offset: 0x78
    ::Oculus::Interaction::Input::IOVRCameraRigRef* CameraRigRef;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::IOVRCameraRigRef*) == 0x8);
    // private System.Boolean _processLateUpdates
    // Size: 0x1
    // Offset: 0x80
    bool processLateUpdates;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private Oculus.Interaction.Input.Handedness _handedness
    // Size: 0x4
    // Offset: 0x84
    ::Oculus::Interaction::Input::Handedness handedness;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::Handedness) == 0x4);
    // private UnityEngine.Object _trackingToWorldTransformer
    // Size: 0x8
    // Offset: 0x88
    ::UnityEngine::Object* trackingToWorldTransformer;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.Input.ITrackingToWorldTransformer TrackingToWorldTransformer
    // Size: 0x8
    // Offset: 0x90
    ::Oculus::Interaction::Input::ITrackingToWorldTransformer* TrackingToWorldTransformer;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::ITrackingToWorldTransformer*) == 0x8);
    // private readonly Oculus.Interaction.Input.HandDataAsset _handDataAsset
    // Size: 0x8
    // Offset: 0x98
    ::Oculus::Interaction::Input::HandDataAsset* handDataAsset;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::HandDataAsset*) == 0x8);
    // private OVRInput/Controller _ovrController
    // Size: 0x4
    // Offset: 0xA0
    ::GlobalNamespace::OVRInput::Controller ovrController;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRInput::Controller) == 0x4);
    // private UnityEngine.Transform _ovrControllerAnchor
    // Size: 0x8
    // Offset: 0xA8
    ::UnityEngine::Transform* ovrControllerAnchor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private Oculus.Interaction.Input.HandDataSourceConfig _config
    // Size: 0x8
    // Offset: 0xB0
    ::Oculus::Interaction::Input::HandDataSourceConfig* config;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::HandDataSourceConfig*) == 0x8);
    // private UnityEngine.Pose _poseOffset
    // Size: 0x1C
    // Offset: 0xB8
    ::UnityEngine::Pose poseOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Pose) == 0x1C);
    // private Oculus.Interaction.Input.HandSkeleton _skeleton
    // Size: 0x8
    // Offset: 0xD8
    ::Oculus::Interaction::Input::HandSkeleton* skeleton;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::HandSkeleton*) == 0x8);
    public:
    // Get static field: static private readonly UnityEngine.Quaternion <WristFixupRotation>k__BackingField
    static ::UnityEngine::Quaternion _get_$WristFixupRotation$k__BackingField();
    // Set static field: static private readonly UnityEngine.Quaternion <WristFixupRotation>k__BackingField
    static void _set_$WristFixupRotation$k__BackingField(::UnityEngine::Quaternion value);
    // Get instance field reference: private UnityEngine.Transform[] _bones
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Transform*>& dyn__bones();
    // Get instance field reference: private UnityEngine.AnimationCurve _pinchCurve
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn__pinchCurve();
    // Get instance field reference: private UnityEngine.Vector3 _rootOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__rootOffset();
    // Get instance field reference: private UnityEngine.Vector3 _rootAngleOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__rootAngleOffset();
    // Get instance field reference: private UnityEngine.Object _cameraRigRef
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__cameraRigRef();
    // Get instance field reference: private Oculus.Interaction.Input.IOVRCameraRigRef CameraRigRef
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::IOVRCameraRigRef*& dyn_CameraRigRef();
    // Get instance field reference: private System.Boolean _processLateUpdates
    [[deprecated("Use field access instead!")]] bool& dyn__processLateUpdates();
    // Get instance field reference: private Oculus.Interaction.Input.Handedness _handedness
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::Handedness& dyn__handedness();
    // Get instance field reference: private UnityEngine.Object _trackingToWorldTransformer
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__trackingToWorldTransformer();
    // Get instance field reference: private Oculus.Interaction.Input.ITrackingToWorldTransformer TrackingToWorldTransformer
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::ITrackingToWorldTransformer*& dyn_TrackingToWorldTransformer();
    // Get instance field reference: private readonly Oculus.Interaction.Input.HandDataAsset _handDataAsset
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::HandDataAsset*& dyn__handDataAsset();
    // Get instance field reference: private OVRInput/Controller _ovrController
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRInput::Controller& dyn__ovrController();
    // Get instance field reference: private UnityEngine.Transform _ovrControllerAnchor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__ovrControllerAnchor();
    // Get instance field reference: private Oculus.Interaction.Input.HandDataSourceConfig _config
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::HandDataSourceConfig*& dyn__config();
    // Get instance field reference: private UnityEngine.Pose _poseOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Pose& dyn__poseOffset();
    // Get instance field reference: private Oculus.Interaction.Input.HandSkeleton _skeleton
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::HandSkeleton*& dyn__skeleton();
    // public System.Boolean get_ProcessLateUpdates()
    // Offset: 0x47904F4
    bool get_ProcessLateUpdates();
    // public System.Void set_ProcessLateUpdates(System.Boolean value)
    // Offset: 0x47904FC
    void set_ProcessLateUpdates(bool value);
    // static public UnityEngine.Quaternion get_WristFixupRotation()
    // Offset: 0x4790508
    static ::UnityEngine::Quaternion get_WristFixupRotation();
    // protected Oculus.Interaction.Input.HandDataAsset get_DataAsset()
    // Offset: 0x4790564
    ::Oculus::Interaction::Input::HandDataAsset* get_DataAsset();
    // protected System.Void Awake()
    // Offset: 0x479056C
    void Awake();
    // private System.Void HandleInputDataDirtied(System.Boolean isLateUpdate)
    // Offset: 0x4790D40
    void HandleInputDataDirtied(bool isLateUpdate);
    // private System.Void UpdateSkeleton()
    // Offset: 0x4790A20
    void UpdateSkeleton();
    // private Oculus.Interaction.Input.HandDataSourceConfig get_Config()
    // Offset: 0x4790D60
    ::Oculus::Interaction::Input::HandDataSourceConfig* get_Config();
    // private System.Void UpdateConfig()
    // Offset: 0x47906E0
    void UpdateConfig();
    // public System.Void InjectAllFromOVRControllerHandDataSource(Oculus.Interaction.Input.DataSource`1/UpdateModeFlags<Oculus.Interaction.Input.HandDataAsset> updateMode, Oculus.Interaction.Input.IDataSource updateAfter, Oculus.Interaction.Input.Handedness handedness, Oculus.Interaction.Input.ITrackingToWorldTransformer trackingToWorldTransformer, UnityEngine.Transform[] bones, UnityEngine.AnimationCurve pinchCurve, UnityEngine.Vector3 rootOffset, UnityEngine.Vector3 rootAngleOffset)
    // Offset: 0x4791404
    void InjectAllFromOVRControllerHandDataSource(typename ::Oculus::Interaction::Input::DataSource_1<::Oculus::Interaction::Input::HandDataAsset*>::UpdateModeFlags updateMode, ::Oculus::Interaction::Input::IDataSource* updateAfter, ::Oculus::Interaction::Input::Handedness handedness, ::Oculus::Interaction::Input::ITrackingToWorldTransformer* trackingToWorldTransformer, ::ArrayW<::UnityEngine::Transform*> bones, ::UnityEngine::AnimationCurve* pinchCurve, ::UnityEngine::Vector3 rootOffset, ::UnityEngine::Vector3 rootAngleOffset);
    // public System.Void InjectHandedness(Oculus.Interaction.Input.Handedness handedness)
    // Offset: 0x47915C4
    void InjectHandedness(::Oculus::Interaction::Input::Handedness handedness);
    // public System.Void InjectTrackingToWorldTransformer(Oculus.Interaction.Input.ITrackingToWorldTransformer trackingToWorldTransformer)
    // Offset: 0x47914F4
    void InjectTrackingToWorldTransformer(::Oculus::Interaction::Input::ITrackingToWorldTransformer* trackingToWorldTransformer);
    // public System.Void InjectBones(UnityEngine.Transform[] bones)
    // Offset: 0x47915CC
    void InjectBones(::ArrayW<::UnityEngine::Transform*> bones);
    // public System.Void InjectPinchCurve(UnityEngine.AnimationCurve pinchCurve)
    // Offset: 0x47915D4
    void InjectPinchCurve(::UnityEngine::AnimationCurve* pinchCurve);
    // public System.Void InjectRootOffset(UnityEngine.Vector3 rootOffset)
    // Offset: 0x47915DC
    void InjectRootOffset(::UnityEngine::Vector3 rootOffset);
    // public System.Void InjectRootAngleOffset(UnityEngine.Vector3 rootAngleOffset)
    // Offset: 0x47915E8
    void InjectRootAngleOffset(::UnityEngine::Vector3 rootAngleOffset);
    // public System.Void .ctor()
    // Offset: 0x47915F4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FromOVRControllerHandDataSource* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Input::FromOVRControllerHandDataSource::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FromOVRControllerHandDataSource*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x47916AC
    static void _cctor();
    // private System.Void <Start>b__25_0()
    // Offset: 0x47916FC
    void $Start$b__25_0();
    // protected override System.Void Start()
    // Offset: 0x4790730
    // Implemented from: Oculus.Interaction.Input.DataSource`1
    // Base method: System.Void DataSource_1::Start()
    void Start();
    // protected override System.Void OnEnable()
    // Offset: 0x4790B0C
    // Implemented from: Oculus.Interaction.Input.DataSource`1
    // Base method: System.Void DataSource_1::OnEnable()
    void OnEnable();
    // protected override System.Void OnDisable()
    // Offset: 0x4790C2C
    // Implemented from: Oculus.Interaction.Input.DataSource`1
    // Base method: System.Void DataSource_1::OnDisable()
    void OnDisable();
    // protected override System.Void UpdateData()
    // Offset: 0x4790DE4
    // Implemented from: Oculus.Interaction.Input.DataSource`1
    // Base method: System.Void DataSource_1::UpdateData()
    void UpdateData();
  }; // Oculus.Interaction.Input.FromOVRControllerHandDataSource
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRControllerHandDataSource::get_ProcessLateUpdates
// Il2CppName: get_ProcessLateUpdates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Input::FromOVRControllerHandDataSource::*)()>(&Oculus::Interaction::Input::FromOVRControllerHandDataSource::get_ProcessLateUpdates)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromOVRControllerHandDataSource*), "get_ProcessLateUpdates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRControllerHandDataSource::set_ProcessLateUpdates
// Il2CppName: set_ProcessLateUpdates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::FromOVRControllerHandDataSource::*)(bool)>(&Oculus::Interaction::Input::FromOVRControllerHandDataSource::set_ProcessLateUpdates)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromOVRControllerHandDataSource*), "set_ProcessLateUpdates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRControllerHandDataSource::get_WristFixupRotation
// Il2CppName: get_WristFixupRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (*)()>(&Oculus::Interaction::Input::FromOVRControllerHandDataSource::get_WristFixupRotation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromOVRControllerHandDataSource*), "get_WristFixupRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRControllerHandDataSource::get_DataAsset
// Il2CppName: get_DataAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Input::HandDataAsset* (Oculus::Interaction::Input::FromOVRControllerHandDataSource::*)()>(&Oculus::Interaction::Input::FromOVRControllerHandDataSource::get_DataAsset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromOVRControllerHandDataSource*), "get_DataAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRControllerHandDataSource::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::FromOVRControllerHandDataSource::*)()>(&Oculus::Interaction::Input::FromOVRControllerHandDataSource::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromOVRControllerHandDataSource*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRControllerHandDataSource::HandleInputDataDirtied
// Il2CppName: HandleInputDataDirtied
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::FromOVRControllerHandDataSource::*)(bool)>(&Oculus::Interaction::Input::FromOVRControllerHandDataSource::HandleInputDataDirtied)> {
  static const MethodInfo* get() {
    static auto* isLateUpdate = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromOVRControllerHandDataSource*), "HandleInputDataDirtied", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isLateUpdate});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRControllerHandDataSource::UpdateSkeleton
// Il2CppName: UpdateSkeleton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::FromOVRControllerHandDataSource::*)()>(&Oculus::Interaction::Input::FromOVRControllerHandDataSource::UpdateSkeleton)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromOVRControllerHandDataSource*), "UpdateSkeleton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRControllerHandDataSource::get_Config
// Il2CppName: get_Config
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Input::HandDataSourceConfig* (Oculus::Interaction::Input::FromOVRControllerHandDataSource::*)()>(&Oculus::Interaction::Input::FromOVRControllerHandDataSource::get_Config)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromOVRControllerHandDataSource*), "get_Config", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRControllerHandDataSource::UpdateConfig
// Il2CppName: UpdateConfig
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::FromOVRControllerHandDataSource::*)()>(&Oculus::Interaction::Input::FromOVRControllerHandDataSource::UpdateConfig)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromOVRControllerHandDataSource*), "UpdateConfig", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRControllerHandDataSource::InjectAllFromOVRControllerHandDataSource
// Il2CppName: InjectAllFromOVRControllerHandDataSource
// Cannot write MetadataGetter for a method that has a nested type with a declaring generic type anywhere within it!
// Talk to sc2ad if this is something you want
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRControllerHandDataSource::InjectHandedness
// Il2CppName: InjectHandedness
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::FromOVRControllerHandDataSource::*)(::Oculus::Interaction::Input::Handedness)>(&Oculus::Interaction::Input::FromOVRControllerHandDataSource::InjectHandedness)> {
  static const MethodInfo* get() {
    static auto* handedness = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "Handedness")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromOVRControllerHandDataSource*), "InjectHandedness", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handedness});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRControllerHandDataSource::InjectTrackingToWorldTransformer
// Il2CppName: InjectTrackingToWorldTransformer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::FromOVRControllerHandDataSource::*)(::Oculus::Interaction::Input::ITrackingToWorldTransformer*)>(&Oculus::Interaction::Input::FromOVRControllerHandDataSource::InjectTrackingToWorldTransformer)> {
  static const MethodInfo* get() {
    static auto* trackingToWorldTransformer = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "ITrackingToWorldTransformer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromOVRControllerHandDataSource*), "InjectTrackingToWorldTransformer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trackingToWorldTransformer});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRControllerHandDataSource::InjectBones
// Il2CppName: InjectBones
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::FromOVRControllerHandDataSource::*)(::ArrayW<::UnityEngine::Transform*>)>(&Oculus::Interaction::Input::FromOVRControllerHandDataSource::InjectBones)> {
  static const MethodInfo* get() {
    static auto* bones = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Transform"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromOVRControllerHandDataSource*), "InjectBones", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bones});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRControllerHandDataSource::InjectPinchCurve
// Il2CppName: InjectPinchCurve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::FromOVRControllerHandDataSource::*)(::UnityEngine::AnimationCurve*)>(&Oculus::Interaction::Input::FromOVRControllerHandDataSource::InjectPinchCurve)> {
  static const MethodInfo* get() {
    static auto* pinchCurve = &::il2cpp_utils::GetClassFromName("UnityEngine", "AnimationCurve")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromOVRControllerHandDataSource*), "InjectPinchCurve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pinchCurve});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRControllerHandDataSource::InjectRootOffset
// Il2CppName: InjectRootOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::FromOVRControllerHandDataSource::*)(::UnityEngine::Vector3)>(&Oculus::Interaction::Input::FromOVRControllerHandDataSource::InjectRootOffset)> {
  static const MethodInfo* get() {
    static auto* rootOffset = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromOVRControllerHandDataSource*), "InjectRootOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rootOffset});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRControllerHandDataSource::InjectRootAngleOffset
// Il2CppName: InjectRootAngleOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::FromOVRControllerHandDataSource::*)(::UnityEngine::Vector3)>(&Oculus::Interaction::Input::FromOVRControllerHandDataSource::InjectRootAngleOffset)> {
  static const MethodInfo* get() {
    static auto* rootAngleOffset = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromOVRControllerHandDataSource*), "InjectRootAngleOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rootAngleOffset});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRControllerHandDataSource::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRControllerHandDataSource::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Oculus::Interaction::Input::FromOVRControllerHandDataSource::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromOVRControllerHandDataSource*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRControllerHandDataSource::$Start$b__25_0
// Il2CppName: <Start>b__25_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::FromOVRControllerHandDataSource::*)()>(&Oculus::Interaction::Input::FromOVRControllerHandDataSource::$Start$b__25_0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromOVRControllerHandDataSource*), "<Start>b__25_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRControllerHandDataSource::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::FromOVRControllerHandDataSource::*)()>(&Oculus::Interaction::Input::FromOVRControllerHandDataSource::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromOVRControllerHandDataSource*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRControllerHandDataSource::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::FromOVRControllerHandDataSource::*)()>(&Oculus::Interaction::Input::FromOVRControllerHandDataSource::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromOVRControllerHandDataSource*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRControllerHandDataSource::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::FromOVRControllerHandDataSource::*)()>(&Oculus::Interaction::Input::FromOVRControllerHandDataSource::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromOVRControllerHandDataSource*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRControllerHandDataSource::UpdateData
// Il2CppName: UpdateData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::FromOVRControllerHandDataSource::*)()>(&Oculus::Interaction::Input::FromOVRControllerHandDataSource::UpdateData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromOVRControllerHandDataSource*), "UpdateData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
