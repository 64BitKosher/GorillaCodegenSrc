// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Oculus.Interaction.Input.ITrackingToWorldTransformer
#include "Oculus/Interaction/Input/ITrackingToWorldTransformer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Object because it is already included!
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Pose
  struct Pose;
  // Skipping declaration: Quaternion because it is already included!
}
// Forward declaring namespace: Oculus::Interaction::Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: IOVRCameraRigRef
  class IOVRCameraRigRef;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: TrackingToWorldTransformerOVR
  class TrackingToWorldTransformerOVR;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Input::TrackingToWorldTransformerOVR);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Input::TrackingToWorldTransformerOVR*, "Oculus.Interaction.Input", "TrackingToWorldTransformerOVR");
// Type namespace: Oculus.Interaction.Input
namespace Oculus::Interaction::Input {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.Input.TrackingToWorldTransformerOVR
  // [TokenAttribute] Offset: FFFFFFFF
  class TrackingToWorldTransformerOVR : public ::UnityEngine::MonoBehaviour/*, public ::Oculus::Interaction::Input::ITrackingToWorldTransformer*/ {
    public:
    public:
    // private UnityEngine.Object _cameraRigRef
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Object* cameraRigRef;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.Input.IOVRCameraRigRef <CameraRigRef>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    ::Oculus::Interaction::Input::IOVRCameraRigRef* CameraRigRef;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::IOVRCameraRigRef*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::Input::ITrackingToWorldTransformer
    operator ::Oculus::Interaction::Input::ITrackingToWorldTransformer() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::Input::ITrackingToWorldTransformer*>(this);
    }
    // Get instance field reference: private UnityEngine.Object _cameraRigRef
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__cameraRigRef();
    // Get instance field reference: private Oculus.Interaction.Input.IOVRCameraRigRef <CameraRigRef>k__BackingField
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::IOVRCameraRigRef*& dyn_$CameraRigRef$k__BackingField();
    // public Oculus.Interaction.Input.IOVRCameraRigRef get_CameraRigRef()
    // Offset: 0x4795500
    ::Oculus::Interaction::Input::IOVRCameraRigRef* get_CameraRigRef();
    // private System.Void set_CameraRigRef(Oculus.Interaction.Input.IOVRCameraRigRef value)
    // Offset: 0x4795508
    void set_CameraRigRef(::Oculus::Interaction::Input::IOVRCameraRigRef* value);
    // public UnityEngine.Transform get_Transform()
    // Offset: 0x4795510
    ::UnityEngine::Transform* get_Transform();
    // public UnityEngine.Pose ToWorldPose(UnityEngine.Pose pose)
    // Offset: 0x47955BC
    ::UnityEngine::Pose ToWorldPose(::UnityEngine::Pose pose);
    // public UnityEngine.Pose ToTrackingPose(in UnityEngine.Pose worldPose)
    // Offset: 0x479569C
    ::UnityEngine::Pose ToTrackingPose(ByRef<::UnityEngine::Pose> worldPose);
    // public UnityEngine.Quaternion get_WorldToTrackingWristJointFixup()
    // Offset: 0x47957A0
    ::UnityEngine::Quaternion get_WorldToTrackingWristJointFixup();
    // protected System.Void Awake()
    // Offset: 0x479582C
    void Awake();
    // protected System.Void Start()
    // Offset: 0x4795884
    void Start();
    // public System.Void InjectAllTrackingToWorldTransformerOVR(Oculus.Interaction.Input.IOVRCameraRigRef cameraRigRef)
    // Offset: 0x4795888
    void InjectAllTrackingToWorldTransformerOVR(::Oculus::Interaction::Input::IOVRCameraRigRef* cameraRigRef);
    // public System.Void InjectCameraRigRef(Oculus.Interaction.Input.IOVRCameraRigRef cameraRigRef)
    // Offset: 0x479588C
    void InjectCameraRigRef(::Oculus::Interaction::Input::IOVRCameraRigRef* cameraRigRef);
    // public System.Void .ctor()
    // Offset: 0x479595C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TrackingToWorldTransformerOVR* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Input::TrackingToWorldTransformerOVR::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TrackingToWorldTransformerOVR*, creationType>()));
    }
    // private UnityEngine.Pose Oculus.Interaction.Input.ITrackingToWorldTransformer.ToTrackingPose(in UnityEngine.Pose worldPose)
    // Offset: 0x4795964
    ::UnityEngine::Pose Oculus_Interaction_Input_ITrackingToWorldTransformer_ToTrackingPose(ByRef<::UnityEngine::Pose> worldPose);
  }; // Oculus.Interaction.Input.TrackingToWorldTransformerOVR
  #pragma pack(pop)
  static check_size<sizeof(TrackingToWorldTransformerOVR), 40 + sizeof(::Oculus::Interaction::Input::IOVRCameraRigRef*)> __Oculus_Interaction_Input_TrackingToWorldTransformerOVRSizeCheck;
  static_assert(sizeof(TrackingToWorldTransformerOVR) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Input::TrackingToWorldTransformerOVR::get_CameraRigRef
// Il2CppName: get_CameraRigRef
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Input::IOVRCameraRigRef* (Oculus::Interaction::Input::TrackingToWorldTransformerOVR::*)()>(&Oculus::Interaction::Input::TrackingToWorldTransformerOVR::get_CameraRigRef)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::TrackingToWorldTransformerOVR*), "get_CameraRigRef", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::TrackingToWorldTransformerOVR::set_CameraRigRef
// Il2CppName: set_CameraRigRef
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::TrackingToWorldTransformerOVR::*)(::Oculus::Interaction::Input::IOVRCameraRigRef*)>(&Oculus::Interaction::Input::TrackingToWorldTransformerOVR::set_CameraRigRef)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IOVRCameraRigRef")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::TrackingToWorldTransformerOVR*), "set_CameraRigRef", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::TrackingToWorldTransformerOVR::get_Transform
// Il2CppName: get_Transform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (Oculus::Interaction::Input::TrackingToWorldTransformerOVR::*)()>(&Oculus::Interaction::Input::TrackingToWorldTransformerOVR::get_Transform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::TrackingToWorldTransformerOVR*), "get_Transform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::TrackingToWorldTransformerOVR::ToWorldPose
// Il2CppName: ToWorldPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Pose (Oculus::Interaction::Input::TrackingToWorldTransformerOVR::*)(::UnityEngine::Pose)>(&Oculus::Interaction::Input::TrackingToWorldTransformerOVR::ToWorldPose)> {
  static const MethodInfo* get() {
    static auto* pose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::TrackingToWorldTransformerOVR*), "ToWorldPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pose});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::TrackingToWorldTransformerOVR::ToTrackingPose
// Il2CppName: ToTrackingPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Pose (Oculus::Interaction::Input::TrackingToWorldTransformerOVR::*)(ByRef<::UnityEngine::Pose>)>(&Oculus::Interaction::Input::TrackingToWorldTransformerOVR::ToTrackingPose)> {
  static const MethodInfo* get() {
    static auto* worldPose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::TrackingToWorldTransformerOVR*), "ToTrackingPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{worldPose});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::TrackingToWorldTransformerOVR::get_WorldToTrackingWristJointFixup
// Il2CppName: get_WorldToTrackingWristJointFixup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (Oculus::Interaction::Input::TrackingToWorldTransformerOVR::*)()>(&Oculus::Interaction::Input::TrackingToWorldTransformerOVR::get_WorldToTrackingWristJointFixup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::TrackingToWorldTransformerOVR*), "get_WorldToTrackingWristJointFixup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::TrackingToWorldTransformerOVR::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::TrackingToWorldTransformerOVR::*)()>(&Oculus::Interaction::Input::TrackingToWorldTransformerOVR::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::TrackingToWorldTransformerOVR*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::TrackingToWorldTransformerOVR::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::TrackingToWorldTransformerOVR::*)()>(&Oculus::Interaction::Input::TrackingToWorldTransformerOVR::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::TrackingToWorldTransformerOVR*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::TrackingToWorldTransformerOVR::InjectAllTrackingToWorldTransformerOVR
// Il2CppName: InjectAllTrackingToWorldTransformerOVR
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::TrackingToWorldTransformerOVR::*)(::Oculus::Interaction::Input::IOVRCameraRigRef*)>(&Oculus::Interaction::Input::TrackingToWorldTransformerOVR::InjectAllTrackingToWorldTransformerOVR)> {
  static const MethodInfo* get() {
    static auto* cameraRigRef = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IOVRCameraRigRef")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::TrackingToWorldTransformerOVR*), "InjectAllTrackingToWorldTransformerOVR", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cameraRigRef});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::TrackingToWorldTransformerOVR::InjectCameraRigRef
// Il2CppName: InjectCameraRigRef
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::TrackingToWorldTransformerOVR::*)(::Oculus::Interaction::Input::IOVRCameraRigRef*)>(&Oculus::Interaction::Input::TrackingToWorldTransformerOVR::InjectCameraRigRef)> {
  static const MethodInfo* get() {
    static auto* cameraRigRef = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IOVRCameraRigRef")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::TrackingToWorldTransformerOVR*), "InjectCameraRigRef", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cameraRigRef});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::TrackingToWorldTransformerOVR::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Interaction::Input::TrackingToWorldTransformerOVR::Oculus_Interaction_Input_ITrackingToWorldTransformer_ToTrackingPose
// Il2CppName: Oculus.Interaction.Input.ITrackingToWorldTransformer.ToTrackingPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Pose (Oculus::Interaction::Input::TrackingToWorldTransformerOVR::*)(ByRef<::UnityEngine::Pose>)>(&Oculus::Interaction::Input::TrackingToWorldTransformerOVR::Oculus_Interaction_Input_ITrackingToWorldTransformer_ToTrackingPose)> {
  static const MethodInfo* get() {
    static auto* worldPose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::TrackingToWorldTransformerOVR*), "Oculus.Interaction.Input.ITrackingToWorldTransformer.ToTrackingPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{worldPose});
  }
};
