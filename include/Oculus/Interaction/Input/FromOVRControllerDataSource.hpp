// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Oculus.Interaction.Input.DataSource`1
#include "Oculus/Interaction/Input/DataSource_1.hpp"
// Including type: Oculus.Interaction.Input.Handedness
#include "Oculus/Interaction/Input/Handedness.hpp"
// Including type: OVRInput/Controller
#include "GlobalNamespace/OVRInput.hpp"
// Including type: Oculus.Interaction.Input.OVRPointerPoseSelector
#include "Oculus/Interaction/Input/OVRPointerPoseSelector.hpp"
// Including type: Oculus.Interaction.Input.UsageMapping
#include "Oculus/Interaction/Input/UsageMapping.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction::Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: ControllerDataAsset
  class ControllerDataAsset;
  // Forward declaring type: IOVRCameraRigRef
  class IOVRCameraRigRef;
  // Forward declaring type: ITrackingToWorldTransformer
  class ITrackingToWorldTransformer;
  // Forward declaring type: ControllerDataSourceConfig
  class ControllerDataSourceConfig;
  // Skipping declaration: IDataSource because it is already included!
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Object because it is already included!
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: FromOVRControllerDataSource
  class FromOVRControllerDataSource;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Input::FromOVRControllerDataSource);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Input::FromOVRControllerDataSource*, "Oculus.Interaction.Input", "FromOVRControllerDataSource");
// Type namespace: Oculus.Interaction.Input
namespace Oculus::Interaction::Input {
  // WARNING Size may be invalid!
  // Autogenerated type: Oculus.Interaction.Input.FromOVRControllerDataSource
  // [TokenAttribute] Offset: FFFFFFFF
  class FromOVRControllerDataSource : public ::Oculus::Interaction::Input::DataSource_1<::Oculus::Interaction::Input::ControllerDataAsset*> {
    public:
    public:
    // private UnityEngine.Object _cameraRigRef
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Object* cameraRigRef;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.Input.IOVRCameraRigRef <CameraRigRef>k__BackingField
    // Size: 0x8
    // Offset: 0x50
    ::Oculus::Interaction::Input::IOVRCameraRigRef* CameraRigRef;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::IOVRCameraRigRef*) == 0x8);
    // private System.Boolean _processLateUpdates
    // Size: 0x1
    // Offset: 0x58
    bool processLateUpdates;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private Oculus.Interaction.Input.Handedness _handedness
    // Size: 0x4
    // Offset: 0x5C
    ::Oculus::Interaction::Input::Handedness handedness;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::Handedness) == 0x4);
    // private UnityEngine.Object _trackingToWorldTransformer
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::Object* trackingToWorldTransformer;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.Input.ITrackingToWorldTransformer TrackingToWorldTransformer
    // Size: 0x8
    // Offset: 0x68
    ::Oculus::Interaction::Input::ITrackingToWorldTransformer* TrackingToWorldTransformer;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::ITrackingToWorldTransformer*) == 0x8);
    // private readonly Oculus.Interaction.Input.ControllerDataAsset _controllerDataAsset
    // Size: 0x8
    // Offset: 0x70
    ::Oculus::Interaction::Input::ControllerDataAsset* controllerDataAsset;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::ControllerDataAsset*) == 0x8);
    // private OVRInput/Controller _ovrController
    // Size: 0x4
    // Offset: 0x78
    ::GlobalNamespace::OVRInput::Controller ovrController;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRInput::Controller) == 0x4);
    // private UnityEngine.Transform _ovrControllerAnchor
    // Size: 0x8
    // Offset: 0x80
    ::UnityEngine::Transform* ovrControllerAnchor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private Oculus.Interaction.Input.ControllerDataSourceConfig _config
    // Size: 0x8
    // Offset: 0x88
    ::Oculus::Interaction::Input::ControllerDataSourceConfig* config;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::ControllerDataSourceConfig*) == 0x8);
    // private Oculus.Interaction.Input.OVRPointerPoseSelector _pointerPoseSelector
    // Size: 0x1C
    // Offset: 0x90
    ::Oculus::Interaction::Input::OVRPointerPoseSelector pointerPoseSelector;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::OVRPointerPoseSelector) == 0x1C);
    public:
    // Get static field: static private readonly Oculus.Interaction.Input.UsageMapping[] ControllerUsageMappings
    static ::ArrayW<::Oculus::Interaction::Input::UsageMapping> _get_ControllerUsageMappings();
    // Set static field: static private readonly Oculus.Interaction.Input.UsageMapping[] ControllerUsageMappings
    static void _set_ControllerUsageMappings(::ArrayW<::Oculus::Interaction::Input::UsageMapping> value);
    // Get instance field reference: private UnityEngine.Object _cameraRigRef
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__cameraRigRef();
    // Get instance field reference: private Oculus.Interaction.Input.IOVRCameraRigRef <CameraRigRef>k__BackingField
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::IOVRCameraRigRef*& dyn_$CameraRigRef$k__BackingField();
    // Get instance field reference: private System.Boolean _processLateUpdates
    [[deprecated("Use field access instead!")]] bool& dyn__processLateUpdates();
    // Get instance field reference: private Oculus.Interaction.Input.Handedness _handedness
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::Handedness& dyn__handedness();
    // Get instance field reference: private UnityEngine.Object _trackingToWorldTransformer
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__trackingToWorldTransformer();
    // Get instance field reference: private Oculus.Interaction.Input.ITrackingToWorldTransformer TrackingToWorldTransformer
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::ITrackingToWorldTransformer*& dyn_TrackingToWorldTransformer();
    // Get instance field reference: private readonly Oculus.Interaction.Input.ControllerDataAsset _controllerDataAsset
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::ControllerDataAsset*& dyn__controllerDataAsset();
    // Get instance field reference: private OVRInput/Controller _ovrController
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRInput::Controller& dyn__ovrController();
    // Get instance field reference: private UnityEngine.Transform _ovrControllerAnchor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__ovrControllerAnchor();
    // Get instance field reference: private Oculus.Interaction.Input.ControllerDataSourceConfig _config
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::ControllerDataSourceConfig*& dyn__config();
    // Get instance field reference: private Oculus.Interaction.Input.OVRPointerPoseSelector _pointerPoseSelector
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::OVRPointerPoseSelector& dyn__pointerPoseSelector();
    // public Oculus.Interaction.Input.IOVRCameraRigRef get_CameraRigRef()
    // Offset: 0x478F704
    ::Oculus::Interaction::Input::IOVRCameraRigRef* get_CameraRigRef();
    // private System.Void set_CameraRigRef(Oculus.Interaction.Input.IOVRCameraRigRef value)
    // Offset: 0x478F70C
    void set_CameraRigRef(::Oculus::Interaction::Input::IOVRCameraRigRef* value);
    // public System.Boolean get_ProcessLateUpdates()
    // Offset: 0x478F714
    bool get_ProcessLateUpdates();
    // public System.Void set_ProcessLateUpdates(System.Boolean value)
    // Offset: 0x478F71C
    void set_ProcessLateUpdates(bool value);
    // protected System.Void Awake()
    // Offset: 0x478F728
    void Awake();
    // private System.Void HandleInputDataDirtied(System.Boolean isLateUpdate)
    // Offset: 0x478FC14
    void HandleInputDataDirtied(bool isLateUpdate);
    // private Oculus.Interaction.Input.ControllerDataSourceConfig get_Config()
    // Offset: 0x478FC34
    ::Oculus::Interaction::Input::ControllerDataSourceConfig* get_Config();
    // private System.Void UpdateConfig()
    // Offset: 0x478F7D4
    void UpdateConfig();
    // protected Oculus.Interaction.Input.ControllerDataAsset get_DataAsset()
    // Offset: 0x4790158
    ::Oculus::Interaction::Input::ControllerDataAsset* get_DataAsset();
    // public System.Void InjectAllFromOVRControllerDataSource(Oculus.Interaction.Input.DataSource`1/UpdateModeFlags<Oculus.Interaction.Input.ControllerDataAsset> updateMode, Oculus.Interaction.Input.IDataSource updateAfter, Oculus.Interaction.Input.Handedness handedness, Oculus.Interaction.Input.ITrackingToWorldTransformer trackingToWorldTransformer)
    // Offset: 0x4790160
    void InjectAllFromOVRControllerDataSource(typename ::Oculus::Interaction::Input::DataSource_1<::Oculus::Interaction::Input::ControllerDataAsset*>::UpdateModeFlags updateMode, ::Oculus::Interaction::Input::IDataSource* updateAfter, ::Oculus::Interaction::Input::Handedness handedness, ::Oculus::Interaction::Input::ITrackingToWorldTransformer* trackingToWorldTransformer);
    // public System.Void InjectHandedness(Oculus.Interaction.Input.Handedness handedness)
    // Offset: 0x47902B0
    void InjectHandedness(::Oculus::Interaction::Input::Handedness handedness);
    // public System.Void InjectTrackingToWorldTransformer(Oculus.Interaction.Input.ITrackingToWorldTransformer trackingToWorldTransformer)
    // Offset: 0x47901E0
    void InjectTrackingToWorldTransformer(::Oculus::Interaction::Input::ITrackingToWorldTransformer* trackingToWorldTransformer);
    // public System.Void .ctor()
    // Offset: 0x47902B8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FromOVRControllerDataSource* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Input::FromOVRControllerDataSource::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FromOVRControllerDataSource*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x4790340
    static void _cctor();
    // private System.Void <Start>b__19_0()
    // Offset: 0x47904AC
    void $Start$b__19_0();
    // protected override System.Void Start()
    // Offset: 0x478F80C
    // Implemented from: Oculus.Interaction.Input.DataSource`1
    // Base method: System.Void DataSource_1::Start()
    void Start();
    // protected override System.Void OnEnable()
    // Offset: 0x478F9E0
    // Implemented from: Oculus.Interaction.Input.DataSource`1
    // Base method: System.Void DataSource_1::OnEnable()
    void OnEnable();
    // protected override System.Void OnDisable()
    // Offset: 0x478FB00
    // Implemented from: Oculus.Interaction.Input.DataSource`1
    // Base method: System.Void DataSource_1::OnDisable()
    void OnDisable();
    // protected override System.Void UpdateData()
    // Offset: 0x478FCB8
    // Implemented from: Oculus.Interaction.Input.DataSource`1
    // Base method: System.Void DataSource_1::UpdateData()
    void UpdateData();
  }; // Oculus.Interaction.Input.FromOVRControllerDataSource
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRControllerDataSource::get_CameraRigRef
// Il2CppName: get_CameraRigRef
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Input::IOVRCameraRigRef* (Oculus::Interaction::Input::FromOVRControllerDataSource::*)()>(&Oculus::Interaction::Input::FromOVRControllerDataSource::get_CameraRigRef)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromOVRControllerDataSource*), "get_CameraRigRef", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRControllerDataSource::set_CameraRigRef
// Il2CppName: set_CameraRigRef
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::FromOVRControllerDataSource::*)(::Oculus::Interaction::Input::IOVRCameraRigRef*)>(&Oculus::Interaction::Input::FromOVRControllerDataSource::set_CameraRigRef)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IOVRCameraRigRef")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromOVRControllerDataSource*), "set_CameraRigRef", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRControllerDataSource::get_ProcessLateUpdates
// Il2CppName: get_ProcessLateUpdates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Input::FromOVRControllerDataSource::*)()>(&Oculus::Interaction::Input::FromOVRControllerDataSource::get_ProcessLateUpdates)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromOVRControllerDataSource*), "get_ProcessLateUpdates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRControllerDataSource::set_ProcessLateUpdates
// Il2CppName: set_ProcessLateUpdates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::FromOVRControllerDataSource::*)(bool)>(&Oculus::Interaction::Input::FromOVRControllerDataSource::set_ProcessLateUpdates)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromOVRControllerDataSource*), "set_ProcessLateUpdates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRControllerDataSource::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::FromOVRControllerDataSource::*)()>(&Oculus::Interaction::Input::FromOVRControllerDataSource::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromOVRControllerDataSource*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRControllerDataSource::HandleInputDataDirtied
// Il2CppName: HandleInputDataDirtied
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::FromOVRControllerDataSource::*)(bool)>(&Oculus::Interaction::Input::FromOVRControllerDataSource::HandleInputDataDirtied)> {
  static const MethodInfo* get() {
    static auto* isLateUpdate = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromOVRControllerDataSource*), "HandleInputDataDirtied", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isLateUpdate});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRControllerDataSource::get_Config
// Il2CppName: get_Config
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Input::ControllerDataSourceConfig* (Oculus::Interaction::Input::FromOVRControllerDataSource::*)()>(&Oculus::Interaction::Input::FromOVRControllerDataSource::get_Config)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromOVRControllerDataSource*), "get_Config", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRControllerDataSource::UpdateConfig
// Il2CppName: UpdateConfig
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::FromOVRControllerDataSource::*)()>(&Oculus::Interaction::Input::FromOVRControllerDataSource::UpdateConfig)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromOVRControllerDataSource*), "UpdateConfig", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRControllerDataSource::get_DataAsset
// Il2CppName: get_DataAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Input::ControllerDataAsset* (Oculus::Interaction::Input::FromOVRControllerDataSource::*)()>(&Oculus::Interaction::Input::FromOVRControllerDataSource::get_DataAsset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromOVRControllerDataSource*), "get_DataAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRControllerDataSource::InjectAllFromOVRControllerDataSource
// Il2CppName: InjectAllFromOVRControllerDataSource
// Cannot write MetadataGetter for a method that has a nested type with a declaring generic type anywhere within it!
// Talk to sc2ad if this is something you want
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRControllerDataSource::InjectHandedness
// Il2CppName: InjectHandedness
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::FromOVRControllerDataSource::*)(::Oculus::Interaction::Input::Handedness)>(&Oculus::Interaction::Input::FromOVRControllerDataSource::InjectHandedness)> {
  static const MethodInfo* get() {
    static auto* handedness = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "Handedness")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromOVRControllerDataSource*), "InjectHandedness", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handedness});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRControllerDataSource::InjectTrackingToWorldTransformer
// Il2CppName: InjectTrackingToWorldTransformer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::FromOVRControllerDataSource::*)(::Oculus::Interaction::Input::ITrackingToWorldTransformer*)>(&Oculus::Interaction::Input::FromOVRControllerDataSource::InjectTrackingToWorldTransformer)> {
  static const MethodInfo* get() {
    static auto* trackingToWorldTransformer = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "ITrackingToWorldTransformer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromOVRControllerDataSource*), "InjectTrackingToWorldTransformer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trackingToWorldTransformer});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRControllerDataSource::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRControllerDataSource::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Oculus::Interaction::Input::FromOVRControllerDataSource::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromOVRControllerDataSource*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRControllerDataSource::$Start$b__19_0
// Il2CppName: <Start>b__19_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::FromOVRControllerDataSource::*)()>(&Oculus::Interaction::Input::FromOVRControllerDataSource::$Start$b__19_0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromOVRControllerDataSource*), "<Start>b__19_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRControllerDataSource::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::FromOVRControllerDataSource::*)()>(&Oculus::Interaction::Input::FromOVRControllerDataSource::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromOVRControllerDataSource*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRControllerDataSource::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::FromOVRControllerDataSource::*)()>(&Oculus::Interaction::Input::FromOVRControllerDataSource::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromOVRControllerDataSource*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRControllerDataSource::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::FromOVRControllerDataSource::*)()>(&Oculus::Interaction::Input::FromOVRControllerDataSource::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromOVRControllerDataSource*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FromOVRControllerDataSource::UpdateData
// Il2CppName: UpdateData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::FromOVRControllerDataSource::*)()>(&Oculus::Interaction::Input::FromOVRControllerDataSource::UpdateData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FromOVRControllerDataSource*), "UpdateData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
