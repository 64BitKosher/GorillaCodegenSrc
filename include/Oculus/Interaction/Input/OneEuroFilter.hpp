// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Oculus.Interaction.Input.IOneEuroFilter`1
#include "Oculus/Interaction/Input/IOneEuroFilter_1.hpp"
// Including type: System.Single
#include "System/Single.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction::Input
namespace Oculus::Interaction::Input {
}
// Completed forward declares
// Type namespace: Oculus.Interaction.Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: OneEuroFilter
  class OneEuroFilter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Input::OneEuroFilter);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Input::OneEuroFilter*, "Oculus.Interaction.Input", "OneEuroFilter");
// Type namespace: Oculus.Interaction.Input
namespace Oculus::Interaction::Input {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.Input.OneEuroFilter
  // [TokenAttribute] Offset: FFFFFFFF
  class OneEuroFilter : public ::Il2CppObject/*, public ::Oculus::Interaction::Input::IOneEuroFilter_1<float>*/ {
    public:
    // Nested type: ::Oculus::Interaction::Input::OneEuroFilter::LowPassFilter
    class LowPassFilter;
    // Nested type: ::Oculus::Interaction::Input::OneEuroFilter::OneEuroFilterMulti_1<TData>
    template<typename TData>
    class OneEuroFilterMulti_1;
    // Nested type: ::Oculus::Interaction::Input::OneEuroFilter::$$c
    class $$c;
    public:
    // private System.Single <Value>k__BackingField
    // Size: 0x4
    // Offset: 0x10
    float Value;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private Oculus.Interaction.Input.OneEuroFilterPropertyBlock _properties
    // Size: 0xC
    // Offset: 0x14
    ::Oculus::Interaction::Input::OneEuroFilterPropertyBlock properties;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::OneEuroFilterPropertyBlock) == 0xC);
    // private System.Boolean _isFirstUpdate
    // Size: 0x1
    // Offset: 0x20
    bool isFirstUpdate;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isFirstUpdate and: xfilt
    char __padding2[0x7] = {};
    // private Oculus.Interaction.Input.OneEuroFilter/LowPassFilter _xfilt
    // Size: 0x8
    // Offset: 0x28
    ::Oculus::Interaction::Input::OneEuroFilter::LowPassFilter* xfilt;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::OneEuroFilter::LowPassFilter*) == 0x8);
    // private Oculus.Interaction.Input.OneEuroFilter/LowPassFilter _dxfilt
    // Size: 0x8
    // Offset: 0x30
    ::Oculus::Interaction::Input::OneEuroFilter::LowPassFilter* dxfilt;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::OneEuroFilter::LowPassFilter*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::Input::IOneEuroFilter_1<float>
    operator ::Oculus::Interaction::Input::IOneEuroFilter_1<float>() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::Input::IOneEuroFilter_1<float>*>(this);
    }
    // static field const value: static public System.Single _DEFAULT_FREQUENCY_HZ
    static constexpr const float _DEFAULT_FREQUENCY_HZ = 60;
    // Get static field: static public System.Single _DEFAULT_FREQUENCY_HZ
    static float _get__DEFAULT_FREQUENCY_HZ();
    // Set static field: static public System.Single _DEFAULT_FREQUENCY_HZ
    static void _set__DEFAULT_FREQUENCY_HZ(float value);
    // Get instance field reference: private System.Single <Value>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$Value$k__BackingField();
    // Get instance field reference: private Oculus.Interaction.Input.OneEuroFilterPropertyBlock _properties
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::OneEuroFilterPropertyBlock& dyn__properties();
    // Get instance field reference: private System.Boolean _isFirstUpdate
    [[deprecated("Use field access instead!")]] bool& dyn__isFirstUpdate();
    // Get instance field reference: private Oculus.Interaction.Input.OneEuroFilter/LowPassFilter _xfilt
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::OneEuroFilter::LowPassFilter*& dyn__xfilt();
    // Get instance field reference: private Oculus.Interaction.Input.OneEuroFilter/LowPassFilter _dxfilt
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::OneEuroFilter::LowPassFilter*& dyn__dxfilt();
    // public System.Single get_Value()
    // Offset: 0x481EAE0
    float get_Value();
    // private System.Void set_Value(System.Single value)
    // Offset: 0x481EAE8
    void set_Value(float value);
    // private System.Void .ctor()
    // Offset: 0x481EAF0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OneEuroFilter* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Input::OneEuroFilter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OneEuroFilter*, creationType>()));
    }
    // public System.Void SetProperties(in Oculus.Interaction.Input.OneEuroFilterPropertyBlock properties)
    // Offset: 0x481EBE0
    void SetProperties(ByRef<::Oculus::Interaction::Input::OneEuroFilterPropertyBlock> properties);
    // public System.Single Step(System.Single newValue, System.Single deltaTime)
    // Offset: 0x481EBF4
    float Step(float newValue, float deltaTime);
    // public System.Void Reset()
    // Offset: 0x481ED58
    void Reset();
    // private System.Single GetAlpha(System.Single rate, System.Single cutoff)
    // Offset: 0x481ECFC
    float GetAlpha(float rate, float cutoff);
    // static public Oculus.Interaction.Input.IOneEuroFilter`1<System.Single> CreateFloat()
    // Offset: 0x481EDA4
    static ::Oculus::Interaction::Input::IOneEuroFilter_1<float>* CreateFloat();
    // static public Oculus.Interaction.Input.IOneEuroFilter`1<UnityEngine.Vector2> CreateVector2()
    // Offset: 0x481EDF4
    static ::Oculus::Interaction::Input::IOneEuroFilter_1<::UnityEngine::Vector2>* CreateVector2();
    // static public Oculus.Interaction.Input.IOneEuroFilter`1<UnityEngine.Vector3> CreateVector3()
    // Offset: 0x4811E60
    static ::Oculus::Interaction::Input::IOneEuroFilter_1<::UnityEngine::Vector3>* CreateVector3();
    // static public Oculus.Interaction.Input.IOneEuroFilter`1<UnityEngine.Vector4> CreateVector4()
    // Offset: 0x481EFAC
    static ::Oculus::Interaction::Input::IOneEuroFilter_1<::UnityEngine::Vector4>* CreateVector4();
    // static public Oculus.Interaction.Input.IOneEuroFilter`1<UnityEngine.Quaternion> CreateQuaternion()
    // Offset: 0x4812018
    static ::Oculus::Interaction::Input::IOneEuroFilter_1<::UnityEngine::Quaternion>* CreateQuaternion();
    // private System.Void Oculus.Interaction.Input.IOneEuroFilter<System.Single>.SetProperties(in Oculus.Interaction.Input.OneEuroFilterPropertyBlock properties)
    // Offset: 0x481F164
    void Oculus_Interaction_Input_IOneEuroFilter$System_Single$_SetProperties(ByRef<::Oculus::Interaction::Input::OneEuroFilterPropertyBlock> properties);
  }; // Oculus.Interaction.Input.OneEuroFilter
  #pragma pack(pop)
  static check_size<sizeof(OneEuroFilter), 48 + sizeof(::Oculus::Interaction::Input::OneEuroFilter::LowPassFilter*)> __Oculus_Interaction_Input_OneEuroFilterSizeCheck;
  static_assert(sizeof(OneEuroFilter) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Input::OneEuroFilter::get_Value
// Il2CppName: get_Value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::Input::OneEuroFilter::*)()>(&Oculus::Interaction::Input::OneEuroFilter::get_Value)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::OneEuroFilter*), "get_Value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::OneEuroFilter::set_Value
// Il2CppName: set_Value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::OneEuroFilter::*)(float)>(&Oculus::Interaction::Input::OneEuroFilter::set_Value)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::OneEuroFilter*), "set_Value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::OneEuroFilter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Interaction::Input::OneEuroFilter::SetProperties
// Il2CppName: SetProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::OneEuroFilter::*)(ByRef<::Oculus::Interaction::Input::OneEuroFilterPropertyBlock>)>(&Oculus::Interaction::Input::OneEuroFilter::SetProperties)> {
  static const MethodInfo* get() {
    static auto* properties = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "OneEuroFilterPropertyBlock")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::OneEuroFilter*), "SetProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{properties});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::OneEuroFilter::Step
// Il2CppName: Step
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::Input::OneEuroFilter::*)(float, float)>(&Oculus::Interaction::Input::OneEuroFilter::Step)> {
  static const MethodInfo* get() {
    static auto* newValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::OneEuroFilter*), "Step", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newValue, deltaTime});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::OneEuroFilter::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::OneEuroFilter::*)()>(&Oculus::Interaction::Input::OneEuroFilter::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::OneEuroFilter*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::OneEuroFilter::GetAlpha
// Il2CppName: GetAlpha
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::Input::OneEuroFilter::*)(float, float)>(&Oculus::Interaction::Input::OneEuroFilter::GetAlpha)> {
  static const MethodInfo* get() {
    static auto* rate = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* cutoff = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::OneEuroFilter*), "GetAlpha", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rate, cutoff});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::OneEuroFilter::CreateFloat
// Il2CppName: CreateFloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Input::IOneEuroFilter_1<float>* (*)()>(&Oculus::Interaction::Input::OneEuroFilter::CreateFloat)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::OneEuroFilter*), "CreateFloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::OneEuroFilter::CreateVector2
// Il2CppName: CreateVector2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Input::IOneEuroFilter_1<::UnityEngine::Vector2>* (*)()>(&Oculus::Interaction::Input::OneEuroFilter::CreateVector2)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::OneEuroFilter*), "CreateVector2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::OneEuroFilter::CreateVector3
// Il2CppName: CreateVector3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Input::IOneEuroFilter_1<::UnityEngine::Vector3>* (*)()>(&Oculus::Interaction::Input::OneEuroFilter::CreateVector3)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::OneEuroFilter*), "CreateVector3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::OneEuroFilter::CreateVector4
// Il2CppName: CreateVector4
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Input::IOneEuroFilter_1<::UnityEngine::Vector4>* (*)()>(&Oculus::Interaction::Input::OneEuroFilter::CreateVector4)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::OneEuroFilter*), "CreateVector4", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::OneEuroFilter::CreateQuaternion
// Il2CppName: CreateQuaternion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Input::IOneEuroFilter_1<::UnityEngine::Quaternion>* (*)()>(&Oculus::Interaction::Input::OneEuroFilter::CreateQuaternion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::OneEuroFilter*), "CreateQuaternion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::OneEuroFilter::Oculus_Interaction_Input_IOneEuroFilter$System_Single$_SetProperties
// Il2CppName: Oculus.Interaction.Input.IOneEuroFilter<System.Single>.SetProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::OneEuroFilter::*)(ByRef<::Oculus::Interaction::Input::OneEuroFilterPropertyBlock>)>(&Oculus::Interaction::Input::OneEuroFilter::Oculus_Interaction_Input_IOneEuroFilter$System_Single$_SetProperties)> {
  static const MethodInfo* get() {
    static auto* properties = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "OneEuroFilterPropertyBlock")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::OneEuroFilter*), "Oculus.Interaction.Input.IOneEuroFilter<System.Single>.SetProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{properties});
  }
};
