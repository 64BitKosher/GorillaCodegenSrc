// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Object because it is already included!
}
// Forward declaring namespace: Oculus::Interaction::Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: IController
  class IController;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: OVRControllerHelper
  class OVRControllerHelper;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.Input.Visuals
namespace Oculus::Interaction::Input::Visuals {
  // Forward declaring type: OVRControllerVisual
  class OVRControllerVisual;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Input::Visuals::OVRControllerVisual);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Input::Visuals::OVRControllerVisual*, "Oculus.Interaction.Input.Visuals", "OVRControllerVisual");
// Type namespace: Oculus.Interaction.Input.Visuals
namespace Oculus::Interaction::Input::Visuals {
  // Size: 0x3A
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.Input.Visuals.OVRControllerVisual
  // [TokenAttribute] Offset: FFFFFFFF
  class OVRControllerVisual : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.Object _controller
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Object* controller;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // public Oculus.Interaction.Input.IController Controller
    // Size: 0x8
    // Offset: 0x28
    ::Oculus::Interaction::Input::IController* Controller;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::IController*) == 0x8);
    // private OVRControllerHelper _ovrControllerHelper
    // Size: 0x8
    // Offset: 0x30
    ::GlobalNamespace::OVRControllerHelper* ovrControllerHelper;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRControllerHelper*) == 0x8);
    // private System.Boolean <ForceOffVisibility>k__BackingField
    // Size: 0x1
    // Offset: 0x38
    bool ForceOffVisibility;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _started
    // Size: 0x1
    // Offset: 0x39
    bool started;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private UnityEngine.Object _controller
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__controller();
    // Get instance field reference: public Oculus.Interaction.Input.IController Controller
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::IController*& dyn_Controller();
    // Get instance field reference: private OVRControllerHelper _ovrControllerHelper
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRControllerHelper*& dyn__ovrControllerHelper();
    // Get instance field reference: private System.Boolean <ForceOffVisibility>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$ForceOffVisibility$k__BackingField();
    // Get instance field reference: private System.Boolean _started
    [[deprecated("Use field access instead!")]] bool& dyn__started();
    // public System.Boolean get_ForceOffVisibility()
    // Offset: 0x4795994
    bool get_ForceOffVisibility();
    // public System.Void set_ForceOffVisibility(System.Boolean value)
    // Offset: 0x479599C
    void set_ForceOffVisibility(bool value);
    // protected System.Void Awake()
    // Offset: 0x47959A8
    void Awake();
    // protected System.Void Start()
    // Offset: 0x4795A10
    void Start();
    // protected System.Void OnEnable()
    // Offset: 0x4795B04
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x4795C04
    void OnDisable();
    // private System.Void HandleUpdated()
    // Offset: 0x4795D40
    void HandleUpdated();
    // public System.Void InjectAllOVRControllerVisual(Oculus.Interaction.Input.IController controller, OVRControllerHelper ovrControllerHelper)
    // Offset: 0x4796054
    void InjectAllOVRControllerVisual(::Oculus::Interaction::Input::IController* controller, ::GlobalNamespace::OVRControllerHelper* ovrControllerHelper);
    // public System.Void InjectController(Oculus.Interaction.Input.IController controller)
    // Offset: 0x4796080
    void InjectController(::Oculus::Interaction::Input::IController* controller);
    // public System.Void InjectAllOVRControllerHelper(OVRControllerHelper ovrControllerHelper)
    // Offset: 0x4796150
    void InjectAllOVRControllerHelper(::GlobalNamespace::OVRControllerHelper* ovrControllerHelper);
    // public System.Void .ctor()
    // Offset: 0x4796158
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OVRControllerVisual* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Input::Visuals::OVRControllerVisual::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OVRControllerVisual*, creationType>()));
    }
  }; // Oculus.Interaction.Input.Visuals.OVRControllerVisual
  #pragma pack(pop)
  static check_size<sizeof(OVRControllerVisual), 57 + sizeof(bool)> __Oculus_Interaction_Input_Visuals_OVRControllerVisualSizeCheck;
  static_assert(sizeof(OVRControllerVisual) == 0x3A);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Input::Visuals::OVRControllerVisual::get_ForceOffVisibility
// Il2CppName: get_ForceOffVisibility
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Input::Visuals::OVRControllerVisual::*)()>(&Oculus::Interaction::Input::Visuals::OVRControllerVisual::get_ForceOffVisibility)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::Visuals::OVRControllerVisual*), "get_ForceOffVisibility", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::Visuals::OVRControllerVisual::set_ForceOffVisibility
// Il2CppName: set_ForceOffVisibility
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::Visuals::OVRControllerVisual::*)(bool)>(&Oculus::Interaction::Input::Visuals::OVRControllerVisual::set_ForceOffVisibility)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::Visuals::OVRControllerVisual*), "set_ForceOffVisibility", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::Visuals::OVRControllerVisual::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::Visuals::OVRControllerVisual::*)()>(&Oculus::Interaction::Input::Visuals::OVRControllerVisual::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::Visuals::OVRControllerVisual*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::Visuals::OVRControllerVisual::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::Visuals::OVRControllerVisual::*)()>(&Oculus::Interaction::Input::Visuals::OVRControllerVisual::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::Visuals::OVRControllerVisual*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::Visuals::OVRControllerVisual::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::Visuals::OVRControllerVisual::*)()>(&Oculus::Interaction::Input::Visuals::OVRControllerVisual::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::Visuals::OVRControllerVisual*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::Visuals::OVRControllerVisual::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::Visuals::OVRControllerVisual::*)()>(&Oculus::Interaction::Input::Visuals::OVRControllerVisual::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::Visuals::OVRControllerVisual*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::Visuals::OVRControllerVisual::HandleUpdated
// Il2CppName: HandleUpdated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::Visuals::OVRControllerVisual::*)()>(&Oculus::Interaction::Input::Visuals::OVRControllerVisual::HandleUpdated)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::Visuals::OVRControllerVisual*), "HandleUpdated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::Visuals::OVRControllerVisual::InjectAllOVRControllerVisual
// Il2CppName: InjectAllOVRControllerVisual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::Visuals::OVRControllerVisual::*)(::Oculus::Interaction::Input::IController*, ::GlobalNamespace::OVRControllerHelper*)>(&Oculus::Interaction::Input::Visuals::OVRControllerVisual::InjectAllOVRControllerVisual)> {
  static const MethodInfo* get() {
    static auto* controller = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IController")->byval_arg;
    static auto* ovrControllerHelper = &::il2cpp_utils::GetClassFromName("", "OVRControllerHelper")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::Visuals::OVRControllerVisual*), "InjectAllOVRControllerVisual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controller, ovrControllerHelper});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::Visuals::OVRControllerVisual::InjectController
// Il2CppName: InjectController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::Visuals::OVRControllerVisual::*)(::Oculus::Interaction::Input::IController*)>(&Oculus::Interaction::Input::Visuals::OVRControllerVisual::InjectController)> {
  static const MethodInfo* get() {
    static auto* controller = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::Visuals::OVRControllerVisual*), "InjectController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controller});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::Visuals::OVRControllerVisual::InjectAllOVRControllerHelper
// Il2CppName: InjectAllOVRControllerHelper
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::Visuals::OVRControllerVisual::*)(::GlobalNamespace::OVRControllerHelper*)>(&Oculus::Interaction::Input::Visuals::OVRControllerVisual::InjectAllOVRControllerHelper)> {
  static const MethodInfo* get() {
    static auto* ovrControllerHelper = &::il2cpp_utils::GetClassFromName("", "OVRControllerHelper")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::Visuals::OVRControllerVisual*), "InjectAllOVRControllerHelper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ovrControllerHelper});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::Visuals::OVRControllerVisual::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
