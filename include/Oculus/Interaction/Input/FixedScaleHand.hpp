// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Oculus.Interaction.Input.Hand
#include "Oculus/Interaction/Input/Hand.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction::Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: HandDataAsset
  class HandDataAsset;
  // Skipping declaration: IDataSource because it is already included!
  // Skipping declaration: DataModifier`1 because it is already included!
}
// Completed forward declares
// Type namespace: Oculus.Interaction.Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: FixedScaleHand
  class FixedScaleHand;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Input::FixedScaleHand);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Input::FixedScaleHand*, "Oculus.Interaction.Input", "FixedScaleHand");
// Type namespace: Oculus.Interaction.Input
namespace Oculus::Interaction::Input {
  // WARNING Size may be invalid!
  // Autogenerated type: Oculus.Interaction.Input.FixedScaleHand
  // [TokenAttribute] Offset: FFFFFFFF
  class FixedScaleHand : public ::Oculus::Interaction::Input::Hand {
    public:
    public:
    // private System.Single _scale
    // Size: 0x4
    // Offset: 0x80
    float scale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: private System.Single _scale
    [[deprecated("Use field access instead!")]] float& dyn__scale();
    // public System.Void InjectAllFixedScaleDataModifier(Oculus.Interaction.Input.DataSource`1/UpdateModeFlags<Oculus.Interaction.Input.HandDataAsset> updateMode, Oculus.Interaction.Input.IDataSource updateAfter, Oculus.Interaction.Input.DataModifier`1<Oculus.Interaction.Input.HandDataAsset> modifyDataFromSource, System.Boolean applyModifier, System.Single scale)
    // Offset: 0x4813BB0
    void InjectAllFixedScaleDataModifier(typename ::Oculus::Interaction::Input::DataSource_1<::Oculus::Interaction::Input::HandDataAsset*>::UpdateModeFlags updateMode, ::Oculus::Interaction::Input::IDataSource* updateAfter, ::Oculus::Interaction::Input::DataModifier_1<::Oculus::Interaction::Input::HandDataAsset*>* modifyDataFromSource, bool applyModifier, float scale);
    // public System.Void InjectScale(System.Single scale)
    // Offset: 0x4813C50
    void InjectScale(float scale);
    // protected override System.Void Apply(Oculus.Interaction.Input.HandDataAsset data)
    // Offset: 0x4813AFC
    // Implemented from: Oculus.Interaction.Input.Hand
    // Base method: System.Void Hand::Apply(Oculus.Interaction.Input.HandDataAsset data)
    void Apply(::Oculus::Interaction::Input::HandDataAsset* data);
    // public System.Void .ctor()
    // Offset: 0x4813C58
    // Implemented from: Oculus.Interaction.Input.Hand
    // Base method: System.Void Hand::.ctor()
    // Base method: System.Void DataModifier_1::.ctor()
    // Base method: System.Void DataSource_1::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FixedScaleHand* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Input::FixedScaleHand::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FixedScaleHand*, creationType>()));
    }
  }; // Oculus.Interaction.Input.FixedScaleHand
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Input::FixedScaleHand::InjectAllFixedScaleDataModifier
// Il2CppName: InjectAllFixedScaleDataModifier
// Cannot write MetadataGetter for a method that has a nested type with a declaring generic type anywhere within it!
// Talk to sc2ad if this is something you want
// Writing MetadataGetter for method: Oculus::Interaction::Input::FixedScaleHand::InjectScale
// Il2CppName: InjectScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::FixedScaleHand::*)(float)>(&Oculus::Interaction::Input::FixedScaleHand::InjectScale)> {
  static const MethodInfo* get() {
    static auto* scale = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FixedScaleHand*), "InjectScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{scale});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FixedScaleHand::Apply
// Il2CppName: Apply
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::FixedScaleHand::*)(::Oculus::Interaction::Input::HandDataAsset*)>(&Oculus::Interaction::Input::FixedScaleHand::Apply)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "HandDataAsset")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FixedScaleHand*), "Apply", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FixedScaleHand::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
