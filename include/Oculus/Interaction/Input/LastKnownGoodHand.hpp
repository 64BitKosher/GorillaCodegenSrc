// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Oculus.Interaction.Input.Hand
#include "Oculus/Interaction/Input/Hand.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction::Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: HandDataAsset
  class HandDataAsset;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: LastKnownGoodHand
  class LastKnownGoodHand;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Input::LastKnownGoodHand);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Input::LastKnownGoodHand*, "Oculus.Interaction.Input", "LastKnownGoodHand");
// Type namespace: Oculus.Interaction.Input
namespace Oculus::Interaction::Input {
  // WARNING Size may be invalid!
  // Autogenerated type: Oculus.Interaction.Input.LastKnownGoodHand
  // [TokenAttribute] Offset: FFFFFFFF
  class LastKnownGoodHand : public ::Oculus::Interaction::Input::Hand {
    public:
    public:
    // private readonly Oculus.Interaction.Input.HandDataAsset _lastState
    // Size: 0x8
    // Offset: 0x80
    ::Oculus::Interaction::Input::HandDataAsset* lastState;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::HandDataAsset*) == 0x8);
    public:
    // Get instance field reference: private readonly Oculus.Interaction.Input.HandDataAsset _lastState
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::HandDataAsset*& dyn__lastState();
    // protected override System.Void Apply(Oculus.Interaction.Input.HandDataAsset data)
    // Offset: 0x4814298
    // Implemented from: Oculus.Interaction.Input.Hand
    // Base method: System.Void Hand::Apply(Oculus.Interaction.Input.HandDataAsset data)
    void Apply(::Oculus::Interaction::Input::HandDataAsset* data);
    // public System.Void .ctor()
    // Offset: 0x4814474
    // Implemented from: Oculus.Interaction.Input.Hand
    // Base method: System.Void Hand::.ctor()
    // Base method: System.Void DataModifier_1::.ctor()
    // Base method: System.Void DataSource_1::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LastKnownGoodHand* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Input::LastKnownGoodHand::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LastKnownGoodHand*, creationType>()));
    }
  }; // Oculus.Interaction.Input.LastKnownGoodHand
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Input::LastKnownGoodHand::Apply
// Il2CppName: Apply
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::LastKnownGoodHand::*)(::Oculus::Interaction::Input::HandDataAsset*)>(&Oculus::Interaction::Input::LastKnownGoodHand::Apply)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "HandDataAsset")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::LastKnownGoodHand*), "Apply", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::LastKnownGoodHand::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
