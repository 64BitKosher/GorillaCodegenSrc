// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Pose
#include "UnityEngine/Pose.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction::Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: ReadOnlyHandJointPoses
  class ReadOnlyHandJointPoses;
  // Forward declaring type: IReadOnlyHandSkeletonJointList
  class IReadOnlyHandSkeletonJointList;
  // Forward declaring type: IReadOnlyHandSkeleton
  class IReadOnlyHandSkeleton;
  // Forward declaring type: HandDataAsset
  class HandDataAsset;
  // Forward declaring type: HandJointId
  struct HandJointId;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: HandJointCache
  class HandJointCache;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Input::HandJointCache);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Input::HandJointCache*, "Oculus.Interaction.Input", "HandJointCache");
// Type namespace: Oculus.Interaction.Input
namespace Oculus::Interaction::Input {
  // Size: 0x4C
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.Input.HandJointCache
  // [TokenAttribute] Offset: FFFFFFFF
  class HandJointCache : public ::Il2CppObject {
    public:
    public:
    // private UnityEngine.Pose[] _localPoses
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<::UnityEngine::Pose> localPoses;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Pose>) == 0x8);
    // private UnityEngine.Pose[] _posesFromWrist
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::UnityEngine::Pose> posesFromWrist;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Pose>) == 0x8);
    // private UnityEngine.Pose[] _worldPoses
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::UnityEngine::Pose> worldPoses;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Pose>) == 0x8);
    // private Oculus.Interaction.Input.ReadOnlyHandJointPoses _posesFromWristCollection
    // Size: 0x8
    // Offset: 0x28
    ::Oculus::Interaction::Input::ReadOnlyHandJointPoses* posesFromWristCollection;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::ReadOnlyHandJointPoses*) == 0x8);
    // private Oculus.Interaction.Input.ReadOnlyHandJointPoses _localPosesCollection
    // Size: 0x8
    // Offset: 0x30
    ::Oculus::Interaction::Input::ReadOnlyHandJointPoses* localPosesCollection;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::ReadOnlyHandJointPoses*) == 0x8);
    // private Oculus.Interaction.Input.IReadOnlyHandSkeletonJointList _originalJoints
    // Size: 0x8
    // Offset: 0x38
    ::Oculus::Interaction::Input::IReadOnlyHandSkeletonJointList* originalJoints;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::IReadOnlyHandSkeletonJointList*) == 0x8);
    // private System.Int32 _dirtyWorldJoints
    // Size: 0x4
    // Offset: 0x40
    int dirtyWorldJoints;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _dirtyWristJoints
    // Size: 0x4
    // Offset: 0x44
    int dirtyWristJoints;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 <LocalDataVersion>k__BackingField
    // Size: 0x4
    // Offset: 0x48
    int LocalDataVersion;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: private UnityEngine.Pose[] _localPoses
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Pose>& dyn__localPoses();
    // Get instance field reference: private UnityEngine.Pose[] _posesFromWrist
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Pose>& dyn__posesFromWrist();
    // Get instance field reference: private UnityEngine.Pose[] _worldPoses
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Pose>& dyn__worldPoses();
    // Get instance field reference: private Oculus.Interaction.Input.ReadOnlyHandJointPoses _posesFromWristCollection
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::ReadOnlyHandJointPoses*& dyn__posesFromWristCollection();
    // Get instance field reference: private Oculus.Interaction.Input.ReadOnlyHandJointPoses _localPosesCollection
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::ReadOnlyHandJointPoses*& dyn__localPosesCollection();
    // Get instance field reference: private Oculus.Interaction.Input.IReadOnlyHandSkeletonJointList _originalJoints
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::IReadOnlyHandSkeletonJointList*& dyn__originalJoints();
    // Get instance field reference: private System.Int32 _dirtyWorldJoints
    [[deprecated("Use field access instead!")]] int& dyn__dirtyWorldJoints();
    // Get instance field reference: private System.Int32 _dirtyWristJoints
    [[deprecated("Use field access instead!")]] int& dyn__dirtyWristJoints();
    // Get instance field reference: private System.Int32 <LocalDataVersion>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$LocalDataVersion$k__BackingField();
    // public System.Int32 get_LocalDataVersion()
    // Offset: 0x48185CC
    int get_LocalDataVersion();
    // private System.Void set_LocalDataVersion(System.Int32 value)
    // Offset: 0x48185D4
    void set_LocalDataVersion(int value);
    // public System.Void .ctor(Oculus.Interaction.Input.IReadOnlyHandSkeleton handSkeleton)
    // Offset: 0x481744C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HandJointCache* New_ctor(::Oculus::Interaction::Input::IReadOnlyHandSkeleton* handSkeleton) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Input::HandJointCache::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HandJointCache*, creationType>(handSkeleton)));
    }
    // public System.Void Update(Oculus.Interaction.Input.HandDataAsset data, System.Int32 dataVersion)
    // Offset: 0x4817734
    void Update(::Oculus::Interaction::Input::HandDataAsset* data, int dataVersion);
    // public System.Boolean GetAllLocalPoses(out Oculus.Interaction.Input.ReadOnlyHandJointPoses localJointPoses)
    // Offset: 0x4818038
    bool GetAllLocalPoses(ByRef<::Oculus::Interaction::Input::ReadOnlyHandJointPoses*> localJointPoses);
    // public System.Boolean GetAllPosesFromWrist(out Oculus.Interaction.Input.ReadOnlyHandJointPoses jointPosesFromWrist)
    // Offset: 0x481822C
    bool GetAllPosesFromWrist(ByRef<::Oculus::Interaction::Input::ReadOnlyHandJointPoses*> jointPosesFromWrist);
    // public UnityEngine.Pose LocalJointPose(Oculus.Interaction.Input.HandJointId jointid)
    // Offset: 0x48188EC
    ::UnityEngine::Pose LocalJointPose(::Oculus::Interaction::Input::HandJointId jointid);
    // public UnityEngine.Pose PoseFromWrist(Oculus.Interaction.Input.HandJointId jointid)
    // Offset: 0x481892C
    ::UnityEngine::Pose PoseFromWrist(::Oculus::Interaction::Input::HandJointId jointid);
    // public UnityEngine.Pose WorldJointPose(Oculus.Interaction.Input.HandJointId jointid, UnityEngine.Pose rootPose, System.Single handScale)
    // Offset: 0x4817C9C
    ::UnityEngine::Pose WorldJointPose(::Oculus::Interaction::Input::HandJointId jointid, ::UnityEngine::Pose rootPose, float handScale);
    // private System.Void UpdateAllLocalPoses(Oculus.Interaction.Input.HandDataAsset data)
    // Offset: 0x481860C
    void UpdateAllLocalPoses(::Oculus::Interaction::Input::HandDataAsset* data);
    // private System.Void UpdateAllPosesFromWrist()
    // Offset: 0x48187A8
    void UpdateAllPosesFromWrist();
    // private System.Void UpdateWristJoint(Oculus.Interaction.Input.HandJointId jointid, ref UnityEngine.Pose pose)
    // Offset: 0x48189A4
    void UpdateWristJoint(::Oculus::Interaction::Input::HandJointId jointid, ByRef<::UnityEngine::Pose> pose);
  }; // Oculus.Interaction.Input.HandJointCache
  #pragma pack(pop)
  static check_size<sizeof(HandJointCache), 72 + sizeof(int)> __Oculus_Interaction_Input_HandJointCacheSizeCheck;
  static_assert(sizeof(HandJointCache) == 0x4C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Input::HandJointCache::get_LocalDataVersion
// Il2CppName: get_LocalDataVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Oculus::Interaction::Input::HandJointCache::*)()>(&Oculus::Interaction::Input::HandJointCache::get_LocalDataVersion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::HandJointCache*), "get_LocalDataVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::HandJointCache::set_LocalDataVersion
// Il2CppName: set_LocalDataVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::HandJointCache::*)(int)>(&Oculus::Interaction::Input::HandJointCache::set_LocalDataVersion)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::HandJointCache*), "set_LocalDataVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::HandJointCache::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Interaction::Input::HandJointCache::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::HandJointCache::*)(::Oculus::Interaction::Input::HandDataAsset*, int)>(&Oculus::Interaction::Input::HandJointCache::Update)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "HandDataAsset")->byval_arg;
    static auto* dataVersion = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::HandJointCache*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, dataVersion});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::HandJointCache::GetAllLocalPoses
// Il2CppName: GetAllLocalPoses
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Input::HandJointCache::*)(ByRef<::Oculus::Interaction::Input::ReadOnlyHandJointPoses*>)>(&Oculus::Interaction::Input::HandJointCache::GetAllLocalPoses)> {
  static const MethodInfo* get() {
    static auto* localJointPoses = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "ReadOnlyHandJointPoses")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::HandJointCache*), "GetAllLocalPoses", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{localJointPoses});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::HandJointCache::GetAllPosesFromWrist
// Il2CppName: GetAllPosesFromWrist
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Input::HandJointCache::*)(ByRef<::Oculus::Interaction::Input::ReadOnlyHandJointPoses*>)>(&Oculus::Interaction::Input::HandJointCache::GetAllPosesFromWrist)> {
  static const MethodInfo* get() {
    static auto* jointPosesFromWrist = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "ReadOnlyHandJointPoses")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::HandJointCache*), "GetAllPosesFromWrist", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{jointPosesFromWrist});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::HandJointCache::LocalJointPose
// Il2CppName: LocalJointPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Pose (Oculus::Interaction::Input::HandJointCache::*)(::Oculus::Interaction::Input::HandJointId)>(&Oculus::Interaction::Input::HandJointCache::LocalJointPose)> {
  static const MethodInfo* get() {
    static auto* jointid = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "HandJointId")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::HandJointCache*), "LocalJointPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{jointid});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::HandJointCache::PoseFromWrist
// Il2CppName: PoseFromWrist
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Pose (Oculus::Interaction::Input::HandJointCache::*)(::Oculus::Interaction::Input::HandJointId)>(&Oculus::Interaction::Input::HandJointCache::PoseFromWrist)> {
  static const MethodInfo* get() {
    static auto* jointid = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "HandJointId")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::HandJointCache*), "PoseFromWrist", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{jointid});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::HandJointCache::WorldJointPose
// Il2CppName: WorldJointPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Pose (Oculus::Interaction::Input::HandJointCache::*)(::Oculus::Interaction::Input::HandJointId, ::UnityEngine::Pose, float)>(&Oculus::Interaction::Input::HandJointCache::WorldJointPose)> {
  static const MethodInfo* get() {
    static auto* jointid = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "HandJointId")->byval_arg;
    static auto* rootPose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->byval_arg;
    static auto* handScale = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::HandJointCache*), "WorldJointPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{jointid, rootPose, handScale});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::HandJointCache::UpdateAllLocalPoses
// Il2CppName: UpdateAllLocalPoses
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::HandJointCache::*)(::Oculus::Interaction::Input::HandDataAsset*)>(&Oculus::Interaction::Input::HandJointCache::UpdateAllLocalPoses)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "HandDataAsset")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::HandJointCache*), "UpdateAllLocalPoses", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::HandJointCache::UpdateAllPosesFromWrist
// Il2CppName: UpdateAllPosesFromWrist
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::HandJointCache::*)()>(&Oculus::Interaction::Input::HandJointCache::UpdateAllPosesFromWrist)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::HandJointCache*), "UpdateAllPosesFromWrist", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::HandJointCache::UpdateWristJoint
// Il2CppName: UpdateWristJoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Input::HandJointCache::*)(::Oculus::Interaction::Input::HandJointId, ByRef<::UnityEngine::Pose>)>(&Oculus::Interaction::Input::HandJointCache::UpdateWristJoint)> {
  static const MethodInfo* get() {
    static auto* jointid = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "HandJointId")->byval_arg;
    static auto* pose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::HandJointCache*), "UpdateWristJoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{jointid, pose});
  }
};
