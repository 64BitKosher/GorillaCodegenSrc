// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
// Including type: UnityEngine.Pose
#include "UnityEngine/Pose.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction::Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: HandJointId
  struct HandJointId;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerator`1<T>
  template<typename T>
  class IEnumerator_1;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: ReadOnlyHandJointPoses
  class ReadOnlyHandJointPoses;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Input::ReadOnlyHandJointPoses);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Input::ReadOnlyHandJointPoses*, "Oculus.Interaction.Input", "ReadOnlyHandJointPoses");
// Type namespace: Oculus.Interaction.Input
namespace Oculus::Interaction::Input {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.Input.ReadOnlyHandJointPoses
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: FFFFFFFF
  class ReadOnlyHandJointPoses : public ::Il2CppObject/*, public ::System::Collections::Generic::IReadOnlyList_1<::UnityEngine::Pose>*/ {
    public:
    // Nested type: ::Oculus::Interaction::Input::ReadOnlyHandJointPoses::$GetEnumerator$d__2
    class $GetEnumerator$d__2;
    public:
    // private UnityEngine.Pose[] _poses
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<::UnityEngine::Pose> poses;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Pose>) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::Collections::Generic::IReadOnlyList_1<::UnityEngine::Pose>
    operator ::System::Collections::Generic::IReadOnlyList_1<::UnityEngine::Pose>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IReadOnlyList_1<::UnityEngine::Pose>*>(this);
    }
    // Creating conversion operator: operator ::ArrayW<::UnityEngine::Pose>
    constexpr operator ::ArrayW<::UnityEngine::Pose>() const noexcept {
      return poses;
    }
    // Get static field: static private readonly Oculus.Interaction.Input.ReadOnlyHandJointPoses <Empty>k__BackingField
    static ::Oculus::Interaction::Input::ReadOnlyHandJointPoses* _get_$Empty$k__BackingField();
    // Set static field: static private readonly Oculus.Interaction.Input.ReadOnlyHandJointPoses <Empty>k__BackingField
    static void _set_$Empty$k__BackingField(::Oculus::Interaction::Input::ReadOnlyHandJointPoses* value);
    // Get instance field reference: private UnityEngine.Pose[] _poses
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Pose>& dyn__poses();
    // public System.Void .ctor(UnityEngine.Pose[] poses)
    // Offset: 0x48185DC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ReadOnlyHandJointPoses* New_ctor(::ArrayW<::UnityEngine::Pose> poses) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Input::ReadOnlyHandJointPoses::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ReadOnlyHandJointPoses*, creationType>(poses)));
    }
    // public System.Collections.Generic.IEnumerator`1<UnityEngine.Pose> GetEnumerator()
    // Offset: 0x481B434
    ::System::Collections::Generic::IEnumerator_1<::UnityEngine::Pose>* GetEnumerator();
    // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
    // Offset: 0x481B4C8
    ::System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator();
    // static public Oculus.Interaction.Input.ReadOnlyHandJointPoses get_Empty()
    // Offset: 0x481B4CC
    static ::Oculus::Interaction::Input::ReadOnlyHandJointPoses* get_Empty();
    // public System.Int32 get_Count()
    // Offset: 0x481878C
    int get_Count();
    // public UnityEngine.Pose get_Item(System.Int32 index)
    // Offset: 0x4817FF8
    ::UnityEngine::Pose get_Item(int index);
    // public UnityEngine.Pose get_Item(Oculus.Interaction.Input.HandJointId index)
    // Offset: 0x481B524
    ::UnityEngine::Pose get_Item(::Oculus::Interaction::Input::HandJointId index);
    // static private System.Void .cctor()
    // Offset: 0x481B558
    static void _cctor();
  }; // Oculus.Interaction.Input.ReadOnlyHandJointPoses
  #pragma pack(pop)
  static check_size<sizeof(ReadOnlyHandJointPoses), 16 + sizeof(::ArrayW<::UnityEngine::Pose>)> __Oculus_Interaction_Input_ReadOnlyHandJointPosesSizeCheck;
  static_assert(sizeof(ReadOnlyHandJointPoses) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Input::ReadOnlyHandJointPoses::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Interaction::Input::ReadOnlyHandJointPoses::GetEnumerator
// Il2CppName: GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerator_1<::UnityEngine::Pose>* (Oculus::Interaction::Input::ReadOnlyHandJointPoses::*)()>(&Oculus::Interaction::Input::ReadOnlyHandJointPoses::GetEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::ReadOnlyHandJointPoses*), "GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::ReadOnlyHandJointPoses::System_Collections_IEnumerable_GetEnumerator
// Il2CppName: System.Collections.IEnumerable.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (Oculus::Interaction::Input::ReadOnlyHandJointPoses::*)()>(&Oculus::Interaction::Input::ReadOnlyHandJointPoses::System_Collections_IEnumerable_GetEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::ReadOnlyHandJointPoses*), "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::ReadOnlyHandJointPoses::get_Empty
// Il2CppName: get_Empty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Input::ReadOnlyHandJointPoses* (*)()>(&Oculus::Interaction::Input::ReadOnlyHandJointPoses::get_Empty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::ReadOnlyHandJointPoses*), "get_Empty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::ReadOnlyHandJointPoses::get_Count
// Il2CppName: get_Count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Oculus::Interaction::Input::ReadOnlyHandJointPoses::*)()>(&Oculus::Interaction::Input::ReadOnlyHandJointPoses::get_Count)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::ReadOnlyHandJointPoses*), "get_Count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::ReadOnlyHandJointPoses::get_Item
// Il2CppName: get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Pose (Oculus::Interaction::Input::ReadOnlyHandJointPoses::*)(int)>(&Oculus::Interaction::Input::ReadOnlyHandJointPoses::get_Item)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::ReadOnlyHandJointPoses*), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::ReadOnlyHandJointPoses::get_Item
// Il2CppName: get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Pose (Oculus::Interaction::Input::ReadOnlyHandJointPoses::*)(::Oculus::Interaction::Input::HandJointId)>(&Oculus::Interaction::Input::ReadOnlyHandJointPoses::get_Item)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "HandJointId")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::ReadOnlyHandJointPoses*), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::ReadOnlyHandJointPoses::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Oculus::Interaction::Input::ReadOnlyHandJointPoses::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::ReadOnlyHandJointPoses*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
