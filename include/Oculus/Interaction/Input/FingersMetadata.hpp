// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Oculus.Interaction.Input.HandJointId
#include "Oculus/Interaction/Input/HandJointId.hpp"
// Including type: Oculus.Interaction.Input.HandFinger
#include "Oculus/Interaction/Input/HandFinger.hpp"
// Including type: Oculus.Interaction.Input.JointFreedom
#include "Oculus/Interaction/Input/JointFreedom.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Type namespace: Oculus.Interaction.Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: FingersMetadata
  class FingersMetadata;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Input::FingersMetadata);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Input::FingersMetadata*, "Oculus.Interaction.Input", "FingersMetadata");
// Type namespace: Oculus.Interaction.Input
namespace Oculus::Interaction::Input {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.Input.FingersMetadata
  // [TokenAttribute] Offset: FFFFFFFF
  class FingersMetadata : public ::Il2CppObject {
    public:
    // Get static field: static public readonly Oculus.Interaction.Input.HandJointId[] HAND_JOINT_IDS
    static ::ArrayW<::Oculus::Interaction::Input::HandJointId> _get_HAND_JOINT_IDS();
    // Set static field: static public readonly Oculus.Interaction.Input.HandJointId[] HAND_JOINT_IDS
    static void _set_HAND_JOINT_IDS(::ArrayW<::Oculus::Interaction::Input::HandJointId> value);
    // Get static field: static public readonly System.Int32[][] FINGER_TO_JOINT_INDEX
    static ::ArrayW<::ArrayW<int>> _get_FINGER_TO_JOINT_INDEX();
    // Set static field: static public readonly System.Int32[][] FINGER_TO_JOINT_INDEX
    static void _set_FINGER_TO_JOINT_INDEX(::ArrayW<::ArrayW<int>> value);
    // Get static field: static public readonly Oculus.Interaction.Input.HandJointId[][] FINGER_TO_JOINTS
    static ::ArrayW<::ArrayW<::Oculus::Interaction::Input::HandJointId>> _get_FINGER_TO_JOINTS();
    // Set static field: static public readonly Oculus.Interaction.Input.HandJointId[][] FINGER_TO_JOINTS
    static void _set_FINGER_TO_JOINTS(::ArrayW<::ArrayW<::Oculus::Interaction::Input::HandJointId>> value);
    // Get static field: static public readonly System.Boolean[] HAND_JOINT_CAN_SPREAD
    static ::ArrayW<bool> _get_HAND_JOINT_CAN_SPREAD();
    // Set static field: static public readonly System.Boolean[] HAND_JOINT_CAN_SPREAD
    static void _set_HAND_JOINT_CAN_SPREAD(::ArrayW<bool> value);
    // Get static field: static public readonly Oculus.Interaction.Input.HandFinger[] JOINT_TO_FINGER
    static ::ArrayW<::Oculus::Interaction::Input::HandFinger> _get_JOINT_TO_FINGER();
    // Set static field: static public readonly Oculus.Interaction.Input.HandFinger[] JOINT_TO_FINGER
    static void _set_JOINT_TO_FINGER(::ArrayW<::Oculus::Interaction::Input::HandFinger> value);
    // Get static field: static public readonly System.Int32[] JOINT_TO_FINGER_INDEX
    static ::ArrayW<int> _get_JOINT_TO_FINGER_INDEX();
    // Set static field: static public readonly System.Int32[] JOINT_TO_FINGER_INDEX
    static void _set_JOINT_TO_FINGER_INDEX(::ArrayW<int> value);
    // static public Oculus.Interaction.Input.JointFreedom[] DefaultFingersFreedom()
    // Offset: 0x4816368
    static ::ArrayW<::Oculus::Interaction::Input::JointFreedom> DefaultFingersFreedom();
    // static public System.Int32 HandJointIdToIndex(Oculus.Interaction.Input.HandJointId id)
    // Offset: 0x4815530
    static int HandJointIdToIndex(::Oculus::Interaction::Input::HandJointId id);
    // public System.Void .ctor()
    // Offset: 0x48163D8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FingersMetadata* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Input::FingersMetadata::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FingersMetadata*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x48163E0
    static void _cctor();
  }; // Oculus.Interaction.Input.FingersMetadata
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Input::FingersMetadata::DefaultFingersFreedom
// Il2CppName: DefaultFingersFreedom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Oculus::Interaction::Input::JointFreedom> (*)()>(&Oculus::Interaction::Input::FingersMetadata::DefaultFingersFreedom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FingersMetadata*), "DefaultFingersFreedom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FingersMetadata::HandJointIdToIndex
// Il2CppName: HandJointIdToIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Oculus::Interaction::Input::HandJointId)>(&Oculus::Interaction::Input::FingersMetadata::HandJointIdToIndex)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "HandJointId")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FingersMetadata*), "HandJointIdToIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Input::FingersMetadata::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Interaction::Input::FingersMetadata::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Oculus::Interaction::Input::FingersMetadata::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Input::FingersMetadata*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
