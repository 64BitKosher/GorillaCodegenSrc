// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Oculus.Interaction.ISelector
#include "Oculus/Interaction/ISelector.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction
namespace Oculus::Interaction {
  // Forward declaring type: IActiveState
  class IActiveState;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Object because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: ActiveStateSelector
  class ActiveStateSelector;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::ActiveStateSelector);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::ActiveStateSelector*, "Oculus.Interaction", "ActiveStateSelector");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.ActiveStateSelector
  // [TokenAttribute] Offset: FFFFFFFF
  class ActiveStateSelector : public ::UnityEngine::MonoBehaviour/*, public ::Oculus::Interaction::ISelector*/ {
    public:
    // Nested type: ::Oculus::Interaction::ActiveStateSelector::$$c
    class $$c;
    public:
    // private UnityEngine.Object _activeState
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Object* activeState;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.IActiveState <ActiveState>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    ::Oculus::Interaction::IActiveState* ActiveState;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::IActiveState*) == 0x8);
    // private System.Boolean _selecting
    // Size: 0x1
    // Offset: 0x30
    bool selecting;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: selecting and: WhenSelected
    char __padding2[0x7] = {};
    // private System.Action WhenSelected
    // Size: 0x8
    // Offset: 0x38
    ::System::Action* WhenSelected;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private System.Action WhenUnselected
    // Size: 0x8
    // Offset: 0x40
    ::System::Action* WhenUnselected;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::ISelector
    operator ::Oculus::Interaction::ISelector() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::ISelector*>(this);
    }
    // Get instance field reference: private UnityEngine.Object _activeState
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__activeState();
    // Get instance field reference: private Oculus.Interaction.IActiveState <ActiveState>k__BackingField
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::IActiveState*& dyn_$ActiveState$k__BackingField();
    // Get instance field reference: private System.Boolean _selecting
    [[deprecated("Use field access instead!")]] bool& dyn__selecting();
    // Get instance field reference: private System.Action WhenSelected
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_WhenSelected();
    // Get instance field reference: private System.Action WhenUnselected
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_WhenUnselected();
    // protected Oculus.Interaction.IActiveState get_ActiveState()
    // Offset: 0x47799E8
    ::Oculus::Interaction::IActiveState* get_ActiveState();
    // private System.Void set_ActiveState(Oculus.Interaction.IActiveState value)
    // Offset: 0x47799F0
    void set_ActiveState(::Oculus::Interaction::IActiveState* value);
    // public System.Void add_WhenSelected(System.Action value)
    // Offset: 0x47799F8
    void add_WhenSelected(::System::Action* value);
    // public System.Void remove_WhenSelected(System.Action value)
    // Offset: 0x4779A94
    void remove_WhenSelected(::System::Action* value);
    // public System.Void add_WhenUnselected(System.Action value)
    // Offset: 0x4779B30
    void add_WhenUnselected(::System::Action* value);
    // public System.Void remove_WhenUnselected(System.Action value)
    // Offset: 0x4779BCC
    void remove_WhenUnselected(::System::Action* value);
    // protected System.Void Awake()
    // Offset: 0x4779C68
    void Awake();
    // protected System.Void Start()
    // Offset: 0x4779CC0
    void Start();
    // protected System.Void Update()
    // Offset: 0x4779CC4
    void Update();
    // public System.Void InjectAllActiveStateSelector(Oculus.Interaction.IActiveState activeState)
    // Offset: 0x4779E18
    void InjectAllActiveStateSelector(::Oculus::Interaction::IActiveState* activeState);
    // public System.Void InjectActiveState(Oculus.Interaction.IActiveState activeState)
    // Offset: 0x4779E1C
    void InjectActiveState(::Oculus::Interaction::IActiveState* activeState);
    // public System.Void .ctor()
    // Offset: 0x4779EEC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ActiveStateSelector* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::ActiveStateSelector::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ActiveStateSelector*, creationType>()));
    }
  }; // Oculus.Interaction.ActiveStateSelector
  #pragma pack(pop)
  static check_size<sizeof(ActiveStateSelector), 64 + sizeof(::System::Action*)> __Oculus_Interaction_ActiveStateSelectorSizeCheck;
  static_assert(sizeof(ActiveStateSelector) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::ActiveStateSelector::get_ActiveState
// Il2CppName: get_ActiveState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::IActiveState* (Oculus::Interaction::ActiveStateSelector::*)()>(&Oculus::Interaction::ActiveStateSelector::get_ActiveState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ActiveStateSelector*), "get_ActiveState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ActiveStateSelector::set_ActiveState
// Il2CppName: set_ActiveState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ActiveStateSelector::*)(::Oculus::Interaction::IActiveState*)>(&Oculus::Interaction::ActiveStateSelector::set_ActiveState)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IActiveState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ActiveStateSelector*), "set_ActiveState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ActiveStateSelector::add_WhenSelected
// Il2CppName: add_WhenSelected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ActiveStateSelector::*)(::System::Action*)>(&Oculus::Interaction::ActiveStateSelector::add_WhenSelected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ActiveStateSelector*), "add_WhenSelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ActiveStateSelector::remove_WhenSelected
// Il2CppName: remove_WhenSelected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ActiveStateSelector::*)(::System::Action*)>(&Oculus::Interaction::ActiveStateSelector::remove_WhenSelected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ActiveStateSelector*), "remove_WhenSelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ActiveStateSelector::add_WhenUnselected
// Il2CppName: add_WhenUnselected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ActiveStateSelector::*)(::System::Action*)>(&Oculus::Interaction::ActiveStateSelector::add_WhenUnselected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ActiveStateSelector*), "add_WhenUnselected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ActiveStateSelector::remove_WhenUnselected
// Il2CppName: remove_WhenUnselected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ActiveStateSelector::*)(::System::Action*)>(&Oculus::Interaction::ActiveStateSelector::remove_WhenUnselected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ActiveStateSelector*), "remove_WhenUnselected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ActiveStateSelector::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ActiveStateSelector::*)()>(&Oculus::Interaction::ActiveStateSelector::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ActiveStateSelector*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ActiveStateSelector::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ActiveStateSelector::*)()>(&Oculus::Interaction::ActiveStateSelector::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ActiveStateSelector*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ActiveStateSelector::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ActiveStateSelector::*)()>(&Oculus::Interaction::ActiveStateSelector::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ActiveStateSelector*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ActiveStateSelector::InjectAllActiveStateSelector
// Il2CppName: InjectAllActiveStateSelector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ActiveStateSelector::*)(::Oculus::Interaction::IActiveState*)>(&Oculus::Interaction::ActiveStateSelector::InjectAllActiveStateSelector)> {
  static const MethodInfo* get() {
    static auto* activeState = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IActiveState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ActiveStateSelector*), "InjectAllActiveStateSelector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{activeState});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ActiveStateSelector::InjectActiveState
// Il2CppName: InjectActiveState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ActiveStateSelector::*)(::Oculus::Interaction::IActiveState*)>(&Oculus::Interaction::ActiveStateSelector::InjectActiveState)> {
  static const MethodInfo* get() {
    static auto* activeState = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IActiveState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ActiveStateSelector*), "InjectActiveState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{activeState});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ActiveStateSelector::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
