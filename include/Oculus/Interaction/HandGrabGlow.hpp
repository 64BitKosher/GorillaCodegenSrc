// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction::GrabAPI
namespace Oculus::Interaction::GrabAPI {
  // Forward declaring type: GrabbingRule
  struct GrabbingRule;
}
// Forward declaring namespace: Oculus::Interaction
namespace Oculus::Interaction {
  // Forward declaring type: IInteractor
  class IInteractor;
  // Forward declaring type: MaterialPropertyBlockEditor
  class MaterialPropertyBlockEditor;
  // Forward declaring type: HandVisual
  class HandVisual;
  // Skipping declaration: GlowType because it is already included!
}
// Forward declaring namespace: Oculus::Interaction::HandGrab
namespace Oculus::Interaction::HandGrab {
  // Forward declaring type: IHandGrabInteractor
  class IHandGrabInteractor;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Object because it is already included!
  // Forward declaring type: SkinnedMeshRenderer
  class SkinnedMeshRenderer;
}
// Forward declaring namespace: Oculus::Interaction::Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: HandFinger
  struct HandFinger;
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: HandGrabGlow
  class HandGrabGlow;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::HandGrabGlow);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::HandGrabGlow*, "Oculus.Interaction", "HandGrabGlow");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0xC9
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.HandGrabGlow
  // [TokenAttribute] Offset: FFFFFFFF
  class HandGrabGlow : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::Oculus::Interaction::HandGrabGlow::GlowType
    struct GlowType;
    // Nested type: ::Oculus::Interaction::HandGrabGlow::GlowState
    struct GlowState;
    // Nested type: ::Oculus::Interaction::HandGrabGlow::GrabState
    struct GrabState;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Oculus.Interaction.HandGrabGlow/GlowType
    // [TokenAttribute] Offset: FFFFFFFF
    struct GlowType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: GlowType
      constexpr GlowType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Oculus.Interaction.HandGrabGlow/GlowType Fill
      static constexpr const int Fill = 27;
      // Get static field: static public Oculus.Interaction.HandGrabGlow/GlowType Fill
      static ::Oculus::Interaction::HandGrabGlow::GlowType _get_Fill();
      // Set static field: static public Oculus.Interaction.HandGrabGlow/GlowType Fill
      static void _set_Fill(::Oculus::Interaction::HandGrabGlow::GlowType value);
      // static field const value: static public Oculus.Interaction.HandGrabGlow/GlowType Outline
      static constexpr const int Outline = 28;
      // Get static field: static public Oculus.Interaction.HandGrabGlow/GlowType Outline
      static ::Oculus::Interaction::HandGrabGlow::GlowType _get_Outline();
      // Set static field: static public Oculus.Interaction.HandGrabGlow/GlowType Outline
      static void _set_Outline(::Oculus::Interaction::HandGrabGlow::GlowType value);
      // static field const value: static public Oculus.Interaction.HandGrabGlow/GlowType Both
      static constexpr const int Both = 29;
      // Get static field: static public Oculus.Interaction.HandGrabGlow/GlowType Both
      static ::Oculus::Interaction::HandGrabGlow::GlowType _get_Both();
      // Set static field: static public Oculus.Interaction.HandGrabGlow/GlowType Both
      static void _set_Both(::Oculus::Interaction::HandGrabGlow::GlowType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Oculus.Interaction.HandGrabGlow/GlowType
    #pragma pack(pop)
    static check_size<sizeof(HandGrabGlow::GlowType), 0 + sizeof(int)> __Oculus_Interaction_HandGrabGlow_GlowTypeSizeCheck;
    static_assert(sizeof(HandGrabGlow::GlowType) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Oculus.Interaction.HandGrabGlow/GlowState
    // [TokenAttribute] Offset: FFFFFFFF
    struct GlowState/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: GlowState
      constexpr GlowState(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Oculus.Interaction.HandGrabGlow/GlowState None
      static constexpr const int None = 0;
      // Get static field: static public Oculus.Interaction.HandGrabGlow/GlowState None
      static ::Oculus::Interaction::HandGrabGlow::GlowState _get_None();
      // Set static field: static public Oculus.Interaction.HandGrabGlow/GlowState None
      static void _set_None(::Oculus::Interaction::HandGrabGlow::GlowState value);
      // static field const value: static public Oculus.Interaction.HandGrabGlow/GlowState Hover
      static constexpr const int Hover = 1;
      // Get static field: static public Oculus.Interaction.HandGrabGlow/GlowState Hover
      static ::Oculus::Interaction::HandGrabGlow::GlowState _get_Hover();
      // Set static field: static public Oculus.Interaction.HandGrabGlow/GlowState Hover
      static void _set_Hover(::Oculus::Interaction::HandGrabGlow::GlowState value);
      // static field const value: static public Oculus.Interaction.HandGrabGlow/GlowState Selected
      static constexpr const int Selected = 2;
      // Get static field: static public Oculus.Interaction.HandGrabGlow/GlowState Selected
      static ::Oculus::Interaction::HandGrabGlow::GlowState _get_Selected();
      // Set static field: static public Oculus.Interaction.HandGrabGlow/GlowState Selected
      static void _set_Selected(::Oculus::Interaction::HandGrabGlow::GlowState value);
      // static field const value: static public Oculus.Interaction.HandGrabGlow/GlowState SelectedGlowOut
      static constexpr const int SelectedGlowOut = 3;
      // Get static field: static public Oculus.Interaction.HandGrabGlow/GlowState SelectedGlowOut
      static ::Oculus::Interaction::HandGrabGlow::GlowState _get_SelectedGlowOut();
      // Set static field: static public Oculus.Interaction.HandGrabGlow/GlowState SelectedGlowOut
      static void _set_SelectedGlowOut(::Oculus::Interaction::HandGrabGlow::GlowState value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Oculus.Interaction.HandGrabGlow/GlowState
    #pragma pack(pop)
    static check_size<sizeof(HandGrabGlow::GlowState), 0 + sizeof(int)> __Oculus_Interaction_HandGrabGlow_GlowStateSizeCheck;
    static_assert(sizeof(HandGrabGlow::GlowState) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Oculus.Interaction.HandGrabGlow/GrabState
    // [TokenAttribute] Offset: FFFFFFFF
    struct GrabState/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: GrabState
      constexpr GrabState(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Oculus.Interaction.HandGrabGlow/GrabState None
      static constexpr const int None = 0;
      // Get static field: static public Oculus.Interaction.HandGrabGlow/GrabState None
      static ::Oculus::Interaction::HandGrabGlow::GrabState _get_None();
      // Set static field: static public Oculus.Interaction.HandGrabGlow/GrabState None
      static void _set_None(::Oculus::Interaction::HandGrabGlow::GrabState value);
      // static field const value: static public Oculus.Interaction.HandGrabGlow/GrabState Pinch
      static constexpr const int Pinch = 1;
      // Get static field: static public Oculus.Interaction.HandGrabGlow/GrabState Pinch
      static ::Oculus::Interaction::HandGrabGlow::GrabState _get_Pinch();
      // Set static field: static public Oculus.Interaction.HandGrabGlow/GrabState Pinch
      static void _set_Pinch(::Oculus::Interaction::HandGrabGlow::GrabState value);
      // static field const value: static public Oculus.Interaction.HandGrabGlow/GrabState Palm
      static constexpr const int Palm = 2;
      // Get static field: static public Oculus.Interaction.HandGrabGlow/GrabState Palm
      static ::Oculus::Interaction::HandGrabGlow::GrabState _get_Palm();
      // Set static field: static public Oculus.Interaction.HandGrabGlow/GrabState Palm
      static void _set_Palm(::Oculus::Interaction::HandGrabGlow::GrabState value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Oculus.Interaction.HandGrabGlow/GrabState
    #pragma pack(pop)
    static check_size<sizeof(HandGrabGlow::GrabState), 0 + sizeof(int)> __Oculus_Interaction_HandGrabGlow_GrabStateSizeCheck;
    static_assert(sizeof(HandGrabGlow::GrabState) == 0x4);
    public:
    // private UnityEngine.Object _handGrabInteractor
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Object* handGrabInteractor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private UnityEngine.SkinnedMeshRenderer _handRenderer
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::SkinnedMeshRenderer* handRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::SkinnedMeshRenderer*) == 0x8);
    // private Oculus.Interaction.MaterialPropertyBlockEditor _materialEditor
    // Size: 0x8
    // Offset: 0x30
    ::Oculus::Interaction::MaterialPropertyBlockEditor* materialEditor;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::MaterialPropertyBlockEditor*) == 0x8);
    // private Oculus.Interaction.HandVisual _handVisual
    // Size: 0x8
    // Offset: 0x38
    ::Oculus::Interaction::HandVisual* handVisual;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::HandVisual*) == 0x8);
    // private UnityEngine.Color _glowColorGrabing
    // Size: 0x10
    // Offset: 0x40
    ::UnityEngine::Color glowColorGrabing;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color _glowColorHover
    // Size: 0x10
    // Offset: 0x50
    ::UnityEngine::Color glowColorHover;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private System.Single _colorChangeSpeed
    // Size: 0x4
    // Offset: 0x60
    float colorChangeSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _glowFadeStartTime
    // Size: 0x4
    // Offset: 0x64
    float glowFadeStartTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _glowStrengthChangeSpeed
    // Size: 0x4
    // Offset: 0x68
    float glowStrengthChangeSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _fadeOut
    // Size: 0x1
    // Offset: 0x6C
    bool fadeOut;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: fadeOut and: gradientLength
    char __padding9[0x3] = {};
    // private System.Single _gradientLength
    // Size: 0x4
    // Offset: 0x70
    float gradientLength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private Oculus.Interaction.HandGrabGlow/GlowType _glowType
    // Size: 0x4
    // Offset: 0x74
    ::Oculus::Interaction::HandGrabGlow::GlowType glowType;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::HandGrabGlow::GlowType) == 0x4);
    // private Oculus.Interaction.HandGrabGlow/GlowState _state
    // Size: 0x4
    // Offset: 0x78
    ::Oculus::Interaction::HandGrabGlow::GlowState state;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::HandGrabGlow::GlowState) == 0x4);
    // private System.Single _accumulatedSelectedTime
    // Size: 0x4
    // Offset: 0x7C
    float accumulatedSelectedTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private Oculus.Interaction.HandGrabGlow/GrabState _grabState
    // Size: 0x4
    // Offset: 0x80
    ::Oculus::Interaction::HandGrabGlow::GrabState grabState;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::HandGrabGlow::GrabState) == 0x4);
    // private System.Single _glowFadeValue
    // Size: 0x4
    // Offset: 0x84
    float glowFadeValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Color _currentColor
    // Size: 0x10
    // Offset: 0x88
    ::UnityEngine::Color currentColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private Oculus.Interaction.HandGrab.IHandGrabInteractor HandGrabInteractor
    // Size: 0x8
    // Offset: 0x98
    ::Oculus::Interaction::HandGrab::IHandGrabInteractor* HandGrabInteractor;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::HandGrab::IHandGrabInteractor*) == 0x8);
    // private Oculus.Interaction.IInteractor Interactor
    // Size: 0x8
    // Offset: 0xA0
    ::Oculus::Interaction::IInteractor* Interactor;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::IInteractor*) == 0x8);
    // private System.Single[] _glowStregth
    // Size: 0x8
    // Offset: 0xA8
    ::ArrayW<float> glowStregth;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // private readonly System.Int32 _generateGlowID
    // Size: 0x4
    // Offset: 0xB0
    int generateGlowID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Int32 _glowColorID
    // Size: 0x4
    // Offset: 0xB4
    int glowColorID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Int32 _glowTypeID
    // Size: 0x4
    // Offset: 0xB8
    int glowTypeID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Int32 _glowParameterID
    // Size: 0x4
    // Offset: 0xBC
    int glowParameterID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Int32[] _fingersGlowIDs
    // Size: 0x8
    // Offset: 0xC0
    ::ArrayW<int> fingersGlowIDs;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // protected System.Boolean _started
    // Size: 0x1
    // Offset: 0xC8
    bool started;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private UnityEngine.Object _handGrabInteractor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__handGrabInteractor();
    // Get instance field reference: private UnityEngine.SkinnedMeshRenderer _handRenderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::SkinnedMeshRenderer*& dyn__handRenderer();
    // Get instance field reference: private Oculus.Interaction.MaterialPropertyBlockEditor _materialEditor
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::MaterialPropertyBlockEditor*& dyn__materialEditor();
    // Get instance field reference: private Oculus.Interaction.HandVisual _handVisual
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::HandVisual*& dyn__handVisual();
    // Get instance field reference: private UnityEngine.Color _glowColorGrabing
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__glowColorGrabing();
    // Get instance field reference: private UnityEngine.Color _glowColorHover
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__glowColorHover();
    // Get instance field reference: private System.Single _colorChangeSpeed
    [[deprecated("Use field access instead!")]] float& dyn__colorChangeSpeed();
    // Get instance field reference: private System.Single _glowFadeStartTime
    [[deprecated("Use field access instead!")]] float& dyn__glowFadeStartTime();
    // Get instance field reference: private System.Single _glowStrengthChangeSpeed
    [[deprecated("Use field access instead!")]] float& dyn__glowStrengthChangeSpeed();
    // Get instance field reference: private System.Boolean _fadeOut
    [[deprecated("Use field access instead!")]] bool& dyn__fadeOut();
    // Get instance field reference: private System.Single _gradientLength
    [[deprecated("Use field access instead!")]] float& dyn__gradientLength();
    // Get instance field reference: private Oculus.Interaction.HandGrabGlow/GlowType _glowType
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::HandGrabGlow::GlowType& dyn__glowType();
    // Get instance field reference: private Oculus.Interaction.HandGrabGlow/GlowState _state
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::HandGrabGlow::GlowState& dyn__state();
    // Get instance field reference: private System.Single _accumulatedSelectedTime
    [[deprecated("Use field access instead!")]] float& dyn__accumulatedSelectedTime();
    // Get instance field reference: private Oculus.Interaction.HandGrabGlow/GrabState _grabState
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::HandGrabGlow::GrabState& dyn__grabState();
    // Get instance field reference: private System.Single _glowFadeValue
    [[deprecated("Use field access instead!")]] float& dyn__glowFadeValue();
    // Get instance field reference: private UnityEngine.Color _currentColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__currentColor();
    // Get instance field reference: private Oculus.Interaction.HandGrab.IHandGrabInteractor HandGrabInteractor
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::HandGrab::IHandGrabInteractor*& dyn_HandGrabInteractor();
    // Get instance field reference: private Oculus.Interaction.IInteractor Interactor
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::IInteractor*& dyn_Interactor();
    // Get instance field reference: private System.Single[] _glowStregth
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn__glowStregth();
    // Get instance field reference: private readonly System.Int32 _generateGlowID
    [[deprecated("Use field access instead!")]] int& dyn__generateGlowID();
    // Get instance field reference: private readonly System.Int32 _glowColorID
    [[deprecated("Use field access instead!")]] int& dyn__glowColorID();
    // Get instance field reference: private readonly System.Int32 _glowTypeID
    [[deprecated("Use field access instead!")]] int& dyn__glowTypeID();
    // Get instance field reference: private readonly System.Int32 _glowParameterID
    [[deprecated("Use field access instead!")]] int& dyn__glowParameterID();
    // Get instance field reference: private readonly System.Int32[] _fingersGlowIDs
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn__fingersGlowIDs();
    // Get instance field reference: protected System.Boolean _started
    [[deprecated("Use field access instead!")]] bool& dyn__started();
    // protected System.Void Awake()
    // Offset: 0x477503C
    void Awake();
    // protected System.Void Start()
    // Offset: 0x47750FC
    void Start();
    // protected System.Void OnEnable()
    // Offset: 0x47751A4
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x47752A4
    void OnDisable();
    // private System.Void SetMaterialPropertyBlockValues()
    // Offset: 0x47753A4
    void SetMaterialPropertyBlockValues();
    // private System.Void UpdateFingerGlowStrength(System.Int32 fingerIndex, System.Single strength)
    // Offset: 0x47754DC
    void UpdateFingerGlowStrength(int fingerIndex, float strength);
    // private System.Boolean FingerOptionalOrRequired(Oculus.Interaction.GrabAPI.GrabbingRule rules, Oculus.Interaction.Input.HandFinger finger)
    // Offset: 0x4775534
    bool FingerOptionalOrRequired(::Oculus::Interaction::GrabAPI::GrabbingRule rules, ::Oculus::Interaction::Input::HandFinger finger);
    // private System.Void UpdateGlowStrength()
    // Offset: 0x4775580
    void UpdateGlowStrength();
    // private System.Void UpdateGlowState()
    // Offset: 0x4775E3C
    void UpdateGlowState();
    // private System.Void UpdateGlowColorAndFade()
    // Offset: 0x4775FC0
    void UpdateGlowColorAndFade();
    // private System.Boolean TargetSupportsPinch()
    // Offset: 0x4775A4C
    bool TargetSupportsPinch();
    // private System.Boolean TargetSupportsPalm()
    // Offset: 0x4775C44
    bool TargetSupportsPalm();
    // private System.Void UpdateGrabState()
    // Offset: 0x47760F4
    void UpdateGrabState();
    // private System.Void ClearGlow()
    // Offset: 0x47764CC
    void ClearGlow();
    // private System.Void UpdateVisual()
    // Offset: 0x477656C
    void UpdateVisual();
    // public System.Void InjectAllHandGrabGlow(Oculus.Interaction.HandGrab.IHandGrabInteractor handGrabInteractor, UnityEngine.SkinnedMeshRenderer handRenderer, Oculus.Interaction.MaterialPropertyBlockEditor materialEditor, Oculus.Interaction.HandVisual handVisual, UnityEngine.Color grabbingColor, UnityEngine.Color hoverColor, System.Single colorChangeSpeed, System.Single fadeStartTime, System.Single glowStrengthChangeSpeed, System.Boolean fadeOut, System.Single gradientLength, Oculus.Interaction.HandGrabGlow/GlowType glowType)
    // Offset: 0x47765D8
    void InjectAllHandGrabGlow(::Oculus::Interaction::HandGrab::IHandGrabInteractor* handGrabInteractor, ::UnityEngine::SkinnedMeshRenderer* handRenderer, ::Oculus::Interaction::MaterialPropertyBlockEditor* materialEditor, ::Oculus::Interaction::HandVisual* handVisual, ::UnityEngine::Color grabbingColor, ::UnityEngine::Color hoverColor, float colorChangeSpeed, float fadeStartTime, float glowStrengthChangeSpeed, bool fadeOut, float gradientLength, ::Oculus::Interaction::HandGrabGlow::GlowType glowType);
    // public System.Void InjectHandGrabInteractor(Oculus.Interaction.HandGrab.IHandGrabInteractor handGrabInteractor)
    // Offset: 0x47766E8
    void InjectHandGrabInteractor(::Oculus::Interaction::HandGrab::IHandGrabInteractor* handGrabInteractor);
    // public System.Void InjectHandRenderer(UnityEngine.SkinnedMeshRenderer handRenderer)
    // Offset: 0x477683C
    void InjectHandRenderer(::UnityEngine::SkinnedMeshRenderer* handRenderer);
    // public System.Void InjectMaterialPropertyBlockEditor(Oculus.Interaction.MaterialPropertyBlockEditor materialEditor)
    // Offset: 0x4776844
    void InjectMaterialPropertyBlockEditor(::Oculus::Interaction::MaterialPropertyBlockEditor* materialEditor);
    // public System.Void InjectHandVisual(Oculus.Interaction.HandVisual handVisual)
    // Offset: 0x477684C
    void InjectHandVisual(::Oculus::Interaction::HandVisual* handVisual);
    // public System.Void InjectGlowColors(UnityEngine.Color grabbingColor, UnityEngine.Color hoverColor)
    // Offset: 0x4776800
    void InjectGlowColors(::UnityEngine::Color grabbingColor, ::UnityEngine::Color hoverColor);
    // public System.Void InjectVisualChangeSpeed(System.Single colorChangeSpeed, System.Single fadeStartTime, System.Single glowStrengthChangeSpeed)
    // Offset: 0x4776814
    void InjectVisualChangeSpeed(float colorChangeSpeed, float fadeStartTime, float glowStrengthChangeSpeed);
    // public System.Void InjectFadeOut(System.Boolean fadeOut)
    // Offset: 0x4776854
    void InjectFadeOut(bool fadeOut);
    // public System.Void InjectGradientLength(System.Single gradientLength)
    // Offset: 0x4776820
    void InjectGradientLength(float gradientLength);
    // public System.Void InjectGlowType(Oculus.Interaction.HandGrabGlow/GlowType glowType)
    // Offset: 0x4776860
    void InjectGlowType(::Oculus::Interaction::HandGrabGlow::GlowType glowType);
    // public System.Void .ctor()
    // Offset: 0x4776868
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HandGrabGlow* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::HandGrabGlow::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HandGrabGlow*, creationType>()));
    }
  }; // Oculus.Interaction.HandGrabGlow
  #pragma pack(pop)
  static check_size<sizeof(HandGrabGlow), 200 + sizeof(bool)> __Oculus_Interaction_HandGrabGlowSizeCheck;
  static_assert(sizeof(HandGrabGlow) == 0xC9);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::HandGrabGlow::GrabState, "Oculus.Interaction", "HandGrabGlow/GrabState");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::HandGrabGlow::GlowState, "Oculus.Interaction", "HandGrabGlow/GlowState");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::HandGrabGlow::GlowType, "Oculus.Interaction", "HandGrabGlow/GlowType");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::HandGrabGlow::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrabGlow::*)()>(&Oculus::Interaction::HandGrabGlow::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrabGlow*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrabGlow::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrabGlow::*)()>(&Oculus::Interaction::HandGrabGlow::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrabGlow*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrabGlow::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrabGlow::*)()>(&Oculus::Interaction::HandGrabGlow::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrabGlow*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrabGlow::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrabGlow::*)()>(&Oculus::Interaction::HandGrabGlow::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrabGlow*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrabGlow::SetMaterialPropertyBlockValues
// Il2CppName: SetMaterialPropertyBlockValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrabGlow::*)()>(&Oculus::Interaction::HandGrabGlow::SetMaterialPropertyBlockValues)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrabGlow*), "SetMaterialPropertyBlockValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrabGlow::UpdateFingerGlowStrength
// Il2CppName: UpdateFingerGlowStrength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrabGlow::*)(int, float)>(&Oculus::Interaction::HandGrabGlow::UpdateFingerGlowStrength)> {
  static const MethodInfo* get() {
    static auto* fingerIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* strength = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrabGlow*), "UpdateFingerGlowStrength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fingerIndex, strength});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrabGlow::FingerOptionalOrRequired
// Il2CppName: FingerOptionalOrRequired
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::HandGrabGlow::*)(::Oculus::Interaction::GrabAPI::GrabbingRule, ::Oculus::Interaction::Input::HandFinger)>(&Oculus::Interaction::HandGrabGlow::FingerOptionalOrRequired)> {
  static const MethodInfo* get() {
    static auto* rules = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.GrabAPI", "GrabbingRule")->byval_arg;
    static auto* finger = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "HandFinger")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrabGlow*), "FingerOptionalOrRequired", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rules, finger});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrabGlow::UpdateGlowStrength
// Il2CppName: UpdateGlowStrength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrabGlow::*)()>(&Oculus::Interaction::HandGrabGlow::UpdateGlowStrength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrabGlow*), "UpdateGlowStrength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrabGlow::UpdateGlowState
// Il2CppName: UpdateGlowState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrabGlow::*)()>(&Oculus::Interaction::HandGrabGlow::UpdateGlowState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrabGlow*), "UpdateGlowState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrabGlow::UpdateGlowColorAndFade
// Il2CppName: UpdateGlowColorAndFade
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrabGlow::*)()>(&Oculus::Interaction::HandGrabGlow::UpdateGlowColorAndFade)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrabGlow*), "UpdateGlowColorAndFade", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrabGlow::TargetSupportsPinch
// Il2CppName: TargetSupportsPinch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::HandGrabGlow::*)()>(&Oculus::Interaction::HandGrabGlow::TargetSupportsPinch)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrabGlow*), "TargetSupportsPinch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrabGlow::TargetSupportsPalm
// Il2CppName: TargetSupportsPalm
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::HandGrabGlow::*)()>(&Oculus::Interaction::HandGrabGlow::TargetSupportsPalm)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrabGlow*), "TargetSupportsPalm", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrabGlow::UpdateGrabState
// Il2CppName: UpdateGrabState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrabGlow::*)()>(&Oculus::Interaction::HandGrabGlow::UpdateGrabState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrabGlow*), "UpdateGrabState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrabGlow::ClearGlow
// Il2CppName: ClearGlow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrabGlow::*)()>(&Oculus::Interaction::HandGrabGlow::ClearGlow)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrabGlow*), "ClearGlow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrabGlow::UpdateVisual
// Il2CppName: UpdateVisual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrabGlow::*)()>(&Oculus::Interaction::HandGrabGlow::UpdateVisual)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrabGlow*), "UpdateVisual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrabGlow::InjectAllHandGrabGlow
// Il2CppName: InjectAllHandGrabGlow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrabGlow::*)(::Oculus::Interaction::HandGrab::IHandGrabInteractor*, ::UnityEngine::SkinnedMeshRenderer*, ::Oculus::Interaction::MaterialPropertyBlockEditor*, ::Oculus::Interaction::HandVisual*, ::UnityEngine::Color, ::UnityEngine::Color, float, float, float, bool, float, ::Oculus::Interaction::HandGrabGlow::GlowType)>(&Oculus::Interaction::HandGrabGlow::InjectAllHandGrabGlow)> {
  static const MethodInfo* get() {
    static auto* handGrabInteractor = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.HandGrab", "IHandGrabInteractor")->byval_arg;
    static auto* handRenderer = &::il2cpp_utils::GetClassFromName("UnityEngine", "SkinnedMeshRenderer")->byval_arg;
    static auto* materialEditor = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "MaterialPropertyBlockEditor")->byval_arg;
    static auto* handVisual = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "HandVisual")->byval_arg;
    static auto* grabbingColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* hoverColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* colorChangeSpeed = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* fadeStartTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* glowStrengthChangeSpeed = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* fadeOut = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* gradientLength = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* glowType = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "HandGrabGlow/GlowType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrabGlow*), "InjectAllHandGrabGlow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handGrabInteractor, handRenderer, materialEditor, handVisual, grabbingColor, hoverColor, colorChangeSpeed, fadeStartTime, glowStrengthChangeSpeed, fadeOut, gradientLength, glowType});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrabGlow::InjectHandGrabInteractor
// Il2CppName: InjectHandGrabInteractor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrabGlow::*)(::Oculus::Interaction::HandGrab::IHandGrabInteractor*)>(&Oculus::Interaction::HandGrabGlow::InjectHandGrabInteractor)> {
  static const MethodInfo* get() {
    static auto* handGrabInteractor = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.HandGrab", "IHandGrabInteractor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrabGlow*), "InjectHandGrabInteractor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handGrabInteractor});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrabGlow::InjectHandRenderer
// Il2CppName: InjectHandRenderer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrabGlow::*)(::UnityEngine::SkinnedMeshRenderer*)>(&Oculus::Interaction::HandGrabGlow::InjectHandRenderer)> {
  static const MethodInfo* get() {
    static auto* handRenderer = &::il2cpp_utils::GetClassFromName("UnityEngine", "SkinnedMeshRenderer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrabGlow*), "InjectHandRenderer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handRenderer});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrabGlow::InjectMaterialPropertyBlockEditor
// Il2CppName: InjectMaterialPropertyBlockEditor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrabGlow::*)(::Oculus::Interaction::MaterialPropertyBlockEditor*)>(&Oculus::Interaction::HandGrabGlow::InjectMaterialPropertyBlockEditor)> {
  static const MethodInfo* get() {
    static auto* materialEditor = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "MaterialPropertyBlockEditor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrabGlow*), "InjectMaterialPropertyBlockEditor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{materialEditor});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrabGlow::InjectHandVisual
// Il2CppName: InjectHandVisual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrabGlow::*)(::Oculus::Interaction::HandVisual*)>(&Oculus::Interaction::HandGrabGlow::InjectHandVisual)> {
  static const MethodInfo* get() {
    static auto* handVisual = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "HandVisual")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrabGlow*), "InjectHandVisual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handVisual});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrabGlow::InjectGlowColors
// Il2CppName: InjectGlowColors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrabGlow::*)(::UnityEngine::Color, ::UnityEngine::Color)>(&Oculus::Interaction::HandGrabGlow::InjectGlowColors)> {
  static const MethodInfo* get() {
    static auto* grabbingColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* hoverColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrabGlow*), "InjectGlowColors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{grabbingColor, hoverColor});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrabGlow::InjectVisualChangeSpeed
// Il2CppName: InjectVisualChangeSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrabGlow::*)(float, float, float)>(&Oculus::Interaction::HandGrabGlow::InjectVisualChangeSpeed)> {
  static const MethodInfo* get() {
    static auto* colorChangeSpeed = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* fadeStartTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* glowStrengthChangeSpeed = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrabGlow*), "InjectVisualChangeSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colorChangeSpeed, fadeStartTime, glowStrengthChangeSpeed});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrabGlow::InjectFadeOut
// Il2CppName: InjectFadeOut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrabGlow::*)(bool)>(&Oculus::Interaction::HandGrabGlow::InjectFadeOut)> {
  static const MethodInfo* get() {
    static auto* fadeOut = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrabGlow*), "InjectFadeOut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fadeOut});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrabGlow::InjectGradientLength
// Il2CppName: InjectGradientLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrabGlow::*)(float)>(&Oculus::Interaction::HandGrabGlow::InjectGradientLength)> {
  static const MethodInfo* get() {
    static auto* gradientLength = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrabGlow*), "InjectGradientLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gradientLength});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrabGlow::InjectGlowType
// Il2CppName: InjectGlowType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrabGlow::*)(::Oculus::Interaction::HandGrabGlow::GlowType)>(&Oculus::Interaction::HandGrabGlow::InjectGlowType)> {
  static const MethodInfo* get() {
    static auto* glowType = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "HandGrabGlow/GlowType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrabGlow*), "InjectGlowType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{glowType});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrabGlow::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
