// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction
namespace Oculus::Interaction {
  // Forward declaring type: IInteractorView
  class IInteractorView;
  // Forward declaring type: IInteractable
  class IInteractable;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Object because it is already included!
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: InteractableGroup
  class InteractableGroup;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::InteractableGroup);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::InteractableGroup*, "Oculus.Interaction", "InteractableGroup");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x59
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.InteractableGroup
  // [TokenAttribute] Offset: FFFFFFFF
  class InteractableGroup : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::Oculus::Interaction::InteractableGroup::InteractableLimits
    struct InteractableLimits;
    // Nested type: ::Oculus::Interaction::InteractableGroup::$$c
    class $$c;
    // Size: 0x8
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Oculus.Interaction.InteractableGroup/InteractableLimits
    // [TokenAttribute] Offset: FFFFFFFF
    struct InteractableLimits/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Int32 MaxInteractors
      // Size: 0x4
      // Offset: 0x0
      int MaxInteractors;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 MaxSelectingInteractors
      // Size: 0x4
      // Offset: 0x4
      int MaxSelectingInteractors;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: InteractableLimits
      constexpr InteractableLimits(int MaxInteractors_ = {}, int MaxSelectingInteractors_ = {}) noexcept : MaxInteractors{MaxInteractors_}, MaxSelectingInteractors{MaxSelectingInteractors_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.Int32 MaxInteractors
      [[deprecated("Use field access instead!")]] int& dyn_MaxInteractors();
      // Get instance field reference: public System.Int32 MaxSelectingInteractors
      [[deprecated("Use field access instead!")]] int& dyn_MaxSelectingInteractors();
    }; // Oculus.Interaction.InteractableGroup/InteractableLimits
    #pragma pack(pop)
    static check_size<sizeof(InteractableGroup::InteractableLimits), 4 + sizeof(int)> __Oculus_Interaction_InteractableGroup_InteractableLimitsSizeCheck;
    static_assert(sizeof(InteractableGroup::InteractableLimits) == 0x8);
    public:
    // private System.Collections.Generic.List`1<UnityEngine.Object> _interactables
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::UnityEngine::Object*>* interactables;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Object*>*) == 0x8);
    // private System.Collections.Generic.List`1<Oculus.Interaction.IInteractable> Interactables
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::List_1<::Oculus::Interaction::IInteractable*>* Interactables;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Oculus::Interaction::IInteractable*>*) == 0x8);
    // private System.Collections.Generic.List`1<Oculus.Interaction.InteractableGroup/InteractableLimits> _limits
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::List_1<::Oculus::Interaction::InteractableGroup::InteractableLimits>* limits;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Oculus::Interaction::InteractableGroup::InteractableLimits>*) == 0x8);
    // private System.Int32 _maxInteractors
    // Size: 0x4
    // Offset: 0x38
    int maxInteractors;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _maxSelectingInteractors
    // Size: 0x4
    // Offset: 0x3C
    int maxSelectingInteractors;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _interactors
    // Size: 0x4
    // Offset: 0x40
    int interactors;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _selectInteractors
    // Size: 0x4
    // Offset: 0x44
    int selectInteractors;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Object _data
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Object* data;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private System.Object <Data>k__BackingField
    // Size: 0x8
    // Offset: 0x50
    ::Il2CppObject* Data;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // protected System.Boolean _started
    // Size: 0x1
    // Offset: 0x58
    bool started;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Object> _interactables
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Object*>*& dyn__interactables();
    // Get instance field reference: private System.Collections.Generic.List`1<Oculus.Interaction.IInteractable> Interactables
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Oculus::Interaction::IInteractable*>*& dyn_Interactables();
    // Get instance field reference: private System.Collections.Generic.List`1<Oculus.Interaction.InteractableGroup/InteractableLimits> _limits
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Oculus::Interaction::InteractableGroup::InteractableLimits>*& dyn__limits();
    // Get instance field reference: private System.Int32 _maxInteractors
    [[deprecated("Use field access instead!")]] int& dyn__maxInteractors();
    // Get instance field reference: private System.Int32 _maxSelectingInteractors
    [[deprecated("Use field access instead!")]] int& dyn__maxSelectingInteractors();
    // Get instance field reference: private System.Int32 _interactors
    [[deprecated("Use field access instead!")]] int& dyn__interactors();
    // Get instance field reference: private System.Int32 _selectInteractors
    [[deprecated("Use field access instead!")]] int& dyn__selectInteractors();
    // Get instance field reference: private UnityEngine.Object _data
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__data();
    // Get instance field reference: private System.Object <Data>k__BackingField
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_$Data$k__BackingField();
    // Get instance field reference: protected System.Boolean _started
    [[deprecated("Use field access instead!")]] bool& dyn__started();
    // public System.Object get_Data()
    // Offset: 0x4783378
    ::Il2CppObject* get_Data();
    // protected System.Void set_Data(System.Object value)
    // Offset: 0x4783380
    void set_Data(::Il2CppObject* value);
    // protected System.Void Awake()
    // Offset: 0x4783388
    void Awake();
    // protected System.Void Start()
    // Offset: 0x478349C
    void Start();
    // protected System.Void OnEnable()
    // Offset: 0x47837F4
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x4783FD4
    void OnDisable();
    // private System.Void UpdateInteractorCount()
    // Offset: 0x4783BE4
    void UpdateInteractorCount();
    // private System.Void UpdateSelectingInteractorCount()
    // Offset: 0x4783DDC
    void UpdateSelectingInteractorCount();
    // private System.Void HandleInteractorViewAdded(Oculus.Interaction.IInteractorView interactorView)
    // Offset: 0x478483C
    void HandleInteractorViewAdded(::Oculus::Interaction::IInteractorView* interactorView);
    // private System.Void HandleInteractorViewRemoved(Oculus.Interaction.IInteractorView interactorView)
    // Offset: 0x4784840
    void HandleInteractorViewRemoved(::Oculus::Interaction::IInteractorView* interactorView);
    // private System.Void HandleSelectingInteractorViewAdded(Oculus.Interaction.IInteractorView interactorView)
    // Offset: 0x4784844
    void HandleSelectingInteractorViewAdded(::Oculus::Interaction::IInteractorView* interactorView);
    // private System.Void HandleSelectingInteractorViewRemoved(Oculus.Interaction.IInteractorView interactorView)
    // Offset: 0x4784848
    void HandleSelectingInteractorViewRemoved(::Oculus::Interaction::IInteractorView* interactorView);
    // private System.Void UpdateMaxInteractors()
    // Offset: 0x47843C4
    void UpdateMaxInteractors();
    // private System.Void UpdateMaxSelecting()
    // Offset: 0x47845FC
    void UpdateMaxSelecting();
    // public System.Void InjectAllInteractableGroup(System.Collections.Generic.List`1<Oculus.Interaction.IInteractable> interactables)
    // Offset: 0x478484C
    void InjectAllInteractableGroup(::System::Collections::Generic::List_1<::Oculus::Interaction::IInteractable*>* interactables);
    // public System.Void InjectInteractables(System.Collections.Generic.List`1<Oculus.Interaction.IInteractable> interactables)
    // Offset: 0x4784850
    void InjectInteractables(::System::Collections::Generic::List_1<::Oculus::Interaction::IInteractable*>* interactables);
    // public System.Void InjectOptionalData(System.Object data)
    // Offset: 0x4784974
    void InjectOptionalData(::Il2CppObject* data);
    // public System.Void .ctor()
    // Offset: 0x4784A44
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InteractableGroup* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::InteractableGroup::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InteractableGroup*, creationType>()));
    }
  }; // Oculus.Interaction.InteractableGroup
  #pragma pack(pop)
  static check_size<sizeof(InteractableGroup), 88 + sizeof(bool)> __Oculus_Interaction_InteractableGroupSizeCheck;
  static_assert(sizeof(InteractableGroup) == 0x59);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::InteractableGroup::InteractableLimits, "Oculus.Interaction", "InteractableGroup/InteractableLimits");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::InteractableGroup::get_Data
// Il2CppName: get_Data
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (Oculus::Interaction::InteractableGroup::*)()>(&Oculus::Interaction::InteractableGroup::get_Data)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractableGroup*), "get_Data", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractableGroup::set_Data
// Il2CppName: set_Data
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractableGroup::*)(::Il2CppObject*)>(&Oculus::Interaction::InteractableGroup::set_Data)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractableGroup*), "set_Data", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractableGroup::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractableGroup::*)()>(&Oculus::Interaction::InteractableGroup::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractableGroup*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractableGroup::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractableGroup::*)()>(&Oculus::Interaction::InteractableGroup::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractableGroup*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractableGroup::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractableGroup::*)()>(&Oculus::Interaction::InteractableGroup::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractableGroup*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractableGroup::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractableGroup::*)()>(&Oculus::Interaction::InteractableGroup::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractableGroup*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractableGroup::UpdateInteractorCount
// Il2CppName: UpdateInteractorCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractableGroup::*)()>(&Oculus::Interaction::InteractableGroup::UpdateInteractorCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractableGroup*), "UpdateInteractorCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractableGroup::UpdateSelectingInteractorCount
// Il2CppName: UpdateSelectingInteractorCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractableGroup::*)()>(&Oculus::Interaction::InteractableGroup::UpdateSelectingInteractorCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractableGroup*), "UpdateSelectingInteractorCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractableGroup::HandleInteractorViewAdded
// Il2CppName: HandleInteractorViewAdded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractableGroup::*)(::Oculus::Interaction::IInteractorView*)>(&Oculus::Interaction::InteractableGroup::HandleInteractorViewAdded)> {
  static const MethodInfo* get() {
    static auto* interactorView = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IInteractorView")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractableGroup*), "HandleInteractorViewAdded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactorView});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractableGroup::HandleInteractorViewRemoved
// Il2CppName: HandleInteractorViewRemoved
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractableGroup::*)(::Oculus::Interaction::IInteractorView*)>(&Oculus::Interaction::InteractableGroup::HandleInteractorViewRemoved)> {
  static const MethodInfo* get() {
    static auto* interactorView = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IInteractorView")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractableGroup*), "HandleInteractorViewRemoved", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactorView});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractableGroup::HandleSelectingInteractorViewAdded
// Il2CppName: HandleSelectingInteractorViewAdded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractableGroup::*)(::Oculus::Interaction::IInteractorView*)>(&Oculus::Interaction::InteractableGroup::HandleSelectingInteractorViewAdded)> {
  static const MethodInfo* get() {
    static auto* interactorView = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IInteractorView")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractableGroup*), "HandleSelectingInteractorViewAdded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactorView});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractableGroup::HandleSelectingInteractorViewRemoved
// Il2CppName: HandleSelectingInteractorViewRemoved
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractableGroup::*)(::Oculus::Interaction::IInteractorView*)>(&Oculus::Interaction::InteractableGroup::HandleSelectingInteractorViewRemoved)> {
  static const MethodInfo* get() {
    static auto* interactorView = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IInteractorView")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractableGroup*), "HandleSelectingInteractorViewRemoved", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactorView});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractableGroup::UpdateMaxInteractors
// Il2CppName: UpdateMaxInteractors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractableGroup::*)()>(&Oculus::Interaction::InteractableGroup::UpdateMaxInteractors)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractableGroup*), "UpdateMaxInteractors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractableGroup::UpdateMaxSelecting
// Il2CppName: UpdateMaxSelecting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractableGroup::*)()>(&Oculus::Interaction::InteractableGroup::UpdateMaxSelecting)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractableGroup*), "UpdateMaxSelecting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractableGroup::InjectAllInteractableGroup
// Il2CppName: InjectAllInteractableGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractableGroup::*)(::System::Collections::Generic::List_1<::Oculus::Interaction::IInteractable*>*)>(&Oculus::Interaction::InteractableGroup::InjectAllInteractableGroup)> {
  static const MethodInfo* get() {
    static auto* interactables = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IInteractable")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractableGroup*), "InjectAllInteractableGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactables});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractableGroup::InjectInteractables
// Il2CppName: InjectInteractables
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractableGroup::*)(::System::Collections::Generic::List_1<::Oculus::Interaction::IInteractable*>*)>(&Oculus::Interaction::InteractableGroup::InjectInteractables)> {
  static const MethodInfo* get() {
    static auto* interactables = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IInteractable")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractableGroup*), "InjectInteractables", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactables});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractableGroup::InjectOptionalData
// Il2CppName: InjectOptionalData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractableGroup::*)(::Il2CppObject*)>(&Oculus::Interaction::InteractableGroup::InjectOptionalData)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractableGroup*), "InjectOptionalData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractableGroup::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
