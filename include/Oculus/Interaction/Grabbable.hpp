// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Oculus.Interaction.PointableElement
#include "Oculus/Interaction/PointableElement.hpp"
// Including type: Oculus.Interaction.IGrabbable
#include "Oculus/Interaction/IGrabbable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Object because it is already included!
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: Oculus::Interaction
namespace Oculus::Interaction {
  // Forward declaring type: ITransformer
  class ITransformer;
  // Skipping declaration: PointerEvent because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: Grabbable
  class Grabbable;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Grabbable);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Grabbable*, "Oculus.Interaction", "Grabbable");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0xA0
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.Grabbable
  // [TokenAttribute] Offset: FFFFFFFF
  class Grabbable : public ::Oculus::Interaction::PointableElement/*, public ::Oculus::Interaction::IGrabbable*/ {
    public:
    // Writing base type padding for base size: 0x61 to desired offset: 0x68
    char ___base_padding[0x7] = {};
    public:
    // private UnityEngine.Object _oneGrabTransformer
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::Object* oneGrabTransformer;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private UnityEngine.Object _twoGrabTransformer
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::Object* twoGrabTransformer;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private UnityEngine.Transform _targetTransform
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::Transform* targetTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private System.Int32 _maxGrabPoints
    // Size: 0x4
    // Offset: 0x80
    int maxGrabPoints;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: maxGrabPoints and: activeTransformer
    char __padding3[0x4] = {};
    // private Oculus.Interaction.ITransformer _activeTransformer
    // Size: 0x8
    // Offset: 0x88
    ::Oculus::Interaction::ITransformer* activeTransformer;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::ITransformer*) == 0x8);
    // private Oculus.Interaction.ITransformer OneGrabTransformer
    // Size: 0x8
    // Offset: 0x90
    ::Oculus::Interaction::ITransformer* OneGrabTransformer;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::ITransformer*) == 0x8);
    // private Oculus.Interaction.ITransformer TwoGrabTransformer
    // Size: 0x8
    // Offset: 0x98
    ::Oculus::Interaction::ITransformer* TwoGrabTransformer;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::ITransformer*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::IGrabbable
    operator ::Oculus::Interaction::IGrabbable() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::IGrabbable*>(this);
    }
    // Get instance field reference: private UnityEngine.Object _oneGrabTransformer
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__oneGrabTransformer();
    // Get instance field reference: private UnityEngine.Object _twoGrabTransformer
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__twoGrabTransformer();
    // Get instance field reference: private UnityEngine.Transform _targetTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__targetTransform();
    // Get instance field reference: private System.Int32 _maxGrabPoints
    [[deprecated("Use field access instead!")]] int& dyn__maxGrabPoints();
    // Get instance field reference: private Oculus.Interaction.ITransformer _activeTransformer
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::ITransformer*& dyn__activeTransformer();
    // Get instance field reference: private Oculus.Interaction.ITransformer OneGrabTransformer
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::ITransformer*& dyn_OneGrabTransformer();
    // Get instance field reference: private Oculus.Interaction.ITransformer TwoGrabTransformer
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::ITransformer*& dyn_TwoGrabTransformer();
    // public System.Int32 get_MaxGrabPoints()
    // Offset: 0x478A60C
    int get_MaxGrabPoints();
    // public System.Void set_MaxGrabPoints(System.Int32 value)
    // Offset: 0x478A614
    void set_MaxGrabPoints(int value);
    // public UnityEngine.Transform get_Transform()
    // Offset: 0x478A61C
    ::UnityEngine::Transform* get_Transform();
    // public System.Collections.Generic.List`1<UnityEngine.Pose> get_GrabPoints()
    // Offset: 0x478A624
    ::System::Collections::Generic::List_1<::UnityEngine::Pose>* get_GrabPoints();
    // private System.Void BeginTransform()
    // Offset: 0x478AB2C
    void BeginTransform();
    // private System.Void UpdateTransform()
    // Offset: 0x478AC48
    void UpdateTransform();
    // private System.Void EndTransform()
    // Offset: 0x478AA70
    void EndTransform();
    // public System.Void InjectOptionalOneGrabTransformer(Oculus.Interaction.ITransformer transformer)
    // Offset: 0x478AD1C
    void InjectOptionalOneGrabTransformer(::Oculus::Interaction::ITransformer* transformer);
    // public System.Void InjectOptionalTwoGrabTransformer(Oculus.Interaction.ITransformer transformer)
    // Offset: 0x478ADEC
    void InjectOptionalTwoGrabTransformer(::Oculus::Interaction::ITransformer* transformer);
    // public System.Void InjectOptionalTargetTransform(UnityEngine.Transform targetTransform)
    // Offset: 0x478AEBC
    void InjectOptionalTargetTransform(::UnityEngine::Transform* targetTransform);
    // private System.Void <Start>b__15_0()
    // Offset: 0x478AED4
    void $Start$b__15_0();
    // protected override System.Void Awake()
    // Offset: 0x478A62C
    // Implemented from: Oculus.Interaction.PointableElement
    // Base method: System.Void PointableElement::Awake()
    void Awake();
    // protected override System.Void Start()
    // Offset: 0x478A6D8
    // Implemented from: Oculus.Interaction.PointableElement
    // Base method: System.Void PointableElement::Start()
    void Start();
    // public override System.Void ProcessPointerEvent(Oculus.Interaction.PointerEvent evt)
    // Offset: 0x478A9D4
    // Implemented from: Oculus.Interaction.PointableElement
    // Base method: System.Void PointableElement::ProcessPointerEvent(Oculus.Interaction.PointerEvent evt)
    void ProcessPointerEvent(::Oculus::Interaction::PointerEvent evt);
    // protected override System.Void OnDisable()
    // Offset: 0x478ACF4
    // Implemented from: Oculus.Interaction.PointableElement
    // Base method: System.Void PointableElement::OnDisable()
    void OnDisable();
    // public System.Void .ctor()
    // Offset: 0x478AEC4
    // Implemented from: Oculus.Interaction.PointableElement
    // Base method: System.Void PointableElement::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Grabbable* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Grabbable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Grabbable*, creationType>()));
    }
  }; // Oculus.Interaction.Grabbable
  #pragma pack(pop)
  static check_size<sizeof(Grabbable), 152 + sizeof(::Oculus::Interaction::ITransformer*)> __Oculus_Interaction_GrabbableSizeCheck;
  static_assert(sizeof(Grabbable) == 0xA0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Grabbable::get_MaxGrabPoints
// Il2CppName: get_MaxGrabPoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Oculus::Interaction::Grabbable::*)()>(&Oculus::Interaction::Grabbable::get_MaxGrabPoints)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grabbable*), "get_MaxGrabPoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grabbable::set_MaxGrabPoints
// Il2CppName: set_MaxGrabPoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Grabbable::*)(int)>(&Oculus::Interaction::Grabbable::set_MaxGrabPoints)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grabbable*), "set_MaxGrabPoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grabbable::get_Transform
// Il2CppName: get_Transform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (Oculus::Interaction::Grabbable::*)()>(&Oculus::Interaction::Grabbable::get_Transform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grabbable*), "get_Transform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grabbable::get_GrabPoints
// Il2CppName: get_GrabPoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::Pose>* (Oculus::Interaction::Grabbable::*)()>(&Oculus::Interaction::Grabbable::get_GrabPoints)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grabbable*), "get_GrabPoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grabbable::BeginTransform
// Il2CppName: BeginTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Grabbable::*)()>(&Oculus::Interaction::Grabbable::BeginTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grabbable*), "BeginTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grabbable::UpdateTransform
// Il2CppName: UpdateTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Grabbable::*)()>(&Oculus::Interaction::Grabbable::UpdateTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grabbable*), "UpdateTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grabbable::EndTransform
// Il2CppName: EndTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Grabbable::*)()>(&Oculus::Interaction::Grabbable::EndTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grabbable*), "EndTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grabbable::InjectOptionalOneGrabTransformer
// Il2CppName: InjectOptionalOneGrabTransformer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Grabbable::*)(::Oculus::Interaction::ITransformer*)>(&Oculus::Interaction::Grabbable::InjectOptionalOneGrabTransformer)> {
  static const MethodInfo* get() {
    static auto* transformer = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "ITransformer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grabbable*), "InjectOptionalOneGrabTransformer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transformer});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grabbable::InjectOptionalTwoGrabTransformer
// Il2CppName: InjectOptionalTwoGrabTransformer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Grabbable::*)(::Oculus::Interaction::ITransformer*)>(&Oculus::Interaction::Grabbable::InjectOptionalTwoGrabTransformer)> {
  static const MethodInfo* get() {
    static auto* transformer = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "ITransformer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grabbable*), "InjectOptionalTwoGrabTransformer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transformer});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grabbable::InjectOptionalTargetTransform
// Il2CppName: InjectOptionalTargetTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Grabbable::*)(::UnityEngine::Transform*)>(&Oculus::Interaction::Grabbable::InjectOptionalTargetTransform)> {
  static const MethodInfo* get() {
    static auto* targetTransform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grabbable*), "InjectOptionalTargetTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetTransform});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grabbable::$Start$b__15_0
// Il2CppName: <Start>b__15_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Grabbable::*)()>(&Oculus::Interaction::Grabbable::$Start$b__15_0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grabbable*), "<Start>b__15_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grabbable::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Grabbable::*)()>(&Oculus::Interaction::Grabbable::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grabbable*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grabbable::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Grabbable::*)()>(&Oculus::Interaction::Grabbable::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grabbable*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grabbable::ProcessPointerEvent
// Il2CppName: ProcessPointerEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Grabbable::*)(::Oculus::Interaction::PointerEvent)>(&Oculus::Interaction::Grabbable::ProcessPointerEvent)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "PointerEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grabbable*), "ProcessPointerEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grabbable::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Grabbable::*)()>(&Oculus::Interaction::Grabbable::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grabbable*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grabbable::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
