// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Oculus.Interaction.PoseDetection.IFingerFeatureStateProvider
#include "Oculus/Interaction/PoseDetection/IFingerFeatureStateProvider.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Object because it is already included!
}
// Forward declaring namespace: Oculus::Interaction::Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: HandFinger
  struct HandFinger;
}
// Forward declaring namespace: Oculus::Interaction::PoseDetection
namespace Oculus::Interaction::PoseDetection {
  // Forward declaring type: FingerFeature
  struct FingerFeature;
  // Forward declaring type: FeatureStateActiveMode
  struct FeatureStateActiveMode;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Nullable`1<T>
  template<typename T>
  struct Nullable_1;
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: FingerFeatureStateProviderRef
  class FingerFeatureStateProviderRef;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::FingerFeatureStateProviderRef);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::FingerFeatureStateProviderRef*, "Oculus.Interaction", "FingerFeatureStateProviderRef");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.FingerFeatureStateProviderRef
  // [TokenAttribute] Offset: FFFFFFFF
  class FingerFeatureStateProviderRef : public ::UnityEngine::MonoBehaviour/*, public ::Oculus::Interaction::PoseDetection::IFingerFeatureStateProvider*/ {
    public:
    public:
    // private UnityEngine.Object _fingerFeatureStateProvider
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Object* fingerFeatureStateProvider;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.PoseDetection.IFingerFeatureStateProvider <FingerFeatureStateProvider>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    ::Oculus::Interaction::PoseDetection::IFingerFeatureStateProvider* FingerFeatureStateProvider;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::PoseDetection::IFingerFeatureStateProvider*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::PoseDetection::IFingerFeatureStateProvider
    operator ::Oculus::Interaction::PoseDetection::IFingerFeatureStateProvider() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::PoseDetection::IFingerFeatureStateProvider*>(this);
    }
    // Get instance field reference: private UnityEngine.Object _fingerFeatureStateProvider
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__fingerFeatureStateProvider();
    // Get instance field reference: private Oculus.Interaction.PoseDetection.IFingerFeatureStateProvider <FingerFeatureStateProvider>k__BackingField
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::PoseDetection::IFingerFeatureStateProvider*& dyn_$FingerFeatureStateProvider$k__BackingField();
    // public Oculus.Interaction.PoseDetection.IFingerFeatureStateProvider get_FingerFeatureStateProvider()
    // Offset: 0x47CCF68
    ::Oculus::Interaction::PoseDetection::IFingerFeatureStateProvider* get_FingerFeatureStateProvider();
    // private System.Void set_FingerFeatureStateProvider(Oculus.Interaction.PoseDetection.IFingerFeatureStateProvider value)
    // Offset: 0x47CCF70
    void set_FingerFeatureStateProvider(::Oculus::Interaction::PoseDetection::IFingerFeatureStateProvider* value);
    // protected System.Void Awake()
    // Offset: 0x47CCF78
    void Awake();
    // protected System.Void Start()
    // Offset: 0x47CCFD0
    void Start();
    // public System.Boolean GetCurrentState(Oculus.Interaction.Input.HandFinger finger, Oculus.Interaction.PoseDetection.FingerFeature fingerFeature, out System.String currentState)
    // Offset: 0x47CCFD4
    bool GetCurrentState(::Oculus::Interaction::Input::HandFinger finger, ::Oculus::Interaction::PoseDetection::FingerFeature fingerFeature, ByRef<::StringW> currentState);
    // public System.Boolean IsStateActive(Oculus.Interaction.Input.HandFinger finger, Oculus.Interaction.PoseDetection.FingerFeature feature, Oculus.Interaction.PoseDetection.FeatureStateActiveMode mode, System.String stateId)
    // Offset: 0x47CD094
    bool IsStateActive(::Oculus::Interaction::Input::HandFinger finger, ::Oculus::Interaction::PoseDetection::FingerFeature feature, ::Oculus::Interaction::PoseDetection::FeatureStateActiveMode mode, ::StringW stateId);
    // public System.Nullable`1<System.Single> GetFeatureValue(Oculus.Interaction.Input.HandFinger finger, Oculus.Interaction.PoseDetection.FingerFeature fingerFeature)
    // Offset: 0x47CD168
    ::System::Nullable_1<float> GetFeatureValue(::Oculus::Interaction::Input::HandFinger finger, ::Oculus::Interaction::PoseDetection::FingerFeature fingerFeature);
    // public System.Void InjectAllFingerFeatureStateProviderRef(Oculus.Interaction.PoseDetection.IFingerFeatureStateProvider fingerFeatureStateProvider)
    // Offset: 0x47CD224
    void InjectAllFingerFeatureStateProviderRef(::Oculus::Interaction::PoseDetection::IFingerFeatureStateProvider* fingerFeatureStateProvider);
    // public System.Void InjectFingerFeatureStateProvider(Oculus.Interaction.PoseDetection.IFingerFeatureStateProvider fingerFeatureStateProvider)
    // Offset: 0x47CD228
    void InjectFingerFeatureStateProvider(::Oculus::Interaction::PoseDetection::IFingerFeatureStateProvider* fingerFeatureStateProvider);
    // public System.Void .ctor()
    // Offset: 0x47CD2F8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FingerFeatureStateProviderRef* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::FingerFeatureStateProviderRef::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FingerFeatureStateProviderRef*, creationType>()));
    }
  }; // Oculus.Interaction.FingerFeatureStateProviderRef
  #pragma pack(pop)
  static check_size<sizeof(FingerFeatureStateProviderRef), 40 + sizeof(::Oculus::Interaction::PoseDetection::IFingerFeatureStateProvider*)> __Oculus_Interaction_FingerFeatureStateProviderRefSizeCheck;
  static_assert(sizeof(FingerFeatureStateProviderRef) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::FingerFeatureStateProviderRef::get_FingerFeatureStateProvider
// Il2CppName: get_FingerFeatureStateProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::PoseDetection::IFingerFeatureStateProvider* (Oculus::Interaction::FingerFeatureStateProviderRef::*)()>(&Oculus::Interaction::FingerFeatureStateProviderRef::get_FingerFeatureStateProvider)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::FingerFeatureStateProviderRef*), "get_FingerFeatureStateProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::FingerFeatureStateProviderRef::set_FingerFeatureStateProvider
// Il2CppName: set_FingerFeatureStateProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::FingerFeatureStateProviderRef::*)(::Oculus::Interaction::PoseDetection::IFingerFeatureStateProvider*)>(&Oculus::Interaction::FingerFeatureStateProviderRef::set_FingerFeatureStateProvider)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.PoseDetection", "IFingerFeatureStateProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::FingerFeatureStateProviderRef*), "set_FingerFeatureStateProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::FingerFeatureStateProviderRef::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::FingerFeatureStateProviderRef::*)()>(&Oculus::Interaction::FingerFeatureStateProviderRef::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::FingerFeatureStateProviderRef*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::FingerFeatureStateProviderRef::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::FingerFeatureStateProviderRef::*)()>(&Oculus::Interaction::FingerFeatureStateProviderRef::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::FingerFeatureStateProviderRef*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::FingerFeatureStateProviderRef::GetCurrentState
// Il2CppName: GetCurrentState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::FingerFeatureStateProviderRef::*)(::Oculus::Interaction::Input::HandFinger, ::Oculus::Interaction::PoseDetection::FingerFeature, ByRef<::StringW>)>(&Oculus::Interaction::FingerFeatureStateProviderRef::GetCurrentState)> {
  static const MethodInfo* get() {
    static auto* finger = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "HandFinger")->byval_arg;
    static auto* fingerFeature = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.PoseDetection", "FingerFeature")->byval_arg;
    static auto* currentState = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::FingerFeatureStateProviderRef*), "GetCurrentState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{finger, fingerFeature, currentState});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::FingerFeatureStateProviderRef::IsStateActive
// Il2CppName: IsStateActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::FingerFeatureStateProviderRef::*)(::Oculus::Interaction::Input::HandFinger, ::Oculus::Interaction::PoseDetection::FingerFeature, ::Oculus::Interaction::PoseDetection::FeatureStateActiveMode, ::StringW)>(&Oculus::Interaction::FingerFeatureStateProviderRef::IsStateActive)> {
  static const MethodInfo* get() {
    static auto* finger = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "HandFinger")->byval_arg;
    static auto* feature = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.PoseDetection", "FingerFeature")->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.PoseDetection", "FeatureStateActiveMode")->byval_arg;
    static auto* stateId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::FingerFeatureStateProviderRef*), "IsStateActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{finger, feature, mode, stateId});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::FingerFeatureStateProviderRef::GetFeatureValue
// Il2CppName: GetFeatureValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Nullable_1<float> (Oculus::Interaction::FingerFeatureStateProviderRef::*)(::Oculus::Interaction::Input::HandFinger, ::Oculus::Interaction::PoseDetection::FingerFeature)>(&Oculus::Interaction::FingerFeatureStateProviderRef::GetFeatureValue)> {
  static const MethodInfo* get() {
    static auto* finger = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "HandFinger")->byval_arg;
    static auto* fingerFeature = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.PoseDetection", "FingerFeature")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::FingerFeatureStateProviderRef*), "GetFeatureValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{finger, fingerFeature});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::FingerFeatureStateProviderRef::InjectAllFingerFeatureStateProviderRef
// Il2CppName: InjectAllFingerFeatureStateProviderRef
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::FingerFeatureStateProviderRef::*)(::Oculus::Interaction::PoseDetection::IFingerFeatureStateProvider*)>(&Oculus::Interaction::FingerFeatureStateProviderRef::InjectAllFingerFeatureStateProviderRef)> {
  static const MethodInfo* get() {
    static auto* fingerFeatureStateProvider = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.PoseDetection", "IFingerFeatureStateProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::FingerFeatureStateProviderRef*), "InjectAllFingerFeatureStateProviderRef", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fingerFeatureStateProvider});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::FingerFeatureStateProviderRef::InjectFingerFeatureStateProvider
// Il2CppName: InjectFingerFeatureStateProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::FingerFeatureStateProviderRef::*)(::Oculus::Interaction::PoseDetection::IFingerFeatureStateProvider*)>(&Oculus::Interaction::FingerFeatureStateProviderRef::InjectFingerFeatureStateProvider)> {
  static const MethodInfo* get() {
    static auto* fingerFeatureStateProvider = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.PoseDetection", "IFingerFeatureStateProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::FingerFeatureStateProviderRef*), "InjectFingerFeatureStateProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fingerFeatureStateProvider});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::FingerFeatureStateProviderRef::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
