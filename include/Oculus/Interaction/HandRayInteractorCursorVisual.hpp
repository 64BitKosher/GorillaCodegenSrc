// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Object because it is already included!
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Renderer
  class Renderer;
}
// Forward declaring namespace: Oculus::Interaction::Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: IHand
  class IHand;
}
// Forward declaring namespace: Oculus::Interaction
namespace Oculus::Interaction {
  // Forward declaring type: RayInteractor
  class RayInteractor;
  // Forward declaring type: InteractorStateChangeArgs
  struct InteractorStateChangeArgs;
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: HandRayInteractorCursorVisual
  class HandRayInteractorCursorVisual;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::HandRayInteractorCursorVisual);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::HandRayInteractorCursorVisual*, "Oculus.Interaction", "HandRayInteractorCursorVisual");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x79
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.HandRayInteractorCursorVisual
  // [TokenAttribute] Offset: FFFFFFFF
  class HandRayInteractorCursorVisual : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.Object _hand
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Object* hand;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.Input.IHand Hand
    // Size: 0x8
    // Offset: 0x28
    ::Oculus::Interaction::Input::IHand* Hand;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::IHand*) == 0x8);
    // private Oculus.Interaction.RayInteractor _rayInteractor
    // Size: 0x8
    // Offset: 0x30
    ::Oculus::Interaction::RayInteractor* rayInteractor;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::RayInteractor*) == 0x8);
    // private UnityEngine.GameObject _cursor
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::GameObject* cursor;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.Renderer _renderer
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Renderer* renderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::Renderer*) == 0x8);
    // private UnityEngine.Color _outlineColor
    // Size: 0x10
    // Offset: 0x48
    ::UnityEngine::Color outlineColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private System.Single _offsetAlongNormal
    // Size: 0x4
    // Offset: 0x58
    float offsetAlongNormal;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 _shaderRadialGradientScale
    // Size: 0x4
    // Offset: 0x5C
    int shaderRadialGradientScale;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _shaderRadialGradientIntensity
    // Size: 0x4
    // Offset: 0x60
    int shaderRadialGradientIntensity;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _shaderRadialGradientBackgroundOpacity
    // Size: 0x4
    // Offset: 0x64
    int shaderRadialGradientBackgroundOpacity;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _shaderOutlineColor
    // Size: 0x4
    // Offset: 0x68
    int shaderOutlineColor;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: shaderOutlineColor and: selectObject
    char __padding10[0x4] = {};
    // private UnityEngine.GameObject _selectObject
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::GameObject* selectObject;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // protected System.Boolean _started
    // Size: 0x1
    // Offset: 0x78
    bool started;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private UnityEngine.Object _hand
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__hand();
    // Get instance field reference: private Oculus.Interaction.Input.IHand Hand
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::IHand*& dyn_Hand();
    // Get instance field reference: private Oculus.Interaction.RayInteractor _rayInteractor
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::RayInteractor*& dyn__rayInteractor();
    // Get instance field reference: private UnityEngine.GameObject _cursor
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn__cursor();
    // Get instance field reference: private UnityEngine.Renderer _renderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& dyn__renderer();
    // Get instance field reference: private UnityEngine.Color _outlineColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__outlineColor();
    // Get instance field reference: private System.Single _offsetAlongNormal
    [[deprecated("Use field access instead!")]] float& dyn__offsetAlongNormal();
    // Get instance field reference: private System.Int32 _shaderRadialGradientScale
    [[deprecated("Use field access instead!")]] int& dyn__shaderRadialGradientScale();
    // Get instance field reference: private System.Int32 _shaderRadialGradientIntensity
    [[deprecated("Use field access instead!")]] int& dyn__shaderRadialGradientIntensity();
    // Get instance field reference: private System.Int32 _shaderRadialGradientBackgroundOpacity
    [[deprecated("Use field access instead!")]] int& dyn__shaderRadialGradientBackgroundOpacity();
    // Get instance field reference: private System.Int32 _shaderOutlineColor
    [[deprecated("Use field access instead!")]] int& dyn__shaderOutlineColor();
    // Get instance field reference: private UnityEngine.GameObject _selectObject
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn__selectObject();
    // Get instance field reference: protected System.Boolean _started
    [[deprecated("Use field access instead!")]] bool& dyn__started();
    // public UnityEngine.Color get_OutlineColor()
    // Offset: 0x47B59EC
    ::UnityEngine::Color get_OutlineColor();
    // public System.Void set_OutlineColor(UnityEngine.Color value)
    // Offset: 0x47B59F8
    void set_OutlineColor(::UnityEngine::Color value);
    // public System.Single get_OffsetAlongNormal()
    // Offset: 0x47B5A04
    float get_OffsetAlongNormal();
    // public System.Void set_OffsetAlongNormal(System.Single value)
    // Offset: 0x47B5A0C
    void set_OffsetAlongNormal(float value);
    // protected System.Void Start()
    // Offset: 0x47B5A14
    void Start();
    // protected System.Void OnEnable()
    // Offset: 0x47B5AB0
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x47B5FAC
    void OnDisable();
    // private System.Void UpdateVisual()
    // Offset: 0x47B5BE4
    void UpdateVisual();
    // private System.Void UpdateVisualState(Oculus.Interaction.InteractorStateChangeArgs args)
    // Offset: 0x47B60D8
    void UpdateVisualState(::Oculus::Interaction::InteractorStateChangeArgs args);
    // public System.Void InjectAllHandRayInteractorCursorVisual(Oculus.Interaction.Input.IHand hand, Oculus.Interaction.RayInteractor rayInteractor, UnityEngine.GameObject cursor, UnityEngine.Renderer renderer)
    // Offset: 0x47B60DC
    void InjectAllHandRayInteractorCursorVisual(::Oculus::Interaction::Input::IHand* hand, ::Oculus::Interaction::RayInteractor* rayInteractor, ::UnityEngine::GameObject* cursor, ::UnityEngine::Renderer* renderer);
    // public System.Void InjectHand(Oculus.Interaction.Input.IHand hand)
    // Offset: 0x47B6138
    void InjectHand(::Oculus::Interaction::Input::IHand* hand);
    // public System.Void InjectRayInteractor(Oculus.Interaction.RayInteractor rayInteractor)
    // Offset: 0x47B6208
    void InjectRayInteractor(::Oculus::Interaction::RayInteractor* rayInteractor);
    // public System.Void InjectCursor(UnityEngine.GameObject cursor)
    // Offset: 0x47B6210
    void InjectCursor(::UnityEngine::GameObject* cursor);
    // public System.Void InjectRenderer(UnityEngine.Renderer renderer)
    // Offset: 0x47B6218
    void InjectRenderer(::UnityEngine::Renderer* renderer);
    // public System.Void .ctor()
    // Offset: 0x47B6220
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HandRayInteractorCursorVisual* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::HandRayInteractorCursorVisual::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HandRayInteractorCursorVisual*, creationType>()));
    }
  }; // Oculus.Interaction.HandRayInteractorCursorVisual
  #pragma pack(pop)
  static check_size<sizeof(HandRayInteractorCursorVisual), 120 + sizeof(bool)> __Oculus_Interaction_HandRayInteractorCursorVisualSizeCheck;
  static_assert(sizeof(HandRayInteractorCursorVisual) == 0x79);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::HandRayInteractorCursorVisual::get_OutlineColor
// Il2CppName: get_OutlineColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (Oculus::Interaction::HandRayInteractorCursorVisual::*)()>(&Oculus::Interaction::HandRayInteractorCursorVisual::get_OutlineColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandRayInteractorCursorVisual*), "get_OutlineColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandRayInteractorCursorVisual::set_OutlineColor
// Il2CppName: set_OutlineColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandRayInteractorCursorVisual::*)(::UnityEngine::Color)>(&Oculus::Interaction::HandRayInteractorCursorVisual::set_OutlineColor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandRayInteractorCursorVisual*), "set_OutlineColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandRayInteractorCursorVisual::get_OffsetAlongNormal
// Il2CppName: get_OffsetAlongNormal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::HandRayInteractorCursorVisual::*)()>(&Oculus::Interaction::HandRayInteractorCursorVisual::get_OffsetAlongNormal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandRayInteractorCursorVisual*), "get_OffsetAlongNormal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandRayInteractorCursorVisual::set_OffsetAlongNormal
// Il2CppName: set_OffsetAlongNormal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandRayInteractorCursorVisual::*)(float)>(&Oculus::Interaction::HandRayInteractorCursorVisual::set_OffsetAlongNormal)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandRayInteractorCursorVisual*), "set_OffsetAlongNormal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandRayInteractorCursorVisual::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandRayInteractorCursorVisual::*)()>(&Oculus::Interaction::HandRayInteractorCursorVisual::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandRayInteractorCursorVisual*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandRayInteractorCursorVisual::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandRayInteractorCursorVisual::*)()>(&Oculus::Interaction::HandRayInteractorCursorVisual::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandRayInteractorCursorVisual*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandRayInteractorCursorVisual::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandRayInteractorCursorVisual::*)()>(&Oculus::Interaction::HandRayInteractorCursorVisual::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandRayInteractorCursorVisual*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandRayInteractorCursorVisual::UpdateVisual
// Il2CppName: UpdateVisual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandRayInteractorCursorVisual::*)()>(&Oculus::Interaction::HandRayInteractorCursorVisual::UpdateVisual)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandRayInteractorCursorVisual*), "UpdateVisual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandRayInteractorCursorVisual::UpdateVisualState
// Il2CppName: UpdateVisualState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandRayInteractorCursorVisual::*)(::Oculus::Interaction::InteractorStateChangeArgs)>(&Oculus::Interaction::HandRayInteractorCursorVisual::UpdateVisualState)> {
  static const MethodInfo* get() {
    static auto* args = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "InteractorStateChangeArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandRayInteractorCursorVisual*), "UpdateVisualState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{args});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandRayInteractorCursorVisual::InjectAllHandRayInteractorCursorVisual
// Il2CppName: InjectAllHandRayInteractorCursorVisual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandRayInteractorCursorVisual::*)(::Oculus::Interaction::Input::IHand*, ::Oculus::Interaction::RayInteractor*, ::UnityEngine::GameObject*, ::UnityEngine::Renderer*)>(&Oculus::Interaction::HandRayInteractorCursorVisual::InjectAllHandRayInteractorCursorVisual)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHand")->byval_arg;
    static auto* rayInteractor = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "RayInteractor")->byval_arg;
    static auto* cursor = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* renderer = &::il2cpp_utils::GetClassFromName("UnityEngine", "Renderer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandRayInteractorCursorVisual*), "InjectAllHandRayInteractorCursorVisual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand, rayInteractor, cursor, renderer});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandRayInteractorCursorVisual::InjectHand
// Il2CppName: InjectHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandRayInteractorCursorVisual::*)(::Oculus::Interaction::Input::IHand*)>(&Oculus::Interaction::HandRayInteractorCursorVisual::InjectHand)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandRayInteractorCursorVisual*), "InjectHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandRayInteractorCursorVisual::InjectRayInteractor
// Il2CppName: InjectRayInteractor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandRayInteractorCursorVisual::*)(::Oculus::Interaction::RayInteractor*)>(&Oculus::Interaction::HandRayInteractorCursorVisual::InjectRayInteractor)> {
  static const MethodInfo* get() {
    static auto* rayInteractor = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "RayInteractor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandRayInteractorCursorVisual*), "InjectRayInteractor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rayInteractor});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandRayInteractorCursorVisual::InjectCursor
// Il2CppName: InjectCursor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandRayInteractorCursorVisual::*)(::UnityEngine::GameObject*)>(&Oculus::Interaction::HandRayInteractorCursorVisual::InjectCursor)> {
  static const MethodInfo* get() {
    static auto* cursor = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandRayInteractorCursorVisual*), "InjectCursor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cursor});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandRayInteractorCursorVisual::InjectRenderer
// Il2CppName: InjectRenderer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandRayInteractorCursorVisual::*)(::UnityEngine::Renderer*)>(&Oculus::Interaction::HandRayInteractorCursorVisual::InjectRenderer)> {
  static const MethodInfo* get() {
    static auto* renderer = &::il2cpp_utils::GetClassFromName("UnityEngine", "Renderer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandRayInteractorCursorVisual*), "InjectRenderer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderer});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandRayInteractorCursorVisual::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
