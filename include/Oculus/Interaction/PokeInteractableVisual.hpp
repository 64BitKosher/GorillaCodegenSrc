// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction
namespace Oculus::Interaction {
  // Forward declaring type: PokeInteractable
  class PokeInteractable;
  // Forward declaring type: PokeInteractor
  class PokeInteractor;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: PokeInteractableVisual
  class PokeInteractableVisual;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::PokeInteractableVisual);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::PokeInteractableVisual*, "Oculus.Interaction", "PokeInteractableVisual");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x51
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.PokeInteractableVisual
  // [TokenAttribute] Offset: FFFFFFFF
  class PokeInteractableVisual : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private Oculus.Interaction.PokeInteractable _pokeInteractable
    // Size: 0x8
    // Offset: 0x20
    ::Oculus::Interaction::PokeInteractable* pokeInteractable;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::PokeInteractable*) == 0x8);
    // private UnityEngine.Transform _buttonBaseTransform
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Transform* buttonBaseTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private System.Single _maxOffsetAlongNormal
    // Size: 0x4
    // Offset: 0x30
    float maxOffsetAlongNormal;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector2 _planarOffset
    // Size: 0x8
    // Offset: 0x34
    ::UnityEngine::Vector2 planarOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // Padding between fields: planarOffset and: pokeInteractors
    char __padding3[0x4] = {};
    // private System.Collections.Generic.HashSet`1<Oculus.Interaction.PokeInteractor> _pokeInteractors
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::Generic::HashSet_1<::Oculus::Interaction::PokeInteractor*>* pokeInteractors;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<::Oculus::Interaction::PokeInteractor*>*) == 0x8);
    // private Oculus.Interaction.PokeInteractor _postProcessInteractor
    // Size: 0x8
    // Offset: 0x48
    ::Oculus::Interaction::PokeInteractor* postProcessInteractor;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::PokeInteractor*) == 0x8);
    // protected System.Boolean _started
    // Size: 0x1
    // Offset: 0x50
    bool started;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private Oculus.Interaction.PokeInteractable _pokeInteractable
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::PokeInteractable*& dyn__pokeInteractable();
    // Get instance field reference: private UnityEngine.Transform _buttonBaseTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__buttonBaseTransform();
    // Get instance field reference: private System.Single _maxOffsetAlongNormal
    [[deprecated("Use field access instead!")]] float& dyn__maxOffsetAlongNormal();
    // Get instance field reference: private UnityEngine.Vector2 _planarOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn__planarOffset();
    // Get instance field reference: private System.Collections.Generic.HashSet`1<Oculus.Interaction.PokeInteractor> _pokeInteractors
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::Oculus::Interaction::PokeInteractor*>*& dyn__pokeInteractors();
    // Get instance field reference: private Oculus.Interaction.PokeInteractor _postProcessInteractor
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::PokeInteractor*& dyn__postProcessInteractor();
    // Get instance field reference: protected System.Boolean _started
    [[deprecated("Use field access instead!")]] bool& dyn__started();
    // private System.Action get__postProcessHandler()
    // Offset: 0x47B26CC
    ::System::Action* get__postProcessHandler();
    // protected System.Void Start()
    // Offset: 0x47B2748
    void Start();
    // protected System.Void OnEnable()
    // Offset: 0x47B2998
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x47B2BBC
    void OnDisable();
    // private System.Void HandleInteractorAdded(Oculus.Interaction.PokeInteractor pokeInteractor)
    // Offset: 0x47B3160
    void HandleInteractorAdded(::Oculus::Interaction::PokeInteractor* pokeInteractor);
    // private System.Void HandleInteractorRemoved(Oculus.Interaction.PokeInteractor pokeInteractor)
    // Offset: 0x47B3254
    void HandleInteractorRemoved(::Oculus::Interaction::PokeInteractor* pokeInteractor);
    // private System.Void UpdateComponentPosition()
    // Offset: 0x47B2E34
    void UpdateComponentPosition();
    // public System.Void InjectAllPokeInteractableVisual(Oculus.Interaction.PokeInteractable pokeInteractable, UnityEngine.Transform buttonBaseTransform)
    // Offset: 0x47B34D8
    void InjectAllPokeInteractableVisual(::Oculus::Interaction::PokeInteractable* pokeInteractable, ::UnityEngine::Transform* buttonBaseTransform);
    // public System.Void InjectPokeInteractable(Oculus.Interaction.PokeInteractable pokeInteractable)
    // Offset: 0x47B3508
    void InjectPokeInteractable(::Oculus::Interaction::PokeInteractable* pokeInteractable);
    // public System.Void InjectButtonBaseTransform(UnityEngine.Transform buttonBaseTransform)
    // Offset: 0x47B3510
    void InjectButtonBaseTransform(::UnityEngine::Transform* buttonBaseTransform);
    // public System.Void .ctor()
    // Offset: 0x47B3518
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PokeInteractableVisual* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::PokeInteractableVisual::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PokeInteractableVisual*, creationType>()));
    }
  }; // Oculus.Interaction.PokeInteractableVisual
  #pragma pack(pop)
  static check_size<sizeof(PokeInteractableVisual), 80 + sizeof(bool)> __Oculus_Interaction_PokeInteractableVisualSizeCheck;
  static_assert(sizeof(PokeInteractableVisual) == 0x51);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::PokeInteractableVisual::get__postProcessHandler
// Il2CppName: get__postProcessHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Action* (Oculus::Interaction::PokeInteractableVisual::*)()>(&Oculus::Interaction::PokeInteractableVisual::get__postProcessHandler)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PokeInteractableVisual*), "get__postProcessHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PokeInteractableVisual::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PokeInteractableVisual::*)()>(&Oculus::Interaction::PokeInteractableVisual::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PokeInteractableVisual*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PokeInteractableVisual::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PokeInteractableVisual::*)()>(&Oculus::Interaction::PokeInteractableVisual::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PokeInteractableVisual*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PokeInteractableVisual::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PokeInteractableVisual::*)()>(&Oculus::Interaction::PokeInteractableVisual::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PokeInteractableVisual*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PokeInteractableVisual::HandleInteractorAdded
// Il2CppName: HandleInteractorAdded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PokeInteractableVisual::*)(::Oculus::Interaction::PokeInteractor*)>(&Oculus::Interaction::PokeInteractableVisual::HandleInteractorAdded)> {
  static const MethodInfo* get() {
    static auto* pokeInteractor = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "PokeInteractor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PokeInteractableVisual*), "HandleInteractorAdded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pokeInteractor});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PokeInteractableVisual::HandleInteractorRemoved
// Il2CppName: HandleInteractorRemoved
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PokeInteractableVisual::*)(::Oculus::Interaction::PokeInteractor*)>(&Oculus::Interaction::PokeInteractableVisual::HandleInteractorRemoved)> {
  static const MethodInfo* get() {
    static auto* pokeInteractor = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "PokeInteractor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PokeInteractableVisual*), "HandleInteractorRemoved", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pokeInteractor});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PokeInteractableVisual::UpdateComponentPosition
// Il2CppName: UpdateComponentPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PokeInteractableVisual::*)()>(&Oculus::Interaction::PokeInteractableVisual::UpdateComponentPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PokeInteractableVisual*), "UpdateComponentPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PokeInteractableVisual::InjectAllPokeInteractableVisual
// Il2CppName: InjectAllPokeInteractableVisual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PokeInteractableVisual::*)(::Oculus::Interaction::PokeInteractable*, ::UnityEngine::Transform*)>(&Oculus::Interaction::PokeInteractableVisual::InjectAllPokeInteractableVisual)> {
  static const MethodInfo* get() {
    static auto* pokeInteractable = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "PokeInteractable")->byval_arg;
    static auto* buttonBaseTransform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PokeInteractableVisual*), "InjectAllPokeInteractableVisual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pokeInteractable, buttonBaseTransform});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PokeInteractableVisual::InjectPokeInteractable
// Il2CppName: InjectPokeInteractable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PokeInteractableVisual::*)(::Oculus::Interaction::PokeInteractable*)>(&Oculus::Interaction::PokeInteractableVisual::InjectPokeInteractable)> {
  static const MethodInfo* get() {
    static auto* pokeInteractable = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "PokeInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PokeInteractableVisual*), "InjectPokeInteractable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pokeInteractable});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PokeInteractableVisual::InjectButtonBaseTransform
// Il2CppName: InjectButtonBaseTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PokeInteractableVisual::*)(::UnityEngine::Transform*)>(&Oculus::Interaction::PokeInteractableVisual::InjectButtonBaseTransform)> {
  static const MethodInfo* get() {
    static auto* buttonBaseTransform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PokeInteractableVisual*), "InjectButtonBaseTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buttonBaseTransform});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PokeInteractableVisual::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
