// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Oculus.Interaction.ITransformer
#include "Oculus/Interaction/ITransformer.hpp"
// Including type: UnityEngine.Pose
#include "UnityEngine/Pose.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction
namespace Oculus::Interaction {
  // Forward declaring type: IGrabbable
  class IGrabbable;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.Demo
namespace Oculus::Interaction::Demo {
  // Forward declaring type: WaterSprayNozzleTransformer
  class WaterSprayNozzleTransformer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Demo::WaterSprayNozzleTransformer);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Demo::WaterSprayNozzleTransformer*, "Oculus.Interaction.Demo", "WaterSprayNozzleTransformer");
// Type namespace: Oculus.Interaction.Demo
namespace Oculus::Interaction::Demo {
  // Size: 0x5C
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.Demo.WaterSprayNozzleTransformer
  // [TokenAttribute] Offset: FFFFFFFF
  class WaterSprayNozzleTransformer : public ::UnityEngine::MonoBehaviour/*, public ::Oculus::Interaction::ITransformer*/ {
    public:
    public:
    // private System.Single _factor
    // Size: 0x4
    // Offset: 0x20
    float factor;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _snapAngle
    // Size: 0x4
    // Offset: 0x24
    float snapAngle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _snappiness
    // Size: 0x4
    // Offset: 0x28
    float snappiness;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 _maxSteps
    // Size: 0x4
    // Offset: 0x2C
    int maxSteps;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single _relativeAngle
    // Size: 0x4
    // Offset: 0x30
    float relativeAngle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 _stepsCount
    // Size: 0x4
    // Offset: 0x34
    int stepsCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private Oculus.Interaction.IGrabbable _grabbable
    // Size: 0x8
    // Offset: 0x38
    ::Oculus::Interaction::IGrabbable* grabbable;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::IGrabbable*) == 0x8);
    // private UnityEngine.Pose _previousGrabPose
    // Size: 0x1C
    // Offset: 0x40
    ::UnityEngine::Pose previousGrabPose;
    // Field size check
    static_assert(sizeof(::UnityEngine::Pose) == 0x1C);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::ITransformer
    operator ::Oculus::Interaction::ITransformer() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::ITransformer*>(this);
    }
    // Get instance field reference: private System.Single _factor
    [[deprecated("Use field access instead!")]] float& dyn__factor();
    // Get instance field reference: private System.Single _snapAngle
    [[deprecated("Use field access instead!")]] float& dyn__snapAngle();
    // Get instance field reference: private System.Single _snappiness
    [[deprecated("Use field access instead!")]] float& dyn__snappiness();
    // Get instance field reference: private System.Int32 _maxSteps
    [[deprecated("Use field access instead!")]] int& dyn__maxSteps();
    // Get instance field reference: private System.Single _relativeAngle
    [[deprecated("Use field access instead!")]] float& dyn__relativeAngle();
    // Get instance field reference: private System.Int32 _stepsCount
    [[deprecated("Use field access instead!")]] int& dyn__stepsCount();
    // Get instance field reference: private Oculus.Interaction.IGrabbable _grabbable
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::IGrabbable*& dyn__grabbable();
    // Get instance field reference: private UnityEngine.Pose _previousGrabPose
    [[deprecated("Use field access instead!")]] ::UnityEngine::Pose& dyn__previousGrabPose();
    // public System.Void Initialize(Oculus.Interaction.IGrabbable grabbable)
    // Offset: 0x479B91C
    void Initialize(::Oculus::Interaction::IGrabbable* grabbable);
    // public System.Void BeginTransform()
    // Offset: 0x479B924
    void BeginTransform();
    // public System.Void UpdateTransform()
    // Offset: 0x479BA1C
    void UpdateTransform();
    // public System.Void EndTransform()
    // Offset: 0x479BFDC
    void EndTransform();
    // public System.Void .ctor()
    // Offset: 0x479BFE0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WaterSprayNozzleTransformer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Demo::WaterSprayNozzleTransformer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WaterSprayNozzleTransformer*, creationType>()));
    }
  }; // Oculus.Interaction.Demo.WaterSprayNozzleTransformer
  #pragma pack(pop)
  static check_size<sizeof(WaterSprayNozzleTransformer), 64 + sizeof(::UnityEngine::Pose)> __Oculus_Interaction_Demo_WaterSprayNozzleTransformerSizeCheck;
  static_assert(sizeof(WaterSprayNozzleTransformer) == 0x5C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Demo::WaterSprayNozzleTransformer::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Demo::WaterSprayNozzleTransformer::*)(::Oculus::Interaction::IGrabbable*)>(&Oculus::Interaction::Demo::WaterSprayNozzleTransformer::Initialize)> {
  static const MethodInfo* get() {
    static auto* grabbable = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IGrabbable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Demo::WaterSprayNozzleTransformer*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{grabbable});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Demo::WaterSprayNozzleTransformer::BeginTransform
// Il2CppName: BeginTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Demo::WaterSprayNozzleTransformer::*)()>(&Oculus::Interaction::Demo::WaterSprayNozzleTransformer::BeginTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Demo::WaterSprayNozzleTransformer*), "BeginTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Demo::WaterSprayNozzleTransformer::UpdateTransform
// Il2CppName: UpdateTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Demo::WaterSprayNozzleTransformer::*)()>(&Oculus::Interaction::Demo::WaterSprayNozzleTransformer::UpdateTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Demo::WaterSprayNozzleTransformer*), "UpdateTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Demo::WaterSprayNozzleTransformer::EndTransform
// Il2CppName: EndTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Demo::WaterSprayNozzleTransformer::*)()>(&Oculus::Interaction::Demo::WaterSprayNozzleTransformer::EndTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Demo::WaterSprayNozzleTransformer*), "EndTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Demo::WaterSprayNozzleTransformer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
