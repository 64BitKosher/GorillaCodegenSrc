// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction::Demo
namespace Oculus::Interaction::Demo {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: RenderTexture
  class RenderTexture;
  // Forward declaring type: Mesh
  class Mesh;
  // Forward declaring type: WaitForSeconds
  class WaitForSeconds;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.Demo
namespace Oculus::Interaction::Demo {
  // Forward declaring type: MeshBlit
  class MeshBlit;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Demo::MeshBlit);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Demo::MeshBlit*, "Oculus.Interaction.Demo", "MeshBlit");
// Type namespace: Oculus.Interaction.Demo
namespace Oculus::Interaction::Demo {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.Demo.MeshBlit
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: FFFFFFFF
  class MeshBlit : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::Oculus::Interaction::Demo::MeshBlit::$$OnEnable$g__BlitRoutine|11_0$d
    class $$OnEnable$g__BlitRoutine|11_0$d;
    public:
    // public UnityEngine.Material material
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Material* material;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public UnityEngine.RenderTexture renderTexture
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::RenderTexture* renderTexture;
    // Field size check
    static_assert(sizeof(::UnityEngine::RenderTexture*) == 0x8);
    // private System.Single _blitsPerSecond
    // Size: 0x4
    // Offset: 0x30
    float blitsPerSecond;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: blitsPerSecond and: mesh
    char __padding2[0x4] = {};
    // private UnityEngine.Mesh _mesh
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Mesh* mesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::Mesh*) == 0x8);
    // private UnityEngine.WaitForSeconds _waitForSeconds
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::WaitForSeconds* waitForSeconds;
    // Field size check
    static_assert(sizeof(::UnityEngine::WaitForSeconds*) == 0x8);
    public:
    // Get static field: static private System.Int32 MAIN_TEX
    static int _get_MAIN_TEX();
    // Set static field: static private System.Int32 MAIN_TEX
    static void _set_MAIN_TEX(int value);
    // Get instance field reference: public UnityEngine.Material material
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_material();
    // Get instance field reference: public UnityEngine.RenderTexture renderTexture
    [[deprecated("Use field access instead!")]] ::UnityEngine::RenderTexture*& dyn_renderTexture();
    // Get instance field reference: private System.Single _blitsPerSecond
    [[deprecated("Use field access instead!")]] float& dyn__blitsPerSecond();
    // Get instance field reference: private UnityEngine.Mesh _mesh
    [[deprecated("Use field access instead!")]] ::UnityEngine::Mesh*& dyn__mesh();
    // Get instance field reference: private UnityEngine.WaitForSeconds _waitForSeconds
    [[deprecated("Use field access instead!")]] ::UnityEngine::WaitForSeconds*& dyn__waitForSeconds();
    // public System.Single get_BlitsPerSecond()
    // Offset: 0x47997EC
    float get_BlitsPerSecond();
    // public System.Void set_BlitsPerSecond(System.Single value)
    // Offset: 0x47997F4
    void set_BlitsPerSecond(float value);
    // private UnityEngine.Mesh get_Mesh()
    // Offset: 0x4799880
    ::UnityEngine::Mesh* get_Mesh();
    // private System.Void OnEnable()
    // Offset: 0x4799940
    void OnEnable();
    // public System.Void Blit()
    // Offset: 0x47999D8
    void Blit();
    // private System.Void SetBlitsPerSecond(System.Single value)
    // Offset: 0x47997F8
    void SetBlitsPerSecond(float value);
    // public System.Void .ctor()
    // Offset: 0x4799CA8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MeshBlit* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Demo::MeshBlit::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MeshBlit*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x4799CB8
    static void _cctor();
    // private System.Collections.IEnumerator <OnEnable>g__BlitRoutine|11_0()
    // Offset: 0x479996C
    ::System::Collections::IEnumerator* $OnEnable$g__BlitRoutine_11_0();
  }; // Oculus.Interaction.Demo.MeshBlit
  #pragma pack(pop)
  static check_size<sizeof(MeshBlit), 64 + sizeof(::UnityEngine::WaitForSeconds*)> __Oculus_Interaction_Demo_MeshBlitSizeCheck;
  static_assert(sizeof(MeshBlit) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Demo::MeshBlit::get_BlitsPerSecond
// Il2CppName: get_BlitsPerSecond
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::Demo::MeshBlit::*)()>(&Oculus::Interaction::Demo::MeshBlit::get_BlitsPerSecond)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Demo::MeshBlit*), "get_BlitsPerSecond", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Demo::MeshBlit::set_BlitsPerSecond
// Il2CppName: set_BlitsPerSecond
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Demo::MeshBlit::*)(float)>(&Oculus::Interaction::Demo::MeshBlit::set_BlitsPerSecond)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Demo::MeshBlit*), "set_BlitsPerSecond", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Demo::MeshBlit::get_Mesh
// Il2CppName: get_Mesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Mesh* (Oculus::Interaction::Demo::MeshBlit::*)()>(&Oculus::Interaction::Demo::MeshBlit::get_Mesh)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Demo::MeshBlit*), "get_Mesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Demo::MeshBlit::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Demo::MeshBlit::*)()>(&Oculus::Interaction::Demo::MeshBlit::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Demo::MeshBlit*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Demo::MeshBlit::Blit
// Il2CppName: Blit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Demo::MeshBlit::*)()>(&Oculus::Interaction::Demo::MeshBlit::Blit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Demo::MeshBlit*), "Blit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Demo::MeshBlit::SetBlitsPerSecond
// Il2CppName: SetBlitsPerSecond
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Demo::MeshBlit::*)(float)>(&Oculus::Interaction::Demo::MeshBlit::SetBlitsPerSecond)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Demo::MeshBlit*), "SetBlitsPerSecond", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Demo::MeshBlit::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Interaction::Demo::MeshBlit::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Oculus::Interaction::Demo::MeshBlit::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Demo::MeshBlit*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Demo::MeshBlit::$OnEnable$g__BlitRoutine_11_0
// Il2CppName: <OnEnable>g__BlitRoutine|11_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (Oculus::Interaction::Demo::MeshBlit::*)()>(&Oculus::Interaction::Demo::MeshBlit::$OnEnable$g__BlitRoutine_11_0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Demo::MeshBlit*), "<OnEnable>g__BlitRoutine|11_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
