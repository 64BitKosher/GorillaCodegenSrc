// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Oculus.Interaction.HandGrab.IHandGrabUseDelegate
#include "Oculus/Interaction/HandGrab/IHandGrabUseDelegate.hpp"
// Including type: UnityEngine.SnapAxis
#include "UnityEngine/SnapAxis.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction::Demo
namespace Oculus::Interaction::Demo {
  // Forward declaring type: MeshBlit
  class MeshBlit;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: Texture
  class Texture;
  // Forward declaring type: WaitForSeconds
  class WaitForSeconds;
  // Forward declaring type: Pose
  struct Pose;
  // Forward declaring type: MeshFilter
  class MeshFilter;
  // Forward declaring type: Matrix4x4
  struct Matrix4x4;
}
// Forward declaring namespace: UnityEngine::Events
namespace UnityEngine::Events {
  // Forward declaring type: UnityEvent
  class UnityEvent;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.Demo
namespace Oculus::Interaction::Demo {
  // Forward declaring type: WaterSpray
  class WaterSpray;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Demo::WaterSpray);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Demo::WaterSpray*, "Oculus.Interaction.Demo", "WaterSpray");
// Type namespace: Oculus.Interaction.Demo
namespace Oculus::Interaction::Demo {
  // Size: 0x9C
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.Demo.WaterSpray
  // [TokenAttribute] Offset: FFFFFFFF
  class WaterSpray : public ::UnityEngine::MonoBehaviour/*, public ::Oculus::Interaction::HandGrab::IHandGrabUseDelegate*/ {
    public:
    // Nested type: ::Oculus::Interaction::Demo::WaterSpray::NozzleMode
    struct NozzleMode;
    // Nested type: ::Oculus::Interaction::Demo::WaterSpray::NonAlloc
    class NonAlloc;
    // Nested type: ::Oculus::Interaction::Demo::WaterSpray::$StampRoutine$d__35
    class $StampRoutine$d__35;
    public:
    // private UnityEngine.Transform _trigger
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Transform* trigger;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform _nozzle
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Transform* nozzle;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.AnimationCurve _triggerRotationCurve
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::AnimationCurve* triggerRotationCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // private UnityEngine.SnapAxis _axis
    // Size: 0x1
    // Offset: 0x38
    ::UnityEngine::SnapAxis axis;
    // Field size check
    static_assert(sizeof(::UnityEngine::SnapAxis) == 0x1);
    // Padding between fields: axis and: releaseThresold
    char __padding3[0x3] = {};
    // private System.Single _releaseThresold
    // Size: 0x4
    // Offset: 0x3C
    float releaseThresold;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _fireThresold
    // Size: 0x4
    // Offset: 0x40
    float fireThresold;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _triggerSpeed
    // Size: 0x4
    // Offset: 0x44
    float triggerSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.AnimationCurve _strengthCurve
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::AnimationCurve* strengthCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // private UnityEngine.LayerMask _raycastLayerMask
    // Size: 0x4
    // Offset: 0x50
    ::UnityEngine::LayerMask raycastLayerMask;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // private System.Single _spraySpreadAngle
    // Size: 0x4
    // Offset: 0x54
    float spraySpreadAngle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _streamSpreadAngle
    // Size: 0x4
    // Offset: 0x58
    float streamSpreadAngle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _sprayStrength
    // Size: 0x4
    // Offset: 0x5C
    float sprayStrength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 _sprayHits
    // Size: 0x4
    // Offset: 0x60
    int sprayHits;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single _sprayRandomness
    // Size: 0x4
    // Offset: 0x64
    float sprayRandomness;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _maxDistance
    // Size: 0x4
    // Offset: 0x68
    float maxDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _dryingSpeed
    // Size: 0x4
    // Offset: 0x6C
    float dryingSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Material _sprayStampMaterial
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::Material* sprayStampMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.Texture _waterBumpOverride
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::Texture* waterBumpOverride;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture*) == 0x8);
    // private UnityEngine.Events.UnityEvent WhenSpray
    // Size: 0x8
    // Offset: 0x80
    ::UnityEngine::Events::UnityEvent* WhenSpray;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    // private UnityEngine.Events.UnityEvent WhenStream
    // Size: 0x8
    // Offset: 0x88
    ::UnityEngine::Events::UnityEvent* WhenStream;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    // private System.Boolean _wasFired
    // Size: 0x1
    // Offset: 0x90
    bool wasFired;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: wasFired and: dampedUseStrength
    char __padding20[0x3] = {};
    // private System.Single _dampedUseStrength
    // Size: 0x4
    // Offset: 0x94
    float dampedUseStrength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _lastUseTime
    // Size: 0x4
    // Offset: 0x98
    float lastUseTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::HandGrab::IHandGrabUseDelegate
    operator ::Oculus::Interaction::HandGrab::IHandGrabUseDelegate() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::HandGrab::IHandGrabUseDelegate*>(this);
    }
    // Get static field: static private readonly System.Int32 WET_MAP_PROPERTY
    static int _get_WET_MAP_PROPERTY();
    // Set static field: static private readonly System.Int32 WET_MAP_PROPERTY
    static void _set_WET_MAP_PROPERTY(int value);
    // Get static field: static private readonly System.Int32 STAMP_MULTIPLIER_PROPERTY
    static int _get_STAMP_MULTIPLIER_PROPERTY();
    // Set static field: static private readonly System.Int32 STAMP_MULTIPLIER_PROPERTY
    static void _set_STAMP_MULTIPLIER_PROPERTY(int value);
    // Get static field: static private readonly System.Int32 SUBTRACT_PROPERTY
    static int _get_SUBTRACT_PROPERTY();
    // Set static field: static private readonly System.Int32 SUBTRACT_PROPERTY
    static void _set_SUBTRACT_PROPERTY(int value);
    // Get static field: static private readonly System.Int32 WET_BUMPMAP_PROPERTY
    static int _get_WET_BUMPMAP_PROPERTY();
    // Set static field: static private readonly System.Int32 WET_BUMPMAP_PROPERTY
    static void _set_WET_BUMPMAP_PROPERTY(int value);
    // Get static field: static private readonly System.Int32 STAMP_MATRIX_PROPERTY
    static int _get_STAMP_MATRIX_PROPERTY();
    // Set static field: static private readonly System.Int32 STAMP_MATRIX_PROPERTY
    static void _set_STAMP_MATRIX_PROPERTY(int value);
    // Get static field: static private readonly UnityEngine.WaitForSeconds WAIT_TIME
    static ::UnityEngine::WaitForSeconds* _get_WAIT_TIME();
    // Set static field: static private readonly UnityEngine.WaitForSeconds WAIT_TIME
    static void _set_WAIT_TIME(::UnityEngine::WaitForSeconds* value);
    // Get instance field reference: private UnityEngine.Transform _trigger
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__trigger();
    // Get instance field reference: private UnityEngine.Transform _nozzle
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__nozzle();
    // Get instance field reference: private UnityEngine.AnimationCurve _triggerRotationCurve
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn__triggerRotationCurve();
    // Get instance field reference: private UnityEngine.SnapAxis _axis
    [[deprecated("Use field access instead!")]] ::UnityEngine::SnapAxis& dyn__axis();
    // Get instance field reference: private System.Single _releaseThresold
    [[deprecated("Use field access instead!")]] float& dyn__releaseThresold();
    // Get instance field reference: private System.Single _fireThresold
    [[deprecated("Use field access instead!")]] float& dyn__fireThresold();
    // Get instance field reference: private System.Single _triggerSpeed
    [[deprecated("Use field access instead!")]] float& dyn__triggerSpeed();
    // Get instance field reference: private UnityEngine.AnimationCurve _strengthCurve
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn__strengthCurve();
    // Get instance field reference: private UnityEngine.LayerMask _raycastLayerMask
    [[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& dyn__raycastLayerMask();
    // Get instance field reference: private System.Single _spraySpreadAngle
    [[deprecated("Use field access instead!")]] float& dyn__spraySpreadAngle();
    // Get instance field reference: private System.Single _streamSpreadAngle
    [[deprecated("Use field access instead!")]] float& dyn__streamSpreadAngle();
    // Get instance field reference: private System.Single _sprayStrength
    [[deprecated("Use field access instead!")]] float& dyn__sprayStrength();
    // Get instance field reference: private System.Int32 _sprayHits
    [[deprecated("Use field access instead!")]] int& dyn__sprayHits();
    // Get instance field reference: private System.Single _sprayRandomness
    [[deprecated("Use field access instead!")]] float& dyn__sprayRandomness();
    // Get instance field reference: private System.Single _maxDistance
    [[deprecated("Use field access instead!")]] float& dyn__maxDistance();
    // Get instance field reference: private System.Single _dryingSpeed
    [[deprecated("Use field access instead!")]] float& dyn__dryingSpeed();
    // Get instance field reference: private UnityEngine.Material _sprayStampMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn__sprayStampMaterial();
    // Get instance field reference: private UnityEngine.Texture _waterBumpOverride
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture*& dyn__waterBumpOverride();
    // Get instance field reference: private UnityEngine.Events.UnityEvent WhenSpray
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn_WhenSpray();
    // Get instance field reference: private UnityEngine.Events.UnityEvent WhenStream
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn_WhenStream();
    // Get instance field reference: private System.Boolean _wasFired
    [[deprecated("Use field access instead!")]] bool& dyn__wasFired();
    // Get instance field reference: private System.Single _dampedUseStrength
    [[deprecated("Use field access instead!")]] float& dyn__dampedUseStrength();
    // Get instance field reference: private System.Single _lastUseTime
    [[deprecated("Use field access instead!")]] float& dyn__lastUseTime();
    // private System.Void SprayWater()
    // Offset: 0x4799E08
    void SprayWater();
    // private System.Void UpdateTriggerRotation(System.Single progress)
    // Offset: 0x4799F08
    void UpdateTriggerRotation(float progress);
    // private Oculus.Interaction.Demo.WaterSpray/NozzleMode GetNozzleMode()
    // Offset: 0x4799E54
    ::Oculus::Interaction::Demo::WaterSpray::NozzleMode GetNozzleMode();
    // private System.Void Spray()
    // Offset: 0x4799EAC
    void Spray();
    // private System.Void Stream()
    // Offset: 0x4799EDC
    void Stream();
    // private System.Collections.IEnumerator StampRoutine(System.Int32 stampCount, System.Single randomness, System.Single spread, System.Single strength)
    // Offset: 0x4799F70
    ::System::Collections::IEnumerator* StampRoutine(int stampCount, float randomness, float spread, float strength);
    // private System.Void StartStamping()
    // Offset: 0x479A038
    void StartStamping();
    // private System.Void StartDrying()
    // Offset: 0x479A0AC
    void StartDrying();
    // private System.Void Stamp(UnityEngine.Pose pose, System.Single maxDistance, System.Single angle, System.Single strength)
    // Offset: 0x479A184
    void Stamp(::UnityEngine::Pose pose, float maxDistance, float angle, float strength);
    // private System.Void RenderSplash(UnityEngine.Transform rootObject)
    // Offset: 0x479A810
    void RenderSplash(::UnityEngine::Transform* rootObject);
    // private Oculus.Interaction.Demo.MeshBlit CreateMeshBlit(UnityEngine.MeshFilter meshFilter)
    // Offset: 0x479AA7C
    ::Oculus::Interaction::Demo::MeshBlit* CreateMeshBlit(::UnityEngine::MeshFilter* meshFilter);
    // private UnityEngine.Matrix4x4 CreateStampMatrix(UnityEngine.Pose pose, System.Single angle)
    // Offset: 0x479A4F4
    ::UnityEngine::Matrix4x4 CreateStampMatrix(::UnityEngine::Pose pose, float angle);
    // private System.Void OnDestroy()
    // Offset: 0x479AD94
    void OnDestroy();
    // public System.Void BeginUse()
    // Offset: 0x479B0EC
    void BeginUse();
    // public System.Void EndUse()
    // Offset: 0x479B10C
    void EndUse();
    // public System.Single ComputeUseStrength(System.Single strength)
    // Offset: 0x479B110
    float ComputeUseStrength(float strength);
    // private System.Void UpdateTriggerProgress(System.Single progress)
    // Offset: 0x479B1B4
    void UpdateTriggerProgress(float progress);
    // public System.Void .ctor()
    // Offset: 0x479B210
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WaterSpray* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Demo::WaterSpray::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WaterSpray*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x479B2AC
    static void _cctor();
  }; // Oculus.Interaction.Demo.WaterSpray
  #pragma pack(pop)
  static check_size<sizeof(WaterSpray), 152 + sizeof(float)> __Oculus_Interaction_Demo_WaterSpraySizeCheck;
  static_assert(sizeof(WaterSpray) == 0x9C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Demo::WaterSpray::SprayWater
// Il2CppName: SprayWater
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Demo::WaterSpray::*)()>(&Oculus::Interaction::Demo::WaterSpray::SprayWater)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Demo::WaterSpray*), "SprayWater", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Demo::WaterSpray::UpdateTriggerRotation
// Il2CppName: UpdateTriggerRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Demo::WaterSpray::*)(float)>(&Oculus::Interaction::Demo::WaterSpray::UpdateTriggerRotation)> {
  static const MethodInfo* get() {
    static auto* progress = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Demo::WaterSpray*), "UpdateTriggerRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{progress});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Demo::WaterSpray::GetNozzleMode
// Il2CppName: GetNozzleMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Demo::WaterSpray::NozzleMode (Oculus::Interaction::Demo::WaterSpray::*)()>(&Oculus::Interaction::Demo::WaterSpray::GetNozzleMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Demo::WaterSpray*), "GetNozzleMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Demo::WaterSpray::Spray
// Il2CppName: Spray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Demo::WaterSpray::*)()>(&Oculus::Interaction::Demo::WaterSpray::Spray)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Demo::WaterSpray*), "Spray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Demo::WaterSpray::Stream
// Il2CppName: Stream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Demo::WaterSpray::*)()>(&Oculus::Interaction::Demo::WaterSpray::Stream)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Demo::WaterSpray*), "Stream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Demo::WaterSpray::StampRoutine
// Il2CppName: StampRoutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (Oculus::Interaction::Demo::WaterSpray::*)(int, float, float, float)>(&Oculus::Interaction::Demo::WaterSpray::StampRoutine)> {
  static const MethodInfo* get() {
    static auto* stampCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* randomness = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* spread = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* strength = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Demo::WaterSpray*), "StampRoutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stampCount, randomness, spread, strength});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Demo::WaterSpray::StartStamping
// Il2CppName: StartStamping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Demo::WaterSpray::*)()>(&Oculus::Interaction::Demo::WaterSpray::StartStamping)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Demo::WaterSpray*), "StartStamping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Demo::WaterSpray::StartDrying
// Il2CppName: StartDrying
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Demo::WaterSpray::*)()>(&Oculus::Interaction::Demo::WaterSpray::StartDrying)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Demo::WaterSpray*), "StartDrying", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Demo::WaterSpray::Stamp
// Il2CppName: Stamp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Demo::WaterSpray::*)(::UnityEngine::Pose, float, float, float)>(&Oculus::Interaction::Demo::WaterSpray::Stamp)> {
  static const MethodInfo* get() {
    static auto* pose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->byval_arg;
    static auto* maxDistance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* angle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* strength = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Demo::WaterSpray*), "Stamp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pose, maxDistance, angle, strength});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Demo::WaterSpray::RenderSplash
// Il2CppName: RenderSplash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Demo::WaterSpray::*)(::UnityEngine::Transform*)>(&Oculus::Interaction::Demo::WaterSpray::RenderSplash)> {
  static const MethodInfo* get() {
    static auto* rootObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Demo::WaterSpray*), "RenderSplash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rootObject});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Demo::WaterSpray::CreateMeshBlit
// Il2CppName: CreateMeshBlit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Demo::MeshBlit* (Oculus::Interaction::Demo::WaterSpray::*)(::UnityEngine::MeshFilter*)>(&Oculus::Interaction::Demo::WaterSpray::CreateMeshBlit)> {
  static const MethodInfo* get() {
    static auto* meshFilter = &::il2cpp_utils::GetClassFromName("UnityEngine", "MeshFilter")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Demo::WaterSpray*), "CreateMeshBlit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{meshFilter});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Demo::WaterSpray::CreateStampMatrix
// Il2CppName: CreateStampMatrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Matrix4x4 (Oculus::Interaction::Demo::WaterSpray::*)(::UnityEngine::Pose, float)>(&Oculus::Interaction::Demo::WaterSpray::CreateStampMatrix)> {
  static const MethodInfo* get() {
    static auto* pose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->byval_arg;
    static auto* angle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Demo::WaterSpray*), "CreateStampMatrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pose, angle});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Demo::WaterSpray::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Demo::WaterSpray::*)()>(&Oculus::Interaction::Demo::WaterSpray::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Demo::WaterSpray*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Demo::WaterSpray::BeginUse
// Il2CppName: BeginUse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Demo::WaterSpray::*)()>(&Oculus::Interaction::Demo::WaterSpray::BeginUse)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Demo::WaterSpray*), "BeginUse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Demo::WaterSpray::EndUse
// Il2CppName: EndUse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Demo::WaterSpray::*)()>(&Oculus::Interaction::Demo::WaterSpray::EndUse)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Demo::WaterSpray*), "EndUse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Demo::WaterSpray::ComputeUseStrength
// Il2CppName: ComputeUseStrength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::Demo::WaterSpray::*)(float)>(&Oculus::Interaction::Demo::WaterSpray::ComputeUseStrength)> {
  static const MethodInfo* get() {
    static auto* strength = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Demo::WaterSpray*), "ComputeUseStrength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{strength});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Demo::WaterSpray::UpdateTriggerProgress
// Il2CppName: UpdateTriggerProgress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Demo::WaterSpray::*)(float)>(&Oculus::Interaction::Demo::WaterSpray::UpdateTriggerProgress)> {
  static const MethodInfo* get() {
    static auto* progress = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Demo::WaterSpray*), "UpdateTriggerProgress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{progress});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Demo::WaterSpray::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Interaction::Demo::WaterSpray::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Oculus::Interaction::Demo::WaterSpray::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Demo::WaterSpray*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
