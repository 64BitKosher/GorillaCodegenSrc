// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Oculus.Interaction.ISnapPoseDelegate
#include "Oculus/Interaction/ISnapPoseDelegate.hpp"
// Including type: UnityEngine.Pose
#include "UnityEngine/Pose.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Object because it is already included!
}
// Forward declaring namespace: Oculus::Interaction::Surfaces
namespace Oculus::Interaction::Surfaces {
  // Forward declaring type: ISurface
  class ISurface;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: SurfaceSnapPoseDelegate
  class SurfaceSnapPoseDelegate;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::SurfaceSnapPoseDelegate);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::SurfaceSnapPoseDelegate*, "Oculus.Interaction", "SurfaceSnapPoseDelegate");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.SurfaceSnapPoseDelegate
  // [TokenAttribute] Offset: FFFFFFFF
  class SurfaceSnapPoseDelegate : public ::UnityEngine::MonoBehaviour/*, public ::Oculus::Interaction::ISnapPoseDelegate*/ {
    public:
    public:
    // private UnityEngine.Object _surface
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Object* surface;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // protected Oculus.Interaction.Surfaces.ISurface Surface
    // Size: 0x8
    // Offset: 0x28
    ::Oculus::Interaction::Surfaces::ISurface* Surface;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Surfaces::ISurface*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.Int32,UnityEngine.Pose> _snappedPoses
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::Dictionary_2<int, ::UnityEngine::Pose>* snappedPoses;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<int, ::UnityEngine::Pose>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::ISnapPoseDelegate
    operator ::Oculus::Interaction::ISnapPoseDelegate() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::ISnapPoseDelegate*>(this);
    }
    // Get instance field reference: private UnityEngine.Object _surface
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__surface();
    // Get instance field reference: protected Oculus.Interaction.Surfaces.ISurface Surface
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Surfaces::ISurface*& dyn_Surface();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.Int32,UnityEngine.Pose> _snappedPoses
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<int, ::UnityEngine::Pose>*& dyn__snappedPoses();
    // protected System.Void Awake()
    // Offset: 0x47BBABC
    void Awake();
    // protected System.Void Start()
    // Offset: 0x47BBB84
    void Start();
    // public System.Void TrackElement(System.Int32 id, UnityEngine.Pose p)
    // Offset: 0x47BBB88
    void TrackElement(int id, ::UnityEngine::Pose p);
    // public System.Void UntrackElement(System.Int32 id)
    // Offset: 0x47BBB8C
    void UntrackElement(int id);
    // private System.Boolean ComputeWorldSurfacePose(UnityEngine.Pose pose, out UnityEngine.Pose result)
    // Offset: 0x47BBB90
    bool ComputeWorldSurfacePose(::UnityEngine::Pose pose, ByRef<::UnityEngine::Pose> result);
    // private System.Boolean ComputeLocalSurfacePose(UnityEngine.Pose pose, out UnityEngine.Pose result)
    // Offset: 0x47BBD34
    bool ComputeLocalSurfacePose(::UnityEngine::Pose pose, ByRef<::UnityEngine::Pose> result);
    // public System.Void SnapElement(System.Int32 id, UnityEngine.Pose pose)
    // Offset: 0x47BBFB8
    void SnapElement(int id, ::UnityEngine::Pose pose);
    // public System.Void UnsnapElement(System.Int32 id)
    // Offset: 0x47BC094
    void UnsnapElement(int id);
    // public System.Void MoveTrackedElement(System.Int32 id, UnityEngine.Pose p)
    // Offset: 0x47BC0EC
    void MoveTrackedElement(int id, ::UnityEngine::Pose p);
    // public System.Boolean SnapPoseForElement(System.Int32 id, UnityEngine.Pose pose, out UnityEngine.Pose result)
    // Offset: 0x47BC0F0
    bool SnapPoseForElement(int id, ::UnityEngine::Pose pose, ByRef<::UnityEngine::Pose> result);
    // public System.Void .ctor()
    // Offset: 0x47BC360
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SurfaceSnapPoseDelegate* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::SurfaceSnapPoseDelegate::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SurfaceSnapPoseDelegate*, creationType>()));
    }
  }; // Oculus.Interaction.SurfaceSnapPoseDelegate
  #pragma pack(pop)
  static check_size<sizeof(SurfaceSnapPoseDelegate), 48 + sizeof(::System::Collections::Generic::Dictionary_2<int, ::UnityEngine::Pose>*)> __Oculus_Interaction_SurfaceSnapPoseDelegateSizeCheck;
  static_assert(sizeof(SurfaceSnapPoseDelegate) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::SurfaceSnapPoseDelegate::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SurfaceSnapPoseDelegate::*)()>(&Oculus::Interaction::SurfaceSnapPoseDelegate::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SurfaceSnapPoseDelegate*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SurfaceSnapPoseDelegate::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SurfaceSnapPoseDelegate::*)()>(&Oculus::Interaction::SurfaceSnapPoseDelegate::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SurfaceSnapPoseDelegate*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SurfaceSnapPoseDelegate::TrackElement
// Il2CppName: TrackElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SurfaceSnapPoseDelegate::*)(int, ::UnityEngine::Pose)>(&Oculus::Interaction::SurfaceSnapPoseDelegate::TrackElement)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* p = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SurfaceSnapPoseDelegate*), "TrackElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, p});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SurfaceSnapPoseDelegate::UntrackElement
// Il2CppName: UntrackElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SurfaceSnapPoseDelegate::*)(int)>(&Oculus::Interaction::SurfaceSnapPoseDelegate::UntrackElement)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SurfaceSnapPoseDelegate*), "UntrackElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SurfaceSnapPoseDelegate::ComputeWorldSurfacePose
// Il2CppName: ComputeWorldSurfacePose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::SurfaceSnapPoseDelegate::*)(::UnityEngine::Pose, ByRef<::UnityEngine::Pose>)>(&Oculus::Interaction::SurfaceSnapPoseDelegate::ComputeWorldSurfacePose)> {
  static const MethodInfo* get() {
    static auto* pose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SurfaceSnapPoseDelegate*), "ComputeWorldSurfacePose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pose, result});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SurfaceSnapPoseDelegate::ComputeLocalSurfacePose
// Il2CppName: ComputeLocalSurfacePose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::SurfaceSnapPoseDelegate::*)(::UnityEngine::Pose, ByRef<::UnityEngine::Pose>)>(&Oculus::Interaction::SurfaceSnapPoseDelegate::ComputeLocalSurfacePose)> {
  static const MethodInfo* get() {
    static auto* pose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SurfaceSnapPoseDelegate*), "ComputeLocalSurfacePose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pose, result});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SurfaceSnapPoseDelegate::SnapElement
// Il2CppName: SnapElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SurfaceSnapPoseDelegate::*)(int, ::UnityEngine::Pose)>(&Oculus::Interaction::SurfaceSnapPoseDelegate::SnapElement)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* pose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SurfaceSnapPoseDelegate*), "SnapElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, pose});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SurfaceSnapPoseDelegate::UnsnapElement
// Il2CppName: UnsnapElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SurfaceSnapPoseDelegate::*)(int)>(&Oculus::Interaction::SurfaceSnapPoseDelegate::UnsnapElement)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SurfaceSnapPoseDelegate*), "UnsnapElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SurfaceSnapPoseDelegate::MoveTrackedElement
// Il2CppName: MoveTrackedElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SurfaceSnapPoseDelegate::*)(int, ::UnityEngine::Pose)>(&Oculus::Interaction::SurfaceSnapPoseDelegate::MoveTrackedElement)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* p = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SurfaceSnapPoseDelegate*), "MoveTrackedElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, p});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SurfaceSnapPoseDelegate::SnapPoseForElement
// Il2CppName: SnapPoseForElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::SurfaceSnapPoseDelegate::*)(int, ::UnityEngine::Pose, ByRef<::UnityEngine::Pose>)>(&Oculus::Interaction::SurfaceSnapPoseDelegate::SnapPoseForElement)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* pose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SurfaceSnapPoseDelegate*), "SnapPoseForElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, pose, result});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SurfaceSnapPoseDelegate::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
