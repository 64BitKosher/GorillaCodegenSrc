// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector3
  struct Vector3;
  // Forward declaring type: Collider
  class Collider;
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: Collisions
  class Collisions;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Collisions);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Collisions*, "Oculus.Interaction", "Collisions");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.Collisions
  // [TokenAttribute] Offset: FFFFFFFF
  class Collisions : public ::Il2CppObject {
    public:
    // static public UnityEngine.Vector3 ClosestPointToColliders(UnityEngine.Vector3 point, UnityEngine.Collider[] colliders)
    // Offset: 0x4770734
    static ::UnityEngine::Vector3 ClosestPointToColliders(::UnityEngine::Vector3 point, ::ArrayW<::UnityEngine::Collider*> colliders);
    // static public System.Boolean IsCapsuleWithinColliderApprox(UnityEngine.Vector3 p0, UnityEngine.Vector3 p1, System.Single radius, UnityEngine.Collider collider)
    // Offset: 0x47709F8
    static bool IsCapsuleWithinColliderApprox(::UnityEngine::Vector3 p0, ::UnityEngine::Vector3 p1, float radius, ::UnityEngine::Collider* collider);
    // static public System.Boolean IsPointWithinCollider(UnityEngine.Vector3 point, UnityEngine.Collider collider)
    // Offset: 0x4770894
    static bool IsPointWithinCollider(::UnityEngine::Vector3 point, ::UnityEngine::Collider* collider);
    // static public System.Boolean IsSphereWithinCollider(UnityEngine.Vector3 point, System.Single radius, UnityEngine.Collider collider)
    // Offset: 0x4770BAC
    static bool IsSphereWithinCollider(::UnityEngine::Vector3 point, float radius, ::UnityEngine::Collider* collider);
  }; // Oculus.Interaction.Collisions
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Collisions::ClosestPointToColliders
// Il2CppName: ClosestPointToColliders
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3, ::ArrayW<::UnityEngine::Collider*>)>(&Oculus::Interaction::Collisions::ClosestPointToColliders)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* colliders = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Collider"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Collisions*), "ClosestPointToColliders", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point, colliders});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Collisions::IsCapsuleWithinColliderApprox
// Il2CppName: IsCapsuleWithinColliderApprox
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, float, ::UnityEngine::Collider*)>(&Oculus::Interaction::Collisions::IsCapsuleWithinColliderApprox)> {
  static const MethodInfo* get() {
    static auto* p0 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* p1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* collider = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Collisions*), "IsCapsuleWithinColliderApprox", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p0, p1, radius, collider});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Collisions::IsPointWithinCollider
// Il2CppName: IsPointWithinCollider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Vector3, ::UnityEngine::Collider*)>(&Oculus::Interaction::Collisions::IsPointWithinCollider)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* collider = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Collisions*), "IsPointWithinCollider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point, collider});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Collisions::IsSphereWithinCollider
// Il2CppName: IsSphereWithinCollider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Vector3, float, ::UnityEngine::Collider*)>(&Oculus::Interaction::Collisions::IsSphereWithinCollider)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* collider = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Collisions*), "IsSphereWithinCollider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point, radius, collider});
  }
};
