// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Oculus.Interaction.Input.IAxis1D
#include "Oculus/Interaction/Input/IAxis1D.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: Oculus.Interaction.Unity.Input
namespace Oculus::Interaction::Unity::Input {
  // Forward declaring type: InputAxis
  class InputAxis;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Unity::Input::InputAxis);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Unity::Input::InputAxis*, "Oculus.Interaction.Unity.Input", "InputAxis");
// Type namespace: Oculus.Interaction.Unity.Input
namespace Oculus::Interaction::Unity::Input {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.Unity.Input.InputAxis
  // [TokenAttribute] Offset: FFFFFFFF
  class InputAxis : public ::UnityEngine::MonoBehaviour/*, public ::Oculus::Interaction::Input::IAxis1D*/ {
    public:
    public:
    // private System.String _axisName
    // Size: 0x8
    // Offset: 0x20
    ::StringW axisName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::Input::IAxis1D
    operator ::Oculus::Interaction::Input::IAxis1D() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::Input::IAxis1D*>(this);
    }
    // Get instance field reference: private System.String _axisName
    [[deprecated("Use field access instead!")]] ::StringW& dyn__axisName();
    // public System.Single Value()
    // Offset: 0x47E163C
    float Value();
    // public System.Void .ctor()
    // Offset: 0x47E1648
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InputAxis* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Unity::Input::InputAxis::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InputAxis*, creationType>()));
    }
  }; // Oculus.Interaction.Unity.Input.InputAxis
  #pragma pack(pop)
  static check_size<sizeof(InputAxis), 32 + sizeof(::StringW)> __Oculus_Interaction_Unity_Input_InputAxisSizeCheck;
  static_assert(sizeof(InputAxis) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Unity::Input::InputAxis::Value
// Il2CppName: Value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::Unity::Input::InputAxis::*)()>(&Oculus::Interaction::Unity::Input::InputAxis::Value)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Unity::Input::InputAxis*), "Value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Unity::Input::InputAxis::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
