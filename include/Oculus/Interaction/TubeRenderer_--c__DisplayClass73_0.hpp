// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Oculus.Interaction.TubeRenderer
#include "Oculus/Interaction/TubeRenderer.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Space
#include "UnityEngine/Space.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::TubeRenderer::$$c__DisplayClass73_0, "Oculus.Interaction", "TubeRenderer/<>c__DisplayClass73_0");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.TubeRenderer/<>c__DisplayClass73_0
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  struct TubeRenderer::$$c__DisplayClass73_0/*, public ::System::ValueType*/ {
    public:
    public:
    // public UnityEngine.Space space
    // Size: 0x4
    // Offset: 0x0
    ::UnityEngine::Space space;
    // Field size check
    static_assert(sizeof(::UnityEngine::Space) == 0x4);
    // public UnityEngine.Quaternion inverseRootRotation
    // Size: 0x10
    // Offset: 0x4
    ::UnityEngine::Quaternion inverseRootRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // public UnityEngine.Vector3 rootPositionScaled
    // Size: 0xC
    // Offset: 0x14
    ::UnityEngine::Vector3 rootPositionScaled;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    public:
    // Creating value type constructor for type: $$c__DisplayClass73_0
    constexpr $$c__DisplayClass73_0(::UnityEngine::Space space_ = {}, ::UnityEngine::Quaternion inverseRootRotation_ = {}, ::UnityEngine::Vector3 rootPositionScaled_ = {}) noexcept : space{space_}, inverseRootRotation{inverseRootRotation_}, rootPositionScaled{rootPositionScaled_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public UnityEngine.Space space
    [[deprecated("Use field access instead!")]] ::UnityEngine::Space& dyn_space();
    // Get instance field reference: public UnityEngine.Quaternion inverseRootRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_inverseRootRotation();
    // Get instance field reference: public UnityEngine.Vector3 rootPositionScaled
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_rootPositionScaled();
  }; // Oculus.Interaction.TubeRenderer/<>c__DisplayClass73_0
  #pragma pack(pop)
  static check_size<sizeof(TubeRenderer::$$c__DisplayClass73_0), 20 + sizeof(::UnityEngine::Vector3)> __Oculus_Interaction_TubeRenderer_$$c__DisplayClass73_0SizeCheck;
  static_assert(sizeof(TubeRenderer::$$c__DisplayClass73_0) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
