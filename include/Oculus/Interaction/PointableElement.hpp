// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Oculus.Interaction.IPointableElement
#include "Oculus/Interaction/IPointableElement.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction
namespace Oculus::Interaction {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Object because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: PointableElement
  class PointableElement;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::PointableElement);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::PointableElement*, "Oculus.Interaction", "PointableElement");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x61
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.PointableElement
  // [TokenAttribute] Offset: FFFFFFFF
  class PointableElement : public ::UnityEngine::MonoBehaviour/*, public ::Oculus::Interaction::IPointableElement*/ {
    public:
    // Nested type: ::Oculus::Interaction::PointableElement::$$c
    class $$c;
    public:
    // private System.Boolean _transferOnSecondSelection
    // Size: 0x1
    // Offset: 0x20
    bool transferOnSecondSelection;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _addNewPointsToFront
    // Size: 0x1
    // Offset: 0x21
    bool addNewPointsToFront;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: addNewPointsToFront and: forwardElement
    char __padding1[0x6] = {};
    // private UnityEngine.Object _forwardElement
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Object* forwardElement;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.IPointableElement <ForwardElement>k__BackingField
    // Size: 0x8
    // Offset: 0x30
    ::Oculus::Interaction::IPointableElement* ForwardElement;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::IPointableElement*) == 0x8);
    // private System.Action`1<Oculus.Interaction.PointerEvent> WhenPointerEventRaised
    // Size: 0x8
    // Offset: 0x38
    ::System::Action_1<::Oculus::Interaction::PointerEvent>* WhenPointerEventRaised;
    // Field size check
    static_assert(sizeof(::System::Action_1<::Oculus::Interaction::PointerEvent>*) == 0x8);
    // protected System.Collections.Generic.List`1<UnityEngine.Pose> _points
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::Generic::List_1<::UnityEngine::Pose>* points;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Pose>*) == 0x8);
    // protected System.Collections.Generic.List`1<System.Int32> _pointIds
    // Size: 0x8
    // Offset: 0x48
    ::System::Collections::Generic::List_1<int>* pointIds;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<int>*) == 0x8);
    // protected System.Collections.Generic.List`1<UnityEngine.Pose> _selectingPoints
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::Generic::List_1<::UnityEngine::Pose>* selectingPoints;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Pose>*) == 0x8);
    // protected System.Collections.Generic.List`1<System.Int32> _selectingPointIds
    // Size: 0x8
    // Offset: 0x58
    ::System::Collections::Generic::List_1<int>* selectingPointIds;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<int>*) == 0x8);
    // protected System.Boolean _started
    // Size: 0x1
    // Offset: 0x60
    bool started;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::IPointableElement
    operator ::Oculus::Interaction::IPointableElement() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::IPointableElement*>(this);
    }
    // Get instance field reference: private System.Boolean _transferOnSecondSelection
    [[deprecated("Use field access instead!")]] bool& dyn__transferOnSecondSelection();
    // Get instance field reference: private System.Boolean _addNewPointsToFront
    [[deprecated("Use field access instead!")]] bool& dyn__addNewPointsToFront();
    // Get instance field reference: private UnityEngine.Object _forwardElement
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__forwardElement();
    // Get instance field reference: private Oculus.Interaction.IPointableElement <ForwardElement>k__BackingField
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::IPointableElement*& dyn_$ForwardElement$k__BackingField();
    // Get instance field reference: private System.Action`1<Oculus.Interaction.PointerEvent> WhenPointerEventRaised
    [[deprecated("Use field access instead!")]] ::System::Action_1<::Oculus::Interaction::PointerEvent>*& dyn_WhenPointerEventRaised();
    // Get instance field reference: protected System.Collections.Generic.List`1<UnityEngine.Pose> _points
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Pose>*& dyn__points();
    // Get instance field reference: protected System.Collections.Generic.List`1<System.Int32> _pointIds
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& dyn__pointIds();
    // Get instance field reference: protected System.Collections.Generic.List`1<UnityEngine.Pose> _selectingPoints
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Pose>*& dyn__selectingPoints();
    // Get instance field reference: protected System.Collections.Generic.List`1<System.Int32> _selectingPointIds
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& dyn__selectingPointIds();
    // Get instance field reference: protected System.Boolean _started
    [[deprecated("Use field access instead!")]] bool& dyn__started();
    // public Oculus.Interaction.IPointableElement get_ForwardElement()
    // Offset: 0x47C39B8
    ::Oculus::Interaction::IPointableElement* get_ForwardElement();
    // private System.Void set_ForwardElement(Oculus.Interaction.IPointableElement value)
    // Offset: 0x47C39C0
    void set_ForwardElement(::Oculus::Interaction::IPointableElement* value);
    // public System.Boolean get_TransferOnSecondSelection()
    // Offset: 0x47C39C8
    bool get_TransferOnSecondSelection();
    // public System.Void set_TransferOnSecondSelection(System.Boolean value)
    // Offset: 0x47C39D0
    void set_TransferOnSecondSelection(bool value);
    // public System.Boolean get_AddNewPointsToFront()
    // Offset: 0x47C39DC
    bool get_AddNewPointsToFront();
    // public System.Void set_AddNewPointsToFront(System.Boolean value)
    // Offset: 0x47C39E4
    void set_AddNewPointsToFront(bool value);
    // public System.Void add_WhenPointerEventRaised(System.Action`1<Oculus.Interaction.PointerEvent> value)
    // Offset: 0x47C39F0
    void add_WhenPointerEventRaised(::System::Action_1<::Oculus::Interaction::PointerEvent>* value);
    // public System.Void remove_WhenPointerEventRaised(System.Action`1<Oculus.Interaction.PointerEvent> value)
    // Offset: 0x47C3AA0
    void remove_WhenPointerEventRaised(::System::Action_1<::Oculus::Interaction::PointerEvent>* value);
    // public System.Collections.Generic.List`1<UnityEngine.Pose> get_Points()
    // Offset: 0x47C3B50
    ::System::Collections::Generic::List_1<::UnityEngine::Pose>* get_Points();
    // public System.Int32 get_PointsCount()
    // Offset: 0x47C3B58
    int get_PointsCount();
    // public System.Collections.Generic.List`1<UnityEngine.Pose> get_SelectingPoints()
    // Offset: 0x47C3BA0
    ::System::Collections::Generic::List_1<::UnityEngine::Pose>* get_SelectingPoints();
    // public System.Int32 get_SelectingPointsCount()
    // Offset: 0x47C3BA8
    int get_SelectingPointsCount();
    // protected System.Void Awake()
    // Offset: 0x47C3BF0
    void Awake();
    // protected System.Void Start()
    // Offset: 0x47C3C48
    void Start();
    // protected System.Void OnEnable()
    // Offset: 0x47C3DBC
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x47C3EB4
    void OnDisable();
    // private System.Void HandlePointerEventRaised(Oculus.Interaction.PointerEvent evt)
    // Offset: 0x47C4200
    void HandlePointerEventRaised(::Oculus::Interaction::PointerEvent evt);
    // public System.Void ProcessPointerEvent(Oculus.Interaction.PointerEvent evt)
    // Offset: 0x47C424C
    void ProcessPointerEvent(::Oculus::Interaction::PointerEvent evt);
    // private System.Void Hover(Oculus.Interaction.PointerEvent evt)
    // Offset: 0x47C4328
    void Hover(::Oculus::Interaction::PointerEvent evt);
    // private System.Void Move(Oculus.Interaction.PointerEvent evt)
    // Offset: 0x47C4628
    void Move(::Oculus::Interaction::PointerEvent evt);
    // private System.Void Unhover(Oculus.Interaction.PointerEvent evt)
    // Offset: 0x47C4530
    void Unhover(::Oculus::Interaction::PointerEvent evt);
    // private System.Void Select(Oculus.Interaction.PointerEvent evt)
    // Offset: 0x47C4770
    void Select(::Oculus::Interaction::PointerEvent evt);
    // private System.Void Unselect(Oculus.Interaction.PointerEvent evt)
    // Offset: 0x47C4A6C
    void Unselect(::Oculus::Interaction::PointerEvent evt);
    // private System.Void Cancel(Oculus.Interaction.PointerEvent evt)
    // Offset: 0x47C40B0
    void Cancel(::Oculus::Interaction::PointerEvent evt);
    // protected System.Void PointableElementUpdated(Oculus.Interaction.PointerEvent evt)
    // Offset: 0x47C4B64
    void PointableElementUpdated(::Oculus::Interaction::PointerEvent evt);
    // public System.Void InjectOptionalForwardElement(Oculus.Interaction.IPointableElement forwardElement)
    // Offset: 0x47C4C78
    void InjectOptionalForwardElement(::Oculus::Interaction::IPointableElement* forwardElement);
    // public System.Void .ctor()
    // Offset: 0x47C4D44
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PointableElement* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::PointableElement::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PointableElement*, creationType>()));
    }
  }; // Oculus.Interaction.PointableElement
  #pragma pack(pop)
  static check_size<sizeof(PointableElement), 96 + sizeof(bool)> __Oculus_Interaction_PointableElementSizeCheck;
  static_assert(sizeof(PointableElement) == 0x61);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::PointableElement::get_ForwardElement
// Il2CppName: get_ForwardElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::IPointableElement* (Oculus::Interaction::PointableElement::*)()>(&Oculus::Interaction::PointableElement::get_ForwardElement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableElement*), "get_ForwardElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableElement::set_ForwardElement
// Il2CppName: set_ForwardElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PointableElement::*)(::Oculus::Interaction::IPointableElement*)>(&Oculus::Interaction::PointableElement::set_ForwardElement)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IPointableElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableElement*), "set_ForwardElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableElement::get_TransferOnSecondSelection
// Il2CppName: get_TransferOnSecondSelection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::PointableElement::*)()>(&Oculus::Interaction::PointableElement::get_TransferOnSecondSelection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableElement*), "get_TransferOnSecondSelection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableElement::set_TransferOnSecondSelection
// Il2CppName: set_TransferOnSecondSelection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PointableElement::*)(bool)>(&Oculus::Interaction::PointableElement::set_TransferOnSecondSelection)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableElement*), "set_TransferOnSecondSelection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableElement::get_AddNewPointsToFront
// Il2CppName: get_AddNewPointsToFront
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::PointableElement::*)()>(&Oculus::Interaction::PointableElement::get_AddNewPointsToFront)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableElement*), "get_AddNewPointsToFront", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableElement::set_AddNewPointsToFront
// Il2CppName: set_AddNewPointsToFront
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PointableElement::*)(bool)>(&Oculus::Interaction::PointableElement::set_AddNewPointsToFront)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableElement*), "set_AddNewPointsToFront", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableElement::add_WhenPointerEventRaised
// Il2CppName: add_WhenPointerEventRaised
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PointableElement::*)(::System::Action_1<::Oculus::Interaction::PointerEvent>*)>(&Oculus::Interaction::PointableElement::add_WhenPointerEventRaised)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Interaction", "PointerEvent")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableElement*), "add_WhenPointerEventRaised", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableElement::remove_WhenPointerEventRaised
// Il2CppName: remove_WhenPointerEventRaised
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PointableElement::*)(::System::Action_1<::Oculus::Interaction::PointerEvent>*)>(&Oculus::Interaction::PointableElement::remove_WhenPointerEventRaised)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Interaction", "PointerEvent")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableElement*), "remove_WhenPointerEventRaised", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableElement::get_Points
// Il2CppName: get_Points
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::Pose>* (Oculus::Interaction::PointableElement::*)()>(&Oculus::Interaction::PointableElement::get_Points)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableElement*), "get_Points", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableElement::get_PointsCount
// Il2CppName: get_PointsCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Oculus::Interaction::PointableElement::*)()>(&Oculus::Interaction::PointableElement::get_PointsCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableElement*), "get_PointsCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableElement::get_SelectingPoints
// Il2CppName: get_SelectingPoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::Pose>* (Oculus::Interaction::PointableElement::*)()>(&Oculus::Interaction::PointableElement::get_SelectingPoints)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableElement*), "get_SelectingPoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableElement::get_SelectingPointsCount
// Il2CppName: get_SelectingPointsCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Oculus::Interaction::PointableElement::*)()>(&Oculus::Interaction::PointableElement::get_SelectingPointsCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableElement*), "get_SelectingPointsCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableElement::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PointableElement::*)()>(&Oculus::Interaction::PointableElement::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableElement*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableElement::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PointableElement::*)()>(&Oculus::Interaction::PointableElement::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableElement*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableElement::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PointableElement::*)()>(&Oculus::Interaction::PointableElement::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableElement*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableElement::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PointableElement::*)()>(&Oculus::Interaction::PointableElement::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableElement*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableElement::HandlePointerEventRaised
// Il2CppName: HandlePointerEventRaised
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PointableElement::*)(::Oculus::Interaction::PointerEvent)>(&Oculus::Interaction::PointableElement::HandlePointerEventRaised)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "PointerEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableElement*), "HandlePointerEventRaised", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableElement::ProcessPointerEvent
// Il2CppName: ProcessPointerEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PointableElement::*)(::Oculus::Interaction::PointerEvent)>(&Oculus::Interaction::PointableElement::ProcessPointerEvent)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "PointerEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableElement*), "ProcessPointerEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableElement::Hover
// Il2CppName: Hover
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PointableElement::*)(::Oculus::Interaction::PointerEvent)>(&Oculus::Interaction::PointableElement::Hover)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "PointerEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableElement*), "Hover", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableElement::Move
// Il2CppName: Move
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PointableElement::*)(::Oculus::Interaction::PointerEvent)>(&Oculus::Interaction::PointableElement::Move)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "PointerEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableElement*), "Move", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableElement::Unhover
// Il2CppName: Unhover
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PointableElement::*)(::Oculus::Interaction::PointerEvent)>(&Oculus::Interaction::PointableElement::Unhover)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "PointerEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableElement*), "Unhover", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableElement::Select
// Il2CppName: Select
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PointableElement::*)(::Oculus::Interaction::PointerEvent)>(&Oculus::Interaction::PointableElement::Select)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "PointerEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableElement*), "Select", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableElement::Unselect
// Il2CppName: Unselect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PointableElement::*)(::Oculus::Interaction::PointerEvent)>(&Oculus::Interaction::PointableElement::Unselect)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "PointerEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableElement*), "Unselect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableElement::Cancel
// Il2CppName: Cancel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PointableElement::*)(::Oculus::Interaction::PointerEvent)>(&Oculus::Interaction::PointableElement::Cancel)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "PointerEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableElement*), "Cancel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableElement::PointableElementUpdated
// Il2CppName: PointableElementUpdated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PointableElement::*)(::Oculus::Interaction::PointerEvent)>(&Oculus::Interaction::PointableElement::PointableElementUpdated)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "PointerEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableElement*), "PointableElementUpdated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableElement::InjectOptionalForwardElement
// Il2CppName: InjectOptionalForwardElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PointableElement::*)(::Oculus::Interaction::IPointableElement*)>(&Oculus::Interaction::PointableElement::InjectOptionalForwardElement)> {
  static const MethodInfo* get() {
    static auto* forwardElement = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IPointableElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableElement*), "InjectOptionalForwardElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{forwardElement});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableElement::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
