// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Oculus.Interaction.PoseDetection.ITransformFeatureStateProvider
#include "Oculus/Interaction/PoseDetection/ITransformFeatureStateProvider.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Object because it is already included!
}
// Forward declaring namespace: Oculus::Interaction::PoseDetection
namespace Oculus::Interaction::PoseDetection {
  // Forward declaring type: TransformConfig
  class TransformConfig;
  // Forward declaring type: TransformFeature
  struct TransformFeature;
  // Forward declaring type: FeatureStateActiveMode
  struct FeatureStateActiveMode;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Nullable`1<T>
  template<typename T>
  struct Nullable_1;
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: TransformFeatureStateProviderRef
  class TransformFeatureStateProviderRef;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::TransformFeatureStateProviderRef);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::TransformFeatureStateProviderRef*, "Oculus.Interaction", "TransformFeatureStateProviderRef");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.TransformFeatureStateProviderRef
  // [TokenAttribute] Offset: FFFFFFFF
  class TransformFeatureStateProviderRef : public ::UnityEngine::MonoBehaviour/*, public ::Oculus::Interaction::PoseDetection::ITransformFeatureStateProvider*/ {
    public:
    public:
    // private UnityEngine.Object _transformFeatureStateProvider
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Object* transformFeatureStateProvider;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.PoseDetection.ITransformFeatureStateProvider <TransformFeatureStateProvider>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    ::Oculus::Interaction::PoseDetection::ITransformFeatureStateProvider* TransformFeatureStateProvider;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::PoseDetection::ITransformFeatureStateProvider*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::PoseDetection::ITransformFeatureStateProvider
    operator ::Oculus::Interaction::PoseDetection::ITransformFeatureStateProvider() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::PoseDetection::ITransformFeatureStateProvider*>(this);
    }
    // Get instance field reference: private UnityEngine.Object _transformFeatureStateProvider
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__transformFeatureStateProvider();
    // Get instance field reference: private Oculus.Interaction.PoseDetection.ITransformFeatureStateProvider <TransformFeatureStateProvider>k__BackingField
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::PoseDetection::ITransformFeatureStateProvider*& dyn_$TransformFeatureStateProvider$k__BackingField();
    // public Oculus.Interaction.PoseDetection.ITransformFeatureStateProvider get_TransformFeatureStateProvider()
    // Offset: 0x47CD714
    ::Oculus::Interaction::PoseDetection::ITransformFeatureStateProvider* get_TransformFeatureStateProvider();
    // private System.Void set_TransformFeatureStateProvider(Oculus.Interaction.PoseDetection.ITransformFeatureStateProvider value)
    // Offset: 0x47CD71C
    void set_TransformFeatureStateProvider(::Oculus::Interaction::PoseDetection::ITransformFeatureStateProvider* value);
    // protected System.Void Awake()
    // Offset: 0x47CD724
    void Awake();
    // protected System.Void Start()
    // Offset: 0x47CD77C
    void Start();
    // public System.Boolean IsStateActive(Oculus.Interaction.PoseDetection.TransformConfig config, Oculus.Interaction.PoseDetection.TransformFeature feature, Oculus.Interaction.PoseDetection.FeatureStateActiveMode mode, System.String stateId)
    // Offset: 0x47CD780
    bool IsStateActive(::Oculus::Interaction::PoseDetection::TransformConfig* config, ::Oculus::Interaction::PoseDetection::TransformFeature feature, ::Oculus::Interaction::PoseDetection::FeatureStateActiveMode mode, ::StringW stateId);
    // public System.Boolean GetCurrentState(Oculus.Interaction.PoseDetection.TransformConfig config, Oculus.Interaction.PoseDetection.TransformFeature transformFeature, out System.String currentState)
    // Offset: 0x47CD850
    bool GetCurrentState(::Oculus::Interaction::PoseDetection::TransformConfig* config, ::Oculus::Interaction::PoseDetection::TransformFeature transformFeature, ByRef<::StringW> currentState);
    // public System.Void RegisterConfig(Oculus.Interaction.PoseDetection.TransformConfig transformConfig)
    // Offset: 0x47CD914
    void RegisterConfig(::Oculus::Interaction::PoseDetection::TransformConfig* transformConfig);
    // public System.Void UnRegisterConfig(Oculus.Interaction.PoseDetection.TransformConfig transformConfig)
    // Offset: 0x47CD9C0
    void UnRegisterConfig(::Oculus::Interaction::PoseDetection::TransformConfig* transformConfig);
    // public System.Void GetFeatureVectorAndWristPos(Oculus.Interaction.PoseDetection.TransformConfig config, Oculus.Interaction.PoseDetection.TransformFeature transformFeature, System.Boolean isHandVector, ref System.Nullable`1<UnityEngine.Vector3> featureVec, ref System.Nullable`1<UnityEngine.Vector3> wristPos)
    // Offset: 0x47CDA6C
    void GetFeatureVectorAndWristPos(::Oculus::Interaction::PoseDetection::TransformConfig* config, ::Oculus::Interaction::PoseDetection::TransformFeature transformFeature, bool isHandVector, ByRef<::System::Nullable_1<::UnityEngine::Vector3>> featureVec, ByRef<::System::Nullable_1<::UnityEngine::Vector3>> wristPos);
    // public System.Void InjectAllTransformFeatureStateProviderRef(Oculus.Interaction.PoseDetection.ITransformFeatureStateProvider transformFeatureStateProvider)
    // Offset: 0x47CDB48
    void InjectAllTransformFeatureStateProviderRef(::Oculus::Interaction::PoseDetection::ITransformFeatureStateProvider* transformFeatureStateProvider);
    // public System.Void InjectTransformFeatureStateProvider(Oculus.Interaction.PoseDetection.ITransformFeatureStateProvider transformFeatureStateProvider)
    // Offset: 0x47CDB4C
    void InjectTransformFeatureStateProvider(::Oculus::Interaction::PoseDetection::ITransformFeatureStateProvider* transformFeatureStateProvider);
    // public System.Void .ctor()
    // Offset: 0x47CDC1C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TransformFeatureStateProviderRef* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::TransformFeatureStateProviderRef::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TransformFeatureStateProviderRef*, creationType>()));
    }
  }; // Oculus.Interaction.TransformFeatureStateProviderRef
  #pragma pack(pop)
  static check_size<sizeof(TransformFeatureStateProviderRef), 40 + sizeof(::Oculus::Interaction::PoseDetection::ITransformFeatureStateProvider*)> __Oculus_Interaction_TransformFeatureStateProviderRefSizeCheck;
  static_assert(sizeof(TransformFeatureStateProviderRef) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::TransformFeatureStateProviderRef::get_TransformFeatureStateProvider
// Il2CppName: get_TransformFeatureStateProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::PoseDetection::ITransformFeatureStateProvider* (Oculus::Interaction::TransformFeatureStateProviderRef::*)()>(&Oculus::Interaction::TransformFeatureStateProviderRef::get_TransformFeatureStateProvider)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TransformFeatureStateProviderRef*), "get_TransformFeatureStateProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TransformFeatureStateProviderRef::set_TransformFeatureStateProvider
// Il2CppName: set_TransformFeatureStateProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TransformFeatureStateProviderRef::*)(::Oculus::Interaction::PoseDetection::ITransformFeatureStateProvider*)>(&Oculus::Interaction::TransformFeatureStateProviderRef::set_TransformFeatureStateProvider)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.PoseDetection", "ITransformFeatureStateProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TransformFeatureStateProviderRef*), "set_TransformFeatureStateProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TransformFeatureStateProviderRef::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TransformFeatureStateProviderRef::*)()>(&Oculus::Interaction::TransformFeatureStateProviderRef::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TransformFeatureStateProviderRef*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TransformFeatureStateProviderRef::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TransformFeatureStateProviderRef::*)()>(&Oculus::Interaction::TransformFeatureStateProviderRef::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TransformFeatureStateProviderRef*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TransformFeatureStateProviderRef::IsStateActive
// Il2CppName: IsStateActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::TransformFeatureStateProviderRef::*)(::Oculus::Interaction::PoseDetection::TransformConfig*, ::Oculus::Interaction::PoseDetection::TransformFeature, ::Oculus::Interaction::PoseDetection::FeatureStateActiveMode, ::StringW)>(&Oculus::Interaction::TransformFeatureStateProviderRef::IsStateActive)> {
  static const MethodInfo* get() {
    static auto* config = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.PoseDetection", "TransformConfig")->byval_arg;
    static auto* feature = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.PoseDetection", "TransformFeature")->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.PoseDetection", "FeatureStateActiveMode")->byval_arg;
    static auto* stateId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TransformFeatureStateProviderRef*), "IsStateActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{config, feature, mode, stateId});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TransformFeatureStateProviderRef::GetCurrentState
// Il2CppName: GetCurrentState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::TransformFeatureStateProviderRef::*)(::Oculus::Interaction::PoseDetection::TransformConfig*, ::Oculus::Interaction::PoseDetection::TransformFeature, ByRef<::StringW>)>(&Oculus::Interaction::TransformFeatureStateProviderRef::GetCurrentState)> {
  static const MethodInfo* get() {
    static auto* config = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.PoseDetection", "TransformConfig")->byval_arg;
    static auto* transformFeature = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.PoseDetection", "TransformFeature")->byval_arg;
    static auto* currentState = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TransformFeatureStateProviderRef*), "GetCurrentState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{config, transformFeature, currentState});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TransformFeatureStateProviderRef::RegisterConfig
// Il2CppName: RegisterConfig
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TransformFeatureStateProviderRef::*)(::Oculus::Interaction::PoseDetection::TransformConfig*)>(&Oculus::Interaction::TransformFeatureStateProviderRef::RegisterConfig)> {
  static const MethodInfo* get() {
    static auto* transformConfig = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.PoseDetection", "TransformConfig")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TransformFeatureStateProviderRef*), "RegisterConfig", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transformConfig});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TransformFeatureStateProviderRef::UnRegisterConfig
// Il2CppName: UnRegisterConfig
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TransformFeatureStateProviderRef::*)(::Oculus::Interaction::PoseDetection::TransformConfig*)>(&Oculus::Interaction::TransformFeatureStateProviderRef::UnRegisterConfig)> {
  static const MethodInfo* get() {
    static auto* transformConfig = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.PoseDetection", "TransformConfig")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TransformFeatureStateProviderRef*), "UnRegisterConfig", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transformConfig});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TransformFeatureStateProviderRef::GetFeatureVectorAndWristPos
// Il2CppName: GetFeatureVectorAndWristPos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TransformFeatureStateProviderRef::*)(::Oculus::Interaction::PoseDetection::TransformConfig*, ::Oculus::Interaction::PoseDetection::TransformFeature, bool, ByRef<::System::Nullable_1<::UnityEngine::Vector3>>, ByRef<::System::Nullable_1<::UnityEngine::Vector3>>)>(&Oculus::Interaction::TransformFeatureStateProviderRef::GetFeatureVectorAndWristPos)> {
  static const MethodInfo* get() {
    static auto* config = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.PoseDetection", "TransformConfig")->byval_arg;
    static auto* transformFeature = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.PoseDetection", "TransformFeature")->byval_arg;
    static auto* isHandVector = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* featureVec = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->this_arg;
    static auto* wristPos = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TransformFeatureStateProviderRef*), "GetFeatureVectorAndWristPos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{config, transformFeature, isHandVector, featureVec, wristPos});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TransformFeatureStateProviderRef::InjectAllTransformFeatureStateProviderRef
// Il2CppName: InjectAllTransformFeatureStateProviderRef
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TransformFeatureStateProviderRef::*)(::Oculus::Interaction::PoseDetection::ITransformFeatureStateProvider*)>(&Oculus::Interaction::TransformFeatureStateProviderRef::InjectAllTransformFeatureStateProviderRef)> {
  static const MethodInfo* get() {
    static auto* transformFeatureStateProvider = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.PoseDetection", "ITransformFeatureStateProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TransformFeatureStateProviderRef*), "InjectAllTransformFeatureStateProviderRef", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transformFeatureStateProvider});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TransformFeatureStateProviderRef::InjectTransformFeatureStateProvider
// Il2CppName: InjectTransformFeatureStateProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TransformFeatureStateProviderRef::*)(::Oculus::Interaction::PoseDetection::ITransformFeatureStateProvider*)>(&Oculus::Interaction::TransformFeatureStateProviderRef::InjectTransformFeatureStateProvider)> {
  static const MethodInfo* get() {
    static auto* transformFeatureStateProvider = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.PoseDetection", "ITransformFeatureStateProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TransformFeatureStateProviderRef*), "InjectTransformFeatureStateProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transformFeatureStateProvider});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TransformFeatureStateProviderRef::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
