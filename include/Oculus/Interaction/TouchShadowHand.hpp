// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Oculus.Interaction.Input.Handedness
#include "Oculus/Interaction/Input/Handedness.hpp"
// Including type: Oculus.Interaction.HandSphere
#include "Oculus/Interaction/HandSphere.hpp"
// Including type: UnityEngine.Pose
#include "UnityEngine/Pose.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction
namespace Oculus::Interaction {
  // Forward declaring type: IHandSphereMap
  class IHandSphereMap;
  // Forward declaring type: ColliderGroup
  class ColliderGroup;
}
// Forward declaring namespace: Oculus::Interaction::Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: ShadowHand
  class ShadowHand;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Vector3 because it is already included!
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: TouchShadowHand
  class TouchShadowHand;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::TouchShadowHand);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::TouchShadowHand*, "Oculus.Interaction", "TouchShadowHand");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.TouchShadowHand
  // [TokenAttribute] Offset: FFFFFFFF
  class TouchShadowHand : public ::Il2CppObject {
    public:
    // Nested type: ::Oculus::Interaction::TouchShadowHand::GrabTouchInfo
    class GrabTouchInfo;
    public:
    // private Oculus.Interaction.Input.ShadowHand _shadowHand
    // Size: 0x8
    // Offset: 0x10
    ::Oculus::Interaction::Input::ShadowHand* shadowHand;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::ShadowHand*) == 0x8);
    // private Oculus.Interaction.IHandSphereMap _handSphereMap
    // Size: 0x8
    // Offset: 0x18
    ::Oculus::Interaction::IHandSphereMap* handSphereMap;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::IHandSphereMap*) == 0x8);
    // private Oculus.Interaction.Input.Handedness _handedness
    // Size: 0x4
    // Offset: 0x20
    ::Oculus::Interaction::Input::Handedness handedness;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::Handedness) == 0x4);
    // Padding between fields: handedness and: spheres
    char __padding2[0x4] = {};
    // private System.Collections.Generic.List`1<Oculus.Interaction.HandSphere> _spheres
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::List_1<::Oculus::Interaction::HandSphere>* spheres;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Oculus::Interaction::HandSphere>*) == 0x8);
    // private System.Int32 _totalIterations
    // Size: 0x4
    // Offset: 0x30
    int totalIterations;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _pushoutIterations
    // Size: 0x4
    // Offset: 0x34
    int pushoutIterations;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 Iterations
    // Size: 0x4
    // Offset: 0x38
    int Iterations;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: Iterations and: sphereHit
    char __padding6[0x4] = {};
    // private System.Collections.Generic.List`1<System.Int32> _sphereHit
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::Generic::List_1<int>* sphereHit;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<int>*) == 0x8);
    public:
    // Get instance field reference: private Oculus.Interaction.Input.ShadowHand _shadowHand
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::ShadowHand*& dyn__shadowHand();
    // Get instance field reference: private Oculus.Interaction.IHandSphereMap _handSphereMap
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::IHandSphereMap*& dyn__handSphereMap();
    // Get instance field reference: private Oculus.Interaction.Input.Handedness _handedness
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::Handedness& dyn__handedness();
    // Get instance field reference: private System.Collections.Generic.List`1<Oculus.Interaction.HandSphere> _spheres
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Oculus::Interaction::HandSphere>*& dyn__spheres();
    // Get instance field reference: private System.Int32 _totalIterations
    [[deprecated("Use field access instead!")]] int& dyn__totalIterations();
    // Get instance field reference: private System.Int32 _pushoutIterations
    [[deprecated("Use field access instead!")]] int& dyn__pushoutIterations();
    // Get instance field reference: public System.Int32 Iterations
    [[deprecated("Use field access instead!")]] int& dyn_Iterations();
    // Get instance field reference: private System.Collections.Generic.List`1<System.Int32> _sphereHit
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& dyn__sphereHit();
    // public Oculus.Interaction.Input.ShadowHand get_ShadowHand()
    // Offset: 0x47C0858
    ::Oculus::Interaction::Input::ShadowHand* get_ShadowHand();
    // public System.Int32 get_TotalIterations()
    // Offset: 0x47C0860
    int get_TotalIterations();
    // public System.Void set_TotalIterations(System.Int32 value)
    // Offset: 0x47C0868
    void set_TotalIterations(int value);
    // public System.Int32 get_PushoutIterations()
    // Offset: 0x47C087C
    int get_PushoutIterations();
    // public System.Void set_PushoutIterations(System.Int32 value)
    // Offset: 0x47C0884
    void set_PushoutIterations(int value);
    // public System.Void .ctor(Oculus.Interaction.IHandSphereMap map, Oculus.Interaction.Input.Handedness handedness, System.Int32 iterations)
    // Offset: 0x47BDA40
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TouchShadowHand* New_ctor(::Oculus::Interaction::IHandSphereMap* map, ::Oculus::Interaction::Input::Handedness handedness, int iterations) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::TouchShadowHand::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TouchShadowHand*, creationType>(map, handedness, iterations)));
    }
    // public System.Void SetShadowRootFromHand(Oculus.Interaction.Input.ShadowHand hand)
    // Offset: 0x47BF830
    void SetShadowRootFromHand(::Oculus::Interaction::Input::ShadowHand* hand);
    // public System.Void SetShadowRootFromHands(Oculus.Interaction.Input.ShadowHand from, Oculus.Interaction.Input.ShadowHand to, System.Single t)
    // Offset: 0x47BE5C0
    void SetShadowRootFromHands(::Oculus::Interaction::Input::ShadowHand* from, ::Oculus::Interaction::Input::ShadowHand* to, float t);
    // public System.Void SetShadowFingerFrom(System.Int32 fingerIdx, Oculus.Interaction.Input.ShadowHand from)
    // Offset: 0x47BEB08
    void SetShadowFingerFrom(int fingerIdx, ::Oculus::Interaction::Input::ShadowHand* from);
    // private System.Void SetShadowFingerFromLerp(System.Int32 fingerIdx, Oculus.Interaction.Input.ShadowHand from, Oculus.Interaction.Input.ShadowHand to, System.Single t)
    // Offset: 0x47C0898
    void SetShadowFingerFromLerp(int fingerIdx, ::Oculus::Interaction::Input::ShadowHand* from, ::Oculus::Interaction::Input::ShadowHand* to, float t);
    // private System.Void SetShadowFingerFromLerps(System.Int32 fingerIdx, Oculus.Interaction.Input.ShadowHand from, Oculus.Interaction.Input.ShadowHand to, System.Single[] t)
    // Offset: 0x47C0A30
    void SetShadowFingerFromLerps(int fingerIdx, ::Oculus::Interaction::Input::ShadowHand* from, ::Oculus::Interaction::Input::ShadowHand* to, ::ArrayW<float> t);
    // private System.Void SetShadowFromLerpHands(Oculus.Interaction.Input.ShadowHand from, Oculus.Interaction.Input.ShadowHand to, System.Single t)
    // Offset: 0x47C0BDC
    void SetShadowFromLerpHands(::Oculus::Interaction::Input::ShadowHand* from, ::Oculus::Interaction::Input::ShadowHand* to, float t);
    // private System.Void LoadSpheresForFingerFromShadow(System.Int32 fingerIdx, System.Int32 jointIdx)
    // Offset: 0x47C0D68
    void LoadSpheresForFingerFromShadow(int fingerIdx, int jointIdx);
    // private System.Void LoadSpheresForHandFromShadow()
    // Offset: 0x47C0F4C
    void LoadSpheresForHandFromShadow();
    // private System.Boolean CheckSphereCollision(Oculus.Interaction.ColliderGroup colliderGroup, UnityEngine.Vector3 offset, System.Collections.Generic.List`1<System.Int32> sphereHit, System.Collections.Generic.List`1<System.Int32> sphereIndices)
    // Offset: 0x47C10B4
    bool CheckSphereCollision(::Oculus::Interaction::ColliderGroup* colliderGroup, ::UnityEngine::Vector3 offset, ::System::Collections::Generic::List_1<int>* sphereHit, ::System::Collections::Generic::List_1<int>* sphereIndices);
    // public System.Boolean CheckFingerTouch(System.Int32 fingerIdx, System.Int32 jointIdx, Oculus.Interaction.ColliderGroup colliderGroup, UnityEngine.Vector3 offset, System.Collections.Generic.List`1<System.Int32> sphereHit)
    // Offset: 0x47BEC3C
    bool CheckFingerTouch(int fingerIdx, int jointIdx, ::Oculus::Interaction::ColliderGroup* colliderGroup, ::UnityEngine::Vector3 offset, ::System::Collections::Generic::List_1<int>* sphereHit);
    // public System.Void CheckTouchFingers(Oculus.Interaction.Input.ShadowHand hand, Oculus.Interaction.ColliderGroup colliderGroup, Oculus.Interaction.TouchShadowHand/GrabTouchInfo result)
    // Offset: 0x47C1350
    void CheckTouchFingers(::Oculus::Interaction::Input::ShadowHand* hand, ::Oculus::Interaction::ColliderGroup* colliderGroup, ::Oculus::Interaction::TouchShadowHand::GrabTouchInfo* result);
    // public System.Boolean GrabReleaseFinger(System.Int32 fingerIdx, Oculus.Interaction.Input.ShadowHand fromHand, Oculus.Interaction.Input.ShadowHand toHand, Oculus.Interaction.ColliderGroup colliderGroup, UnityEngine.Vector3 offset)
    // Offset: 0x47BF2CC
    bool GrabReleaseFinger(int fingerIdx, ::Oculus::Interaction::Input::ShadowHand* fromHand, ::Oculus::Interaction::Input::ShadowHand* toHand, ::Oculus::Interaction::ColliderGroup* colliderGroup, ::UnityEngine::Vector3 offset);
    // public System.Boolean GrabConformFinger(System.Int32 fingerIdx, Oculus.Interaction.Input.ShadowHand fromHand, Oculus.Interaction.Input.ShadowHand toHand, Oculus.Interaction.ColliderGroup colliderGroup, UnityEngine.Vector3 offset)
    // Offset: 0x47BEC98
    bool GrabConformFinger(int fingerIdx, ::Oculus::Interaction::Input::ShadowHand* fromHand, ::Oculus::Interaction::Input::ShadowHand* toHand, ::Oculus::Interaction::ColliderGroup* colliderGroup, ::UnityEngine::Vector3 offset);
    // public System.Void GrabConformFingers(Oculus.Interaction.Input.ShadowHand fromHand, Oculus.Interaction.Input.ShadowHand toHand, Oculus.Interaction.ColliderGroup colliderGroup, UnityEngine.Vector3 offset)
    // Offset: 0x47C1498
    void GrabConformFingers(::Oculus::Interaction::Input::ShadowHand* fromHand, ::Oculus::Interaction::Input::ShadowHand* toHand, ::Oculus::Interaction::ColliderGroup* colliderGroup, ::UnityEngine::Vector3 offset);
    // public System.Boolean PushoutFinger(System.Int32 fingerIdx, Oculus.Interaction.Input.ShadowHand from, Oculus.Interaction.Input.ShadowHand to, Oculus.Interaction.ColliderGroup colliderGroup, UnityEngine.Vector3 offset)
    // Offset: 0x47BE918
    bool PushoutFinger(int fingerIdx, ::Oculus::Interaction::Input::ShadowHand* from, ::Oculus::Interaction::Input::ShadowHand* to, ::Oculus::Interaction::ColliderGroup* colliderGroup, ::UnityEngine::Vector3 offset);
    // public System.Void GrabTouchStep(Oculus.Interaction.Input.ShadowHand from, Oculus.Interaction.Input.ShadowHand to, Oculus.Interaction.ColliderGroup colliderGroup, System.Int32 iteration, UnityEngine.Vector3 colliderOffset, System.Boolean pushout, Oculus.Interaction.TouchShadowHand/GrabTouchInfo result)
    // Offset: 0x47C1514
    void GrabTouchStep(::Oculus::Interaction::Input::ShadowHand* from, ::Oculus::Interaction::Input::ShadowHand* to, ::Oculus::Interaction::ColliderGroup* colliderGroup, int iteration, ::UnityEngine::Vector3 colliderOffset, bool pushout, ::Oculus::Interaction::TouchShadowHand::GrabTouchInfo* result);
    // public System.Void GrabTouch(Oculus.Interaction.Input.ShadowHand fromHand, Oculus.Interaction.Input.ShadowHand toHand, Oculus.Interaction.ColliderGroup colliderGroup, System.Boolean pushout, Oculus.Interaction.TouchShadowHand/GrabTouchInfo result)
    // Offset: 0x47BE4E4
    void GrabTouch(::Oculus::Interaction::Input::ShadowHand* fromHand, ::Oculus::Interaction::Input::ShadowHand* toHand, ::Oculus::Interaction::ColliderGroup* colliderGroup, bool pushout, ::Oculus::Interaction::TouchShadowHand::GrabTouchInfo* result);
    // public System.Void GetJointsFromShadow(Oculus.Interaction.Input.HandJointId[] jointIds, UnityEngine.Pose[] outJoints, System.Boolean local)
    // Offset: 0x47BEFFC
    void GetJointsFromShadow(::ArrayW<::Oculus::Interaction::Input::HandJointId> jointIds, ::ArrayW<::UnityEngine::Pose> outJoints, bool local);
  }; // Oculus.Interaction.TouchShadowHand
  #pragma pack(pop)
  static check_size<sizeof(TouchShadowHand), 64 + sizeof(::System::Collections::Generic::List_1<int>*)> __Oculus_Interaction_TouchShadowHandSizeCheck;
  static_assert(sizeof(TouchShadowHand) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::TouchShadowHand::get_ShadowHand
// Il2CppName: get_ShadowHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Input::ShadowHand* (Oculus::Interaction::TouchShadowHand::*)()>(&Oculus::Interaction::TouchShadowHand::get_ShadowHand)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TouchShadowHand*), "get_ShadowHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TouchShadowHand::get_TotalIterations
// Il2CppName: get_TotalIterations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Oculus::Interaction::TouchShadowHand::*)()>(&Oculus::Interaction::TouchShadowHand::get_TotalIterations)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TouchShadowHand*), "get_TotalIterations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TouchShadowHand::set_TotalIterations
// Il2CppName: set_TotalIterations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TouchShadowHand::*)(int)>(&Oculus::Interaction::TouchShadowHand::set_TotalIterations)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TouchShadowHand*), "set_TotalIterations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TouchShadowHand::get_PushoutIterations
// Il2CppName: get_PushoutIterations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Oculus::Interaction::TouchShadowHand::*)()>(&Oculus::Interaction::TouchShadowHand::get_PushoutIterations)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TouchShadowHand*), "get_PushoutIterations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TouchShadowHand::set_PushoutIterations
// Il2CppName: set_PushoutIterations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TouchShadowHand::*)(int)>(&Oculus::Interaction::TouchShadowHand::set_PushoutIterations)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TouchShadowHand*), "set_PushoutIterations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TouchShadowHand::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Interaction::TouchShadowHand::SetShadowRootFromHand
// Il2CppName: SetShadowRootFromHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TouchShadowHand::*)(::Oculus::Interaction::Input::ShadowHand*)>(&Oculus::Interaction::TouchShadowHand::SetShadowRootFromHand)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "ShadowHand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TouchShadowHand*), "SetShadowRootFromHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TouchShadowHand::SetShadowRootFromHands
// Il2CppName: SetShadowRootFromHands
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TouchShadowHand::*)(::Oculus::Interaction::Input::ShadowHand*, ::Oculus::Interaction::Input::ShadowHand*, float)>(&Oculus::Interaction::TouchShadowHand::SetShadowRootFromHands)> {
  static const MethodInfo* get() {
    static auto* from = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "ShadowHand")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "ShadowHand")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TouchShadowHand*), "SetShadowRootFromHands", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{from, to, t});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TouchShadowHand::SetShadowFingerFrom
// Il2CppName: SetShadowFingerFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TouchShadowHand::*)(int, ::Oculus::Interaction::Input::ShadowHand*)>(&Oculus::Interaction::TouchShadowHand::SetShadowFingerFrom)> {
  static const MethodInfo* get() {
    static auto* fingerIdx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* from = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "ShadowHand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TouchShadowHand*), "SetShadowFingerFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fingerIdx, from});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TouchShadowHand::SetShadowFingerFromLerp
// Il2CppName: SetShadowFingerFromLerp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TouchShadowHand::*)(int, ::Oculus::Interaction::Input::ShadowHand*, ::Oculus::Interaction::Input::ShadowHand*, float)>(&Oculus::Interaction::TouchShadowHand::SetShadowFingerFromLerp)> {
  static const MethodInfo* get() {
    static auto* fingerIdx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* from = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "ShadowHand")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "ShadowHand")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TouchShadowHand*), "SetShadowFingerFromLerp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fingerIdx, from, to, t});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TouchShadowHand::SetShadowFingerFromLerps
// Il2CppName: SetShadowFingerFromLerps
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TouchShadowHand::*)(int, ::Oculus::Interaction::Input::ShadowHand*, ::Oculus::Interaction::Input::ShadowHand*, ::ArrayW<float>)>(&Oculus::Interaction::TouchShadowHand::SetShadowFingerFromLerps)> {
  static const MethodInfo* get() {
    static auto* fingerIdx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* from = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "ShadowHand")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "ShadowHand")->byval_arg;
    static auto* t = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TouchShadowHand*), "SetShadowFingerFromLerps", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fingerIdx, from, to, t});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TouchShadowHand::SetShadowFromLerpHands
// Il2CppName: SetShadowFromLerpHands
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TouchShadowHand::*)(::Oculus::Interaction::Input::ShadowHand*, ::Oculus::Interaction::Input::ShadowHand*, float)>(&Oculus::Interaction::TouchShadowHand::SetShadowFromLerpHands)> {
  static const MethodInfo* get() {
    static auto* from = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "ShadowHand")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "ShadowHand")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TouchShadowHand*), "SetShadowFromLerpHands", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{from, to, t});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TouchShadowHand::LoadSpheresForFingerFromShadow
// Il2CppName: LoadSpheresForFingerFromShadow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TouchShadowHand::*)(int, int)>(&Oculus::Interaction::TouchShadowHand::LoadSpheresForFingerFromShadow)> {
  static const MethodInfo* get() {
    static auto* fingerIdx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* jointIdx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TouchShadowHand*), "LoadSpheresForFingerFromShadow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fingerIdx, jointIdx});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TouchShadowHand::LoadSpheresForHandFromShadow
// Il2CppName: LoadSpheresForHandFromShadow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TouchShadowHand::*)()>(&Oculus::Interaction::TouchShadowHand::LoadSpheresForHandFromShadow)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TouchShadowHand*), "LoadSpheresForHandFromShadow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TouchShadowHand::CheckSphereCollision
// Il2CppName: CheckSphereCollision
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::TouchShadowHand::*)(::Oculus::Interaction::ColliderGroup*, ::UnityEngine::Vector3, ::System::Collections::Generic::List_1<int>*, ::System::Collections::Generic::List_1<int>*)>(&Oculus::Interaction::TouchShadowHand::CheckSphereCollision)> {
  static const MethodInfo* get() {
    static auto* colliderGroup = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "ColliderGroup")->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* sphereHit = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    static auto* sphereIndices = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TouchShadowHand*), "CheckSphereCollision", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colliderGroup, offset, sphereHit, sphereIndices});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TouchShadowHand::CheckFingerTouch
// Il2CppName: CheckFingerTouch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::TouchShadowHand::*)(int, int, ::Oculus::Interaction::ColliderGroup*, ::UnityEngine::Vector3, ::System::Collections::Generic::List_1<int>*)>(&Oculus::Interaction::TouchShadowHand::CheckFingerTouch)> {
  static const MethodInfo* get() {
    static auto* fingerIdx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* jointIdx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* colliderGroup = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "ColliderGroup")->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* sphereHit = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TouchShadowHand*), "CheckFingerTouch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fingerIdx, jointIdx, colliderGroup, offset, sphereHit});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TouchShadowHand::CheckTouchFingers
// Il2CppName: CheckTouchFingers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TouchShadowHand::*)(::Oculus::Interaction::Input::ShadowHand*, ::Oculus::Interaction::ColliderGroup*, ::Oculus::Interaction::TouchShadowHand::GrabTouchInfo*)>(&Oculus::Interaction::TouchShadowHand::CheckTouchFingers)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "ShadowHand")->byval_arg;
    static auto* colliderGroup = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "ColliderGroup")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "TouchShadowHand/GrabTouchInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TouchShadowHand*), "CheckTouchFingers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand, colliderGroup, result});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TouchShadowHand::GrabReleaseFinger
// Il2CppName: GrabReleaseFinger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::TouchShadowHand::*)(int, ::Oculus::Interaction::Input::ShadowHand*, ::Oculus::Interaction::Input::ShadowHand*, ::Oculus::Interaction::ColliderGroup*, ::UnityEngine::Vector3)>(&Oculus::Interaction::TouchShadowHand::GrabReleaseFinger)> {
  static const MethodInfo* get() {
    static auto* fingerIdx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* fromHand = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "ShadowHand")->byval_arg;
    static auto* toHand = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "ShadowHand")->byval_arg;
    static auto* colliderGroup = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "ColliderGroup")->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TouchShadowHand*), "GrabReleaseFinger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fingerIdx, fromHand, toHand, colliderGroup, offset});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TouchShadowHand::GrabConformFinger
// Il2CppName: GrabConformFinger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::TouchShadowHand::*)(int, ::Oculus::Interaction::Input::ShadowHand*, ::Oculus::Interaction::Input::ShadowHand*, ::Oculus::Interaction::ColliderGroup*, ::UnityEngine::Vector3)>(&Oculus::Interaction::TouchShadowHand::GrabConformFinger)> {
  static const MethodInfo* get() {
    static auto* fingerIdx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* fromHand = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "ShadowHand")->byval_arg;
    static auto* toHand = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "ShadowHand")->byval_arg;
    static auto* colliderGroup = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "ColliderGroup")->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TouchShadowHand*), "GrabConformFinger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fingerIdx, fromHand, toHand, colliderGroup, offset});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TouchShadowHand::GrabConformFingers
// Il2CppName: GrabConformFingers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TouchShadowHand::*)(::Oculus::Interaction::Input::ShadowHand*, ::Oculus::Interaction::Input::ShadowHand*, ::Oculus::Interaction::ColliderGroup*, ::UnityEngine::Vector3)>(&Oculus::Interaction::TouchShadowHand::GrabConformFingers)> {
  static const MethodInfo* get() {
    static auto* fromHand = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "ShadowHand")->byval_arg;
    static auto* toHand = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "ShadowHand")->byval_arg;
    static auto* colliderGroup = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "ColliderGroup")->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TouchShadowHand*), "GrabConformFingers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fromHand, toHand, colliderGroup, offset});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TouchShadowHand::PushoutFinger
// Il2CppName: PushoutFinger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::TouchShadowHand::*)(int, ::Oculus::Interaction::Input::ShadowHand*, ::Oculus::Interaction::Input::ShadowHand*, ::Oculus::Interaction::ColliderGroup*, ::UnityEngine::Vector3)>(&Oculus::Interaction::TouchShadowHand::PushoutFinger)> {
  static const MethodInfo* get() {
    static auto* fingerIdx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* from = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "ShadowHand")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "ShadowHand")->byval_arg;
    static auto* colliderGroup = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "ColliderGroup")->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TouchShadowHand*), "PushoutFinger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fingerIdx, from, to, colliderGroup, offset});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TouchShadowHand::GrabTouchStep
// Il2CppName: GrabTouchStep
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TouchShadowHand::*)(::Oculus::Interaction::Input::ShadowHand*, ::Oculus::Interaction::Input::ShadowHand*, ::Oculus::Interaction::ColliderGroup*, int, ::UnityEngine::Vector3, bool, ::Oculus::Interaction::TouchShadowHand::GrabTouchInfo*)>(&Oculus::Interaction::TouchShadowHand::GrabTouchStep)> {
  static const MethodInfo* get() {
    static auto* from = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "ShadowHand")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "ShadowHand")->byval_arg;
    static auto* colliderGroup = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "ColliderGroup")->byval_arg;
    static auto* iteration = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* colliderOffset = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* pushout = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "TouchShadowHand/GrabTouchInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TouchShadowHand*), "GrabTouchStep", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{from, to, colliderGroup, iteration, colliderOffset, pushout, result});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TouchShadowHand::GrabTouch
// Il2CppName: GrabTouch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TouchShadowHand::*)(::Oculus::Interaction::Input::ShadowHand*, ::Oculus::Interaction::Input::ShadowHand*, ::Oculus::Interaction::ColliderGroup*, bool, ::Oculus::Interaction::TouchShadowHand::GrabTouchInfo*)>(&Oculus::Interaction::TouchShadowHand::GrabTouch)> {
  static const MethodInfo* get() {
    static auto* fromHand = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "ShadowHand")->byval_arg;
    static auto* toHand = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "ShadowHand")->byval_arg;
    static auto* colliderGroup = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "ColliderGroup")->byval_arg;
    static auto* pushout = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "TouchShadowHand/GrabTouchInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TouchShadowHand*), "GrabTouch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fromHand, toHand, colliderGroup, pushout, result});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TouchShadowHand::GetJointsFromShadow
// Il2CppName: GetJointsFromShadow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TouchShadowHand::*)(::ArrayW<::Oculus::Interaction::Input::HandJointId>, ::ArrayW<::UnityEngine::Pose>, bool)>(&Oculus::Interaction::TouchShadowHand::GetJointsFromShadow)> {
  static const MethodInfo* get() {
    static auto* jointIds = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "HandJointId"), 1)->byval_arg;
    static auto* outJoints = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Pose"), 1)->byval_arg;
    static auto* local = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TouchShadowHand*), "GetJointsFromShadow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{jointIds, outJoints, local});
  }
};
