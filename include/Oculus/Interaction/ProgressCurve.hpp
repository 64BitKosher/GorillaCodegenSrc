// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction
namespace Oculus::Interaction {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`1<TResult>
  template<typename TResult>
  class Func_1;
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: ProgressCurve
  class ProgressCurve;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::ProgressCurve);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::ProgressCurve*, "Oculus.Interaction", "ProgressCurve");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x2C
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.ProgressCurve
  // [TokenAttribute] Offset: FFFFFFFF
  class ProgressCurve : public ::Il2CppObject {
    public:
    // Nested type: ::Oculus::Interaction::ProgressCurve::$$c
    class $$c;
    public:
    // private UnityEngine.AnimationCurve _animationCurve
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::AnimationCurve* animationCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // private System.Single _animationLength
    // Size: 0x4
    // Offset: 0x18
    float animationLength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: animationLength and: timeProvider
    char __padding1[0x4] = {};
    // private System.Func`1<System.Single> _timeProvider
    // Size: 0x8
    // Offset: 0x20
    ::System::Func_1<float>* timeProvider;
    // Field size check
    static_assert(sizeof(::System::Func_1<float>*) == 0x8);
    // private System.Single _animationStartTime
    // Size: 0x4
    // Offset: 0x28
    float animationStartTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: private UnityEngine.AnimationCurve _animationCurve
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn__animationCurve();
    // Get instance field reference: private System.Single _animationLength
    [[deprecated("Use field access instead!")]] float& dyn__animationLength();
    // Get instance field reference: private System.Func`1<System.Single> _timeProvider
    [[deprecated("Use field access instead!")]] ::System::Func_1<float>*& dyn__timeProvider();
    // Get instance field reference: private System.Single _animationStartTime
    [[deprecated("Use field access instead!")]] float& dyn__animationStartTime();
    // public UnityEngine.AnimationCurve get_AnimationCurve()
    // Offset: 0x47DC924
    ::UnityEngine::AnimationCurve* get_AnimationCurve();
    // public System.Void set_AnimationCurve(UnityEngine.AnimationCurve value)
    // Offset: 0x47DC92C
    void set_AnimationCurve(::UnityEngine::AnimationCurve* value);
    // public System.Single get_AnimationLength()
    // Offset: 0x47DC934
    float get_AnimationLength();
    // public System.Void set_AnimationLength(System.Single value)
    // Offset: 0x47DC93C
    void set_AnimationLength(float value);
    // public System.Func`1<System.Single> get_TimeProvider()
    // Offset: 0x47DC944
    ::System::Func_1<float>* get_TimeProvider();
    // public System.Void set_TimeProvider(System.Func`1<System.Single> value)
    // Offset: 0x47DC94C
    void set_TimeProvider(::System::Func_1<float>* value);
    // public System.Void .ctor()
    // Offset: 0x47DC954
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ProgressCurve* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::ProgressCurve::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ProgressCurve*, creationType>()));
    }
    // public System.Void .ctor(UnityEngine.AnimationCurve animationCurve, System.Single animationLength)
    // Offset: 0x47DCA80
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ProgressCurve* New_ctor(::UnityEngine::AnimationCurve* animationCurve, float animationLength) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::ProgressCurve::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ProgressCurve*, creationType>(animationCurve, animationLength)));
    }
    // public System.Void .ctor(Oculus.Interaction.ProgressCurve other)
    // Offset: 0x47DCBA0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ProgressCurve* New_ctor(::Oculus::Interaction::ProgressCurve* other) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::ProgressCurve::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ProgressCurve*, creationType>(other)));
    }
    // public System.Void Copy(Oculus.Interaction.ProgressCurve other)
    // Offset: 0x47DCCA8
    void Copy(::Oculus::Interaction::ProgressCurve* other);
    // public System.Void Start()
    // Offset: 0x47DCCF4
    void Start();
    // public System.Single Progress()
    // Offset: 0x47DCD24
    float Progress();
    // public System.Single ProgressIn(System.Single time)
    // Offset: 0x47DCDD0
    float ProgressIn(float time);
    // public System.Single ProgressTime()
    // Offset: 0x47DCD84
    float ProgressTime();
    // public System.Void End()
    // Offset: 0x47DCE40
    void End();
  }; // Oculus.Interaction.ProgressCurve
  #pragma pack(pop)
  static check_size<sizeof(ProgressCurve), 40 + sizeof(float)> __Oculus_Interaction_ProgressCurveSizeCheck;
  static_assert(sizeof(ProgressCurve) == 0x2C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::ProgressCurve::get_AnimationCurve
// Il2CppName: get_AnimationCurve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AnimationCurve* (Oculus::Interaction::ProgressCurve::*)()>(&Oculus::Interaction::ProgressCurve::get_AnimationCurve)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ProgressCurve*), "get_AnimationCurve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ProgressCurve::set_AnimationCurve
// Il2CppName: set_AnimationCurve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ProgressCurve::*)(::UnityEngine::AnimationCurve*)>(&Oculus::Interaction::ProgressCurve::set_AnimationCurve)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "AnimationCurve")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ProgressCurve*), "set_AnimationCurve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ProgressCurve::get_AnimationLength
// Il2CppName: get_AnimationLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::ProgressCurve::*)()>(&Oculus::Interaction::ProgressCurve::get_AnimationLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ProgressCurve*), "get_AnimationLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ProgressCurve::set_AnimationLength
// Il2CppName: set_AnimationLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ProgressCurve::*)(float)>(&Oculus::Interaction::ProgressCurve::set_AnimationLength)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ProgressCurve*), "set_AnimationLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ProgressCurve::get_TimeProvider
// Il2CppName: get_TimeProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Func_1<float>* (Oculus::Interaction::ProgressCurve::*)()>(&Oculus::Interaction::ProgressCurve::get_TimeProvider)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ProgressCurve*), "get_TimeProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ProgressCurve::set_TimeProvider
// Il2CppName: set_TimeProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ProgressCurve::*)(::System::Func_1<float>*)>(&Oculus::Interaction::ProgressCurve::set_TimeProvider)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Func`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ProgressCurve*), "set_TimeProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ProgressCurve::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Interaction::ProgressCurve::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Interaction::ProgressCurve::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Interaction::ProgressCurve::Copy
// Il2CppName: Copy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ProgressCurve::*)(::Oculus::Interaction::ProgressCurve*)>(&Oculus::Interaction::ProgressCurve::Copy)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "ProgressCurve")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ProgressCurve*), "Copy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ProgressCurve::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ProgressCurve::*)()>(&Oculus::Interaction::ProgressCurve::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ProgressCurve*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ProgressCurve::Progress
// Il2CppName: Progress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::ProgressCurve::*)()>(&Oculus::Interaction::ProgressCurve::Progress)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ProgressCurve*), "Progress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ProgressCurve::ProgressIn
// Il2CppName: ProgressIn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::ProgressCurve::*)(float)>(&Oculus::Interaction::ProgressCurve::ProgressIn)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ProgressCurve*), "ProgressIn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ProgressCurve::ProgressTime
// Il2CppName: ProgressTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::ProgressCurve::*)()>(&Oculus::Interaction::ProgressCurve::ProgressTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ProgressCurve*), "ProgressTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ProgressCurve::End
// Il2CppName: End
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ProgressCurve::*)()>(&Oculus::Interaction::ProgressCurve::End)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ProgressCurve*), "End", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
