// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction::Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: Hand
  class Hand;
}
// Forward declaring namespace: Oculus::Interaction::PoseDetection
namespace Oculus::Interaction::PoseDetection {
  // Forward declaring type: TransformFeatureStateProvider
  class TransformFeatureStateProvider;
  // Forward declaring type: TransformRecognizerActiveState
  class TransformRecognizerActiveState;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Renderer
  class Renderer;
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Material
  class Material;
}
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TextMeshPro
  class TextMeshPro;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.PoseDetection.Debug
namespace Oculus::Interaction::PoseDetection::Debug {
  // Forward declaring type: TransformRecognizerDebugVisual
  class TransformRecognizerDebugVisual;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::PoseDetection::Debug::TransformRecognizerDebugVisual);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::PoseDetection::Debug::TransformRecognizerDebugVisual*, "Oculus.Interaction.PoseDetection.Debug", "TransformRecognizerDebugVisual");
// Type namespace: Oculus.Interaction.PoseDetection.Debug
namespace Oculus::Interaction::PoseDetection::Debug {
  // Size: 0x99
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.PoseDetection.Debug.TransformRecognizerDebugVisual
  // [TokenAttribute] Offset: FFFFFFFF
  class TransformRecognizerDebugVisual : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private Oculus.Interaction.Input.Hand _hand
    // Size: 0x8
    // Offset: 0x20
    ::Oculus::Interaction::Input::Hand* hand;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::Hand*) == 0x8);
    // private Oculus.Interaction.PoseDetection.TransformFeatureStateProvider _transformFeatureStateProvider
    // Size: 0x8
    // Offset: 0x28
    ::Oculus::Interaction::PoseDetection::TransformFeatureStateProvider* transformFeatureStateProvider;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::PoseDetection::TransformFeatureStateProvider*) == 0x8);
    // private Oculus.Interaction.PoseDetection.TransformRecognizerActiveState _transformRecognizerActiveState
    // Size: 0x8
    // Offset: 0x30
    ::Oculus::Interaction::PoseDetection::TransformRecognizerActiveState* transformRecognizerActiveState;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::PoseDetection::TransformRecognizerActiveState*) == 0x8);
    // private UnityEngine.Renderer _target
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Renderer* target;
    // Field size check
    static_assert(sizeof(::UnityEngine::Renderer*) == 0x8);
    // private UnityEngine.Color _normalColor
    // Size: 0x10
    // Offset: 0x40
    ::UnityEngine::Color normalColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color _activeColor
    // Size: 0x10
    // Offset: 0x50
    ::UnityEngine::Color activeColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.GameObject _transformFeatureDebugVisualPrefab
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::GameObject* transformFeatureDebugVisualPrefab;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.Transform _debugVisualParent
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::Transform* debugVisualParent;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Vector3 _featureSpacingVec
    // Size: 0xC
    // Offset: 0x70
    ::UnityEngine::Vector3 featureSpacingVec;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 _featureDebugLocalScale
    // Size: 0xC
    // Offset: 0x7C
    ::UnityEngine::Vector3 featureDebugLocalScale;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private TMPro.TextMeshPro _targetText
    // Size: 0x8
    // Offset: 0x88
    ::TMPro::TextMeshPro* targetText;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshPro*) == 0x8);
    // private UnityEngine.Material _material
    // Size: 0x8
    // Offset: 0x90
    ::UnityEngine::Material* material;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private System.Boolean _lastActiveValue
    // Size: 0x1
    // Offset: 0x98
    bool lastActiveValue;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private Oculus.Interaction.Input.Hand _hand
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::Hand*& dyn__hand();
    // Get instance field reference: private Oculus.Interaction.PoseDetection.TransformFeatureStateProvider _transformFeatureStateProvider
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::PoseDetection::TransformFeatureStateProvider*& dyn__transformFeatureStateProvider();
    // Get instance field reference: private Oculus.Interaction.PoseDetection.TransformRecognizerActiveState _transformRecognizerActiveState
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::PoseDetection::TransformRecognizerActiveState*& dyn__transformRecognizerActiveState();
    // Get instance field reference: private UnityEngine.Renderer _target
    [[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& dyn__target();
    // Get instance field reference: private UnityEngine.Color _normalColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__normalColor();
    // Get instance field reference: private UnityEngine.Color _activeColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__activeColor();
    // Get instance field reference: private UnityEngine.GameObject _transformFeatureDebugVisualPrefab
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn__transformFeatureDebugVisualPrefab();
    // Get instance field reference: private UnityEngine.Transform _debugVisualParent
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__debugVisualParent();
    // Get instance field reference: private UnityEngine.Vector3 _featureSpacingVec
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__featureSpacingVec();
    // Get instance field reference: private UnityEngine.Vector3 _featureDebugLocalScale
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__featureDebugLocalScale();
    // Get instance field reference: private TMPro.TextMeshPro _targetText
    [[deprecated("Use field access instead!")]] ::TMPro::TextMeshPro*& dyn__targetText();
    // Get instance field reference: private UnityEngine.Material _material
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn__material();
    // Get instance field reference: private System.Boolean _lastActiveValue
    [[deprecated("Use field access instead!")]] bool& dyn__lastActiveValue();
    // protected System.Void Awake()
    // Offset: 0x47FE350
    void Awake();
    // protected System.Void Start()
    // Offset: 0x47FE460
    void Start();
    // private System.Void OnDestroy()
    // Offset: 0x47FEB78
    void OnDestroy();
    // private System.Boolean AllActive()
    // Offset: 0x47FEBD4
    bool AllActive();
    // protected System.Void Update()
    // Offset: 0x47FEBEC
    void Update();
    // public System.Void .ctor()
    // Offset: 0x47FEC70
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TransformRecognizerDebugVisual* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::PoseDetection::Debug::TransformRecognizerDebugVisual::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TransformRecognizerDebugVisual*, creationType>()));
    }
  }; // Oculus.Interaction.PoseDetection.Debug.TransformRecognizerDebugVisual
  #pragma pack(pop)
  static check_size<sizeof(TransformRecognizerDebugVisual), 152 + sizeof(bool)> __Oculus_Interaction_PoseDetection_Debug_TransformRecognizerDebugVisualSizeCheck;
  static_assert(sizeof(TransformRecognizerDebugVisual) == 0x99);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::Debug::TransformRecognizerDebugVisual::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::Debug::TransformRecognizerDebugVisual::*)()>(&Oculus::Interaction::PoseDetection::Debug::TransformRecognizerDebugVisual::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::Debug::TransformRecognizerDebugVisual*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::Debug::TransformRecognizerDebugVisual::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::Debug::TransformRecognizerDebugVisual::*)()>(&Oculus::Interaction::PoseDetection::Debug::TransformRecognizerDebugVisual::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::Debug::TransformRecognizerDebugVisual*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::Debug::TransformRecognizerDebugVisual::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::Debug::TransformRecognizerDebugVisual::*)()>(&Oculus::Interaction::PoseDetection::Debug::TransformRecognizerDebugVisual::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::Debug::TransformRecognizerDebugVisual*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::Debug::TransformRecognizerDebugVisual::AllActive
// Il2CppName: AllActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::PoseDetection::Debug::TransformRecognizerDebugVisual::*)()>(&Oculus::Interaction::PoseDetection::Debug::TransformRecognizerDebugVisual::AllActive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::Debug::TransformRecognizerDebugVisual*), "AllActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::Debug::TransformRecognizerDebugVisual::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::Debug::TransformRecognizerDebugVisual::*)()>(&Oculus::Interaction::PoseDetection::Debug::TransformRecognizerDebugVisual::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::Debug::TransformRecognizerDebugVisual*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::Debug::TransformRecognizerDebugVisual::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
