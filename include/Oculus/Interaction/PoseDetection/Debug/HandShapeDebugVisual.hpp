// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: System.ValueTuple`2
#include "System/ValueTuple_2.hpp"
// Including type: Oculus.Interaction.Input.HandFinger
#include "Oculus/Interaction/Input/HandFinger.hpp"
// Including type: Oculus.Interaction.PoseDetection.ShapeRecognizer
#include "Oculus/Interaction/PoseDetection/ShapeRecognizer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction::PoseDetection::Debug
namespace Oculus::Interaction::PoseDetection::Debug {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Object because it is already included!
  // Forward declaring type: Renderer
  class Renderer;
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Material
  class Material;
}
// Forward declaring namespace: Oculus::Interaction::PoseDetection
namespace Oculus::Interaction::PoseDetection {
  // Forward declaring type: IFingerFeatureStateProvider
  class IFingerFeatureStateProvider;
  // Forward declaring type: ShapeRecognizerActiveState
  class ShapeRecognizerActiveState;
}
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TextMeshPro
  class TextMeshPro;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
  // Forward declaring type: IReadOnlyList`1<T>
  template<typename T>
  class IReadOnlyList_1;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.PoseDetection.Debug
namespace Oculus::Interaction::PoseDetection::Debug {
  // Forward declaring type: HandShapeDebugVisual
  class HandShapeDebugVisual;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::PoseDetection::Debug::HandShapeDebugVisual);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::PoseDetection::Debug::HandShapeDebugVisual*, "Oculus.Interaction.PoseDetection.Debug", "HandShapeDebugVisual");
// Type namespace: Oculus.Interaction.PoseDetection.Debug
namespace Oculus::Interaction::PoseDetection::Debug {
  // Size: 0xA9
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.PoseDetection.Debug.HandShapeDebugVisual
  // [TokenAttribute] Offset: FFFFFFFF
  class HandShapeDebugVisual : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::Oculus::Interaction::PoseDetection::Debug::HandShapeDebugVisual::$$c
    class $$c;
    // Nested type: ::Oculus::Interaction::PoseDetection::Debug::HandShapeDebugVisual::$AllFeatureStates$d__16
    class $AllFeatureStates$d__16;
    public:
    // private UnityEngine.Object _fingerFeatureStateProvider
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Object* fingerFeatureStateProvider;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.PoseDetection.IFingerFeatureStateProvider FingerFeatureStateProvider
    // Size: 0x8
    // Offset: 0x28
    ::Oculus::Interaction::PoseDetection::IFingerFeatureStateProvider* FingerFeatureStateProvider;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::PoseDetection::IFingerFeatureStateProvider*) == 0x8);
    // private Oculus.Interaction.PoseDetection.ShapeRecognizerActiveState _shapeRecognizerActiveState
    // Size: 0x8
    // Offset: 0x30
    ::Oculus::Interaction::PoseDetection::ShapeRecognizerActiveState* shapeRecognizerActiveState;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::PoseDetection::ShapeRecognizerActiveState*) == 0x8);
    // private UnityEngine.Renderer _target
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Renderer* target;
    // Field size check
    static_assert(sizeof(::UnityEngine::Renderer*) == 0x8);
    // private UnityEngine.Color _normalColor
    // Size: 0x10
    // Offset: 0x40
    ::UnityEngine::Color normalColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color _activeColor
    // Size: 0x10
    // Offset: 0x50
    ::UnityEngine::Color activeColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.GameObject _fingerFeatureDebugVisualPrefab
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::GameObject* fingerFeatureDebugVisualPrefab;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.Transform _fingerFeatureParent
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::Transform* fingerFeatureParent;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Vector3 _fingerSpacingVec
    // Size: 0xC
    // Offset: 0x70
    ::UnityEngine::Vector3 fingerSpacingVec;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 _fingerFeatureSpacingVec
    // Size: 0xC
    // Offset: 0x7C
    ::UnityEngine::Vector3 fingerFeatureSpacingVec;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 _fingerFeatureDebugLocalScale
    // Size: 0xC
    // Offset: 0x88
    ::UnityEngine::Vector3 fingerFeatureDebugLocalScale;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // Padding between fields: fingerFeatureDebugLocalScale and: targetText
    char __padding10[0x4] = {};
    // private TMPro.TextMeshPro _targetText
    // Size: 0x8
    // Offset: 0x98
    ::TMPro::TextMeshPro* targetText;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshPro*) == 0x8);
    // private UnityEngine.Material _material
    // Size: 0x8
    // Offset: 0xA0
    ::UnityEngine::Material* material;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private System.Boolean _lastActiveValue
    // Size: 0x1
    // Offset: 0xA8
    bool lastActiveValue;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private UnityEngine.Object _fingerFeatureStateProvider
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__fingerFeatureStateProvider();
    // Get instance field reference: private Oculus.Interaction.PoseDetection.IFingerFeatureStateProvider FingerFeatureStateProvider
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::PoseDetection::IFingerFeatureStateProvider*& dyn_FingerFeatureStateProvider();
    // Get instance field reference: private Oculus.Interaction.PoseDetection.ShapeRecognizerActiveState _shapeRecognizerActiveState
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::PoseDetection::ShapeRecognizerActiveState*& dyn__shapeRecognizerActiveState();
    // Get instance field reference: private UnityEngine.Renderer _target
    [[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& dyn__target();
    // Get instance field reference: private UnityEngine.Color _normalColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__normalColor();
    // Get instance field reference: private UnityEngine.Color _activeColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__activeColor();
    // Get instance field reference: private UnityEngine.GameObject _fingerFeatureDebugVisualPrefab
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn__fingerFeatureDebugVisualPrefab();
    // Get instance field reference: private UnityEngine.Transform _fingerFeatureParent
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__fingerFeatureParent();
    // Get instance field reference: private UnityEngine.Vector3 _fingerSpacingVec
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__fingerSpacingVec();
    // Get instance field reference: private UnityEngine.Vector3 _fingerFeatureSpacingVec
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__fingerFeatureSpacingVec();
    // Get instance field reference: private UnityEngine.Vector3 _fingerFeatureDebugLocalScale
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__fingerFeatureDebugLocalScale();
    // Get instance field reference: private TMPro.TextMeshPro _targetText
    [[deprecated("Use field access instead!")]] ::TMPro::TextMeshPro*& dyn__targetText();
    // Get instance field reference: private UnityEngine.Material _material
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn__material();
    // Get instance field reference: private System.Boolean _lastActiveValue
    [[deprecated("Use field access instead!")]] bool& dyn__lastActiveValue();
    // protected System.Void Awake()
    // Offset: 0x47F9224
    void Awake();
    // protected System.Void Start()
    // Offset: 0x47F9378
    void Start();
    // private System.Collections.Generic.IEnumerable`1<System.ValueTuple`2<Oculus.Interaction.Input.HandFinger,System.Collections.Generic.IReadOnlyList`1<Oculus.Interaction.PoseDetection.ShapeRecognizer/FingerFeatureConfig>>> AllFeatureStates()
    // Offset: 0x47FA028
    ::System::Collections::Generic::IEnumerable_1<::System::ValueTuple_2<::Oculus::Interaction::Input::HandFinger, ::System::Collections::Generic::IReadOnlyList_1<::Oculus::Interaction::PoseDetection::ShapeRecognizer::FingerFeatureConfig*>*>>* AllFeatureStates();
    // protected System.Void OnDestroy()
    // Offset: 0x47FA0D8
    void OnDestroy();
    // protected System.Void Update()
    // Offset: 0x47FA134
    void Update();
    // public System.Void .ctor()
    // Offset: 0x47FA1B8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HandShapeDebugVisual* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::PoseDetection::Debug::HandShapeDebugVisual::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HandShapeDebugVisual*, creationType>()));
    }
  }; // Oculus.Interaction.PoseDetection.Debug.HandShapeDebugVisual
  #pragma pack(pop)
  static check_size<sizeof(HandShapeDebugVisual), 168 + sizeof(bool)> __Oculus_Interaction_PoseDetection_Debug_HandShapeDebugVisualSizeCheck;
  static_assert(sizeof(HandShapeDebugVisual) == 0xA9);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::Debug::HandShapeDebugVisual::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::Debug::HandShapeDebugVisual::*)()>(&Oculus::Interaction::PoseDetection::Debug::HandShapeDebugVisual::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::Debug::HandShapeDebugVisual*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::Debug::HandShapeDebugVisual::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::Debug::HandShapeDebugVisual::*)()>(&Oculus::Interaction::PoseDetection::Debug::HandShapeDebugVisual::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::Debug::HandShapeDebugVisual*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::Debug::HandShapeDebugVisual::AllFeatureStates
// Il2CppName: AllFeatureStates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerable_1<::System::ValueTuple_2<::Oculus::Interaction::Input::HandFinger, ::System::Collections::Generic::IReadOnlyList_1<::Oculus::Interaction::PoseDetection::ShapeRecognizer::FingerFeatureConfig*>*>>* (Oculus::Interaction::PoseDetection::Debug::HandShapeDebugVisual::*)()>(&Oculus::Interaction::PoseDetection::Debug::HandShapeDebugVisual::AllFeatureStates)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::Debug::HandShapeDebugVisual*), "AllFeatureStates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::Debug::HandShapeDebugVisual::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::Debug::HandShapeDebugVisual::*)()>(&Oculus::Interaction::PoseDetection::Debug::HandShapeDebugVisual::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::Debug::HandShapeDebugVisual*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::Debug::HandShapeDebugVisual::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::Debug::HandShapeDebugVisual::*)()>(&Oculus::Interaction::PoseDetection::Debug::HandShapeDebugVisual::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::Debug::HandShapeDebugVisual*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::Debug::HandShapeDebugVisual::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
