// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: Oculus.Interaction.Input.HandJointId
#include "Oculus/Interaction/Input/HandJointId.hpp"
// Including type: Oculus.Interaction.Input.HandFinger
#include "Oculus/Interaction/Input/HandFinger.hpp"
// Including type: Oculus.Interaction.PoseDetection.ShapeRecognizer
#include "Oculus/Interaction/PoseDetection/ShapeRecognizer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction::PoseDetection
namespace Oculus::Interaction::PoseDetection {
  // Forward declaring type: FingerFeatureStateProvider
  class FingerFeatureStateProvider;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: LineRenderer
  class LineRenderer;
}
// Forward declaring namespace: Oculus::Interaction::Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: IHand
  class IHand;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IReadOnlyList`1<T>
  template<typename T>
  class IReadOnlyList_1;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.PoseDetection.Debug
namespace Oculus::Interaction::PoseDetection::Debug {
  // Forward declaring type: FingerFeatureSkeletalDebugVisual
  class FingerFeatureSkeletalDebugVisual;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::PoseDetection::Debug::FingerFeatureSkeletalDebugVisual);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::PoseDetection::Debug::FingerFeatureSkeletalDebugVisual*, "Oculus.Interaction.PoseDetection.Debug", "FingerFeatureSkeletalDebugVisual");
// Type namespace: Oculus.Interaction.PoseDetection.Debug
namespace Oculus::Interaction::PoseDetection::Debug {
  // Size: 0x82
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.PoseDetection.Debug.FingerFeatureSkeletalDebugVisual
  // [TokenAttribute] Offset: FFFFFFFF
  class FingerFeatureSkeletalDebugVisual : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private Oculus.Interaction.PoseDetection.FingerFeatureStateProvider _fingerFeatureStateProvider
    // Size: 0x8
    // Offset: 0x20
    ::Oculus::Interaction::PoseDetection::FingerFeatureStateProvider* fingerFeatureStateProvider;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::PoseDetection::FingerFeatureStateProvider*) == 0x8);
    // private UnityEngine.LineRenderer _lineRenderer
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::LineRenderer* lineRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::LineRenderer*) == 0x8);
    // private UnityEngine.Color _normalColor
    // Size: 0x10
    // Offset: 0x30
    ::UnityEngine::Color normalColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color _activeColor
    // Size: 0x10
    // Offset: 0x40
    ::UnityEngine::Color activeColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private System.Single _lineWidth
    // Size: 0x4
    // Offset: 0x50
    float lineWidth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: lineWidth and: hand
    char __padding4[0x4] = {};
    // private Oculus.Interaction.Input.IHand _hand
    // Size: 0x8
    // Offset: 0x58
    ::Oculus::Interaction::Input::IHand* hand;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::IHand*) == 0x8);
    // private System.Boolean _lastFeatureActiveValue
    // Size: 0x1
    // Offset: 0x60
    bool lastFeatureActiveValue;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: lastFeatureActiveValue and: jointsCovered
    char __padding6[0x7] = {};
    // private System.Collections.Generic.IReadOnlyList`1<Oculus.Interaction.Input.HandJointId> _jointsCovered
    // Size: 0x8
    // Offset: 0x68
    ::System::Collections::Generic::IReadOnlyList_1<::Oculus::Interaction::Input::HandJointId>* jointsCovered;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::IReadOnlyList_1<::Oculus::Interaction::Input::HandJointId>*) == 0x8);
    // private Oculus.Interaction.Input.HandFinger _finger
    // Size: 0x4
    // Offset: 0x70
    ::Oculus::Interaction::Input::HandFinger finger;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::HandFinger) == 0x4);
    // Padding between fields: finger and: fingerFeatureConfig
    char __padding8[0x4] = {};
    // private Oculus.Interaction.PoseDetection.ShapeRecognizer/FingerFeatureConfig _fingerFeatureConfig
    // Size: 0x8
    // Offset: 0x78
    ::Oculus::Interaction::PoseDetection::ShapeRecognizer::FingerFeatureConfig* fingerFeatureConfig;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::PoseDetection::ShapeRecognizer::FingerFeatureConfig*) == 0x8);
    // private System.Boolean _initializedPositions
    // Size: 0x1
    // Offset: 0x80
    bool initializedPositions;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _initialized
    // Size: 0x1
    // Offset: 0x81
    bool initialized;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private Oculus.Interaction.PoseDetection.FingerFeatureStateProvider _fingerFeatureStateProvider
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::PoseDetection::FingerFeatureStateProvider*& dyn__fingerFeatureStateProvider();
    // Get instance field reference: private UnityEngine.LineRenderer _lineRenderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::LineRenderer*& dyn__lineRenderer();
    // Get instance field reference: private UnityEngine.Color _normalColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__normalColor();
    // Get instance field reference: private UnityEngine.Color _activeColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__activeColor();
    // Get instance field reference: private System.Single _lineWidth
    [[deprecated("Use field access instead!")]] float& dyn__lineWidth();
    // Get instance field reference: private Oculus.Interaction.Input.IHand _hand
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::IHand*& dyn__hand();
    // Get instance field reference: private System.Boolean _lastFeatureActiveValue
    [[deprecated("Use field access instead!")]] bool& dyn__lastFeatureActiveValue();
    // Get instance field reference: private System.Collections.Generic.IReadOnlyList`1<Oculus.Interaction.Input.HandJointId> _jointsCovered
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::IReadOnlyList_1<::Oculus::Interaction::Input::HandJointId>*& dyn__jointsCovered();
    // Get instance field reference: private Oculus.Interaction.Input.HandFinger _finger
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::HandFinger& dyn__finger();
    // Get instance field reference: private Oculus.Interaction.PoseDetection.ShapeRecognizer/FingerFeatureConfig _fingerFeatureConfig
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::PoseDetection::ShapeRecognizer::FingerFeatureConfig*& dyn__fingerFeatureConfig();
    // Get instance field reference: private System.Boolean _initializedPositions
    [[deprecated("Use field access instead!")]] bool& dyn__initializedPositions();
    // Get instance field reference: private System.Boolean _initialized
    [[deprecated("Use field access instead!")]] bool& dyn__initialized();
    // protected System.Void Awake()
    // Offset: 0x47F8BC4
    void Awake();
    // private System.Void UpdateFeatureActiveValueAndVisual(System.Boolean newValue)
    // Offset: 0x47F8BCC
    void UpdateFeatureActiveValueAndVisual(bool newValue);
    // public System.Void Initialize(Oculus.Interaction.Input.IHand hand, Oculus.Interaction.Input.HandFinger finger, Oculus.Interaction.PoseDetection.ShapeRecognizer/FingerFeatureConfig fingerFeatureConfig)
    // Offset: 0x47F8C7C
    void Initialize(::Oculus::Interaction::Input::IHand* hand, ::Oculus::Interaction::Input::HandFinger finger, ::Oculus::Interaction::PoseDetection::ShapeRecognizer::FingerFeatureConfig* fingerFeatureConfig);
    // protected System.Void Update()
    // Offset: 0x47F8D38
    void Update();
    // private System.Void ToggleLineRendererEnableState(System.Boolean enableState)
    // Offset: 0x47F8E18
    void ToggleLineRendererEnableState(bool enableState);
    // private System.Void UpdateDebugSkeletonLineRendererJoints()
    // Offset: 0x47F8E74
    void UpdateDebugSkeletonLineRendererJoints();
    // private System.Void UpdateFeatureActiveValue()
    // Offset: 0x47F9164
    void UpdateFeatureActiveValue();
    // public System.Void .ctor()
    // Offset: 0x47F91FC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FingerFeatureSkeletalDebugVisual* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::PoseDetection::Debug::FingerFeatureSkeletalDebugVisual::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FingerFeatureSkeletalDebugVisual*, creationType>()));
    }
  }; // Oculus.Interaction.PoseDetection.Debug.FingerFeatureSkeletalDebugVisual
  #pragma pack(pop)
  static check_size<sizeof(FingerFeatureSkeletalDebugVisual), 129 + sizeof(bool)> __Oculus_Interaction_PoseDetection_Debug_FingerFeatureSkeletalDebugVisualSizeCheck;
  static_assert(sizeof(FingerFeatureSkeletalDebugVisual) == 0x82);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::Debug::FingerFeatureSkeletalDebugVisual::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::Debug::FingerFeatureSkeletalDebugVisual::*)()>(&Oculus::Interaction::PoseDetection::Debug::FingerFeatureSkeletalDebugVisual::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::Debug::FingerFeatureSkeletalDebugVisual*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::Debug::FingerFeatureSkeletalDebugVisual::UpdateFeatureActiveValueAndVisual
// Il2CppName: UpdateFeatureActiveValueAndVisual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::Debug::FingerFeatureSkeletalDebugVisual::*)(bool)>(&Oculus::Interaction::PoseDetection::Debug::FingerFeatureSkeletalDebugVisual::UpdateFeatureActiveValueAndVisual)> {
  static const MethodInfo* get() {
    static auto* newValue = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::Debug::FingerFeatureSkeletalDebugVisual*), "UpdateFeatureActiveValueAndVisual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newValue});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::Debug::FingerFeatureSkeletalDebugVisual::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::Debug::FingerFeatureSkeletalDebugVisual::*)(::Oculus::Interaction::Input::IHand*, ::Oculus::Interaction::Input::HandFinger, ::Oculus::Interaction::PoseDetection::ShapeRecognizer::FingerFeatureConfig*)>(&Oculus::Interaction::PoseDetection::Debug::FingerFeatureSkeletalDebugVisual::Initialize)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHand")->byval_arg;
    static auto* finger = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "HandFinger")->byval_arg;
    static auto* fingerFeatureConfig = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.PoseDetection", "ShapeRecognizer/FingerFeatureConfig")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::Debug::FingerFeatureSkeletalDebugVisual*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand, finger, fingerFeatureConfig});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::Debug::FingerFeatureSkeletalDebugVisual::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::Debug::FingerFeatureSkeletalDebugVisual::*)()>(&Oculus::Interaction::PoseDetection::Debug::FingerFeatureSkeletalDebugVisual::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::Debug::FingerFeatureSkeletalDebugVisual*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::Debug::FingerFeatureSkeletalDebugVisual::ToggleLineRendererEnableState
// Il2CppName: ToggleLineRendererEnableState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::Debug::FingerFeatureSkeletalDebugVisual::*)(bool)>(&Oculus::Interaction::PoseDetection::Debug::FingerFeatureSkeletalDebugVisual::ToggleLineRendererEnableState)> {
  static const MethodInfo* get() {
    static auto* enableState = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::Debug::FingerFeatureSkeletalDebugVisual*), "ToggleLineRendererEnableState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enableState});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::Debug::FingerFeatureSkeletalDebugVisual::UpdateDebugSkeletonLineRendererJoints
// Il2CppName: UpdateDebugSkeletonLineRendererJoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::Debug::FingerFeatureSkeletalDebugVisual::*)()>(&Oculus::Interaction::PoseDetection::Debug::FingerFeatureSkeletalDebugVisual::UpdateDebugSkeletonLineRendererJoints)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::Debug::FingerFeatureSkeletalDebugVisual*), "UpdateDebugSkeletonLineRendererJoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::Debug::FingerFeatureSkeletalDebugVisual::UpdateFeatureActiveValue
// Il2CppName: UpdateFeatureActiveValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::Debug::FingerFeatureSkeletalDebugVisual::*)()>(&Oculus::Interaction::PoseDetection::Debug::FingerFeatureSkeletalDebugVisual::UpdateFeatureActiveValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::Debug::FingerFeatureSkeletalDebugVisual*), "UpdateFeatureActiveValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::Debug::FingerFeatureSkeletalDebugVisual::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
