// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Oculus.Interaction.PoseDetection.TransformFeature
#include "Oculus/Interaction/PoseDetection/TransformFeature.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction::Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: IHand
  class IHand;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: LineRenderer
  class LineRenderer;
  // Forward declaring type: Color
  struct Color;
}
// Forward declaring namespace: Oculus::Interaction::PoseDetection::Debug
namespace Oculus::Interaction::PoseDetection::Debug {
  // Forward declaring type: TransformFeatureVectorDebugParentVisual
  class TransformFeatureVectorDebugParentVisual;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.PoseDetection.Debug
namespace Oculus::Interaction::PoseDetection::Debug {
  // Forward declaring type: TransformFeatureVectorDebugVisual
  class TransformFeatureVectorDebugVisual;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::PoseDetection::Debug::TransformFeatureVectorDebugVisual);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::PoseDetection::Debug::TransformFeatureVectorDebugVisual*, "Oculus.Interaction.PoseDetection.Debug", "TransformFeatureVectorDebugVisual");
// Type namespace: Oculus.Interaction.PoseDetection.Debug
namespace Oculus::Interaction::PoseDetection::Debug {
  // Size: 0x49
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.PoseDetection.Debug.TransformFeatureVectorDebugVisual
  // [TokenAttribute] Offset: FFFFFFFF
  class TransformFeatureVectorDebugVisual : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private Oculus.Interaction.Input.IHand <Hand>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    ::Oculus::Interaction::Input::IHand* Hand;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::IHand*) == 0x8);
    // private UnityEngine.LineRenderer _lineRenderer
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::LineRenderer* lineRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::LineRenderer*) == 0x8);
    // private System.Single _lineWidth
    // Size: 0x4
    // Offset: 0x30
    float lineWidth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _lineScale
    // Size: 0x4
    // Offset: 0x34
    float lineScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _isInitialized
    // Size: 0x1
    // Offset: 0x38
    bool isInitialized;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isInitialized and: feature
    char __padding4[0x3] = {};
    // private Oculus.Interaction.PoseDetection.TransformFeature _feature
    // Size: 0x4
    // Offset: 0x3C
    ::Oculus::Interaction::PoseDetection::TransformFeature feature;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::PoseDetection::TransformFeature) == 0x4);
    // private Oculus.Interaction.PoseDetection.Debug.TransformFeatureVectorDebugParentVisual _parent
    // Size: 0x8
    // Offset: 0x40
    ::Oculus::Interaction::PoseDetection::Debug::TransformFeatureVectorDebugParentVisual* parent;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::PoseDetection::Debug::TransformFeatureVectorDebugParentVisual*) == 0x8);
    // private System.Boolean _trackingHandVector
    // Size: 0x1
    // Offset: 0x48
    bool trackingHandVector;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private Oculus.Interaction.Input.IHand <Hand>k__BackingField
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::IHand*& dyn_$Hand$k__BackingField();
    // Get instance field reference: private UnityEngine.LineRenderer _lineRenderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::LineRenderer*& dyn__lineRenderer();
    // Get instance field reference: private System.Single _lineWidth
    [[deprecated("Use field access instead!")]] float& dyn__lineWidth();
    // Get instance field reference: private System.Single _lineScale
    [[deprecated("Use field access instead!")]] float& dyn__lineScale();
    // Get instance field reference: private System.Boolean _isInitialized
    [[deprecated("Use field access instead!")]] bool& dyn__isInitialized();
    // Get instance field reference: private Oculus.Interaction.PoseDetection.TransformFeature _feature
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::PoseDetection::TransformFeature& dyn__feature();
    // Get instance field reference: private Oculus.Interaction.PoseDetection.Debug.TransformFeatureVectorDebugParentVisual _parent
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::PoseDetection::Debug::TransformFeatureVectorDebugParentVisual*& dyn__parent();
    // Get instance field reference: private System.Boolean _trackingHandVector
    [[deprecated("Use field access instead!")]] bool& dyn__trackingHandVector();
    // public Oculus.Interaction.Input.IHand get_Hand()
    // Offset: 0x47FE124
    ::Oculus::Interaction::Input::IHand* get_Hand();
    // private System.Void set_Hand(Oculus.Interaction.Input.IHand value)
    // Offset: 0x47FE12C
    void set_Hand(::Oculus::Interaction::Input::IHand* value);
    // protected System.Void Awake()
    // Offset: 0x47FE134
    void Awake();
    // public System.Void Initialize(Oculus.Interaction.PoseDetection.TransformFeature feature, System.Boolean trackingHandVector, Oculus.Interaction.PoseDetection.Debug.TransformFeatureVectorDebugParentVisual parent, UnityEngine.Color lineColor)
    // Offset: 0x47FE044
    void Initialize(::Oculus::Interaction::PoseDetection::TransformFeature feature, bool trackingHandVector, ::Oculus::Interaction::PoseDetection::Debug::TransformFeatureVectorDebugParentVisual* parent, ::UnityEngine::Color lineColor);
    // protected System.Void Update()
    // Offset: 0x47FE154
    void Update();
    // public System.Void .ctor()
    // Offset: 0x47FE33C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TransformFeatureVectorDebugVisual* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::PoseDetection::Debug::TransformFeatureVectorDebugVisual::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TransformFeatureVectorDebugVisual*, creationType>()));
    }
  }; // Oculus.Interaction.PoseDetection.Debug.TransformFeatureVectorDebugVisual
  #pragma pack(pop)
  static check_size<sizeof(TransformFeatureVectorDebugVisual), 72 + sizeof(bool)> __Oculus_Interaction_PoseDetection_Debug_TransformFeatureVectorDebugVisualSizeCheck;
  static_assert(sizeof(TransformFeatureVectorDebugVisual) == 0x49);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::Debug::TransformFeatureVectorDebugVisual::get_Hand
// Il2CppName: get_Hand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Input::IHand* (Oculus::Interaction::PoseDetection::Debug::TransformFeatureVectorDebugVisual::*)()>(&Oculus::Interaction::PoseDetection::Debug::TransformFeatureVectorDebugVisual::get_Hand)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::Debug::TransformFeatureVectorDebugVisual*), "get_Hand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::Debug::TransformFeatureVectorDebugVisual::set_Hand
// Il2CppName: set_Hand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::Debug::TransformFeatureVectorDebugVisual::*)(::Oculus::Interaction::Input::IHand*)>(&Oculus::Interaction::PoseDetection::Debug::TransformFeatureVectorDebugVisual::set_Hand)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::Debug::TransformFeatureVectorDebugVisual*), "set_Hand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::Debug::TransformFeatureVectorDebugVisual::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::Debug::TransformFeatureVectorDebugVisual::*)()>(&Oculus::Interaction::PoseDetection::Debug::TransformFeatureVectorDebugVisual::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::Debug::TransformFeatureVectorDebugVisual*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::Debug::TransformFeatureVectorDebugVisual::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::Debug::TransformFeatureVectorDebugVisual::*)(::Oculus::Interaction::PoseDetection::TransformFeature, bool, ::Oculus::Interaction::PoseDetection::Debug::TransformFeatureVectorDebugParentVisual*, ::UnityEngine::Color)>(&Oculus::Interaction::PoseDetection::Debug::TransformFeatureVectorDebugVisual::Initialize)> {
  static const MethodInfo* get() {
    static auto* feature = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.PoseDetection", "TransformFeature")->byval_arg;
    static auto* trackingHandVector = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* parent = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.PoseDetection.Debug", "TransformFeatureVectorDebugParentVisual")->byval_arg;
    static auto* lineColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::Debug::TransformFeatureVectorDebugVisual*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{feature, trackingHandVector, parent, lineColor});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::Debug::TransformFeatureVectorDebugVisual::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::Debug::TransformFeatureVectorDebugVisual::*)()>(&Oculus::Interaction::PoseDetection::Debug::TransformFeatureVectorDebugVisual::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::Debug::TransformFeatureVectorDebugVisual*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::Debug::TransformFeatureVectorDebugVisual::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
