// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: Oculus.Interaction.Input.Handedness
#include "Oculus/Interaction/Input/Handedness.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Renderer
  class Renderer;
  // Forward declaring type: Material
  class Material;
}
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TextMeshPro
  class TextMeshPro;
}
// Forward declaring namespace: Oculus::Interaction::PoseDetection
namespace Oculus::Interaction::PoseDetection {
  // Forward declaring type: TransformFeatureStateProvider
  class TransformFeatureStateProvider;
  // Forward declaring type: TransformRecognizerActiveState
  class TransformRecognizerActiveState;
  // Forward declaring type: TransformFeatureConfig
  class TransformFeatureConfig;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.PoseDetection.Debug
namespace Oculus::Interaction::PoseDetection::Debug {
  // Forward declaring type: TransformFeatureDebugVisual
  class TransformFeatureDebugVisual;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::PoseDetection::Debug::TransformFeatureDebugVisual);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::PoseDetection::Debug::TransformFeatureDebugVisual*, "Oculus.Interaction.PoseDetection.Debug", "TransformFeatureDebugVisual");
// Type namespace: Oculus.Interaction.PoseDetection.Debug
namespace Oculus::Interaction::PoseDetection::Debug {
  // Size: 0x80
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.PoseDetection.Debug.TransformFeatureDebugVisual
  // [TokenAttribute] Offset: FFFFFFFF
  class TransformFeatureDebugVisual : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.Renderer _target
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Renderer* target;
    // Field size check
    static_assert(sizeof(::UnityEngine::Renderer*) == 0x8);
    // private UnityEngine.Color _normalColor
    // Size: 0x10
    // Offset: 0x28
    ::UnityEngine::Color normalColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color _activeColor
    // Size: 0x10
    // Offset: 0x38
    ::UnityEngine::Color activeColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private TMPro.TextMeshPro _targetText
    // Size: 0x8
    // Offset: 0x48
    ::TMPro::TextMeshPro* targetText;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshPro*) == 0x8);
    // private Oculus.Interaction.PoseDetection.TransformFeatureStateProvider _transformFeatureStateProvider
    // Size: 0x8
    // Offset: 0x50
    ::Oculus::Interaction::PoseDetection::TransformFeatureStateProvider* transformFeatureStateProvider;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::PoseDetection::TransformFeatureStateProvider*) == 0x8);
    // private Oculus.Interaction.PoseDetection.TransformRecognizerActiveState _transformRecognizerActiveState
    // Size: 0x8
    // Offset: 0x58
    ::Oculus::Interaction::PoseDetection::TransformRecognizerActiveState* transformRecognizerActiveState;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::PoseDetection::TransformRecognizerActiveState*) == 0x8);
    // private UnityEngine.Material _material
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::Material* material;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private System.Boolean _lastActiveValue
    // Size: 0x1
    // Offset: 0x68
    bool lastActiveValue;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: lastActiveValue and: targetConfig
    char __padding7[0x7] = {};
    // private Oculus.Interaction.PoseDetection.TransformFeatureConfig _targetConfig
    // Size: 0x8
    // Offset: 0x70
    ::Oculus::Interaction::PoseDetection::TransformFeatureConfig* targetConfig;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::PoseDetection::TransformFeatureConfig*) == 0x8);
    // private System.Boolean _initialized
    // Size: 0x1
    // Offset: 0x78
    bool initialized;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: initialized and: handedness
    char __padding9[0x3] = {};
    // private Oculus.Interaction.Input.Handedness _handedness
    // Size: 0x4
    // Offset: 0x7C
    ::Oculus::Interaction::Input::Handedness handedness;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::Handedness) == 0x4);
    public:
    // Get instance field reference: private UnityEngine.Renderer _target
    [[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& dyn__target();
    // Get instance field reference: private UnityEngine.Color _normalColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__normalColor();
    // Get instance field reference: private UnityEngine.Color _activeColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__activeColor();
    // Get instance field reference: private TMPro.TextMeshPro _targetText
    [[deprecated("Use field access instead!")]] ::TMPro::TextMeshPro*& dyn__targetText();
    // Get instance field reference: private Oculus.Interaction.PoseDetection.TransformFeatureStateProvider _transformFeatureStateProvider
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::PoseDetection::TransformFeatureStateProvider*& dyn__transformFeatureStateProvider();
    // Get instance field reference: private Oculus.Interaction.PoseDetection.TransformRecognizerActiveState _transformRecognizerActiveState
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::PoseDetection::TransformRecognizerActiveState*& dyn__transformRecognizerActiveState();
    // Get instance field reference: private UnityEngine.Material _material
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn__material();
    // Get instance field reference: private System.Boolean _lastActiveValue
    [[deprecated("Use field access instead!")]] bool& dyn__lastActiveValue();
    // Get instance field reference: private Oculus.Interaction.PoseDetection.TransformFeatureConfig _targetConfig
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::PoseDetection::TransformFeatureConfig*& dyn__targetConfig();
    // Get instance field reference: private System.Boolean _initialized
    [[deprecated("Use field access instead!")]] bool& dyn__initialized();
    // Get instance field reference: private Oculus.Interaction.Input.Handedness _handedness
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::Handedness& dyn__handedness();
    // protected System.Void Awake()
    // Offset: 0x47FD66C
    void Awake();
    // private System.Void OnDestroy()
    // Offset: 0x47FD6F4
    void OnDestroy();
    // public System.Void Initialize(Oculus.Interaction.Input.Handedness handedness, Oculus.Interaction.PoseDetection.TransformFeatureConfig targetConfig, Oculus.Interaction.PoseDetection.TransformFeatureStateProvider transformFeatureStateProvider, Oculus.Interaction.PoseDetection.TransformRecognizerActiveState transformActiveState)
    // Offset: 0x47FD750
    void Initialize(::Oculus::Interaction::Input::Handedness handedness, ::Oculus::Interaction::PoseDetection::TransformFeatureConfig* targetConfig, ::Oculus::Interaction::PoseDetection::TransformFeatureStateProvider* transformFeatureStateProvider, ::Oculus::Interaction::PoseDetection::TransformRecognizerActiveState* transformActiveState);
    // protected System.Void Update()
    // Offset: 0x47FD7A4
    void Update();
    // public System.Void .ctor()
    // Offset: 0x47FDB58
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TransformFeatureDebugVisual* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::PoseDetection::Debug::TransformFeatureDebugVisual::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TransformFeatureDebugVisual*, creationType>()));
    }
  }; // Oculus.Interaction.PoseDetection.Debug.TransformFeatureDebugVisual
  #pragma pack(pop)
  static check_size<sizeof(TransformFeatureDebugVisual), 124 + sizeof(::Oculus::Interaction::Input::Handedness)> __Oculus_Interaction_PoseDetection_Debug_TransformFeatureDebugVisualSizeCheck;
  static_assert(sizeof(TransformFeatureDebugVisual) == 0x80);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::Debug::TransformFeatureDebugVisual::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::Debug::TransformFeatureDebugVisual::*)()>(&Oculus::Interaction::PoseDetection::Debug::TransformFeatureDebugVisual::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::Debug::TransformFeatureDebugVisual*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::Debug::TransformFeatureDebugVisual::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::Debug::TransformFeatureDebugVisual::*)()>(&Oculus::Interaction::PoseDetection::Debug::TransformFeatureDebugVisual::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::Debug::TransformFeatureDebugVisual*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::Debug::TransformFeatureDebugVisual::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::Debug::TransformFeatureDebugVisual::*)(::Oculus::Interaction::Input::Handedness, ::Oculus::Interaction::PoseDetection::TransformFeatureConfig*, ::Oculus::Interaction::PoseDetection::TransformFeatureStateProvider*, ::Oculus::Interaction::PoseDetection::TransformRecognizerActiveState*)>(&Oculus::Interaction::PoseDetection::Debug::TransformFeatureDebugVisual::Initialize)> {
  static const MethodInfo* get() {
    static auto* handedness = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "Handedness")->byval_arg;
    static auto* targetConfig = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.PoseDetection", "TransformFeatureConfig")->byval_arg;
    static auto* transformFeatureStateProvider = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.PoseDetection", "TransformFeatureStateProvider")->byval_arg;
    static auto* transformActiveState = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.PoseDetection", "TransformRecognizerActiveState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::Debug::TransformFeatureDebugVisual*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handedness, targetConfig, transformFeatureStateProvider, transformActiveState});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::Debug::TransformFeatureDebugVisual::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::Debug::TransformFeatureDebugVisual::*)()>(&Oculus::Interaction::PoseDetection::Debug::TransformFeatureDebugVisual::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::Debug::TransformFeatureDebugVisual*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::Debug::TransformFeatureDebugVisual::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
