// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Oculus.Interaction.DebugTree.DebugTree`1
#include "Oculus/Interaction/DebugTree/DebugTree_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction
namespace Oculus::Interaction {
  // Forward declaring type: IActiveState
  class IActiveState;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: Oculus::Interaction::PoseDetection::Debug
namespace Oculus::Interaction::PoseDetection::Debug {
  // Forward declaring type: IActiveStateModel
  class IActiveStateModel;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.PoseDetection.Debug
namespace Oculus::Interaction::PoseDetection::Debug {
  // Forward declaring type: ActiveStateDebugTree
  class ActiveStateDebugTree;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::PoseDetection::Debug::ActiveStateDebugTree);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::PoseDetection::Debug::ActiveStateDebugTree*, "Oculus.Interaction.PoseDetection.Debug", "ActiveStateDebugTree");
// Type namespace: Oculus.Interaction.PoseDetection.Debug
namespace Oculus::Interaction::PoseDetection::Debug {
  // WARNING Size may be invalid!
  // Autogenerated type: Oculus.Interaction.PoseDetection.Debug.ActiveStateDebugTree
  // [TokenAttribute] Offset: FFFFFFFF
  class ActiveStateDebugTree : public ::Oculus::Interaction::DebugTree::DebugTree_1<::Oculus::Interaction::IActiveState*> {
    public:
    // Get static field: static private System.Collections.Generic.Dictionary`2<System.Type,Oculus.Interaction.PoseDetection.Debug.IActiveStateModel> _models
    static ::System::Collections::Generic::Dictionary_2<::System::Type*, ::Oculus::Interaction::PoseDetection::Debug::IActiveStateModel*>* _get__models();
    // Set static field: static private System.Collections.Generic.Dictionary`2<System.Type,Oculus.Interaction.PoseDetection.Debug.IActiveStateModel> _models
    static void _set__models(::System::Collections::Generic::Dictionary_2<::System::Type*, ::Oculus::Interaction::PoseDetection::Debug::IActiveStateModel*>* value);
    // public System.Void .ctor(Oculus.Interaction.IActiveState root)
    // Offset: 0x47F75C0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ActiveStateDebugTree* New_ctor(::Oculus::Interaction::IActiveState* root) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::PoseDetection::Debug::ActiveStateDebugTree::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ActiveStateDebugTree*, creationType>(root)));
    }
    // static public System.Void RegisterModel(Oculus.Interaction.PoseDetection.Debug.IActiveStateModel stateModel)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TType>
    static void RegisterModel(::Oculus::Interaction::PoseDetection::Debug::IActiveStateModel* stateModel) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<TType>, ::Oculus::Interaction::IActiveState>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::PoseDetection::Debug::ActiveStateDebugTree::RegisterModel");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Oculus.Interaction.PoseDetection.Debug", "ActiveStateDebugTree", "RegisterModel", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TType>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateModel)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TType>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, stateModel);
    }
    // protected System.Boolean TryGetChildren(Oculus.Interaction.IActiveState node, out System.Collections.Generic.IEnumerable`1<Oculus.Interaction.IActiveState> children)
    // Offset: 0x47F7618
    bool TryGetChildren(::Oculus::Interaction::IActiveState* node, ByRef<::System::Collections::Generic::IEnumerable_1<::Oculus::Interaction::IActiveState*>*> children);
    // static private System.Void .cctor()
    // Offset: 0x47F7770
    static void _cctor();
  }; // Oculus.Interaction.PoseDetection.Debug.ActiveStateDebugTree
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::Debug::ActiveStateDebugTree::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::Debug::ActiveStateDebugTree::RegisterModel
// Il2CppName: RegisterModel
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::Debug::ActiveStateDebugTree::TryGetChildren
// Il2CppName: TryGetChildren
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::PoseDetection::Debug::ActiveStateDebugTree::*)(::Oculus::Interaction::IActiveState*, ByRef<::System::Collections::Generic::IEnumerable_1<::Oculus::Interaction::IActiveState*>*>)>(&Oculus::Interaction::PoseDetection::Debug::ActiveStateDebugTree::TryGetChildren)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IActiveState")->byval_arg;
    static auto* children = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IEnumerable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IActiveState")})->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::Debug::ActiveStateDebugTree*), "TryGetChildren", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node, children});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::Debug::ActiveStateDebugTree::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Oculus::Interaction::PoseDetection::Debug::ActiveStateDebugTree::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::Debug::ActiveStateDebugTree*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
