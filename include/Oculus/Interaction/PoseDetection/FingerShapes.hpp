// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Oculus.Interaction.Input.HandJointId
#include "Oculus/Interaction/Input/HandJointId.hpp"
// Including type: UnityEngine.Pose
#include "UnityEngine/Pose.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction::Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: HandFinger
  struct HandFinger;
  // Forward declaring type: IHand
  class IHand;
}
// Forward declaring namespace: Oculus::Interaction::PoseDetection
namespace Oculus::Interaction::PoseDetection {
  // Forward declaring type: FingerFeature
  struct FingerFeature;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IReadOnlyList`1<T>
  template<typename T>
  class IReadOnlyList_1;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.PoseDetection
namespace Oculus::Interaction::PoseDetection {
  // Forward declaring type: FingerShapes
  class FingerShapes;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::PoseDetection::FingerShapes);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::PoseDetection::FingerShapes*, "Oculus.Interaction.PoseDetection", "FingerShapes");
// Type namespace: Oculus.Interaction.PoseDetection
namespace Oculus::Interaction::PoseDetection {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.PoseDetection.FingerShapes
  // [TokenAttribute] Offset: FFFFFFFF
  class FingerShapes : public ::Il2CppObject {
    public:
    // Get static field: static private readonly Oculus.Interaction.Input.HandJointId[][] CURL_LINE_JOINTS
    static ::ArrayW<::ArrayW<::Oculus::Interaction::Input::HandJointId>> _get_CURL_LINE_JOINTS();
    // Set static field: static private readonly Oculus.Interaction.Input.HandJointId[][] CURL_LINE_JOINTS
    static void _set_CURL_LINE_JOINTS(::ArrayW<::ArrayW<::Oculus::Interaction::Input::HandJointId>> value);
    // Get static field: static private readonly Oculus.Interaction.Input.HandJointId[][] FLEXION_LINE_JOINTS
    static ::ArrayW<::ArrayW<::Oculus::Interaction::Input::HandJointId>> _get_FLEXION_LINE_JOINTS();
    // Set static field: static private readonly Oculus.Interaction.Input.HandJointId[][] FLEXION_LINE_JOINTS
    static void _set_FLEXION_LINE_JOINTS(::ArrayW<::ArrayW<::Oculus::Interaction::Input::HandJointId>> value);
    // Get static field: static private readonly Oculus.Interaction.Input.HandJointId[][] ABDUCTION_LINE_JOINTS
    static ::ArrayW<::ArrayW<::Oculus::Interaction::Input::HandJointId>> _get_ABDUCTION_LINE_JOINTS();
    // Set static field: static private readonly Oculus.Interaction.Input.HandJointId[][] ABDUCTION_LINE_JOINTS
    static void _set_ABDUCTION_LINE_JOINTS(::ArrayW<::ArrayW<::Oculus::Interaction::Input::HandJointId>> value);
    // Get static field: static private readonly Oculus.Interaction.Input.HandJointId[][] OPPOSITION_LINE_JOINTS
    static ::ArrayW<::ArrayW<::Oculus::Interaction::Input::HandJointId>> _get_OPPOSITION_LINE_JOINTS();
    // Set static field: static private readonly Oculus.Interaction.Input.HandJointId[][] OPPOSITION_LINE_JOINTS
    static void _set_OPPOSITION_LINE_JOINTS(::ArrayW<::ArrayW<::Oculus::Interaction::Input::HandJointId>> value);
    // Get static field: static private readonly Oculus.Interaction.Input.HandJointId[][] CURL_ANGLE_JOINTS
    static ::ArrayW<::ArrayW<::Oculus::Interaction::Input::HandJointId>> _get_CURL_ANGLE_JOINTS();
    // Set static field: static private readonly Oculus.Interaction.Input.HandJointId[][] CURL_ANGLE_JOINTS
    static void _set_CURL_ANGLE_JOINTS(::ArrayW<::ArrayW<::Oculus::Interaction::Input::HandJointId>> value);
    // Get static field: static private readonly Oculus.Interaction.Input.HandJointId[] KNUCKLE_JOINTS
    static ::ArrayW<::Oculus::Interaction::Input::HandJointId> _get_KNUCKLE_JOINTS();
    // Set static field: static private readonly Oculus.Interaction.Input.HandJointId[] KNUCKLE_JOINTS
    static void _set_KNUCKLE_JOINTS(::ArrayW<::Oculus::Interaction::Input::HandJointId> value);
    // public System.Single GetValue(Oculus.Interaction.Input.HandFinger finger, Oculus.Interaction.PoseDetection.FingerFeature feature, Oculus.Interaction.Input.IHand hand)
    // Offset: 0x47EA344
    float GetValue(::Oculus::Interaction::Input::HandFinger finger, ::Oculus::Interaction::PoseDetection::FingerFeature feature, ::Oculus::Interaction::Input::IHand* hand);
    // static private System.Single PosesCurlValue(UnityEngine.Pose p0, UnityEngine.Pose p1, UnityEngine.Pose p2)
    // Offset: 0x47EAB38
    static float PosesCurlValue(::UnityEngine::Pose p0, ::UnityEngine::Pose p1, ::UnityEngine::Pose p2);
    // static public System.Single PosesListCurlValue(UnityEngine.Pose[] poses)
    // Offset: 0x47EABE8
    static float PosesListCurlValue(::ArrayW<::UnityEngine::Pose> poses);
    // protected System.Single JointsCurlValue(Oculus.Interaction.Input.HandJointId[] joints, Oculus.Interaction.Input.IHand hand)
    // Offset: 0x47EAD80
    float JointsCurlValue(::ArrayW<::Oculus::Interaction::Input::HandJointId> joints, ::Oculus::Interaction::Input::IHand* hand);
    // public System.Single GetCurlValue(Oculus.Interaction.Input.HandFinger finger, Oculus.Interaction.Input.IHand hand)
    // Offset: 0x47EA390
    float GetCurlValue(::Oculus::Interaction::Input::HandFinger finger, ::Oculus::Interaction::Input::IHand* hand);
    // public System.Single GetFlexionValue(Oculus.Interaction.Input.HandFinger finger, Oculus.Interaction.Input.IHand hand)
    // Offset: 0x47EA438
    float GetFlexionValue(::Oculus::Interaction::Input::HandFinger finger, ::Oculus::Interaction::Input::IHand* hand);
    // public System.Single GetAbductionValue(Oculus.Interaction.Input.HandFinger finger, Oculus.Interaction.Input.IHand hand)
    // Offset: 0x47EA710
    float GetAbductionValue(::Oculus::Interaction::Input::HandFinger finger, ::Oculus::Interaction::Input::IHand* hand);
    // public System.Single GetOppositionValue(Oculus.Interaction.Input.HandFinger finger, Oculus.Interaction.Input.IHand hand)
    // Offset: 0x47EA998
    float GetOppositionValue(::Oculus::Interaction::Input::HandFinger finger, ::Oculus::Interaction::Input::IHand* hand);
    // public System.Collections.Generic.IReadOnlyList`1<Oculus.Interaction.Input.HandJointId> GetJointsAffected(Oculus.Interaction.Input.HandFinger finger, Oculus.Interaction.PoseDetection.FingerFeature feature)
    // Offset: 0x47EAFCC
    ::System::Collections::Generic::IReadOnlyList_1<::Oculus::Interaction::Input::HandJointId>* GetJointsAffected(::Oculus::Interaction::Input::HandFinger finger, ::Oculus::Interaction::PoseDetection::FingerFeature feature);
    // public System.Void .ctor()
    // Offset: 0x47EA0F4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FingerShapes* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::PoseDetection::FingerShapes::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FingerShapes*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x47EB0F8
    static void _cctor();
  }; // Oculus.Interaction.PoseDetection.FingerShapes
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::FingerShapes::GetValue
// Il2CppName: GetValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::PoseDetection::FingerShapes::*)(::Oculus::Interaction::Input::HandFinger, ::Oculus::Interaction::PoseDetection::FingerFeature, ::Oculus::Interaction::Input::IHand*)>(&Oculus::Interaction::PoseDetection::FingerShapes::GetValue)> {
  static const MethodInfo* get() {
    static auto* finger = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "HandFinger")->byval_arg;
    static auto* feature = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.PoseDetection", "FingerFeature")->byval_arg;
    static auto* hand = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::FingerShapes*), "GetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{finger, feature, hand});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::FingerShapes::PosesCurlValue
// Il2CppName: PosesCurlValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::UnityEngine::Pose, ::UnityEngine::Pose, ::UnityEngine::Pose)>(&Oculus::Interaction::PoseDetection::FingerShapes::PosesCurlValue)> {
  static const MethodInfo* get() {
    static auto* p0 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->byval_arg;
    static auto* p1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->byval_arg;
    static auto* p2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::FingerShapes*), "PosesCurlValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p0, p1, p2});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::FingerShapes::PosesListCurlValue
// Il2CppName: PosesListCurlValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::ArrayW<::UnityEngine::Pose>)>(&Oculus::Interaction::PoseDetection::FingerShapes::PosesListCurlValue)> {
  static const MethodInfo* get() {
    static auto* poses = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Pose"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::FingerShapes*), "PosesListCurlValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{poses});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::FingerShapes::JointsCurlValue
// Il2CppName: JointsCurlValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::PoseDetection::FingerShapes::*)(::ArrayW<::Oculus::Interaction::Input::HandJointId>, ::Oculus::Interaction::Input::IHand*)>(&Oculus::Interaction::PoseDetection::FingerShapes::JointsCurlValue)> {
  static const MethodInfo* get() {
    static auto* joints = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "HandJointId"), 1)->byval_arg;
    static auto* hand = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::FingerShapes*), "JointsCurlValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{joints, hand});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::FingerShapes::GetCurlValue
// Il2CppName: GetCurlValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::PoseDetection::FingerShapes::*)(::Oculus::Interaction::Input::HandFinger, ::Oculus::Interaction::Input::IHand*)>(&Oculus::Interaction::PoseDetection::FingerShapes::GetCurlValue)> {
  static const MethodInfo* get() {
    static auto* finger = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "HandFinger")->byval_arg;
    static auto* hand = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::FingerShapes*), "GetCurlValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{finger, hand});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::FingerShapes::GetFlexionValue
// Il2CppName: GetFlexionValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::PoseDetection::FingerShapes::*)(::Oculus::Interaction::Input::HandFinger, ::Oculus::Interaction::Input::IHand*)>(&Oculus::Interaction::PoseDetection::FingerShapes::GetFlexionValue)> {
  static const MethodInfo* get() {
    static auto* finger = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "HandFinger")->byval_arg;
    static auto* hand = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::FingerShapes*), "GetFlexionValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{finger, hand});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::FingerShapes::GetAbductionValue
// Il2CppName: GetAbductionValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::PoseDetection::FingerShapes::*)(::Oculus::Interaction::Input::HandFinger, ::Oculus::Interaction::Input::IHand*)>(&Oculus::Interaction::PoseDetection::FingerShapes::GetAbductionValue)> {
  static const MethodInfo* get() {
    static auto* finger = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "HandFinger")->byval_arg;
    static auto* hand = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::FingerShapes*), "GetAbductionValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{finger, hand});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::FingerShapes::GetOppositionValue
// Il2CppName: GetOppositionValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::PoseDetection::FingerShapes::*)(::Oculus::Interaction::Input::HandFinger, ::Oculus::Interaction::Input::IHand*)>(&Oculus::Interaction::PoseDetection::FingerShapes::GetOppositionValue)> {
  static const MethodInfo* get() {
    static auto* finger = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "HandFinger")->byval_arg;
    static auto* hand = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::FingerShapes*), "GetOppositionValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{finger, hand});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::FingerShapes::GetJointsAffected
// Il2CppName: GetJointsAffected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IReadOnlyList_1<::Oculus::Interaction::Input::HandJointId>* (Oculus::Interaction::PoseDetection::FingerShapes::*)(::Oculus::Interaction::Input::HandFinger, ::Oculus::Interaction::PoseDetection::FingerFeature)>(&Oculus::Interaction::PoseDetection::FingerShapes::GetJointsAffected)> {
  static const MethodInfo* get() {
    static auto* finger = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "HandFinger")->byval_arg;
    static auto* feature = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.PoseDetection", "FingerFeature")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::FingerShapes*), "GetJointsAffected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{finger, feature});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::FingerShapes::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::FingerShapes::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Oculus::Interaction::PoseDetection::FingerShapes::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::FingerShapes*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
