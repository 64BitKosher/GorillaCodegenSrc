// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Oculus.Interaction.PoseDetection.JointVelocityActiveState
#include "Oculus/Interaction/PoseDetection/JointVelocityActiveState.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::PoseDetection::JointVelocityActiveState::WorldAxis, "Oculus.Interaction.PoseDetection", "JointVelocityActiveState/WorldAxis");
// Type namespace: Oculus.Interaction.PoseDetection
namespace Oculus::Interaction::PoseDetection {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.PoseDetection.JointVelocityActiveState/WorldAxis
  // [TokenAttribute] Offset: FFFFFFFF
  struct JointVelocityActiveState::WorldAxis/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: WorldAxis
    constexpr WorldAxis(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public Oculus.Interaction.PoseDetection.JointVelocityActiveState/WorldAxis PositiveX
    static constexpr const int PositiveX = 0;
    // Get static field: static public Oculus.Interaction.PoseDetection.JointVelocityActiveState/WorldAxis PositiveX
    static ::Oculus::Interaction::PoseDetection::JointVelocityActiveState::WorldAxis _get_PositiveX();
    // Set static field: static public Oculus.Interaction.PoseDetection.JointVelocityActiveState/WorldAxis PositiveX
    static void _set_PositiveX(::Oculus::Interaction::PoseDetection::JointVelocityActiveState::WorldAxis value);
    // static field const value: static public Oculus.Interaction.PoseDetection.JointVelocityActiveState/WorldAxis NegativeX
    static constexpr const int NegativeX = 1;
    // Get static field: static public Oculus.Interaction.PoseDetection.JointVelocityActiveState/WorldAxis NegativeX
    static ::Oculus::Interaction::PoseDetection::JointVelocityActiveState::WorldAxis _get_NegativeX();
    // Set static field: static public Oculus.Interaction.PoseDetection.JointVelocityActiveState/WorldAxis NegativeX
    static void _set_NegativeX(::Oculus::Interaction::PoseDetection::JointVelocityActiveState::WorldAxis value);
    // static field const value: static public Oculus.Interaction.PoseDetection.JointVelocityActiveState/WorldAxis PositiveY
    static constexpr const int PositiveY = 2;
    // Get static field: static public Oculus.Interaction.PoseDetection.JointVelocityActiveState/WorldAxis PositiveY
    static ::Oculus::Interaction::PoseDetection::JointVelocityActiveState::WorldAxis _get_PositiveY();
    // Set static field: static public Oculus.Interaction.PoseDetection.JointVelocityActiveState/WorldAxis PositiveY
    static void _set_PositiveY(::Oculus::Interaction::PoseDetection::JointVelocityActiveState::WorldAxis value);
    // static field const value: static public Oculus.Interaction.PoseDetection.JointVelocityActiveState/WorldAxis NegativeY
    static constexpr const int NegativeY = 3;
    // Get static field: static public Oculus.Interaction.PoseDetection.JointVelocityActiveState/WorldAxis NegativeY
    static ::Oculus::Interaction::PoseDetection::JointVelocityActiveState::WorldAxis _get_NegativeY();
    // Set static field: static public Oculus.Interaction.PoseDetection.JointVelocityActiveState/WorldAxis NegativeY
    static void _set_NegativeY(::Oculus::Interaction::PoseDetection::JointVelocityActiveState::WorldAxis value);
    // static field const value: static public Oculus.Interaction.PoseDetection.JointVelocityActiveState/WorldAxis PositiveZ
    static constexpr const int PositiveZ = 4;
    // Get static field: static public Oculus.Interaction.PoseDetection.JointVelocityActiveState/WorldAxis PositiveZ
    static ::Oculus::Interaction::PoseDetection::JointVelocityActiveState::WorldAxis _get_PositiveZ();
    // Set static field: static public Oculus.Interaction.PoseDetection.JointVelocityActiveState/WorldAxis PositiveZ
    static void _set_PositiveZ(::Oculus::Interaction::PoseDetection::JointVelocityActiveState::WorldAxis value);
    // static field const value: static public Oculus.Interaction.PoseDetection.JointVelocityActiveState/WorldAxis NegativeZ
    static constexpr const int NegativeZ = 5;
    // Get static field: static public Oculus.Interaction.PoseDetection.JointVelocityActiveState/WorldAxis NegativeZ
    static ::Oculus::Interaction::PoseDetection::JointVelocityActiveState::WorldAxis _get_NegativeZ();
    // Set static field: static public Oculus.Interaction.PoseDetection.JointVelocityActiveState/WorldAxis NegativeZ
    static void _set_NegativeZ(::Oculus::Interaction::PoseDetection::JointVelocityActiveState::WorldAxis value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // Oculus.Interaction.PoseDetection.JointVelocityActiveState/WorldAxis
  #pragma pack(pop)
  static check_size<sizeof(JointVelocityActiveState::WorldAxis), 0 + sizeof(int)> __Oculus_Interaction_PoseDetection_JointVelocityActiveState_WorldAxisSizeCheck;
  static_assert(sizeof(JointVelocityActiveState::WorldAxis) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
