// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction::PoseDetection
namespace Oculus::Interaction::PoseDetection {
  // Forward declaring type: FeatureStateDescription
  class FeatureStateDescription;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.PoseDetection
namespace Oculus::Interaction::PoseDetection {
  // Forward declaring type: FeatureDescription
  class FeatureDescription;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::PoseDetection::FeatureDescription);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::PoseDetection::FeatureDescription*, "Oculus.Interaction.PoseDetection", "FeatureDescription");
// Type namespace: Oculus.Interaction.PoseDetection
namespace Oculus::Interaction::PoseDetection {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.PoseDetection.FeatureDescription
  // [TokenAttribute] Offset: FFFFFFFF
  class FeatureDescription : public ::Il2CppObject {
    public:
    public:
    // private readonly System.String <ShortDescription>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::StringW ShortDescription;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private readonly System.String <Description>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::StringW Description;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private readonly System.Single <MinValueHint>k__BackingField
    // Size: 0x4
    // Offset: 0x20
    float MinValueHint;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private readonly System.Single <MaxValueHint>k__BackingField
    // Size: 0x4
    // Offset: 0x24
    float MaxValueHint;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private readonly Oculus.Interaction.PoseDetection.FeatureStateDescription[] <FeatureStates>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::Oculus::Interaction::PoseDetection::FeatureStateDescription*> FeatureStates;
    // Field size check
    static_assert(sizeof(::ArrayW<::Oculus::Interaction::PoseDetection::FeatureStateDescription*>) == 0x8);
    public:
    // Get instance field reference: private readonly System.String <ShortDescription>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$ShortDescription$k__BackingField();
    // Get instance field reference: private readonly System.String <Description>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$Description$k__BackingField();
    // Get instance field reference: private readonly System.Single <MinValueHint>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$MinValueHint$k__BackingField();
    // Get instance field reference: private readonly System.Single <MaxValueHint>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$MaxValueHint$k__BackingField();
    // Get instance field reference: private readonly Oculus.Interaction.PoseDetection.FeatureStateDescription[] <FeatureStates>k__BackingField
    [[deprecated("Use field access instead!")]] ::ArrayW<::Oculus::Interaction::PoseDetection::FeatureStateDescription*>& dyn_$FeatureStates$k__BackingField();
    // public System.Void .ctor(System.String shortDescription, System.String description, System.Single minValueHint, System.Single maxValueHint, Oculus.Interaction.PoseDetection.FeatureStateDescription[] featureStates)
    // Offset: 0x47E87E4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FeatureDescription* New_ctor(::StringW shortDescription, ::StringW description, float minValueHint, float maxValueHint, ::ArrayW<::Oculus::Interaction::PoseDetection::FeatureStateDescription*> featureStates) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::PoseDetection::FeatureDescription::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FeatureDescription*, creationType>(shortDescription, description, minValueHint, maxValueHint, featureStates)));
    }
    // public System.String get_ShortDescription()
    // Offset: 0x47E8858
    ::StringW get_ShortDescription();
    // public System.String get_Description()
    // Offset: 0x47E8860
    ::StringW get_Description();
    // public System.Single get_MinValueHint()
    // Offset: 0x47E8868
    float get_MinValueHint();
    // public System.Single get_MaxValueHint()
    // Offset: 0x47E8870
    float get_MaxValueHint();
    // public Oculus.Interaction.PoseDetection.FeatureStateDescription[] get_FeatureStates()
    // Offset: 0x47E8878
    ::ArrayW<::Oculus::Interaction::PoseDetection::FeatureStateDescription*> get_FeatureStates();
  }; // Oculus.Interaction.PoseDetection.FeatureDescription
  #pragma pack(pop)
  static check_size<sizeof(FeatureDescription), 40 + sizeof(::ArrayW<::Oculus::Interaction::PoseDetection::FeatureStateDescription*>)> __Oculus_Interaction_PoseDetection_FeatureDescriptionSizeCheck;
  static_assert(sizeof(FeatureDescription) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::FeatureDescription::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::FeatureDescription::get_ShortDescription
// Il2CppName: get_ShortDescription
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Oculus::Interaction::PoseDetection::FeatureDescription::*)()>(&Oculus::Interaction::PoseDetection::FeatureDescription::get_ShortDescription)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::FeatureDescription*), "get_ShortDescription", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::FeatureDescription::get_Description
// Il2CppName: get_Description
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Oculus::Interaction::PoseDetection::FeatureDescription::*)()>(&Oculus::Interaction::PoseDetection::FeatureDescription::get_Description)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::FeatureDescription*), "get_Description", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::FeatureDescription::get_MinValueHint
// Il2CppName: get_MinValueHint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::PoseDetection::FeatureDescription::*)()>(&Oculus::Interaction::PoseDetection::FeatureDescription::get_MinValueHint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::FeatureDescription*), "get_MinValueHint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::FeatureDescription::get_MaxValueHint
// Il2CppName: get_MaxValueHint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::PoseDetection::FeatureDescription::*)()>(&Oculus::Interaction::PoseDetection::FeatureDescription::get_MaxValueHint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::FeatureDescription*), "get_MaxValueHint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::FeatureDescription::get_FeatureStates
// Il2CppName: get_FeatureStates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Oculus::Interaction::PoseDetection::FeatureStateDescription*> (Oculus::Interaction::PoseDetection::FeatureDescription::*)()>(&Oculus::Interaction::PoseDetection::FeatureDescription::get_FeatureStates)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::FeatureDescription*), "get_FeatureStates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
