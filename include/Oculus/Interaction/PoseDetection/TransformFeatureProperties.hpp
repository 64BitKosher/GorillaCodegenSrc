// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Oculus.Interaction.PoseDetection.TransformFeature
#include "Oculus/Interaction/PoseDetection/TransformFeature.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IReadOnlyDictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class IReadOnlyDictionary_2;
}
// Forward declaring namespace: Oculus::Interaction::PoseDetection
namespace Oculus::Interaction::PoseDetection {
  // Forward declaring type: FeatureDescription
  class FeatureDescription;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.PoseDetection
namespace Oculus::Interaction::PoseDetection {
  // Forward declaring type: TransformFeatureProperties
  class TransformFeatureProperties;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::PoseDetection::TransformFeatureProperties);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::PoseDetection::TransformFeatureProperties*, "Oculus.Interaction.PoseDetection", "TransformFeatureProperties");
// Type namespace: Oculus.Interaction.PoseDetection
namespace Oculus::Interaction::PoseDetection {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.PoseDetection.TransformFeatureProperties
  // [TokenAttribute] Offset: FFFFFFFF
  class TransformFeatureProperties : public ::Il2CppObject {
    public:
    // Get static field: static private readonly System.Collections.Generic.IReadOnlyDictionary`2<Oculus.Interaction.PoseDetection.TransformFeature,Oculus.Interaction.PoseDetection.FeatureDescription> <FeatureDescriptions>k__BackingField
    static ::System::Collections::Generic::IReadOnlyDictionary_2<::Oculus::Interaction::PoseDetection::TransformFeature, ::Oculus::Interaction::PoseDetection::FeatureDescription*>* _get_$FeatureDescriptions$k__BackingField();
    // Set static field: static private readonly System.Collections.Generic.IReadOnlyDictionary`2<Oculus.Interaction.PoseDetection.TransformFeature,Oculus.Interaction.PoseDetection.FeatureDescription> <FeatureDescriptions>k__BackingField
    static void _set_$FeatureDescriptions$k__BackingField(::System::Collections::Generic::IReadOnlyDictionary_2<::Oculus::Interaction::PoseDetection::TransformFeature, ::Oculus::Interaction::PoseDetection::FeatureDescription*>* value);
    // static field const value: static public System.String FeatureStateThresholdMidpointHelpText
    static constexpr const char* FeatureStateThresholdMidpointHelpText = "The value at which a state will transition from A > B (or B > A)";
    // Get static field: static public System.String FeatureStateThresholdMidpointHelpText
    static ::StringW _get_FeatureStateThresholdMidpointHelpText();
    // Set static field: static public System.String FeatureStateThresholdMidpointHelpText
    static void _set_FeatureStateThresholdMidpointHelpText(::StringW value);
    // static field const value: static public System.String FeatureStateThresholdWidthHelpText
    static constexpr const char* FeatureStateThresholdWidthHelpText = "How far the transform value must exceed the midpoint until the transition can occur. This is to prevent rapid flickering at transition edges.";
    // Get static field: static public System.String FeatureStateThresholdWidthHelpText
    static ::StringW _get_FeatureStateThresholdWidthHelpText();
    // Set static field: static public System.String FeatureStateThresholdWidthHelpText
    static void _set_FeatureStateThresholdWidthHelpText(::StringW value);
    // static public System.Collections.Generic.IReadOnlyDictionary`2<Oculus.Interaction.PoseDetection.TransformFeature,Oculus.Interaction.PoseDetection.FeatureDescription> get_FeatureDescriptions()
    // Offset: 0x47F39AC
    static ::System::Collections::Generic::IReadOnlyDictionary_2<::Oculus::Interaction::PoseDetection::TransformFeature, ::Oculus::Interaction::PoseDetection::FeatureDescription*>* get_FeatureDescriptions();
    // static private System.Collections.Generic.IReadOnlyDictionary`2<Oculus.Interaction.PoseDetection.TransformFeature,Oculus.Interaction.PoseDetection.FeatureDescription> CreateFeatureDescriptions()
    // Offset: 0x47F3A04
    static ::System::Collections::Generic::IReadOnlyDictionary_2<::Oculus::Interaction::PoseDetection::TransformFeature, ::Oculus::Interaction::PoseDetection::FeatureDescription*>* CreateFeatureDescriptions();
    // static private Oculus.Interaction.PoseDetection.FeatureDescription CreateDesc(ref System.Int32 startIndex)
    // Offset: 0x47F3BB4
    static ::Oculus::Interaction::PoseDetection::FeatureDescription* CreateDesc(ByRef<int> startIndex);
    // static private System.Void .cctor()
    // Offset: 0x47F3D9C
    static void _cctor();
  }; // Oculus.Interaction.PoseDetection.TransformFeatureProperties
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::TransformFeatureProperties::get_FeatureDescriptions
// Il2CppName: get_FeatureDescriptions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IReadOnlyDictionary_2<::Oculus::Interaction::PoseDetection::TransformFeature, ::Oculus::Interaction::PoseDetection::FeatureDescription*>* (*)()>(&Oculus::Interaction::PoseDetection::TransformFeatureProperties::get_FeatureDescriptions)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::TransformFeatureProperties*), "get_FeatureDescriptions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::TransformFeatureProperties::CreateFeatureDescriptions
// Il2CppName: CreateFeatureDescriptions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IReadOnlyDictionary_2<::Oculus::Interaction::PoseDetection::TransformFeature, ::Oculus::Interaction::PoseDetection::FeatureDescription*>* (*)()>(&Oculus::Interaction::PoseDetection::TransformFeatureProperties::CreateFeatureDescriptions)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::TransformFeatureProperties*), "CreateFeatureDescriptions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::TransformFeatureProperties::CreateDesc
// Il2CppName: CreateDesc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::PoseDetection::FeatureDescription* (*)(ByRef<int>)>(&Oculus::Interaction::PoseDetection::TransformFeatureProperties::CreateDesc)> {
  static const MethodInfo* get() {
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::TransformFeatureProperties*), "CreateDesc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{startIndex});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::TransformFeatureProperties::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Oculus::Interaction::PoseDetection::TransformFeatureProperties::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::TransformFeatureProperties*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
