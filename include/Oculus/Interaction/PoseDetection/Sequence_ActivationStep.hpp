// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Oculus.Interaction.PoseDetection.Sequence
#include "Oculus/Interaction/PoseDetection/Sequence.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Object
  class Object;
}
// Forward declaring namespace: Oculus::Interaction
namespace Oculus::Interaction {
  // Forward declaring type: IActiveState
  class IActiveState;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::PoseDetection::Sequence::ActivationStep);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::PoseDetection::Sequence::ActivationStep*, "Oculus.Interaction.PoseDetection", "Sequence/ActivationStep");
// Type namespace: Oculus.Interaction.PoseDetection
namespace Oculus::Interaction::PoseDetection {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.PoseDetection.Sequence/ActivationStep
  // [TokenAttribute] Offset: FFFFFFFF
  class Sequence::ActivationStep : public ::Il2CppObject {
    public:
    public:
    // private UnityEngine.Object _activeState
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::Object* activeState;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.IActiveState <ActiveState>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::Oculus::Interaction::IActiveState* ActiveState;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::IActiveState*) == 0x8);
    // private System.Single _minActiveTime
    // Size: 0x4
    // Offset: 0x20
    float minActiveTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _maxStepTime
    // Size: 0x4
    // Offset: 0x24
    float maxStepTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: private UnityEngine.Object _activeState
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__activeState();
    // Get instance field reference: private Oculus.Interaction.IActiveState <ActiveState>k__BackingField
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::IActiveState*& dyn_$ActiveState$k__BackingField();
    // Get instance field reference: private System.Single _minActiveTime
    [[deprecated("Use field access instead!")]] float& dyn__minActiveTime();
    // Get instance field reference: private System.Single _maxStepTime
    [[deprecated("Use field access instead!")]] float& dyn__maxStepTime();
    // public Oculus.Interaction.IActiveState get_ActiveState()
    // Offset: 0x47F1A14
    ::Oculus::Interaction::IActiveState* get_ActiveState();
    // private System.Void set_ActiveState(Oculus.Interaction.IActiveState value)
    // Offset: 0x47F1A1C
    void set_ActiveState(::Oculus::Interaction::IActiveState* value);
    // public System.Single get_MinActiveTime()
    // Offset: 0x47F1A24
    float get_MinActiveTime();
    // public System.Single get_MaxStepTime()
    // Offset: 0x47F1A2C
    float get_MaxStepTime();
    // public System.Void .ctor()
    // Offset: 0x47F1A34
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Sequence::ActivationStep* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::PoseDetection::Sequence::ActivationStep::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Sequence::ActivationStep*, creationType>()));
    }
    // public System.Void .ctor(Oculus.Interaction.IActiveState activeState, System.Single minActiveTime, System.Single maxStepTime)
    // Offset: 0x47F1A3C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Sequence::ActivationStep* New_ctor(::Oculus::Interaction::IActiveState* activeState, float minActiveTime, float maxStepTime) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::PoseDetection::Sequence::ActivationStep::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Sequence::ActivationStep*, creationType>(activeState, minActiveTime, maxStepTime)));
    }
    // public System.Void Start()
    // Offset: 0x47F13F4
    void Start();
  }; // Oculus.Interaction.PoseDetection.Sequence/ActivationStep
  #pragma pack(pop)
  static check_size<sizeof(Sequence::ActivationStep), 36 + sizeof(float)> __Oculus_Interaction_PoseDetection_Sequence_ActivationStepSizeCheck;
  static_assert(sizeof(Sequence::ActivationStep) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::Sequence::ActivationStep::get_ActiveState
// Il2CppName: get_ActiveState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::IActiveState* (Oculus::Interaction::PoseDetection::Sequence::ActivationStep::*)()>(&Oculus::Interaction::PoseDetection::Sequence::ActivationStep::get_ActiveState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::Sequence::ActivationStep*), "get_ActiveState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::Sequence::ActivationStep::set_ActiveState
// Il2CppName: set_ActiveState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::Sequence::ActivationStep::*)(::Oculus::Interaction::IActiveState*)>(&Oculus::Interaction::PoseDetection::Sequence::ActivationStep::set_ActiveState)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IActiveState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::Sequence::ActivationStep*), "set_ActiveState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::Sequence::ActivationStep::get_MinActiveTime
// Il2CppName: get_MinActiveTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::PoseDetection::Sequence::ActivationStep::*)()>(&Oculus::Interaction::PoseDetection::Sequence::ActivationStep::get_MinActiveTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::Sequence::ActivationStep*), "get_MinActiveTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::Sequence::ActivationStep::get_MaxStepTime
// Il2CppName: get_MaxStepTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::PoseDetection::Sequence::ActivationStep::*)()>(&Oculus::Interaction::PoseDetection::Sequence::ActivationStep::get_MaxStepTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::Sequence::ActivationStep*), "get_MaxStepTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::Sequence::ActivationStep::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::Sequence::ActivationStep::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::Sequence::ActivationStep::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::Sequence::ActivationStep::*)()>(&Oculus::Interaction::PoseDetection::Sequence::ActivationStep::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::Sequence::ActivationStep*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
