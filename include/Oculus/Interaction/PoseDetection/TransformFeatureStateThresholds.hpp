// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
// Including type: Oculus.Interaction.PoseDetection.IFeatureThresholds`2
#include "Oculus/Interaction/PoseDetection/IFeatureThresholds_2.hpp"
// Including type: Oculus.Interaction.PoseDetection.TransformFeature
#include "Oculus/Interaction/PoseDetection/TransformFeature.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: IReadOnlyList`1<T>
  template<typename T>
  class IReadOnlyList_1;
}
// Forward declaring namespace: Oculus::Interaction::PoseDetection
namespace Oculus::Interaction::PoseDetection {
  // Forward declaring type: TransformFeatureThresholds
  class TransformFeatureThresholds;
  // Forward declaring type: IFeatureStateThresholds`2<TFeature, TFeatureState>
  template<typename TFeature, typename TFeatureState>
  class IFeatureStateThresholds_2;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.PoseDetection
namespace Oculus::Interaction::PoseDetection {
  // Forward declaring type: TransformFeatureStateThresholds
  class TransformFeatureStateThresholds;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::PoseDetection::TransformFeatureStateThresholds);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::PoseDetection::TransformFeatureStateThresholds*, "Oculus.Interaction.PoseDetection", "TransformFeatureStateThresholds");
// Type namespace: Oculus.Interaction.PoseDetection
namespace Oculus::Interaction::PoseDetection {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.PoseDetection.TransformFeatureStateThresholds
  // [TokenAttribute] Offset: FFFFFFFF
  // [CreateAssetMenuAttribute] Offset: FFFFFFFF
  class TransformFeatureStateThresholds : public ::UnityEngine::ScriptableObject/*, public ::Oculus::Interaction::PoseDetection::IFeatureThresholds_2<::Oculus::Interaction::PoseDetection::TransformFeature, ::StringW>*/ {
    public:
    public:
    // private System.Collections.Generic.List`1<Oculus.Interaction.PoseDetection.TransformFeatureThresholds> _featureThresholds
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::Oculus::Interaction::PoseDetection::TransformFeatureThresholds*>* featureThresholds;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Oculus::Interaction::PoseDetection::TransformFeatureThresholds*>*) == 0x8);
    // private System.Double _minTimeInState
    // Size: 0x8
    // Offset: 0x20
    double minTimeInState;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::PoseDetection::IFeatureThresholds_2<::Oculus::Interaction::PoseDetection::TransformFeature, ::StringW>
    operator ::Oculus::Interaction::PoseDetection::IFeatureThresholds_2<::Oculus::Interaction::PoseDetection::TransformFeature, ::StringW>() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::PoseDetection::IFeatureThresholds_2<::Oculus::Interaction::PoseDetection::TransformFeature, ::StringW>*>(this);
    }
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private System.Collections.Generic.List`1<Oculus.Interaction.PoseDetection.TransformFeatureThresholds> _featureThresholds
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Oculus::Interaction::PoseDetection::TransformFeatureThresholds*>*& dyn__featureThresholds();
    // Get instance field reference: private System.Double _minTimeInState
    [[deprecated("Use field access instead!")]] double& dyn__minTimeInState();
    // public System.Void Construct(System.Collections.Generic.List`1<Oculus.Interaction.PoseDetection.TransformFeatureThresholds> featureThresholds, System.Double minTimeInState)
    // Offset: 0x47F5794
    void Construct(::System::Collections::Generic::List_1<::Oculus::Interaction::PoseDetection::TransformFeatureThresholds*>* featureThresholds, double minTimeInState);
    // public System.Collections.Generic.IReadOnlyList`1<Oculus.Interaction.PoseDetection.IFeatureStateThresholds`2<Oculus.Interaction.PoseDetection.TransformFeature,System.String>> get_FeatureStateThresholds()
    // Offset: 0x47F57C0
    ::System::Collections::Generic::IReadOnlyList_1<::Oculus::Interaction::PoseDetection::IFeatureStateThresholds_2<::Oculus::Interaction::PoseDetection::TransformFeature, ::StringW>*>* get_FeatureStateThresholds();
    // public System.Double get_MinTimeInState()
    // Offset: 0x47F57C8
    double get_MinTimeInState();
    // public System.Void .ctor()
    // Offset: 0x47F57D0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TransformFeatureStateThresholds* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::PoseDetection::TransformFeatureStateThresholds::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TransformFeatureStateThresholds*, creationType>()));
    }
  }; // Oculus.Interaction.PoseDetection.TransformFeatureStateThresholds
  #pragma pack(pop)
  static check_size<sizeof(TransformFeatureStateThresholds), 32 + sizeof(double)> __Oculus_Interaction_PoseDetection_TransformFeatureStateThresholdsSizeCheck;
  static_assert(sizeof(TransformFeatureStateThresholds) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::TransformFeatureStateThresholds::Construct
// Il2CppName: Construct
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::TransformFeatureStateThresholds::*)(::System::Collections::Generic::List_1<::Oculus::Interaction::PoseDetection::TransformFeatureThresholds*>*, double)>(&Oculus::Interaction::PoseDetection::TransformFeatureStateThresholds::Construct)> {
  static const MethodInfo* get() {
    static auto* featureThresholds = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Interaction.PoseDetection", "TransformFeatureThresholds")})->byval_arg;
    static auto* minTimeInState = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::TransformFeatureStateThresholds*), "Construct", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{featureThresholds, minTimeInState});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::TransformFeatureStateThresholds::get_FeatureStateThresholds
// Il2CppName: get_FeatureStateThresholds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IReadOnlyList_1<::Oculus::Interaction::PoseDetection::IFeatureStateThresholds_2<::Oculus::Interaction::PoseDetection::TransformFeature, ::StringW>*>* (Oculus::Interaction::PoseDetection::TransformFeatureStateThresholds::*)()>(&Oculus::Interaction::PoseDetection::TransformFeatureStateThresholds::get_FeatureStateThresholds)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::TransformFeatureStateThresholds*), "get_FeatureStateThresholds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::TransformFeatureStateThresholds::get_MinTimeInState
// Il2CppName: get_MinTimeInState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (Oculus::Interaction::PoseDetection::TransformFeatureStateThresholds::*)()>(&Oculus::Interaction::PoseDetection::TransformFeatureStateThresholds::get_MinTimeInState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::TransformFeatureStateThresholds*), "get_MinTimeInState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::TransformFeatureStateThresholds::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
