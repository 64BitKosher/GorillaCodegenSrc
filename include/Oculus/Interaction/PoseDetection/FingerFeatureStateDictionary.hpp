// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Oculus.Interaction.PoseDetection.FingerFeature
#include "Oculus/Interaction/PoseDetection/FingerFeature.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction::Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: HandFinger
  struct HandFinger;
}
// Forward declaring namespace: Oculus::Interaction::PoseDetection
namespace Oculus::Interaction::PoseDetection {
  // Forward declaring type: FeatureStateProvider`2<TFeature, TFeatureState>
  template<typename TFeature, typename TFeatureState>
  class FeatureStateProvider_2;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.PoseDetection
namespace Oculus::Interaction::PoseDetection {
  // Forward declaring type: FingerFeatureStateDictionary
  class FingerFeatureStateDictionary;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::PoseDetection::FingerFeatureStateDictionary);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::PoseDetection::FingerFeatureStateDictionary*, "Oculus.Interaction.PoseDetection", "FingerFeatureStateDictionary");
// Type namespace: Oculus.Interaction.PoseDetection
namespace Oculus::Interaction::PoseDetection {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.PoseDetection.FingerFeatureStateDictionary
  // [TokenAttribute] Offset: FFFFFFFF
  class FingerFeatureStateDictionary : public ::Il2CppObject {
    public:
    // Nested type: ::Oculus::Interaction::PoseDetection::FingerFeatureStateDictionary::HandFingerState
    struct HandFingerState;
    // Size: 0x8
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Oculus.Interaction.PoseDetection.FingerFeatureStateDictionary/HandFingerState
    // [TokenAttribute] Offset: FFFFFFFF
    struct HandFingerState/*, public ::System::ValueType*/ {
      public:
      public:
      // public Oculus.Interaction.PoseDetection.FeatureStateProvider`2<Oculus.Interaction.PoseDetection.FingerFeature,System.String> StateProvider
      // Size: 0x8
      // Offset: 0x0
      ::Oculus::Interaction::PoseDetection::FeatureStateProvider_2<::Oculus::Interaction::PoseDetection::FingerFeature, ::StringW>* StateProvider;
      // Field size check
      static_assert(sizeof(::Oculus::Interaction::PoseDetection::FeatureStateProvider_2<::Oculus::Interaction::PoseDetection::FingerFeature, ::StringW>*) == 0x8);
      public:
      // Creating value type constructor for type: HandFingerState
      constexpr HandFingerState(::Oculus::Interaction::PoseDetection::FeatureStateProvider_2<::Oculus::Interaction::PoseDetection::FingerFeature, ::StringW>* StateProvider_ = {}) noexcept : StateProvider{StateProvider_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating conversion operator: operator ::Oculus::Interaction::PoseDetection::FeatureStateProvider_2<::Oculus::Interaction::PoseDetection::FingerFeature, ::StringW>*
      constexpr operator ::Oculus::Interaction::PoseDetection::FeatureStateProvider_2<::Oculus::Interaction::PoseDetection::FingerFeature, ::StringW>*() const noexcept {
        return StateProvider;
      }
      // Get instance field reference: public Oculus.Interaction.PoseDetection.FeatureStateProvider`2<Oculus.Interaction.PoseDetection.FingerFeature,System.String> StateProvider
      [[deprecated("Use field access instead!")]] ::Oculus::Interaction::PoseDetection::FeatureStateProvider_2<::Oculus::Interaction::PoseDetection::FingerFeature, ::StringW>*& dyn_StateProvider();
    }; // Oculus.Interaction.PoseDetection.FingerFeatureStateDictionary/HandFingerState
    #pragma pack(pop)
    static check_size<sizeof(FingerFeatureStateDictionary::HandFingerState), 0 + sizeof(::Oculus::Interaction::PoseDetection::FeatureStateProvider_2<::Oculus::Interaction::PoseDetection::FingerFeature, ::StringW>*)> __Oculus_Interaction_PoseDetection_FingerFeatureStateDictionary_HandFingerStateSizeCheck;
    static_assert(sizeof(FingerFeatureStateDictionary::HandFingerState) == 0x8);
    public:
    // private readonly Oculus.Interaction.PoseDetection.FingerFeatureStateDictionary/HandFingerState[] _fingerState
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<::Oculus::Interaction::PoseDetection::FingerFeatureStateDictionary::HandFingerState> fingerState;
    // Field size check
    static_assert(sizeof(::ArrayW<::Oculus::Interaction::PoseDetection::FingerFeatureStateDictionary::HandFingerState>) == 0x8);
    public:
    // Creating conversion operator: operator ::ArrayW<::Oculus::Interaction::PoseDetection::FingerFeatureStateDictionary::HandFingerState>
    constexpr operator ::ArrayW<::Oculus::Interaction::PoseDetection::FingerFeatureStateDictionary::HandFingerState>() const noexcept {
      return fingerState;
    }
    // Get instance field reference: private readonly Oculus.Interaction.PoseDetection.FingerFeatureStateDictionary/HandFingerState[] _fingerState
    [[deprecated("Use field access instead!")]] ::ArrayW<::Oculus::Interaction::PoseDetection::FingerFeatureStateDictionary::HandFingerState>& dyn__fingerState();
    // public System.Void InitializeFinger(Oculus.Interaction.Input.HandFinger finger, Oculus.Interaction.PoseDetection.FeatureStateProvider`2<Oculus.Interaction.PoseDetection.FingerFeature,System.String> stateProvider)
    // Offset: 0x47E9150
    void InitializeFinger(::Oculus::Interaction::Input::HandFinger finger, ::Oculus::Interaction::PoseDetection::FeatureStateProvider_2<::Oculus::Interaction::PoseDetection::FingerFeature, ::StringW>* stateProvider);
    // public Oculus.Interaction.PoseDetection.FeatureStateProvider`2<Oculus.Interaction.PoseDetection.FingerFeature,System.String> GetStateProvider(Oculus.Interaction.Input.HandFinger finger)
    // Offset: 0x47E91A8
    ::Oculus::Interaction::PoseDetection::FeatureStateProvider_2<::Oculus::Interaction::PoseDetection::FingerFeature, ::StringW>* GetStateProvider(::Oculus::Interaction::Input::HandFinger finger);
    // public System.Void .ctor()
    // Offset: 0x47E91D8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FingerFeatureStateDictionary* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::PoseDetection::FingerFeatureStateDictionary::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FingerFeatureStateDictionary*, creationType>()));
    }
  }; // Oculus.Interaction.PoseDetection.FingerFeatureStateDictionary
  #pragma pack(pop)
  static check_size<sizeof(FingerFeatureStateDictionary), 16 + sizeof(::ArrayW<::Oculus::Interaction::PoseDetection::FingerFeatureStateDictionary::HandFingerState>)> __Oculus_Interaction_PoseDetection_FingerFeatureStateDictionarySizeCheck;
  static_assert(sizeof(FingerFeatureStateDictionary) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::PoseDetection::FingerFeatureStateDictionary::HandFingerState, "Oculus.Interaction.PoseDetection", "FingerFeatureStateDictionary/HandFingerState");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::FingerFeatureStateDictionary::InitializeFinger
// Il2CppName: InitializeFinger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::FingerFeatureStateDictionary::*)(::Oculus::Interaction::Input::HandFinger, ::Oculus::Interaction::PoseDetection::FeatureStateProvider_2<::Oculus::Interaction::PoseDetection::FingerFeature, ::StringW>*)>(&Oculus::Interaction::PoseDetection::FingerFeatureStateDictionary::InitializeFinger)> {
  static const MethodInfo* get() {
    static auto* finger = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "HandFinger")->byval_arg;
    static auto* stateProvider = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Oculus.Interaction.PoseDetection", "FeatureStateProvider`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Interaction.PoseDetection", "FingerFeature"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::FingerFeatureStateDictionary*), "InitializeFinger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{finger, stateProvider});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::FingerFeatureStateDictionary::GetStateProvider
// Il2CppName: GetStateProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::PoseDetection::FeatureStateProvider_2<::Oculus::Interaction::PoseDetection::FingerFeature, ::StringW>* (Oculus::Interaction::PoseDetection::FingerFeatureStateDictionary::*)(::Oculus::Interaction::Input::HandFinger)>(&Oculus::Interaction::PoseDetection::FingerFeatureStateDictionary::GetStateProvider)> {
  static const MethodInfo* get() {
    static auto* finger = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "HandFinger")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::FingerFeatureStateDictionary*), "GetStateProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{finger});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::FingerFeatureStateDictionary::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
