// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: Oculus.Interaction.PoseDetection
namespace Oculus::Interaction::PoseDetection {
  // Forward declaring type: IFeatureStateThreshold`1<TFeatureState>
  template<typename TFeatureState>
  class IFeatureStateThreshold_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::Oculus::Interaction::PoseDetection::IFeatureStateThreshold_1, "Oculus.Interaction.PoseDetection", "IFeatureStateThreshold`1");
// Type namespace: Oculus.Interaction.PoseDetection
namespace Oculus::Interaction::PoseDetection {
  // WARNING Size may be invalid!
  // Autogenerated type: Oculus.Interaction.PoseDetection.IFeatureStateThreshold`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename TFeatureState>
  class IFeatureStateThreshold_1 {
    public:
    // public System.Single get_ToFirstWhenBelow()
    // Offset: 0xFFFFFFFFFFFFFFFF
    float get_ToFirstWhenBelow() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::PoseDetection::IFeatureStateThreshold_1::get_ToFirstWhenBelow");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Oculus::Interaction::PoseDetection::IFeatureStateThreshold_1<TFeatureState>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
    }
    // public System.Single get_ToSecondWhenAbove()
    // Offset: 0xFFFFFFFFFFFFFFFF
    float get_ToSecondWhenAbove() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::PoseDetection::IFeatureStateThreshold_1::get_ToSecondWhenAbove");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Oculus::Interaction::PoseDetection::IFeatureStateThreshold_1<TFeatureState>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
    }
    // public TFeatureState get_FirstState()
    // Offset: 0xFFFFFFFFFFFFFFFF
    TFeatureState get_FirstState() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::PoseDetection::IFeatureStateThreshold_1::get_FirstState");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Oculus::Interaction::PoseDetection::IFeatureStateThreshold_1<TFeatureState>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<TFeatureState, false>(this, ___internal__method);
    }
    // public TFeatureState get_SecondState()
    // Offset: 0xFFFFFFFFFFFFFFFF
    TFeatureState get_SecondState() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::PoseDetection::IFeatureStateThreshold_1::get_SecondState");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Oculus::Interaction::PoseDetection::IFeatureStateThreshold_1<TFeatureState>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<TFeatureState, false>(this, ___internal__method);
    }
  }; // Oculus.Interaction.PoseDetection.IFeatureStateThreshold`1
  // Could not write size check! Type: Oculus.Interaction.PoseDetection.IFeatureStateThreshold`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
