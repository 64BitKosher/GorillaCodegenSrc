// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Oculus.Interaction.PoseDetection.FeatureConfigBuilder
#include "Oculus/Interaction/PoseDetection/FeatureConfigBuilder.hpp"
// Including type: System.MulticastDelegate
#include "System/MulticastDelegate.hpp"
// Including type: Oculus.Interaction.PoseDetection.FeatureStateActiveMode
#include "Oculus/Interaction/PoseDetection/FeatureStateActiveMode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction::PoseDetection
namespace Oculus::Interaction::PoseDetection {
  // Skipping declaration: BuildStateDelegate because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IAsyncResult
  class IAsyncResult;
  // Forward declaring type: AsyncCallback
  class AsyncCallback;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::Oculus::Interaction::PoseDetection::FeatureConfigBuilder::BuildCondition_1, "Oculus.Interaction.PoseDetection", "FeatureConfigBuilder/BuildCondition`1");
// Type namespace: Oculus.Interaction.PoseDetection
namespace Oculus::Interaction::PoseDetection {
  // WARNING Size may be invalid!
  // Autogenerated type: Oculus.Interaction.PoseDetection.FeatureConfigBuilder/BuildCondition`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename TBuildState>
  class FeatureConfigBuilder::BuildCondition_1 : public ::Il2CppObject {
    public:
    // Nested type: ::Oculus::Interaction::PoseDetection::FeatureConfigBuilder::BuildCondition_1::BuildStateDelegate<TBuildState>
    class BuildStateDelegate;
    // WARNING Size may be invalid!
    // Autogenerated type: Oculus.Interaction.PoseDetection.FeatureConfigBuilder/BuildCondition`1/BuildStateDelegate
    // [TokenAttribute] Offset: FFFFFFFF
    class BuildStateDelegate : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::System::MulticastDelegate {
      public:
      using declaring_type = FeatureConfigBuilder::BuildCondition_1<TBuildState>*;
      static constexpr std::string_view NESTED_NAME = "BuildStateDelegate";
      static constexpr bool IS_VALUE_TYPE = false;
      // public System.Void .ctor(System.Object object, System.IntPtr method)
      // Offset: 0xFFFFFFFFFFFFFFFF
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename FeatureConfigBuilder::BuildCondition_1<TBuildState>::BuildStateDelegate* New_ctor(::Il2CppObject* object, ::System::IntPtr method) {
        static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::PoseDetection::FeatureConfigBuilder::BuildCondition_1::BuildStateDelegate::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename FeatureConfigBuilder::BuildCondition_1<TBuildState>::BuildStateDelegate*, creationType>(object, method)));
      }
      // public TBuildState Invoke(Oculus.Interaction.PoseDetection.FeatureStateActiveMode mode)
      // Offset: 0xFFFFFFFFFFFFFFFF
      TBuildState Invoke(::Oculus::Interaction::PoseDetection::FeatureStateActiveMode mode) {
        static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::PoseDetection::FeatureConfigBuilder::BuildCondition_1::BuildStateDelegate::Invoke");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::Oculus::Interaction::PoseDetection::FeatureConfigBuilder::BuildCondition_1<TBuildState>::BuildStateDelegate*), -1));
        return ::il2cpp_utils::RunMethodRethrow<TBuildState, false>(this, ___internal__method, mode);
      }
      // public System.IAsyncResult BeginInvoke(Oculus.Interaction.PoseDetection.FeatureStateActiveMode mode, System.AsyncCallback callback, System.Object object)
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::System::IAsyncResult* BeginInvoke(::Oculus::Interaction::PoseDetection::FeatureStateActiveMode mode, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
        static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::PoseDetection::FeatureConfigBuilder::BuildCondition_1::BuildStateDelegate::BeginInvoke");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::Oculus::Interaction::PoseDetection::FeatureConfigBuilder::BuildCondition_1<TBuildState>::BuildStateDelegate*), -1));
        return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, mode, callback, object);
      }
      // public TBuildState EndInvoke(System.IAsyncResult result)
      // Offset: 0xFFFFFFFFFFFFFFFF
      TBuildState EndInvoke(::System::IAsyncResult* result) {
        static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::PoseDetection::FeatureConfigBuilder::BuildCondition_1::BuildStateDelegate::EndInvoke");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::Oculus::Interaction::PoseDetection::FeatureConfigBuilder::BuildCondition_1<TBuildState>::BuildStateDelegate*), -1));
        return ::il2cpp_utils::RunMethodRethrow<TBuildState, false>(this, ___internal__method, result);
      }
    }; // Oculus.Interaction.PoseDetection.FeatureConfigBuilder/BuildCondition`1/BuildStateDelegate
    // Could not write size check! Type: Oculus.Interaction.PoseDetection.FeatureConfigBuilder/BuildCondition`1/BuildStateDelegate is generic, or has no fields that are valid for size checks!
    public:
    // private readonly Oculus.Interaction.PoseDetection.FeatureConfigBuilder/BuildCondition`1/BuildStateDelegate<TBuildState> _buildStateFn
    // Size: 0x8
    // Offset: 0x0
    typename ::Oculus::Interaction::PoseDetection::FeatureConfigBuilder::BuildCondition_1<TBuildState>::BuildStateDelegate* buildStateFn;
    // Field size check
    static_assert(sizeof(typename ::Oculus::Interaction::PoseDetection::FeatureConfigBuilder::BuildCondition_1<TBuildState>::BuildStateDelegate*) == 0x8);
    public:
    // Creating conversion operator: operator typename ::Oculus::Interaction::PoseDetection::FeatureConfigBuilder::BuildCondition_1<TBuildState>::BuildStateDelegate*
    constexpr operator typename ::Oculus::Interaction::PoseDetection::FeatureConfigBuilder::BuildCondition_1<TBuildState>::BuildStateDelegate*() const noexcept {
      return buildStateFn;
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly Oculus.Interaction.PoseDetection.FeatureConfigBuilder/BuildCondition`1/BuildStateDelegate<TBuildState> _buildStateFn
    [[deprecated("Use field access instead!")]] typename ::Oculus::Interaction::PoseDetection::FeatureConfigBuilder::BuildCondition_1<TBuildState>::BuildStateDelegate*& dyn__buildStateFn() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::PoseDetection::FeatureConfigBuilder::BuildCondition_1::dyn__buildStateFn");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_buildStateFn"))->offset;
      return *reinterpret_cast<typename ::Oculus::Interaction::PoseDetection::FeatureConfigBuilder::BuildCondition_1<TBuildState>::BuildStateDelegate**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Void .ctor(Oculus.Interaction.PoseDetection.FeatureConfigBuilder/BuildCondition`1/BuildStateDelegate<TBuildState> buildStateFn)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FeatureConfigBuilder::BuildCondition_1<TBuildState>* New_ctor(typename ::Oculus::Interaction::PoseDetection::FeatureConfigBuilder::BuildCondition_1<TBuildState>::BuildStateDelegate* buildStateFn) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::PoseDetection::FeatureConfigBuilder::BuildCondition_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FeatureConfigBuilder::BuildCondition_1<TBuildState>*, creationType>(buildStateFn)));
    }
    // public TBuildState get_Is()
    // Offset: 0xFFFFFFFFFFFFFFFF
    TBuildState get_Is() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::PoseDetection::FeatureConfigBuilder::BuildCondition_1::get_Is");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Is", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<TBuildState, false>(this, ___internal__method);
    }
    // public TBuildState get_IsNot()
    // Offset: 0xFFFFFFFFFFFFFFFF
    TBuildState get_IsNot() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::PoseDetection::FeatureConfigBuilder::BuildCondition_1::get_IsNot");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsNot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<TBuildState, false>(this, ___internal__method);
    }
  }; // Oculus.Interaction.PoseDetection.FeatureConfigBuilder/BuildCondition`1
  // Could not write size check! Type: Oculus.Interaction.PoseDetection.FeatureConfigBuilder/BuildCondition`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
