// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Object because it is already included!
}
// Forward declaring namespace: Oculus::Interaction::Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: IHmd
  class IHmd;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.PoseDetection
namespace Oculus::Interaction::PoseDetection {
  // Forward declaring type: HmdOffset
  class HmdOffset;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::PoseDetection::HmdOffset);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::PoseDetection::HmdOffset*, "Oculus.Interaction.PoseDetection", "HmdOffset");
// Type namespace: Oculus.Interaction.PoseDetection
namespace Oculus::Interaction::PoseDetection {
  // Size: 0x4C
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.PoseDetection.HmdOffset
  // [TokenAttribute] Offset: FFFFFFFF
  class HmdOffset : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.Object _hmd
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Object* hmd;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.Input.IHmd Hmd
    // Size: 0x8
    // Offset: 0x28
    ::Oculus::Interaction::Input::IHmd* Hmd;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::IHmd*) == 0x8);
    // private UnityEngine.Vector3 _offsetTranslation
    // Size: 0xC
    // Offset: 0x30
    ::UnityEngine::Vector3 offsetTranslation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 _offsetRotation
    // Size: 0xC
    // Offset: 0x3C
    ::UnityEngine::Vector3 offsetRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Boolean _disablePitchFromSource
    // Size: 0x1
    // Offset: 0x48
    bool disablePitchFromSource;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _disableYawFromSource
    // Size: 0x1
    // Offset: 0x49
    bool disableYawFromSource;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _disableRollFromSource
    // Size: 0x1
    // Offset: 0x4A
    bool disableRollFromSource;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean _started
    // Size: 0x1
    // Offset: 0x4B
    bool started;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private UnityEngine.Object _hmd
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__hmd();
    // Get instance field reference: private Oculus.Interaction.Input.IHmd Hmd
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::IHmd*& dyn_Hmd();
    // Get instance field reference: private UnityEngine.Vector3 _offsetTranslation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__offsetTranslation();
    // Get instance field reference: private UnityEngine.Vector3 _offsetRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__offsetRotation();
    // Get instance field reference: private System.Boolean _disablePitchFromSource
    [[deprecated("Use field access instead!")]] bool& dyn__disablePitchFromSource();
    // Get instance field reference: private System.Boolean _disableYawFromSource
    [[deprecated("Use field access instead!")]] bool& dyn__disableYawFromSource();
    // Get instance field reference: private System.Boolean _disableRollFromSource
    [[deprecated("Use field access instead!")]] bool& dyn__disableRollFromSource();
    // Get instance field reference: protected System.Boolean _started
    [[deprecated("Use field access instead!")]] bool& dyn__started();
    // protected System.Void Awake()
    // Offset: 0x47EBA74
    void Awake();
    // protected System.Void Start()
    // Offset: 0x47EBADC
    void Start();
    // protected System.Void OnEnable()
    // Offset: 0x47EBB14
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x47EBC04
    void OnDisable();
    // protected System.Void HandleHmdUpdated()
    // Offset: 0x47EBCF4
    void HandleHmdUpdated();
    // public System.Void InjectAllHmdOffset(Oculus.Interaction.Input.IHmd hmd)
    // Offset: 0x47EC154
    void InjectAllHmdOffset(::Oculus::Interaction::Input::IHmd* hmd);
    // public System.Void InjectHmd(Oculus.Interaction.Input.IHmd hmd)
    // Offset: 0x47EC158
    void InjectHmd(::Oculus::Interaction::Input::IHmd* hmd);
    // public System.Void InjectOptionalOffsetTranslation(UnityEngine.Vector3 val)
    // Offset: 0x47EC228
    void InjectOptionalOffsetTranslation(::UnityEngine::Vector3 val);
    // public System.Void InjectOptionalOffsetRotation(UnityEngine.Vector3 val)
    // Offset: 0x47EC234
    void InjectOptionalOffsetRotation(::UnityEngine::Vector3 val);
    // public System.Void InjectOptionalDisablePitchFromSource(System.Boolean val)
    // Offset: 0x47EC240
    void InjectOptionalDisablePitchFromSource(bool val);
    // public System.Void InjectOptionalDisableYawFromSource(System.Boolean val)
    // Offset: 0x47EC24C
    void InjectOptionalDisableYawFromSource(bool val);
    // public System.Void InjectOptionalDisableRollFromSource(System.Boolean val)
    // Offset: 0x47EC258
    void InjectOptionalDisableRollFromSource(bool val);
    // public System.Void .ctor()
    // Offset: 0x47EC264
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HmdOffset* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::PoseDetection::HmdOffset::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HmdOffset*, creationType>()));
    }
  }; // Oculus.Interaction.PoseDetection.HmdOffset
  #pragma pack(pop)
  static check_size<sizeof(HmdOffset), 75 + sizeof(bool)> __Oculus_Interaction_PoseDetection_HmdOffsetSizeCheck;
  static_assert(sizeof(HmdOffset) == 0x4C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::HmdOffset::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::HmdOffset::*)()>(&Oculus::Interaction::PoseDetection::HmdOffset::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::HmdOffset*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::HmdOffset::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::HmdOffset::*)()>(&Oculus::Interaction::PoseDetection::HmdOffset::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::HmdOffset*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::HmdOffset::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::HmdOffset::*)()>(&Oculus::Interaction::PoseDetection::HmdOffset::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::HmdOffset*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::HmdOffset::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::HmdOffset::*)()>(&Oculus::Interaction::PoseDetection::HmdOffset::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::HmdOffset*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::HmdOffset::HandleHmdUpdated
// Il2CppName: HandleHmdUpdated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::HmdOffset::*)()>(&Oculus::Interaction::PoseDetection::HmdOffset::HandleHmdUpdated)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::HmdOffset*), "HandleHmdUpdated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::HmdOffset::InjectAllHmdOffset
// Il2CppName: InjectAllHmdOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::HmdOffset::*)(::Oculus::Interaction::Input::IHmd*)>(&Oculus::Interaction::PoseDetection::HmdOffset::InjectAllHmdOffset)> {
  static const MethodInfo* get() {
    static auto* hmd = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHmd")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::HmdOffset*), "InjectAllHmdOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hmd});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::HmdOffset::InjectHmd
// Il2CppName: InjectHmd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::HmdOffset::*)(::Oculus::Interaction::Input::IHmd*)>(&Oculus::Interaction::PoseDetection::HmdOffset::InjectHmd)> {
  static const MethodInfo* get() {
    static auto* hmd = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHmd")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::HmdOffset*), "InjectHmd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hmd});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::HmdOffset::InjectOptionalOffsetTranslation
// Il2CppName: InjectOptionalOffsetTranslation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::HmdOffset::*)(::UnityEngine::Vector3)>(&Oculus::Interaction::PoseDetection::HmdOffset::InjectOptionalOffsetTranslation)> {
  static const MethodInfo* get() {
    static auto* val = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::HmdOffset*), "InjectOptionalOffsetTranslation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{val});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::HmdOffset::InjectOptionalOffsetRotation
// Il2CppName: InjectOptionalOffsetRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::HmdOffset::*)(::UnityEngine::Vector3)>(&Oculus::Interaction::PoseDetection::HmdOffset::InjectOptionalOffsetRotation)> {
  static const MethodInfo* get() {
    static auto* val = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::HmdOffset*), "InjectOptionalOffsetRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{val});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::HmdOffset::InjectOptionalDisablePitchFromSource
// Il2CppName: InjectOptionalDisablePitchFromSource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::HmdOffset::*)(bool)>(&Oculus::Interaction::PoseDetection::HmdOffset::InjectOptionalDisablePitchFromSource)> {
  static const MethodInfo* get() {
    static auto* val = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::HmdOffset*), "InjectOptionalDisablePitchFromSource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{val});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::HmdOffset::InjectOptionalDisableYawFromSource
// Il2CppName: InjectOptionalDisableYawFromSource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::HmdOffset::*)(bool)>(&Oculus::Interaction::PoseDetection::HmdOffset::InjectOptionalDisableYawFromSource)> {
  static const MethodInfo* get() {
    static auto* val = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::HmdOffset*), "InjectOptionalDisableYawFromSource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{val});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::HmdOffset::InjectOptionalDisableRollFromSource
// Il2CppName: InjectOptionalDisableRollFromSource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::HmdOffset::*)(bool)>(&Oculus::Interaction::PoseDetection::HmdOffset::InjectOptionalDisableRollFromSource)> {
  static const MethodInfo* get() {
    static auto* val = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::HmdOffset*), "InjectOptionalDisableRollFromSource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{val});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::HmdOffset::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
