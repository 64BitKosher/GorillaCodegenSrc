// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Oculus.Interaction.PoseDetection.JointVelocityActiveState
#include "Oculus/Interaction/PoseDetection/JointVelocityActiveState.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::PoseDetection::JointVelocityActiveState::HandAxis, "Oculus.Interaction.PoseDetection", "JointVelocityActiveState/HandAxis");
// Type namespace: Oculus.Interaction.PoseDetection
namespace Oculus::Interaction::PoseDetection {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.PoseDetection.JointVelocityActiveState/HandAxis
  // [TokenAttribute] Offset: FFFFFFFF
  struct JointVelocityActiveState::HandAxis/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: HandAxis
    constexpr HandAxis(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public Oculus.Interaction.PoseDetection.JointVelocityActiveState/HandAxis PalmForward
    static constexpr const int PalmForward = 0;
    // Get static field: static public Oculus.Interaction.PoseDetection.JointVelocityActiveState/HandAxis PalmForward
    static ::Oculus::Interaction::PoseDetection::JointVelocityActiveState::HandAxis _get_PalmForward();
    // Set static field: static public Oculus.Interaction.PoseDetection.JointVelocityActiveState/HandAxis PalmForward
    static void _set_PalmForward(::Oculus::Interaction::PoseDetection::JointVelocityActiveState::HandAxis value);
    // static field const value: static public Oculus.Interaction.PoseDetection.JointVelocityActiveState/HandAxis PalmBackward
    static constexpr const int PalmBackward = 1;
    // Get static field: static public Oculus.Interaction.PoseDetection.JointVelocityActiveState/HandAxis PalmBackward
    static ::Oculus::Interaction::PoseDetection::JointVelocityActiveState::HandAxis _get_PalmBackward();
    // Set static field: static public Oculus.Interaction.PoseDetection.JointVelocityActiveState/HandAxis PalmBackward
    static void _set_PalmBackward(::Oculus::Interaction::PoseDetection::JointVelocityActiveState::HandAxis value);
    // static field const value: static public Oculus.Interaction.PoseDetection.JointVelocityActiveState/HandAxis WristUp
    static constexpr const int WristUp = 2;
    // Get static field: static public Oculus.Interaction.PoseDetection.JointVelocityActiveState/HandAxis WristUp
    static ::Oculus::Interaction::PoseDetection::JointVelocityActiveState::HandAxis _get_WristUp();
    // Set static field: static public Oculus.Interaction.PoseDetection.JointVelocityActiveState/HandAxis WristUp
    static void _set_WristUp(::Oculus::Interaction::PoseDetection::JointVelocityActiveState::HandAxis value);
    // static field const value: static public Oculus.Interaction.PoseDetection.JointVelocityActiveState/HandAxis WristDown
    static constexpr const int WristDown = 3;
    // Get static field: static public Oculus.Interaction.PoseDetection.JointVelocityActiveState/HandAxis WristDown
    static ::Oculus::Interaction::PoseDetection::JointVelocityActiveState::HandAxis _get_WristDown();
    // Set static field: static public Oculus.Interaction.PoseDetection.JointVelocityActiveState/HandAxis WristDown
    static void _set_WristDown(::Oculus::Interaction::PoseDetection::JointVelocityActiveState::HandAxis value);
    // static field const value: static public Oculus.Interaction.PoseDetection.JointVelocityActiveState/HandAxis WristForward
    static constexpr const int WristForward = 4;
    // Get static field: static public Oculus.Interaction.PoseDetection.JointVelocityActiveState/HandAxis WristForward
    static ::Oculus::Interaction::PoseDetection::JointVelocityActiveState::HandAxis _get_WristForward();
    // Set static field: static public Oculus.Interaction.PoseDetection.JointVelocityActiveState/HandAxis WristForward
    static void _set_WristForward(::Oculus::Interaction::PoseDetection::JointVelocityActiveState::HandAxis value);
    // static field const value: static public Oculus.Interaction.PoseDetection.JointVelocityActiveState/HandAxis WristBackward
    static constexpr const int WristBackward = 5;
    // Get static field: static public Oculus.Interaction.PoseDetection.JointVelocityActiveState/HandAxis WristBackward
    static ::Oculus::Interaction::PoseDetection::JointVelocityActiveState::HandAxis _get_WristBackward();
    // Set static field: static public Oculus.Interaction.PoseDetection.JointVelocityActiveState/HandAxis WristBackward
    static void _set_WristBackward(::Oculus::Interaction::PoseDetection::JointVelocityActiveState::HandAxis value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // Oculus.Interaction.PoseDetection.JointVelocityActiveState/HandAxis
  #pragma pack(pop)
  static check_size<sizeof(JointVelocityActiveState::HandAxis), 0 + sizeof(int)> __Oculus_Interaction_PoseDetection_JointVelocityActiveState_HandAxisSizeCheck;
  static_assert(sizeof(JointVelocityActiveState::HandAxis) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
