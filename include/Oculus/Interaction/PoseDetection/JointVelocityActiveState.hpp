// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Oculus.Interaction.IActiveState
#include "Oculus/Interaction/IActiveState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction::PoseDetection
namespace Oculus::Interaction::PoseDetection {
  // Forward declaring type: JointDeltaConfig
  class JointDeltaConfig;
  // Forward declaring type: IJointDeltaProvider
  class IJointDeltaProvider;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Object because it is already included!
  // Forward declaring type: Pose
  struct Pose;
}
// Forward declaring namespace: Oculus::Interaction::Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: IHand
  class IHand;
  // Forward declaring type: IHmd
  class IHmd;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: IReadOnlyList`1<T>
  template<typename T>
  class IReadOnlyList_1;
  // Forward declaring type: IReadOnlyDictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class IReadOnlyDictionary_2;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`1<TResult>
  template<typename TResult>
  class Func_1;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.PoseDetection
namespace Oculus::Interaction::PoseDetection {
  // Forward declaring type: JointVelocityActiveState
  class JointVelocityActiveState;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::PoseDetection::JointVelocityActiveState);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::PoseDetection::JointVelocityActiveState*, "Oculus.Interaction.PoseDetection", "JointVelocityActiveState");
// Type namespace: Oculus.Interaction.PoseDetection
namespace Oculus::Interaction::PoseDetection {
  // Size: 0x8F
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.PoseDetection.JointVelocityActiveState
  // [TokenAttribute] Offset: FFFFFFFF
  class JointVelocityActiveState : public ::UnityEngine::MonoBehaviour/*, public ::Oculus::Interaction::IActiveState*/ {
    public:
    // Nested type: ::Oculus::Interaction::PoseDetection::JointVelocityActiveState::RelativeTo
    struct RelativeTo;
    // Nested type: ::Oculus::Interaction::PoseDetection::JointVelocityActiveState::WorldAxis
    struct WorldAxis;
    // Nested type: ::Oculus::Interaction::PoseDetection::JointVelocityActiveState::HeadAxis
    struct HeadAxis;
    // Nested type: ::Oculus::Interaction::PoseDetection::JointVelocityActiveState::HandAxis
    struct HandAxis;
    // Nested type: ::Oculus::Interaction::PoseDetection::JointVelocityActiveState::JointVelocityFeatureState
    struct JointVelocityFeatureState;
    // Nested type: ::Oculus::Interaction::PoseDetection::JointVelocityActiveState::JointVelocityFeatureConfigList
    class JointVelocityFeatureConfigList;
    // Nested type: ::Oculus::Interaction::PoseDetection::JointVelocityActiveState::JointVelocityFeatureConfig
    class JointVelocityFeatureConfig;
    // Nested type: ::Oculus::Interaction::PoseDetection::JointVelocityActiveState::$$c
    class $$c;
    // Size: 0x10
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Oculus.Interaction.PoseDetection.JointVelocityActiveState/JointVelocityFeatureState
    // [TokenAttribute] Offset: FFFFFFFF
    struct JointVelocityFeatureState/*, public ::System::ValueType*/ {
      public:
      public:
      // public readonly UnityEngine.Vector3 TargetVector
      // Size: 0xC
      // Offset: 0x0
      ::UnityEngine::Vector3 TargetVector;
      // Field size check
      static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
      // public readonly System.Single Amount
      // Size: 0x4
      // Offset: 0xC
      float Amount;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      public:
      // Creating value type constructor for type: JointVelocityFeatureState
      constexpr JointVelocityFeatureState(::UnityEngine::Vector3 TargetVector_ = {}, float Amount_ = {}) noexcept : TargetVector{TargetVector_}, Amount{Amount_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public readonly UnityEngine.Vector3 TargetVector
      [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_TargetVector();
      // Get instance field reference: public readonly System.Single Amount
      [[deprecated("Use field access instead!")]] float& dyn_Amount();
      // public System.Void .ctor(UnityEngine.Vector3 targetVector, System.Single velocity)
      // Offset: 0x47F10AC
      // ABORTED: conflicts with another method.  JointVelocityFeatureState(::UnityEngine::Vector3 targetVector, float velocity);
    }; // Oculus.Interaction.PoseDetection.JointVelocityActiveState/JointVelocityFeatureState
    #pragma pack(pop)
    static check_size<sizeof(JointVelocityActiveState::JointVelocityFeatureState), 12 + sizeof(float)> __Oculus_Interaction_PoseDetection_JointVelocityActiveState_JointVelocityFeatureStateSizeCheck;
    static_assert(sizeof(JointVelocityActiveState::JointVelocityFeatureState) == 0x10);
    public:
    // private UnityEngine.Object _hand
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Object* hand;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.Input.IHand <Hand>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    ::Oculus::Interaction::Input::IHand* Hand;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::IHand*) == 0x8);
    // private UnityEngine.Object _jointDeltaProvider
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Object* jointDeltaProvider;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.PoseDetection.IJointDeltaProvider <JointDeltaProvider>k__BackingField
    // Size: 0x8
    // Offset: 0x38
    ::Oculus::Interaction::PoseDetection::IJointDeltaProvider* JointDeltaProvider;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::PoseDetection::IJointDeltaProvider*) == 0x8);
    // private UnityEngine.Object _hmd
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Object* hmd;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.Input.IHmd <Hmd>k__BackingField
    // Size: 0x8
    // Offset: 0x48
    ::Oculus::Interaction::Input::IHmd* Hmd;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::IHmd*) == 0x8);
    // private Oculus.Interaction.PoseDetection.JointVelocityActiveState/JointVelocityFeatureConfigList _featureConfigs
    // Size: 0x8
    // Offset: 0x50
    ::Oculus::Interaction::PoseDetection::JointVelocityActiveState::JointVelocityFeatureConfigList* featureConfigs;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::PoseDetection::JointVelocityActiveState::JointVelocityFeatureConfigList*) == 0x8);
    // private System.Single _minVelocity
    // Size: 0x4
    // Offset: 0x58
    float minVelocity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _thresholdWidth
    // Size: 0x4
    // Offset: 0x5C
    float thresholdWidth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _minTimeInState
    // Size: 0x4
    // Offset: 0x60
    float minTimeInState;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: minTimeInState and: featureStates
    char __padding9[0x4] = {};
    // private System.Collections.Generic.Dictionary`2<Oculus.Interaction.PoseDetection.JointVelocityActiveState/JointVelocityFeatureConfig,Oculus.Interaction.PoseDetection.JointVelocityActiveState/JointVelocityFeatureState> _featureStates
    // Size: 0x8
    // Offset: 0x68
    ::System::Collections::Generic::Dictionary_2<::Oculus::Interaction::PoseDetection::JointVelocityActiveState::JointVelocityFeatureConfig*, ::Oculus::Interaction::PoseDetection::JointVelocityActiveState::JointVelocityFeatureState>* featureStates;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::Oculus::Interaction::PoseDetection::JointVelocityActiveState::JointVelocityFeatureConfig*, ::Oculus::Interaction::PoseDetection::JointVelocityActiveState::JointVelocityFeatureState>*) == 0x8);
    // private Oculus.Interaction.PoseDetection.JointDeltaConfig _jointDeltaConfig
    // Size: 0x8
    // Offset: 0x70
    ::Oculus::Interaction::PoseDetection::JointDeltaConfig* jointDeltaConfig;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::PoseDetection::JointDeltaConfig*) == 0x8);
    // private System.Func`1<System.Single> _timeProvider
    // Size: 0x8
    // Offset: 0x78
    ::System::Func_1<float>* timeProvider;
    // Field size check
    static_assert(sizeof(::System::Func_1<float>*) == 0x8);
    // private System.Int32 _lastStateUpdateFrame
    // Size: 0x4
    // Offset: 0x80
    int lastStateUpdateFrame;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single _lastStateChangeTime
    // Size: 0x4
    // Offset: 0x84
    float lastStateChangeTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _lastUpdateTime
    // Size: 0x4
    // Offset: 0x88
    float lastUpdateTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _internalState
    // Size: 0x1
    // Offset: 0x8C
    bool internalState;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _activeState
    // Size: 0x1
    // Offset: 0x8D
    bool activeState;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean _started
    // Size: 0x1
    // Offset: 0x8E
    bool started;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::IActiveState
    operator ::Oculus::Interaction::IActiveState() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::IActiveState*>(this);
    }
    // Get instance field reference: private UnityEngine.Object _hand
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__hand();
    // Get instance field reference: private Oculus.Interaction.Input.IHand <Hand>k__BackingField
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::IHand*& dyn_$Hand$k__BackingField();
    // Get instance field reference: private UnityEngine.Object _jointDeltaProvider
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__jointDeltaProvider();
    // Get instance field reference: private Oculus.Interaction.PoseDetection.IJointDeltaProvider <JointDeltaProvider>k__BackingField
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::PoseDetection::IJointDeltaProvider*& dyn_$JointDeltaProvider$k__BackingField();
    // Get instance field reference: private UnityEngine.Object _hmd
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__hmd();
    // Get instance field reference: private Oculus.Interaction.Input.IHmd <Hmd>k__BackingField
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::IHmd*& dyn_$Hmd$k__BackingField();
    // Get instance field reference: private Oculus.Interaction.PoseDetection.JointVelocityActiveState/JointVelocityFeatureConfigList _featureConfigs
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::PoseDetection::JointVelocityActiveState::JointVelocityFeatureConfigList*& dyn__featureConfigs();
    // Get instance field reference: private System.Single _minVelocity
    [[deprecated("Use field access instead!")]] float& dyn__minVelocity();
    // Get instance field reference: private System.Single _thresholdWidth
    [[deprecated("Use field access instead!")]] float& dyn__thresholdWidth();
    // Get instance field reference: private System.Single _minTimeInState
    [[deprecated("Use field access instead!")]] float& dyn__minTimeInState();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<Oculus.Interaction.PoseDetection.JointVelocityActiveState/JointVelocityFeatureConfig,Oculus.Interaction.PoseDetection.JointVelocityActiveState/JointVelocityFeatureState> _featureStates
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::Oculus::Interaction::PoseDetection::JointVelocityActiveState::JointVelocityFeatureConfig*, ::Oculus::Interaction::PoseDetection::JointVelocityActiveState::JointVelocityFeatureState>*& dyn__featureStates();
    // Get instance field reference: private Oculus.Interaction.PoseDetection.JointDeltaConfig _jointDeltaConfig
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::PoseDetection::JointDeltaConfig*& dyn__jointDeltaConfig();
    // Get instance field reference: private System.Func`1<System.Single> _timeProvider
    [[deprecated("Use field access instead!")]] ::System::Func_1<float>*& dyn__timeProvider();
    // Get instance field reference: private System.Int32 _lastStateUpdateFrame
    [[deprecated("Use field access instead!")]] int& dyn__lastStateUpdateFrame();
    // Get instance field reference: private System.Single _lastStateChangeTime
    [[deprecated("Use field access instead!")]] float& dyn__lastStateChangeTime();
    // Get instance field reference: private System.Single _lastUpdateTime
    [[deprecated("Use field access instead!")]] float& dyn__lastUpdateTime();
    // Get instance field reference: private System.Boolean _internalState
    [[deprecated("Use field access instead!")]] bool& dyn__internalState();
    // Get instance field reference: private System.Boolean _activeState
    [[deprecated("Use field access instead!")]] bool& dyn__activeState();
    // Get instance field reference: protected System.Boolean _started
    [[deprecated("Use field access instead!")]] bool& dyn__started();
    // public Oculus.Interaction.Input.IHand get_Hand()
    // Offset: 0x47EF51C
    ::Oculus::Interaction::Input::IHand* get_Hand();
    // private System.Void set_Hand(Oculus.Interaction.Input.IHand value)
    // Offset: 0x47EF524
    void set_Hand(::Oculus::Interaction::Input::IHand* value);
    // public Oculus.Interaction.PoseDetection.IJointDeltaProvider get_JointDeltaProvider()
    // Offset: 0x47EF52C
    ::Oculus::Interaction::PoseDetection::IJointDeltaProvider* get_JointDeltaProvider();
    // private System.Void set_JointDeltaProvider(Oculus.Interaction.PoseDetection.IJointDeltaProvider value)
    // Offset: 0x47EF534
    void set_JointDeltaProvider(::Oculus::Interaction::PoseDetection::IJointDeltaProvider* value);
    // public Oculus.Interaction.Input.IHmd get_Hmd()
    // Offset: 0x47EF53C
    ::Oculus::Interaction::Input::IHmd* get_Hmd();
    // private System.Void set_Hmd(Oculus.Interaction.Input.IHmd value)
    // Offset: 0x47EF544
    void set_Hmd(::Oculus::Interaction::Input::IHmd* value);
    // public System.Boolean get_Active()
    // Offset: 0x47EF54C
    bool get_Active();
    // public System.Collections.Generic.IReadOnlyList`1<Oculus.Interaction.PoseDetection.JointVelocityActiveState/JointVelocityFeatureConfig> get_FeatureConfigs()
    // Offset: 0x47EF640
    ::System::Collections::Generic::IReadOnlyList_1<::Oculus::Interaction::PoseDetection::JointVelocityActiveState::JointVelocityFeatureConfig*>* get_FeatureConfigs();
    // public System.Collections.Generic.IReadOnlyDictionary`2<Oculus.Interaction.PoseDetection.JointVelocityActiveState/JointVelocityFeatureConfig,Oculus.Interaction.PoseDetection.JointVelocityActiveState/JointVelocityFeatureState> get_FeatureStates()
    // Offset: 0x47EF65C
    ::System::Collections::Generic::IReadOnlyDictionary_2<::Oculus::Interaction::PoseDetection::JointVelocityActiveState::JointVelocityFeatureConfig*, ::Oculus::Interaction::PoseDetection::JointVelocityActiveState::JointVelocityFeatureState>* get_FeatureStates();
    // protected System.Void Awake()
    // Offset: 0x47EF664
    void Awake();
    // protected System.Void Start()
    // Offset: 0x47EF828
    void Start();
    // private System.Boolean CheckAllJointVelocities()
    // Offset: 0x47EFCCC
    bool CheckAllJointVelocities();
    // protected System.Void Update()
    // Offset: 0x47F033C
    void Update();
    // protected System.Void OnEnable()
    // Offset: 0x47F0340
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x47F0400
    void OnDisable();
    // private System.Void UpdateActiveState()
    // Offset: 0x47EF584
    void UpdateActiveState();
    // private UnityEngine.Vector3 GetWorldTargetVector(UnityEngine.Pose rootPose, Oculus.Interaction.PoseDetection.JointVelocityActiveState/JointVelocityFeatureConfig config)
    // Offset: 0x47F02D0
    ::UnityEngine::Vector3 GetWorldTargetVector(::UnityEngine::Pose rootPose, ::Oculus::Interaction::PoseDetection::JointVelocityActiveState::JointVelocityFeatureConfig* config);
    // private UnityEngine.Vector3 GetWorldAxisVector(Oculus.Interaction.PoseDetection.JointVelocityActiveState/WorldAxis axis)
    // Offset: 0x47F0874
    ::UnityEngine::Vector3 GetWorldAxisVector(::Oculus::Interaction::PoseDetection::JointVelocityActiveState::WorldAxis axis);
    // private UnityEngine.Vector3 GetHandAxisVector(Oculus.Interaction.PoseDetection.JointVelocityActiveState/HandAxis axis, UnityEngine.Pose rootPose)
    // Offset: 0x47F04C0
    ::UnityEngine::Vector3 GetHandAxisVector(::Oculus::Interaction::PoseDetection::JointVelocityActiveState::HandAxis axis, ::UnityEngine::Pose rootPose);
    // private UnityEngine.Vector3 GetHeadAxisVector(Oculus.Interaction.PoseDetection.JointVelocityActiveState/HeadAxis axis)
    // Offset: 0x47F0A2C
    ::UnityEngine::Vector3 GetHeadAxisVector(::Oculus::Interaction::PoseDetection::JointVelocityActiveState::HeadAxis axis);
    // public System.Void InjectAllJointVelocityActiveState(Oculus.Interaction.PoseDetection.JointVelocityActiveState/JointVelocityFeatureConfigList featureConfigs, Oculus.Interaction.Input.IHand hand, Oculus.Interaction.PoseDetection.IJointDeltaProvider jointDeltaProvider)
    // Offset: 0x47F0BB4
    void InjectAllJointVelocityActiveState(::Oculus::Interaction::PoseDetection::JointVelocityActiveState::JointVelocityFeatureConfigList* featureConfigs, ::Oculus::Interaction::Input::IHand* hand, ::Oculus::Interaction::PoseDetection::IJointDeltaProvider* jointDeltaProvider);
    // public System.Void InjectFeatureConfigList(Oculus.Interaction.PoseDetection.JointVelocityActiveState/JointVelocityFeatureConfigList featureConfigs)
    // Offset: 0x47F0D8C
    void InjectFeatureConfigList(::Oculus::Interaction::PoseDetection::JointVelocityActiveState::JointVelocityFeatureConfigList* featureConfigs);
    // public System.Void InjectHand(Oculus.Interaction.Input.IHand hand)
    // Offset: 0x47F0BF0
    void InjectHand(::Oculus::Interaction::Input::IHand* hand);
    // public System.Void InjectJointDeltaProvider(Oculus.Interaction.PoseDetection.IJointDeltaProvider jointDeltaProvider)
    // Offset: 0x47F0CC0
    void InjectJointDeltaProvider(::Oculus::Interaction::PoseDetection::IJointDeltaProvider* jointDeltaProvider);
    // public System.Void InjectOptionalTimeProvider(System.Func`1<System.Single> timeProvider)
    // Offset: 0x47F0D94
    void InjectOptionalTimeProvider(::System::Func_1<float>* timeProvider);
    // public System.Void InjectOptionalHmd(Oculus.Interaction.Input.IHmd hmd)
    // Offset: 0x47F0D9C
    void InjectOptionalHmd(::Oculus::Interaction::Input::IHmd* hmd);
    // public System.Void .ctor()
    // Offset: 0x47F0E6C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static JointVelocityActiveState* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::PoseDetection::JointVelocityActiveState::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<JointVelocityActiveState*, creationType>()));
    }
  }; // Oculus.Interaction.PoseDetection.JointVelocityActiveState
  #pragma pack(pop)
  static check_size<sizeof(JointVelocityActiveState), 142 + sizeof(bool)> __Oculus_Interaction_PoseDetection_JointVelocityActiveStateSizeCheck;
  static_assert(sizeof(JointVelocityActiveState) == 0x8F);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::PoseDetection::JointVelocityActiveState::JointVelocityFeatureState, "Oculus.Interaction.PoseDetection", "JointVelocityActiveState/JointVelocityFeatureState");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::JointVelocityActiveState::get_Hand
// Il2CppName: get_Hand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Input::IHand* (Oculus::Interaction::PoseDetection::JointVelocityActiveState::*)()>(&Oculus::Interaction::PoseDetection::JointVelocityActiveState::get_Hand)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::JointVelocityActiveState*), "get_Hand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::JointVelocityActiveState::set_Hand
// Il2CppName: set_Hand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::JointVelocityActiveState::*)(::Oculus::Interaction::Input::IHand*)>(&Oculus::Interaction::PoseDetection::JointVelocityActiveState::set_Hand)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::JointVelocityActiveState*), "set_Hand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::JointVelocityActiveState::get_JointDeltaProvider
// Il2CppName: get_JointDeltaProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::PoseDetection::IJointDeltaProvider* (Oculus::Interaction::PoseDetection::JointVelocityActiveState::*)()>(&Oculus::Interaction::PoseDetection::JointVelocityActiveState::get_JointDeltaProvider)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::JointVelocityActiveState*), "get_JointDeltaProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::JointVelocityActiveState::set_JointDeltaProvider
// Il2CppName: set_JointDeltaProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::JointVelocityActiveState::*)(::Oculus::Interaction::PoseDetection::IJointDeltaProvider*)>(&Oculus::Interaction::PoseDetection::JointVelocityActiveState::set_JointDeltaProvider)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.PoseDetection", "IJointDeltaProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::JointVelocityActiveState*), "set_JointDeltaProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::JointVelocityActiveState::get_Hmd
// Il2CppName: get_Hmd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Input::IHmd* (Oculus::Interaction::PoseDetection::JointVelocityActiveState::*)()>(&Oculus::Interaction::PoseDetection::JointVelocityActiveState::get_Hmd)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::JointVelocityActiveState*), "get_Hmd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::JointVelocityActiveState::set_Hmd
// Il2CppName: set_Hmd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::JointVelocityActiveState::*)(::Oculus::Interaction::Input::IHmd*)>(&Oculus::Interaction::PoseDetection::JointVelocityActiveState::set_Hmd)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHmd")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::JointVelocityActiveState*), "set_Hmd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::JointVelocityActiveState::get_Active
// Il2CppName: get_Active
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::PoseDetection::JointVelocityActiveState::*)()>(&Oculus::Interaction::PoseDetection::JointVelocityActiveState::get_Active)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::JointVelocityActiveState*), "get_Active", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::JointVelocityActiveState::get_FeatureConfigs
// Il2CppName: get_FeatureConfigs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IReadOnlyList_1<::Oculus::Interaction::PoseDetection::JointVelocityActiveState::JointVelocityFeatureConfig*>* (Oculus::Interaction::PoseDetection::JointVelocityActiveState::*)()>(&Oculus::Interaction::PoseDetection::JointVelocityActiveState::get_FeatureConfigs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::JointVelocityActiveState*), "get_FeatureConfigs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::JointVelocityActiveState::get_FeatureStates
// Il2CppName: get_FeatureStates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IReadOnlyDictionary_2<::Oculus::Interaction::PoseDetection::JointVelocityActiveState::JointVelocityFeatureConfig*, ::Oculus::Interaction::PoseDetection::JointVelocityActiveState::JointVelocityFeatureState>* (Oculus::Interaction::PoseDetection::JointVelocityActiveState::*)()>(&Oculus::Interaction::PoseDetection::JointVelocityActiveState::get_FeatureStates)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::JointVelocityActiveState*), "get_FeatureStates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::JointVelocityActiveState::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::JointVelocityActiveState::*)()>(&Oculus::Interaction::PoseDetection::JointVelocityActiveState::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::JointVelocityActiveState*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::JointVelocityActiveState::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::JointVelocityActiveState::*)()>(&Oculus::Interaction::PoseDetection::JointVelocityActiveState::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::JointVelocityActiveState*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::JointVelocityActiveState::CheckAllJointVelocities
// Il2CppName: CheckAllJointVelocities
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::PoseDetection::JointVelocityActiveState::*)()>(&Oculus::Interaction::PoseDetection::JointVelocityActiveState::CheckAllJointVelocities)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::JointVelocityActiveState*), "CheckAllJointVelocities", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::JointVelocityActiveState::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::JointVelocityActiveState::*)()>(&Oculus::Interaction::PoseDetection::JointVelocityActiveState::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::JointVelocityActiveState*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::JointVelocityActiveState::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::JointVelocityActiveState::*)()>(&Oculus::Interaction::PoseDetection::JointVelocityActiveState::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::JointVelocityActiveState*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::JointVelocityActiveState::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::JointVelocityActiveState::*)()>(&Oculus::Interaction::PoseDetection::JointVelocityActiveState::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::JointVelocityActiveState*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::JointVelocityActiveState::UpdateActiveState
// Il2CppName: UpdateActiveState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::JointVelocityActiveState::*)()>(&Oculus::Interaction::PoseDetection::JointVelocityActiveState::UpdateActiveState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::JointVelocityActiveState*), "UpdateActiveState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::JointVelocityActiveState::GetWorldTargetVector
// Il2CppName: GetWorldTargetVector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Oculus::Interaction::PoseDetection::JointVelocityActiveState::*)(::UnityEngine::Pose, ::Oculus::Interaction::PoseDetection::JointVelocityActiveState::JointVelocityFeatureConfig*)>(&Oculus::Interaction::PoseDetection::JointVelocityActiveState::GetWorldTargetVector)> {
  static const MethodInfo* get() {
    static auto* rootPose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->byval_arg;
    static auto* config = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.PoseDetection", "JointVelocityActiveState/JointVelocityFeatureConfig")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::JointVelocityActiveState*), "GetWorldTargetVector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rootPose, config});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::JointVelocityActiveState::GetWorldAxisVector
// Il2CppName: GetWorldAxisVector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Oculus::Interaction::PoseDetection::JointVelocityActiveState::*)(::Oculus::Interaction::PoseDetection::JointVelocityActiveState::WorldAxis)>(&Oculus::Interaction::PoseDetection::JointVelocityActiveState::GetWorldAxisVector)> {
  static const MethodInfo* get() {
    static auto* axis = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.PoseDetection", "JointVelocityActiveState/WorldAxis")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::JointVelocityActiveState*), "GetWorldAxisVector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{axis});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::JointVelocityActiveState::GetHandAxisVector
// Il2CppName: GetHandAxisVector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Oculus::Interaction::PoseDetection::JointVelocityActiveState::*)(::Oculus::Interaction::PoseDetection::JointVelocityActiveState::HandAxis, ::UnityEngine::Pose)>(&Oculus::Interaction::PoseDetection::JointVelocityActiveState::GetHandAxisVector)> {
  static const MethodInfo* get() {
    static auto* axis = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.PoseDetection", "JointVelocityActiveState/HandAxis")->byval_arg;
    static auto* rootPose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::JointVelocityActiveState*), "GetHandAxisVector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{axis, rootPose});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::JointVelocityActiveState::GetHeadAxisVector
// Il2CppName: GetHeadAxisVector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Oculus::Interaction::PoseDetection::JointVelocityActiveState::*)(::Oculus::Interaction::PoseDetection::JointVelocityActiveState::HeadAxis)>(&Oculus::Interaction::PoseDetection::JointVelocityActiveState::GetHeadAxisVector)> {
  static const MethodInfo* get() {
    static auto* axis = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.PoseDetection", "JointVelocityActiveState/HeadAxis")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::JointVelocityActiveState*), "GetHeadAxisVector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{axis});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::JointVelocityActiveState::InjectAllJointVelocityActiveState
// Il2CppName: InjectAllJointVelocityActiveState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::JointVelocityActiveState::*)(::Oculus::Interaction::PoseDetection::JointVelocityActiveState::JointVelocityFeatureConfigList*, ::Oculus::Interaction::Input::IHand*, ::Oculus::Interaction::PoseDetection::IJointDeltaProvider*)>(&Oculus::Interaction::PoseDetection::JointVelocityActiveState::InjectAllJointVelocityActiveState)> {
  static const MethodInfo* get() {
    static auto* featureConfigs = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.PoseDetection", "JointVelocityActiveState/JointVelocityFeatureConfigList")->byval_arg;
    static auto* hand = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHand")->byval_arg;
    static auto* jointDeltaProvider = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.PoseDetection", "IJointDeltaProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::JointVelocityActiveState*), "InjectAllJointVelocityActiveState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{featureConfigs, hand, jointDeltaProvider});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::JointVelocityActiveState::InjectFeatureConfigList
// Il2CppName: InjectFeatureConfigList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::JointVelocityActiveState::*)(::Oculus::Interaction::PoseDetection::JointVelocityActiveState::JointVelocityFeatureConfigList*)>(&Oculus::Interaction::PoseDetection::JointVelocityActiveState::InjectFeatureConfigList)> {
  static const MethodInfo* get() {
    static auto* featureConfigs = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.PoseDetection", "JointVelocityActiveState/JointVelocityFeatureConfigList")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::JointVelocityActiveState*), "InjectFeatureConfigList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{featureConfigs});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::JointVelocityActiveState::InjectHand
// Il2CppName: InjectHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::JointVelocityActiveState::*)(::Oculus::Interaction::Input::IHand*)>(&Oculus::Interaction::PoseDetection::JointVelocityActiveState::InjectHand)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::JointVelocityActiveState*), "InjectHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::JointVelocityActiveState::InjectJointDeltaProvider
// Il2CppName: InjectJointDeltaProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::JointVelocityActiveState::*)(::Oculus::Interaction::PoseDetection::IJointDeltaProvider*)>(&Oculus::Interaction::PoseDetection::JointVelocityActiveState::InjectJointDeltaProvider)> {
  static const MethodInfo* get() {
    static auto* jointDeltaProvider = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.PoseDetection", "IJointDeltaProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::JointVelocityActiveState*), "InjectJointDeltaProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{jointDeltaProvider});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::JointVelocityActiveState::InjectOptionalTimeProvider
// Il2CppName: InjectOptionalTimeProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::JointVelocityActiveState::*)(::System::Func_1<float>*)>(&Oculus::Interaction::PoseDetection::JointVelocityActiveState::InjectOptionalTimeProvider)> {
  static const MethodInfo* get() {
    static auto* timeProvider = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Func`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::JointVelocityActiveState*), "InjectOptionalTimeProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{timeProvider});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::JointVelocityActiveState::InjectOptionalHmd
// Il2CppName: InjectOptionalHmd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::JointVelocityActiveState::*)(::Oculus::Interaction::Input::IHmd*)>(&Oculus::Interaction::PoseDetection::JointVelocityActiveState::InjectOptionalHmd)> {
  static const MethodInfo* get() {
    static auto* hmd = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHmd")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::JointVelocityActiveState*), "InjectOptionalHmd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hmd});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::JointVelocityActiveState::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
