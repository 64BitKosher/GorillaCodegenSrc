// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: Oculus.Interaction.PoseDetection
namespace Oculus::Interaction::PoseDetection {
  // Forward declaring type: FingerFeature
  struct FingerFeature;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::PoseDetection::FingerFeature, "Oculus.Interaction.PoseDetection", "FingerFeature");
// Type namespace: Oculus.Interaction.PoseDetection
namespace Oculus::Interaction::PoseDetection {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.PoseDetection.FingerFeature
  // [TokenAttribute] Offset: FFFFFFFF
  struct FingerFeature/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: FingerFeature
    constexpr FingerFeature(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public Oculus.Interaction.PoseDetection.FingerFeature Curl
    static constexpr const int Curl = 0;
    // Get static field: static public Oculus.Interaction.PoseDetection.FingerFeature Curl
    static ::Oculus::Interaction::PoseDetection::FingerFeature _get_Curl();
    // Set static field: static public Oculus.Interaction.PoseDetection.FingerFeature Curl
    static void _set_Curl(::Oculus::Interaction::PoseDetection::FingerFeature value);
    // static field const value: static public Oculus.Interaction.PoseDetection.FingerFeature Flexion
    static constexpr const int Flexion = 1;
    // Get static field: static public Oculus.Interaction.PoseDetection.FingerFeature Flexion
    static ::Oculus::Interaction::PoseDetection::FingerFeature _get_Flexion();
    // Set static field: static public Oculus.Interaction.PoseDetection.FingerFeature Flexion
    static void _set_Flexion(::Oculus::Interaction::PoseDetection::FingerFeature value);
    // static field const value: static public Oculus.Interaction.PoseDetection.FingerFeature Abduction
    static constexpr const int Abduction = 2;
    // Get static field: static public Oculus.Interaction.PoseDetection.FingerFeature Abduction
    static ::Oculus::Interaction::PoseDetection::FingerFeature _get_Abduction();
    // Set static field: static public Oculus.Interaction.PoseDetection.FingerFeature Abduction
    static void _set_Abduction(::Oculus::Interaction::PoseDetection::FingerFeature value);
    // static field const value: static public Oculus.Interaction.PoseDetection.FingerFeature Opposition
    static constexpr const int Opposition = 3;
    // Get static field: static public Oculus.Interaction.PoseDetection.FingerFeature Opposition
    static ::Oculus::Interaction::PoseDetection::FingerFeature _get_Opposition();
    // Set static field: static public Oculus.Interaction.PoseDetection.FingerFeature Opposition
    static void _set_Opposition(::Oculus::Interaction::PoseDetection::FingerFeature value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // Oculus.Interaction.PoseDetection.FingerFeature
  #pragma pack(pop)
  static check_size<sizeof(FingerFeature), 0 + sizeof(int)> __Oculus_Interaction_PoseDetection_FingerFeatureSizeCheck;
  static_assert(sizeof(FingerFeature) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
