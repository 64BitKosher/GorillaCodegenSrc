// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: Oculus.Interaction.PoseDetection.UpVectorType
#include "Oculus/Interaction/PoseDetection/UpVectorType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction::PoseDetection
namespace Oculus::Interaction::PoseDetection {
  // Forward declaring type: TransformFeatureStateThresholds
  class TransformFeatureStateThresholds;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.PoseDetection
namespace Oculus::Interaction::PoseDetection {
  // Forward declaring type: TransformConfig
  class TransformConfig;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::PoseDetection::TransformConfig);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::PoseDetection::TransformConfig*, "Oculus.Interaction.PoseDetection", "TransformConfig");
// Type namespace: Oculus.Interaction.PoseDetection
namespace Oculus::Interaction::PoseDetection {
  // Size: 0x3C
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.PoseDetection.TransformConfig
  // [TokenAttribute] Offset: FFFFFFFF
  class TransformConfig : public ::Il2CppObject {
    public:
    public:
    // public UnityEngine.Vector3 PositionOffset
    // Size: 0xC
    // Offset: 0x10
    ::UnityEngine::Vector3 PositionOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 RotationOffset
    // Size: 0xC
    // Offset: 0x1C
    ::UnityEngine::Vector3 RotationOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public Oculus.Interaction.PoseDetection.UpVectorType UpVectorType
    // Size: 0x4
    // Offset: 0x28
    ::Oculus::Interaction::PoseDetection::UpVectorType UpVectorType;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::PoseDetection::UpVectorType) == 0x4);
    // Padding between fields: UpVectorType and: FeatureThresholds
    char __padding2[0x4] = {};
    // public Oculus.Interaction.PoseDetection.TransformFeatureStateThresholds FeatureThresholds
    // Size: 0x8
    // Offset: 0x30
    ::Oculus::Interaction::PoseDetection::TransformFeatureStateThresholds* FeatureThresholds;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::PoseDetection::TransformFeatureStateThresholds*) == 0x8);
    // private System.Int32 <InstanceId>k__BackingField
    // Size: 0x4
    // Offset: 0x38
    int InstanceId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: public UnityEngine.Vector3 PositionOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_PositionOffset();
    // Get instance field reference: public UnityEngine.Vector3 RotationOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_RotationOffset();
    // Get instance field reference: public Oculus.Interaction.PoseDetection.UpVectorType UpVectorType
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::PoseDetection::UpVectorType& dyn_UpVectorType();
    // Get instance field reference: public Oculus.Interaction.PoseDetection.TransformFeatureStateThresholds FeatureThresholds
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::PoseDetection::TransformFeatureStateThresholds*& dyn_FeatureThresholds();
    // Get instance field reference: private System.Int32 <InstanceId>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$InstanceId$k__BackingField();
    // public System.Void .ctor()
    // Offset: 0x47F3DF4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TransformConfig* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::PoseDetection::TransformConfig::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TransformConfig*, creationType>()));
    }
    // public System.Int32 get_InstanceId()
    // Offset: 0x47F3E80
    int get_InstanceId();
    // public System.Void set_InstanceId(System.Int32 value)
    // Offset: 0x47F3E88
    void set_InstanceId(int value);
  }; // Oculus.Interaction.PoseDetection.TransformConfig
  #pragma pack(pop)
  static check_size<sizeof(TransformConfig), 56 + sizeof(int)> __Oculus_Interaction_PoseDetection_TransformConfigSizeCheck;
  static_assert(sizeof(TransformConfig) == 0x3C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::TransformConfig::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::TransformConfig::get_InstanceId
// Il2CppName: get_InstanceId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Oculus::Interaction::PoseDetection::TransformConfig::*)()>(&Oculus::Interaction::PoseDetection::TransformConfig::get_InstanceId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::TransformConfig*), "get_InstanceId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::TransformConfig::set_InstanceId
// Il2CppName: set_InstanceId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::TransformConfig::*)(int)>(&Oculus::Interaction::PoseDetection::TransformConfig::set_InstanceId)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::TransformConfig*), "set_InstanceId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
