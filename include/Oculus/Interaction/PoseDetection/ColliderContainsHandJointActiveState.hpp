// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Oculus.Interaction.IActiveState
#include "Oculus/Interaction/IActiveState.hpp"
// Including type: Oculus.Interaction.Input.HandJointId
#include "Oculus/Interaction/Input/HandJointId.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Object because it is already included!
  // Forward declaring type: Collider
  class Collider;
  // Forward declaring type: Pose
  struct Pose;
  // Skipping declaration: Vector3 because it is already included!
}
// Forward declaring namespace: Oculus::Interaction::Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: IHand
  class IHand;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.PoseDetection
namespace Oculus::Interaction::PoseDetection {
  // Forward declaring type: ColliderContainsHandJointActiveState
  class ColliderContainsHandJointActiveState;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::PoseDetection::ColliderContainsHandJointActiveState);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::PoseDetection::ColliderContainsHandJointActiveState*, "Oculus.Interaction.PoseDetection", "ColliderContainsHandJointActiveState");
// Type namespace: Oculus.Interaction.PoseDetection
namespace Oculus::Interaction::PoseDetection {
  // Size: 0x46
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.PoseDetection.ColliderContainsHandJointActiveState
  // [TokenAttribute] Offset: FFFFFFFF
  class ColliderContainsHandJointActiveState : public ::UnityEngine::MonoBehaviour/*, public ::Oculus::Interaction::IActiveState*/ {
    public:
    public:
    // private UnityEngine.Object _hand
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Object* hand;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.Input.IHand Hand
    // Size: 0x8
    // Offset: 0x28
    ::Oculus::Interaction::Input::IHand* Hand;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::IHand*) == 0x8);
    // private UnityEngine.Collider[] _entryColliders
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::UnityEngine::Collider*> entryColliders;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Collider*>) == 0x8);
    // private UnityEngine.Collider[] _exitColliders
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<::UnityEngine::Collider*> exitColliders;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Collider*>) == 0x8);
    // private Oculus.Interaction.Input.HandJointId _jointToTest
    // Size: 0x4
    // Offset: 0x40
    ::Oculus::Interaction::Input::HandJointId jointToTest;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::HandJointId) == 0x4);
    // private System.Boolean <Active>k__BackingField
    // Size: 0x1
    // Offset: 0x44
    bool Active;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _active
    // Size: 0x1
    // Offset: 0x45
    bool active;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::IActiveState
    operator ::Oculus::Interaction::IActiveState() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::IActiveState*>(this);
    }
    // Get instance field reference: private UnityEngine.Object _hand
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__hand();
    // Get instance field reference: private Oculus.Interaction.Input.IHand Hand
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::IHand*& dyn_Hand();
    // Get instance field reference: private UnityEngine.Collider[] _entryColliders
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Collider*>& dyn__entryColliders();
    // Get instance field reference: private UnityEngine.Collider[] _exitColliders
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Collider*>& dyn__exitColliders();
    // Get instance field reference: private Oculus.Interaction.Input.HandJointId _jointToTest
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::HandJointId& dyn__jointToTest();
    // Get instance field reference: private System.Boolean <Active>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$Active$k__BackingField();
    // Get instance field reference: private System.Boolean _active
    [[deprecated("Use field access instead!")]] bool& dyn__active();
    // public System.Boolean get_Active()
    // Offset: 0x47E6688
    bool get_Active();
    // private System.Void set_Active(System.Boolean value)
    // Offset: 0x47E6690
    void set_Active(bool value);
    // protected System.Void Awake()
    // Offset: 0x47E669C
    void Awake();
    // protected System.Void Start()
    // Offset: 0x47E670C
    void Start();
    // protected System.Void Update()
    // Offset: 0x47E6710
    void Update();
    // private System.Boolean JointPassesTests(UnityEngine.Pose jointPose)
    // Offset: 0x47E6808
    bool JointPassesTests(::UnityEngine::Pose jointPose);
    // private System.Boolean IsPointWithinColliders(UnityEngine.Vector3 point, UnityEngine.Collider[] colliders)
    // Offset: 0x47E6844
    bool IsPointWithinColliders(::UnityEngine::Vector3 point, ::ArrayW<::UnityEngine::Collider*> colliders);
    // public System.Void InjectAllColliderContainsHandJointActiveState(Oculus.Interaction.Input.IHand hand, UnityEngine.Collider[] entryColliders, UnityEngine.Collider[] exitColliders, Oculus.Interaction.Input.HandJointId jointToTest)
    // Offset: 0x47E68EC
    void InjectAllColliderContainsHandJointActiveState(::Oculus::Interaction::Input::IHand* hand, ::ArrayW<::UnityEngine::Collider*> entryColliders, ::ArrayW<::UnityEngine::Collider*> exitColliders, ::Oculus::Interaction::Input::HandJointId jointToTest);
    // public System.Void InjectHand(Oculus.Interaction.Input.IHand hand)
    // Offset: 0x47E6940
    void InjectHand(::Oculus::Interaction::Input::IHand* hand);
    // public System.Void InjectEntryColliders(UnityEngine.Collider[] entryColliders)
    // Offset: 0x47E6A10
    void InjectEntryColliders(::ArrayW<::UnityEngine::Collider*> entryColliders);
    // public System.Void InjectExitColliders(UnityEngine.Collider[] exitColliders)
    // Offset: 0x47E6A18
    void InjectExitColliders(::ArrayW<::UnityEngine::Collider*> exitColliders);
    // public System.Void InjectJointToTest(Oculus.Interaction.Input.HandJointId jointToTest)
    // Offset: 0x47E6A20
    void InjectJointToTest(::Oculus::Interaction::Input::HandJointId jointToTest);
    // public System.Void .ctor()
    // Offset: 0x47E6A28
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ColliderContainsHandJointActiveState* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::PoseDetection::ColliderContainsHandJointActiveState::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ColliderContainsHandJointActiveState*, creationType>()));
    }
  }; // Oculus.Interaction.PoseDetection.ColliderContainsHandJointActiveState
  #pragma pack(pop)
  static check_size<sizeof(ColliderContainsHandJointActiveState), 69 + sizeof(bool)> __Oculus_Interaction_PoseDetection_ColliderContainsHandJointActiveStateSizeCheck;
  static_assert(sizeof(ColliderContainsHandJointActiveState) == 0x46);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::ColliderContainsHandJointActiveState::get_Active
// Il2CppName: get_Active
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::PoseDetection::ColliderContainsHandJointActiveState::*)()>(&Oculus::Interaction::PoseDetection::ColliderContainsHandJointActiveState::get_Active)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::ColliderContainsHandJointActiveState*), "get_Active", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::ColliderContainsHandJointActiveState::set_Active
// Il2CppName: set_Active
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::ColliderContainsHandJointActiveState::*)(bool)>(&Oculus::Interaction::PoseDetection::ColliderContainsHandJointActiveState::set_Active)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::ColliderContainsHandJointActiveState*), "set_Active", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::ColliderContainsHandJointActiveState::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::ColliderContainsHandJointActiveState::*)()>(&Oculus::Interaction::PoseDetection::ColliderContainsHandJointActiveState::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::ColliderContainsHandJointActiveState*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::ColliderContainsHandJointActiveState::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::ColliderContainsHandJointActiveState::*)()>(&Oculus::Interaction::PoseDetection::ColliderContainsHandJointActiveState::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::ColliderContainsHandJointActiveState*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::ColliderContainsHandJointActiveState::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::ColliderContainsHandJointActiveState::*)()>(&Oculus::Interaction::PoseDetection::ColliderContainsHandJointActiveState::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::ColliderContainsHandJointActiveState*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::ColliderContainsHandJointActiveState::JointPassesTests
// Il2CppName: JointPassesTests
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::PoseDetection::ColliderContainsHandJointActiveState::*)(::UnityEngine::Pose)>(&Oculus::Interaction::PoseDetection::ColliderContainsHandJointActiveState::JointPassesTests)> {
  static const MethodInfo* get() {
    static auto* jointPose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::ColliderContainsHandJointActiveState*), "JointPassesTests", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{jointPose});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::ColliderContainsHandJointActiveState::IsPointWithinColliders
// Il2CppName: IsPointWithinColliders
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::PoseDetection::ColliderContainsHandJointActiveState::*)(::UnityEngine::Vector3, ::ArrayW<::UnityEngine::Collider*>)>(&Oculus::Interaction::PoseDetection::ColliderContainsHandJointActiveState::IsPointWithinColliders)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* colliders = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Collider"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::ColliderContainsHandJointActiveState*), "IsPointWithinColliders", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point, colliders});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::ColliderContainsHandJointActiveState::InjectAllColliderContainsHandJointActiveState
// Il2CppName: InjectAllColliderContainsHandJointActiveState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::ColliderContainsHandJointActiveState::*)(::Oculus::Interaction::Input::IHand*, ::ArrayW<::UnityEngine::Collider*>, ::ArrayW<::UnityEngine::Collider*>, ::Oculus::Interaction::Input::HandJointId)>(&Oculus::Interaction::PoseDetection::ColliderContainsHandJointActiveState::InjectAllColliderContainsHandJointActiveState)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHand")->byval_arg;
    static auto* entryColliders = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Collider"), 1)->byval_arg;
    static auto* exitColliders = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Collider"), 1)->byval_arg;
    static auto* jointToTest = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "HandJointId")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::ColliderContainsHandJointActiveState*), "InjectAllColliderContainsHandJointActiveState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand, entryColliders, exitColliders, jointToTest});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::ColliderContainsHandJointActiveState::InjectHand
// Il2CppName: InjectHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::ColliderContainsHandJointActiveState::*)(::Oculus::Interaction::Input::IHand*)>(&Oculus::Interaction::PoseDetection::ColliderContainsHandJointActiveState::InjectHand)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::ColliderContainsHandJointActiveState*), "InjectHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::ColliderContainsHandJointActiveState::InjectEntryColliders
// Il2CppName: InjectEntryColliders
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::ColliderContainsHandJointActiveState::*)(::ArrayW<::UnityEngine::Collider*>)>(&Oculus::Interaction::PoseDetection::ColliderContainsHandJointActiveState::InjectEntryColliders)> {
  static const MethodInfo* get() {
    static auto* entryColliders = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Collider"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::ColliderContainsHandJointActiveState*), "InjectEntryColliders", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{entryColliders});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::ColliderContainsHandJointActiveState::InjectExitColliders
// Il2CppName: InjectExitColliders
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::ColliderContainsHandJointActiveState::*)(::ArrayW<::UnityEngine::Collider*>)>(&Oculus::Interaction::PoseDetection::ColliderContainsHandJointActiveState::InjectExitColliders)> {
  static const MethodInfo* get() {
    static auto* exitColliders = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Collider"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::ColliderContainsHandJointActiveState*), "InjectExitColliders", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{exitColliders});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::ColliderContainsHandJointActiveState::InjectJointToTest
// Il2CppName: InjectJointToTest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::ColliderContainsHandJointActiveState::*)(::Oculus::Interaction::Input::HandJointId)>(&Oculus::Interaction::PoseDetection::ColliderContainsHandJointActiveState::InjectJointToTest)> {
  static const MethodInfo* get() {
    static auto* jointToTest = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "HandJointId")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::ColliderContainsHandJointActiveState*), "InjectJointToTest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{jointToTest});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::ColliderContainsHandJointActiveState::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
