// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Oculus.Interaction.IActiveState
#include "Oculus/Interaction/IActiveState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction::PoseDetection
namespace Oculus::Interaction::PoseDetection {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Object because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`1<TResult>
  template<typename TResult>
  class Func_1;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.PoseDetection
namespace Oculus::Interaction::PoseDetection {
  // Forward declaring type: Sequence
  class Sequence;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::PoseDetection::Sequence);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::PoseDetection::Sequence*, "Oculus.Interaction.PoseDetection", "Sequence");
// Type namespace: Oculus.Interaction.PoseDetection
namespace Oculus::Interaction::PoseDetection {
  // Size: 0x5E
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.PoseDetection.Sequence
  // [TokenAttribute] Offset: FFFFFFFF
  class Sequence : public ::UnityEngine::MonoBehaviour/*, public ::Oculus::Interaction::IActiveState*/ {
    public:
    // Nested type: ::Oculus::Interaction::PoseDetection::Sequence::ActivationStep
    class ActivationStep;
    // Nested type: ::Oculus::Interaction::PoseDetection::Sequence::DebugModel
    class DebugModel;
    // Nested type: ::Oculus::Interaction::PoseDetection::Sequence::$$c
    class $$c;
    public:
    // private Oculus.Interaction.PoseDetection.Sequence/ActivationStep[] _stepsToActivate
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::Oculus::Interaction::PoseDetection::Sequence::ActivationStep*> stepsToActivate;
    // Field size check
    static_assert(sizeof(::ArrayW<::Oculus::Interaction::PoseDetection::Sequence::ActivationStep*>) == 0x8);
    // private UnityEngine.Object _remainActiveWhile
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Object* remainActiveWhile;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private System.Single _remainActiveCooldown
    // Size: 0x4
    // Offset: 0x30
    float remainActiveCooldown;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: remainActiveCooldown and: RemainActiveWhile
    char __padding2[0x4] = {};
    // private Oculus.Interaction.IActiveState <RemainActiveWhile>k__BackingField
    // Size: 0x8
    // Offset: 0x38
    ::Oculus::Interaction::IActiveState* RemainActiveWhile;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::IActiveState*) == 0x8);
    // private System.Int32 <CurrentActivationStep>k__BackingField
    // Size: 0x4
    // Offset: 0x40
    int CurrentActivationStep;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single _currentStepActivatedTime
    // Size: 0x4
    // Offset: 0x44
    float currentStepActivatedTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _stepFailedTime
    // Size: 0x4
    // Offset: 0x48
    float stepFailedTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _currentStepWasActive
    // Size: 0x1
    // Offset: 0x4C
    bool currentStepWasActive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: currentStepWasActive and: timeProvider
    char __padding7[0x3] = {};
    // private System.Func`1<System.Single> _timeProvider
    // Size: 0x8
    // Offset: 0x50
    ::System::Func_1<float>* timeProvider;
    // Field size check
    static_assert(sizeof(::System::Func_1<float>*) == 0x8);
    // private System.Single _cooldownExceededTime
    // Size: 0x4
    // Offset: 0x58
    float cooldownExceededTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _wasRemainActive
    // Size: 0x1
    // Offset: 0x5C
    bool wasRemainActive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <Active>k__BackingField
    // Size: 0x1
    // Offset: 0x5D
    bool Active;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::IActiveState
    operator ::Oculus::Interaction::IActiveState() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::IActiveState*>(this);
    }
    // Get instance field reference: private Oculus.Interaction.PoseDetection.Sequence/ActivationStep[] _stepsToActivate
    [[deprecated("Use field access instead!")]] ::ArrayW<::Oculus::Interaction::PoseDetection::Sequence::ActivationStep*>& dyn__stepsToActivate();
    // Get instance field reference: private UnityEngine.Object _remainActiveWhile
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__remainActiveWhile();
    // Get instance field reference: private System.Single _remainActiveCooldown
    [[deprecated("Use field access instead!")]] float& dyn__remainActiveCooldown();
    // Get instance field reference: private Oculus.Interaction.IActiveState <RemainActiveWhile>k__BackingField
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::IActiveState*& dyn_$RemainActiveWhile$k__BackingField();
    // Get instance field reference: private System.Int32 <CurrentActivationStep>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$CurrentActivationStep$k__BackingField();
    // Get instance field reference: private System.Single _currentStepActivatedTime
    [[deprecated("Use field access instead!")]] float& dyn__currentStepActivatedTime();
    // Get instance field reference: private System.Single _stepFailedTime
    [[deprecated("Use field access instead!")]] float& dyn__stepFailedTime();
    // Get instance field reference: private System.Boolean _currentStepWasActive
    [[deprecated("Use field access instead!")]] bool& dyn__currentStepWasActive();
    // Get instance field reference: private System.Func`1<System.Single> _timeProvider
    [[deprecated("Use field access instead!")]] ::System::Func_1<float>*& dyn__timeProvider();
    // Get instance field reference: private System.Single _cooldownExceededTime
    [[deprecated("Use field access instead!")]] float& dyn__cooldownExceededTime();
    // Get instance field reference: private System.Boolean _wasRemainActive
    [[deprecated("Use field access instead!")]] bool& dyn__wasRemainActive();
    // Get instance field reference: private System.Boolean <Active>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$Active$k__BackingField();
    // private Oculus.Interaction.IActiveState get_RemainActiveWhile()
    // Offset: 0x47F11B0
    ::Oculus::Interaction::IActiveState* get_RemainActiveWhile();
    // private System.Void set_RemainActiveWhile(Oculus.Interaction.IActiveState value)
    // Offset: 0x47F11B8
    void set_RemainActiveWhile(::Oculus::Interaction::IActiveState* value);
    // public System.Int32 get_CurrentActivationStep()
    // Offset: 0x47F11C0
    int get_CurrentActivationStep();
    // private System.Void set_CurrentActivationStep(System.Int32 value)
    // Offset: 0x47F11C8
    void set_CurrentActivationStep(int value);
    // protected System.Void Awake()
    // Offset: 0x47F11D0
    void Awake();
    // protected System.Void Start()
    // Offset: 0x47F1240
    void Start();
    // protected System.Void Update()
    // Offset: 0x47F1464
    void Update();
    // private System.Void EnterNextStep(System.Single time)
    // Offset: 0x47F17BC
    void EnterNextStep(float time);
    // private System.Void ResetState()
    // Offset: 0x47F1234
    void ResetState();
    // public System.Boolean get_Active()
    // Offset: 0x47F1844
    bool get_Active();
    // private System.Void set_Active(System.Boolean value)
    // Offset: 0x47F184C
    void set_Active(bool value);
    // static private System.Void .cctor()
    // Offset: 0x47F1858
    static void _cctor();
    // public System.Void InjectOptionalStepsToActivate(Oculus.Interaction.PoseDetection.Sequence/ActivationStep[] stepsToActivate)
    // Offset: 0x47F192C
    void InjectOptionalStepsToActivate(::ArrayW<::Oculus::Interaction::PoseDetection::Sequence::ActivationStep*> stepsToActivate);
    // public System.Void InjectOptionalRemainActiveWhile(Oculus.Interaction.IActiveState activeState)
    // Offset: 0x47F1934
    void InjectOptionalRemainActiveWhile(::Oculus::Interaction::IActiveState* activeState);
    // public System.Void InjectOptionalTimeProvider(System.Func`1<System.Single> timeProvider)
    // Offset: 0x47F1A04
    void InjectOptionalTimeProvider(::System::Func_1<float>* timeProvider);
    // public System.Void .ctor()
    // Offset: 0x47F1A0C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Sequence* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::PoseDetection::Sequence::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Sequence*, creationType>()));
    }
  }; // Oculus.Interaction.PoseDetection.Sequence
  #pragma pack(pop)
  static check_size<sizeof(Sequence), 93 + sizeof(bool)> __Oculus_Interaction_PoseDetection_SequenceSizeCheck;
  static_assert(sizeof(Sequence) == 0x5E);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::Sequence::get_RemainActiveWhile
// Il2CppName: get_RemainActiveWhile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::IActiveState* (Oculus::Interaction::PoseDetection::Sequence::*)()>(&Oculus::Interaction::PoseDetection::Sequence::get_RemainActiveWhile)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::Sequence*), "get_RemainActiveWhile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::Sequence::set_RemainActiveWhile
// Il2CppName: set_RemainActiveWhile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::Sequence::*)(::Oculus::Interaction::IActiveState*)>(&Oculus::Interaction::PoseDetection::Sequence::set_RemainActiveWhile)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IActiveState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::Sequence*), "set_RemainActiveWhile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::Sequence::get_CurrentActivationStep
// Il2CppName: get_CurrentActivationStep
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Oculus::Interaction::PoseDetection::Sequence::*)()>(&Oculus::Interaction::PoseDetection::Sequence::get_CurrentActivationStep)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::Sequence*), "get_CurrentActivationStep", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::Sequence::set_CurrentActivationStep
// Il2CppName: set_CurrentActivationStep
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::Sequence::*)(int)>(&Oculus::Interaction::PoseDetection::Sequence::set_CurrentActivationStep)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::Sequence*), "set_CurrentActivationStep", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::Sequence::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::Sequence::*)()>(&Oculus::Interaction::PoseDetection::Sequence::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::Sequence*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::Sequence::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::Sequence::*)()>(&Oculus::Interaction::PoseDetection::Sequence::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::Sequence*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::Sequence::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::Sequence::*)()>(&Oculus::Interaction::PoseDetection::Sequence::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::Sequence*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::Sequence::EnterNextStep
// Il2CppName: EnterNextStep
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::Sequence::*)(float)>(&Oculus::Interaction::PoseDetection::Sequence::EnterNextStep)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::Sequence*), "EnterNextStep", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::Sequence::ResetState
// Il2CppName: ResetState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::Sequence::*)()>(&Oculus::Interaction::PoseDetection::Sequence::ResetState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::Sequence*), "ResetState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::Sequence::get_Active
// Il2CppName: get_Active
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::PoseDetection::Sequence::*)()>(&Oculus::Interaction::PoseDetection::Sequence::get_Active)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::Sequence*), "get_Active", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::Sequence::set_Active
// Il2CppName: set_Active
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::Sequence::*)(bool)>(&Oculus::Interaction::PoseDetection::Sequence::set_Active)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::Sequence*), "set_Active", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::Sequence::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Oculus::Interaction::PoseDetection::Sequence::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::Sequence*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::Sequence::InjectOptionalStepsToActivate
// Il2CppName: InjectOptionalStepsToActivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::Sequence::*)(::ArrayW<::Oculus::Interaction::PoseDetection::Sequence::ActivationStep*>)>(&Oculus::Interaction::PoseDetection::Sequence::InjectOptionalStepsToActivate)> {
  static const MethodInfo* get() {
    static auto* stepsToActivate = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Oculus.Interaction.PoseDetection", "Sequence/ActivationStep"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::Sequence*), "InjectOptionalStepsToActivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stepsToActivate});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::Sequence::InjectOptionalRemainActiveWhile
// Il2CppName: InjectOptionalRemainActiveWhile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::Sequence::*)(::Oculus::Interaction::IActiveState*)>(&Oculus::Interaction::PoseDetection::Sequence::InjectOptionalRemainActiveWhile)> {
  static const MethodInfo* get() {
    static auto* activeState = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IActiveState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::Sequence*), "InjectOptionalRemainActiveWhile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{activeState});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::Sequence::InjectOptionalTimeProvider
// Il2CppName: InjectOptionalTimeProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::Sequence::*)(::System::Func_1<float>*)>(&Oculus::Interaction::PoseDetection::Sequence::InjectOptionalTimeProvider)> {
  static const MethodInfo* get() {
    static auto* timeProvider = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Func`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::Sequence*), "InjectOptionalTimeProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{timeProvider});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::Sequence::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
