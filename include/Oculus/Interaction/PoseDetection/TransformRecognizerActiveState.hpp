// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Oculus.Interaction.IActiveState
#include "Oculus/Interaction/IActiveState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Object because it is already included!
}
// Forward declaring namespace: Oculus::Interaction::Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: IHand
  class IHand;
}
// Forward declaring namespace: Oculus::Interaction::PoseDetection
namespace Oculus::Interaction::PoseDetection {
  // Forward declaring type: ITransformFeatureStateProvider
  class ITransformFeatureStateProvider;
  // Forward declaring type: TransformFeatureConfigList
  class TransformFeatureConfigList;
  // Forward declaring type: TransformConfig
  class TransformConfig;
  // Forward declaring type: TransformFeatureConfig
  class TransformFeatureConfig;
  // Forward declaring type: TransformFeature
  struct TransformFeature;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IReadOnlyList`1<T>
  template<typename T>
  class IReadOnlyList_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Nullable`1<T>
  template<typename T>
  struct Nullable_1;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.PoseDetection
namespace Oculus::Interaction::PoseDetection {
  // Forward declaring type: TransformRecognizerActiveState
  class TransformRecognizerActiveState;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::PoseDetection::TransformRecognizerActiveState);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::PoseDetection::TransformRecognizerActiveState*, "Oculus.Interaction.PoseDetection", "TransformRecognizerActiveState");
// Type namespace: Oculus.Interaction.PoseDetection
namespace Oculus::Interaction::PoseDetection {
  // Size: 0x51
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.PoseDetection.TransformRecognizerActiveState
  // [TokenAttribute] Offset: FFFFFFFF
  class TransformRecognizerActiveState : public ::UnityEngine::MonoBehaviour/*, public ::Oculus::Interaction::IActiveState*/ {
    public:
    public:
    // private UnityEngine.Object _hand
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Object* hand;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.Input.IHand <Hand>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    ::Oculus::Interaction::Input::IHand* Hand;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::IHand*) == 0x8);
    // private UnityEngine.Object _transformFeatureStateProvider
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Object* transformFeatureStateProvider;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // protected Oculus.Interaction.PoseDetection.ITransformFeatureStateProvider TransformFeatureStateProvider
    // Size: 0x8
    // Offset: 0x38
    ::Oculus::Interaction::PoseDetection::ITransformFeatureStateProvider* TransformFeatureStateProvider;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::PoseDetection::ITransformFeatureStateProvider*) == 0x8);
    // private Oculus.Interaction.PoseDetection.TransformFeatureConfigList _transformFeatureConfigs
    // Size: 0x8
    // Offset: 0x40
    ::Oculus::Interaction::PoseDetection::TransformFeatureConfigList* transformFeatureConfigs;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::PoseDetection::TransformFeatureConfigList*) == 0x8);
    // private Oculus.Interaction.PoseDetection.TransformConfig _transformConfig
    // Size: 0x8
    // Offset: 0x48
    ::Oculus::Interaction::PoseDetection::TransformConfig* transformConfig;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::PoseDetection::TransformConfig*) == 0x8);
    // protected System.Boolean _started
    // Size: 0x1
    // Offset: 0x50
    bool started;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::IActiveState
    operator ::Oculus::Interaction::IActiveState() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::IActiveState*>(this);
    }
    // Get instance field reference: private UnityEngine.Object _hand
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__hand();
    // Get instance field reference: private Oculus.Interaction.Input.IHand <Hand>k__BackingField
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::IHand*& dyn_$Hand$k__BackingField();
    // Get instance field reference: private UnityEngine.Object _transformFeatureStateProvider
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__transformFeatureStateProvider();
    // Get instance field reference: protected Oculus.Interaction.PoseDetection.ITransformFeatureStateProvider TransformFeatureStateProvider
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::PoseDetection::ITransformFeatureStateProvider*& dyn_TransformFeatureStateProvider();
    // Get instance field reference: private Oculus.Interaction.PoseDetection.TransformFeatureConfigList _transformFeatureConfigs
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::PoseDetection::TransformFeatureConfigList*& dyn__transformFeatureConfigs();
    // Get instance field reference: private Oculus.Interaction.PoseDetection.TransformConfig _transformConfig
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::PoseDetection::TransformConfig*& dyn__transformConfig();
    // Get instance field reference: protected System.Boolean _started
    [[deprecated("Use field access instead!")]] bool& dyn__started();
    // public Oculus.Interaction.Input.IHand get_Hand()
    // Offset: 0x47F68B8
    ::Oculus::Interaction::Input::IHand* get_Hand();
    // private System.Void set_Hand(Oculus.Interaction.Input.IHand value)
    // Offset: 0x47F68C0
    void set_Hand(::Oculus::Interaction::Input::IHand* value);
    // public System.Collections.Generic.IReadOnlyList`1<Oculus.Interaction.PoseDetection.TransformFeatureConfig> get_FeatureConfigs()
    // Offset: 0x47F68C8
    ::System::Collections::Generic::IReadOnlyList_1<::Oculus::Interaction::PoseDetection::TransformFeatureConfig*>* get_FeatureConfigs();
    // public Oculus.Interaction.PoseDetection.TransformConfig get_TransformConfig()
    // Offset: 0x47F68E4
    ::Oculus::Interaction::PoseDetection::TransformConfig* get_TransformConfig();
    // protected System.Void Awake()
    // Offset: 0x47F68EC
    void Awake();
    // protected System.Void Start()
    // Offset: 0x47F698C
    void Start();
    // protected System.Void OnEnable()
    // Offset: 0x47F69E0
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x47F6E38
    void OnDisable();
    // private System.Void InitStateProvider()
    // Offset: 0x47F6AA8
    void InitStateProvider();
    // public System.Void GetFeatureVectorAndWristPos(Oculus.Interaction.PoseDetection.TransformFeature feature, System.Boolean isHandVector, ref System.Nullable`1<UnityEngine.Vector3> featureVec, ref System.Nullable`1<UnityEngine.Vector3> wristPos)
    // Offset: 0x47F6EF8
    void GetFeatureVectorAndWristPos(::Oculus::Interaction::PoseDetection::TransformFeature feature, bool isHandVector, ByRef<::System::Nullable_1<::UnityEngine::Vector3>> featureVec, ByRef<::System::Nullable_1<::UnityEngine::Vector3>> wristPos);
    // public System.Boolean get_Active()
    // Offset: 0x47F6FD4
    bool get_Active();
    // public System.Void InjectAllTransformRecognizerActiveState(Oculus.Interaction.Input.IHand hand, Oculus.Interaction.PoseDetection.ITransformFeatureStateProvider transformFeatureStateProvider, Oculus.Interaction.PoseDetection.TransformFeatureConfigList transformFeatureList, Oculus.Interaction.PoseDetection.TransformConfig transformConfig)
    // Offset: 0x47F73B4
    void InjectAllTransformRecognizerActiveState(::Oculus::Interaction::Input::IHand* hand, ::Oculus::Interaction::PoseDetection::ITransformFeatureStateProvider* transformFeatureStateProvider, ::Oculus::Interaction::PoseDetection::TransformFeatureConfigList* transformFeatureList, ::Oculus::Interaction::PoseDetection::TransformConfig* transformConfig);
    // public System.Void InjectHand(Oculus.Interaction.Input.IHand hand)
    // Offset: 0x47F740C
    void InjectHand(::Oculus::Interaction::Input::IHand* hand);
    // public System.Void InjectTransformFeatureStateProvider(Oculus.Interaction.PoseDetection.ITransformFeatureStateProvider transformFeatureStateProvider)
    // Offset: 0x47F74DC
    void InjectTransformFeatureStateProvider(::Oculus::Interaction::PoseDetection::ITransformFeatureStateProvider* transformFeatureStateProvider);
    // public System.Void InjectTransformFeatureList(Oculus.Interaction.PoseDetection.TransformFeatureConfigList transformFeatureList)
    // Offset: 0x47F75A8
    void InjectTransformFeatureList(::Oculus::Interaction::PoseDetection::TransformFeatureConfigList* transformFeatureList);
    // public System.Void InjectTransformConfig(Oculus.Interaction.PoseDetection.TransformConfig transformConfig)
    // Offset: 0x47F75B0
    void InjectTransformConfig(::Oculus::Interaction::PoseDetection::TransformConfig* transformConfig);
    // public System.Void .ctor()
    // Offset: 0x47F75B8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TransformRecognizerActiveState* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::PoseDetection::TransformRecognizerActiveState::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TransformRecognizerActiveState*, creationType>()));
    }
  }; // Oculus.Interaction.PoseDetection.TransformRecognizerActiveState
  #pragma pack(pop)
  static check_size<sizeof(TransformRecognizerActiveState), 80 + sizeof(bool)> __Oculus_Interaction_PoseDetection_TransformRecognizerActiveStateSizeCheck;
  static_assert(sizeof(TransformRecognizerActiveState) == 0x51);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::TransformRecognizerActiveState::get_Hand
// Il2CppName: get_Hand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Input::IHand* (Oculus::Interaction::PoseDetection::TransformRecognizerActiveState::*)()>(&Oculus::Interaction::PoseDetection::TransformRecognizerActiveState::get_Hand)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::TransformRecognizerActiveState*), "get_Hand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::TransformRecognizerActiveState::set_Hand
// Il2CppName: set_Hand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::TransformRecognizerActiveState::*)(::Oculus::Interaction::Input::IHand*)>(&Oculus::Interaction::PoseDetection::TransformRecognizerActiveState::set_Hand)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::TransformRecognizerActiveState*), "set_Hand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::TransformRecognizerActiveState::get_FeatureConfigs
// Il2CppName: get_FeatureConfigs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IReadOnlyList_1<::Oculus::Interaction::PoseDetection::TransformFeatureConfig*>* (Oculus::Interaction::PoseDetection::TransformRecognizerActiveState::*)()>(&Oculus::Interaction::PoseDetection::TransformRecognizerActiveState::get_FeatureConfigs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::TransformRecognizerActiveState*), "get_FeatureConfigs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::TransformRecognizerActiveState::get_TransformConfig
// Il2CppName: get_TransformConfig
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::PoseDetection::TransformConfig* (Oculus::Interaction::PoseDetection::TransformRecognizerActiveState::*)()>(&Oculus::Interaction::PoseDetection::TransformRecognizerActiveState::get_TransformConfig)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::TransformRecognizerActiveState*), "get_TransformConfig", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::TransformRecognizerActiveState::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::TransformRecognizerActiveState::*)()>(&Oculus::Interaction::PoseDetection::TransformRecognizerActiveState::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::TransformRecognizerActiveState*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::TransformRecognizerActiveState::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::TransformRecognizerActiveState::*)()>(&Oculus::Interaction::PoseDetection::TransformRecognizerActiveState::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::TransformRecognizerActiveState*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::TransformRecognizerActiveState::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::TransformRecognizerActiveState::*)()>(&Oculus::Interaction::PoseDetection::TransformRecognizerActiveState::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::TransformRecognizerActiveState*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::TransformRecognizerActiveState::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::TransformRecognizerActiveState::*)()>(&Oculus::Interaction::PoseDetection::TransformRecognizerActiveState::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::TransformRecognizerActiveState*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::TransformRecognizerActiveState::InitStateProvider
// Il2CppName: InitStateProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::TransformRecognizerActiveState::*)()>(&Oculus::Interaction::PoseDetection::TransformRecognizerActiveState::InitStateProvider)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::TransformRecognizerActiveState*), "InitStateProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::TransformRecognizerActiveState::GetFeatureVectorAndWristPos
// Il2CppName: GetFeatureVectorAndWristPos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::TransformRecognizerActiveState::*)(::Oculus::Interaction::PoseDetection::TransformFeature, bool, ByRef<::System::Nullable_1<::UnityEngine::Vector3>>, ByRef<::System::Nullable_1<::UnityEngine::Vector3>>)>(&Oculus::Interaction::PoseDetection::TransformRecognizerActiveState::GetFeatureVectorAndWristPos)> {
  static const MethodInfo* get() {
    static auto* feature = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.PoseDetection", "TransformFeature")->byval_arg;
    static auto* isHandVector = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* featureVec = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->this_arg;
    static auto* wristPos = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::TransformRecognizerActiveState*), "GetFeatureVectorAndWristPos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{feature, isHandVector, featureVec, wristPos});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::TransformRecognizerActiveState::get_Active
// Il2CppName: get_Active
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::PoseDetection::TransformRecognizerActiveState::*)()>(&Oculus::Interaction::PoseDetection::TransformRecognizerActiveState::get_Active)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::TransformRecognizerActiveState*), "get_Active", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::TransformRecognizerActiveState::InjectAllTransformRecognizerActiveState
// Il2CppName: InjectAllTransformRecognizerActiveState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::TransformRecognizerActiveState::*)(::Oculus::Interaction::Input::IHand*, ::Oculus::Interaction::PoseDetection::ITransformFeatureStateProvider*, ::Oculus::Interaction::PoseDetection::TransformFeatureConfigList*, ::Oculus::Interaction::PoseDetection::TransformConfig*)>(&Oculus::Interaction::PoseDetection::TransformRecognizerActiveState::InjectAllTransformRecognizerActiveState)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHand")->byval_arg;
    static auto* transformFeatureStateProvider = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.PoseDetection", "ITransformFeatureStateProvider")->byval_arg;
    static auto* transformFeatureList = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.PoseDetection", "TransformFeatureConfigList")->byval_arg;
    static auto* transformConfig = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.PoseDetection", "TransformConfig")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::TransformRecognizerActiveState*), "InjectAllTransformRecognizerActiveState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand, transformFeatureStateProvider, transformFeatureList, transformConfig});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::TransformRecognizerActiveState::InjectHand
// Il2CppName: InjectHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::TransformRecognizerActiveState::*)(::Oculus::Interaction::Input::IHand*)>(&Oculus::Interaction::PoseDetection::TransformRecognizerActiveState::InjectHand)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::TransformRecognizerActiveState*), "InjectHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::TransformRecognizerActiveState::InjectTransformFeatureStateProvider
// Il2CppName: InjectTransformFeatureStateProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::TransformRecognizerActiveState::*)(::Oculus::Interaction::PoseDetection::ITransformFeatureStateProvider*)>(&Oculus::Interaction::PoseDetection::TransformRecognizerActiveState::InjectTransformFeatureStateProvider)> {
  static const MethodInfo* get() {
    static auto* transformFeatureStateProvider = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.PoseDetection", "ITransformFeatureStateProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::TransformRecognizerActiveState*), "InjectTransformFeatureStateProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transformFeatureStateProvider});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::TransformRecognizerActiveState::InjectTransformFeatureList
// Il2CppName: InjectTransformFeatureList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::TransformRecognizerActiveState::*)(::Oculus::Interaction::PoseDetection::TransformFeatureConfigList*)>(&Oculus::Interaction::PoseDetection::TransformRecognizerActiveState::InjectTransformFeatureList)> {
  static const MethodInfo* get() {
    static auto* transformFeatureList = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.PoseDetection", "TransformFeatureConfigList")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::TransformRecognizerActiveState*), "InjectTransformFeatureList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transformFeatureList});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::TransformRecognizerActiveState::InjectTransformConfig
// Il2CppName: InjectTransformConfig
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::TransformRecognizerActiveState::*)(::Oculus::Interaction::PoseDetection::TransformConfig*)>(&Oculus::Interaction::PoseDetection::TransformRecognizerActiveState::InjectTransformConfig)> {
  static const MethodInfo* get() {
    static auto* transformConfig = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.PoseDetection", "TransformConfig")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::TransformRecognizerActiveState*), "InjectTransformConfig", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transformConfig});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::TransformRecognizerActiveState::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
