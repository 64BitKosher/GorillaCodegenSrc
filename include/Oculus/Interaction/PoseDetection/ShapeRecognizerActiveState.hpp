// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Oculus.Interaction.IActiveState
#include "Oculus/Interaction/IActiveState.hpp"
// Including type: Oculus.Interaction.Input.HandFinger
#include "Oculus/Interaction/Input/HandFinger.hpp"
// Including type: Oculus.Interaction.PoseDetection.ShapeRecognizer
#include "Oculus/Interaction/PoseDetection/ShapeRecognizer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IReadOnlyList`1<T>
  template<typename T>
  class IReadOnlyList_1;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Object because it is already included!
}
// Forward declaring namespace: Oculus::Interaction::Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: IHand
  class IHand;
  // Forward declaring type: Handedness
  struct Handedness;
}
// Forward declaring namespace: Oculus::Interaction::PoseDetection
namespace Oculus::Interaction::PoseDetection {
  // Forward declaring type: IFingerFeatureStateProvider
  class IFingerFeatureStateProvider;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.PoseDetection
namespace Oculus::Interaction::PoseDetection {
  // Forward declaring type: ShapeRecognizerActiveState
  class ShapeRecognizerActiveState;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::PoseDetection::ShapeRecognizerActiveState);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::PoseDetection::ShapeRecognizerActiveState*, "Oculus.Interaction.PoseDetection", "ShapeRecognizerActiveState");
// Type namespace: Oculus.Interaction.PoseDetection
namespace Oculus::Interaction::PoseDetection {
  // Size: 0x51
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.PoseDetection.ShapeRecognizerActiveState
  // [TokenAttribute] Offset: FFFFFFFF
  class ShapeRecognizerActiveState : public ::UnityEngine::MonoBehaviour/*, public ::Oculus::Interaction::IActiveState*/ {
    public:
    // Nested type: ::Oculus::Interaction::PoseDetection::ShapeRecognizerActiveState::FingerFeatureStateUsage
    struct FingerFeatureStateUsage;
    // Size: 0x10
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Oculus.Interaction.PoseDetection.ShapeRecognizerActiveState/FingerFeatureStateUsage
    // [TokenAttribute] Offset: FFFFFFFF
    struct FingerFeatureStateUsage/*, public ::System::ValueType*/ {
      public:
      public:
      // public Oculus.Interaction.Input.HandFinger handFinger
      // Size: 0x4
      // Offset: 0x0
      ::Oculus::Interaction::Input::HandFinger handFinger;
      // Field size check
      static_assert(sizeof(::Oculus::Interaction::Input::HandFinger) == 0x4);
      // Padding between fields: handFinger and: config
      char __padding0[0x4] = {};
      // public Oculus.Interaction.PoseDetection.ShapeRecognizer/FingerFeatureConfig config
      // Size: 0x8
      // Offset: 0x8
      ::Oculus::Interaction::PoseDetection::ShapeRecognizer::FingerFeatureConfig* config;
      // Field size check
      static_assert(sizeof(::Oculus::Interaction::PoseDetection::ShapeRecognizer::FingerFeatureConfig*) == 0x8);
      public:
      // Creating value type constructor for type: FingerFeatureStateUsage
      constexpr FingerFeatureStateUsage(::Oculus::Interaction::Input::HandFinger handFinger_ = {}, ::Oculus::Interaction::PoseDetection::ShapeRecognizer::FingerFeatureConfig* config_ = {}) noexcept : handFinger{handFinger_}, config{config_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public Oculus.Interaction.Input.HandFinger handFinger
      [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::HandFinger& dyn_handFinger();
      // Get instance field reference: public Oculus.Interaction.PoseDetection.ShapeRecognizer/FingerFeatureConfig config
      [[deprecated("Use field access instead!")]] ::Oculus::Interaction::PoseDetection::ShapeRecognizer::FingerFeatureConfig*& dyn_config();
    }; // Oculus.Interaction.PoseDetection.ShapeRecognizerActiveState/FingerFeatureStateUsage
    #pragma pack(pop)
    static check_size<sizeof(ShapeRecognizerActiveState::FingerFeatureStateUsage), 8 + sizeof(::Oculus::Interaction::PoseDetection::ShapeRecognizer::FingerFeatureConfig*)> __Oculus_Interaction_PoseDetection_ShapeRecognizerActiveState_FingerFeatureStateUsageSizeCheck;
    static_assert(sizeof(ShapeRecognizerActiveState::FingerFeatureStateUsage) == 0x10);
    public:
    // private UnityEngine.Object _hand
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Object* hand;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.Input.IHand <Hand>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    ::Oculus::Interaction::Input::IHand* Hand;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::IHand*) == 0x8);
    // private UnityEngine.Object _fingerFeatureStateProvider
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Object* fingerFeatureStateProvider;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // protected Oculus.Interaction.PoseDetection.IFingerFeatureStateProvider FingerFeatureStateProvider
    // Size: 0x8
    // Offset: 0x38
    ::Oculus::Interaction::PoseDetection::IFingerFeatureStateProvider* FingerFeatureStateProvider;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::PoseDetection::IFingerFeatureStateProvider*) == 0x8);
    // private Oculus.Interaction.PoseDetection.ShapeRecognizer[] _shapes
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<::Oculus::Interaction::PoseDetection::ShapeRecognizer*> shapes;
    // Field size check
    static_assert(sizeof(::ArrayW<::Oculus::Interaction::PoseDetection::ShapeRecognizer*>) == 0x8);
    // private System.Collections.Generic.List`1<Oculus.Interaction.PoseDetection.ShapeRecognizerActiveState/FingerFeatureStateUsage> _allFingerStates
    // Size: 0x8
    // Offset: 0x48
    ::System::Collections::Generic::List_1<::Oculus::Interaction::PoseDetection::ShapeRecognizerActiveState::FingerFeatureStateUsage>* allFingerStates;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Oculus::Interaction::PoseDetection::ShapeRecognizerActiveState::FingerFeatureStateUsage>*) == 0x8);
    // private System.Boolean _nativeActive
    // Size: 0x1
    // Offset: 0x50
    bool nativeActive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::IActiveState
    operator ::Oculus::Interaction::IActiveState() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::IActiveState*>(this);
    }
    // Get instance field reference: private UnityEngine.Object _hand
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__hand();
    // Get instance field reference: private Oculus.Interaction.Input.IHand <Hand>k__BackingField
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::IHand*& dyn_$Hand$k__BackingField();
    // Get instance field reference: private UnityEngine.Object _fingerFeatureStateProvider
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__fingerFeatureStateProvider();
    // Get instance field reference: protected Oculus.Interaction.PoseDetection.IFingerFeatureStateProvider FingerFeatureStateProvider
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::PoseDetection::IFingerFeatureStateProvider*& dyn_FingerFeatureStateProvider();
    // Get instance field reference: private Oculus.Interaction.PoseDetection.ShapeRecognizer[] _shapes
    [[deprecated("Use field access instead!")]] ::ArrayW<::Oculus::Interaction::PoseDetection::ShapeRecognizer*>& dyn__shapes();
    // Get instance field reference: private System.Collections.Generic.List`1<Oculus.Interaction.PoseDetection.ShapeRecognizerActiveState/FingerFeatureStateUsage> _allFingerStates
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Oculus::Interaction::PoseDetection::ShapeRecognizerActiveState::FingerFeatureStateUsage>*& dyn__allFingerStates();
    // Get instance field reference: private System.Boolean _nativeActive
    [[deprecated("Use field access instead!")]] bool& dyn__nativeActive();
    // public Oculus.Interaction.Input.IHand get_Hand()
    // Offset: 0x47F2CF0
    ::Oculus::Interaction::Input::IHand* get_Hand();
    // private System.Void set_Hand(Oculus.Interaction.Input.IHand value)
    // Offset: 0x47F2CF8
    void set_Hand(::Oculus::Interaction::Input::IHand* value);
    // public System.Collections.Generic.IReadOnlyList`1<Oculus.Interaction.PoseDetection.ShapeRecognizer> get_Shapes()
    // Offset: 0x47F2D00
    ::System::Collections::Generic::IReadOnlyList_1<::Oculus::Interaction::PoseDetection::ShapeRecognizer*>* get_Shapes();
    // public Oculus.Interaction.Input.Handedness get_Handedness()
    // Offset: 0x47F2D08
    ::Oculus::Interaction::Input::Handedness get_Handedness();
    // protected System.Void Awake()
    // Offset: 0x47F2DA8
    void Awake();
    // protected System.Void Start()
    // Offset: 0x47F2E48
    void Start();
    // private System.Void InitStateProvider()
    // Offset: 0x47F32B4
    void InitStateProvider();
    // private System.Collections.Generic.List`1<Oculus.Interaction.PoseDetection.ShapeRecognizerActiveState/FingerFeatureStateUsage> FlattenUsedFeatures()
    // Offset: 0x47F2E70
    ::System::Collections::Generic::List_1<::Oculus::Interaction::PoseDetection::ShapeRecognizerActiveState::FingerFeatureStateUsage>* FlattenUsedFeatures();
    // public System.Boolean get_Active()
    // Offset: 0x47F34A4
    bool get_Active();
    // public System.Void InjectAllShapeRecognizerActiveState(Oculus.Interaction.Input.IHand hand, Oculus.Interaction.PoseDetection.IFingerFeatureStateProvider fingerFeatureStateProvider, Oculus.Interaction.PoseDetection.ShapeRecognizer[] shapes)
    // Offset: 0x47F3740
    void InjectAllShapeRecognizerActiveState(::Oculus::Interaction::Input::IHand* hand, ::Oculus::Interaction::PoseDetection::IFingerFeatureStateProvider* fingerFeatureStateProvider, ::ArrayW<::Oculus::Interaction::PoseDetection::ShapeRecognizer*> shapes);
    // public System.Void InjectHand(Oculus.Interaction.Input.IHand hand)
    // Offset: 0x47F377C
    void InjectHand(::Oculus::Interaction::Input::IHand* hand);
    // public System.Void InjectFingerFeatureStateProvider(Oculus.Interaction.PoseDetection.IFingerFeatureStateProvider fingerFeatureStateProvider)
    // Offset: 0x47F384C
    void InjectFingerFeatureStateProvider(::Oculus::Interaction::PoseDetection::IFingerFeatureStateProvider* fingerFeatureStateProvider);
    // public System.Void InjectShapes(Oculus.Interaction.PoseDetection.ShapeRecognizer[] shapes)
    // Offset: 0x47F391C
    void InjectShapes(::ArrayW<::Oculus::Interaction::PoseDetection::ShapeRecognizer*> shapes);
    // public System.Void .ctor()
    // Offset: 0x47F3924
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ShapeRecognizerActiveState* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::PoseDetection::ShapeRecognizerActiveState::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ShapeRecognizerActiveState*, creationType>()));
    }
  }; // Oculus.Interaction.PoseDetection.ShapeRecognizerActiveState
  #pragma pack(pop)
  static check_size<sizeof(ShapeRecognizerActiveState), 80 + sizeof(bool)> __Oculus_Interaction_PoseDetection_ShapeRecognizerActiveStateSizeCheck;
  static_assert(sizeof(ShapeRecognizerActiveState) == 0x51);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::PoseDetection::ShapeRecognizerActiveState::FingerFeatureStateUsage, "Oculus.Interaction.PoseDetection", "ShapeRecognizerActiveState/FingerFeatureStateUsage");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::ShapeRecognizerActiveState::get_Hand
// Il2CppName: get_Hand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Input::IHand* (Oculus::Interaction::PoseDetection::ShapeRecognizerActiveState::*)()>(&Oculus::Interaction::PoseDetection::ShapeRecognizerActiveState::get_Hand)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::ShapeRecognizerActiveState*), "get_Hand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::ShapeRecognizerActiveState::set_Hand
// Il2CppName: set_Hand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::ShapeRecognizerActiveState::*)(::Oculus::Interaction::Input::IHand*)>(&Oculus::Interaction::PoseDetection::ShapeRecognizerActiveState::set_Hand)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::ShapeRecognizerActiveState*), "set_Hand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::ShapeRecognizerActiveState::get_Shapes
// Il2CppName: get_Shapes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IReadOnlyList_1<::Oculus::Interaction::PoseDetection::ShapeRecognizer*>* (Oculus::Interaction::PoseDetection::ShapeRecognizerActiveState::*)()>(&Oculus::Interaction::PoseDetection::ShapeRecognizerActiveState::get_Shapes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::ShapeRecognizerActiveState*), "get_Shapes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::ShapeRecognizerActiveState::get_Handedness
// Il2CppName: get_Handedness
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Input::Handedness (Oculus::Interaction::PoseDetection::ShapeRecognizerActiveState::*)()>(&Oculus::Interaction::PoseDetection::ShapeRecognizerActiveState::get_Handedness)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::ShapeRecognizerActiveState*), "get_Handedness", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::ShapeRecognizerActiveState::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::ShapeRecognizerActiveState::*)()>(&Oculus::Interaction::PoseDetection::ShapeRecognizerActiveState::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::ShapeRecognizerActiveState*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::ShapeRecognizerActiveState::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::ShapeRecognizerActiveState::*)()>(&Oculus::Interaction::PoseDetection::ShapeRecognizerActiveState::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::ShapeRecognizerActiveState*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::ShapeRecognizerActiveState::InitStateProvider
// Il2CppName: InitStateProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::ShapeRecognizerActiveState::*)()>(&Oculus::Interaction::PoseDetection::ShapeRecognizerActiveState::InitStateProvider)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::ShapeRecognizerActiveState*), "InitStateProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::ShapeRecognizerActiveState::FlattenUsedFeatures
// Il2CppName: FlattenUsedFeatures
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::Oculus::Interaction::PoseDetection::ShapeRecognizerActiveState::FingerFeatureStateUsage>* (Oculus::Interaction::PoseDetection::ShapeRecognizerActiveState::*)()>(&Oculus::Interaction::PoseDetection::ShapeRecognizerActiveState::FlattenUsedFeatures)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::ShapeRecognizerActiveState*), "FlattenUsedFeatures", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::ShapeRecognizerActiveState::get_Active
// Il2CppName: get_Active
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::PoseDetection::ShapeRecognizerActiveState::*)()>(&Oculus::Interaction::PoseDetection::ShapeRecognizerActiveState::get_Active)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::ShapeRecognizerActiveState*), "get_Active", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::ShapeRecognizerActiveState::InjectAllShapeRecognizerActiveState
// Il2CppName: InjectAllShapeRecognizerActiveState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::ShapeRecognizerActiveState::*)(::Oculus::Interaction::Input::IHand*, ::Oculus::Interaction::PoseDetection::IFingerFeatureStateProvider*, ::ArrayW<::Oculus::Interaction::PoseDetection::ShapeRecognizer*>)>(&Oculus::Interaction::PoseDetection::ShapeRecognizerActiveState::InjectAllShapeRecognizerActiveState)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHand")->byval_arg;
    static auto* fingerFeatureStateProvider = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.PoseDetection", "IFingerFeatureStateProvider")->byval_arg;
    static auto* shapes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Oculus.Interaction.PoseDetection", "ShapeRecognizer"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::ShapeRecognizerActiveState*), "InjectAllShapeRecognizerActiveState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand, fingerFeatureStateProvider, shapes});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::ShapeRecognizerActiveState::InjectHand
// Il2CppName: InjectHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::ShapeRecognizerActiveState::*)(::Oculus::Interaction::Input::IHand*)>(&Oculus::Interaction::PoseDetection::ShapeRecognizerActiveState::InjectHand)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::ShapeRecognizerActiveState*), "InjectHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::ShapeRecognizerActiveState::InjectFingerFeatureStateProvider
// Il2CppName: InjectFingerFeatureStateProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::ShapeRecognizerActiveState::*)(::Oculus::Interaction::PoseDetection::IFingerFeatureStateProvider*)>(&Oculus::Interaction::PoseDetection::ShapeRecognizerActiveState::InjectFingerFeatureStateProvider)> {
  static const MethodInfo* get() {
    static auto* fingerFeatureStateProvider = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.PoseDetection", "IFingerFeatureStateProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::ShapeRecognizerActiveState*), "InjectFingerFeatureStateProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fingerFeatureStateProvider});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::ShapeRecognizerActiveState::InjectShapes
// Il2CppName: InjectShapes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PoseDetection::ShapeRecognizerActiveState::*)(::ArrayW<::Oculus::Interaction::PoseDetection::ShapeRecognizer*>)>(&Oculus::Interaction::PoseDetection::ShapeRecognizerActiveState::InjectShapes)> {
  static const MethodInfo* get() {
    static auto* shapes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Oculus.Interaction.PoseDetection", "ShapeRecognizer"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::ShapeRecognizerActiveState*), "InjectShapes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shapes});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::ShapeRecognizerActiveState::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
