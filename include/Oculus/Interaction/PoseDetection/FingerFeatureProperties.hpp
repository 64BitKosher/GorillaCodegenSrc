// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Oculus.Interaction.PoseDetection.FingerFeature
#include "Oculus/Interaction/PoseDetection/FingerFeature.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction::PoseDetection
namespace Oculus::Interaction::PoseDetection {
  // Forward declaring type: FeatureStateDescription
  class FeatureStateDescription;
  // Forward declaring type: FeatureDescription
  class FeatureDescription;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IReadOnlyDictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class IReadOnlyDictionary_2;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.PoseDetection
namespace Oculus::Interaction::PoseDetection {
  // Forward declaring type: FingerFeatureProperties
  class FingerFeatureProperties;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::PoseDetection::FingerFeatureProperties);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::PoseDetection::FingerFeatureProperties*, "Oculus.Interaction.PoseDetection", "FingerFeatureProperties");
// Type namespace: Oculus.Interaction.PoseDetection
namespace Oculus::Interaction::PoseDetection {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.PoseDetection.FingerFeatureProperties
  // [TokenAttribute] Offset: FFFFFFFF
  class FingerFeatureProperties : public ::Il2CppObject {
    public:
    // Get static field: static public readonly Oculus.Interaction.PoseDetection.FeatureStateDescription[] CurlFeatureStates
    static ::ArrayW<::Oculus::Interaction::PoseDetection::FeatureStateDescription*> _get_CurlFeatureStates();
    // Set static field: static public readonly Oculus.Interaction.PoseDetection.FeatureStateDescription[] CurlFeatureStates
    static void _set_CurlFeatureStates(::ArrayW<::Oculus::Interaction::PoseDetection::FeatureStateDescription*> value);
    // Get static field: static public readonly Oculus.Interaction.PoseDetection.FeatureStateDescription[] FlexionFeatureStates
    static ::ArrayW<::Oculus::Interaction::PoseDetection::FeatureStateDescription*> _get_FlexionFeatureStates();
    // Set static field: static public readonly Oculus.Interaction.PoseDetection.FeatureStateDescription[] FlexionFeatureStates
    static void _set_FlexionFeatureStates(::ArrayW<::Oculus::Interaction::PoseDetection::FeatureStateDescription*> value);
    // Get static field: static public readonly Oculus.Interaction.PoseDetection.FeatureStateDescription[] AbductionFeatureStates
    static ::ArrayW<::Oculus::Interaction::PoseDetection::FeatureStateDescription*> _get_AbductionFeatureStates();
    // Set static field: static public readonly Oculus.Interaction.PoseDetection.FeatureStateDescription[] AbductionFeatureStates
    static void _set_AbductionFeatureStates(::ArrayW<::Oculus::Interaction::PoseDetection::FeatureStateDescription*> value);
    // Get static field: static public readonly Oculus.Interaction.PoseDetection.FeatureStateDescription[] OppositionFeatureStates
    static ::ArrayW<::Oculus::Interaction::PoseDetection::FeatureStateDescription*> _get_OppositionFeatureStates();
    // Set static field: static public readonly Oculus.Interaction.PoseDetection.FeatureStateDescription[] OppositionFeatureStates
    static void _set_OppositionFeatureStates(::ArrayW<::Oculus::Interaction::PoseDetection::FeatureStateDescription*> value);
    // Get static field: static private readonly System.Collections.Generic.IReadOnlyDictionary`2<Oculus.Interaction.PoseDetection.FingerFeature,Oculus.Interaction.PoseDetection.FeatureDescription> <FeatureDescriptions>k__BackingField
    static ::System::Collections::Generic::IReadOnlyDictionary_2<::Oculus::Interaction::PoseDetection::FingerFeature, ::Oculus::Interaction::PoseDetection::FeatureDescription*>* _get_$FeatureDescriptions$k__BackingField();
    // Set static field: static private readonly System.Collections.Generic.IReadOnlyDictionary`2<Oculus.Interaction.PoseDetection.FingerFeature,Oculus.Interaction.PoseDetection.FeatureDescription> <FeatureDescriptions>k__BackingField
    static void _set_$FeatureDescriptions$k__BackingField(::System::Collections::Generic::IReadOnlyDictionary_2<::Oculus::Interaction::PoseDetection::FingerFeature, ::Oculus::Interaction::PoseDetection::FeatureDescription*>* value);
    // static field const value: static public System.String FeatureCurlShortHelpText
    static constexpr const char* FeatureCurlShortHelpText = "Convex angle (in degrees) representing the top 2 joints of the fingers. Angle increases as finger curl becomes closed.";
    // Get static field: static public System.String FeatureCurlShortHelpText
    static ::StringW _get_FeatureCurlShortHelpText();
    // Set static field: static public System.String FeatureCurlShortHelpText
    static void _set_FeatureCurlShortHelpText(::StringW value);
    // static field const value: static public System.String FeatureCurlDetailHelpText
    static constexpr const char* FeatureCurlDetailHelpText = "Calculated from the average of the convex angles formed by the 2 bones connected to Joint 2, and 2 bones connected to Joint 3.\u000aValues above 180 Positive show a curled state, while values below 180 represent hyper-extension.";
    // Get static field: static public System.String FeatureCurlDetailHelpText
    static ::StringW _get_FeatureCurlDetailHelpText();
    // Set static field: static public System.String FeatureCurlDetailHelpText
    static void _set_FeatureCurlDetailHelpText(::StringW value);
    // static field const value: static public System.String FeatureFlexionShortHelpText
    static constexpr const char* FeatureFlexionShortHelpText = "Convex angle (in degrees) of joint 1 of the finger. Angle increases as finger flexion becomes closed.";
    // Get static field: static public System.String FeatureFlexionShortHelpText
    static ::StringW _get_FeatureFlexionShortHelpText();
    // Set static field: static public System.String FeatureFlexionShortHelpText
    static void _set_FeatureFlexionShortHelpText(::StringW value);
    // static field const value: static public System.String FeatureFlexionDetailHelpText
    static constexpr const char* FeatureFlexionDetailHelpText = "Calculated from the angle between the bones connected to finger Joint 1 around the Z axis of the joint.\u000aFor fingers, joint 1 is commonly known as the 'Knuckle'; but for the thumb it is alongside the wrist.\u000aValues above 180 Positive show a curled state, while values below 180 represent hyper-extension.upwards from the palm.";
    // Get static field: static public System.String FeatureFlexionDetailHelpText
    static ::StringW _get_FeatureFlexionDetailHelpText();
    // Set static field: static public System.String FeatureFlexionDetailHelpText
    static void _set_FeatureFlexionDetailHelpText(::StringW value);
    // static field const value: static public System.String FeatureAbductionShortHelpText
    static constexpr const char* FeatureAbductionShortHelpText = "Angle (in degrees) between the given finger, and the next finger towards the pinkie.";
    // Get static field: static public System.String FeatureAbductionShortHelpText
    static ::StringW _get_FeatureAbductionShortHelpText();
    // Set static field: static public System.String FeatureAbductionShortHelpText
    static void _set_FeatureAbductionShortHelpText(::StringW value);
    // static field const value: static public System.String FeatureAbductionDetailHelpText
    static constexpr const char* FeatureAbductionDetailHelpText = "Zero value implies that the two fingers are parallel.\u000aPositive angles indicate that the fingertips are spread apart.\u000aSmall negative angles are possible, and indicate that the finger is pressed up against the next finger.";
    // Get static field: static public System.String FeatureAbductionDetailHelpText
    static ::StringW _get_FeatureAbductionDetailHelpText();
    // Set static field: static public System.String FeatureAbductionDetailHelpText
    static void _set_FeatureAbductionDetailHelpText(::StringW value);
    // static field const value: static public System.String FeatureOppositionShortHelpText
    static constexpr const char* FeatureOppositionShortHelpText = "Distance between the tip of the given finger and the tip of the thumb.\u000aCalculated tracking space, with a 1.0 hand scale.";
    // Get static field: static public System.String FeatureOppositionShortHelpText
    static ::StringW _get_FeatureOppositionShortHelpText();
    // Set static field: static public System.String FeatureOppositionShortHelpText
    static void _set_FeatureOppositionShortHelpText(::StringW value);
    // static field const value: static public System.String FeatureOppositionDetailHelpText
    static constexpr const char* FeatureOppositionDetailHelpText = "Positive values indicate that the fingertips are spread apart.\u000aNegative values are not possible.";
    // Get static field: static public System.String FeatureOppositionDetailHelpText
    static ::StringW _get_FeatureOppositionDetailHelpText();
    // Set static field: static public System.String FeatureOppositionDetailHelpText
    static void _set_FeatureOppositionDetailHelpText(::StringW value);
    // static field const value: static public System.String FeatureStateThresholdMidpointHelpText
    static constexpr const char* FeatureStateThresholdMidpointHelpText = "The angle at which a state will transition from A > B (or B > A)";
    // Get static field: static public System.String FeatureStateThresholdMidpointHelpText
    static ::StringW _get_FeatureStateThresholdMidpointHelpText();
    // Set static field: static public System.String FeatureStateThresholdMidpointHelpText
    static void _set_FeatureStateThresholdMidpointHelpText(::StringW value);
    // static field const value: static public System.String FeatureStateThresholdWidthHelpText
    static constexpr const char* FeatureStateThresholdWidthHelpText = "How far the angle must exceed the midpoint until the transition can occur. This is to prevent rapid flickering at transition edges.";
    // Get static field: static public System.String FeatureStateThresholdWidthHelpText
    static ::StringW _get_FeatureStateThresholdWidthHelpText();
    // Set static field: static public System.String FeatureStateThresholdWidthHelpText
    static void _set_FeatureStateThresholdWidthHelpText(::StringW value);
    // static public System.Collections.Generic.IReadOnlyDictionary`2<Oculus.Interaction.PoseDetection.FingerFeature,Oculus.Interaction.PoseDetection.FeatureDescription> get_FeatureDescriptions()
    // Offset: 0x47E8880
    static ::System::Collections::Generic::IReadOnlyDictionary_2<::Oculus::Interaction::PoseDetection::FingerFeature, ::Oculus::Interaction::PoseDetection::FeatureDescription*>* get_FeatureDescriptions();
    // static private System.Void .cctor()
    // Offset: 0x47E88D8
    static void _cctor();
  }; // Oculus.Interaction.PoseDetection.FingerFeatureProperties
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::FingerFeatureProperties::get_FeatureDescriptions
// Il2CppName: get_FeatureDescriptions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IReadOnlyDictionary_2<::Oculus::Interaction::PoseDetection::FingerFeature, ::Oculus::Interaction::PoseDetection::FeatureDescription*>* (*)()>(&Oculus::Interaction::PoseDetection::FingerFeatureProperties::get_FeatureDescriptions)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::FingerFeatureProperties*), "get_FeatureDescriptions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseDetection::FingerFeatureProperties::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Oculus::Interaction::PoseDetection::FingerFeatureProperties::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseDetection::FingerFeatureProperties*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
