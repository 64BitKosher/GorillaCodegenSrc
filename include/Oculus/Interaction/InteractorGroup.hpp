// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Oculus.Interaction.IInteractor
#include "Oculus/Interaction/IInteractor.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction
namespace Oculus::Interaction {
  // Forward declaring type: IActiveState
  class IActiveState;
  // Forward declaring type: ICandidateComparer
  class ICandidateComparer;
  // Forward declaring type: UniqueIdentifier
  class UniqueIdentifier;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: IReadOnlyList`1<T>
  template<typename T>
  class IReadOnlyList_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Object because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Action
  class Action;
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: InteractorGroup
  class InteractorGroup;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::InteractorGroup);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::InteractorGroup*, "Oculus.Interaction", "InteractorGroup");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x89
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.InteractorGroup
  // [TokenAttribute] Offset: FFFFFFFF
  class InteractorGroup : public ::UnityEngine::MonoBehaviour/*, public ::Oculus::Interaction::IInteractor*/ {
    public:
    // Nested type: ::Oculus::Interaction::InteractorGroup::InteractorPredicate
    class InteractorPredicate;
    // Nested type: ::Oculus::Interaction::InteractorGroup::$$c
    class $$c;
    public:
    // protected System.Collections.Generic.List`1<UnityEngine.Object> _interactors
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::UnityEngine::Object*>* interactors;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Object*>*) == 0x8);
    // public System.Collections.Generic.IReadOnlyList`1<Oculus.Interaction.IInteractor> Interactors
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::IReadOnlyList_1<::Oculus::Interaction::IInteractor*>* Interactors;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::IReadOnlyList_1<::Oculus::Interaction::IInteractor*>*) == 0x8);
    // private UnityEngine.Object _activeState
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Object* activeState;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.IActiveState ActiveState
    // Size: 0x8
    // Offset: 0x38
    ::Oculus::Interaction::IActiveState* ActiveState;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::IActiveState*) == 0x8);
    // protected UnityEngine.Object _candidateComparer
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Object* candidateComparer;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // protected Oculus.Interaction.ICandidateComparer CandidateComparer
    // Size: 0x8
    // Offset: 0x48
    ::Oculus::Interaction::ICandidateComparer* CandidateComparer;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::ICandidateComparer*) == 0x8);
    // private System.Int32 _maxIterationsPerFrame
    // Size: 0x4
    // Offset: 0x50
    int maxIterationsPerFrame;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean <IsRootDriver>k__BackingField
    // Size: 0x1
    // Offset: 0x54
    bool IsRootDriver;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: IsRootDriver and: WhenStateChanged
    char __padding7[0x3] = {};
    // private System.Action`1<Oculus.Interaction.InteractorStateChangeArgs> WhenStateChanged
    // Size: 0x8
    // Offset: 0x58
    ::System::Action_1<::Oculus::Interaction::InteractorStateChangeArgs>* WhenStateChanged;
    // Field size check
    static_assert(sizeof(::System::Action_1<::Oculus::Interaction::InteractorStateChangeArgs>*) == 0x8);
    // private System.Action WhenPreprocessed
    // Size: 0x8
    // Offset: 0x60
    ::System::Action* WhenPreprocessed;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private System.Action WhenProcessed
    // Size: 0x8
    // Offset: 0x68
    ::System::Action* WhenProcessed;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private System.Action WhenPostprocessed
    // Size: 0x8
    // Offset: 0x70
    ::System::Action* WhenPostprocessed;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private Oculus.Interaction.InteractorState _state
    // Size: 0x4
    // Offset: 0x78
    ::Oculus::Interaction::InteractorState state;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::InteractorState) == 0x4);
    // Padding between fields: state and: identifier
    char __padding12[0x4] = {};
    // private Oculus.Interaction.UniqueIdentifier _identifier
    // Size: 0x8
    // Offset: 0x80
    ::Oculus::Interaction::UniqueIdentifier* identifier;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::UniqueIdentifier*) == 0x8);
    // protected System.Boolean _started
    // Size: 0x1
    // Offset: 0x88
    bool started;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::IInteractor
    operator ::Oculus::Interaction::IInteractor() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::IInteractor*>(this);
    }
    // Get static field: static protected readonly Oculus.Interaction.InteractorGroup/InteractorPredicate TruePredicate
    static ::Oculus::Interaction::InteractorGroup::InteractorPredicate* _get_TruePredicate();
    // Set static field: static protected readonly Oculus.Interaction.InteractorGroup/InteractorPredicate TruePredicate
    static void _set_TruePredicate(::Oculus::Interaction::InteractorGroup::InteractorPredicate* value);
    // Get static field: static protected readonly Oculus.Interaction.InteractorGroup/InteractorPredicate HasCandidatePredicate
    static ::Oculus::Interaction::InteractorGroup::InteractorPredicate* _get_HasCandidatePredicate();
    // Set static field: static protected readonly Oculus.Interaction.InteractorGroup/InteractorPredicate HasCandidatePredicate
    static void _set_HasCandidatePredicate(::Oculus::Interaction::InteractorGroup::InteractorPredicate* value);
    // Get static field: static protected readonly Oculus.Interaction.InteractorGroup/InteractorPredicate HasInteractablePredicate
    static ::Oculus::Interaction::InteractorGroup::InteractorPredicate* _get_HasInteractablePredicate();
    // Set static field: static protected readonly Oculus.Interaction.InteractorGroup/InteractorPredicate HasInteractablePredicate
    static void _set_HasInteractablePredicate(::Oculus::Interaction::InteractorGroup::InteractorPredicate* value);
    // Get instance field reference: protected System.Collections.Generic.List`1<UnityEngine.Object> _interactors
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Object*>*& dyn__interactors();
    // Get instance field reference: public System.Collections.Generic.IReadOnlyList`1<Oculus.Interaction.IInteractor> Interactors
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::IReadOnlyList_1<::Oculus::Interaction::IInteractor*>*& dyn_Interactors();
    // Get instance field reference: private UnityEngine.Object _activeState
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__activeState();
    // Get instance field reference: private Oculus.Interaction.IActiveState ActiveState
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::IActiveState*& dyn_ActiveState();
    // Get instance field reference: protected UnityEngine.Object _candidateComparer
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__candidateComparer();
    // Get instance field reference: protected Oculus.Interaction.ICandidateComparer CandidateComparer
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::ICandidateComparer*& dyn_CandidateComparer();
    // Get instance field reference: private System.Int32 _maxIterationsPerFrame
    [[deprecated("Use field access instead!")]] int& dyn__maxIterationsPerFrame();
    // Get instance field reference: private System.Boolean <IsRootDriver>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$IsRootDriver$k__BackingField();
    // Get instance field reference: private System.Action`1<Oculus.Interaction.InteractorStateChangeArgs> WhenStateChanged
    [[deprecated("Use field access instead!")]] ::System::Action_1<::Oculus::Interaction::InteractorStateChangeArgs>*& dyn_WhenStateChanged();
    // Get instance field reference: private System.Action WhenPreprocessed
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_WhenPreprocessed();
    // Get instance field reference: private System.Action WhenProcessed
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_WhenProcessed();
    // Get instance field reference: private System.Action WhenPostprocessed
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_WhenPostprocessed();
    // Get instance field reference: private Oculus.Interaction.InteractorState _state
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::InteractorState& dyn__state();
    // Get instance field reference: private Oculus.Interaction.UniqueIdentifier _identifier
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::UniqueIdentifier*& dyn__identifier();
    // Get instance field reference: protected System.Boolean _started
    [[deprecated("Use field access instead!")]] bool& dyn__started();
    // public System.Int32 get_MaxIterationsPerFrame()
    // Offset: 0x477AF20
    int get_MaxIterationsPerFrame();
    // public System.Void set_MaxIterationsPerFrame(System.Int32 value)
    // Offset: 0x477AF28
    void set_MaxIterationsPerFrame(int value);
    // public System.Object get_Data()
    // Offset: 0x477AF30
    ::Il2CppObject* get_Data();
    // public System.Boolean get_IsRootDriver()
    // Offset: 0x477AF38
    bool get_IsRootDriver();
    // public System.Void set_IsRootDriver(System.Boolean value)
    // Offset: 0x477AF40
    void set_IsRootDriver(bool value);
    // public System.Boolean get_ShouldHover()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_ShouldHover();
    // public System.Boolean get_ShouldUnhover()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_ShouldUnhover();
    // public System.Boolean get_ShouldSelect()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_ShouldSelect();
    // public System.Boolean get_ShouldUnselect()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_ShouldUnselect();
    // public System.Void Hover()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Hover();
    // public System.Void Unhover()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Unhover();
    // public System.Void Select()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Select();
    // public System.Void Unselect()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Unselect();
    // public System.Boolean get_HasCandidate()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_HasCandidate();
    // public System.Boolean get_HasInteractable()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_HasInteractable();
    // public System.Boolean get_HasSelectedInteractable()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_HasSelectedInteractable();
    // public System.Object get_CandidateProperties()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Il2CppObject* get_CandidateProperties();
    // public System.Void add_WhenStateChanged(System.Action`1<Oculus.Interaction.InteractorStateChangeArgs> value)
    // Offset: 0x477AF4C
    void add_WhenStateChanged(::System::Action_1<::Oculus::Interaction::InteractorStateChangeArgs>* value);
    // public System.Void remove_WhenStateChanged(System.Action`1<Oculus.Interaction.InteractorStateChangeArgs> value)
    // Offset: 0x477AFFC
    void remove_WhenStateChanged(::System::Action_1<::Oculus::Interaction::InteractorStateChangeArgs>* value);
    // public System.Void add_WhenPreprocessed(System.Action value)
    // Offset: 0x477B0AC
    void add_WhenPreprocessed(::System::Action* value);
    // public System.Void remove_WhenPreprocessed(System.Action value)
    // Offset: 0x477B148
    void remove_WhenPreprocessed(::System::Action* value);
    // public System.Void add_WhenProcessed(System.Action value)
    // Offset: 0x477B1E4
    void add_WhenProcessed(::System::Action* value);
    // public System.Void remove_WhenProcessed(System.Action value)
    // Offset: 0x477B280
    void remove_WhenProcessed(::System::Action* value);
    // public System.Void add_WhenPostprocessed(System.Action value)
    // Offset: 0x477B31C
    void add_WhenPostprocessed(::System::Action* value);
    // public System.Void remove_WhenPostprocessed(System.Action value)
    // Offset: 0x477B3B8
    void remove_WhenPostprocessed(::System::Action* value);
    // public Oculus.Interaction.InteractorState get_State()
    // Offset: 0x477B454
    ::Oculus::Interaction::InteractorState get_State();
    // protected System.Void set_State(Oculus.Interaction.InteractorState value)
    // Offset: 0x477B45C
    void set_State(::Oculus::Interaction::InteractorState value);
    // public System.Int32 get_Identifier()
    // Offset: 0x477B4A8
    int get_Identifier();
    // protected System.Void Awake()
    // Offset: 0x477B4C4
    void Awake();
    // protected System.Void Start()
    // Offset: 0x477B7B8
    void Start();
    // protected System.Void OnEnable()
    // Offset: 0x477B994
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x477B9B0
    void OnDisable();
    // protected System.Void OnDestroy()
    // Offset: 0x477B9CC
    void OnDestroy();
    // static protected System.Int32 CompareStates(Oculus.Interaction.InteractorState a, Oculus.Interaction.InteractorState b)
    // Offset: 0x477BAA8
    static int CompareStates(::Oculus::Interaction::InteractorState a, ::Oculus::Interaction::InteractorState b);
    // protected System.Boolean TryGetBestCandidateIndex(Oculus.Interaction.InteractorGroup/InteractorPredicate predicate, out System.Int32 bestCandidateIndex, System.Int32 betterThan, System.Int32 skipIndex)
    // Offset: 0x477BAFC
    bool TryGetBestCandidateIndex(::Oculus::Interaction::InteractorGroup::InteractorPredicate* predicate, ByRef<int> bestCandidateIndex, int betterThan, int skipIndex);
    // protected System.Boolean AnyInteractor(Oculus.Interaction.InteractorGroup/InteractorPredicate predicate)
    // Offset: 0x477C168
    bool AnyInteractor(::Oculus::Interaction::InteractorGroup::InteractorPredicate* predicate);
    // protected System.Int32 CompareCandidates(System.Int32 indexA, System.Int32 indexB)
    // Offset: 0x477BCAC
    int CompareCandidates(int indexA, int indexB);
    // public System.Void Preprocess()
    // Offset: 0x477C2DC
    void Preprocess();
    // public System.Void Process()
    // Offset: 0x477C57C
    void Process();
    // public System.Void Postprocess()
    // Offset: 0x477C750
    void Postprocess();
    // public System.Void ProcessCandidate()
    // Offset: 0x477C924
    void ProcessCandidate();
    // public System.Void Enable()
    // Offset: 0x477CBB8
    void Enable();
    // public System.Void Disable()
    // Offset: 0x477CDA8
    void Disable();
    // protected System.Void DisableAllExcept(Oculus.Interaction.IInteractor mainInteractor)
    // Offset: 0x477CF6C
    void DisableAllExcept(::Oculus::Interaction::IInteractor* mainInteractor);
    // protected System.Void EnableAllExcept(Oculus.Interaction.IInteractor mainInteractor)
    // Offset: 0x477D134
    void EnableAllExcept(::Oculus::Interaction::IInteractor* mainInteractor);
    // protected System.Boolean UpdateActiveState()
    // Offset: 0x477C4CC
    bool UpdateActiveState();
    // protected System.Void Update()
    // Offset: 0x477D2FC
    void Update();
    // public System.Void Drive()
    // Offset: 0x477D318
    void Drive();
    // public System.Void InjectAllInteractorGroupBase(System.Collections.Generic.List`1<Oculus.Interaction.IInteractor> interactors)
    // Offset: 0x477D49C
    void InjectAllInteractorGroupBase(::System::Collections::Generic::List_1<::Oculus::Interaction::IInteractor*>* interactors);
    // public System.Void InjectInteractors(System.Collections.Generic.List`1<Oculus.Interaction.IInteractor> interactors)
    // Offset: 0x477D4A4
    void InjectInteractors(::System::Collections::Generic::List_1<::Oculus::Interaction::IInteractor*>* interactors);
    // public System.Void InjectOptionalActiveState(Oculus.Interaction.IActiveState activeState)
    // Offset: 0x477D4AC
    void InjectOptionalActiveState(::Oculus::Interaction::IActiveState* activeState);
    // public System.Void InjectOptionalCandidateComparer(Oculus.Interaction.ICandidateComparer candidateComparer)
    // Offset: 0x477D578
    void InjectOptionalCandidateComparer(::Oculus::Interaction::ICandidateComparer* candidateComparer);
    // protected System.Void .ctor()
    // Offset: 0x477D644
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InteractorGroup* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::InteractorGroup::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InteractorGroup*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x477D90C
    static void _cctor();
  }; // Oculus.Interaction.InteractorGroup
  #pragma pack(pop)
  static check_size<sizeof(InteractorGroup), 136 + sizeof(bool)> __Oculus_Interaction_InteractorGroupSizeCheck;
  static_assert(sizeof(InteractorGroup) == 0x89);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::InteractorGroup::get_MaxIterationsPerFrame
// Il2CppName: get_MaxIterationsPerFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Oculus::Interaction::InteractorGroup::*)()>(&Oculus::Interaction::InteractorGroup::get_MaxIterationsPerFrame)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractorGroup*), "get_MaxIterationsPerFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractorGroup::set_MaxIterationsPerFrame
// Il2CppName: set_MaxIterationsPerFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractorGroup::*)(int)>(&Oculus::Interaction::InteractorGroup::set_MaxIterationsPerFrame)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractorGroup*), "set_MaxIterationsPerFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractorGroup::get_Data
// Il2CppName: get_Data
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (Oculus::Interaction::InteractorGroup::*)()>(&Oculus::Interaction::InteractorGroup::get_Data)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractorGroup*), "get_Data", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractorGroup::get_IsRootDriver
// Il2CppName: get_IsRootDriver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::InteractorGroup::*)()>(&Oculus::Interaction::InteractorGroup::get_IsRootDriver)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractorGroup*), "get_IsRootDriver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractorGroup::set_IsRootDriver
// Il2CppName: set_IsRootDriver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractorGroup::*)(bool)>(&Oculus::Interaction::InteractorGroup::set_IsRootDriver)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractorGroup*), "set_IsRootDriver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractorGroup::get_ShouldHover
// Il2CppName: get_ShouldHover
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::InteractorGroup::*)()>(&Oculus::Interaction::InteractorGroup::get_ShouldHover)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractorGroup*), "get_ShouldHover", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractorGroup::get_ShouldUnhover
// Il2CppName: get_ShouldUnhover
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::InteractorGroup::*)()>(&Oculus::Interaction::InteractorGroup::get_ShouldUnhover)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractorGroup*), "get_ShouldUnhover", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractorGroup::get_ShouldSelect
// Il2CppName: get_ShouldSelect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::InteractorGroup::*)()>(&Oculus::Interaction::InteractorGroup::get_ShouldSelect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractorGroup*), "get_ShouldSelect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractorGroup::get_ShouldUnselect
// Il2CppName: get_ShouldUnselect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::InteractorGroup::*)()>(&Oculus::Interaction::InteractorGroup::get_ShouldUnselect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractorGroup*), "get_ShouldUnselect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractorGroup::Hover
// Il2CppName: Hover
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractorGroup::*)()>(&Oculus::Interaction::InteractorGroup::Hover)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractorGroup*), "Hover", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractorGroup::Unhover
// Il2CppName: Unhover
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractorGroup::*)()>(&Oculus::Interaction::InteractorGroup::Unhover)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractorGroup*), "Unhover", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractorGroup::Select
// Il2CppName: Select
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractorGroup::*)()>(&Oculus::Interaction::InteractorGroup::Select)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractorGroup*), "Select", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractorGroup::Unselect
// Il2CppName: Unselect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractorGroup::*)()>(&Oculus::Interaction::InteractorGroup::Unselect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractorGroup*), "Unselect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractorGroup::get_HasCandidate
// Il2CppName: get_HasCandidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::InteractorGroup::*)()>(&Oculus::Interaction::InteractorGroup::get_HasCandidate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractorGroup*), "get_HasCandidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractorGroup::get_HasInteractable
// Il2CppName: get_HasInteractable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::InteractorGroup::*)()>(&Oculus::Interaction::InteractorGroup::get_HasInteractable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractorGroup*), "get_HasInteractable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractorGroup::get_HasSelectedInteractable
// Il2CppName: get_HasSelectedInteractable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::InteractorGroup::*)()>(&Oculus::Interaction::InteractorGroup::get_HasSelectedInteractable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractorGroup*), "get_HasSelectedInteractable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractorGroup::get_CandidateProperties
// Il2CppName: get_CandidateProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (Oculus::Interaction::InteractorGroup::*)()>(&Oculus::Interaction::InteractorGroup::get_CandidateProperties)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractorGroup*), "get_CandidateProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractorGroup::add_WhenStateChanged
// Il2CppName: add_WhenStateChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractorGroup::*)(::System::Action_1<::Oculus::Interaction::InteractorStateChangeArgs>*)>(&Oculus::Interaction::InteractorGroup::add_WhenStateChanged)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Interaction", "InteractorStateChangeArgs")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractorGroup*), "add_WhenStateChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractorGroup::remove_WhenStateChanged
// Il2CppName: remove_WhenStateChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractorGroup::*)(::System::Action_1<::Oculus::Interaction::InteractorStateChangeArgs>*)>(&Oculus::Interaction::InteractorGroup::remove_WhenStateChanged)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Interaction", "InteractorStateChangeArgs")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractorGroup*), "remove_WhenStateChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractorGroup::add_WhenPreprocessed
// Il2CppName: add_WhenPreprocessed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractorGroup::*)(::System::Action*)>(&Oculus::Interaction::InteractorGroup::add_WhenPreprocessed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractorGroup*), "add_WhenPreprocessed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractorGroup::remove_WhenPreprocessed
// Il2CppName: remove_WhenPreprocessed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractorGroup::*)(::System::Action*)>(&Oculus::Interaction::InteractorGroup::remove_WhenPreprocessed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractorGroup*), "remove_WhenPreprocessed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractorGroup::add_WhenProcessed
// Il2CppName: add_WhenProcessed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractorGroup::*)(::System::Action*)>(&Oculus::Interaction::InteractorGroup::add_WhenProcessed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractorGroup*), "add_WhenProcessed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractorGroup::remove_WhenProcessed
// Il2CppName: remove_WhenProcessed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractorGroup::*)(::System::Action*)>(&Oculus::Interaction::InteractorGroup::remove_WhenProcessed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractorGroup*), "remove_WhenProcessed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractorGroup::add_WhenPostprocessed
// Il2CppName: add_WhenPostprocessed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractorGroup::*)(::System::Action*)>(&Oculus::Interaction::InteractorGroup::add_WhenPostprocessed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractorGroup*), "add_WhenPostprocessed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractorGroup::remove_WhenPostprocessed
// Il2CppName: remove_WhenPostprocessed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractorGroup::*)(::System::Action*)>(&Oculus::Interaction::InteractorGroup::remove_WhenPostprocessed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractorGroup*), "remove_WhenPostprocessed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractorGroup::get_State
// Il2CppName: get_State
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::InteractorState (Oculus::Interaction::InteractorGroup::*)()>(&Oculus::Interaction::InteractorGroup::get_State)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractorGroup*), "get_State", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractorGroup::set_State
// Il2CppName: set_State
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractorGroup::*)(::Oculus::Interaction::InteractorState)>(&Oculus::Interaction::InteractorGroup::set_State)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "InteractorState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractorGroup*), "set_State", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractorGroup::get_Identifier
// Il2CppName: get_Identifier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Oculus::Interaction::InteractorGroup::*)()>(&Oculus::Interaction::InteractorGroup::get_Identifier)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractorGroup*), "get_Identifier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractorGroup::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractorGroup::*)()>(&Oculus::Interaction::InteractorGroup::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractorGroup*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractorGroup::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractorGroup::*)()>(&Oculus::Interaction::InteractorGroup::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractorGroup*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractorGroup::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractorGroup::*)()>(&Oculus::Interaction::InteractorGroup::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractorGroup*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractorGroup::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractorGroup::*)()>(&Oculus::Interaction::InteractorGroup::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractorGroup*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractorGroup::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractorGroup::*)()>(&Oculus::Interaction::InteractorGroup::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractorGroup*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractorGroup::CompareStates
// Il2CppName: CompareStates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Oculus::Interaction::InteractorState, ::Oculus::Interaction::InteractorState)>(&Oculus::Interaction::InteractorGroup::CompareStates)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "InteractorState")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "InteractorState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractorGroup*), "CompareStates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractorGroup::TryGetBestCandidateIndex
// Il2CppName: TryGetBestCandidateIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::InteractorGroup::*)(::Oculus::Interaction::InteractorGroup::InteractorPredicate*, ByRef<int>, int, int)>(&Oculus::Interaction::InteractorGroup::TryGetBestCandidateIndex)> {
  static const MethodInfo* get() {
    static auto* predicate = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "InteractorGroup/InteractorPredicate")->byval_arg;
    static auto* bestCandidateIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* betterThan = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* skipIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractorGroup*), "TryGetBestCandidateIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{predicate, bestCandidateIndex, betterThan, skipIndex});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractorGroup::AnyInteractor
// Il2CppName: AnyInteractor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::InteractorGroup::*)(::Oculus::Interaction::InteractorGroup::InteractorPredicate*)>(&Oculus::Interaction::InteractorGroup::AnyInteractor)> {
  static const MethodInfo* get() {
    static auto* predicate = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "InteractorGroup/InteractorPredicate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractorGroup*), "AnyInteractor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{predicate});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractorGroup::CompareCandidates
// Il2CppName: CompareCandidates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Oculus::Interaction::InteractorGroup::*)(int, int)>(&Oculus::Interaction::InteractorGroup::CompareCandidates)> {
  static const MethodInfo* get() {
    static auto* indexA = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* indexB = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractorGroup*), "CompareCandidates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{indexA, indexB});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractorGroup::Preprocess
// Il2CppName: Preprocess
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractorGroup::*)()>(&Oculus::Interaction::InteractorGroup::Preprocess)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractorGroup*), "Preprocess", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractorGroup::Process
// Il2CppName: Process
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractorGroup::*)()>(&Oculus::Interaction::InteractorGroup::Process)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractorGroup*), "Process", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractorGroup::Postprocess
// Il2CppName: Postprocess
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractorGroup::*)()>(&Oculus::Interaction::InteractorGroup::Postprocess)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractorGroup*), "Postprocess", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractorGroup::ProcessCandidate
// Il2CppName: ProcessCandidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractorGroup::*)()>(&Oculus::Interaction::InteractorGroup::ProcessCandidate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractorGroup*), "ProcessCandidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractorGroup::Enable
// Il2CppName: Enable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractorGroup::*)()>(&Oculus::Interaction::InteractorGroup::Enable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractorGroup*), "Enable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractorGroup::Disable
// Il2CppName: Disable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractorGroup::*)()>(&Oculus::Interaction::InteractorGroup::Disable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractorGroup*), "Disable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractorGroup::DisableAllExcept
// Il2CppName: DisableAllExcept
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractorGroup::*)(::Oculus::Interaction::IInteractor*)>(&Oculus::Interaction::InteractorGroup::DisableAllExcept)> {
  static const MethodInfo* get() {
    static auto* mainInteractor = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IInteractor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractorGroup*), "DisableAllExcept", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mainInteractor});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractorGroup::EnableAllExcept
// Il2CppName: EnableAllExcept
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractorGroup::*)(::Oculus::Interaction::IInteractor*)>(&Oculus::Interaction::InteractorGroup::EnableAllExcept)> {
  static const MethodInfo* get() {
    static auto* mainInteractor = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IInteractor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractorGroup*), "EnableAllExcept", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mainInteractor});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractorGroup::UpdateActiveState
// Il2CppName: UpdateActiveState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::InteractorGroup::*)()>(&Oculus::Interaction::InteractorGroup::UpdateActiveState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractorGroup*), "UpdateActiveState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractorGroup::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractorGroup::*)()>(&Oculus::Interaction::InteractorGroup::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractorGroup*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractorGroup::Drive
// Il2CppName: Drive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractorGroup::*)()>(&Oculus::Interaction::InteractorGroup::Drive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractorGroup*), "Drive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractorGroup::InjectAllInteractorGroupBase
// Il2CppName: InjectAllInteractorGroupBase
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractorGroup::*)(::System::Collections::Generic::List_1<::Oculus::Interaction::IInteractor*>*)>(&Oculus::Interaction::InteractorGroup::InjectAllInteractorGroupBase)> {
  static const MethodInfo* get() {
    static auto* interactors = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IInteractor")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractorGroup*), "InjectAllInteractorGroupBase", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactors});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractorGroup::InjectInteractors
// Il2CppName: InjectInteractors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractorGroup::*)(::System::Collections::Generic::List_1<::Oculus::Interaction::IInteractor*>*)>(&Oculus::Interaction::InteractorGroup::InjectInteractors)> {
  static const MethodInfo* get() {
    static auto* interactors = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IInteractor")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractorGroup*), "InjectInteractors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactors});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractorGroup::InjectOptionalActiveState
// Il2CppName: InjectOptionalActiveState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractorGroup::*)(::Oculus::Interaction::IActiveState*)>(&Oculus::Interaction::InteractorGroup::InjectOptionalActiveState)> {
  static const MethodInfo* get() {
    static auto* activeState = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IActiveState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractorGroup*), "InjectOptionalActiveState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{activeState});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractorGroup::InjectOptionalCandidateComparer
// Il2CppName: InjectOptionalCandidateComparer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractorGroup::*)(::Oculus::Interaction::ICandidateComparer*)>(&Oculus::Interaction::InteractorGroup::InjectOptionalCandidateComparer)> {
  static const MethodInfo* get() {
    static auto* candidateComparer = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "ICandidateComparer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractorGroup*), "InjectOptionalCandidateComparer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{candidateComparer});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractorGroup::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Interaction::InteractorGroup::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Oculus::Interaction::InteractorGroup::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractorGroup*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
