// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Oculus.Interaction.IActiveState
#include "Oculus/Interaction/IActiveState.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction
namespace Oculus::Interaction {
  // Skipping declaration: ComparisonMode because it is already included!
  // Skipping declaration: CheckComponent because it is already included!
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Object because it is already included!
}
// Forward declaring namespace: Oculus::Interaction::Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: IAxis2D
  class IAxis2D;
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: Axis2DActiveState
  class Axis2DActiveState;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Axis2DActiveState);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Axis2DActiveState*, "Oculus.Interaction", "Axis2DActiveState");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x46
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.Axis2DActiveState
  // [TokenAttribute] Offset: FFFFFFFF
  class Axis2DActiveState : public ::UnityEngine::MonoBehaviour/*, public ::Oculus::Interaction::IActiveState*/ {
    public:
    // Nested type: ::Oculus::Interaction::Axis2DActiveState::CheckComponent
    struct CheckComponent;
    // Nested type: ::Oculus::Interaction::Axis2DActiveState::ComparisonMode
    struct ComparisonMode;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Oculus.Interaction.Axis2DActiveState/CheckComponent
    // [TokenAttribute] Offset: FFFFFFFF
    struct CheckComponent/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: CheckComponent
      constexpr CheckComponent(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Oculus.Interaction.Axis2DActiveState/CheckComponent Any
      static constexpr const int Any = 0;
      // Get static field: static public Oculus.Interaction.Axis2DActiveState/CheckComponent Any
      static ::Oculus::Interaction::Axis2DActiveState::CheckComponent _get_Any();
      // Set static field: static public Oculus.Interaction.Axis2DActiveState/CheckComponent Any
      static void _set_Any(::Oculus::Interaction::Axis2DActiveState::CheckComponent value);
      // static field const value: static public Oculus.Interaction.Axis2DActiveState/CheckComponent X
      static constexpr const int X = 1;
      // Get static field: static public Oculus.Interaction.Axis2DActiveState/CheckComponent X
      static ::Oculus::Interaction::Axis2DActiveState::CheckComponent _get_X();
      // Set static field: static public Oculus.Interaction.Axis2DActiveState/CheckComponent X
      static void _set_X(::Oculus::Interaction::Axis2DActiveState::CheckComponent value);
      // static field const value: static public Oculus.Interaction.Axis2DActiveState/CheckComponent Y
      static constexpr const int Y = 2;
      // Get static field: static public Oculus.Interaction.Axis2DActiveState/CheckComponent Y
      static ::Oculus::Interaction::Axis2DActiveState::CheckComponent _get_Y();
      // Set static field: static public Oculus.Interaction.Axis2DActiveState/CheckComponent Y
      static void _set_Y(::Oculus::Interaction::Axis2DActiveState::CheckComponent value);
      // static field const value: static public Oculus.Interaction.Axis2DActiveState/CheckComponent All
      static constexpr const int All = 3;
      // Get static field: static public Oculus.Interaction.Axis2DActiveState/CheckComponent All
      static ::Oculus::Interaction::Axis2DActiveState::CheckComponent _get_All();
      // Set static field: static public Oculus.Interaction.Axis2DActiveState/CheckComponent All
      static void _set_All(::Oculus::Interaction::Axis2DActiveState::CheckComponent value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Oculus.Interaction.Axis2DActiveState/CheckComponent
    #pragma pack(pop)
    static check_size<sizeof(Axis2DActiveState::CheckComponent), 0 + sizeof(int)> __Oculus_Interaction_Axis2DActiveState_CheckComponentSizeCheck;
    static_assert(sizeof(Axis2DActiveState::CheckComponent) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Oculus.Interaction.Axis2DActiveState/ComparisonMode
    // [TokenAttribute] Offset: FFFFFFFF
    struct ComparisonMode/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: ComparisonMode
      constexpr ComparisonMode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Oculus.Interaction.Axis2DActiveState/ComparisonMode GreaterThan
      static constexpr const int GreaterThan = 0;
      // Get static field: static public Oculus.Interaction.Axis2DActiveState/ComparisonMode GreaterThan
      static ::Oculus::Interaction::Axis2DActiveState::ComparisonMode _get_GreaterThan();
      // Set static field: static public Oculus.Interaction.Axis2DActiveState/ComparisonMode GreaterThan
      static void _set_GreaterThan(::Oculus::Interaction::Axis2DActiveState::ComparisonMode value);
      // static field const value: static public Oculus.Interaction.Axis2DActiveState/ComparisonMode LessThan
      static constexpr const int LessThan = 1;
      // Get static field: static public Oculus.Interaction.Axis2DActiveState/ComparisonMode LessThan
      static ::Oculus::Interaction::Axis2DActiveState::ComparisonMode _get_LessThan();
      // Set static field: static public Oculus.Interaction.Axis2DActiveState/ComparisonMode LessThan
      static void _set_LessThan(::Oculus::Interaction::Axis2DActiveState::ComparisonMode value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Oculus.Interaction.Axis2DActiveState/ComparisonMode
    #pragma pack(pop)
    static check_size<sizeof(Axis2DActiveState::ComparisonMode), 0 + sizeof(int)> __Oculus_Interaction_Axis2DActiveState_ComparisonModeSizeCheck;
    static_assert(sizeof(Axis2DActiveState::ComparisonMode) == 0x4);
    public:
    // private UnityEngine.Object _inputAxis
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Object* inputAxis;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.Input.IAxis2D <InputAxis>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    ::Oculus::Interaction::Input::IAxis2D* InputAxis;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::IAxis2D*) == 0x8);
    // private Oculus.Interaction.Axis2DActiveState/CheckComponent _checkAxis
    // Size: 0x4
    // Offset: 0x30
    ::Oculus::Interaction::Axis2DActiveState::CheckComponent checkAxis;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Axis2DActiveState::CheckComponent) == 0x4);
    // private Oculus.Interaction.Axis2DActiveState/ComparisonMode _comparison
    // Size: 0x4
    // Offset: 0x34
    ::Oculus::Interaction::Axis2DActiveState::ComparisonMode comparison;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Axis2DActiveState::ComparisonMode) == 0x4);
    // private System.Boolean _absoluteValues
    // Size: 0x1
    // Offset: 0x38
    bool absoluteValues;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: absoluteValues and: thresold
    char __padding4[0x3] = {};
    // private UnityEngine.Vector2 _thresold
    // Size: 0x8
    // Offset: 0x3C
    ::UnityEngine::Vector2 thresold;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private System.Boolean <Active>k__BackingField
    // Size: 0x1
    // Offset: 0x44
    bool Active;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean _started
    // Size: 0x1
    // Offset: 0x45
    bool started;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::IActiveState
    operator ::Oculus::Interaction::IActiveState() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::IActiveState*>(this);
    }
    // Get instance field reference: private UnityEngine.Object _inputAxis
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__inputAxis();
    // Get instance field reference: private Oculus.Interaction.Input.IAxis2D <InputAxis>k__BackingField
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::IAxis2D*& dyn_$InputAxis$k__BackingField();
    // Get instance field reference: private Oculus.Interaction.Axis2DActiveState/CheckComponent _checkAxis
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Axis2DActiveState::CheckComponent& dyn__checkAxis();
    // Get instance field reference: private Oculus.Interaction.Axis2DActiveState/ComparisonMode _comparison
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Axis2DActiveState::ComparisonMode& dyn__comparison();
    // Get instance field reference: private System.Boolean _absoluteValues
    [[deprecated("Use field access instead!")]] bool& dyn__absoluteValues();
    // Get instance field reference: private UnityEngine.Vector2 _thresold
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn__thresold();
    // Get instance field reference: private System.Boolean <Active>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$Active$k__BackingField();
    // Get instance field reference: protected System.Boolean _started
    [[deprecated("Use field access instead!")]] bool& dyn__started();
    // private Oculus.Interaction.Input.IAxis2D get_InputAxis()
    // Offset: 0x477AC58
    ::Oculus::Interaction::Input::IAxis2D* get_InputAxis();
    // private System.Void set_InputAxis(Oculus.Interaction.Input.IAxis2D value)
    // Offset: 0x477AC60
    void set_InputAxis(::Oculus::Interaction::Input::IAxis2D* value);
    // public Oculus.Interaction.Axis2DActiveState/CheckComponent get_CheckAxis()
    // Offset: 0x477AC68
    ::Oculus::Interaction::Axis2DActiveState::CheckComponent get_CheckAxis();
    // public System.Void set_CheckAxis(Oculus.Interaction.Axis2DActiveState/CheckComponent value)
    // Offset: 0x477AC70
    void set_CheckAxis(::Oculus::Interaction::Axis2DActiveState::CheckComponent value);
    // public Oculus.Interaction.Axis2DActiveState/ComparisonMode get_Comparison()
    // Offset: 0x477AC78
    ::Oculus::Interaction::Axis2DActiveState::ComparisonMode get_Comparison();
    // public System.Void set_Comparison(Oculus.Interaction.Axis2DActiveState/ComparisonMode value)
    // Offset: 0x477AC80
    void set_Comparison(::Oculus::Interaction::Axis2DActiveState::ComparisonMode value);
    // public System.Boolean get_AbsoluteValues()
    // Offset: 0x477AC88
    bool get_AbsoluteValues();
    // public System.Void set_AbsoluteValues(System.Boolean value)
    // Offset: 0x477AC90
    void set_AbsoluteValues(bool value);
    // public System.Boolean get_Active()
    // Offset: 0x477AC9C
    bool get_Active();
    // private System.Void set_Active(System.Boolean value)
    // Offset: 0x477ACA4
    void set_Active(bool value);
    // protected System.Void Awake()
    // Offset: 0x477ACB0
    void Awake();
    // protected System.Void Start()
    // Offset: 0x477AD08
    void Start();
    // protected System.Void OnDisable()
    // Offset: 0x477AD38
    void OnDisable();
    // protected System.Void Update()
    // Offset: 0x477AD48
    void Update();
    // private System.Void HandleValueUpdated(UnityEngine.Vector2 value)
    // Offset: 0x477ADF0
    void HandleValueUpdated(::UnityEngine::Vector2 value);
    // private System.Boolean CheckGreaterThan(UnityEngine.Vector2 value)
    // Offset: 0x477AE9C
    bool CheckGreaterThan(::UnityEngine::Vector2 value);
    // private System.Boolean CheckLessThan(UnityEngine.Vector2 value)
    // Offset: 0x477AE34
    bool CheckLessThan(::UnityEngine::Vector2 value);
    // public System.Void .ctor()
    // Offset: 0x477AF04
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Axis2DActiveState* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Axis2DActiveState::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Axis2DActiveState*, creationType>()));
    }
  }; // Oculus.Interaction.Axis2DActiveState
  #pragma pack(pop)
  static check_size<sizeof(Axis2DActiveState), 69 + sizeof(bool)> __Oculus_Interaction_Axis2DActiveStateSizeCheck;
  static_assert(sizeof(Axis2DActiveState) == 0x46);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Axis2DActiveState::ComparisonMode, "Oculus.Interaction", "Axis2DActiveState/ComparisonMode");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Axis2DActiveState::CheckComponent, "Oculus.Interaction", "Axis2DActiveState/CheckComponent");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Axis2DActiveState::get_InputAxis
// Il2CppName: get_InputAxis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Input::IAxis2D* (Oculus::Interaction::Axis2DActiveState::*)()>(&Oculus::Interaction::Axis2DActiveState::get_InputAxis)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Axis2DActiveState*), "get_InputAxis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Axis2DActiveState::set_InputAxis
// Il2CppName: set_InputAxis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Axis2DActiveState::*)(::Oculus::Interaction::Input::IAxis2D*)>(&Oculus::Interaction::Axis2DActiveState::set_InputAxis)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IAxis2D")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Axis2DActiveState*), "set_InputAxis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Axis2DActiveState::get_CheckAxis
// Il2CppName: get_CheckAxis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Axis2DActiveState::CheckComponent (Oculus::Interaction::Axis2DActiveState::*)()>(&Oculus::Interaction::Axis2DActiveState::get_CheckAxis)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Axis2DActiveState*), "get_CheckAxis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Axis2DActiveState::set_CheckAxis
// Il2CppName: set_CheckAxis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Axis2DActiveState::*)(::Oculus::Interaction::Axis2DActiveState::CheckComponent)>(&Oculus::Interaction::Axis2DActiveState::set_CheckAxis)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "Axis2DActiveState/CheckComponent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Axis2DActiveState*), "set_CheckAxis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Axis2DActiveState::get_Comparison
// Il2CppName: get_Comparison
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Axis2DActiveState::ComparisonMode (Oculus::Interaction::Axis2DActiveState::*)()>(&Oculus::Interaction::Axis2DActiveState::get_Comparison)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Axis2DActiveState*), "get_Comparison", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Axis2DActiveState::set_Comparison
// Il2CppName: set_Comparison
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Axis2DActiveState::*)(::Oculus::Interaction::Axis2DActiveState::ComparisonMode)>(&Oculus::Interaction::Axis2DActiveState::set_Comparison)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "Axis2DActiveState/ComparisonMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Axis2DActiveState*), "set_Comparison", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Axis2DActiveState::get_AbsoluteValues
// Il2CppName: get_AbsoluteValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Axis2DActiveState::*)()>(&Oculus::Interaction::Axis2DActiveState::get_AbsoluteValues)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Axis2DActiveState*), "get_AbsoluteValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Axis2DActiveState::set_AbsoluteValues
// Il2CppName: set_AbsoluteValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Axis2DActiveState::*)(bool)>(&Oculus::Interaction::Axis2DActiveState::set_AbsoluteValues)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Axis2DActiveState*), "set_AbsoluteValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Axis2DActiveState::get_Active
// Il2CppName: get_Active
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Axis2DActiveState::*)()>(&Oculus::Interaction::Axis2DActiveState::get_Active)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Axis2DActiveState*), "get_Active", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Axis2DActiveState::set_Active
// Il2CppName: set_Active
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Axis2DActiveState::*)(bool)>(&Oculus::Interaction::Axis2DActiveState::set_Active)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Axis2DActiveState*), "set_Active", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Axis2DActiveState::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Axis2DActiveState::*)()>(&Oculus::Interaction::Axis2DActiveState::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Axis2DActiveState*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Axis2DActiveState::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Axis2DActiveState::*)()>(&Oculus::Interaction::Axis2DActiveState::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Axis2DActiveState*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Axis2DActiveState::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Axis2DActiveState::*)()>(&Oculus::Interaction::Axis2DActiveState::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Axis2DActiveState*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Axis2DActiveState::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Axis2DActiveState::*)()>(&Oculus::Interaction::Axis2DActiveState::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Axis2DActiveState*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Axis2DActiveState::HandleValueUpdated
// Il2CppName: HandleValueUpdated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Axis2DActiveState::*)(::UnityEngine::Vector2)>(&Oculus::Interaction::Axis2DActiveState::HandleValueUpdated)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Axis2DActiveState*), "HandleValueUpdated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Axis2DActiveState::CheckGreaterThan
// Il2CppName: CheckGreaterThan
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Axis2DActiveState::*)(::UnityEngine::Vector2)>(&Oculus::Interaction::Axis2DActiveState::CheckGreaterThan)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Axis2DActiveState*), "CheckGreaterThan", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Axis2DActiveState::CheckLessThan
// Il2CppName: CheckLessThan
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Axis2DActiveState::*)(::UnityEngine::Vector2)>(&Oculus::Interaction::Axis2DActiveState::CheckLessThan)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Axis2DActiveState*), "CheckLessThan", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Axis2DActiveState::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
