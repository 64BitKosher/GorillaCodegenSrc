// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Oculus.Interaction.PointableDebugGizmos
#include "Oculus/Interaction/PointableDebugGizmos.hpp"
// Including type: UnityEngine.Pose
#include "UnityEngine/Pose.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::PointableDebugGizmos::PointData);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::PointableDebugGizmos::PointData*, "Oculus.Interaction", "PointableDebugGizmos/PointData");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x2D
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.PointableDebugGizmos/PointData
  // [TokenAttribute] Offset: FFFFFFFF
  class PointableDebugGizmos::PointData : public ::Il2CppObject {
    public:
    public:
    // private UnityEngine.Pose <Pose>k__BackingField
    // Size: 0x1C
    // Offset: 0x10
    ::UnityEngine::Pose Pose;
    // Field size check
    static_assert(sizeof(::UnityEngine::Pose) == 0x1C);
    // private System.Boolean <Selecting>k__BackingField
    // Size: 0x1
    // Offset: 0x2C
    bool Selecting;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private UnityEngine.Pose <Pose>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Pose& dyn_$Pose$k__BackingField();
    // Get instance field reference: private System.Boolean <Selecting>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$Selecting$k__BackingField();
    // public UnityEngine.Pose get_Pose()
    // Offset: 0x47C33F4
    ::UnityEngine::Pose get_Pose();
    // public System.Void set_Pose(UnityEngine.Pose value)
    // Offset: 0x47C3408
    void set_Pose(::UnityEngine::Pose value);
    // public System.Boolean get_Selecting()
    // Offset: 0x47C3424
    bool get_Selecting();
    // public System.Void set_Selecting(System.Boolean value)
    // Offset: 0x47C342C
    void set_Selecting(bool value);
    // public System.Void .ctor()
    // Offset: 0x47C2D1C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PointableDebugGizmos::PointData* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::PointableDebugGizmos::PointData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PointableDebugGizmos::PointData*, creationType>()));
    }
  }; // Oculus.Interaction.PointableDebugGizmos/PointData
  #pragma pack(pop)
  static check_size<sizeof(PointableDebugGizmos::PointData), 44 + sizeof(bool)> __Oculus_Interaction_PointableDebugGizmos_PointDataSizeCheck;
  static_assert(sizeof(PointableDebugGizmos::PointData) == 0x2D);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::PointableDebugGizmos::PointData::get_Pose
// Il2CppName: get_Pose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Pose (Oculus::Interaction::PointableDebugGizmos::PointData::*)()>(&Oculus::Interaction::PointableDebugGizmos::PointData::get_Pose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableDebugGizmos::PointData*), "get_Pose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableDebugGizmos::PointData::set_Pose
// Il2CppName: set_Pose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PointableDebugGizmos::PointData::*)(::UnityEngine::Pose)>(&Oculus::Interaction::PointableDebugGizmos::PointData::set_Pose)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableDebugGizmos::PointData*), "set_Pose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableDebugGizmos::PointData::get_Selecting
// Il2CppName: get_Selecting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::PointableDebugGizmos::PointData::*)()>(&Oculus::Interaction::PointableDebugGizmos::PointData::get_Selecting)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableDebugGizmos::PointData*), "get_Selecting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableDebugGizmos::PointData::set_Selecting
// Il2CppName: set_Selecting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PointableDebugGizmos::PointData::*)(bool)>(&Oculus::Interaction::PointableDebugGizmos::PointData::set_Selecting)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableDebugGizmos::PointData*), "set_Selecting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableDebugGizmos::PointData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
