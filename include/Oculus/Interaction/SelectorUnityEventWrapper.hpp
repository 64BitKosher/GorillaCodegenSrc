// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Object because it is already included!
}
// Forward declaring namespace: Oculus::Interaction
namespace Oculus::Interaction {
  // Forward declaring type: ISelector
  class ISelector;
}
// Forward declaring namespace: UnityEngine::Events
namespace UnityEngine::Events {
  // Forward declaring type: UnityEvent
  class UnityEvent;
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: SelectorUnityEventWrapper
  class SelectorUnityEventWrapper;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::SelectorUnityEventWrapper);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::SelectorUnityEventWrapper*, "Oculus.Interaction", "SelectorUnityEventWrapper");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x41
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.SelectorUnityEventWrapper
  // [TokenAttribute] Offset: FFFFFFFF
  class SelectorUnityEventWrapper : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.Object _selector
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Object* selector;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.ISelector Selector
    // Size: 0x8
    // Offset: 0x28
    ::Oculus::Interaction::ISelector* Selector;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::ISelector*) == 0x8);
    // private UnityEngine.Events.UnityEvent _whenSelected
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Events::UnityEvent* whenSelected;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    // private UnityEngine.Events.UnityEvent _whenUnselected
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Events::UnityEvent* whenUnselected;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    // protected System.Boolean _started
    // Size: 0x1
    // Offset: 0x40
    bool started;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private UnityEngine.Object _selector
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__selector();
    // Get instance field reference: private Oculus.Interaction.ISelector Selector
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::ISelector*& dyn_Selector();
    // Get instance field reference: private UnityEngine.Events.UnityEvent _whenSelected
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn__whenSelected();
    // Get instance field reference: private UnityEngine.Events.UnityEvent _whenUnselected
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn__whenUnselected();
    // Get instance field reference: protected System.Boolean _started
    [[deprecated("Use field access instead!")]] bool& dyn__started();
    // public UnityEngine.Events.UnityEvent get_WhenSelected()
    // Offset: 0x47DA9A0
    ::UnityEngine::Events::UnityEvent* get_WhenSelected();
    // public UnityEngine.Events.UnityEvent get_WhenUnselected()
    // Offset: 0x47DA9A8
    ::UnityEngine::Events::UnityEvent* get_WhenUnselected();
    // protected System.Void Awake()
    // Offset: 0x47DA9B0
    void Awake();
    // protected System.Void Start()
    // Offset: 0x47DAA18
    void Start();
    // protected System.Void OnEnable()
    // Offset: 0x47DAA50
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x47DABFC
    void OnDisable();
    // private System.Void HandleSelected()
    // Offset: 0x47DADAC
    void HandleSelected();
    // private System.Void HandleUnselected()
    // Offset: 0x47DADC8
    void HandleUnselected();
    // public System.Void InjectAllSelectorUnityEventWrapper(Oculus.Interaction.ISelector selector)
    // Offset: 0x47DADE4
    void InjectAllSelectorUnityEventWrapper(::Oculus::Interaction::ISelector* selector);
    // public System.Void InjectSelector(Oculus.Interaction.ISelector selector)
    // Offset: 0x47DADE8
    void InjectSelector(::Oculus::Interaction::ISelector* selector);
    // public System.Void .ctor()
    // Offset: 0x47DAEB8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SelectorUnityEventWrapper* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::SelectorUnityEventWrapper::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SelectorUnityEventWrapper*, creationType>()));
    }
  }; // Oculus.Interaction.SelectorUnityEventWrapper
  #pragma pack(pop)
  static check_size<sizeof(SelectorUnityEventWrapper), 64 + sizeof(bool)> __Oculus_Interaction_SelectorUnityEventWrapperSizeCheck;
  static_assert(sizeof(SelectorUnityEventWrapper) == 0x41);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::SelectorUnityEventWrapper::get_WhenSelected
// Il2CppName: get_WhenSelected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Events::UnityEvent* (Oculus::Interaction::SelectorUnityEventWrapper::*)()>(&Oculus::Interaction::SelectorUnityEventWrapper::get_WhenSelected)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SelectorUnityEventWrapper*), "get_WhenSelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SelectorUnityEventWrapper::get_WhenUnselected
// Il2CppName: get_WhenUnselected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Events::UnityEvent* (Oculus::Interaction::SelectorUnityEventWrapper::*)()>(&Oculus::Interaction::SelectorUnityEventWrapper::get_WhenUnselected)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SelectorUnityEventWrapper*), "get_WhenUnselected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SelectorUnityEventWrapper::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SelectorUnityEventWrapper::*)()>(&Oculus::Interaction::SelectorUnityEventWrapper::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SelectorUnityEventWrapper*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SelectorUnityEventWrapper::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SelectorUnityEventWrapper::*)()>(&Oculus::Interaction::SelectorUnityEventWrapper::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SelectorUnityEventWrapper*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SelectorUnityEventWrapper::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SelectorUnityEventWrapper::*)()>(&Oculus::Interaction::SelectorUnityEventWrapper::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SelectorUnityEventWrapper*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SelectorUnityEventWrapper::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SelectorUnityEventWrapper::*)()>(&Oculus::Interaction::SelectorUnityEventWrapper::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SelectorUnityEventWrapper*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SelectorUnityEventWrapper::HandleSelected
// Il2CppName: HandleSelected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SelectorUnityEventWrapper::*)()>(&Oculus::Interaction::SelectorUnityEventWrapper::HandleSelected)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SelectorUnityEventWrapper*), "HandleSelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SelectorUnityEventWrapper::HandleUnselected
// Il2CppName: HandleUnselected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SelectorUnityEventWrapper::*)()>(&Oculus::Interaction::SelectorUnityEventWrapper::HandleUnselected)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SelectorUnityEventWrapper*), "HandleUnselected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SelectorUnityEventWrapper::InjectAllSelectorUnityEventWrapper
// Il2CppName: InjectAllSelectorUnityEventWrapper
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SelectorUnityEventWrapper::*)(::Oculus::Interaction::ISelector*)>(&Oculus::Interaction::SelectorUnityEventWrapper::InjectAllSelectorUnityEventWrapper)> {
  static const MethodInfo* get() {
    static auto* selector = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "ISelector")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SelectorUnityEventWrapper*), "InjectAllSelectorUnityEventWrapper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{selector});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SelectorUnityEventWrapper::InjectSelector
// Il2CppName: InjectSelector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SelectorUnityEventWrapper::*)(::Oculus::Interaction::ISelector*)>(&Oculus::Interaction::SelectorUnityEventWrapper::InjectSelector)> {
  static const MethodInfo* get() {
    static auto* selector = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "ISelector")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SelectorUnityEventWrapper*), "InjectSelector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{selector});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SelectorUnityEventWrapper::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
