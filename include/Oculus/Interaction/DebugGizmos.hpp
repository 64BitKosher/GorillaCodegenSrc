// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: IReadOnlyList`1<T>
  template<typename T>
  class IReadOnlyList_1;
}
// Forward declaring namespace: Oculus::Interaction
namespace Oculus::Interaction {
  // Forward declaring type: PolylineRenderer
  class PolylineRenderer;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Skipping declaration: Quaternion because it is already included!
  // Forward declaring type: Pose
  struct Pose;
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: DebugGizmos
  class DebugGizmos;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::DebugGizmos);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::DebugGizmos*, "Oculus.Interaction", "DebugGizmos");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.DebugGizmos
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExecuteAlways] Offset: FFFFFFFF
  class DebugGizmos : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private System.Collections.Generic.List`1<UnityEngine.Vector4> _points
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::UnityEngine::Vector4>* points;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Vector4>*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.Color> _colors
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::List_1<::UnityEngine::Color>* colors;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Color>*) == 0x8);
    // private System.Int32 _index
    // Size: 0x4
    // Offset: 0x30
    int index;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean _addedSegmentSinceLastUpdate
    // Size: 0x1
    // Offset: 0x34
    bool addedSegmentSinceLastUpdate;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: addedSegmentSinceLastUpdate and: polylineRenderer
    char __padding3[0x3] = {};
    // private Oculus.Interaction.PolylineRenderer _polylineRenderer
    // Size: 0x8
    // Offset: 0x38
    ::Oculus::Interaction::PolylineRenderer* polylineRenderer;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::PolylineRenderer*) == 0x8);
    public:
    // Get static field: static protected Oculus.Interaction.DebugGizmos _root
    static ::Oculus::Interaction::DebugGizmos* _get__root();
    // Set static field: static protected Oculus.Interaction.DebugGizmos _root
    static void _set__root(::Oculus::Interaction::DebugGizmos* value);
    // Get static field: static private System.Boolean _renderSinglePass
    static bool _get__renderSinglePass();
    // Set static field: static private System.Boolean _renderSinglePass
    static void _set__renderSinglePass(bool value);
    // Get static field: static public UnityEngine.Color Color
    static ::UnityEngine::Color _get_Color();
    // Set static field: static public UnityEngine.Color Color
    static void _set_Color(::UnityEngine::Color value);
    // Get static field: static public System.Single LineWidth
    static float _get_LineWidth();
    // Set static field: static public System.Single LineWidth
    static void _set_LineWidth(float value);
    // Get static field: static private readonly System.Collections.Generic.IReadOnlyList`1<UnityEngine.Vector3> CUBE_POINTS
    static ::System::Collections::Generic::IReadOnlyList_1<::UnityEngine::Vector3>* _get_CUBE_POINTS();
    // Set static field: static private readonly System.Collections.Generic.IReadOnlyList`1<UnityEngine.Vector3> CUBE_POINTS
    static void _set_CUBE_POINTS(::System::Collections::Generic::IReadOnlyList_1<::UnityEngine::Vector3>* value);
    // Get static field: static private readonly System.Collections.Generic.IReadOnlyList`1<System.Int32> CUBE_SEGMENTS
    static ::System::Collections::Generic::IReadOnlyList_1<int>* _get_CUBE_SEGMENTS();
    // Set static field: static private readonly System.Collections.Generic.IReadOnlyList`1<System.Int32> CUBE_SEGMENTS
    static void _set_CUBE_SEGMENTS(::System::Collections::Generic::IReadOnlyList_1<int>* value);
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Vector4> _points
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Vector4>*& dyn__points();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Color> _colors
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Color>*& dyn__colors();
    // Get instance field reference: private System.Int32 _index
    [[deprecated("Use field access instead!")]] int& dyn__index();
    // Get instance field reference: private System.Boolean _addedSegmentSinceLastUpdate
    [[deprecated("Use field access instead!")]] bool& dyn__addedSegmentSinceLastUpdate();
    // Get instance field reference: private Oculus.Interaction.PolylineRenderer _polylineRenderer
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::PolylineRenderer*& dyn__polylineRenderer();
    // static protected Oculus.Interaction.DebugGizmos get_Root()
    // Offset: 0x47CA2B8
    static ::Oculus::Interaction::DebugGizmos* get_Root();
    // protected System.Void OnEnable()
    // Offset: 0x47CA504
    void OnEnable();
    // private Oculus.Interaction.PolylineRenderer get_Renderer()
    // Offset: 0x47CA610
    ::Oculus::Interaction::PolylineRenderer* get_Renderer();
    // protected System.Void OnDisable()
    // Offset: 0x47CAB84
    void OnDisable();
    // protected System.Void ClearSegments()
    // Offset: 0x47CACC8
    void ClearSegments();
    // protected System.Void RenderSegments()
    // Offset: 0x47CACD0
    void RenderSegments();
    // protected System.Void LateUpdate()
    // Offset: 0x47CAF90
    void LateUpdate();
    // protected System.Void AddSegment(UnityEngine.Vector3 p0, UnityEngine.Vector3 p1, System.Single width, UnityEngine.Color color0, UnityEngine.Color color1)
    // Offset: 0x47CAFF8
    void AddSegment(::UnityEngine::Vector3 p0, ::UnityEngine::Vector3 p1, float width, ::UnityEngine::Color color0, ::UnityEngine::Color color1);
    // static public System.Boolean get_RenderSinglePass()
    // Offset: 0x47CB270
    static bool get_RenderSinglePass();
    // static public System.Void set_RenderSinglePass(System.Boolean value)
    // Offset: 0x47CB2C8
    static void set_RenderSinglePass(bool value);
    // static public System.Void DrawPoint(UnityEngine.Vector3 p0, UnityEngine.Transform t)
    // Offset: 0x47C2F88
    static void DrawPoint(::UnityEngine::Vector3 p0, ::UnityEngine::Transform* t);
    // static public System.Void DrawLine(UnityEngine.Vector3 p0, UnityEngine.Vector3 p1, UnityEngine.Transform t)
    // Offset: 0x47C6970
    static void DrawLine(::UnityEngine::Vector3 p0, ::UnityEngine::Vector3 p1, ::UnityEngine::Transform* t);
    // static public System.Void DrawWireCube(UnityEngine.Vector3 center, System.Single size, UnityEngine.Transform t)
    // Offset: 0x47CB3CC
    static void DrawWireCube(::UnityEngine::Vector3 center, float size, ::UnityEngine::Transform* t);
    // static public System.Void DrawAxis(UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, System.Single size)
    // Offset: 0x47C30A8
    static void DrawAxis(::UnityEngine::Vector3 position, ::UnityEngine::Quaternion rotation, float size);
    // static public System.Void DrawAxis(UnityEngine.Pose pose, System.Single size)
    // Offset: 0x47CB728
    static void DrawAxis(::UnityEngine::Pose pose, float size);
    // static public System.Void DrawAxis(UnityEngine.Transform t, System.Single size)
    // Offset: 0x47CB7CC
    static void DrawAxis(::UnityEngine::Transform* t, float size);
    // public System.Void .ctor()
    // Offset: 0x47CB870
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DebugGizmos* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::DebugGizmos::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DebugGizmos*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x47CB94C
    static void _cctor();
  }; // Oculus.Interaction.DebugGizmos
  #pragma pack(pop)
  static check_size<sizeof(DebugGizmos), 56 + sizeof(::Oculus::Interaction::PolylineRenderer*)> __Oculus_Interaction_DebugGizmosSizeCheck;
  static_assert(sizeof(DebugGizmos) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::DebugGizmos::get_Root
// Il2CppName: get_Root
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::DebugGizmos* (*)()>(&Oculus::Interaction::DebugGizmos::get_Root)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::DebugGizmos*), "get_Root", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::DebugGizmos::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::DebugGizmos::*)()>(&Oculus::Interaction::DebugGizmos::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::DebugGizmos*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::DebugGizmos::get_Renderer
// Il2CppName: get_Renderer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::PolylineRenderer* (Oculus::Interaction::DebugGizmos::*)()>(&Oculus::Interaction::DebugGizmos::get_Renderer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::DebugGizmos*), "get_Renderer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::DebugGizmos::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::DebugGizmos::*)()>(&Oculus::Interaction::DebugGizmos::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::DebugGizmos*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::DebugGizmos::ClearSegments
// Il2CppName: ClearSegments
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::DebugGizmos::*)()>(&Oculus::Interaction::DebugGizmos::ClearSegments)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::DebugGizmos*), "ClearSegments", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::DebugGizmos::RenderSegments
// Il2CppName: RenderSegments
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::DebugGizmos::*)()>(&Oculus::Interaction::DebugGizmos::RenderSegments)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::DebugGizmos*), "RenderSegments", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::DebugGizmos::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::DebugGizmos::*)()>(&Oculus::Interaction::DebugGizmos::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::DebugGizmos*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::DebugGizmos::AddSegment
// Il2CppName: AddSegment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::DebugGizmos::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, float, ::UnityEngine::Color, ::UnityEngine::Color)>(&Oculus::Interaction::DebugGizmos::AddSegment)> {
  static const MethodInfo* get() {
    static auto* p0 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* p1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* width = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* color0 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* color1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::DebugGizmos*), "AddSegment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p0, p1, width, color0, color1});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::DebugGizmos::get_RenderSinglePass
// Il2CppName: get_RenderSinglePass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&Oculus::Interaction::DebugGizmos::get_RenderSinglePass)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::DebugGizmos*), "get_RenderSinglePass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::DebugGizmos::set_RenderSinglePass
// Il2CppName: set_RenderSinglePass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&Oculus::Interaction::DebugGizmos::set_RenderSinglePass)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::DebugGizmos*), "set_RenderSinglePass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::DebugGizmos::DrawPoint
// Il2CppName: DrawPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ::UnityEngine::Transform*)>(&Oculus::Interaction::DebugGizmos::DrawPoint)> {
  static const MethodInfo* get() {
    static auto* p0 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::DebugGizmos*), "DrawPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p0, t});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::DebugGizmos::DrawLine
// Il2CppName: DrawLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Transform*)>(&Oculus::Interaction::DebugGizmos::DrawLine)> {
  static const MethodInfo* get() {
    static auto* p0 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* p1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::DebugGizmos*), "DrawLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p0, p1, t});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::DebugGizmos::DrawWireCube
// Il2CppName: DrawWireCube
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, float, ::UnityEngine::Transform*)>(&Oculus::Interaction::DebugGizmos::DrawWireCube)> {
  static const MethodInfo* get() {
    static auto* center = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::DebugGizmos*), "DrawWireCube", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{center, size, t});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::DebugGizmos::DrawAxis
// Il2CppName: DrawAxis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion, float)>(&Oculus::Interaction::DebugGizmos::DrawAxis)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::DebugGizmos*), "DrawAxis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, rotation, size});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::DebugGizmos::DrawAxis
// Il2CppName: DrawAxis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Pose, float)>(&Oculus::Interaction::DebugGizmos::DrawAxis)> {
  static const MethodInfo* get() {
    static auto* pose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::DebugGizmos*), "DrawAxis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pose, size});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::DebugGizmos::DrawAxis
// Il2CppName: DrawAxis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Transform*, float)>(&Oculus::Interaction::DebugGizmos::DrawAxis)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::DebugGizmos*), "DrawAxis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, size});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::DebugGizmos::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Interaction::DebugGizmos::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Oculus::Interaction::DebugGizmos::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::DebugGizmos*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
