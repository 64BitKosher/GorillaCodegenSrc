// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Oculus.Interaction.HandSphere
#include "Oculus/Interaction/HandSphere.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction::Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: Handedness
  struct Handedness;
  // Skipping declaration: HandJointId because it is already included!
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Pose
  struct Pose;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: IHandSphereMap
  class IHandSphereMap;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::IHandSphereMap);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::IHandSphereMap*, "Oculus.Interaction", "IHandSphereMap");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x0
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.IHandSphereMap
  // [TokenAttribute] Offset: FFFFFFFF
  class IHandSphereMap {
    public:
    // public System.Void GetSpheres(Oculus.Interaction.Input.Handedness handedness, Oculus.Interaction.Input.HandJointId joint, UnityEngine.Pose pose, System.Single scale, System.Collections.Generic.List`1<Oculus.Interaction.HandSphere> spheres)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void GetSpheres(::Oculus::Interaction::Input::Handedness handedness, ::Oculus::Interaction::Input::HandJointId joint, ::UnityEngine::Pose pose, float scale, ::System::Collections::Generic::List_1<::Oculus::Interaction::HandSphere>* spheres);
  }; // Oculus.Interaction.IHandSphereMap
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::IHandSphereMap::GetSpheres
// Il2CppName: GetSpheres
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::IHandSphereMap::*)(::Oculus::Interaction::Input::Handedness, ::Oculus::Interaction::Input::HandJointId, ::UnityEngine::Pose, float, ::System::Collections::Generic::List_1<::Oculus::Interaction::HandSphere>*)>(&Oculus::Interaction::IHandSphereMap::GetSpheres)> {
  static const MethodInfo* get() {
    static auto* handedness = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "Handedness")->byval_arg;
    static auto* joint = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "HandJointId")->byval_arg;
    static auto* pose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->byval_arg;
    static auto* scale = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* spheres = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Interaction", "HandSphere")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::IHandSphereMap*), "GetSpheres", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handedness, joint, pose, scale, spheres});
  }
};
