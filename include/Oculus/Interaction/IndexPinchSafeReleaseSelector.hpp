// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Oculus.Interaction.ISelector
#include "Oculus/Interaction/ISelector.hpp"
// Including type: Oculus.Interaction.IActiveState
#include "Oculus/Interaction/IActiveState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction
namespace Oculus::Interaction {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Object because it is already included!
}
// Forward declaring namespace: Oculus::Interaction::Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: IHand
  class IHand;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: IndexPinchSafeReleaseSelector
  class IndexPinchSafeReleaseSelector;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::IndexPinchSafeReleaseSelector);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::IndexPinchSafeReleaseSelector*, "Oculus.Interaction", "IndexPinchSafeReleaseSelector");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x61
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.IndexPinchSafeReleaseSelector
  // [TokenAttribute] Offset: FFFFFFFF
  class IndexPinchSafeReleaseSelector : public ::UnityEngine::MonoBehaviour/*, public ::Oculus::Interaction::ISelector, public ::Oculus::Interaction::IActiveState*/ {
    public:
    // Nested type: ::Oculus::Interaction::IndexPinchSafeReleaseSelector::$$c
    class $$c;
    public:
    // private UnityEngine.Object _hand
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Object* hand;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.Input.IHand <Hand>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    ::Oculus::Interaction::Input::IHand* Hand;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::IHand*) == 0x8);
    // private System.Boolean _selectOnRelease
    // Size: 0x1
    // Offset: 0x30
    bool selectOnRelease;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: selectOnRelease and: indexReleaseSafeguard
    char __padding2[0x7] = {};
    // private UnityEngine.Object _indexReleaseSafeguard
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Object* indexReleaseSafeguard;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.IActiveState IndexReleaseSafeguard
    // Size: 0x8
    // Offset: 0x40
    ::Oculus::Interaction::IActiveState* IndexReleaseSafeguard;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::IActiveState*) == 0x8);
    // private System.Boolean _isIndexFingerPinching
    // Size: 0x1
    // Offset: 0x48
    bool isIndexFingerPinching;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _cancelled
    // Size: 0x1
    // Offset: 0x49
    bool cancelled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _pendingUnselect
    // Size: 0x1
    // Offset: 0x4A
    bool pendingUnselect;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: pendingUnselect and: WhenSelected
    char __padding7[0x5] = {};
    // private System.Action WhenSelected
    // Size: 0x8
    // Offset: 0x50
    ::System::Action* WhenSelected;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private System.Action WhenUnselected
    // Size: 0x8
    // Offset: 0x58
    ::System::Action* WhenUnselected;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // protected System.Boolean _started
    // Size: 0x1
    // Offset: 0x60
    bool started;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::ISelector
    operator ::Oculus::Interaction::ISelector() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::ISelector*>(this);
    }
    // Creating interface conversion operator: operator ::Oculus::Interaction::IActiveState
    operator ::Oculus::Interaction::IActiveState() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::IActiveState*>(this);
    }
    // Get instance field reference: private UnityEngine.Object _hand
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__hand();
    // Get instance field reference: private Oculus.Interaction.Input.IHand <Hand>k__BackingField
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::IHand*& dyn_$Hand$k__BackingField();
    // Get instance field reference: private System.Boolean _selectOnRelease
    [[deprecated("Use field access instead!")]] bool& dyn__selectOnRelease();
    // Get instance field reference: private UnityEngine.Object _indexReleaseSafeguard
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__indexReleaseSafeguard();
    // Get instance field reference: private Oculus.Interaction.IActiveState IndexReleaseSafeguard
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::IActiveState*& dyn_IndexReleaseSafeguard();
    // Get instance field reference: private System.Boolean _isIndexFingerPinching
    [[deprecated("Use field access instead!")]] bool& dyn__isIndexFingerPinching();
    // Get instance field reference: private System.Boolean _cancelled
    [[deprecated("Use field access instead!")]] bool& dyn__cancelled();
    // Get instance field reference: private System.Boolean _pendingUnselect
    [[deprecated("Use field access instead!")]] bool& dyn__pendingUnselect();
    // Get instance field reference: private System.Action WhenSelected
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_WhenSelected();
    // Get instance field reference: private System.Action WhenUnselected
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_WhenUnselected();
    // Get instance field reference: protected System.Boolean _started
    [[deprecated("Use field access instead!")]] bool& dyn__started();
    // public Oculus.Interaction.Input.IHand get_Hand()
    // Offset: 0x47D2F64
    ::Oculus::Interaction::Input::IHand* get_Hand();
    // private System.Void set_Hand(Oculus.Interaction.Input.IHand value)
    // Offset: 0x47D2F6C
    void set_Hand(::Oculus::Interaction::Input::IHand* value);
    // public System.Boolean get_Active()
    // Offset: 0x47D2F74
    bool get_Active();
    // public System.Void add_WhenSelected(System.Action value)
    // Offset: 0x47D2FAC
    void add_WhenSelected(::System::Action* value);
    // public System.Void remove_WhenSelected(System.Action value)
    // Offset: 0x47D3048
    void remove_WhenSelected(::System::Action* value);
    // public System.Void add_WhenUnselected(System.Action value)
    // Offset: 0x47D30E4
    void add_WhenUnselected(::System::Action* value);
    // public System.Void remove_WhenUnselected(System.Action value)
    // Offset: 0x47D3180
    void remove_WhenUnselected(::System::Action* value);
    // protected System.Void Awake()
    // Offset: 0x47D321C
    void Awake();
    // protected System.Void Start()
    // Offset: 0x47D32BC
    void Start();
    // protected System.Void OnEnable()
    // Offset: 0x47D32F4
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x47D33F4
    void OnDisable();
    // private System.Void HandleHandUpdated()
    // Offset: 0x47D34F4
    void HandleHandUpdated();
    // private System.Void ProcessSelectOnPinch(System.Boolean isPinchDetected, System.Boolean isReleaseDetected)
    // Offset: 0x47D36F0
    void ProcessSelectOnPinch(bool isPinchDetected, bool isReleaseDetected);
    // private System.Void ProcessSelectOnRelease(System.Boolean isPinchDetected, System.Boolean isReleaseDetected)
    // Offset: 0x47D364C
    void ProcessSelectOnRelease(bool isPinchDetected, bool isReleaseDetected);
    // public System.Void Cancel()
    // Offset: 0x47D3760
    void Cancel();
    // public System.Void InjectAllIndexPinchSafeReleaseSelector(Oculus.Interaction.Input.IHand hand, System.Boolean selectOnRelease, Oculus.Interaction.IActiveState indexReleaseSafeguard)
    // Offset: 0x47D3774
    void InjectAllIndexPinchSafeReleaseSelector(::Oculus::Interaction::Input::IHand* hand, bool selectOnRelease, ::Oculus::Interaction::IActiveState* indexReleaseSafeguard);
    // public System.Void InjectHand(Oculus.Interaction.Input.IHand hand)
    // Offset: 0x47D37A8
    void InjectHand(::Oculus::Interaction::Input::IHand* hand);
    // public System.Void InjectSelectOnRelease(System.Boolean selectOnRelease)
    // Offset: 0x47D3948
    void InjectSelectOnRelease(bool selectOnRelease);
    // public System.Void InjectIndexReleaseSafeguard(Oculus.Interaction.IActiveState indexReleaseSafeguard)
    // Offset: 0x47D3878
    void InjectIndexReleaseSafeguard(::Oculus::Interaction::IActiveState* indexReleaseSafeguard);
    // public System.Void .ctor()
    // Offset: 0x47D3954
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static IndexPinchSafeReleaseSelector* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::IndexPinchSafeReleaseSelector::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<IndexPinchSafeReleaseSelector*, creationType>()));
    }
  }; // Oculus.Interaction.IndexPinchSafeReleaseSelector
  #pragma pack(pop)
  static check_size<sizeof(IndexPinchSafeReleaseSelector), 96 + sizeof(bool)> __Oculus_Interaction_IndexPinchSafeReleaseSelectorSizeCheck;
  static_assert(sizeof(IndexPinchSafeReleaseSelector) == 0x61);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::IndexPinchSafeReleaseSelector::get_Hand
// Il2CppName: get_Hand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Input::IHand* (Oculus::Interaction::IndexPinchSafeReleaseSelector::*)()>(&Oculus::Interaction::IndexPinchSafeReleaseSelector::get_Hand)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::IndexPinchSafeReleaseSelector*), "get_Hand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::IndexPinchSafeReleaseSelector::set_Hand
// Il2CppName: set_Hand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::IndexPinchSafeReleaseSelector::*)(::Oculus::Interaction::Input::IHand*)>(&Oculus::Interaction::IndexPinchSafeReleaseSelector::set_Hand)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::IndexPinchSafeReleaseSelector*), "set_Hand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::IndexPinchSafeReleaseSelector::get_Active
// Il2CppName: get_Active
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::IndexPinchSafeReleaseSelector::*)()>(&Oculus::Interaction::IndexPinchSafeReleaseSelector::get_Active)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::IndexPinchSafeReleaseSelector*), "get_Active", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::IndexPinchSafeReleaseSelector::add_WhenSelected
// Il2CppName: add_WhenSelected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::IndexPinchSafeReleaseSelector::*)(::System::Action*)>(&Oculus::Interaction::IndexPinchSafeReleaseSelector::add_WhenSelected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::IndexPinchSafeReleaseSelector*), "add_WhenSelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::IndexPinchSafeReleaseSelector::remove_WhenSelected
// Il2CppName: remove_WhenSelected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::IndexPinchSafeReleaseSelector::*)(::System::Action*)>(&Oculus::Interaction::IndexPinchSafeReleaseSelector::remove_WhenSelected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::IndexPinchSafeReleaseSelector*), "remove_WhenSelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::IndexPinchSafeReleaseSelector::add_WhenUnselected
// Il2CppName: add_WhenUnselected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::IndexPinchSafeReleaseSelector::*)(::System::Action*)>(&Oculus::Interaction::IndexPinchSafeReleaseSelector::add_WhenUnselected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::IndexPinchSafeReleaseSelector*), "add_WhenUnselected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::IndexPinchSafeReleaseSelector::remove_WhenUnselected
// Il2CppName: remove_WhenUnselected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::IndexPinchSafeReleaseSelector::*)(::System::Action*)>(&Oculus::Interaction::IndexPinchSafeReleaseSelector::remove_WhenUnselected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::IndexPinchSafeReleaseSelector*), "remove_WhenUnselected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::IndexPinchSafeReleaseSelector::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::IndexPinchSafeReleaseSelector::*)()>(&Oculus::Interaction::IndexPinchSafeReleaseSelector::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::IndexPinchSafeReleaseSelector*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::IndexPinchSafeReleaseSelector::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::IndexPinchSafeReleaseSelector::*)()>(&Oculus::Interaction::IndexPinchSafeReleaseSelector::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::IndexPinchSafeReleaseSelector*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::IndexPinchSafeReleaseSelector::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::IndexPinchSafeReleaseSelector::*)()>(&Oculus::Interaction::IndexPinchSafeReleaseSelector::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::IndexPinchSafeReleaseSelector*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::IndexPinchSafeReleaseSelector::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::IndexPinchSafeReleaseSelector::*)()>(&Oculus::Interaction::IndexPinchSafeReleaseSelector::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::IndexPinchSafeReleaseSelector*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::IndexPinchSafeReleaseSelector::HandleHandUpdated
// Il2CppName: HandleHandUpdated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::IndexPinchSafeReleaseSelector::*)()>(&Oculus::Interaction::IndexPinchSafeReleaseSelector::HandleHandUpdated)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::IndexPinchSafeReleaseSelector*), "HandleHandUpdated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::IndexPinchSafeReleaseSelector::ProcessSelectOnPinch
// Il2CppName: ProcessSelectOnPinch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::IndexPinchSafeReleaseSelector::*)(bool, bool)>(&Oculus::Interaction::IndexPinchSafeReleaseSelector::ProcessSelectOnPinch)> {
  static const MethodInfo* get() {
    static auto* isPinchDetected = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* isReleaseDetected = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::IndexPinchSafeReleaseSelector*), "ProcessSelectOnPinch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isPinchDetected, isReleaseDetected});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::IndexPinchSafeReleaseSelector::ProcessSelectOnRelease
// Il2CppName: ProcessSelectOnRelease
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::IndexPinchSafeReleaseSelector::*)(bool, bool)>(&Oculus::Interaction::IndexPinchSafeReleaseSelector::ProcessSelectOnRelease)> {
  static const MethodInfo* get() {
    static auto* isPinchDetected = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* isReleaseDetected = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::IndexPinchSafeReleaseSelector*), "ProcessSelectOnRelease", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isPinchDetected, isReleaseDetected});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::IndexPinchSafeReleaseSelector::Cancel
// Il2CppName: Cancel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::IndexPinchSafeReleaseSelector::*)()>(&Oculus::Interaction::IndexPinchSafeReleaseSelector::Cancel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::IndexPinchSafeReleaseSelector*), "Cancel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::IndexPinchSafeReleaseSelector::InjectAllIndexPinchSafeReleaseSelector
// Il2CppName: InjectAllIndexPinchSafeReleaseSelector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::IndexPinchSafeReleaseSelector::*)(::Oculus::Interaction::Input::IHand*, bool, ::Oculus::Interaction::IActiveState*)>(&Oculus::Interaction::IndexPinchSafeReleaseSelector::InjectAllIndexPinchSafeReleaseSelector)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHand")->byval_arg;
    static auto* selectOnRelease = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* indexReleaseSafeguard = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IActiveState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::IndexPinchSafeReleaseSelector*), "InjectAllIndexPinchSafeReleaseSelector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand, selectOnRelease, indexReleaseSafeguard});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::IndexPinchSafeReleaseSelector::InjectHand
// Il2CppName: InjectHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::IndexPinchSafeReleaseSelector::*)(::Oculus::Interaction::Input::IHand*)>(&Oculus::Interaction::IndexPinchSafeReleaseSelector::InjectHand)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::IndexPinchSafeReleaseSelector*), "InjectHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::IndexPinchSafeReleaseSelector::InjectSelectOnRelease
// Il2CppName: InjectSelectOnRelease
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::IndexPinchSafeReleaseSelector::*)(bool)>(&Oculus::Interaction::IndexPinchSafeReleaseSelector::InjectSelectOnRelease)> {
  static const MethodInfo* get() {
    static auto* selectOnRelease = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::IndexPinchSafeReleaseSelector*), "InjectSelectOnRelease", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{selectOnRelease});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::IndexPinchSafeReleaseSelector::InjectIndexReleaseSafeguard
// Il2CppName: InjectIndexReleaseSafeguard
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::IndexPinchSafeReleaseSelector::*)(::Oculus::Interaction::IActiveState*)>(&Oculus::Interaction::IndexPinchSafeReleaseSelector::InjectIndexReleaseSafeguard)> {
  static const MethodInfo* get() {
    static auto* indexReleaseSafeguard = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IActiveState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::IndexPinchSafeReleaseSelector*), "InjectIndexReleaseSafeguard", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{indexReleaseSafeguard});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::IndexPinchSafeReleaseSelector::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
