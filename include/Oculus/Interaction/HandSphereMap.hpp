// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Oculus.Interaction.IHandSphereMap
#include "Oculus/Interaction/IHandSphereMap.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction::Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: FromHandPrefabDataSource
  class FromHandPrefabDataSource;
  // Forward declaring type: Handedness
  struct Handedness;
  // Skipping declaration: HandJointId because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Pose
  struct Pose;
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: HandSphereMap
  class HandSphereMap;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::HandSphereMap);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::HandSphereMap*, "Oculus.Interaction", "HandSphereMap");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.HandSphereMap
  // [TokenAttribute] Offset: FFFFFFFF
  class HandSphereMap : public ::UnityEngine::MonoBehaviour/*, public ::Oculus::Interaction::IHandSphereMap*/ {
    public:
    public:
    // public Oculus.Interaction.Input.FromHandPrefabDataSource _handPrefabDataSource
    // Size: 0x8
    // Offset: 0x20
    ::Oculus::Interaction::Input::FromHandPrefabDataSource* handPrefabDataSource;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::FromHandPrefabDataSource*) == 0x8);
    // private System.Collections.Generic.List`1<System.Collections.Generic.List`1<Oculus.Interaction.HandSphere>> _sourceSphereMap
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Oculus::Interaction::HandSphere>*>* sourceSphereMap;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Oculus::Interaction::HandSphere>*>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::IHandSphereMap
    operator ::Oculus::Interaction::IHandSphereMap() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::IHandSphereMap*>(this);
    }
    // Get instance field reference: public Oculus.Interaction.Input.FromHandPrefabDataSource _handPrefabDataSource
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::FromHandPrefabDataSource*& dyn__handPrefabDataSource();
    // Get instance field reference: private System.Collections.Generic.List`1<System.Collections.Generic.List`1<Oculus.Interaction.HandSphere>> _sourceSphereMap
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Oculus::Interaction::HandSphere>*>*& dyn__sourceSphereMap();
    // protected System.Void Awake()
    // Offset: 0x47BC93C
    void Awake();
    // protected System.Void Start()
    // Offset: 0x47BCA88
    void Start();
    // public System.Void GetSpheres(Oculus.Interaction.Input.Handedness handedness, Oculus.Interaction.Input.HandJointId joint, UnityEngine.Pose pose, System.Single scale, System.Collections.Generic.List`1<Oculus.Interaction.HandSphere> spheres)
    // Offset: 0x47BCF80
    void GetSpheres(::Oculus::Interaction::Input::Handedness handedness, ::Oculus::Interaction::Input::HandJointId joint, ::UnityEngine::Pose pose, float scale, ::System::Collections::Generic::List_1<::Oculus::Interaction::HandSphere>* spheres);
    // public System.Void .ctor()
    // Offset: 0x47BD16C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HandSphereMap* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::HandSphereMap::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HandSphereMap*, creationType>()));
    }
  }; // Oculus.Interaction.HandSphereMap
  #pragma pack(pop)
  static check_size<sizeof(HandSphereMap), 40 + sizeof(::System::Collections::Generic::List_1<::System::Collections::Generic::List_1<::Oculus::Interaction::HandSphere>*>*)> __Oculus_Interaction_HandSphereMapSizeCheck;
  static_assert(sizeof(HandSphereMap) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::HandSphereMap::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandSphereMap::*)()>(&Oculus::Interaction::HandSphereMap::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandSphereMap*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandSphereMap::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandSphereMap::*)()>(&Oculus::Interaction::HandSphereMap::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandSphereMap*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandSphereMap::GetSpheres
// Il2CppName: GetSpheres
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandSphereMap::*)(::Oculus::Interaction::Input::Handedness, ::Oculus::Interaction::Input::HandJointId, ::UnityEngine::Pose, float, ::System::Collections::Generic::List_1<::Oculus::Interaction::HandSphere>*)>(&Oculus::Interaction::HandSphereMap::GetSpheres)> {
  static const MethodInfo* get() {
    static auto* handedness = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "Handedness")->byval_arg;
    static auto* joint = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "HandJointId")->byval_arg;
    static auto* pose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->byval_arg;
    static auto* scale = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* spheres = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Interaction", "HandSphere")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandSphereMap*), "GetSpheres", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handedness, joint, pose, scale, spheres});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandSphereMap::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
