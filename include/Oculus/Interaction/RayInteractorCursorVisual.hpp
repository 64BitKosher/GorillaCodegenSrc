// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction
namespace Oculus::Interaction {
  // Forward declaring type: RayInteractor
  class RayInteractor;
  // Forward declaring type: InteractorStateChangeArgs
  struct InteractorStateChangeArgs;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Renderer
  class Renderer;
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: RayInteractorCursorVisual
  class RayInteractorCursorVisual;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::RayInteractorCursorVisual);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::RayInteractorCursorVisual*, "Oculus.Interaction", "RayInteractorCursorVisual");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x79
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.RayInteractorCursorVisual
  // [TokenAttribute] Offset: FFFFFFFF
  class RayInteractorCursorVisual : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private Oculus.Interaction.RayInteractor _rayInteractor
    // Size: 0x8
    // Offset: 0x20
    ::Oculus::Interaction::RayInteractor* rayInteractor;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::RayInteractor*) == 0x8);
    // private UnityEngine.Renderer _renderer
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Renderer* renderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::Renderer*) == 0x8);
    // private UnityEngine.Color _hoverColor
    // Size: 0x10
    // Offset: 0x30
    ::UnityEngine::Color hoverColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color _selectColor
    // Size: 0x10
    // Offset: 0x40
    ::UnityEngine::Color selectColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color _outlineColor
    // Size: 0x10
    // Offset: 0x50
    ::UnityEngine::Color outlineColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private System.Single _offsetAlongNormal
    // Size: 0x4
    // Offset: 0x60
    float offsetAlongNormal;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 _shaderRadialGradientScale
    // Size: 0x4
    // Offset: 0x64
    int shaderRadialGradientScale;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _shaderRadialGradientIntensity
    // Size: 0x4
    // Offset: 0x68
    int shaderRadialGradientIntensity;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _shaderRadialGradientBackgroundOpacity
    // Size: 0x4
    // Offset: 0x6C
    int shaderRadialGradientBackgroundOpacity;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _shaderInnerColor
    // Size: 0x4
    // Offset: 0x70
    int shaderInnerColor;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _shaderOutlineColor
    // Size: 0x4
    // Offset: 0x74
    int shaderOutlineColor;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Boolean _started
    // Size: 0x1
    // Offset: 0x78
    bool started;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private Oculus.Interaction.RayInteractor _rayInteractor
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::RayInteractor*& dyn__rayInteractor();
    // Get instance field reference: private UnityEngine.Renderer _renderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& dyn__renderer();
    // Get instance field reference: private UnityEngine.Color _hoverColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__hoverColor();
    // Get instance field reference: private UnityEngine.Color _selectColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__selectColor();
    // Get instance field reference: private UnityEngine.Color _outlineColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__outlineColor();
    // Get instance field reference: private System.Single _offsetAlongNormal
    [[deprecated("Use field access instead!")]] float& dyn__offsetAlongNormal();
    // Get instance field reference: private System.Int32 _shaderRadialGradientScale
    [[deprecated("Use field access instead!")]] int& dyn__shaderRadialGradientScale();
    // Get instance field reference: private System.Int32 _shaderRadialGradientIntensity
    [[deprecated("Use field access instead!")]] int& dyn__shaderRadialGradientIntensity();
    // Get instance field reference: private System.Int32 _shaderRadialGradientBackgroundOpacity
    [[deprecated("Use field access instead!")]] int& dyn__shaderRadialGradientBackgroundOpacity();
    // Get instance field reference: private System.Int32 _shaderInnerColor
    [[deprecated("Use field access instead!")]] int& dyn__shaderInnerColor();
    // Get instance field reference: private System.Int32 _shaderOutlineColor
    [[deprecated("Use field access instead!")]] int& dyn__shaderOutlineColor();
    // Get instance field reference: protected System.Boolean _started
    [[deprecated("Use field access instead!")]] bool& dyn__started();
    // public UnityEngine.Color get_HoverColor()
    // Offset: 0x47B630C
    ::UnityEngine::Color get_HoverColor();
    // public System.Void set_HoverColor(UnityEngine.Color value)
    // Offset: 0x47B6318
    void set_HoverColor(::UnityEngine::Color value);
    // public UnityEngine.Color get_SelectColor()
    // Offset: 0x47B6324
    ::UnityEngine::Color get_SelectColor();
    // public System.Void set_SelectColor(UnityEngine.Color value)
    // Offset: 0x47B6330
    void set_SelectColor(::UnityEngine::Color value);
    // public UnityEngine.Color get_OutlineColor()
    // Offset: 0x47B633C
    ::UnityEngine::Color get_OutlineColor();
    // public System.Void set_OutlineColor(UnityEngine.Color value)
    // Offset: 0x47B6348
    void set_OutlineColor(::UnityEngine::Color value);
    // public System.Single get_OffsetAlongNormal()
    // Offset: 0x47B6354
    float get_OffsetAlongNormal();
    // public System.Void set_OffsetAlongNormal(System.Single value)
    // Offset: 0x47B635C
    void set_OffsetAlongNormal(float value);
    // protected System.Void Start()
    // Offset: 0x47B6364
    void Start();
    // protected System.Void OnEnable()
    // Offset: 0x47B66A8
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x47B67DC
    void OnDisable();
    // private System.Void UpdateVisual()
    // Offset: 0x47B63A4
    void UpdateVisual();
    // private System.Void UpdateVisualState(Oculus.Interaction.InteractorStateChangeArgs args)
    // Offset: 0x47B6908
    void UpdateVisualState(::Oculus::Interaction::InteractorStateChangeArgs args);
    // public System.Void InjectAllRayInteractorCursorVisual(Oculus.Interaction.RayInteractor rayInteractor, UnityEngine.Renderer renderer)
    // Offset: 0x47B690C
    void InjectAllRayInteractorCursorVisual(::Oculus::Interaction::RayInteractor* rayInteractor, ::UnityEngine::Renderer* renderer);
    // public System.Void InjectRayInteractor(Oculus.Interaction.RayInteractor rayInteractor)
    // Offset: 0x47B693C
    void InjectRayInteractor(::Oculus::Interaction::RayInteractor* rayInteractor);
    // public System.Void InjectRenderer(UnityEngine.Renderer renderer)
    // Offset: 0x47B6944
    void InjectRenderer(::UnityEngine::Renderer* renderer);
    // public System.Void .ctor()
    // Offset: 0x47B694C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RayInteractorCursorVisual* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::RayInteractorCursorVisual::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RayInteractorCursorVisual*, creationType>()));
    }
  }; // Oculus.Interaction.RayInteractorCursorVisual
  #pragma pack(pop)
  static check_size<sizeof(RayInteractorCursorVisual), 120 + sizeof(bool)> __Oculus_Interaction_RayInteractorCursorVisualSizeCheck;
  static_assert(sizeof(RayInteractorCursorVisual) == 0x79);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::RayInteractorCursorVisual::get_HoverColor
// Il2CppName: get_HoverColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (Oculus::Interaction::RayInteractorCursorVisual::*)()>(&Oculus::Interaction::RayInteractorCursorVisual::get_HoverColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::RayInteractorCursorVisual*), "get_HoverColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::RayInteractorCursorVisual::set_HoverColor
// Il2CppName: set_HoverColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::RayInteractorCursorVisual::*)(::UnityEngine::Color)>(&Oculus::Interaction::RayInteractorCursorVisual::set_HoverColor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::RayInteractorCursorVisual*), "set_HoverColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::RayInteractorCursorVisual::get_SelectColor
// Il2CppName: get_SelectColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (Oculus::Interaction::RayInteractorCursorVisual::*)()>(&Oculus::Interaction::RayInteractorCursorVisual::get_SelectColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::RayInteractorCursorVisual*), "get_SelectColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::RayInteractorCursorVisual::set_SelectColor
// Il2CppName: set_SelectColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::RayInteractorCursorVisual::*)(::UnityEngine::Color)>(&Oculus::Interaction::RayInteractorCursorVisual::set_SelectColor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::RayInteractorCursorVisual*), "set_SelectColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::RayInteractorCursorVisual::get_OutlineColor
// Il2CppName: get_OutlineColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (Oculus::Interaction::RayInteractorCursorVisual::*)()>(&Oculus::Interaction::RayInteractorCursorVisual::get_OutlineColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::RayInteractorCursorVisual*), "get_OutlineColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::RayInteractorCursorVisual::set_OutlineColor
// Il2CppName: set_OutlineColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::RayInteractorCursorVisual::*)(::UnityEngine::Color)>(&Oculus::Interaction::RayInteractorCursorVisual::set_OutlineColor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::RayInteractorCursorVisual*), "set_OutlineColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::RayInteractorCursorVisual::get_OffsetAlongNormal
// Il2CppName: get_OffsetAlongNormal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::RayInteractorCursorVisual::*)()>(&Oculus::Interaction::RayInteractorCursorVisual::get_OffsetAlongNormal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::RayInteractorCursorVisual*), "get_OffsetAlongNormal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::RayInteractorCursorVisual::set_OffsetAlongNormal
// Il2CppName: set_OffsetAlongNormal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::RayInteractorCursorVisual::*)(float)>(&Oculus::Interaction::RayInteractorCursorVisual::set_OffsetAlongNormal)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::RayInteractorCursorVisual*), "set_OffsetAlongNormal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::RayInteractorCursorVisual::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::RayInteractorCursorVisual::*)()>(&Oculus::Interaction::RayInteractorCursorVisual::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::RayInteractorCursorVisual*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::RayInteractorCursorVisual::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::RayInteractorCursorVisual::*)()>(&Oculus::Interaction::RayInteractorCursorVisual::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::RayInteractorCursorVisual*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::RayInteractorCursorVisual::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::RayInteractorCursorVisual::*)()>(&Oculus::Interaction::RayInteractorCursorVisual::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::RayInteractorCursorVisual*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::RayInteractorCursorVisual::UpdateVisual
// Il2CppName: UpdateVisual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::RayInteractorCursorVisual::*)()>(&Oculus::Interaction::RayInteractorCursorVisual::UpdateVisual)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::RayInteractorCursorVisual*), "UpdateVisual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::RayInteractorCursorVisual::UpdateVisualState
// Il2CppName: UpdateVisualState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::RayInteractorCursorVisual::*)(::Oculus::Interaction::InteractorStateChangeArgs)>(&Oculus::Interaction::RayInteractorCursorVisual::UpdateVisualState)> {
  static const MethodInfo* get() {
    static auto* args = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "InteractorStateChangeArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::RayInteractorCursorVisual*), "UpdateVisualState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{args});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::RayInteractorCursorVisual::InjectAllRayInteractorCursorVisual
// Il2CppName: InjectAllRayInteractorCursorVisual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::RayInteractorCursorVisual::*)(::Oculus::Interaction::RayInteractor*, ::UnityEngine::Renderer*)>(&Oculus::Interaction::RayInteractorCursorVisual::InjectAllRayInteractorCursorVisual)> {
  static const MethodInfo* get() {
    static auto* rayInteractor = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "RayInteractor")->byval_arg;
    static auto* renderer = &::il2cpp_utils::GetClassFromName("UnityEngine", "Renderer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::RayInteractorCursorVisual*), "InjectAllRayInteractorCursorVisual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rayInteractor, renderer});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::RayInteractorCursorVisual::InjectRayInteractor
// Il2CppName: InjectRayInteractor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::RayInteractorCursorVisual::*)(::Oculus::Interaction::RayInteractor*)>(&Oculus::Interaction::RayInteractorCursorVisual::InjectRayInteractor)> {
  static const MethodInfo* get() {
    static auto* rayInteractor = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "RayInteractor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::RayInteractorCursorVisual*), "InjectRayInteractor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rayInteractor});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::RayInteractorCursorVisual::InjectRenderer
// Il2CppName: InjectRenderer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::RayInteractorCursorVisual::*)(::UnityEngine::Renderer*)>(&Oculus::Interaction::RayInteractorCursorVisual::InjectRenderer)> {
  static const MethodInfo* get() {
    static auto* renderer = &::il2cpp_utils::GetClassFromName("UnityEngine", "Renderer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::RayInteractorCursorVisual*), "InjectRenderer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderer});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::RayInteractorCursorVisual::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
