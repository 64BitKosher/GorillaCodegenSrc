// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Oculus.Interaction.IActiveState
#include "Oculus/Interaction/IActiveState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: GameObjectActiveState
  class GameObjectActiveState;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::GameObjectActiveState);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::GameObjectActiveState*, "Oculus.Interaction", "GameObjectActiveState");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x29
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.GameObjectActiveState
  // [TokenAttribute] Offset: FFFFFFFF
  class GameObjectActiveState : public ::UnityEngine::MonoBehaviour/*, public ::Oculus::Interaction::IActiveState*/ {
    public:
    public:
    // private UnityEngine.GameObject _sourceGameObject
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::GameObject* sourceGameObject;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private System.Boolean _sourceActiveSelf
    // Size: 0x1
    // Offset: 0x28
    bool sourceActiveSelf;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::IActiveState
    operator ::Oculus::Interaction::IActiveState() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::IActiveState*>(this);
    }
    // Get instance field reference: private UnityEngine.GameObject _sourceGameObject
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn__sourceGameObject();
    // Get instance field reference: private System.Boolean _sourceActiveSelf
    [[deprecated("Use field access instead!")]] bool& dyn__sourceActiveSelf();
    // public System.Boolean get_SourceActiveSelf()
    // Offset: 0x4783100
    bool get_SourceActiveSelf();
    // public System.Void set_SourceActiveSelf(System.Boolean value)
    // Offset: 0x4783108
    void set_SourceActiveSelf(bool value);
    // protected System.Void Start()
    // Offset: 0x4783114
    void Start();
    // public System.Boolean get_Active()
    // Offset: 0x4783118
    bool get_Active();
    // public System.Void InjectAllGameObjectActiveState(UnityEngine.GameObject sourceGameObject)
    // Offset: 0x478314C
    void InjectAllGameObjectActiveState(::UnityEngine::GameObject* sourceGameObject);
    // public System.Void InjectSourceGameObject(UnityEngine.GameObject sourceGameObject)
    // Offset: 0x4783154
    void InjectSourceGameObject(::UnityEngine::GameObject* sourceGameObject);
    // public System.Void .ctor()
    // Offset: 0x478315C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GameObjectActiveState* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::GameObjectActiveState::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GameObjectActiveState*, creationType>()));
    }
  }; // Oculus.Interaction.GameObjectActiveState
  #pragma pack(pop)
  static check_size<sizeof(GameObjectActiveState), 40 + sizeof(bool)> __Oculus_Interaction_GameObjectActiveStateSizeCheck;
  static_assert(sizeof(GameObjectActiveState) == 0x29);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::GameObjectActiveState::get_SourceActiveSelf
// Il2CppName: get_SourceActiveSelf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::GameObjectActiveState::*)()>(&Oculus::Interaction::GameObjectActiveState::get_SourceActiveSelf)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::GameObjectActiveState*), "get_SourceActiveSelf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::GameObjectActiveState::set_SourceActiveSelf
// Il2CppName: set_SourceActiveSelf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::GameObjectActiveState::*)(bool)>(&Oculus::Interaction::GameObjectActiveState::set_SourceActiveSelf)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::GameObjectActiveState*), "set_SourceActiveSelf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::GameObjectActiveState::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::GameObjectActiveState::*)()>(&Oculus::Interaction::GameObjectActiveState::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::GameObjectActiveState*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::GameObjectActiveState::get_Active
// Il2CppName: get_Active
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::GameObjectActiveState::*)()>(&Oculus::Interaction::GameObjectActiveState::get_Active)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::GameObjectActiveState*), "get_Active", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::GameObjectActiveState::InjectAllGameObjectActiveState
// Il2CppName: InjectAllGameObjectActiveState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::GameObjectActiveState::*)(::UnityEngine::GameObject*)>(&Oculus::Interaction::GameObjectActiveState::InjectAllGameObjectActiveState)> {
  static const MethodInfo* get() {
    static auto* sourceGameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::GameObjectActiveState*), "InjectAllGameObjectActiveState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sourceGameObject});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::GameObjectActiveState::InjectSourceGameObject
// Il2CppName: InjectSourceGameObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::GameObjectActiveState::*)(::UnityEngine::GameObject*)>(&Oculus::Interaction::GameObjectActiveState::InjectSourceGameObject)> {
  static const MethodInfo* get() {
    static auto* sourceGameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::GameObjectActiveState*), "InjectSourceGameObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sourceGameObject});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::GameObjectActiveState::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
