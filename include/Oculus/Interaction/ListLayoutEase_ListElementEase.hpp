// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Oculus.Interaction.ListLayoutEase
#include "Oculus/Interaction/ListLayoutEase.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::ListLayoutEase::ListElementEase);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::ListLayoutEase::ListElementEase*, "Oculus.Interaction", "ListLayoutEase/ListElementEase");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x2C
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.ListLayoutEase/ListElementEase
  // [TokenAttribute] Offset: FFFFFFFF
  class ListLayoutEase::ListElementEase : public ::Il2CppObject {
    public:
    public:
    // private UnityEngine.AnimationCurve _curve
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::AnimationCurve* curve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // private System.Single _curveTime
    // Size: 0x4
    // Offset: 0x18
    float curveTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _startTime
    // Size: 0x4
    // Offset: 0x1C
    float startTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _start
    // Size: 0x4
    // Offset: 0x20
    float start;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _target
    // Size: 0x4
    // Offset: 0x24
    float target;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single position
    // Size: 0x4
    // Offset: 0x28
    float position;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: private UnityEngine.AnimationCurve _curve
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn__curve();
    // Get instance field reference: private System.Single _curveTime
    [[deprecated("Use field access instead!")]] float& dyn__curveTime();
    // Get instance field reference: private System.Single _startTime
    [[deprecated("Use field access instead!")]] float& dyn__startTime();
    // Get instance field reference: private System.Single _start
    [[deprecated("Use field access instead!")]] float& dyn__start();
    // Get instance field reference: private System.Single _target
    [[deprecated("Use field access instead!")]] float& dyn__target();
    // Get instance field reference: public System.Single position
    [[deprecated("Use field access instead!")]] float& dyn_position();
    // public System.Void .ctor(UnityEngine.AnimationCurve curve, System.Single easeTime, System.Single position)
    // Offset: 0x47B866C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ListLayoutEase::ListElementEase* New_ctor(::UnityEngine::AnimationCurve* curve, float easeTime, float position) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::ListLayoutEase::ListElementEase::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ListLayoutEase::ListElementEase*, creationType>(curve, easeTime, position)));
    }
    // public System.Void SetTarget(System.Single target, System.Single time, System.Boolean skipEase)
    // Offset: 0x47B8760
    void SetTarget(float target, float time, bool skipEase);
    // public System.Void UpdateTime(System.Single time)
    // Offset: 0x47B8954
    void UpdateTime(float time);
  }; // Oculus.Interaction.ListLayoutEase/ListElementEase
  #pragma pack(pop)
  static check_size<sizeof(ListLayoutEase::ListElementEase), 40 + sizeof(float)> __Oculus_Interaction_ListLayoutEase_ListElementEaseSizeCheck;
  static_assert(sizeof(ListLayoutEase::ListElementEase) == 0x2C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::ListLayoutEase::ListElementEase::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Interaction::ListLayoutEase::ListElementEase::SetTarget
// Il2CppName: SetTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ListLayoutEase::ListElementEase::*)(float, float, bool)>(&Oculus::Interaction::ListLayoutEase::ListElementEase::SetTarget)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* skipEase = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ListLayoutEase::ListElementEase*), "SetTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target, time, skipEase});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ListLayoutEase::ListElementEase::UpdateTime
// Il2CppName: UpdateTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ListLayoutEase::ListElementEase::*)(float)>(&Oculus::Interaction::ListLayoutEase::ListElementEase::UpdateTime)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ListLayoutEase::ListElementEase*), "UpdateTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time});
  }
};
