// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Oculus.Interaction.IEvent
#include "Oculus/Interaction/IEvent.hpp"
// Including type: Oculus.Interaction.PointerEventType
#include "Oculus/Interaction/PointerEventType.hpp"
// Including type: UnityEngine.Pose
#include "UnityEngine/Pose.hpp"
// Completed includes
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: PointerEvent
  struct PointerEvent;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::PointerEvent, "Oculus.Interaction", "PointerEvent");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x30
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Oculus.Interaction.PointerEvent
  // [TokenAttribute] Offset: FFFFFFFF
  struct PointerEvent/*, public ::System::ValueType, public ::Oculus::Interaction::IEvent*/ {
    public:
    public:
    // private readonly System.Int32 <Identifier>k__BackingField
    // Size: 0x4
    // Offset: 0x0
    int Identifier;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly Oculus.Interaction.PointerEventType <Type>k__BackingField
    // Size: 0x4
    // Offset: 0x4
    ::Oculus::Interaction::PointerEventType Type;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::PointerEventType) == 0x4);
    // private readonly UnityEngine.Pose <Pose>k__BackingField
    // Size: 0x1C
    // Offset: 0x8
    ::UnityEngine::Pose Pose;
    // Field size check
    static_assert(sizeof(::UnityEngine::Pose) == 0x1C);
    // Padding between fields: Pose and: Data
    char __padding2[0x4] = {};
    // private readonly System.Object <Data>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    ::Il2CppObject* Data;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    public:
    // Creating value type constructor for type: PointerEvent
    constexpr PointerEvent(int Identifier_ = {}, ::Oculus::Interaction::PointerEventType Type_ = {}, ::UnityEngine::Pose Pose_ = {}, ::Il2CppObject* Data_ = {}) noexcept : Identifier{Identifier_}, Type{Type_}, Pose{Pose_}, Data{Data_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::Oculus::Interaction::IEvent
    operator ::Oculus::Interaction::IEvent() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::IEvent*>(this);
    }
    // Get instance field reference: private readonly System.Int32 <Identifier>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$Identifier$k__BackingField();
    // Get instance field reference: private readonly Oculus.Interaction.PointerEventType <Type>k__BackingField
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::PointerEventType& dyn_$Type$k__BackingField();
    // Get instance field reference: private readonly UnityEngine.Pose <Pose>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Pose& dyn_$Pose$k__BackingField();
    // Get instance field reference: private readonly System.Object <Data>k__BackingField
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_$Data$k__BackingField();
    // public System.Int32 get_Identifier()
    // Offset: 0x47C2720
    int get_Identifier();
    // public Oculus.Interaction.PointerEventType get_Type()
    // Offset: 0x47C2728
    ::Oculus::Interaction::PointerEventType get_Type();
    // public UnityEngine.Pose get_Pose()
    // Offset: 0x47C2730
    ::UnityEngine::Pose get_Pose();
    // public System.Object get_Data()
    // Offset: 0x47C2744
    ::Il2CppObject* get_Data();
    // public System.Void .ctor(System.Int32 identifier, Oculus.Interaction.PointerEventType type, UnityEngine.Pose pose, System.Object data)
    // Offset: 0x47C274C
    // ABORTED: conflicts with another method.  PointerEvent(int identifier, ::Oculus::Interaction::PointerEventType type, ::UnityEngine::Pose pose, ::Il2CppObject* data);
  }; // Oculus.Interaction.PointerEvent
  #pragma pack(pop)
  static check_size<sizeof(PointerEvent), 40 + sizeof(::Il2CppObject*)> __Oculus_Interaction_PointerEventSizeCheck;
  static_assert(sizeof(PointerEvent) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::PointerEvent::get_Identifier
// Il2CppName: get_Identifier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Oculus::Interaction::PointerEvent::*)()>(&Oculus::Interaction::PointerEvent::get_Identifier)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointerEvent), "get_Identifier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointerEvent::get_Type
// Il2CppName: get_Type
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::PointerEventType (Oculus::Interaction::PointerEvent::*)()>(&Oculus::Interaction::PointerEvent::get_Type)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointerEvent), "get_Type", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointerEvent::get_Pose
// Il2CppName: get_Pose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Pose (Oculus::Interaction::PointerEvent::*)()>(&Oculus::Interaction::PointerEvent::get_Pose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointerEvent), "get_Pose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointerEvent::get_Data
// Il2CppName: get_Data
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (Oculus::Interaction::PointerEvent::*)()>(&Oculus::Interaction::PointerEvent::get_Data)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointerEvent), "get_Data", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointerEvent::PointerEvent
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
