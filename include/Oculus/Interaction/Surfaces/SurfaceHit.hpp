// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Completed includes
// Type namespace: Oculus.Interaction.Surfaces
namespace Oculus::Interaction::Surfaces {
  // Forward declaring type: SurfaceHit
  struct SurfaceHit;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Surfaces::SurfaceHit, "Oculus.Interaction.Surfaces", "SurfaceHit");
// Type namespace: Oculus.Interaction.Surfaces
namespace Oculus::Interaction::Surfaces {
  // Size: 0x1C
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Oculus.Interaction.Surfaces.SurfaceHit
  // [TokenAttribute] Offset: FFFFFFFF
  struct SurfaceHit/*, public ::System::ValueType*/ {
    public:
    public:
    // private UnityEngine.Vector3 <Point>k__BackingField
    // Size: 0xC
    // Offset: 0x0
    ::UnityEngine::Vector3 Point;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 <Normal>k__BackingField
    // Size: 0xC
    // Offset: 0xC
    ::UnityEngine::Vector3 Normal;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Single <Distance>k__BackingField
    // Size: 0x4
    // Offset: 0x18
    float Distance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating value type constructor for type: SurfaceHit
    constexpr SurfaceHit(::UnityEngine::Vector3 Point_ = {}, ::UnityEngine::Vector3 Normal_ = {}, float Distance_ = {}) noexcept : Point{Point_}, Normal{Normal_}, Distance{Distance_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private UnityEngine.Vector3 <Point>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_$Point$k__BackingField();
    // Get instance field reference: private UnityEngine.Vector3 <Normal>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_$Normal$k__BackingField();
    // Get instance field reference: private System.Single <Distance>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$Distance$k__BackingField();
    // public UnityEngine.Vector3 get_Point()
    // Offset: 0x4803E08
    ::UnityEngine::Vector3 get_Point();
    // public System.Void set_Point(UnityEngine.Vector3 value)
    // Offset: 0x4803E14
    void set_Point(::UnityEngine::Vector3 value);
    // public UnityEngine.Vector3 get_Normal()
    // Offset: 0x4803E20
    ::UnityEngine::Vector3 get_Normal();
    // public System.Void set_Normal(UnityEngine.Vector3 value)
    // Offset: 0x4803E2C
    void set_Normal(::UnityEngine::Vector3 value);
    // public System.Single get_Distance()
    // Offset: 0x4803E38
    float get_Distance();
    // public System.Void set_Distance(System.Single value)
    // Offset: 0x4803E40
    void set_Distance(float value);
  }; // Oculus.Interaction.Surfaces.SurfaceHit
  #pragma pack(pop)
  static check_size<sizeof(SurfaceHit), 24 + sizeof(float)> __Oculus_Interaction_Surfaces_SurfaceHitSizeCheck;
  static_assert(sizeof(SurfaceHit) == 0x1C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::SurfaceHit::get_Point
// Il2CppName: get_Point
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Oculus::Interaction::Surfaces::SurfaceHit::*)()>(&Oculus::Interaction::Surfaces::SurfaceHit::get_Point)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::SurfaceHit), "get_Point", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::SurfaceHit::set_Point
// Il2CppName: set_Point
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Surfaces::SurfaceHit::*)(::UnityEngine::Vector3)>(&Oculus::Interaction::Surfaces::SurfaceHit::set_Point)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::SurfaceHit), "set_Point", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::SurfaceHit::get_Normal
// Il2CppName: get_Normal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Oculus::Interaction::Surfaces::SurfaceHit::*)()>(&Oculus::Interaction::Surfaces::SurfaceHit::get_Normal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::SurfaceHit), "get_Normal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::SurfaceHit::set_Normal
// Il2CppName: set_Normal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Surfaces::SurfaceHit::*)(::UnityEngine::Vector3)>(&Oculus::Interaction::Surfaces::SurfaceHit::set_Normal)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::SurfaceHit), "set_Normal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::SurfaceHit::get_Distance
// Il2CppName: get_Distance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::Surfaces::SurfaceHit::*)()>(&Oculus::Interaction::Surfaces::SurfaceHit::get_Distance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::SurfaceHit), "get_Distance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::SurfaceHit::set_Distance
// Il2CppName: set_Distance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Surfaces::SurfaceHit::*)(float)>(&Oculus::Interaction::Surfaces::SurfaceHit::set_Distance)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::SurfaceHit), "set_Distance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
