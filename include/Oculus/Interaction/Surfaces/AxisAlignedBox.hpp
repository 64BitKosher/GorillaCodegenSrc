// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Oculus.Interaction.Surfaces.ISurface
#include "Oculus/Interaction/Surfaces/ISurface.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Bounds
  struct Bounds;
  // Forward declaring type: Ray
  struct Ray;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: Oculus::Interaction::Surfaces
namespace Oculus::Interaction::Surfaces {
  // Forward declaring type: SurfaceHit
  struct SurfaceHit;
  // Skipping declaration: BoxSurface because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Nullable`1<T>
  template<typename T>
  struct Nullable_1;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.Surfaces
namespace Oculus::Interaction::Surfaces {
  // Forward declaring type: AxisAlignedBox
  class AxisAlignedBox;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Surfaces::AxisAlignedBox);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Surfaces::AxisAlignedBox*, "Oculus.Interaction.Surfaces", "AxisAlignedBox");
// Type namespace: Oculus.Interaction.Surfaces
namespace Oculus::Interaction::Surfaces {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.Surfaces.AxisAlignedBox
  // [TokenAttribute] Offset: FFFFFFFF
  class AxisAlignedBox : public ::UnityEngine::MonoBehaviour/*, public ::Oculus::Interaction::Surfaces::ISurface*/ {
    public:
    // Nested type: ::Oculus::Interaction::Surfaces::AxisAlignedBox::BoxSurface
    struct BoxSurface;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Oculus.Interaction.Surfaces.AxisAlignedBox/BoxSurface
    // [TokenAttribute] Offset: FFFFFFFF
    struct BoxSurface/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: BoxSurface
      constexpr BoxSurface(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Oculus.Interaction.Surfaces.AxisAlignedBox/BoxSurface XMin
      static constexpr const int XMin = 0;
      // Get static field: static public Oculus.Interaction.Surfaces.AxisAlignedBox/BoxSurface XMin
      static ::Oculus::Interaction::Surfaces::AxisAlignedBox::BoxSurface _get_XMin();
      // Set static field: static public Oculus.Interaction.Surfaces.AxisAlignedBox/BoxSurface XMin
      static void _set_XMin(::Oculus::Interaction::Surfaces::AxisAlignedBox::BoxSurface value);
      // static field const value: static public Oculus.Interaction.Surfaces.AxisAlignedBox/BoxSurface YMin
      static constexpr const int YMin = 1;
      // Get static field: static public Oculus.Interaction.Surfaces.AxisAlignedBox/BoxSurface YMin
      static ::Oculus::Interaction::Surfaces::AxisAlignedBox::BoxSurface _get_YMin();
      // Set static field: static public Oculus.Interaction.Surfaces.AxisAlignedBox/BoxSurface YMin
      static void _set_YMin(::Oculus::Interaction::Surfaces::AxisAlignedBox::BoxSurface value);
      // static field const value: static public Oculus.Interaction.Surfaces.AxisAlignedBox/BoxSurface ZMin
      static constexpr const int ZMin = 2;
      // Get static field: static public Oculus.Interaction.Surfaces.AxisAlignedBox/BoxSurface ZMin
      static ::Oculus::Interaction::Surfaces::AxisAlignedBox::BoxSurface _get_ZMin();
      // Set static field: static public Oculus.Interaction.Surfaces.AxisAlignedBox/BoxSurface ZMin
      static void _set_ZMin(::Oculus::Interaction::Surfaces::AxisAlignedBox::BoxSurface value);
      // static field const value: static public Oculus.Interaction.Surfaces.AxisAlignedBox/BoxSurface XMax
      static constexpr const int XMax = 3;
      // Get static field: static public Oculus.Interaction.Surfaces.AxisAlignedBox/BoxSurface XMax
      static ::Oculus::Interaction::Surfaces::AxisAlignedBox::BoxSurface _get_XMax();
      // Set static field: static public Oculus.Interaction.Surfaces.AxisAlignedBox/BoxSurface XMax
      static void _set_XMax(::Oculus::Interaction::Surfaces::AxisAlignedBox::BoxSurface value);
      // static field const value: static public Oculus.Interaction.Surfaces.AxisAlignedBox/BoxSurface YMax
      static constexpr const int YMax = 4;
      // Get static field: static public Oculus.Interaction.Surfaces.AxisAlignedBox/BoxSurface YMax
      static ::Oculus::Interaction::Surfaces::AxisAlignedBox::BoxSurface _get_YMax();
      // Set static field: static public Oculus.Interaction.Surfaces.AxisAlignedBox/BoxSurface YMax
      static void _set_YMax(::Oculus::Interaction::Surfaces::AxisAlignedBox::BoxSurface value);
      // static field const value: static public Oculus.Interaction.Surfaces.AxisAlignedBox/BoxSurface ZMax
      static constexpr const int ZMax = 5;
      // Get static field: static public Oculus.Interaction.Surfaces.AxisAlignedBox/BoxSurface ZMax
      static ::Oculus::Interaction::Surfaces::AxisAlignedBox::BoxSurface _get_ZMax();
      // Set static field: static public Oculus.Interaction.Surfaces.AxisAlignedBox/BoxSurface ZMax
      static void _set_ZMax(::Oculus::Interaction::Surfaces::AxisAlignedBox::BoxSurface value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Oculus.Interaction.Surfaces.AxisAlignedBox/BoxSurface
    #pragma pack(pop)
    static check_size<sizeof(AxisAlignedBox::BoxSurface), 0 + sizeof(int)> __Oculus_Interaction_Surfaces_AxisAlignedBox_BoxSurfaceSizeCheck;
    static_assert(sizeof(AxisAlignedBox::BoxSurface) == 0x4);
    public:
    // private UnityEngine.Vector3 _size
    // Size: 0xC
    // Offset: 0x20
    ::UnityEngine::Vector3 size;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // Padding between fields: size and: distances
    char __padding0[0x4] = {};
    // private readonly System.Collections.Generic.Dictionary`2<Oculus.Interaction.Surfaces.AxisAlignedBox/BoxSurface,System.Single> _distances
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::Dictionary_2<::Oculus::Interaction::Surfaces::AxisAlignedBox::BoxSurface, float>* distances;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::Oculus::Interaction::Surfaces::AxisAlignedBox::BoxSurface, float>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::Surfaces::ISurface
    operator ::Oculus::Interaction::Surfaces::ISurface() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::Surfaces::ISurface*>(this);
    }
    // Get instance field reference: private UnityEngine.Vector3 _size
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__size();
    // Get instance field reference: private readonly System.Collections.Generic.Dictionary`2<Oculus.Interaction.Surfaces.AxisAlignedBox/BoxSurface,System.Single> _distances
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::Oculus::Interaction::Surfaces::AxisAlignedBox::BoxSurface, float>*& dyn__distances();
    // public UnityEngine.Vector3 get_Size()
    // Offset: 0x47FF4A0
    ::UnityEngine::Vector3 get_Size();
    // public System.Void set_Size(UnityEngine.Vector3 value)
    // Offset: 0x47FF4AC
    void set_Size(::UnityEngine::Vector3 value);
    // public UnityEngine.Transform get_Transform()
    // Offset: 0x47FF4B8
    ::UnityEngine::Transform* get_Transform();
    // public UnityEngine.Bounds get_Bounds()
    // Offset: 0x47FF4C0
    ::UnityEngine::Bounds get_Bounds();
    // public System.Boolean ClosestSurfacePoint(in UnityEngine.Vector3 point, out Oculus.Interaction.Surfaces.SurfaceHit hit, System.Single maxDistance)
    // Offset: 0x47FF51C
    bool ClosestSurfacePoint(ByRef<::UnityEngine::Vector3> point, ByRef<::Oculus::Interaction::Surfaces::SurfaceHit> hit, float maxDistance);
    // public System.Boolean Raycast(in UnityEngine.Ray ray, out Oculus.Interaction.Surfaces.SurfaceHit hit, System.Single maxDistance)
    // Offset: 0x47FFC9C
    bool Raycast(ByRef<::UnityEngine::Ray> ray, ByRef<::Oculus::Interaction::Surfaces::SurfaceHit> hit, float maxDistance);
    // protected System.Void Start()
    // Offset: 0x47FFE64
    void Start();
    // private System.Boolean IsWithinVolume(UnityEngine.Vector3 point)
    // Offset: 0x47FFC40
    bool IsWithinVolume(::UnityEngine::Vector3 point);
    // private Oculus.Interaction.Surfaces.AxisAlignedBox/BoxSurface FindClosestBoxSide(UnityEngine.Vector3 point)
    // Offset: 0x47FF880
    ::Oculus::Interaction::Surfaces::AxisAlignedBox::BoxSurface FindClosestBoxSide(::UnityEngine::Vector3 point);
    // private UnityEngine.Vector3 ClosestSurfaceNormal(UnityEngine.Vector3 point, System.Nullable`1<Oculus.Interaction.Surfaces.AxisAlignedBox/BoxSurface> side)
    // Offset: 0x47FFB58
    ::UnityEngine::Vector3 ClosestSurfaceNormal(::UnityEngine::Vector3 point, ::System::Nullable_1<::Oculus::Interaction::Surfaces::AxisAlignedBox::BoxSurface> side);
    // public System.Void .ctor()
    // Offset: 0x47FFFF8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AxisAlignedBox* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Surfaces::AxisAlignedBox::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AxisAlignedBox*, creationType>()));
    }
    // private System.Boolean Oculus.Interaction.Surfaces.ISurface.Raycast(in UnityEngine.Ray ray, out Oculus.Interaction.Surfaces.SurfaceHit hit, System.Single maxDistance)
    // Offset: 0x480011C
    bool Oculus_Interaction_Surfaces_ISurface_Raycast(ByRef<::UnityEngine::Ray> ray, ByRef<::Oculus::Interaction::Surfaces::SurfaceHit> hit, float maxDistance);
    // private System.Boolean Oculus.Interaction.Surfaces.ISurface.ClosestSurfacePoint(in UnityEngine.Vector3 point, out Oculus.Interaction.Surfaces.SurfaceHit hit, System.Single maxDistance)
    // Offset: 0x4800120
    bool Oculus_Interaction_Surfaces_ISurface_ClosestSurfacePoint(ByRef<::UnityEngine::Vector3> point, ByRef<::Oculus::Interaction::Surfaces::SurfaceHit> hit, float maxDistance);
  }; // Oculus.Interaction.Surfaces.AxisAlignedBox
  #pragma pack(pop)
  static check_size<sizeof(AxisAlignedBox), 48 + sizeof(::System::Collections::Generic::Dictionary_2<::Oculus::Interaction::Surfaces::AxisAlignedBox::BoxSurface, float>*)> __Oculus_Interaction_Surfaces_AxisAlignedBoxSizeCheck;
  static_assert(sizeof(AxisAlignedBox) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Surfaces::AxisAlignedBox::BoxSurface, "Oculus.Interaction.Surfaces", "AxisAlignedBox/BoxSurface");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::AxisAlignedBox::get_Size
// Il2CppName: get_Size
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Oculus::Interaction::Surfaces::AxisAlignedBox::*)()>(&Oculus::Interaction::Surfaces::AxisAlignedBox::get_Size)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::AxisAlignedBox*), "get_Size", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::AxisAlignedBox::set_Size
// Il2CppName: set_Size
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Surfaces::AxisAlignedBox::*)(::UnityEngine::Vector3)>(&Oculus::Interaction::Surfaces::AxisAlignedBox::set_Size)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::AxisAlignedBox*), "set_Size", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::AxisAlignedBox::get_Transform
// Il2CppName: get_Transform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (Oculus::Interaction::Surfaces::AxisAlignedBox::*)()>(&Oculus::Interaction::Surfaces::AxisAlignedBox::get_Transform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::AxisAlignedBox*), "get_Transform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::AxisAlignedBox::get_Bounds
// Il2CppName: get_Bounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Bounds (Oculus::Interaction::Surfaces::AxisAlignedBox::*)()>(&Oculus::Interaction::Surfaces::AxisAlignedBox::get_Bounds)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::AxisAlignedBox*), "get_Bounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::AxisAlignedBox::ClosestSurfacePoint
// Il2CppName: ClosestSurfacePoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Surfaces::AxisAlignedBox::*)(ByRef<::UnityEngine::Vector3>, ByRef<::Oculus::Interaction::Surfaces::SurfaceHit>, float)>(&Oculus::Interaction::Surfaces::AxisAlignedBox::ClosestSurfacePoint)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* hit = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Surfaces", "SurfaceHit")->this_arg;
    static auto* maxDistance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::AxisAlignedBox*), "ClosestSurfacePoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point, hit, maxDistance});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::AxisAlignedBox::Raycast
// Il2CppName: Raycast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Surfaces::AxisAlignedBox::*)(ByRef<::UnityEngine::Ray>, ByRef<::Oculus::Interaction::Surfaces::SurfaceHit>, float)>(&Oculus::Interaction::Surfaces::AxisAlignedBox::Raycast)> {
  static const MethodInfo* get() {
    static auto* ray = &::il2cpp_utils::GetClassFromName("UnityEngine", "Ray")->this_arg;
    static auto* hit = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Surfaces", "SurfaceHit")->this_arg;
    static auto* maxDistance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::AxisAlignedBox*), "Raycast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ray, hit, maxDistance});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::AxisAlignedBox::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Surfaces::AxisAlignedBox::*)()>(&Oculus::Interaction::Surfaces::AxisAlignedBox::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::AxisAlignedBox*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::AxisAlignedBox::IsWithinVolume
// Il2CppName: IsWithinVolume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Surfaces::AxisAlignedBox::*)(::UnityEngine::Vector3)>(&Oculus::Interaction::Surfaces::AxisAlignedBox::IsWithinVolume)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::AxisAlignedBox*), "IsWithinVolume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::AxisAlignedBox::FindClosestBoxSide
// Il2CppName: FindClosestBoxSide
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Surfaces::AxisAlignedBox::BoxSurface (Oculus::Interaction::Surfaces::AxisAlignedBox::*)(::UnityEngine::Vector3)>(&Oculus::Interaction::Surfaces::AxisAlignedBox::FindClosestBoxSide)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::AxisAlignedBox*), "FindClosestBoxSide", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::AxisAlignedBox::ClosestSurfaceNormal
// Il2CppName: ClosestSurfaceNormal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Oculus::Interaction::Surfaces::AxisAlignedBox::*)(::UnityEngine::Vector3, ::System::Nullable_1<::Oculus::Interaction::Surfaces::AxisAlignedBox::BoxSurface>)>(&Oculus::Interaction::Surfaces::AxisAlignedBox::ClosestSurfaceNormal)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* side = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Interaction.Surfaces", "AxisAlignedBox/BoxSurface")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::AxisAlignedBox*), "ClosestSurfaceNormal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point, side});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::AxisAlignedBox::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::AxisAlignedBox::Oculus_Interaction_Surfaces_ISurface_Raycast
// Il2CppName: Oculus.Interaction.Surfaces.ISurface.Raycast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Surfaces::AxisAlignedBox::*)(ByRef<::UnityEngine::Ray>, ByRef<::Oculus::Interaction::Surfaces::SurfaceHit>, float)>(&Oculus::Interaction::Surfaces::AxisAlignedBox::Oculus_Interaction_Surfaces_ISurface_Raycast)> {
  static const MethodInfo* get() {
    static auto* ray = &::il2cpp_utils::GetClassFromName("UnityEngine", "Ray")->this_arg;
    static auto* hit = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Surfaces", "SurfaceHit")->this_arg;
    static auto* maxDistance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::AxisAlignedBox*), "Oculus.Interaction.Surfaces.ISurface.Raycast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ray, hit, maxDistance});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::AxisAlignedBox::Oculus_Interaction_Surfaces_ISurface_ClosestSurfacePoint
// Il2CppName: Oculus.Interaction.Surfaces.ISurface.ClosestSurfacePoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Surfaces::AxisAlignedBox::*)(ByRef<::UnityEngine::Vector3>, ByRef<::Oculus::Interaction::Surfaces::SurfaceHit>, float)>(&Oculus::Interaction::Surfaces::AxisAlignedBox::Oculus_Interaction_Surfaces_ISurface_ClosestSurfacePoint)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* hit = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Surfaces", "SurfaceHit")->this_arg;
    static auto* maxDistance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::AxisAlignedBox*), "Oculus.Interaction.Surfaces.ISurface.ClosestSurfacePoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point, hit, maxDistance});
  }
};
