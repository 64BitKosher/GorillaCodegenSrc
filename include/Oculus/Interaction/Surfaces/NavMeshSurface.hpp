// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Oculus.Interaction.Surfaces.ISurface
#include "Oculus/Interaction/Surfaces/ISurface.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Skipping declaration: Vector3 because it is already included!
  // Forward declaring type: Ray
  struct Ray;
}
// Forward declaring namespace: Oculus::Interaction::Surfaces
namespace Oculus::Interaction::Surfaces {
  // Forward declaring type: SurfaceHit
  struct SurfaceHit;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.Surfaces
namespace Oculus::Interaction::Surfaces {
  // Forward declaring type: NavMeshSurface
  class NavMeshSurface;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Surfaces::NavMeshSurface);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Surfaces::NavMeshSurface*, "Oculus.Interaction.Surfaces", "NavMeshSurface");
// Type namespace: Oculus.Interaction.Surfaces
namespace Oculus::Interaction::Surfaces {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.Surfaces.NavMeshSurface
  // [TokenAttribute] Offset: FFFFFFFF
  class NavMeshSurface : public ::UnityEngine::MonoBehaviour/*, public ::Oculus::Interaction::Surfaces::ISurface*/ {
    public:
    public:
    // private System.String _areaName
    // Size: 0x8
    // Offset: 0x20
    ::StringW areaName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Single _snapDistance
    // Size: 0x4
    // Offset: 0x28
    float snapDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _voxelSize
    // Size: 0x4
    // Offset: 0x2C
    float voxelSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _calculateNormals
    // Size: 0x1
    // Offset: 0x30
    bool calculateNormals;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: calculateNormals and: areaMask
    char __padding3[0x3] = {};
    // private System.Int32 _areaMask
    // Size: 0x4
    // Offset: 0x34
    int areaMask;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::Surfaces::ISurface
    operator ::Oculus::Interaction::Surfaces::ISurface() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::Surfaces::ISurface*>(this);
    }
    // Get instance field reference: private System.String _areaName
    [[deprecated("Use field access instead!")]] ::StringW& dyn__areaName();
    // Get instance field reference: private System.Single _snapDistance
    [[deprecated("Use field access instead!")]] float& dyn__snapDistance();
    // Get instance field reference: private System.Single _voxelSize
    [[deprecated("Use field access instead!")]] float& dyn__voxelSize();
    // Get instance field reference: private System.Boolean _calculateNormals
    [[deprecated("Use field access instead!")]] bool& dyn__calculateNormals();
    // Get instance field reference: private System.Int32 _areaMask
    [[deprecated("Use field access instead!")]] int& dyn__areaMask();
    // public System.String get_AreaName()
    // Offset: 0x4803E48
    ::StringW get_AreaName();
    // public System.Void set_AreaName(System.String value)
    // Offset: 0x4803E50
    void set_AreaName(::StringW value);
    // public System.Single get_SnapDistance()
    // Offset: 0x4803E58
    float get_SnapDistance();
    // public System.Void set_SnapDistance(System.Single value)
    // Offset: 0x4803E60
    void set_SnapDistance(float value);
    // public System.Single get_VoxelSize()
    // Offset: 0x4803E68
    float get_VoxelSize();
    // public System.Void set_VoxelSize(System.Single value)
    // Offset: 0x4803E70
    void set_VoxelSize(float value);
    // public System.Boolean get_CalculateHitNormals()
    // Offset: 0x4803E80
    bool get_CalculateHitNormals();
    // public System.Void set_CalculateHitNormals(System.Boolean value)
    // Offset: 0x4803E88
    void set_CalculateHitNormals(bool value);
    // public UnityEngine.Transform get_Transform()
    // Offset: 0x4803E94
    ::UnityEngine::Transform* get_Transform();
    // protected System.Void Start()
    // Offset: 0x4803E9C
    void Start();
    // public System.Boolean ClosestSurfacePoint(in UnityEngine.Vector3 point, out Oculus.Interaction.Surfaces.SurfaceHit surfaceHit, System.Single maxDistance)
    // Offset: 0x4803EDC
    bool ClosestSurfacePoint(ByRef<::UnityEngine::Vector3> point, ByRef<::Oculus::Interaction::Surfaces::SurfaceHit> surfaceHit, float maxDistance);
    // public System.Boolean Raycast(in UnityEngine.Ray ray, out Oculus.Interaction.Surfaces.SurfaceHit surfaceHit, System.Single maxDistance)
    // Offset: 0x4803FCC
    bool Raycast(ByRef<::UnityEngine::Ray> ray, ByRef<::Oculus::Interaction::Surfaces::SurfaceHit> surfaceHit, float maxDistance);
    // private System.Boolean AlignHits(UnityEngine.Vector3 point, UnityEngine.Vector3 normal, UnityEngine.Ray ray, ref Oculus.Interaction.Surfaces.SurfaceHit surfaceHit, System.Single maxDistance)
    // Offset: 0x4804534
    bool AlignHits(::UnityEngine::Vector3 point, ::UnityEngine::Vector3 normal, ::UnityEngine::Ray ray, ByRef<::Oculus::Interaction::Surfaces::SurfaceHit> surfaceHit, float maxDistance);
    // private System.Boolean SnapSurfaceHit(ref Oculus.Interaction.Surfaces.SurfaceHit surfaceHit, UnityEngine.Vector3 navMeshPoint)
    // Offset: 0x4804738
    bool SnapSurfaceHit(ByRef<::Oculus::Interaction::Surfaces::SurfaceHit> surfaceHit, ::UnityEngine::Vector3 navMeshPoint);
    // private UnityEngine.Vector3 GetNavMeshNormal(UnityEngine.Vector3 navMeshPoint)
    // Offset: 0x48043F4
    ::UnityEngine::Vector3 GetNavMeshNormal(::UnityEngine::Vector3 navMeshPoint);
    // public System.Void .ctor()
    // Offset: 0x4804A8C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NavMeshSurface* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Surfaces::NavMeshSurface::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NavMeshSurface*, creationType>()));
    }
    // private System.Boolean Oculus.Interaction.Surfaces.ISurface.Raycast(in UnityEngine.Ray ray, out Oculus.Interaction.Surfaces.SurfaceHit hit, System.Single maxDistance)
    // Offset: 0x4804AF8
    bool Oculus_Interaction_Surfaces_ISurface_Raycast(ByRef<::UnityEngine::Ray> ray, ByRef<::Oculus::Interaction::Surfaces::SurfaceHit> hit, float maxDistance);
    // private System.Boolean Oculus.Interaction.Surfaces.ISurface.ClosestSurfacePoint(in UnityEngine.Vector3 point, out Oculus.Interaction.Surfaces.SurfaceHit hit, System.Single maxDistance)
    // Offset: 0x4804AFC
    bool Oculus_Interaction_Surfaces_ISurface_ClosestSurfacePoint(ByRef<::UnityEngine::Vector3> point, ByRef<::Oculus::Interaction::Surfaces::SurfaceHit> hit, float maxDistance);
    // private UnityEngine.Vector3 <GetNavMeshNormal>g__CalculateTangent|24_0(UnityEngine.Vector3 direction, UnityEngine.Vector3 centre)
    // Offset: 0x4804844
    ::UnityEngine::Vector3 $GetNavMeshNormal$g__CalculateTangent_24_0(::UnityEngine::Vector3 direction, ::UnityEngine::Vector3 centre);
    // private System.Boolean <GetNavMeshNormal>g__CalculateStep|24_1(UnityEngine.Vector3 centre, UnityEngine.Vector3 stepDir, out UnityEngine.Vector3 value)
    // Offset: 0x4804B00
    bool $GetNavMeshNormal$g__CalculateStep_24_1(::UnityEngine::Vector3 centre, ::UnityEngine::Vector3 stepDir, ByRef<::UnityEngine::Vector3> value);
  }; // Oculus.Interaction.Surfaces.NavMeshSurface
  #pragma pack(pop)
  static check_size<sizeof(NavMeshSurface), 52 + sizeof(int)> __Oculus_Interaction_Surfaces_NavMeshSurfaceSizeCheck;
  static_assert(sizeof(NavMeshSurface) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::NavMeshSurface::get_AreaName
// Il2CppName: get_AreaName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Oculus::Interaction::Surfaces::NavMeshSurface::*)()>(&Oculus::Interaction::Surfaces::NavMeshSurface::get_AreaName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::NavMeshSurface*), "get_AreaName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::NavMeshSurface::set_AreaName
// Il2CppName: set_AreaName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Surfaces::NavMeshSurface::*)(::StringW)>(&Oculus::Interaction::Surfaces::NavMeshSurface::set_AreaName)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::NavMeshSurface*), "set_AreaName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::NavMeshSurface::get_SnapDistance
// Il2CppName: get_SnapDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::Surfaces::NavMeshSurface::*)()>(&Oculus::Interaction::Surfaces::NavMeshSurface::get_SnapDistance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::NavMeshSurface*), "get_SnapDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::NavMeshSurface::set_SnapDistance
// Il2CppName: set_SnapDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Surfaces::NavMeshSurface::*)(float)>(&Oculus::Interaction::Surfaces::NavMeshSurface::set_SnapDistance)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::NavMeshSurface*), "set_SnapDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::NavMeshSurface::get_VoxelSize
// Il2CppName: get_VoxelSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::Surfaces::NavMeshSurface::*)()>(&Oculus::Interaction::Surfaces::NavMeshSurface::get_VoxelSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::NavMeshSurface*), "get_VoxelSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::NavMeshSurface::set_VoxelSize
// Il2CppName: set_VoxelSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Surfaces::NavMeshSurface::*)(float)>(&Oculus::Interaction::Surfaces::NavMeshSurface::set_VoxelSize)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::NavMeshSurface*), "set_VoxelSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::NavMeshSurface::get_CalculateHitNormals
// Il2CppName: get_CalculateHitNormals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Surfaces::NavMeshSurface::*)()>(&Oculus::Interaction::Surfaces::NavMeshSurface::get_CalculateHitNormals)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::NavMeshSurface*), "get_CalculateHitNormals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::NavMeshSurface::set_CalculateHitNormals
// Il2CppName: set_CalculateHitNormals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Surfaces::NavMeshSurface::*)(bool)>(&Oculus::Interaction::Surfaces::NavMeshSurface::set_CalculateHitNormals)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::NavMeshSurface*), "set_CalculateHitNormals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::NavMeshSurface::get_Transform
// Il2CppName: get_Transform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (Oculus::Interaction::Surfaces::NavMeshSurface::*)()>(&Oculus::Interaction::Surfaces::NavMeshSurface::get_Transform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::NavMeshSurface*), "get_Transform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::NavMeshSurface::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Surfaces::NavMeshSurface::*)()>(&Oculus::Interaction::Surfaces::NavMeshSurface::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::NavMeshSurface*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::NavMeshSurface::ClosestSurfacePoint
// Il2CppName: ClosestSurfacePoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Surfaces::NavMeshSurface::*)(ByRef<::UnityEngine::Vector3>, ByRef<::Oculus::Interaction::Surfaces::SurfaceHit>, float)>(&Oculus::Interaction::Surfaces::NavMeshSurface::ClosestSurfacePoint)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* surfaceHit = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Surfaces", "SurfaceHit")->this_arg;
    static auto* maxDistance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::NavMeshSurface*), "ClosestSurfacePoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point, surfaceHit, maxDistance});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::NavMeshSurface::Raycast
// Il2CppName: Raycast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Surfaces::NavMeshSurface::*)(ByRef<::UnityEngine::Ray>, ByRef<::Oculus::Interaction::Surfaces::SurfaceHit>, float)>(&Oculus::Interaction::Surfaces::NavMeshSurface::Raycast)> {
  static const MethodInfo* get() {
    static auto* ray = &::il2cpp_utils::GetClassFromName("UnityEngine", "Ray")->this_arg;
    static auto* surfaceHit = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Surfaces", "SurfaceHit")->this_arg;
    static auto* maxDistance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::NavMeshSurface*), "Raycast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ray, surfaceHit, maxDistance});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::NavMeshSurface::AlignHits
// Il2CppName: AlignHits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Surfaces::NavMeshSurface::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Ray, ByRef<::Oculus::Interaction::Surfaces::SurfaceHit>, float)>(&Oculus::Interaction::Surfaces::NavMeshSurface::AlignHits)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* normal = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* ray = &::il2cpp_utils::GetClassFromName("UnityEngine", "Ray")->byval_arg;
    static auto* surfaceHit = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Surfaces", "SurfaceHit")->this_arg;
    static auto* maxDistance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::NavMeshSurface*), "AlignHits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point, normal, ray, surfaceHit, maxDistance});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::NavMeshSurface::SnapSurfaceHit
// Il2CppName: SnapSurfaceHit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Surfaces::NavMeshSurface::*)(ByRef<::Oculus::Interaction::Surfaces::SurfaceHit>, ::UnityEngine::Vector3)>(&Oculus::Interaction::Surfaces::NavMeshSurface::SnapSurfaceHit)> {
  static const MethodInfo* get() {
    static auto* surfaceHit = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Surfaces", "SurfaceHit")->this_arg;
    static auto* navMeshPoint = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::NavMeshSurface*), "SnapSurfaceHit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{surfaceHit, navMeshPoint});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::NavMeshSurface::GetNavMeshNormal
// Il2CppName: GetNavMeshNormal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Oculus::Interaction::Surfaces::NavMeshSurface::*)(::UnityEngine::Vector3)>(&Oculus::Interaction::Surfaces::NavMeshSurface::GetNavMeshNormal)> {
  static const MethodInfo* get() {
    static auto* navMeshPoint = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::NavMeshSurface*), "GetNavMeshNormal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{navMeshPoint});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::NavMeshSurface::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::NavMeshSurface::Oculus_Interaction_Surfaces_ISurface_Raycast
// Il2CppName: Oculus.Interaction.Surfaces.ISurface.Raycast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Surfaces::NavMeshSurface::*)(ByRef<::UnityEngine::Ray>, ByRef<::Oculus::Interaction::Surfaces::SurfaceHit>, float)>(&Oculus::Interaction::Surfaces::NavMeshSurface::Oculus_Interaction_Surfaces_ISurface_Raycast)> {
  static const MethodInfo* get() {
    static auto* ray = &::il2cpp_utils::GetClassFromName("UnityEngine", "Ray")->this_arg;
    static auto* hit = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Surfaces", "SurfaceHit")->this_arg;
    static auto* maxDistance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::NavMeshSurface*), "Oculus.Interaction.Surfaces.ISurface.Raycast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ray, hit, maxDistance});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::NavMeshSurface::Oculus_Interaction_Surfaces_ISurface_ClosestSurfacePoint
// Il2CppName: Oculus.Interaction.Surfaces.ISurface.ClosestSurfacePoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Surfaces::NavMeshSurface::*)(ByRef<::UnityEngine::Vector3>, ByRef<::Oculus::Interaction::Surfaces::SurfaceHit>, float)>(&Oculus::Interaction::Surfaces::NavMeshSurface::Oculus_Interaction_Surfaces_ISurface_ClosestSurfacePoint)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* hit = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Surfaces", "SurfaceHit")->this_arg;
    static auto* maxDistance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::NavMeshSurface*), "Oculus.Interaction.Surfaces.ISurface.ClosestSurfacePoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point, hit, maxDistance});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::NavMeshSurface::$GetNavMeshNormal$g__CalculateTangent_24_0
// Il2CppName: <GetNavMeshNormal>g__CalculateTangent|24_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Oculus::Interaction::Surfaces::NavMeshSurface::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Oculus::Interaction::Surfaces::NavMeshSurface::$GetNavMeshNormal$g__CalculateTangent_24_0)> {
  static const MethodInfo* get() {
    static auto* direction = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* centre = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::NavMeshSurface*), "<GetNavMeshNormal>g__CalculateTangent|24_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{direction, centre});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::NavMeshSurface::$GetNavMeshNormal$g__CalculateStep_24_1
// Il2CppName: <GetNavMeshNormal>g__CalculateStep|24_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Surfaces::NavMeshSurface::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ByRef<::UnityEngine::Vector3>)>(&Oculus::Interaction::Surfaces::NavMeshSurface::$GetNavMeshNormal$g__CalculateStep_24_1)> {
  static const MethodInfo* get() {
    static auto* centre = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* stepDir = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::NavMeshSurface*), "<GetNavMeshNormal>g__CalculateStep|24_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{centre, stepDir, value});
  }
};
