// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Oculus.Interaction.Surfaces.ISurface
#include "Oculus/Interaction/Surfaces/ISurface.hpp"
// Including type: Oculus.Interaction.Surfaces.IBounds
#include "Oculus/Interaction/Surfaces/IBounds.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Collider
  class Collider;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Bounds
  struct Bounds;
  // Forward declaring type: Ray
  struct Ray;
  // Skipping declaration: Vector3 because it is already included!
}
// Forward declaring namespace: Oculus::Interaction::Surfaces
namespace Oculus::Interaction::Surfaces {
  // Forward declaring type: SurfaceHit
  struct SurfaceHit;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.Surfaces
namespace Oculus::Interaction::Surfaces {
  // Forward declaring type: ColliderSurface
  class ColliderSurface;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Surfaces::ColliderSurface);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Surfaces::ColliderSurface*, "Oculus.Interaction.Surfaces", "ColliderSurface");
// Type namespace: Oculus.Interaction.Surfaces
namespace Oculus::Interaction::Surfaces {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.Surfaces.ColliderSurface
  // [TokenAttribute] Offset: FFFFFFFF
  class ColliderSurface : public ::UnityEngine::MonoBehaviour/*, public ::Oculus::Interaction::Surfaces::ISurface, public ::Oculus::Interaction::Surfaces::IBounds*/ {
    public:
    public:
    // private UnityEngine.Collider _collider
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Collider* collider;
    // Field size check
    static_assert(sizeof(::UnityEngine::Collider*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::Surfaces::ISurface
    operator ::Oculus::Interaction::Surfaces::ISurface() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::Surfaces::ISurface*>(this);
    }
    // Creating interface conversion operator: operator ::Oculus::Interaction::Surfaces::IBounds
    operator ::Oculus::Interaction::Surfaces::IBounds() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::Surfaces::IBounds*>(this);
    }
    // Get instance field reference: private UnityEngine.Collider _collider
    [[deprecated("Use field access instead!")]] ::UnityEngine::Collider*& dyn__collider();
    // protected System.Void Start()
    // Offset: 0x4802944
    void Start();
    // public UnityEngine.Transform get_Transform()
    // Offset: 0x4802948
    ::UnityEngine::Transform* get_Transform();
    // public UnityEngine.Bounds get_Bounds()
    // Offset: 0x4802950
    ::UnityEngine::Bounds get_Bounds();
    // public System.Boolean Raycast(in UnityEngine.Ray ray, out Oculus.Interaction.Surfaces.SurfaceHit hit, System.Single maxDistance)
    // Offset: 0x4802990
    bool Raycast(ByRef<::UnityEngine::Ray> ray, ByRef<::Oculus::Interaction::Surfaces::SurfaceHit> hit, float maxDistance);
    // public System.Boolean ClosestSurfacePoint(in UnityEngine.Vector3 point, out Oculus.Interaction.Surfaces.SurfaceHit hit, System.Single maxDistance)
    // Offset: 0x4802A48
    bool ClosestSurfacePoint(ByRef<::UnityEngine::Vector3> point, ByRef<::Oculus::Interaction::Surfaces::SurfaceHit> hit, float maxDistance);
    // public System.Void InjectAllColliderSurface(UnityEngine.Collider collider)
    // Offset: 0x4802CB4
    void InjectAllColliderSurface(::UnityEngine::Collider* collider);
    // public System.Void InjectCollider(UnityEngine.Collider collider)
    // Offset: 0x4802CBC
    void InjectCollider(::UnityEngine::Collider* collider);
    // public System.Void .ctor()
    // Offset: 0x4802CC4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ColliderSurface* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Surfaces::ColliderSurface::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ColliderSurface*, creationType>()));
    }
    // private System.Boolean Oculus.Interaction.Surfaces.ISurface.Raycast(in UnityEngine.Ray ray, out Oculus.Interaction.Surfaces.SurfaceHit hit, System.Single maxDistance)
    // Offset: 0x4802CCC
    bool Oculus_Interaction_Surfaces_ISurface_Raycast(ByRef<::UnityEngine::Ray> ray, ByRef<::Oculus::Interaction::Surfaces::SurfaceHit> hit, float maxDistance);
    // private System.Boolean Oculus.Interaction.Surfaces.ISurface.ClosestSurfacePoint(in UnityEngine.Vector3 point, out Oculus.Interaction.Surfaces.SurfaceHit hit, System.Single maxDistance)
    // Offset: 0x4802CD0
    bool Oculus_Interaction_Surfaces_ISurface_ClosestSurfacePoint(ByRef<::UnityEngine::Vector3> point, ByRef<::Oculus::Interaction::Surfaces::SurfaceHit> hit, float maxDistance);
  }; // Oculus.Interaction.Surfaces.ColliderSurface
  #pragma pack(pop)
  static check_size<sizeof(ColliderSurface), 32 + sizeof(::UnityEngine::Collider*)> __Oculus_Interaction_Surfaces_ColliderSurfaceSizeCheck;
  static_assert(sizeof(ColliderSurface) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::ColliderSurface::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Surfaces::ColliderSurface::*)()>(&Oculus::Interaction::Surfaces::ColliderSurface::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::ColliderSurface*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::ColliderSurface::get_Transform
// Il2CppName: get_Transform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (Oculus::Interaction::Surfaces::ColliderSurface::*)()>(&Oculus::Interaction::Surfaces::ColliderSurface::get_Transform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::ColliderSurface*), "get_Transform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::ColliderSurface::get_Bounds
// Il2CppName: get_Bounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Bounds (Oculus::Interaction::Surfaces::ColliderSurface::*)()>(&Oculus::Interaction::Surfaces::ColliderSurface::get_Bounds)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::ColliderSurface*), "get_Bounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::ColliderSurface::Raycast
// Il2CppName: Raycast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Surfaces::ColliderSurface::*)(ByRef<::UnityEngine::Ray>, ByRef<::Oculus::Interaction::Surfaces::SurfaceHit>, float)>(&Oculus::Interaction::Surfaces::ColliderSurface::Raycast)> {
  static const MethodInfo* get() {
    static auto* ray = &::il2cpp_utils::GetClassFromName("UnityEngine", "Ray")->this_arg;
    static auto* hit = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Surfaces", "SurfaceHit")->this_arg;
    static auto* maxDistance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::ColliderSurface*), "Raycast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ray, hit, maxDistance});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::ColliderSurface::ClosestSurfacePoint
// Il2CppName: ClosestSurfacePoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Surfaces::ColliderSurface::*)(ByRef<::UnityEngine::Vector3>, ByRef<::Oculus::Interaction::Surfaces::SurfaceHit>, float)>(&Oculus::Interaction::Surfaces::ColliderSurface::ClosestSurfacePoint)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* hit = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Surfaces", "SurfaceHit")->this_arg;
    static auto* maxDistance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::ColliderSurface*), "ClosestSurfacePoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point, hit, maxDistance});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::ColliderSurface::InjectAllColliderSurface
// Il2CppName: InjectAllColliderSurface
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Surfaces::ColliderSurface::*)(::UnityEngine::Collider*)>(&Oculus::Interaction::Surfaces::ColliderSurface::InjectAllColliderSurface)> {
  static const MethodInfo* get() {
    static auto* collider = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::ColliderSurface*), "InjectAllColliderSurface", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{collider});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::ColliderSurface::InjectCollider
// Il2CppName: InjectCollider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Surfaces::ColliderSurface::*)(::UnityEngine::Collider*)>(&Oculus::Interaction::Surfaces::ColliderSurface::InjectCollider)> {
  static const MethodInfo* get() {
    static auto* collider = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::ColliderSurface*), "InjectCollider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{collider});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::ColliderSurface::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::ColliderSurface::Oculus_Interaction_Surfaces_ISurface_Raycast
// Il2CppName: Oculus.Interaction.Surfaces.ISurface.Raycast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Surfaces::ColliderSurface::*)(ByRef<::UnityEngine::Ray>, ByRef<::Oculus::Interaction::Surfaces::SurfaceHit>, float)>(&Oculus::Interaction::Surfaces::ColliderSurface::Oculus_Interaction_Surfaces_ISurface_Raycast)> {
  static const MethodInfo* get() {
    static auto* ray = &::il2cpp_utils::GetClassFromName("UnityEngine", "Ray")->this_arg;
    static auto* hit = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Surfaces", "SurfaceHit")->this_arg;
    static auto* maxDistance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::ColliderSurface*), "Oculus.Interaction.Surfaces.ISurface.Raycast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ray, hit, maxDistance});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::ColliderSurface::Oculus_Interaction_Surfaces_ISurface_ClosestSurfacePoint
// Il2CppName: Oculus.Interaction.Surfaces.ISurface.ClosestSurfacePoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Surfaces::ColliderSurface::*)(ByRef<::UnityEngine::Vector3>, ByRef<::Oculus::Interaction::Surfaces::SurfaceHit>, float)>(&Oculus::Interaction::Surfaces::ColliderSurface::Oculus_Interaction_Surfaces_ISurface_ClosestSurfacePoint)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* hit = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Surfaces", "SurfaceHit")->this_arg;
    static auto* maxDistance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::ColliderSurface*), "Oculus.Interaction.Surfaces.ISurface.ClosestSurfacePoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point, hit, maxDistance});
  }
};
