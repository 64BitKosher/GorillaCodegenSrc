// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Oculus.Interaction.Surfaces.ISurface
#include "Oculus/Interaction/Surfaces/ISurface.hpp"
// Including type: Oculus.Interaction.Surfaces.IBounds
#include "Oculus/Interaction/Surfaces/IBounds.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Bounds
  struct Bounds;
  // Skipping declaration: Vector3 because it is already included!
  // Forward declaring type: Ray
  struct Ray;
}
// Forward declaring namespace: Oculus::Interaction
namespace Oculus::Interaction {
  // Forward declaring type: Cylinder
  class Cylinder;
}
// Forward declaring namespace: Oculus::Interaction::Surfaces
namespace Oculus::Interaction::Surfaces {
  // Skipping declaration: NormalFacing because it is already included!
  // Forward declaring type: SurfaceHit
  struct SurfaceHit;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.Surfaces
namespace Oculus::Interaction::Surfaces {
  // Forward declaring type: CylinderSurface
  class CylinderSurface;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Surfaces::CylinderSurface);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Surfaces::CylinderSurface*, "Oculus.Interaction.Surfaces", "CylinderSurface");
// Type namespace: Oculus.Interaction.Surfaces
namespace Oculus::Interaction::Surfaces {
  // Size: 0x31
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.Surfaces.CylinderSurface
  // [TokenAttribute] Offset: FFFFFFFF
  class CylinderSurface : public ::UnityEngine::MonoBehaviour/*, public ::Oculus::Interaction::Surfaces::ISurface, public ::Oculus::Interaction::Surfaces::IBounds*/ {
    public:
    // Nested type: ::Oculus::Interaction::Surfaces::CylinderSurface::NormalFacing
    struct NormalFacing;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Oculus.Interaction.Surfaces.CylinderSurface/NormalFacing
    // [TokenAttribute] Offset: FFFFFFFF
    struct NormalFacing/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: NormalFacing
      constexpr NormalFacing(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Oculus.Interaction.Surfaces.CylinderSurface/NormalFacing Any
      static constexpr const int Any = 0;
      // Get static field: static public Oculus.Interaction.Surfaces.CylinderSurface/NormalFacing Any
      static ::Oculus::Interaction::Surfaces::CylinderSurface::NormalFacing _get_Any();
      // Set static field: static public Oculus.Interaction.Surfaces.CylinderSurface/NormalFacing Any
      static void _set_Any(::Oculus::Interaction::Surfaces::CylinderSurface::NormalFacing value);
      // static field const value: static public Oculus.Interaction.Surfaces.CylinderSurface/NormalFacing In
      static constexpr const int In = 1;
      // Get static field: static public Oculus.Interaction.Surfaces.CylinderSurface/NormalFacing In
      static ::Oculus::Interaction::Surfaces::CylinderSurface::NormalFacing _get_In();
      // Set static field: static public Oculus.Interaction.Surfaces.CylinderSurface/NormalFacing In
      static void _set_In(::Oculus::Interaction::Surfaces::CylinderSurface::NormalFacing value);
      // static field const value: static public Oculus.Interaction.Surfaces.CylinderSurface/NormalFacing Out
      static constexpr const int Out = 2;
      // Get static field: static public Oculus.Interaction.Surfaces.CylinderSurface/NormalFacing Out
      static ::Oculus::Interaction::Surfaces::CylinderSurface::NormalFacing _get_Out();
      // Set static field: static public Oculus.Interaction.Surfaces.CylinderSurface/NormalFacing Out
      static void _set_Out(::Oculus::Interaction::Surfaces::CylinderSurface::NormalFacing value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Oculus.Interaction.Surfaces.CylinderSurface/NormalFacing
    #pragma pack(pop)
    static check_size<sizeof(CylinderSurface::NormalFacing), 0 + sizeof(int)> __Oculus_Interaction_Surfaces_CylinderSurface_NormalFacingSizeCheck;
    static_assert(sizeof(CylinderSurface::NormalFacing) == 0x4);
    public:
    // private Oculus.Interaction.Cylinder _cylinder
    // Size: 0x8
    // Offset: 0x20
    ::Oculus::Interaction::Cylinder* cylinder;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Cylinder*) == 0x8);
    // private Oculus.Interaction.Surfaces.CylinderSurface/NormalFacing _facing
    // Size: 0x4
    // Offset: 0x28
    ::Oculus::Interaction::Surfaces::CylinderSurface::NormalFacing facing;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Surfaces::CylinderSurface::NormalFacing) == 0x4);
    // private System.Single _height
    // Size: 0x4
    // Offset: 0x2C
    float height;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Boolean _started
    // Size: 0x1
    // Offset: 0x30
    bool started;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::Surfaces::ISurface
    operator ::Oculus::Interaction::Surfaces::ISurface() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::Surfaces::ISurface*>(this);
    }
    // Creating interface conversion operator: operator ::Oculus::Interaction::Surfaces::IBounds
    operator ::Oculus::Interaction::Surfaces::IBounds() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::Surfaces::IBounds*>(this);
    }
    // Get instance field reference: private Oculus.Interaction.Cylinder _cylinder
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Cylinder*& dyn__cylinder();
    // Get instance field reference: private Oculus.Interaction.Surfaces.CylinderSurface/NormalFacing _facing
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Surfaces::CylinderSurface::NormalFacing& dyn__facing();
    // Get instance field reference: private System.Single _height
    [[deprecated("Use field access instead!")]] float& dyn__height();
    // Get instance field reference: protected System.Boolean _started
    [[deprecated("Use field access instead!")]] bool& dyn__started();
    // public System.Boolean get_IsValid()
    // Offset: 0x4802D40
    bool get_IsValid();
    // public System.Single get_Radius()
    // Offset: 0x4802DC8
    float get_Radius();
    // public Oculus.Interaction.Cylinder get_Cylinder()
    // Offset: 0x4802DE4
    ::Oculus::Interaction::Cylinder* get_Cylinder();
    // public UnityEngine.Transform get_Transform()
    // Offset: 0x4800944
    ::UnityEngine::Transform* get_Transform();
    // public UnityEngine.Bounds get_Bounds()
    // Offset: 0x4802DEC
    ::UnityEngine::Bounds get_Bounds();
    // public Oculus.Interaction.Surfaces.CylinderSurface/NormalFacing get_Facing()
    // Offset: 0x4802EC8
    ::Oculus::Interaction::Surfaces::CylinderSurface::NormalFacing get_Facing();
    // public System.Void set_Facing(Oculus.Interaction.Surfaces.CylinderSurface/NormalFacing value)
    // Offset: 0x4802ED0
    void set_Facing(::Oculus::Interaction::Surfaces::CylinderSurface::NormalFacing value);
    // public System.Single get_Height()
    // Offset: 0x4802ED8
    float get_Height();
    // public System.Void set_Height(System.Single value)
    // Offset: 0x4802EE0
    void set_Height(float value);
    // protected System.Void Start()
    // Offset: 0x4802EE8
    void Start();
    // public System.Boolean ClosestSurfacePoint(in UnityEngine.Vector3 point, out Oculus.Interaction.Surfaces.SurfaceHit hit, System.Single maxDistance)
    // Offset: 0x4802F20
    bool ClosestSurfacePoint(ByRef<::UnityEngine::Vector3> point, ByRef<::Oculus::Interaction::Surfaces::SurfaceHit> hit, float maxDistance);
    // public System.Boolean Raycast(in UnityEngine.Ray ray, out Oculus.Interaction.Surfaces.SurfaceHit hit, System.Single maxDistance)
    // Offset: 0x48033EC
    bool Raycast(ByRef<::UnityEngine::Ray> ray, ByRef<::Oculus::Interaction::Surfaces::SurfaceHit> hit, float maxDistance);
    // private System.Single TransformScale(System.Single val)
    // Offset: 0x48033B0
    float TransformScale(float val);
    // static private UnityEngine.Vector3 CancelY(in UnityEngine.Vector3 vector)
    // Offset: 0x4803D90
    static ::UnityEngine::Vector3 CancelY(ByRef<::UnityEngine::Vector3> vector);
    // public System.Void InjectAllCylinderSurface(Oculus.Interaction.Surfaces.CylinderSurface/NormalFacing facing, Oculus.Interaction.Cylinder cylinder, System.Single height)
    // Offset: 0x4803DA0
    void InjectAllCylinderSurface(::Oculus::Interaction::Surfaces::CylinderSurface::NormalFacing facing, ::Oculus::Interaction::Cylinder* cylinder, float height);
    // public System.Void InjectNormalFacing(Oculus.Interaction.Surfaces.CylinderSurface/NormalFacing facing)
    // Offset: 0x4803DD4
    void InjectNormalFacing(::Oculus::Interaction::Surfaces::CylinderSurface::NormalFacing facing);
    // public System.Void InjectCylinder(Oculus.Interaction.Cylinder cylinder)
    // Offset: 0x4803DDC
    void InjectCylinder(::Oculus::Interaction::Cylinder* cylinder);
    // public System.Void InjectHeight(System.Single height)
    // Offset: 0x4803DE4
    void InjectHeight(float height);
    // public System.Void .ctor()
    // Offset: 0x4803DEC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CylinderSurface* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Surfaces::CylinderSurface::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CylinderSurface*, creationType>()));
    }
    // private System.Boolean Oculus.Interaction.Surfaces.ISurface.Raycast(in UnityEngine.Ray ray, out Oculus.Interaction.Surfaces.SurfaceHit hit, System.Single maxDistance)
    // Offset: 0x4803E00
    bool Oculus_Interaction_Surfaces_ISurface_Raycast(ByRef<::UnityEngine::Ray> ray, ByRef<::Oculus::Interaction::Surfaces::SurfaceHit> hit, float maxDistance);
    // private System.Boolean Oculus.Interaction.Surfaces.ISurface.ClosestSurfacePoint(in UnityEngine.Vector3 point, out Oculus.Interaction.Surfaces.SurfaceHit hit, System.Single maxDistance)
    // Offset: 0x4803E04
    bool Oculus_Interaction_Surfaces_ISurface_ClosestSurfacePoint(ByRef<::UnityEngine::Vector3> point, ByRef<::Oculus::Interaction::Surfaces::SurfaceHit> hit, float maxDistance);
  }; // Oculus.Interaction.Surfaces.CylinderSurface
  #pragma pack(pop)
  static check_size<sizeof(CylinderSurface), 48 + sizeof(bool)> __Oculus_Interaction_Surfaces_CylinderSurfaceSizeCheck;
  static_assert(sizeof(CylinderSurface) == 0x31);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Surfaces::CylinderSurface::NormalFacing, "Oculus.Interaction.Surfaces", "CylinderSurface/NormalFacing");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::CylinderSurface::get_IsValid
// Il2CppName: get_IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Surfaces::CylinderSurface::*)()>(&Oculus::Interaction::Surfaces::CylinderSurface::get_IsValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::CylinderSurface*), "get_IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::CylinderSurface::get_Radius
// Il2CppName: get_Radius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::Surfaces::CylinderSurface::*)()>(&Oculus::Interaction::Surfaces::CylinderSurface::get_Radius)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::CylinderSurface*), "get_Radius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::CylinderSurface::get_Cylinder
// Il2CppName: get_Cylinder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Cylinder* (Oculus::Interaction::Surfaces::CylinderSurface::*)()>(&Oculus::Interaction::Surfaces::CylinderSurface::get_Cylinder)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::CylinderSurface*), "get_Cylinder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::CylinderSurface::get_Transform
// Il2CppName: get_Transform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (Oculus::Interaction::Surfaces::CylinderSurface::*)()>(&Oculus::Interaction::Surfaces::CylinderSurface::get_Transform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::CylinderSurface*), "get_Transform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::CylinderSurface::get_Bounds
// Il2CppName: get_Bounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Bounds (Oculus::Interaction::Surfaces::CylinderSurface::*)()>(&Oculus::Interaction::Surfaces::CylinderSurface::get_Bounds)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::CylinderSurface*), "get_Bounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::CylinderSurface::get_Facing
// Il2CppName: get_Facing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Surfaces::CylinderSurface::NormalFacing (Oculus::Interaction::Surfaces::CylinderSurface::*)()>(&Oculus::Interaction::Surfaces::CylinderSurface::get_Facing)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::CylinderSurface*), "get_Facing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::CylinderSurface::set_Facing
// Il2CppName: set_Facing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Surfaces::CylinderSurface::*)(::Oculus::Interaction::Surfaces::CylinderSurface::NormalFacing)>(&Oculus::Interaction::Surfaces::CylinderSurface::set_Facing)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Surfaces", "CylinderSurface/NormalFacing")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::CylinderSurface*), "set_Facing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::CylinderSurface::get_Height
// Il2CppName: get_Height
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::Surfaces::CylinderSurface::*)()>(&Oculus::Interaction::Surfaces::CylinderSurface::get_Height)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::CylinderSurface*), "get_Height", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::CylinderSurface::set_Height
// Il2CppName: set_Height
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Surfaces::CylinderSurface::*)(float)>(&Oculus::Interaction::Surfaces::CylinderSurface::set_Height)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::CylinderSurface*), "set_Height", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::CylinderSurface::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Surfaces::CylinderSurface::*)()>(&Oculus::Interaction::Surfaces::CylinderSurface::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::CylinderSurface*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::CylinderSurface::ClosestSurfacePoint
// Il2CppName: ClosestSurfacePoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Surfaces::CylinderSurface::*)(ByRef<::UnityEngine::Vector3>, ByRef<::Oculus::Interaction::Surfaces::SurfaceHit>, float)>(&Oculus::Interaction::Surfaces::CylinderSurface::ClosestSurfacePoint)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* hit = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Surfaces", "SurfaceHit")->this_arg;
    static auto* maxDistance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::CylinderSurface*), "ClosestSurfacePoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point, hit, maxDistance});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::CylinderSurface::Raycast
// Il2CppName: Raycast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Surfaces::CylinderSurface::*)(ByRef<::UnityEngine::Ray>, ByRef<::Oculus::Interaction::Surfaces::SurfaceHit>, float)>(&Oculus::Interaction::Surfaces::CylinderSurface::Raycast)> {
  static const MethodInfo* get() {
    static auto* ray = &::il2cpp_utils::GetClassFromName("UnityEngine", "Ray")->this_arg;
    static auto* hit = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Surfaces", "SurfaceHit")->this_arg;
    static auto* maxDistance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::CylinderSurface*), "Raycast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ray, hit, maxDistance});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::CylinderSurface::TransformScale
// Il2CppName: TransformScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::Surfaces::CylinderSurface::*)(float)>(&Oculus::Interaction::Surfaces::CylinderSurface::TransformScale)> {
  static const MethodInfo* get() {
    static auto* val = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::CylinderSurface*), "TransformScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{val});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::CylinderSurface::CancelY
// Il2CppName: CancelY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(ByRef<::UnityEngine::Vector3>)>(&Oculus::Interaction::Surfaces::CylinderSurface::CancelY)> {
  static const MethodInfo* get() {
    static auto* vector = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::CylinderSurface*), "CancelY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vector});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::CylinderSurface::InjectAllCylinderSurface
// Il2CppName: InjectAllCylinderSurface
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Surfaces::CylinderSurface::*)(::Oculus::Interaction::Surfaces::CylinderSurface::NormalFacing, ::Oculus::Interaction::Cylinder*, float)>(&Oculus::Interaction::Surfaces::CylinderSurface::InjectAllCylinderSurface)> {
  static const MethodInfo* get() {
    static auto* facing = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Surfaces", "CylinderSurface/NormalFacing")->byval_arg;
    static auto* cylinder = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "Cylinder")->byval_arg;
    static auto* height = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::CylinderSurface*), "InjectAllCylinderSurface", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{facing, cylinder, height});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::CylinderSurface::InjectNormalFacing
// Il2CppName: InjectNormalFacing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Surfaces::CylinderSurface::*)(::Oculus::Interaction::Surfaces::CylinderSurface::NormalFacing)>(&Oculus::Interaction::Surfaces::CylinderSurface::InjectNormalFacing)> {
  static const MethodInfo* get() {
    static auto* facing = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Surfaces", "CylinderSurface/NormalFacing")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::CylinderSurface*), "InjectNormalFacing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{facing});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::CylinderSurface::InjectCylinder
// Il2CppName: InjectCylinder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Surfaces::CylinderSurface::*)(::Oculus::Interaction::Cylinder*)>(&Oculus::Interaction::Surfaces::CylinderSurface::InjectCylinder)> {
  static const MethodInfo* get() {
    static auto* cylinder = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "Cylinder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::CylinderSurface*), "InjectCylinder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cylinder});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::CylinderSurface::InjectHeight
// Il2CppName: InjectHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Surfaces::CylinderSurface::*)(float)>(&Oculus::Interaction::Surfaces::CylinderSurface::InjectHeight)> {
  static const MethodInfo* get() {
    static auto* height = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::CylinderSurface*), "InjectHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{height});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::CylinderSurface::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::CylinderSurface::Oculus_Interaction_Surfaces_ISurface_Raycast
// Il2CppName: Oculus.Interaction.Surfaces.ISurface.Raycast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Surfaces::CylinderSurface::*)(ByRef<::UnityEngine::Ray>, ByRef<::Oculus::Interaction::Surfaces::SurfaceHit>, float)>(&Oculus::Interaction::Surfaces::CylinderSurface::Oculus_Interaction_Surfaces_ISurface_Raycast)> {
  static const MethodInfo* get() {
    static auto* ray = &::il2cpp_utils::GetClassFromName("UnityEngine", "Ray")->this_arg;
    static auto* hit = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Surfaces", "SurfaceHit")->this_arg;
    static auto* maxDistance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::CylinderSurface*), "Oculus.Interaction.Surfaces.ISurface.Raycast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ray, hit, maxDistance});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::CylinderSurface::Oculus_Interaction_Surfaces_ISurface_ClosestSurfacePoint
// Il2CppName: Oculus.Interaction.Surfaces.ISurface.ClosestSurfacePoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Surfaces::CylinderSurface::*)(ByRef<::UnityEngine::Vector3>, ByRef<::Oculus::Interaction::Surfaces::SurfaceHit>, float)>(&Oculus::Interaction::Surfaces::CylinderSurface::Oculus_Interaction_Surfaces_ISurface_ClosestSurfacePoint)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* hit = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Surfaces", "SurfaceHit")->this_arg;
    static auto* maxDistance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::CylinderSurface*), "Oculus.Interaction.Surfaces.ISurface.ClosestSurfacePoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point, hit, maxDistance});
  }
};
