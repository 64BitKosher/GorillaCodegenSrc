// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Oculus.Interaction.Surfaces.IClippedSurface`1
#include "Oculus/Interaction/Surfaces/IClippedSurface_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction::Surfaces
namespace Oculus::Interaction::Surfaces {
  // Forward declaring type: ICylinderClipper
  class ICylinderClipper;
  // Forward declaring type: CylinderSurface
  class CylinderSurface;
  // Skipping declaration: ISurface because it is already included!
  // Forward declaring type: SurfaceHit
  struct SurfaceHit;
  // Forward declaring type: CylinderSegment
  struct CylinderSegment;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: IReadOnlyList`1<T>
  template<typename T>
  class IReadOnlyList_1;
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Object because it is already included!
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Ray
  struct Ray;
  // Skipping declaration: Vector3 because it is already included!
}
// Forward declaring namespace: Oculus::Interaction
namespace Oculus::Interaction {
  // Forward declaring type: Cylinder
  class Cylinder;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.Surfaces
namespace Oculus::Interaction::Surfaces {
  // Forward declaring type: ClippedCylinderSurface
  class ClippedCylinderSurface;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Surfaces::ClippedCylinderSurface);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Surfaces::ClippedCylinderSurface*, "Oculus.Interaction.Surfaces", "ClippedCylinderSurface");
// Type namespace: Oculus.Interaction.Surfaces
namespace Oculus::Interaction::Surfaces {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.Surfaces.ClippedCylinderSurface
  // [TokenAttribute] Offset: FFFFFFFF
  class ClippedCylinderSurface : public ::UnityEngine::MonoBehaviour/*, public ::Oculus::Interaction::Surfaces::IClippedSurface_1<::Oculus::Interaction::Surfaces::ICylinderClipper*>*/ {
    public:
    // Nested type: ::Oculus::Interaction::Surfaces::ClippedCylinderSurface::$$c
    class $$c;
    public:
    // private Oculus.Interaction.Surfaces.CylinderSurface _cylinderSurface
    // Size: 0x8
    // Offset: 0x20
    ::Oculus::Interaction::Surfaces::CylinderSurface* cylinderSurface;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Surfaces::CylinderSurface*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.Object> _clippers
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::List_1<::UnityEngine::Object*>* clippers;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Object*>*) == 0x8);
    // private System.Collections.Generic.List`1<Oculus.Interaction.Surfaces.ICylinderClipper> <Clippers>k__BackingField
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::List_1<::Oculus::Interaction::Surfaces::ICylinderClipper*>* Clippers;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Oculus::Interaction::Surfaces::ICylinderClipper*>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::Surfaces::IClippedSurface_1<::Oculus::Interaction::Surfaces::ICylinderClipper*>
    operator ::Oculus::Interaction::Surfaces::IClippedSurface_1<::Oculus::Interaction::Surfaces::ICylinderClipper*>() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::Surfaces::IClippedSurface_1<::Oculus::Interaction::Surfaces::ICylinderClipper*>*>(this);
    }
    // static field const value: static private System.Single EPSILON
    static constexpr const float EPSILON = 0.0001;
    // Get static field: static private System.Single EPSILON
    static float _get_EPSILON();
    // Set static field: static private System.Single EPSILON
    static void _set_EPSILON(float value);
    // Get instance field reference: private Oculus.Interaction.Surfaces.CylinderSurface _cylinderSurface
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Surfaces::CylinderSurface*& dyn__cylinderSurface();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Object> _clippers
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Object*>*& dyn__clippers();
    // Get instance field reference: private System.Collections.Generic.List`1<Oculus.Interaction.Surfaces.ICylinderClipper> <Clippers>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Oculus::Interaction::Surfaces::ICylinderClipper*>*& dyn_$Clippers$k__BackingField();
    // private System.Collections.Generic.List`1<Oculus.Interaction.Surfaces.ICylinderClipper> get_Clippers()
    // Offset: 0x4800910
    ::System::Collections::Generic::List_1<::Oculus::Interaction::Surfaces::ICylinderClipper*>* get_Clippers();
    // private System.Void set_Clippers(System.Collections.Generic.List`1<Oculus.Interaction.Surfaces.ICylinderClipper> value)
    // Offset: 0x4800918
    void set_Clippers(::System::Collections::Generic::List_1<::Oculus::Interaction::Surfaces::ICylinderClipper*>* value);
    // public UnityEngine.Transform get_Transform()
    // Offset: 0x4800920
    ::UnityEngine::Transform* get_Transform();
    // public Oculus.Interaction.Surfaces.ISurface get_BackingSurface()
    // Offset: 0x4800960
    ::Oculus::Interaction::Surfaces::ISurface* get_BackingSurface();
    // public Oculus.Interaction.Cylinder get_Cylinder()
    // Offset: 0x4800968
    ::Oculus::Interaction::Cylinder* get_Cylinder();
    // public System.Collections.Generic.IReadOnlyList`1<Oculus.Interaction.Surfaces.ICylinderClipper> GetClippers()
    // Offset: 0x4800984
    ::System::Collections::Generic::IReadOnlyList_1<::Oculus::Interaction::Surfaces::ICylinderClipper*>* GetClippers();
    // public System.Boolean Raycast(in UnityEngine.Ray ray, out Oculus.Interaction.Surfaces.SurfaceHit hit, System.Single maxDistance)
    // Offset: 0x4800AA0
    bool Raycast(ByRef<::UnityEngine::Ray> ray, ByRef<::Oculus::Interaction::Surfaces::SurfaceHit> hit, float maxDistance);
    // protected System.Void Awake()
    // Offset: 0x4801228
    void Awake();
    // protected System.Void Start()
    // Offset: 0x480133C
    void Start();
    // public System.Boolean GetClipped(out Oculus.Interaction.Surfaces.CylinderSegment clipped)
    // Offset: 0x4801340
    bool GetClipped(ByRef<::Oculus::Interaction::Surfaces::CylinderSegment> clipped);
    // public System.Boolean ClosestSurfacePoint(in UnityEngine.Vector3 point, out Oculus.Interaction.Surfaces.SurfaceHit hit, System.Single maxDistance)
    // Offset: 0x4800BDC
    bool ClosestSurfacePoint(ByRef<::UnityEngine::Vector3> point, ByRef<::Oculus::Interaction::Surfaces::SurfaceHit> hit, float maxDistance);
    // public System.Void InjectAllClippedCylinderSurface(Oculus.Interaction.Surfaces.CylinderSurface surface, System.Collections.Generic.IEnumerable`1<Oculus.Interaction.Surfaces.ICylinderClipper> clippers)
    // Offset: 0x4801654
    void InjectAllClippedCylinderSurface(::Oculus::Interaction::Surfaces::CylinderSurface* surface, ::System::Collections::Generic::IEnumerable_1<::Oculus::Interaction::Surfaces::ICylinderClipper*>* clippers);
    // public System.Void InjectCylinderSurface(Oculus.Interaction.Surfaces.CylinderSurface surface)
    // Offset: 0x480181C
    void InjectCylinderSurface(::Oculus::Interaction::Surfaces::CylinderSurface* surface);
    // public System.Void InjectClippers(System.Collections.Generic.IEnumerable`1<Oculus.Interaction.Surfaces.ICylinderClipper> clippers)
    // Offset: 0x4801680
    void InjectClippers(::System::Collections::Generic::IEnumerable_1<::Oculus::Interaction::Surfaces::ICylinderClipper*>* clippers);
    // public System.Void .ctor()
    // Offset: 0x4801824
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ClippedCylinderSurface* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Surfaces::ClippedCylinderSurface::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ClippedCylinderSurface*, creationType>()));
    }
    // private System.Boolean Oculus.Interaction.Surfaces.ISurface.Raycast(in UnityEngine.Ray ray, out Oculus.Interaction.Surfaces.SurfaceHit hit, System.Single maxDistance)
    // Offset: 0x48018AC
    bool Oculus_Interaction_Surfaces_ISurface_Raycast(ByRef<::UnityEngine::Ray> ray, ByRef<::Oculus::Interaction::Surfaces::SurfaceHit> hit, float maxDistance);
    // private System.Boolean Oculus.Interaction.Surfaces.ISurface.ClosestSurfacePoint(in UnityEngine.Vector3 point, out Oculus.Interaction.Surfaces.SurfaceHit hit, System.Single maxDistance)
    // Offset: 0x48018B0
    bool Oculus_Interaction_Surfaces_ISurface_ClosestSurfacePoint(ByRef<::UnityEngine::Vector3> point, ByRef<::Oculus::Interaction::Surfaces::SurfaceHit> hit, float maxDistance);
  }; // Oculus.Interaction.Surfaces.ClippedCylinderSurface
  #pragma pack(pop)
  static check_size<sizeof(ClippedCylinderSurface), 48 + sizeof(::System::Collections::Generic::List_1<::Oculus::Interaction::Surfaces::ICylinderClipper*>*)> __Oculus_Interaction_Surfaces_ClippedCylinderSurfaceSizeCheck;
  static_assert(sizeof(ClippedCylinderSurface) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::ClippedCylinderSurface::get_Clippers
// Il2CppName: get_Clippers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::Oculus::Interaction::Surfaces::ICylinderClipper*>* (Oculus::Interaction::Surfaces::ClippedCylinderSurface::*)()>(&Oculus::Interaction::Surfaces::ClippedCylinderSurface::get_Clippers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::ClippedCylinderSurface*), "get_Clippers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::ClippedCylinderSurface::set_Clippers
// Il2CppName: set_Clippers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Surfaces::ClippedCylinderSurface::*)(::System::Collections::Generic::List_1<::Oculus::Interaction::Surfaces::ICylinderClipper*>*)>(&Oculus::Interaction::Surfaces::ClippedCylinderSurface::set_Clippers)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Interaction.Surfaces", "ICylinderClipper")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::ClippedCylinderSurface*), "set_Clippers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::ClippedCylinderSurface::get_Transform
// Il2CppName: get_Transform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (Oculus::Interaction::Surfaces::ClippedCylinderSurface::*)()>(&Oculus::Interaction::Surfaces::ClippedCylinderSurface::get_Transform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::ClippedCylinderSurface*), "get_Transform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::ClippedCylinderSurface::get_BackingSurface
// Il2CppName: get_BackingSurface
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Surfaces::ISurface* (Oculus::Interaction::Surfaces::ClippedCylinderSurface::*)()>(&Oculus::Interaction::Surfaces::ClippedCylinderSurface::get_BackingSurface)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::ClippedCylinderSurface*), "get_BackingSurface", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::ClippedCylinderSurface::get_Cylinder
// Il2CppName: get_Cylinder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Cylinder* (Oculus::Interaction::Surfaces::ClippedCylinderSurface::*)()>(&Oculus::Interaction::Surfaces::ClippedCylinderSurface::get_Cylinder)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::ClippedCylinderSurface*), "get_Cylinder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::ClippedCylinderSurface::GetClippers
// Il2CppName: GetClippers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IReadOnlyList_1<::Oculus::Interaction::Surfaces::ICylinderClipper*>* (Oculus::Interaction::Surfaces::ClippedCylinderSurface::*)()>(&Oculus::Interaction::Surfaces::ClippedCylinderSurface::GetClippers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::ClippedCylinderSurface*), "GetClippers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::ClippedCylinderSurface::Raycast
// Il2CppName: Raycast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Surfaces::ClippedCylinderSurface::*)(ByRef<::UnityEngine::Ray>, ByRef<::Oculus::Interaction::Surfaces::SurfaceHit>, float)>(&Oculus::Interaction::Surfaces::ClippedCylinderSurface::Raycast)> {
  static const MethodInfo* get() {
    static auto* ray = &::il2cpp_utils::GetClassFromName("UnityEngine", "Ray")->this_arg;
    static auto* hit = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Surfaces", "SurfaceHit")->this_arg;
    static auto* maxDistance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::ClippedCylinderSurface*), "Raycast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ray, hit, maxDistance});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::ClippedCylinderSurface::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Surfaces::ClippedCylinderSurface::*)()>(&Oculus::Interaction::Surfaces::ClippedCylinderSurface::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::ClippedCylinderSurface*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::ClippedCylinderSurface::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Surfaces::ClippedCylinderSurface::*)()>(&Oculus::Interaction::Surfaces::ClippedCylinderSurface::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::ClippedCylinderSurface*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::ClippedCylinderSurface::GetClipped
// Il2CppName: GetClipped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Surfaces::ClippedCylinderSurface::*)(ByRef<::Oculus::Interaction::Surfaces::CylinderSegment>)>(&Oculus::Interaction::Surfaces::ClippedCylinderSurface::GetClipped)> {
  static const MethodInfo* get() {
    static auto* clipped = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Surfaces", "CylinderSegment")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::ClippedCylinderSurface*), "GetClipped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clipped});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::ClippedCylinderSurface::ClosestSurfacePoint
// Il2CppName: ClosestSurfacePoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Surfaces::ClippedCylinderSurface::*)(ByRef<::UnityEngine::Vector3>, ByRef<::Oculus::Interaction::Surfaces::SurfaceHit>, float)>(&Oculus::Interaction::Surfaces::ClippedCylinderSurface::ClosestSurfacePoint)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* hit = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Surfaces", "SurfaceHit")->this_arg;
    static auto* maxDistance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::ClippedCylinderSurface*), "ClosestSurfacePoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point, hit, maxDistance});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::ClippedCylinderSurface::InjectAllClippedCylinderSurface
// Il2CppName: InjectAllClippedCylinderSurface
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Surfaces::ClippedCylinderSurface::*)(::Oculus::Interaction::Surfaces::CylinderSurface*, ::System::Collections::Generic::IEnumerable_1<::Oculus::Interaction::Surfaces::ICylinderClipper*>*)>(&Oculus::Interaction::Surfaces::ClippedCylinderSurface::InjectAllClippedCylinderSurface)> {
  static const MethodInfo* get() {
    static auto* surface = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Surfaces", "CylinderSurface")->byval_arg;
    static auto* clippers = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IEnumerable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Interaction.Surfaces", "ICylinderClipper")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::ClippedCylinderSurface*), "InjectAllClippedCylinderSurface", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{surface, clippers});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::ClippedCylinderSurface::InjectCylinderSurface
// Il2CppName: InjectCylinderSurface
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Surfaces::ClippedCylinderSurface::*)(::Oculus::Interaction::Surfaces::CylinderSurface*)>(&Oculus::Interaction::Surfaces::ClippedCylinderSurface::InjectCylinderSurface)> {
  static const MethodInfo* get() {
    static auto* surface = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Surfaces", "CylinderSurface")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::ClippedCylinderSurface*), "InjectCylinderSurface", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{surface});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::ClippedCylinderSurface::InjectClippers
// Il2CppName: InjectClippers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Surfaces::ClippedCylinderSurface::*)(::System::Collections::Generic::IEnumerable_1<::Oculus::Interaction::Surfaces::ICylinderClipper*>*)>(&Oculus::Interaction::Surfaces::ClippedCylinderSurface::InjectClippers)> {
  static const MethodInfo* get() {
    static auto* clippers = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IEnumerable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Interaction.Surfaces", "ICylinderClipper")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::ClippedCylinderSurface*), "InjectClippers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clippers});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::ClippedCylinderSurface::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::ClippedCylinderSurface::Oculus_Interaction_Surfaces_ISurface_Raycast
// Il2CppName: Oculus.Interaction.Surfaces.ISurface.Raycast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Surfaces::ClippedCylinderSurface::*)(ByRef<::UnityEngine::Ray>, ByRef<::Oculus::Interaction::Surfaces::SurfaceHit>, float)>(&Oculus::Interaction::Surfaces::ClippedCylinderSurface::Oculus_Interaction_Surfaces_ISurface_Raycast)> {
  static const MethodInfo* get() {
    static auto* ray = &::il2cpp_utils::GetClassFromName("UnityEngine", "Ray")->this_arg;
    static auto* hit = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Surfaces", "SurfaceHit")->this_arg;
    static auto* maxDistance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::ClippedCylinderSurface*), "Oculus.Interaction.Surfaces.ISurface.Raycast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ray, hit, maxDistance});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::ClippedCylinderSurface::Oculus_Interaction_Surfaces_ISurface_ClosestSurfacePoint
// Il2CppName: Oculus.Interaction.Surfaces.ISurface.ClosestSurfacePoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Surfaces::ClippedCylinderSurface::*)(ByRef<::UnityEngine::Vector3>, ByRef<::Oculus::Interaction::Surfaces::SurfaceHit>, float)>(&Oculus::Interaction::Surfaces::ClippedCylinderSurface::Oculus_Interaction_Surfaces_ISurface_ClosestSurfacePoint)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* hit = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Surfaces", "SurfaceHit")->this_arg;
    static auto* maxDistance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::ClippedCylinderSurface*), "Oculus.Interaction.Surfaces.ISurface.ClosestSurfacePoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point, hit, maxDistance});
  }
};
