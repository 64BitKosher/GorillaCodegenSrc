// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Oculus.Interaction.Surfaces.ISurface
#include "Oculus/Interaction/Surfaces/ISurface.hpp"
// Including type: Oculus.Interaction.Surfaces.IBounds
#include "Oculus/Interaction/Surfaces/IBounds.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction::Surfaces
namespace Oculus::Interaction::Surfaces {
  // Skipping declaration: NormalFacing because it is already included!
  // Forward declaring type: SurfaceHit
  struct SurfaceHit;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Vector3 because it is already included!
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Bounds
  struct Bounds;
  // Forward declaring type: Ray
  struct Ray;
  // Forward declaring type: Plane
  struct Plane;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.Surfaces
namespace Oculus::Interaction::Surfaces {
  // Forward declaring type: PlaneSurface
  class PlaneSurface;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Surfaces::PlaneSurface);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Surfaces::PlaneSurface*, "Oculus.Interaction.Surfaces", "PlaneSurface");
// Type namespace: Oculus.Interaction.Surfaces
namespace Oculus::Interaction::Surfaces {
  // Size: 0x25
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.Surfaces.PlaneSurface
  // [TokenAttribute] Offset: FFFFFFFF
  class PlaneSurface : public ::UnityEngine::MonoBehaviour/*, public ::Oculus::Interaction::Surfaces::ISurface, public ::Oculus::Interaction::Surfaces::IBounds*/ {
    public:
    // Nested type: ::Oculus::Interaction::Surfaces::PlaneSurface::NormalFacing
    struct NormalFacing;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Oculus.Interaction.Surfaces.PlaneSurface/NormalFacing
    // [TokenAttribute] Offset: FFFFFFFF
    struct NormalFacing/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: NormalFacing
      constexpr NormalFacing(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Oculus.Interaction.Surfaces.PlaneSurface/NormalFacing Backward
      static constexpr const int Backward = 0;
      // Get static field: static public Oculus.Interaction.Surfaces.PlaneSurface/NormalFacing Backward
      static ::Oculus::Interaction::Surfaces::PlaneSurface::NormalFacing _get_Backward();
      // Set static field: static public Oculus.Interaction.Surfaces.PlaneSurface/NormalFacing Backward
      static void _set_Backward(::Oculus::Interaction::Surfaces::PlaneSurface::NormalFacing value);
      // static field const value: static public Oculus.Interaction.Surfaces.PlaneSurface/NormalFacing Forward
      static constexpr const int Forward = 1;
      // Get static field: static public Oculus.Interaction.Surfaces.PlaneSurface/NormalFacing Forward
      static ::Oculus::Interaction::Surfaces::PlaneSurface::NormalFacing _get_Forward();
      // Set static field: static public Oculus.Interaction.Surfaces.PlaneSurface/NormalFacing Forward
      static void _set_Forward(::Oculus::Interaction::Surfaces::PlaneSurface::NormalFacing value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Oculus.Interaction.Surfaces.PlaneSurface/NormalFacing
    #pragma pack(pop)
    static check_size<sizeof(PlaneSurface::NormalFacing), 0 + sizeof(int)> __Oculus_Interaction_Surfaces_PlaneSurface_NormalFacingSizeCheck;
    static_assert(sizeof(PlaneSurface::NormalFacing) == 0x4);
    public:
    // private Oculus.Interaction.Surfaces.PlaneSurface/NormalFacing _facing
    // Size: 0x4
    // Offset: 0x20
    ::Oculus::Interaction::Surfaces::PlaneSurface::NormalFacing facing;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Surfaces::PlaneSurface::NormalFacing) == 0x4);
    // private System.Boolean _doubleSided
    // Size: 0x1
    // Offset: 0x24
    bool doubleSided;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::Surfaces::ISurface
    operator ::Oculus::Interaction::Surfaces::ISurface() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::Surfaces::ISurface*>(this);
    }
    // Creating interface conversion operator: operator ::Oculus::Interaction::Surfaces::IBounds
    operator ::Oculus::Interaction::Surfaces::IBounds() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::Surfaces::IBounds*>(this);
    }
    // Get instance field reference: private Oculus.Interaction.Surfaces.PlaneSurface/NormalFacing _facing
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Surfaces::PlaneSurface::NormalFacing& dyn__facing();
    // Get instance field reference: private System.Boolean _doubleSided
    [[deprecated("Use field access instead!")]] bool& dyn__doubleSided();
    // public Oculus.Interaction.Surfaces.PlaneSurface/NormalFacing get_Facing()
    // Offset: 0x4804BB8
    ::Oculus::Interaction::Surfaces::PlaneSurface::NormalFacing get_Facing();
    // public System.Void set_Facing(Oculus.Interaction.Surfaces.PlaneSurface/NormalFacing value)
    // Offset: 0x4804BC0
    void set_Facing(::Oculus::Interaction::Surfaces::PlaneSurface::NormalFacing value);
    // public System.Boolean get_DoubleSided()
    // Offset: 0x4804BC8
    bool get_DoubleSided();
    // public System.Void set_DoubleSided(System.Boolean value)
    // Offset: 0x4804BD0
    void set_DoubleSided(bool value);
    // public UnityEngine.Vector3 get_Normal()
    // Offset: 0x480059C
    ::UnityEngine::Vector3 get_Normal();
    // private System.Boolean IsPointAboveSurface(UnityEngine.Vector3 point)
    // Offset: 0x4804BDC
    bool IsPointAboveSurface(::UnityEngine::Vector3 point);
    // public System.Boolean ClosestSurfacePoint(in UnityEngine.Vector3 point, out Oculus.Interaction.Surfaces.SurfaceHit hit, System.Single maxDistance)
    // Offset: 0x4802144
    bool ClosestSurfacePoint(ByRef<::UnityEngine::Vector3> point, ByRef<::Oculus::Interaction::Surfaces::SurfaceHit> hit, float maxDistance);
    // public UnityEngine.Transform get_Transform()
    // Offset: 0x48002C0
    ::UnityEngine::Transform* get_Transform();
    // public UnityEngine.Bounds get_Bounds()
    // Offset: 0x4804D48
    ::UnityEngine::Bounds get_Bounds();
    // public System.Boolean Raycast(in UnityEngine.Ray ray, out Oculus.Interaction.Surfaces.SurfaceHit hit, System.Single maxDistance)
    // Offset: 0x4804DF8
    bool Raycast(ByRef<::UnityEngine::Ray> ray, ByRef<::Oculus::Interaction::Surfaces::SurfaceHit> hit, float maxDistance);
    // public UnityEngine.Plane GetPlane()
    // Offset: 0x4804C28
    ::UnityEngine::Plane GetPlane();
    // public System.Void InjectAllPlaneSurface(Oculus.Interaction.Surfaces.PlaneSurface/NormalFacing facing, System.Boolean doubleSided)
    // Offset: 0x4804FB8
    void InjectAllPlaneSurface(::Oculus::Interaction::Surfaces::PlaneSurface::NormalFacing facing, bool doubleSided);
    // public System.Void InjectNormalFacing(Oculus.Interaction.Surfaces.PlaneSurface/NormalFacing facing)
    // Offset: 0x4804FC8
    void InjectNormalFacing(::Oculus::Interaction::Surfaces::PlaneSurface::NormalFacing facing);
    // public System.Void InjectDoubleSided(System.Boolean doubleSided)
    // Offset: 0x4804FD0
    void InjectDoubleSided(bool doubleSided);
    // public System.Void .ctor()
    // Offset: 0x4804FDC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PlaneSurface* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Surfaces::PlaneSurface::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PlaneSurface*, creationType>()));
    }
    // private System.Boolean Oculus.Interaction.Surfaces.ISurface.Raycast(in UnityEngine.Ray ray, out Oculus.Interaction.Surfaces.SurfaceHit hit, System.Single maxDistance)
    // Offset: 0x4804FE4
    bool Oculus_Interaction_Surfaces_ISurface_Raycast(ByRef<::UnityEngine::Ray> ray, ByRef<::Oculus::Interaction::Surfaces::SurfaceHit> hit, float maxDistance);
    // private System.Boolean Oculus.Interaction.Surfaces.ISurface.ClosestSurfacePoint(in UnityEngine.Vector3 point, out Oculus.Interaction.Surfaces.SurfaceHit hit, System.Single maxDistance)
    // Offset: 0x4804FE8
    bool Oculus_Interaction_Surfaces_ISurface_ClosestSurfacePoint(ByRef<::UnityEngine::Vector3> point, ByRef<::Oculus::Interaction::Surfaces::SurfaceHit> hit, float maxDistance);
  }; // Oculus.Interaction.Surfaces.PlaneSurface
  #pragma pack(pop)
  static check_size<sizeof(PlaneSurface), 36 + sizeof(bool)> __Oculus_Interaction_Surfaces_PlaneSurfaceSizeCheck;
  static_assert(sizeof(PlaneSurface) == 0x25);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Surfaces::PlaneSurface::NormalFacing, "Oculus.Interaction.Surfaces", "PlaneSurface/NormalFacing");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::PlaneSurface::get_Facing
// Il2CppName: get_Facing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Surfaces::PlaneSurface::NormalFacing (Oculus::Interaction::Surfaces::PlaneSurface::*)()>(&Oculus::Interaction::Surfaces::PlaneSurface::get_Facing)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::PlaneSurface*), "get_Facing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::PlaneSurface::set_Facing
// Il2CppName: set_Facing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Surfaces::PlaneSurface::*)(::Oculus::Interaction::Surfaces::PlaneSurface::NormalFacing)>(&Oculus::Interaction::Surfaces::PlaneSurface::set_Facing)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Surfaces", "PlaneSurface/NormalFacing")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::PlaneSurface*), "set_Facing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::PlaneSurface::get_DoubleSided
// Il2CppName: get_DoubleSided
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Surfaces::PlaneSurface::*)()>(&Oculus::Interaction::Surfaces::PlaneSurface::get_DoubleSided)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::PlaneSurface*), "get_DoubleSided", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::PlaneSurface::set_DoubleSided
// Il2CppName: set_DoubleSided
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Surfaces::PlaneSurface::*)(bool)>(&Oculus::Interaction::Surfaces::PlaneSurface::set_DoubleSided)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::PlaneSurface*), "set_DoubleSided", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::PlaneSurface::get_Normal
// Il2CppName: get_Normal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Oculus::Interaction::Surfaces::PlaneSurface::*)()>(&Oculus::Interaction::Surfaces::PlaneSurface::get_Normal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::PlaneSurface*), "get_Normal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::PlaneSurface::IsPointAboveSurface
// Il2CppName: IsPointAboveSurface
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Surfaces::PlaneSurface::*)(::UnityEngine::Vector3)>(&Oculus::Interaction::Surfaces::PlaneSurface::IsPointAboveSurface)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::PlaneSurface*), "IsPointAboveSurface", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::PlaneSurface::ClosestSurfacePoint
// Il2CppName: ClosestSurfacePoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Surfaces::PlaneSurface::*)(ByRef<::UnityEngine::Vector3>, ByRef<::Oculus::Interaction::Surfaces::SurfaceHit>, float)>(&Oculus::Interaction::Surfaces::PlaneSurface::ClosestSurfacePoint)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* hit = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Surfaces", "SurfaceHit")->this_arg;
    static auto* maxDistance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::PlaneSurface*), "ClosestSurfacePoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point, hit, maxDistance});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::PlaneSurface::get_Transform
// Il2CppName: get_Transform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (Oculus::Interaction::Surfaces::PlaneSurface::*)()>(&Oculus::Interaction::Surfaces::PlaneSurface::get_Transform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::PlaneSurface*), "get_Transform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::PlaneSurface::get_Bounds
// Il2CppName: get_Bounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Bounds (Oculus::Interaction::Surfaces::PlaneSurface::*)()>(&Oculus::Interaction::Surfaces::PlaneSurface::get_Bounds)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::PlaneSurface*), "get_Bounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::PlaneSurface::Raycast
// Il2CppName: Raycast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Surfaces::PlaneSurface::*)(ByRef<::UnityEngine::Ray>, ByRef<::Oculus::Interaction::Surfaces::SurfaceHit>, float)>(&Oculus::Interaction::Surfaces::PlaneSurface::Raycast)> {
  static const MethodInfo* get() {
    static auto* ray = &::il2cpp_utils::GetClassFromName("UnityEngine", "Ray")->this_arg;
    static auto* hit = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Surfaces", "SurfaceHit")->this_arg;
    static auto* maxDistance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::PlaneSurface*), "Raycast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ray, hit, maxDistance});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::PlaneSurface::GetPlane
// Il2CppName: GetPlane
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Plane (Oculus::Interaction::Surfaces::PlaneSurface::*)()>(&Oculus::Interaction::Surfaces::PlaneSurface::GetPlane)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::PlaneSurface*), "GetPlane", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::PlaneSurface::InjectAllPlaneSurface
// Il2CppName: InjectAllPlaneSurface
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Surfaces::PlaneSurface::*)(::Oculus::Interaction::Surfaces::PlaneSurface::NormalFacing, bool)>(&Oculus::Interaction::Surfaces::PlaneSurface::InjectAllPlaneSurface)> {
  static const MethodInfo* get() {
    static auto* facing = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Surfaces", "PlaneSurface/NormalFacing")->byval_arg;
    static auto* doubleSided = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::PlaneSurface*), "InjectAllPlaneSurface", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{facing, doubleSided});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::PlaneSurface::InjectNormalFacing
// Il2CppName: InjectNormalFacing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Surfaces::PlaneSurface::*)(::Oculus::Interaction::Surfaces::PlaneSurface::NormalFacing)>(&Oculus::Interaction::Surfaces::PlaneSurface::InjectNormalFacing)> {
  static const MethodInfo* get() {
    static auto* facing = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Surfaces", "PlaneSurface/NormalFacing")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::PlaneSurface*), "InjectNormalFacing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{facing});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::PlaneSurface::InjectDoubleSided
// Il2CppName: InjectDoubleSided
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Surfaces::PlaneSurface::*)(bool)>(&Oculus::Interaction::Surfaces::PlaneSurface::InjectDoubleSided)> {
  static const MethodInfo* get() {
    static auto* doubleSided = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::PlaneSurface*), "InjectDoubleSided", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{doubleSided});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::PlaneSurface::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::PlaneSurface::Oculus_Interaction_Surfaces_ISurface_Raycast
// Il2CppName: Oculus.Interaction.Surfaces.ISurface.Raycast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Surfaces::PlaneSurface::*)(ByRef<::UnityEngine::Ray>, ByRef<::Oculus::Interaction::Surfaces::SurfaceHit>, float)>(&Oculus::Interaction::Surfaces::PlaneSurface::Oculus_Interaction_Surfaces_ISurface_Raycast)> {
  static const MethodInfo* get() {
    static auto* ray = &::il2cpp_utils::GetClassFromName("UnityEngine", "Ray")->this_arg;
    static auto* hit = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Surfaces", "SurfaceHit")->this_arg;
    static auto* maxDistance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::PlaneSurface*), "Oculus.Interaction.Surfaces.ISurface.Raycast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ray, hit, maxDistance});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Surfaces::PlaneSurface::Oculus_Interaction_Surfaces_ISurface_ClosestSurfacePoint
// Il2CppName: Oculus.Interaction.Surfaces.ISurface.ClosestSurfacePoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Surfaces::PlaneSurface::*)(ByRef<::UnityEngine::Vector3>, ByRef<::Oculus::Interaction::Surfaces::SurfaceHit>, float)>(&Oculus::Interaction::Surfaces::PlaneSurface::Oculus_Interaction_Surfaces_ISurface_ClosestSurfacePoint)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* hit = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Surfaces", "SurfaceHit")->this_arg;
    static auto* maxDistance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Surfaces::PlaneSurface*), "Oculus.Interaction.Surfaces.ISurface.ClosestSurfacePoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point, hit, maxDistance});
  }
};
