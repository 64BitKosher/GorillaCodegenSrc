// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Oculus.Interaction.IActiveState
#include "Oculus/Interaction/IActiveState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Object because it is already included!
}
// Forward declaring namespace: Oculus::Interaction
namespace Oculus::Interaction {
  // Forward declaring type: ISelector
  class ISelector;
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: ActiveStateGate
  class ActiveStateGate;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::ActiveStateGate);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::ActiveStateGate*, "Oculus.Interaction", "ActiveStateGate");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x42
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.ActiveStateGate
  // [TokenAttribute] Offset: FFFFFFFF
  class ActiveStateGate : public ::UnityEngine::MonoBehaviour/*, public ::Oculus::Interaction::IActiveState*/ {
    public:
    public:
    // private UnityEngine.Object _openSelector
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Object* openSelector;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.ISelector <OpenSelector>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    ::Oculus::Interaction::ISelector* OpenSelector;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::ISelector*) == 0x8);
    // private UnityEngine.Object _closeSelector
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Object* closeSelector;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.ISelector <CloseSelector>k__BackingField
    // Size: 0x8
    // Offset: 0x38
    ::Oculus::Interaction::ISelector* CloseSelector;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::ISelector*) == 0x8);
    // private System.Boolean <Active>k__BackingField
    // Size: 0x1
    // Offset: 0x40
    bool Active;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean _started
    // Size: 0x1
    // Offset: 0x41
    bool started;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::IActiveState
    operator ::Oculus::Interaction::IActiveState() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::IActiveState*>(this);
    }
    // Get instance field reference: private UnityEngine.Object _openSelector
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__openSelector();
    // Get instance field reference: private Oculus.Interaction.ISelector <OpenSelector>k__BackingField
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::ISelector*& dyn_$OpenSelector$k__BackingField();
    // Get instance field reference: private UnityEngine.Object _closeSelector
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__closeSelector();
    // Get instance field reference: private Oculus.Interaction.ISelector <CloseSelector>k__BackingField
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::ISelector*& dyn_$CloseSelector$k__BackingField();
    // Get instance field reference: private System.Boolean <Active>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$Active$k__BackingField();
    // Get instance field reference: protected System.Boolean _started
    [[deprecated("Use field access instead!")]] bool& dyn__started();
    // private Oculus.Interaction.ISelector get_OpenSelector()
    // Offset: 0x47787A0
    ::Oculus::Interaction::ISelector* get_OpenSelector();
    // private System.Void set_OpenSelector(Oculus.Interaction.ISelector value)
    // Offset: 0x47787A8
    void set_OpenSelector(::Oculus::Interaction::ISelector* value);
    // private Oculus.Interaction.ISelector get_CloseSelector()
    // Offset: 0x47787B0
    ::Oculus::Interaction::ISelector* get_CloseSelector();
    // private System.Void set_CloseSelector(Oculus.Interaction.ISelector value)
    // Offset: 0x47787B8
    void set_CloseSelector(::Oculus::Interaction::ISelector* value);
    // public System.Boolean get_Active()
    // Offset: 0x47787C0
    bool get_Active();
    // private System.Void set_Active(System.Boolean value)
    // Offset: 0x47787C8
    void set_Active(bool value);
    // protected System.Void Awake()
    // Offset: 0x47787D4
    void Awake();
    // protected System.Void Start()
    // Offset: 0x4778848
    void Start();
    // private System.Void OnEnable()
    // Offset: 0x4778878
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0x4778A20
    void OnDisable();
    // private System.Void HandleOpenSelected()
    // Offset: 0x4778BD4
    void HandleOpenSelected();
    // private System.Void HandleCloseSelected()
    // Offset: 0x4778BE0
    void HandleCloseSelected();
    // public System.Void InjectAllActiveStateGate(Oculus.Interaction.ISelector openSelector, Oculus.Interaction.ISelector closeSelector)
    // Offset: 0x4778BE8
    void InjectAllActiveStateGate(::Oculus::Interaction::ISelector* openSelector, ::Oculus::Interaction::ISelector* closeSelector);
    // public System.Void InjectOpenState(Oculus.Interaction.ISelector openSelector)
    // Offset: 0x4778C10
    void InjectOpenState(::Oculus::Interaction::ISelector* openSelector);
    // public System.Void InjectCloseState(Oculus.Interaction.ISelector closeSelector)
    // Offset: 0x4778CE0
    void InjectCloseState(::Oculus::Interaction::ISelector* closeSelector);
    // public System.Void .ctor()
    // Offset: 0x4778DB0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ActiveStateGate* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::ActiveStateGate::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ActiveStateGate*, creationType>()));
    }
  }; // Oculus.Interaction.ActiveStateGate
  #pragma pack(pop)
  static check_size<sizeof(ActiveStateGate), 65 + sizeof(bool)> __Oculus_Interaction_ActiveStateGateSizeCheck;
  static_assert(sizeof(ActiveStateGate) == 0x42);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::ActiveStateGate::get_OpenSelector
// Il2CppName: get_OpenSelector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::ISelector* (Oculus::Interaction::ActiveStateGate::*)()>(&Oculus::Interaction::ActiveStateGate::get_OpenSelector)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ActiveStateGate*), "get_OpenSelector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ActiveStateGate::set_OpenSelector
// Il2CppName: set_OpenSelector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ActiveStateGate::*)(::Oculus::Interaction::ISelector*)>(&Oculus::Interaction::ActiveStateGate::set_OpenSelector)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "ISelector")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ActiveStateGate*), "set_OpenSelector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ActiveStateGate::get_CloseSelector
// Il2CppName: get_CloseSelector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::ISelector* (Oculus::Interaction::ActiveStateGate::*)()>(&Oculus::Interaction::ActiveStateGate::get_CloseSelector)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ActiveStateGate*), "get_CloseSelector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ActiveStateGate::set_CloseSelector
// Il2CppName: set_CloseSelector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ActiveStateGate::*)(::Oculus::Interaction::ISelector*)>(&Oculus::Interaction::ActiveStateGate::set_CloseSelector)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "ISelector")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ActiveStateGate*), "set_CloseSelector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ActiveStateGate::get_Active
// Il2CppName: get_Active
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::ActiveStateGate::*)()>(&Oculus::Interaction::ActiveStateGate::get_Active)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ActiveStateGate*), "get_Active", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ActiveStateGate::set_Active
// Il2CppName: set_Active
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ActiveStateGate::*)(bool)>(&Oculus::Interaction::ActiveStateGate::set_Active)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ActiveStateGate*), "set_Active", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ActiveStateGate::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ActiveStateGate::*)()>(&Oculus::Interaction::ActiveStateGate::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ActiveStateGate*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ActiveStateGate::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ActiveStateGate::*)()>(&Oculus::Interaction::ActiveStateGate::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ActiveStateGate*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ActiveStateGate::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ActiveStateGate::*)()>(&Oculus::Interaction::ActiveStateGate::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ActiveStateGate*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ActiveStateGate::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ActiveStateGate::*)()>(&Oculus::Interaction::ActiveStateGate::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ActiveStateGate*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ActiveStateGate::HandleOpenSelected
// Il2CppName: HandleOpenSelected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ActiveStateGate::*)()>(&Oculus::Interaction::ActiveStateGate::HandleOpenSelected)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ActiveStateGate*), "HandleOpenSelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ActiveStateGate::HandleCloseSelected
// Il2CppName: HandleCloseSelected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ActiveStateGate::*)()>(&Oculus::Interaction::ActiveStateGate::HandleCloseSelected)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ActiveStateGate*), "HandleCloseSelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ActiveStateGate::InjectAllActiveStateGate
// Il2CppName: InjectAllActiveStateGate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ActiveStateGate::*)(::Oculus::Interaction::ISelector*, ::Oculus::Interaction::ISelector*)>(&Oculus::Interaction::ActiveStateGate::InjectAllActiveStateGate)> {
  static const MethodInfo* get() {
    static auto* openSelector = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "ISelector")->byval_arg;
    static auto* closeSelector = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "ISelector")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ActiveStateGate*), "InjectAllActiveStateGate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{openSelector, closeSelector});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ActiveStateGate::InjectOpenState
// Il2CppName: InjectOpenState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ActiveStateGate::*)(::Oculus::Interaction::ISelector*)>(&Oculus::Interaction::ActiveStateGate::InjectOpenState)> {
  static const MethodInfo* get() {
    static auto* openSelector = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "ISelector")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ActiveStateGate*), "InjectOpenState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{openSelector});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ActiveStateGate::InjectCloseState
// Il2CppName: InjectCloseState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ActiveStateGate::*)(::Oculus::Interaction::ISelector*)>(&Oculus::Interaction::ActiveStateGate::InjectCloseState)> {
  static const MethodInfo* get() {
    static auto* closeSelector = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "ISelector")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ActiveStateGate*), "InjectCloseState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{closeSelector});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ActiveStateGate::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
