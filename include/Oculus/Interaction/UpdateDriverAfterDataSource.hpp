// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Oculus.Interaction.IUpdateDriver
#include "Oculus/Interaction/IUpdateDriver.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Object because it is already included!
}
// Forward declaring namespace: Oculus::Interaction::Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: IDataSource
  class IDataSource;
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: UpdateDriverAfterDataSource
  class UpdateDriverAfterDataSource;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::UpdateDriverAfterDataSource);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::UpdateDriverAfterDataSource*, "Oculus.Interaction", "UpdateDriverAfterDataSource");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x42
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.UpdateDriverAfterDataSource
  // [TokenAttribute] Offset: FFFFFFFF
  class UpdateDriverAfterDataSource : public ::UnityEngine::MonoBehaviour/*, public ::Oculus::Interaction::IUpdateDriver*/ {
    public:
    public:
    // private UnityEngine.Object _updateDriver
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Object* updateDriver;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.IUpdateDriver UpdateDriver
    // Size: 0x8
    // Offset: 0x28
    ::Oculus::Interaction::IUpdateDriver* UpdateDriver;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::IUpdateDriver*) == 0x8);
    // private UnityEngine.Object _dataSource
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Object* dataSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.Input.IDataSource DataSource
    // Size: 0x8
    // Offset: 0x38
    ::Oculus::Interaction::Input::IDataSource* DataSource;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::IDataSource*) == 0x8);
    // protected System.Boolean _started
    // Size: 0x1
    // Offset: 0x40
    bool started;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <IsRootDriver>k__BackingField
    // Size: 0x1
    // Offset: 0x41
    bool IsRootDriver;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::IUpdateDriver
    operator ::Oculus::Interaction::IUpdateDriver() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::IUpdateDriver*>(this);
    }
    // Get instance field reference: private UnityEngine.Object _updateDriver
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__updateDriver();
    // Get instance field reference: private Oculus.Interaction.IUpdateDriver UpdateDriver
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::IUpdateDriver*& dyn_UpdateDriver();
    // Get instance field reference: private UnityEngine.Object _dataSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__dataSource();
    // Get instance field reference: private Oculus.Interaction.Input.IDataSource DataSource
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::IDataSource*& dyn_DataSource();
    // Get instance field reference: protected System.Boolean _started
    [[deprecated("Use field access instead!")]] bool& dyn__started();
    // Get instance field reference: private System.Boolean <IsRootDriver>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$IsRootDriver$k__BackingField();
    // protected System.Void Awake()
    // Offset: 0x4789A10
    void Awake();
    // protected System.Void Start()
    // Offset: 0x4789AC4
    void Start();
    // protected System.Void OnEnable()
    // Offset: 0x4789AF4
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x4789C60
    void OnDisable();
    // public System.Boolean get_IsRootDriver()
    // Offset: 0x4789DCC
    bool get_IsRootDriver();
    // public System.Void set_IsRootDriver(System.Boolean value)
    // Offset: 0x4789DD4
    void set_IsRootDriver(bool value);
    // public System.Void Drive()
    // Offset: 0x4789DE0
    void Drive();
    // public System.Void InjectAllUpdateDriverAfterDataSource(Oculus.Interaction.IUpdateDriver updateDriver, Oculus.Interaction.Input.IDataSource dataSource)
    // Offset: 0x4789E84
    void InjectAllUpdateDriverAfterDataSource(::Oculus::Interaction::IUpdateDriver* updateDriver, ::Oculus::Interaction::Input::IDataSource* dataSource);
    // public System.Void InjectUpdateDriver(Oculus.Interaction.IUpdateDriver updateDriver)
    // Offset: 0x4789EAC
    void InjectUpdateDriver(::Oculus::Interaction::IUpdateDriver* updateDriver);
    // public System.Void InjectDataSource(Oculus.Interaction.Input.IDataSource dataSource)
    // Offset: 0x4789F78
    void InjectDataSource(::Oculus::Interaction::Input::IDataSource* dataSource);
    // public System.Void .ctor()
    // Offset: 0x478A044
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UpdateDriverAfterDataSource* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::UpdateDriverAfterDataSource::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UpdateDriverAfterDataSource*, creationType>()));
    }
  }; // Oculus.Interaction.UpdateDriverAfterDataSource
  #pragma pack(pop)
  static check_size<sizeof(UpdateDriverAfterDataSource), 65 + sizeof(bool)> __Oculus_Interaction_UpdateDriverAfterDataSourceSizeCheck;
  static_assert(sizeof(UpdateDriverAfterDataSource) == 0x42);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::UpdateDriverAfterDataSource::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::UpdateDriverAfterDataSource::*)()>(&Oculus::Interaction::UpdateDriverAfterDataSource::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UpdateDriverAfterDataSource*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UpdateDriverAfterDataSource::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::UpdateDriverAfterDataSource::*)()>(&Oculus::Interaction::UpdateDriverAfterDataSource::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UpdateDriverAfterDataSource*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UpdateDriverAfterDataSource::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::UpdateDriverAfterDataSource::*)()>(&Oculus::Interaction::UpdateDriverAfterDataSource::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UpdateDriverAfterDataSource*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UpdateDriverAfterDataSource::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::UpdateDriverAfterDataSource::*)()>(&Oculus::Interaction::UpdateDriverAfterDataSource::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UpdateDriverAfterDataSource*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UpdateDriverAfterDataSource::get_IsRootDriver
// Il2CppName: get_IsRootDriver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::UpdateDriverAfterDataSource::*)()>(&Oculus::Interaction::UpdateDriverAfterDataSource::get_IsRootDriver)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UpdateDriverAfterDataSource*), "get_IsRootDriver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UpdateDriverAfterDataSource::set_IsRootDriver
// Il2CppName: set_IsRootDriver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::UpdateDriverAfterDataSource::*)(bool)>(&Oculus::Interaction::UpdateDriverAfterDataSource::set_IsRootDriver)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UpdateDriverAfterDataSource*), "set_IsRootDriver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UpdateDriverAfterDataSource::Drive
// Il2CppName: Drive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::UpdateDriverAfterDataSource::*)()>(&Oculus::Interaction::UpdateDriverAfterDataSource::Drive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UpdateDriverAfterDataSource*), "Drive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UpdateDriverAfterDataSource::InjectAllUpdateDriverAfterDataSource
// Il2CppName: InjectAllUpdateDriverAfterDataSource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::UpdateDriverAfterDataSource::*)(::Oculus::Interaction::IUpdateDriver*, ::Oculus::Interaction::Input::IDataSource*)>(&Oculus::Interaction::UpdateDriverAfterDataSource::InjectAllUpdateDriverAfterDataSource)> {
  static const MethodInfo* get() {
    static auto* updateDriver = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IUpdateDriver")->byval_arg;
    static auto* dataSource = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IDataSource")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UpdateDriverAfterDataSource*), "InjectAllUpdateDriverAfterDataSource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{updateDriver, dataSource});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UpdateDriverAfterDataSource::InjectUpdateDriver
// Il2CppName: InjectUpdateDriver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::UpdateDriverAfterDataSource::*)(::Oculus::Interaction::IUpdateDriver*)>(&Oculus::Interaction::UpdateDriverAfterDataSource::InjectUpdateDriver)> {
  static const MethodInfo* get() {
    static auto* updateDriver = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IUpdateDriver")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UpdateDriverAfterDataSource*), "InjectUpdateDriver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{updateDriver});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UpdateDriverAfterDataSource::InjectDataSource
// Il2CppName: InjectDataSource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::UpdateDriverAfterDataSource::*)(::Oculus::Interaction::Input::IDataSource*)>(&Oculus::Interaction::UpdateDriverAfterDataSource::InjectDataSource)> {
  static const MethodInfo* get() {
    static auto* dataSource = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IDataSource")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UpdateDriverAfterDataSource*), "InjectDataSource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dataSource});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UpdateDriverAfterDataSource::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
