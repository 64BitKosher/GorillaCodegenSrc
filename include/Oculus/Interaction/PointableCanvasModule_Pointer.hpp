// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Oculus.Interaction.PointableCanvasModule
#include "Oculus/Interaction/PointableCanvasModule.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::EventSystems
namespace UnityEngine::EventSystems {
  // Forward declaring type: PointerEventData
  class PointerEventData;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Canvas
  class Canvas;
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::PointableCanvasModule::Pointer);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::PointableCanvasModule::Pointer*, "Oculus.Interaction", "PointableCanvasModule/Pointer");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x43
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.PointableCanvasModule/Pointer
  // [TokenAttribute] Offset: FFFFFFFF
  class PointableCanvasModule::Pointer : public ::Il2CppObject {
    public:
    public:
    // private UnityEngine.EventSystems.PointerEventData <PointerEventData>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::EventSystems::PointerEventData* PointerEventData;
    // Field size check
    static_assert(sizeof(::UnityEngine::EventSystems::PointerEventData*) == 0x8);
    // private System.Boolean <MarkedForDeletion>k__BackingField
    // Size: 0x1
    // Offset: 0x18
    bool MarkedForDeletion;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: MarkedForDeletion and: canvas
    char __padding1[0x7] = {};
    // private UnityEngine.Canvas _canvas
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Canvas* canvas;
    // Field size check
    static_assert(sizeof(::UnityEngine::Canvas*) == 0x8);
    // private UnityEngine.Vector3 _position
    // Size: 0xC
    // Offset: 0x28
    ::UnityEngine::Vector3 position;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // Padding between fields: position and: hoveredSelectable
    char __padding3[0x4] = {};
    // private UnityEngine.GameObject _hoveredSelectable
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::GameObject* hoveredSelectable;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private System.Boolean _pressing
    // Size: 0x1
    // Offset: 0x40
    bool pressing;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _pressed
    // Size: 0x1
    // Offset: 0x41
    bool pressed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _released
    // Size: 0x1
    // Offset: 0x42
    bool released;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private UnityEngine.EventSystems.PointerEventData <PointerEventData>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::EventSystems::PointerEventData*& dyn_$PointerEventData$k__BackingField();
    // Get instance field reference: private System.Boolean <MarkedForDeletion>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$MarkedForDeletion$k__BackingField();
    // Get instance field reference: private UnityEngine.Canvas _canvas
    [[deprecated("Use field access instead!")]] ::UnityEngine::Canvas*& dyn__canvas();
    // Get instance field reference: private UnityEngine.Vector3 _position
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__position();
    // Get instance field reference: private UnityEngine.GameObject _hoveredSelectable
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn__hoveredSelectable();
    // Get instance field reference: private System.Boolean _pressing
    [[deprecated("Use field access instead!")]] bool& dyn__pressing();
    // Get instance field reference: private System.Boolean _pressed
    [[deprecated("Use field access instead!")]] bool& dyn__pressed();
    // Get instance field reference: private System.Boolean _released
    [[deprecated("Use field access instead!")]] bool& dyn__released();
    // public UnityEngine.EventSystems.PointerEventData get_PointerEventData()
    // Offset: 0x47D9C3C
    ::UnityEngine::EventSystems::PointerEventData* get_PointerEventData();
    // public System.Void set_PointerEventData(UnityEngine.EventSystems.PointerEventData value)
    // Offset: 0x47D9C44
    void set_PointerEventData(::UnityEngine::EventSystems::PointerEventData* value);
    // public System.Boolean get_MarkedForDeletion()
    // Offset: 0x47D9C4C
    bool get_MarkedForDeletion();
    // private System.Void set_MarkedForDeletion(System.Boolean value)
    // Offset: 0x47D9C54
    void set_MarkedForDeletion(bool value);
    // public UnityEngine.Canvas get_Canvas()
    // Offset: 0x47D9C60
    ::UnityEngine::Canvas* get_Canvas();
    // public UnityEngine.Vector3 get_Position()
    // Offset: 0x47D9C68
    ::UnityEngine::Vector3 get_Position();
    // public UnityEngine.GameObject get_HoveredSelectable()
    // Offset: 0x47D9C74
    ::UnityEngine::GameObject* get_HoveredSelectable();
    // public System.Void .ctor(UnityEngine.Canvas canvas)
    // Offset: 0x47D7DA4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PointableCanvasModule::Pointer* New_ctor(::UnityEngine::Canvas* canvas) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::PointableCanvasModule::Pointer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PointableCanvasModule::Pointer*, creationType>(canvas)));
    }
    // public System.Void Press()
    // Offset: 0x47D7DDC
    void Press();
    // public System.Void Release()
    // Offset: 0x47D7DF4
    void Release();
    // public System.Void ReadAndResetPressedReleased(out System.Boolean pressed, out System.Boolean released)
    // Offset: 0x47D894C
    void ReadAndResetPressedReleased(ByRef<bool> pressed, ByRef<bool> released);
    // public System.Void MarkForDeletion()
    // Offset: 0x47D7A54
    void MarkForDeletion();
    // public System.Void SetPosition(UnityEngine.Vector3 position)
    // Offset: 0x47D9C7C
    void SetPosition(::UnityEngine::Vector3 position);
    // public System.Void SetHoveredSelectable(UnityEngine.GameObject hoveredSelectable)
    // Offset: 0x47D9C88
    void SetHoveredSelectable(::UnityEngine::GameObject* hoveredSelectable);
  }; // Oculus.Interaction.PointableCanvasModule/Pointer
  #pragma pack(pop)
  static check_size<sizeof(PointableCanvasModule::Pointer), 66 + sizeof(bool)> __Oculus_Interaction_PointableCanvasModule_PointerSizeCheck;
  static_assert(sizeof(PointableCanvasModule::Pointer) == 0x43);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::PointableCanvasModule::Pointer::get_PointerEventData
// Il2CppName: get_PointerEventData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::EventSystems::PointerEventData* (Oculus::Interaction::PointableCanvasModule::Pointer::*)()>(&Oculus::Interaction::PointableCanvasModule::Pointer::get_PointerEventData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableCanvasModule::Pointer*), "get_PointerEventData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableCanvasModule::Pointer::set_PointerEventData
// Il2CppName: set_PointerEventData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PointableCanvasModule::Pointer::*)(::UnityEngine::EventSystems::PointerEventData*)>(&Oculus::Interaction::PointableCanvasModule::Pointer::set_PointerEventData)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.EventSystems", "PointerEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableCanvasModule::Pointer*), "set_PointerEventData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableCanvasModule::Pointer::get_MarkedForDeletion
// Il2CppName: get_MarkedForDeletion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::PointableCanvasModule::Pointer::*)()>(&Oculus::Interaction::PointableCanvasModule::Pointer::get_MarkedForDeletion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableCanvasModule::Pointer*), "get_MarkedForDeletion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableCanvasModule::Pointer::set_MarkedForDeletion
// Il2CppName: set_MarkedForDeletion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PointableCanvasModule::Pointer::*)(bool)>(&Oculus::Interaction::PointableCanvasModule::Pointer::set_MarkedForDeletion)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableCanvasModule::Pointer*), "set_MarkedForDeletion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableCanvasModule::Pointer::get_Canvas
// Il2CppName: get_Canvas
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Canvas* (Oculus::Interaction::PointableCanvasModule::Pointer::*)()>(&Oculus::Interaction::PointableCanvasModule::Pointer::get_Canvas)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableCanvasModule::Pointer*), "get_Canvas", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableCanvasModule::Pointer::get_Position
// Il2CppName: get_Position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Oculus::Interaction::PointableCanvasModule::Pointer::*)()>(&Oculus::Interaction::PointableCanvasModule::Pointer::get_Position)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableCanvasModule::Pointer*), "get_Position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableCanvasModule::Pointer::get_HoveredSelectable
// Il2CppName: get_HoveredSelectable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (Oculus::Interaction::PointableCanvasModule::Pointer::*)()>(&Oculus::Interaction::PointableCanvasModule::Pointer::get_HoveredSelectable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableCanvasModule::Pointer*), "get_HoveredSelectable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableCanvasModule::Pointer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Interaction::PointableCanvasModule::Pointer::Press
// Il2CppName: Press
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PointableCanvasModule::Pointer::*)()>(&Oculus::Interaction::PointableCanvasModule::Pointer::Press)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableCanvasModule::Pointer*), "Press", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableCanvasModule::Pointer::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PointableCanvasModule::Pointer::*)()>(&Oculus::Interaction::PointableCanvasModule::Pointer::Release)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableCanvasModule::Pointer*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableCanvasModule::Pointer::ReadAndResetPressedReleased
// Il2CppName: ReadAndResetPressedReleased
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PointableCanvasModule::Pointer::*)(ByRef<bool>, ByRef<bool>)>(&Oculus::Interaction::PointableCanvasModule::Pointer::ReadAndResetPressedReleased)> {
  static const MethodInfo* get() {
    static auto* pressed = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    static auto* released = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableCanvasModule::Pointer*), "ReadAndResetPressedReleased", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pressed, released});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableCanvasModule::Pointer::MarkForDeletion
// Il2CppName: MarkForDeletion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PointableCanvasModule::Pointer::*)()>(&Oculus::Interaction::PointableCanvasModule::Pointer::MarkForDeletion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableCanvasModule::Pointer*), "MarkForDeletion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableCanvasModule::Pointer::SetPosition
// Il2CppName: SetPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PointableCanvasModule::Pointer::*)(::UnityEngine::Vector3)>(&Oculus::Interaction::PointableCanvasModule::Pointer::SetPosition)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableCanvasModule::Pointer*), "SetPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableCanvasModule::Pointer::SetHoveredSelectable
// Il2CppName: SetHoveredSelectable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PointableCanvasModule::Pointer::*)(::UnityEngine::GameObject*)>(&Oculus::Interaction::PointableCanvasModule::Pointer::SetHoveredSelectable)> {
  static const MethodInfo* get() {
    static auto* hoveredSelectable = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableCanvasModule::Pointer*), "SetHoveredSelectable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hoveredSelectable});
  }
};
