// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
  // Forward declaring type: IList`1<T>
  template<typename T>
  class IList_1;
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: HashSetExtensions
  class HashSetExtensions;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::HashSetExtensions);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::HashSetExtensions*, "Oculus.Interaction", "HashSetExtensions");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.HashSetExtensions
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExtensionAttribute] Offset: FFFFFFFF
  class HashSetExtensions : public ::Il2CppObject {
    public:
    // static public System.Void UnionWithNonAlloc(System.Collections.Generic.HashSet`1<T> hashSetToModify, System.Collections.Generic.HashSet`1<T> other)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void UnionWithNonAlloc(::System::Collections::Generic::HashSet_1<T>* hashSetToModify, ::System::Collections::Generic::HashSet_1<T>* other) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::HashSetExtensions::UnionWithNonAlloc");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Oculus.Interaction", "HashSetExtensions", "UnionWithNonAlloc", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hashSetToModify), ::il2cpp_utils::ExtractType(other)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, hashSetToModify, other);
    }
    // static public System.Void UnionWithNonAlloc(System.Collections.Generic.HashSet`1<T> hashSetToModify, System.Collections.Generic.IList`1<T> other)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void UnionWithNonAlloc(::System::Collections::Generic::HashSet_1<T>* hashSetToModify, ::System::Collections::Generic::IList_1<T>* other) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::HashSetExtensions::UnionWithNonAlloc");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Oculus.Interaction", "HashSetExtensions", "UnionWithNonAlloc", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hashSetToModify), ::il2cpp_utils::ExtractType(other)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, hashSetToModify, other);
    }
    // static public System.Void ExceptWithNonAlloc(System.Collections.Generic.HashSet`1<T> hashSetToModify, System.Collections.Generic.HashSet`1<T> other)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void ExceptWithNonAlloc(::System::Collections::Generic::HashSet_1<T>* hashSetToModify, ::System::Collections::Generic::HashSet_1<T>* other) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::HashSetExtensions::ExceptWithNonAlloc");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Oculus.Interaction", "HashSetExtensions", "ExceptWithNonAlloc", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hashSetToModify), ::il2cpp_utils::ExtractType(other)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, hashSetToModify, other);
    }
    // static public System.Void ExceptWithNonAlloc(System.Collections.Generic.HashSet`1<T> hashSetToModify, System.Collections.Generic.IList`1<T> other)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void ExceptWithNonAlloc(::System::Collections::Generic::HashSet_1<T>* hashSetToModify, ::System::Collections::Generic::IList_1<T>* other) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::HashSetExtensions::ExceptWithNonAlloc");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Oculus.Interaction", "HashSetExtensions", "ExceptWithNonAlloc", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hashSetToModify), ::il2cpp_utils::ExtractType(other)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, hashSetToModify, other);
    }
    // static public System.Boolean OverlapsNonAlloc(System.Collections.Generic.HashSet`1<T> hashSetToCheck, System.Collections.Generic.HashSet`1<T> other)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static bool OverlapsNonAlloc(::System::Collections::Generic::HashSet_1<T>* hashSetToCheck, ::System::Collections::Generic::HashSet_1<T>* other) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::HashSetExtensions::OverlapsNonAlloc");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Oculus.Interaction", "HashSetExtensions", "OverlapsNonAlloc", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hashSetToCheck), ::il2cpp_utils::ExtractType(other)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, hashSetToCheck, other);
    }
    // static public System.Boolean OverlapsNonAlloc(System.Collections.Generic.HashSet`1<T> hashSetToCheck, System.Collections.Generic.IList`1<T> other)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static bool OverlapsNonAlloc(::System::Collections::Generic::HashSet_1<T>* hashSetToCheck, ::System::Collections::Generic::IList_1<T>* other) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::HashSetExtensions::OverlapsNonAlloc");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Oculus.Interaction", "HashSetExtensions", "OverlapsNonAlloc", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hashSetToCheck), ::il2cpp_utils::ExtractType(other)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, hashSetToCheck, other);
    }
  }; // Oculus.Interaction.HashSetExtensions
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::HashSetExtensions::UnionWithNonAlloc
// Il2CppName: UnionWithNonAlloc
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Oculus::Interaction::HashSetExtensions::UnionWithNonAlloc
// Il2CppName: UnionWithNonAlloc
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Oculus::Interaction::HashSetExtensions::ExceptWithNonAlloc
// Il2CppName: ExceptWithNonAlloc
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Oculus::Interaction::HashSetExtensions::ExceptWithNonAlloc
// Il2CppName: ExceptWithNonAlloc
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Oculus::Interaction::HashSetExtensions::OverlapsNonAlloc
// Il2CppName: OverlapsNonAlloc
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Oculus::Interaction::HashSetExtensions::OverlapsNonAlloc
// Il2CppName: OverlapsNonAlloc
// Cannot write MetadataGetter for generic methods!
