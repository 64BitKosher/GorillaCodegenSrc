// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction
namespace Oculus::Interaction {
  // Forward declaring type: IInteractableView
  class IInteractableView;
  // Forward declaring type: MaterialPropertyBlockEditor
  class MaterialPropertyBlockEditor;
  // Forward declaring type: InteractableStateChangeArgs
  struct InteractableStateChangeArgs;
  // Forward declaring type: InteractableState
  struct InteractableState;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Object because it is already included!
  // Forward declaring type: Coroutine
  class Coroutine;
  // Forward declaring type: YieldInstruction
  class YieldInstruction;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: InteractableColorVisual
  class InteractableColorVisual;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::InteractableColorVisual);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::InteractableColorVisual*, "Oculus.Interaction", "InteractableColorVisual");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x89
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.InteractableColorVisual
  // [TokenAttribute] Offset: FFFFFFFF
  class InteractableColorVisual : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::Oculus::Interaction::InteractableColorVisual::ColorState
    class ColorState;
    // Nested type: ::Oculus::Interaction::InteractableColorVisual::$ChangeColor$d__25
    class $ChangeColor$d__25;
    public:
    // private UnityEngine.Object _interactableView
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Object* interactableView;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.IInteractableView <InteractableView>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    ::Oculus::Interaction::IInteractableView* InteractableView;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::IInteractableView*) == 0x8);
    // private Oculus.Interaction.MaterialPropertyBlockEditor _editor
    // Size: 0x8
    // Offset: 0x30
    ::Oculus::Interaction::MaterialPropertyBlockEditor* editor;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::MaterialPropertyBlockEditor*) == 0x8);
    // private System.String _colorShaderPropertyName
    // Size: 0x8
    // Offset: 0x38
    ::StringW colorShaderPropertyName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private Oculus.Interaction.InteractableColorVisual/ColorState _normalColorState
    // Size: 0x8
    // Offset: 0x40
    ::Oculus::Interaction::InteractableColorVisual::ColorState* normalColorState;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::InteractableColorVisual::ColorState*) == 0x8);
    // private Oculus.Interaction.InteractableColorVisual/ColorState _hoverColorState
    // Size: 0x8
    // Offset: 0x48
    ::Oculus::Interaction::InteractableColorVisual::ColorState* hoverColorState;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::InteractableColorVisual::ColorState*) == 0x8);
    // private Oculus.Interaction.InteractableColorVisual/ColorState _selectColorState
    // Size: 0x8
    // Offset: 0x50
    ::Oculus::Interaction::InteractableColorVisual::ColorState* selectColorState;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::InteractableColorVisual::ColorState*) == 0x8);
    // private Oculus.Interaction.InteractableColorVisual/ColorState _disabledColorState
    // Size: 0x8
    // Offset: 0x58
    ::Oculus::Interaction::InteractableColorVisual::ColorState* disabledColorState;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::InteractableColorVisual::ColorState*) == 0x8);
    // private UnityEngine.Color _currentColor
    // Size: 0x10
    // Offset: 0x60
    ::UnityEngine::Color currentColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private Oculus.Interaction.InteractableColorVisual/ColorState _target
    // Size: 0x8
    // Offset: 0x70
    ::Oculus::Interaction::InteractableColorVisual::ColorState* target;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::InteractableColorVisual::ColorState*) == 0x8);
    // private System.Int32 _colorShaderID
    // Size: 0x4
    // Offset: 0x78
    int colorShaderID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: colorShaderID and: routine
    char __padding10[0x4] = {};
    // private UnityEngine.Coroutine _routine
    // Size: 0x8
    // Offset: 0x80
    ::UnityEngine::Coroutine* routine;
    // Field size check
    static_assert(sizeof(::UnityEngine::Coroutine*) == 0x8);
    // protected System.Boolean _started
    // Size: 0x1
    // Offset: 0x88
    bool started;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get static field: static private readonly UnityEngine.YieldInstruction _waiter
    static ::UnityEngine::YieldInstruction* _get__waiter();
    // Set static field: static private readonly UnityEngine.YieldInstruction _waiter
    static void _set__waiter(::UnityEngine::YieldInstruction* value);
    // Get instance field reference: private UnityEngine.Object _interactableView
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__interactableView();
    // Get instance field reference: private Oculus.Interaction.IInteractableView <InteractableView>k__BackingField
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::IInteractableView*& dyn_$InteractableView$k__BackingField();
    // Get instance field reference: private Oculus.Interaction.MaterialPropertyBlockEditor _editor
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::MaterialPropertyBlockEditor*& dyn__editor();
    // Get instance field reference: private System.String _colorShaderPropertyName
    [[deprecated("Use field access instead!")]] ::StringW& dyn__colorShaderPropertyName();
    // Get instance field reference: private Oculus.Interaction.InteractableColorVisual/ColorState _normalColorState
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::InteractableColorVisual::ColorState*& dyn__normalColorState();
    // Get instance field reference: private Oculus.Interaction.InteractableColorVisual/ColorState _hoverColorState
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::InteractableColorVisual::ColorState*& dyn__hoverColorState();
    // Get instance field reference: private Oculus.Interaction.InteractableColorVisual/ColorState _selectColorState
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::InteractableColorVisual::ColorState*& dyn__selectColorState();
    // Get instance field reference: private Oculus.Interaction.InteractableColorVisual/ColorState _disabledColorState
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::InteractableColorVisual::ColorState*& dyn__disabledColorState();
    // Get instance field reference: private UnityEngine.Color _currentColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__currentColor();
    // Get instance field reference: private Oculus.Interaction.InteractableColorVisual/ColorState _target
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::InteractableColorVisual::ColorState*& dyn__target();
    // Get instance field reference: private System.Int32 _colorShaderID
    [[deprecated("Use field access instead!")]] int& dyn__colorShaderID();
    // Get instance field reference: private UnityEngine.Coroutine _routine
    [[deprecated("Use field access instead!")]] ::UnityEngine::Coroutine*& dyn__routine();
    // Get instance field reference: protected System.Boolean _started
    [[deprecated("Use field access instead!")]] bool& dyn__started();
    // private Oculus.Interaction.IInteractableView get_InteractableView()
    // Offset: 0x47C7E2C
    ::Oculus::Interaction::IInteractableView* get_InteractableView();
    // private System.Void set_InteractableView(Oculus.Interaction.IInteractableView value)
    // Offset: 0x47C7E34
    void set_InteractableView(::Oculus::Interaction::IInteractableView* value);
    // protected System.Void Awake()
    // Offset: 0x47C7E3C
    void Awake();
    // protected System.Void Start()
    // Offset: 0x47C7E94
    void Start();
    // protected System.Void OnEnable()
    // Offset: 0x47C7EEC
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x47C8008
    void OnDisable();
    // private System.Void UpdateVisualState(Oculus.Interaction.InteractableStateChangeArgs args)
    // Offset: 0x47C8108
    void UpdateVisualState(::Oculus::Interaction::InteractableStateChangeArgs args);
    // protected System.Void UpdateVisual()
    // Offset: 0x47C8114
    void UpdateVisual();
    // private Oculus.Interaction.InteractableColorVisual/ColorState ColorForState(Oculus.Interaction.InteractableState state)
    // Offset: 0x47C8258
    ::Oculus::Interaction::InteractableColorVisual::ColorState* ColorForState(::Oculus::Interaction::InteractableState state);
    // private System.Collections.IEnumerator ChangeColor(Oculus.Interaction.InteractableColorVisual/ColorState targetState)
    // Offset: 0x47C82E4
    ::System::Collections::IEnumerator* ChangeColor(::Oculus::Interaction::InteractableColorVisual::ColorState* targetState);
    // private System.Void SetColor(UnityEngine.Color color)
    // Offset: 0x47C8394
    void SetColor(::UnityEngine::Color color);
    // private System.Void CancelRoutine()
    // Offset: 0x47C82A0
    void CancelRoutine();
    // public System.Void InjectAllInteractableColorVisual(Oculus.Interaction.IInteractableView interactableView, Oculus.Interaction.MaterialPropertyBlockEditor editor)
    // Offset: 0x47C83F8
    void InjectAllInteractableColorVisual(::Oculus::Interaction::IInteractableView* interactableView, ::Oculus::Interaction::MaterialPropertyBlockEditor* editor);
    // public System.Void InjectInteractableView(Oculus.Interaction.IInteractableView interactableview)
    // Offset: 0x47C8424
    void InjectInteractableView(::Oculus::Interaction::IInteractableView* interactableview);
    // public System.Void InjectMaterialPropertyBlockEditor(Oculus.Interaction.MaterialPropertyBlockEditor editor)
    // Offset: 0x47C84F4
    void InjectMaterialPropertyBlockEditor(::Oculus::Interaction::MaterialPropertyBlockEditor* editor);
    // public System.Void InjectOptionalColorShaderPropertyName(System.String colorShaderPropertyName)
    // Offset: 0x47C84FC
    void InjectOptionalColorShaderPropertyName(::StringW colorShaderPropertyName);
    // public System.Void InjectOptionalNormalColorState(Oculus.Interaction.InteractableColorVisual/ColorState normalColorState)
    // Offset: 0x47C8504
    void InjectOptionalNormalColorState(::Oculus::Interaction::InteractableColorVisual::ColorState* normalColorState);
    // public System.Void InjectOptionalHoverColorState(Oculus.Interaction.InteractableColorVisual/ColorState hoverColorState)
    // Offset: 0x47C850C
    void InjectOptionalHoverColorState(::Oculus::Interaction::InteractableColorVisual::ColorState* hoverColorState);
    // public System.Void InjectOptionalSelectColorState(Oculus.Interaction.InteractableColorVisual/ColorState selectColorState)
    // Offset: 0x47C8514
    void InjectOptionalSelectColorState(::Oculus::Interaction::InteractableColorVisual::ColorState* selectColorState);
    // public System.Void .ctor()
    // Offset: 0x47C851C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InteractableColorVisual* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::InteractableColorVisual::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InteractableColorVisual*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x47C86A4
    static void _cctor();
  }; // Oculus.Interaction.InteractableColorVisual
  #pragma pack(pop)
  static check_size<sizeof(InteractableColorVisual), 136 + sizeof(bool)> __Oculus_Interaction_InteractableColorVisualSizeCheck;
  static_assert(sizeof(InteractableColorVisual) == 0x89);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::InteractableColorVisual::get_InteractableView
// Il2CppName: get_InteractableView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::IInteractableView* (Oculus::Interaction::InteractableColorVisual::*)()>(&Oculus::Interaction::InteractableColorVisual::get_InteractableView)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractableColorVisual*), "get_InteractableView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractableColorVisual::set_InteractableView
// Il2CppName: set_InteractableView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractableColorVisual::*)(::Oculus::Interaction::IInteractableView*)>(&Oculus::Interaction::InteractableColorVisual::set_InteractableView)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IInteractableView")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractableColorVisual*), "set_InteractableView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractableColorVisual::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractableColorVisual::*)()>(&Oculus::Interaction::InteractableColorVisual::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractableColorVisual*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractableColorVisual::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractableColorVisual::*)()>(&Oculus::Interaction::InteractableColorVisual::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractableColorVisual*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractableColorVisual::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractableColorVisual::*)()>(&Oculus::Interaction::InteractableColorVisual::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractableColorVisual*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractableColorVisual::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractableColorVisual::*)()>(&Oculus::Interaction::InteractableColorVisual::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractableColorVisual*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractableColorVisual::UpdateVisualState
// Il2CppName: UpdateVisualState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractableColorVisual::*)(::Oculus::Interaction::InteractableStateChangeArgs)>(&Oculus::Interaction::InteractableColorVisual::UpdateVisualState)> {
  static const MethodInfo* get() {
    static auto* args = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "InteractableStateChangeArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractableColorVisual*), "UpdateVisualState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{args});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractableColorVisual::UpdateVisual
// Il2CppName: UpdateVisual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractableColorVisual::*)()>(&Oculus::Interaction::InteractableColorVisual::UpdateVisual)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractableColorVisual*), "UpdateVisual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractableColorVisual::ColorForState
// Il2CppName: ColorForState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::InteractableColorVisual::ColorState* (Oculus::Interaction::InteractableColorVisual::*)(::Oculus::Interaction::InteractableState)>(&Oculus::Interaction::InteractableColorVisual::ColorForState)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "InteractableState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractableColorVisual*), "ColorForState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractableColorVisual::ChangeColor
// Il2CppName: ChangeColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (Oculus::Interaction::InteractableColorVisual::*)(::Oculus::Interaction::InteractableColorVisual::ColorState*)>(&Oculus::Interaction::InteractableColorVisual::ChangeColor)> {
  static const MethodInfo* get() {
    static auto* targetState = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "InteractableColorVisual/ColorState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractableColorVisual*), "ChangeColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetState});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractableColorVisual::SetColor
// Il2CppName: SetColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractableColorVisual::*)(::UnityEngine::Color)>(&Oculus::Interaction::InteractableColorVisual::SetColor)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractableColorVisual*), "SetColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractableColorVisual::CancelRoutine
// Il2CppName: CancelRoutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractableColorVisual::*)()>(&Oculus::Interaction::InteractableColorVisual::CancelRoutine)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractableColorVisual*), "CancelRoutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractableColorVisual::InjectAllInteractableColorVisual
// Il2CppName: InjectAllInteractableColorVisual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractableColorVisual::*)(::Oculus::Interaction::IInteractableView*, ::Oculus::Interaction::MaterialPropertyBlockEditor*)>(&Oculus::Interaction::InteractableColorVisual::InjectAllInteractableColorVisual)> {
  static const MethodInfo* get() {
    static auto* interactableView = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IInteractableView")->byval_arg;
    static auto* editor = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "MaterialPropertyBlockEditor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractableColorVisual*), "InjectAllInteractableColorVisual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactableView, editor});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractableColorVisual::InjectInteractableView
// Il2CppName: InjectInteractableView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractableColorVisual::*)(::Oculus::Interaction::IInteractableView*)>(&Oculus::Interaction::InteractableColorVisual::InjectInteractableView)> {
  static const MethodInfo* get() {
    static auto* interactableview = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IInteractableView")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractableColorVisual*), "InjectInteractableView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactableview});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractableColorVisual::InjectMaterialPropertyBlockEditor
// Il2CppName: InjectMaterialPropertyBlockEditor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractableColorVisual::*)(::Oculus::Interaction::MaterialPropertyBlockEditor*)>(&Oculus::Interaction::InteractableColorVisual::InjectMaterialPropertyBlockEditor)> {
  static const MethodInfo* get() {
    static auto* editor = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "MaterialPropertyBlockEditor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractableColorVisual*), "InjectMaterialPropertyBlockEditor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{editor});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractableColorVisual::InjectOptionalColorShaderPropertyName
// Il2CppName: InjectOptionalColorShaderPropertyName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractableColorVisual::*)(::StringW)>(&Oculus::Interaction::InteractableColorVisual::InjectOptionalColorShaderPropertyName)> {
  static const MethodInfo* get() {
    static auto* colorShaderPropertyName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractableColorVisual*), "InjectOptionalColorShaderPropertyName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colorShaderPropertyName});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractableColorVisual::InjectOptionalNormalColorState
// Il2CppName: InjectOptionalNormalColorState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractableColorVisual::*)(::Oculus::Interaction::InteractableColorVisual::ColorState*)>(&Oculus::Interaction::InteractableColorVisual::InjectOptionalNormalColorState)> {
  static const MethodInfo* get() {
    static auto* normalColorState = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "InteractableColorVisual/ColorState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractableColorVisual*), "InjectOptionalNormalColorState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{normalColorState});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractableColorVisual::InjectOptionalHoverColorState
// Il2CppName: InjectOptionalHoverColorState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractableColorVisual::*)(::Oculus::Interaction::InteractableColorVisual::ColorState*)>(&Oculus::Interaction::InteractableColorVisual::InjectOptionalHoverColorState)> {
  static const MethodInfo* get() {
    static auto* hoverColorState = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "InteractableColorVisual/ColorState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractableColorVisual*), "InjectOptionalHoverColorState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hoverColorState});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractableColorVisual::InjectOptionalSelectColorState
// Il2CppName: InjectOptionalSelectColorState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractableColorVisual::*)(::Oculus::Interaction::InteractableColorVisual::ColorState*)>(&Oculus::Interaction::InteractableColorVisual::InjectOptionalSelectColorState)> {
  static const MethodInfo* get() {
    static auto* selectColorState = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "InteractableColorVisual/ColorState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractableColorVisual*), "InjectOptionalSelectColorState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{selectColorState});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractableColorVisual::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Interaction::InteractableColorVisual::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Oculus::Interaction::InteractableColorVisual::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractableColorVisual*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
