// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction::Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: Handedness
  struct Handedness;
  // Forward declaring type: HandJointId
  struct HandJointId;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Mesh
  class Mesh;
  // Forward declaring type: SkinnedMeshRenderer
  class SkinnedMeshRenderer;
  // Forward declaring type: MaterialPropertyBlock
  class MaterialPropertyBlock;
}
// Forward declaring namespace: Oculus::Interaction
namespace Oculus::Interaction {
  // Forward declaring type: HandVisual
  class HandVisual;
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: HandFingerMaskGenerator
  class HandFingerMaskGenerator;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::HandFingerMaskGenerator);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::HandFingerMaskGenerator*, "Oculus.Interaction", "HandFingerMaskGenerator");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.HandFingerMaskGenerator
  // [TokenAttribute] Offset: FFFFFFFF
  class HandFingerMaskGenerator : public ::Il2CppObject {
    public:
    // Get static field: static private readonly System.Int32[] _fingerLinesID
    static ::ArrayW<int> _get__fingerLinesID();
    // Set static field: static private readonly System.Int32[] _fingerLinesID
    static void _set__fingerLinesID(::ArrayW<int> value);
    // Get static field: static private readonly System.Int32[] _palmFingerLinesID
    static ::ArrayW<int> _get__palmFingerLinesID();
    // Set static field: static private readonly System.Int32[] _palmFingerLinesID
    static void _set__palmFingerLinesID(::ArrayW<int> value);
    // static private System.Single HandednessMultiplier(Oculus.Interaction.Input.Handedness hand)
    // Offset: 0x47740D0
    static float HandednessMultiplier(::Oculus::Interaction::Input::Handedness hand);
    // static private System.Collections.Generic.List`1<UnityEngine.Vector2> GenerateModelUV(Oculus.Interaction.Input.Handedness hand, UnityEngine.Mesh sharedHandMesh, out UnityEngine.Vector2 minPosition, out UnityEngine.Vector2 maxPosition)
    // Offset: 0x47740E4
    static ::System::Collections::Generic::List_1<::UnityEngine::Vector2>* GenerateModelUV(::Oculus::Interaction::Input::Handedness hand, ::UnityEngine::Mesh* sharedHandMesh, ByRef<::UnityEngine::Vector2> minPosition, ByRef<::UnityEngine::Vector2> maxPosition);
    // static private UnityEngine.Vector2 getPositionOnRegion(Oculus.Interaction.HandVisual handVisual, Oculus.Interaction.Input.HandJointId jointId, UnityEngine.Vector2 minRegion, System.Single sideLength)
    // Offset: 0x47744C4
    static ::UnityEngine::Vector2 getPositionOnRegion(::Oculus::Interaction::HandVisual* handVisual, ::Oculus::Interaction::Input::HandJointId jointId, ::UnityEngine::Vector2 minRegion, float sideLength);
    // static private UnityEngine.Vector4 GenerateLineData(Oculus.Interaction.HandVisual handVisual, Oculus.Interaction.Input.HandJointId jointIdStart, Oculus.Interaction.Input.HandJointId jointIdEnd, UnityEngine.Vector2 minRegion, System.Single sideLength, System.Single lineScale)
    // Offset: 0x477463C
    static ::UnityEngine::Vector4 GenerateLineData(::Oculus::Interaction::HandVisual* handVisual, ::Oculus::Interaction::Input::HandJointId jointIdStart, ::Oculus::Interaction::Input::HandJointId jointIdEnd, ::UnityEngine::Vector2 minRegion, float sideLength, float lineScale);
    // static private UnityEngine.Vector4[] GenerateFingerLines(Oculus.Interaction.HandVisual handVisual, UnityEngine.Vector2 minPosition, System.Single maxLength, System.Single[] lineScale)
    // Offset: 0x477471C
    static ::ArrayW<::UnityEngine::Vector4> GenerateFingerLines(::Oculus::Interaction::HandVisual* handVisual, ::UnityEngine::Vector2 minPosition, float maxLength, ::ArrayW<float> lineScale);
    // static private System.Void SetGlowModelUV(UnityEngine.SkinnedMeshRenderer handRenderer, Oculus.Interaction.HandVisual handVisual, out UnityEngine.Vector2 minPosition, out UnityEngine.Vector2 maxPosition)
    // Offset: 0x4774978
    static void SetGlowModelUV(::UnityEngine::SkinnedMeshRenderer* handRenderer, ::Oculus::Interaction::HandVisual* handVisual, ByRef<::UnityEngine::Vector2> minPosition, ByRef<::UnityEngine::Vector2> maxPosition);
    // static private System.Void SetFingerMaskUniforms(Oculus.Interaction.HandVisual handVisual, UnityEngine.MaterialPropertyBlock materialPropertyBlock, UnityEngine.Vector2 minPosition, UnityEngine.Vector2 maxPosition)
    // Offset: 0x4774AAC
    static void SetFingerMaskUniforms(::Oculus::Interaction::HandVisual* handVisual, ::UnityEngine::MaterialPropertyBlock* materialPropertyBlock, ::UnityEngine::Vector2 minPosition, ::UnityEngine::Vector2 maxPosition);
    // static public System.Void GenerateFingerMask(UnityEngine.SkinnedMeshRenderer handRenderer, Oculus.Interaction.HandVisual handVisual, UnityEngine.MaterialPropertyBlock materialPropertyBlock)
    // Offset: 0x4774D10
    static void GenerateFingerMask(::UnityEngine::SkinnedMeshRenderer* handRenderer, ::Oculus::Interaction::HandVisual* handVisual, ::UnityEngine::MaterialPropertyBlock* materialPropertyBlock);
    // public System.Void .ctor()
    // Offset: 0x4774DA0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HandFingerMaskGenerator* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::HandFingerMaskGenerator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HandFingerMaskGenerator*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x4774DA8
    static void _cctor();
  }; // Oculus.Interaction.HandFingerMaskGenerator
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::HandFingerMaskGenerator::HandednessMultiplier
// Il2CppName: HandednessMultiplier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::Oculus::Interaction::Input::Handedness)>(&Oculus::Interaction::HandFingerMaskGenerator::HandednessMultiplier)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "Handedness")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandFingerMaskGenerator*), "HandednessMultiplier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandFingerMaskGenerator::GenerateModelUV
// Il2CppName: GenerateModelUV
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::Vector2>* (*)(::Oculus::Interaction::Input::Handedness, ::UnityEngine::Mesh*, ByRef<::UnityEngine::Vector2>, ByRef<::UnityEngine::Vector2>)>(&Oculus::Interaction::HandFingerMaskGenerator::GenerateModelUV)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "Handedness")->byval_arg;
    static auto* sharedHandMesh = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    static auto* minPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->this_arg;
    static auto* maxPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandFingerMaskGenerator*), "GenerateModelUV", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand, sharedHandMesh, minPosition, maxPosition});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandFingerMaskGenerator::getPositionOnRegion
// Il2CppName: getPositionOnRegion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (*)(::Oculus::Interaction::HandVisual*, ::Oculus::Interaction::Input::HandJointId, ::UnityEngine::Vector2, float)>(&Oculus::Interaction::HandFingerMaskGenerator::getPositionOnRegion)> {
  static const MethodInfo* get() {
    static auto* handVisual = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "HandVisual")->byval_arg;
    static auto* jointId = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "HandJointId")->byval_arg;
    static auto* minRegion = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* sideLength = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandFingerMaskGenerator*), "getPositionOnRegion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handVisual, jointId, minRegion, sideLength});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandFingerMaskGenerator::GenerateLineData
// Il2CppName: GenerateLineData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (*)(::Oculus::Interaction::HandVisual*, ::Oculus::Interaction::Input::HandJointId, ::Oculus::Interaction::Input::HandJointId, ::UnityEngine::Vector2, float, float)>(&Oculus::Interaction::HandFingerMaskGenerator::GenerateLineData)> {
  static const MethodInfo* get() {
    static auto* handVisual = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "HandVisual")->byval_arg;
    static auto* jointIdStart = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "HandJointId")->byval_arg;
    static auto* jointIdEnd = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "HandJointId")->byval_arg;
    static auto* minRegion = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* sideLength = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* lineScale = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandFingerMaskGenerator*), "GenerateLineData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handVisual, jointIdStart, jointIdEnd, minRegion, sideLength, lineScale});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandFingerMaskGenerator::GenerateFingerLines
// Il2CppName: GenerateFingerLines
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Vector4> (*)(::Oculus::Interaction::HandVisual*, ::UnityEngine::Vector2, float, ::ArrayW<float>)>(&Oculus::Interaction::HandFingerMaskGenerator::GenerateFingerLines)> {
  static const MethodInfo* get() {
    static auto* handVisual = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "HandVisual")->byval_arg;
    static auto* minPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* maxLength = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* lineScale = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandFingerMaskGenerator*), "GenerateFingerLines", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handVisual, minPosition, maxLength, lineScale});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandFingerMaskGenerator::SetGlowModelUV
// Il2CppName: SetGlowModelUV
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::SkinnedMeshRenderer*, ::Oculus::Interaction::HandVisual*, ByRef<::UnityEngine::Vector2>, ByRef<::UnityEngine::Vector2>)>(&Oculus::Interaction::HandFingerMaskGenerator::SetGlowModelUV)> {
  static const MethodInfo* get() {
    static auto* handRenderer = &::il2cpp_utils::GetClassFromName("UnityEngine", "SkinnedMeshRenderer")->byval_arg;
    static auto* handVisual = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "HandVisual")->byval_arg;
    static auto* minPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->this_arg;
    static auto* maxPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandFingerMaskGenerator*), "SetGlowModelUV", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handRenderer, handVisual, minPosition, maxPosition});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandFingerMaskGenerator::SetFingerMaskUniforms
// Il2CppName: SetFingerMaskUniforms
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Oculus::Interaction::HandVisual*, ::UnityEngine::MaterialPropertyBlock*, ::UnityEngine::Vector2, ::UnityEngine::Vector2)>(&Oculus::Interaction::HandFingerMaskGenerator::SetFingerMaskUniforms)> {
  static const MethodInfo* get() {
    static auto* handVisual = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "HandVisual")->byval_arg;
    static auto* materialPropertyBlock = &::il2cpp_utils::GetClassFromName("UnityEngine", "MaterialPropertyBlock")->byval_arg;
    static auto* minPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* maxPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandFingerMaskGenerator*), "SetFingerMaskUniforms", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handVisual, materialPropertyBlock, minPosition, maxPosition});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandFingerMaskGenerator::GenerateFingerMask
// Il2CppName: GenerateFingerMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::SkinnedMeshRenderer*, ::Oculus::Interaction::HandVisual*, ::UnityEngine::MaterialPropertyBlock*)>(&Oculus::Interaction::HandFingerMaskGenerator::GenerateFingerMask)> {
  static const MethodInfo* get() {
    static auto* handRenderer = &::il2cpp_utils::GetClassFromName("UnityEngine", "SkinnedMeshRenderer")->byval_arg;
    static auto* handVisual = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "HandVisual")->byval_arg;
    static auto* materialPropertyBlock = &::il2cpp_utils::GetClassFromName("UnityEngine", "MaterialPropertyBlock")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandFingerMaskGenerator*), "GenerateFingerMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handRenderer, handVisual, materialPropertyBlock});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandFingerMaskGenerator::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Interaction::HandFingerMaskGenerator::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Oculus::Interaction::HandFingerMaskGenerator::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandFingerMaskGenerator*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
