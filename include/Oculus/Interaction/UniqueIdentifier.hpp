// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Random
  class Random;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: UniqueIdentifier
  class UniqueIdentifier;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::UniqueIdentifier);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::UniqueIdentifier*, "Oculus.Interaction", "UniqueIdentifier");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x14
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.UniqueIdentifier
  // [TokenAttribute] Offset: FFFFFFFF
  class UniqueIdentifier : public ::Il2CppObject {
    public:
    public:
    // private System.Int32 <ID>k__BackingField
    // Size: 0x4
    // Offset: 0x10
    int _ID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return _ID;
    }
    // Get static field: static private System.Random Random
    static ::System::Random* _get_Random();
    // Set static field: static private System.Random Random
    static void _set_Random(::System::Random* value);
    // Get static field: static private System.Collections.Generic.HashSet`1<System.Int32> _identifierSet
    static ::System::Collections::Generic::HashSet_1<int>* _get__identifierSet();
    // Set static field: static private System.Collections.Generic.HashSet`1<System.Int32> _identifierSet
    static void _set__identifierSet(::System::Collections::Generic::HashSet_1<int>* value);
    // Get instance field reference: private System.Int32 <ID>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$ID$k__BackingField();
    // public System.Int32 get_ID()
    // Offset: 0x4789904
    int get_ID();
    // private System.Void set_ID(System.Int32 value)
    // Offset: 0x478990C
    void set_ID(int value);
    // private System.Void .ctor(System.Int32 identifier)
    // Offset: 0x4789914
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UniqueIdentifier* New_ctor(int identifier) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::UniqueIdentifier::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UniqueIdentifier*, creationType>(identifier)));
    }
    // static public Oculus.Interaction.UniqueIdentifier Generate()
    // Offset: 0x477B6A8
    static ::Oculus::Interaction::UniqueIdentifier* Generate();
    // static public System.Void Release(Oculus.Interaction.UniqueIdentifier identifier)
    // Offset: 0x477BA24
    static void Release(::Oculus::Interaction::UniqueIdentifier* identifier);
    // static private System.Void .cctor()
    // Offset: 0x478993C
    static void _cctor();
  }; // Oculus.Interaction.UniqueIdentifier
  #pragma pack(pop)
  static check_size<sizeof(UniqueIdentifier), 16 + sizeof(int)> __Oculus_Interaction_UniqueIdentifierSizeCheck;
  static_assert(sizeof(UniqueIdentifier) == 0x14);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::UniqueIdentifier::get_ID
// Il2CppName: get_ID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Oculus::Interaction::UniqueIdentifier::*)()>(&Oculus::Interaction::UniqueIdentifier::get_ID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UniqueIdentifier*), "get_ID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UniqueIdentifier::set_ID
// Il2CppName: set_ID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::UniqueIdentifier::*)(int)>(&Oculus::Interaction::UniqueIdentifier::set_ID)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UniqueIdentifier*), "set_ID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UniqueIdentifier::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Interaction::UniqueIdentifier::Generate
// Il2CppName: Generate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::UniqueIdentifier* (*)()>(&Oculus::Interaction::UniqueIdentifier::Generate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UniqueIdentifier*), "Generate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UniqueIdentifier::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Oculus::Interaction::UniqueIdentifier*)>(&Oculus::Interaction::UniqueIdentifier::Release)> {
  static const MethodInfo* get() {
    static auto* identifier = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "UniqueIdentifier")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UniqueIdentifier*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{identifier});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::UniqueIdentifier::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Oculus::Interaction::UniqueIdentifier::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::UniqueIdentifier*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
