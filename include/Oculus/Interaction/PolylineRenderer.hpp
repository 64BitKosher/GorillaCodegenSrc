// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: UnityEngine.Bounds
#include "UnityEngine/Bounds.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Mesh
  class Mesh;
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: ComputeBuffer
  class ComputeBuffer;
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: PolylineRenderer
  class PolylineRenderer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::PolylineRenderer);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::PolylineRenderer*, "Oculus.Interaction", "PolylineRenderer");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0xD8
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.PolylineRenderer
  // [TokenAttribute] Offset: FFFFFFFF
  class PolylineRenderer : public ::Il2CppObject {
    public:
    public:
    // private UnityEngine.Vector4[] _positions
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<::UnityEngine::Vector4> positions;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector4>) == 0x8);
    // private System.Boolean _positionsNeedUpdate
    // Size: 0x1
    // Offset: 0x18
    bool positionsNeedUpdate;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: positionsNeedUpdate and: colors
    char __padding1[0x7] = {};
    // private UnityEngine.Color[] _colors
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::UnityEngine::Color> colors;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Color>) == 0x8);
    // private System.Boolean _colorsNeedUpdate
    // Size: 0x1
    // Offset: 0x28
    bool colorsNeedUpdate;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: colorsNeedUpdate and: bounds
    char __padding3[0x3] = {};
    // private UnityEngine.Bounds _bounds
    // Size: 0x18
    // Offset: 0x2C
    ::UnityEngine::Bounds bounds;
    // Field size check
    static_assert(sizeof(::UnityEngine::Bounds) == 0x18);
    // Padding between fields: bounds and: baseMesh
    char __padding4[0x4] = {};
    // private UnityEngine.Mesh _baseMesh
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Mesh* baseMesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::Mesh*) == 0x8);
    // private UnityEngine.Material _material
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::Material* material;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private System.Boolean _renderSinglePass
    // Size: 0x1
    // Offset: 0x58
    bool renderSinglePass;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: renderSinglePass and: positionBuffer
    char __padding7[0x7] = {};
    // private UnityEngine.ComputeBuffer _positionBuffer
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::ComputeBuffer* positionBuffer;
    // Field size check
    static_assert(sizeof(::UnityEngine::ComputeBuffer*) == 0x8);
    // private UnityEngine.ComputeBuffer _colorBuffer
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::ComputeBuffer* colorBuffer;
    // Field size check
    static_assert(sizeof(::UnityEngine::ComputeBuffer*) == 0x8);
    // private UnityEngine.ComputeBuffer _argsBuffer
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::ComputeBuffer* argsBuffer;
    // Field size check
    static_assert(sizeof(::UnityEngine::ComputeBuffer*) == 0x8);
    // private System.UInt32[] _argsData
    // Size: 0x8
    // Offset: 0x78
    ::ArrayW<uint> argsData;
    // Field size check
    static_assert(sizeof(::ArrayW<uint>) == 0x8);
    // private System.Int32 _positionBufferShaderID
    // Size: 0x4
    // Offset: 0x80
    int positionBufferShaderID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _colorBufferShaderID
    // Size: 0x4
    // Offset: 0x84
    int colorBufferShaderID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _localToWorldShaderID
    // Size: 0x4
    // Offset: 0x88
    int localToWorldShaderID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _scaleShaderID
    // Size: 0x4
    // Offset: 0x8C
    int scaleShaderID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _maxLineCount
    // Size: 0x4
    // Offset: 0x90
    int maxLineCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Matrix4x4 _matrix
    // Size: 0x40
    // Offset: 0x94
    ::UnityEngine::Matrix4x4 matrix;
    // Field size check
    static_assert(sizeof(::UnityEngine::Matrix4x4) == 0x40);
    // private System.Single _lineScaleFactor
    // Size: 0x4
    // Offset: 0xD4
    float lineScaleFactor;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: private UnityEngine.Vector4[] _positions
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector4>& dyn__positions();
    // Get instance field reference: private System.Boolean _positionsNeedUpdate
    [[deprecated("Use field access instead!")]] bool& dyn__positionsNeedUpdate();
    // Get instance field reference: private UnityEngine.Color[] _colors
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Color>& dyn__colors();
    // Get instance field reference: private System.Boolean _colorsNeedUpdate
    [[deprecated("Use field access instead!")]] bool& dyn__colorsNeedUpdate();
    // Get instance field reference: private UnityEngine.Bounds _bounds
    [[deprecated("Use field access instead!")]] ::UnityEngine::Bounds& dyn__bounds();
    // Get instance field reference: private UnityEngine.Mesh _baseMesh
    [[deprecated("Use field access instead!")]] ::UnityEngine::Mesh*& dyn__baseMesh();
    // Get instance field reference: private UnityEngine.Material _material
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn__material();
    // Get instance field reference: private System.Boolean _renderSinglePass
    [[deprecated("Use field access instead!")]] bool& dyn__renderSinglePass();
    // Get instance field reference: private UnityEngine.ComputeBuffer _positionBuffer
    [[deprecated("Use field access instead!")]] ::UnityEngine::ComputeBuffer*& dyn__positionBuffer();
    // Get instance field reference: private UnityEngine.ComputeBuffer _colorBuffer
    [[deprecated("Use field access instead!")]] ::UnityEngine::ComputeBuffer*& dyn__colorBuffer();
    // Get instance field reference: private UnityEngine.ComputeBuffer _argsBuffer
    [[deprecated("Use field access instead!")]] ::UnityEngine::ComputeBuffer*& dyn__argsBuffer();
    // Get instance field reference: private System.UInt32[] _argsData
    [[deprecated("Use field access instead!")]] ::ArrayW<uint>& dyn__argsData();
    // Get instance field reference: private System.Int32 _positionBufferShaderID
    [[deprecated("Use field access instead!")]] int& dyn__positionBufferShaderID();
    // Get instance field reference: private System.Int32 _colorBufferShaderID
    [[deprecated("Use field access instead!")]] int& dyn__colorBufferShaderID();
    // Get instance field reference: private System.Int32 _localToWorldShaderID
    [[deprecated("Use field access instead!")]] int& dyn__localToWorldShaderID();
    // Get instance field reference: private System.Int32 _scaleShaderID
    [[deprecated("Use field access instead!")]] int& dyn__scaleShaderID();
    // Get instance field reference: private System.Int32 _maxLineCount
    [[deprecated("Use field access instead!")]] int& dyn__maxLineCount();
    // Get instance field reference: private UnityEngine.Matrix4x4 _matrix
    [[deprecated("Use field access instead!")]] ::UnityEngine::Matrix4x4& dyn__matrix();
    // Get instance field reference: private System.Single _lineScaleFactor
    [[deprecated("Use field access instead!")]] float& dyn__lineScaleFactor();
    // private System.Int32 get_Copies()
    // Offset: 0x47CC768
    int get_Copies();
    // private System.Int32 get_BufferSize()
    // Offset: 0x47CC77C
    int get_BufferSize();
    // public System.Single get_LineScaleFactor()
    // Offset: 0x47CC79C
    float get_LineScaleFactor();
    // public System.Void set_LineScaleFactor(System.Single value)
    // Offset: 0x47CC7A4
    void set_LineScaleFactor(float value);
    // public System.Void .ctor(UnityEngine.Material material, System.Boolean renderSinglePass)
    // Offset: 0x47CA6B4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PolylineRenderer* New_ctor(::UnityEngine::Material* material, bool renderSinglePass) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::PolylineRenderer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PolylineRenderer*, creationType>(material, renderSinglePass)));
    }
    // public System.Void Cleanup()
    // Offset: 0x47CABF4
    void Cleanup();
    // public System.Void SetLines(System.Collections.Generic.List`1<UnityEngine.Vector4> positions, UnityEngine.Color color)
    // Offset: 0x47CC7AC
    void SetLines(::System::Collections::Generic::List_1<::UnityEngine::Vector4>* positions, ::UnityEngine::Color color);
    // public System.Void SetLines(System.Collections.Generic.List`1<UnityEngine.Vector4> positions, System.Collections.Generic.List`1<UnityEngine.Color> colors, System.Int32 maxCount)
    // Offset: 0x47CAD04
    void SetLines(::System::Collections::Generic::List_1<::UnityEngine::Vector4>* positions, ::System::Collections::Generic::List_1<::UnityEngine::Color>* colors, int maxCount);
    // private System.Void SetPositions(System.Int32 count, System.Collections.Generic.List`1<UnityEngine.Vector4> positions)
    // Offset: 0x47CC850
    void SetPositions(int count, ::System::Collections::Generic::List_1<::UnityEngine::Vector4>* positions);
    // private System.Void SetColors(System.Int32 count, System.Collections.Generic.List`1<UnityEngine.Color> colors)
    // Offset: 0x47CCCC0
    void SetColors(int count, ::System::Collections::Generic::List_1<::UnityEngine::Color>* colors);
    // private System.Void SetColor(System.Int32 count, UnityEngine.Color color)
    // Offset: 0x47CCBF0
    void SetColor(int count, ::UnityEngine::Color color);
    // private System.Void SetDrawCount(System.Int32 c)
    // Offset: 0x47CCBA0
    void SetDrawCount(int c);
    // private System.Void PrepareColorBuffer(System.Int32 count)
    // Offset: 0x47CCDDC
    void PrepareColorBuffer(int count);
    // public System.Void RenderLines()
    // Offset: 0x47CAD90
    void RenderLines();
    // public System.Void SetTransform(UnityEngine.Transform transform)
    // Offset: 0x47CCF18
    void SetTransform(::UnityEngine::Transform* transform);
  }; // Oculus.Interaction.PolylineRenderer
  #pragma pack(pop)
  static check_size<sizeof(PolylineRenderer), 212 + sizeof(float)> __Oculus_Interaction_PolylineRendererSizeCheck;
  static_assert(sizeof(PolylineRenderer) == 0xD8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::PolylineRenderer::get_Copies
// Il2CppName: get_Copies
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Oculus::Interaction::PolylineRenderer::*)()>(&Oculus::Interaction::PolylineRenderer::get_Copies)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PolylineRenderer*), "get_Copies", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PolylineRenderer::get_BufferSize
// Il2CppName: get_BufferSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Oculus::Interaction::PolylineRenderer::*)()>(&Oculus::Interaction::PolylineRenderer::get_BufferSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PolylineRenderer*), "get_BufferSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PolylineRenderer::get_LineScaleFactor
// Il2CppName: get_LineScaleFactor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::PolylineRenderer::*)()>(&Oculus::Interaction::PolylineRenderer::get_LineScaleFactor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PolylineRenderer*), "get_LineScaleFactor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PolylineRenderer::set_LineScaleFactor
// Il2CppName: set_LineScaleFactor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PolylineRenderer::*)(float)>(&Oculus::Interaction::PolylineRenderer::set_LineScaleFactor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PolylineRenderer*), "set_LineScaleFactor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PolylineRenderer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Interaction::PolylineRenderer::Cleanup
// Il2CppName: Cleanup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PolylineRenderer::*)()>(&Oculus::Interaction::PolylineRenderer::Cleanup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PolylineRenderer*), "Cleanup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PolylineRenderer::SetLines
// Il2CppName: SetLines
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PolylineRenderer::*)(::System::Collections::Generic::List_1<::UnityEngine::Vector4>*, ::UnityEngine::Color)>(&Oculus::Interaction::PolylineRenderer::SetLines)> {
  static const MethodInfo* get() {
    static auto* positions = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")})->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PolylineRenderer*), "SetLines", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{positions, color});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PolylineRenderer::SetLines
// Il2CppName: SetLines
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PolylineRenderer::*)(::System::Collections::Generic::List_1<::UnityEngine::Vector4>*, ::System::Collections::Generic::List_1<::UnityEngine::Color>*, int)>(&Oculus::Interaction::PolylineRenderer::SetLines)> {
  static const MethodInfo* get() {
    static auto* positions = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")})->byval_arg;
    static auto* colors = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Color")})->byval_arg;
    static auto* maxCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PolylineRenderer*), "SetLines", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{positions, colors, maxCount});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PolylineRenderer::SetPositions
// Il2CppName: SetPositions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PolylineRenderer::*)(int, ::System::Collections::Generic::List_1<::UnityEngine::Vector4>*)>(&Oculus::Interaction::PolylineRenderer::SetPositions)> {
  static const MethodInfo* get() {
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* positions = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PolylineRenderer*), "SetPositions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{count, positions});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PolylineRenderer::SetColors
// Il2CppName: SetColors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PolylineRenderer::*)(int, ::System::Collections::Generic::List_1<::UnityEngine::Color>*)>(&Oculus::Interaction::PolylineRenderer::SetColors)> {
  static const MethodInfo* get() {
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* colors = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Color")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PolylineRenderer*), "SetColors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{count, colors});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PolylineRenderer::SetColor
// Il2CppName: SetColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PolylineRenderer::*)(int, ::UnityEngine::Color)>(&Oculus::Interaction::PolylineRenderer::SetColor)> {
  static const MethodInfo* get() {
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PolylineRenderer*), "SetColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{count, color});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PolylineRenderer::SetDrawCount
// Il2CppName: SetDrawCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PolylineRenderer::*)(int)>(&Oculus::Interaction::PolylineRenderer::SetDrawCount)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PolylineRenderer*), "SetDrawCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PolylineRenderer::PrepareColorBuffer
// Il2CppName: PrepareColorBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PolylineRenderer::*)(int)>(&Oculus::Interaction::PolylineRenderer::PrepareColorBuffer)> {
  static const MethodInfo* get() {
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PolylineRenderer*), "PrepareColorBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{count});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PolylineRenderer::RenderLines
// Il2CppName: RenderLines
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PolylineRenderer::*)()>(&Oculus::Interaction::PolylineRenderer::RenderLines)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PolylineRenderer*), "RenderLines", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PolylineRenderer::SetTransform
// Il2CppName: SetTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PolylineRenderer::*)(::UnityEngine::Transform*)>(&Oculus::Interaction::PolylineRenderer::SetTransform)> {
  static const MethodInfo* get() {
    static auto* transform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PolylineRenderer*), "SetTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transform});
  }
};
