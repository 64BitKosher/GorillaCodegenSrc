// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Pose
  struct Pose;
  // Forward declaring type: Space
  struct Space;
  // Forward declaring type: Vector3
  struct Vector3;
  // Forward declaring type: Quaternion
  struct Quaternion;
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: PoseUtils
  class PoseUtils;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::PoseUtils);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::PoseUtils*, "Oculus.Interaction", "PoseUtils");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.PoseUtils
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExtensionAttribute] Offset: FFFFFFFF
  class PoseUtils : public ::Il2CppObject {
    public:
    // static public System.Void SetPose(UnityEngine.Transform transform, in UnityEngine.Pose pose, UnityEngine.Space space)
    // Offset: 0x47DBA34
    static void SetPose(::UnityEngine::Transform* transform, ByRef<::UnityEngine::Pose> pose, ::UnityEngine::Space space);
    // static public UnityEngine.Pose GetPose(UnityEngine.Transform transform, UnityEngine.Space space)
    // Offset: 0x47DBAA8
    static ::UnityEngine::Pose GetPose(::UnityEngine::Transform* transform, ::UnityEngine::Space space);
    // static public System.Void Multiply(in UnityEngine.Pose a, in UnityEngine.Pose b, ref UnityEngine.Pose result)
    // Offset: 0x47DBB58
    static void Multiply(ByRef<::UnityEngine::Pose> a, ByRef<::UnityEngine::Pose> b, ByRef<::UnityEngine::Pose> result);
    // static public UnityEngine.Pose Multiply(in UnityEngine.Pose a, in UnityEngine.Pose b)
    // Offset: 0x47DBC3C
    static ::UnityEngine::Pose Multiply(ByRef<::UnityEngine::Pose> a, ByRef<::UnityEngine::Pose> b);
    // static public System.Void Premultiply(ref UnityEngine.Pose a, in UnityEngine.Pose b)
    // Offset: 0x47DBC78
    static void Premultiply(ByRef<::UnityEngine::Pose> a, ByRef<::UnityEngine::Pose> b);
    // static public System.Void Postmultiply(ref UnityEngine.Pose a, in UnityEngine.Pose b)
    // Offset: 0x47DBC80
    static void Postmultiply(ByRef<::UnityEngine::Pose> a, ByRef<::UnityEngine::Pose> b);
    // static public System.Void Lerp(ref UnityEngine.Pose from, in UnityEngine.Pose to, System.Single t)
    // Offset: 0x47DBC90
    static void Lerp(ByRef<::UnityEngine::Pose> from, ByRef<::UnityEngine::Pose> to, float t);
    // static public System.Void Lerp(in UnityEngine.Pose from, in UnityEngine.Pose to, System.Single t, ref UnityEngine.Pose result)
    // Offset: 0x47DBC98
    static void Lerp(ByRef<::UnityEngine::Pose> from, ByRef<::UnityEngine::Pose> to, float t, ByRef<::UnityEngine::Pose> result);
    // static public System.Void Inverse(in UnityEngine.Pose a, ref UnityEngine.Pose result)
    // Offset: 0x47DBD08
    static void Inverse(ByRef<::UnityEngine::Pose> a, ByRef<::UnityEngine::Pose> result);
    // static public System.Void Invert(ref UnityEngine.Pose a)
    // Offset: 0x47DBD60
    static void Invert(ByRef<::UnityEngine::Pose> a);
    // static public System.Void CopyFrom(ref UnityEngine.Pose to, in UnityEngine.Pose from)
    // Offset: 0x47DBD68
    static void CopyFrom(ByRef<::UnityEngine::Pose> to, ByRef<::UnityEngine::Pose> from);
    // static public UnityEngine.Pose Delta(UnityEngine.Transform from, UnityEngine.Transform to)
    // Offset: 0x47DBD84
    static ::UnityEngine::Pose Delta(::UnityEngine::Transform* from, ::UnityEngine::Transform* to);
    // static public UnityEngine.Pose Delta(UnityEngine.Transform from, in UnityEngine.Pose to)
    // Offset: 0x47DBEC8
    static ::UnityEngine::Pose Delta(::UnityEngine::Transform* from, ByRef<::UnityEngine::Pose> to);
    // static public System.Void Delta(UnityEngine.Transform from, in UnityEngine.Pose to, ref UnityEngine.Pose result)
    // Offset: 0x47DBF9C
    static void Delta(::UnityEngine::Transform* from, ByRef<::UnityEngine::Pose> to, ByRef<::UnityEngine::Pose> result);
    // static public UnityEngine.Pose Delta(in UnityEngine.Pose from, in UnityEngine.Pose to)
    // Offset: 0x47DC184
    static ::UnityEngine::Pose Delta(ByRef<::UnityEngine::Pose> from, ByRef<::UnityEngine::Pose> to);
    // static private UnityEngine.Pose Delta(UnityEngine.Vector3 fromPosition, UnityEngine.Quaternion fromRotation, UnityEngine.Vector3 toPosition, UnityEngine.Quaternion toRotation)
    // Offset: 0x47DBE74
    static ::UnityEngine::Pose Delta(::UnityEngine::Vector3 fromPosition, ::UnityEngine::Quaternion fromRotation, ::UnityEngine::Vector3 toPosition, ::UnityEngine::Quaternion toRotation);
    // static private System.Void Delta(UnityEngine.Vector3 fromPosition, UnityEngine.Quaternion fromRotation, UnityEngine.Vector3 toPosition, UnityEngine.Quaternion toRotation, ref UnityEngine.Pose result)
    // Offset: 0x47DC054
    static void Delta(::UnityEngine::Vector3 fromPosition, ::UnityEngine::Quaternion fromRotation, ::UnityEngine::Vector3 toPosition, ::UnityEngine::Quaternion toRotation, ByRef<::UnityEngine::Pose> result);
    // static public UnityEngine.Pose DeltaScaled(UnityEngine.Transform from, UnityEngine.Transform to)
    // Offset: 0x47DC1F4
    static ::UnityEngine::Pose DeltaScaled(::UnityEngine::Transform* from, ::UnityEngine::Transform* to);
    // static public UnityEngine.Pose DeltaScaled(UnityEngine.Transform from, UnityEngine.Pose to)
    // Offset: 0x47DC314
    static ::UnityEngine::Pose DeltaScaled(::UnityEngine::Transform* from, ::UnityEngine::Pose to);
    // static public UnityEngine.Pose GlobalPose(UnityEngine.Transform reference, in UnityEngine.Pose offset)
    // Offset: 0x47DC404
    static ::UnityEngine::Pose GlobalPose(::UnityEngine::Transform* reference, ByRef<::UnityEngine::Pose> offset);
    // static public UnityEngine.Pose GlobalPoseScaled(UnityEngine.Transform relativeTo, UnityEngine.Pose offset)
    // Offset: 0x47DC51C
    static ::UnityEngine::Pose GlobalPoseScaled(::UnityEngine::Transform* relativeTo, ::UnityEngine::Pose offset);
    // static public UnityEngine.Pose MirrorPoseRotation(in UnityEngine.Pose pose, UnityEngine.Vector3 normal, UnityEngine.Vector3 tangent)
    // Offset: 0x47DC604
    static ::UnityEngine::Pose MirrorPoseRotation(ByRef<::UnityEngine::Pose> pose, ::UnityEngine::Vector3 normal, ::UnityEngine::Vector3 tangent);
  }; // Oculus.Interaction.PoseUtils
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::PoseUtils::SetPose
// Il2CppName: SetPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Transform*, ByRef<::UnityEngine::Pose>, ::UnityEngine::Space)>(&Oculus::Interaction::PoseUtils::SetPose)> {
  static const MethodInfo* get() {
    static auto* transform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* pose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    static auto* space = &::il2cpp_utils::GetClassFromName("UnityEngine", "Space")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseUtils*), "SetPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transform, pose, space});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseUtils::GetPose
// Il2CppName: GetPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Pose (*)(::UnityEngine::Transform*, ::UnityEngine::Space)>(&Oculus::Interaction::PoseUtils::GetPose)> {
  static const MethodInfo* get() {
    static auto* transform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* space = &::il2cpp_utils::GetClassFromName("UnityEngine", "Space")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseUtils*), "GetPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transform, space});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseUtils::Multiply
// Il2CppName: Multiply
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::UnityEngine::Pose>, ByRef<::UnityEngine::Pose>, ByRef<::UnityEngine::Pose>)>(&Oculus::Interaction::PoseUtils::Multiply)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseUtils*), "Multiply", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, result});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseUtils::Multiply
// Il2CppName: Multiply
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Pose (*)(ByRef<::UnityEngine::Pose>, ByRef<::UnityEngine::Pose>)>(&Oculus::Interaction::PoseUtils::Multiply)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseUtils*), "Multiply", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseUtils::Premultiply
// Il2CppName: Premultiply
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::UnityEngine::Pose>, ByRef<::UnityEngine::Pose>)>(&Oculus::Interaction::PoseUtils::Premultiply)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseUtils*), "Premultiply", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseUtils::Postmultiply
// Il2CppName: Postmultiply
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::UnityEngine::Pose>, ByRef<::UnityEngine::Pose>)>(&Oculus::Interaction::PoseUtils::Postmultiply)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseUtils*), "Postmultiply", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseUtils::Lerp
// Il2CppName: Lerp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::UnityEngine::Pose>, ByRef<::UnityEngine::Pose>, float)>(&Oculus::Interaction::PoseUtils::Lerp)> {
  static const MethodInfo* get() {
    static auto* from = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseUtils*), "Lerp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{from, to, t});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseUtils::Lerp
// Il2CppName: Lerp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::UnityEngine::Pose>, ByRef<::UnityEngine::Pose>, float, ByRef<::UnityEngine::Pose>)>(&Oculus::Interaction::PoseUtils::Lerp)> {
  static const MethodInfo* get() {
    static auto* from = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseUtils*), "Lerp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{from, to, t, result});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseUtils::Inverse
// Il2CppName: Inverse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::UnityEngine::Pose>, ByRef<::UnityEngine::Pose>)>(&Oculus::Interaction::PoseUtils::Inverse)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseUtils*), "Inverse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, result});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseUtils::Invert
// Il2CppName: Invert
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::UnityEngine::Pose>)>(&Oculus::Interaction::PoseUtils::Invert)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseUtils*), "Invert", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseUtils::CopyFrom
// Il2CppName: CopyFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::UnityEngine::Pose>, ByRef<::UnityEngine::Pose>)>(&Oculus::Interaction::PoseUtils::CopyFrom)> {
  static const MethodInfo* get() {
    static auto* to = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    static auto* from = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseUtils*), "CopyFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{to, from});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseUtils::Delta
// Il2CppName: Delta
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Pose (*)(::UnityEngine::Transform*, ::UnityEngine::Transform*)>(&Oculus::Interaction::PoseUtils::Delta)> {
  static const MethodInfo* get() {
    static auto* from = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseUtils*), "Delta", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{from, to});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseUtils::Delta
// Il2CppName: Delta
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Pose (*)(::UnityEngine::Transform*, ByRef<::UnityEngine::Pose>)>(&Oculus::Interaction::PoseUtils::Delta)> {
  static const MethodInfo* get() {
    static auto* from = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseUtils*), "Delta", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{from, to});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseUtils::Delta
// Il2CppName: Delta
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Transform*, ByRef<::UnityEngine::Pose>, ByRef<::UnityEngine::Pose>)>(&Oculus::Interaction::PoseUtils::Delta)> {
  static const MethodInfo* get() {
    static auto* from = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseUtils*), "Delta", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{from, to, result});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseUtils::Delta
// Il2CppName: Delta
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Pose (*)(ByRef<::UnityEngine::Pose>, ByRef<::UnityEngine::Pose>)>(&Oculus::Interaction::PoseUtils::Delta)> {
  static const MethodInfo* get() {
    static auto* from = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseUtils*), "Delta", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{from, to});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseUtils::Delta
// Il2CppName: Delta
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Pose (*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion, ::UnityEngine::Vector3, ::UnityEngine::Quaternion)>(&Oculus::Interaction::PoseUtils::Delta)> {
  static const MethodInfo* get() {
    static auto* fromPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* fromRotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* toPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* toRotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseUtils*), "Delta", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fromPosition, fromRotation, toPosition, toRotation});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseUtils::Delta
// Il2CppName: Delta
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion, ::UnityEngine::Vector3, ::UnityEngine::Quaternion, ByRef<::UnityEngine::Pose>)>(&Oculus::Interaction::PoseUtils::Delta)> {
  static const MethodInfo* get() {
    static auto* fromPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* fromRotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* toPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* toRotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseUtils*), "Delta", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fromPosition, fromRotation, toPosition, toRotation, result});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseUtils::DeltaScaled
// Il2CppName: DeltaScaled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Pose (*)(::UnityEngine::Transform*, ::UnityEngine::Transform*)>(&Oculus::Interaction::PoseUtils::DeltaScaled)> {
  static const MethodInfo* get() {
    static auto* from = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseUtils*), "DeltaScaled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{from, to});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseUtils::DeltaScaled
// Il2CppName: DeltaScaled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Pose (*)(::UnityEngine::Transform*, ::UnityEngine::Pose)>(&Oculus::Interaction::PoseUtils::DeltaScaled)> {
  static const MethodInfo* get() {
    static auto* from = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseUtils*), "DeltaScaled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{from, to});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseUtils::GlobalPose
// Il2CppName: GlobalPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Pose (*)(::UnityEngine::Transform*, ByRef<::UnityEngine::Pose>)>(&Oculus::Interaction::PoseUtils::GlobalPose)> {
  static const MethodInfo* get() {
    static auto* reference = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseUtils*), "GlobalPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reference, offset});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseUtils::GlobalPoseScaled
// Il2CppName: GlobalPoseScaled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Pose (*)(::UnityEngine::Transform*, ::UnityEngine::Pose)>(&Oculus::Interaction::PoseUtils::GlobalPoseScaled)> {
  static const MethodInfo* get() {
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseUtils*), "GlobalPoseScaled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{relativeTo, offset});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PoseUtils::MirrorPoseRotation
// Il2CppName: MirrorPoseRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Pose (*)(ByRef<::UnityEngine::Pose>, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Oculus::Interaction::PoseUtils::MirrorPoseRotation)> {
  static const MethodInfo* get() {
    static auto* pose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    static auto* normal = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* tangent = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PoseUtils*), "MirrorPoseRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pose, normal, tangent});
  }
};
