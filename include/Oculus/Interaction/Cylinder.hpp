// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: Cylinder
  class Cylinder;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Cylinder);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Cylinder*, "Oculus.Interaction", "Cylinder");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x24
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.Cylinder
  // [TokenAttribute] Offset: FFFFFFFF
  class Cylinder : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private System.Single _radius
    // Size: 0x4
    // Offset: 0x20
    float radius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: private System.Single _radius
    [[deprecated("Use field access instead!")]] float& dyn__radius();
    // public System.Single get_Radius()
    // Offset: 0x47D50D8
    float get_Radius();
    // public System.Void set_Radius(System.Single value)
    // Offset: 0x47D50E0
    void set_Radius(float value);
    // public System.Void .ctor()
    // Offset: 0x47D50E8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Cylinder* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Cylinder::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Cylinder*, creationType>()));
    }
  }; // Oculus.Interaction.Cylinder
  #pragma pack(pop)
  static check_size<sizeof(Cylinder), 32 + sizeof(float)> __Oculus_Interaction_CylinderSizeCheck;
  static_assert(sizeof(Cylinder) == 0x24);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Cylinder::get_Radius
// Il2CppName: get_Radius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::Cylinder::*)()>(&Oculus::Interaction::Cylinder::get_Radius)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Cylinder*), "get_Radius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Cylinder::set_Radius
// Il2CppName: set_Radius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Cylinder::*)(float)>(&Oculus::Interaction::Cylinder::set_Radius)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Cylinder*), "set_Radius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Cylinder::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
