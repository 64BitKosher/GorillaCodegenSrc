// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Oculus.Interaction.IActiveState
#include "Oculus/Interaction/IActiveState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction
namespace Oculus::Interaction {
  // Skipping declaration: InteractorProperty because it is already included!
  // Forward declaring type: IInteractor
  class IInteractor;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Object because it is already included!
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: InteractorActiveState
  class InteractorActiveState;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::InteractorActiveState);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::InteractorActiveState*, "Oculus.Interaction", "InteractorActiveState");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x34
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.InteractorActiveState
  // [TokenAttribute] Offset: FFFFFFFF
  class InteractorActiveState : public ::UnityEngine::MonoBehaviour/*, public ::Oculus::Interaction::IActiveState*/ {
    public:
    // Nested type: ::Oculus::Interaction::InteractorActiveState::InteractorProperty
    struct InteractorProperty;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Oculus.Interaction.InteractorActiveState/InteractorProperty
    // [TokenAttribute] Offset: FFFFFFFF
    // [FlagsAttribute] Offset: FFFFFFFF
    struct InteractorProperty/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: InteractorProperty
      constexpr InteractorProperty(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Oculus.Interaction.InteractorActiveState/InteractorProperty HasCandidate
      static constexpr const int HasCandidate = 1;
      // Get static field: static public Oculus.Interaction.InteractorActiveState/InteractorProperty HasCandidate
      static ::Oculus::Interaction::InteractorActiveState::InteractorProperty _get_HasCandidate();
      // Set static field: static public Oculus.Interaction.InteractorActiveState/InteractorProperty HasCandidate
      static void _set_HasCandidate(::Oculus::Interaction::InteractorActiveState::InteractorProperty value);
      // static field const value: static public Oculus.Interaction.InteractorActiveState/InteractorProperty HasInteractable
      static constexpr const int HasInteractable = 2;
      // Get static field: static public Oculus.Interaction.InteractorActiveState/InteractorProperty HasInteractable
      static ::Oculus::Interaction::InteractorActiveState::InteractorProperty _get_HasInteractable();
      // Set static field: static public Oculus.Interaction.InteractorActiveState/InteractorProperty HasInteractable
      static void _set_HasInteractable(::Oculus::Interaction::InteractorActiveState::InteractorProperty value);
      // static field const value: static public Oculus.Interaction.InteractorActiveState/InteractorProperty IsSelecting
      static constexpr const int IsSelecting = 4;
      // Get static field: static public Oculus.Interaction.InteractorActiveState/InteractorProperty IsSelecting
      static ::Oculus::Interaction::InteractorActiveState::InteractorProperty _get_IsSelecting();
      // Set static field: static public Oculus.Interaction.InteractorActiveState/InteractorProperty IsSelecting
      static void _set_IsSelecting(::Oculus::Interaction::InteractorActiveState::InteractorProperty value);
      // static field const value: static public Oculus.Interaction.InteractorActiveState/InteractorProperty HasSelectedInteractable
      static constexpr const int HasSelectedInteractable = 8;
      // Get static field: static public Oculus.Interaction.InteractorActiveState/InteractorProperty HasSelectedInteractable
      static ::Oculus::Interaction::InteractorActiveState::InteractorProperty _get_HasSelectedInteractable();
      // Set static field: static public Oculus.Interaction.InteractorActiveState/InteractorProperty HasSelectedInteractable
      static void _set_HasSelectedInteractable(::Oculus::Interaction::InteractorActiveState::InteractorProperty value);
      // static field const value: static public Oculus.Interaction.InteractorActiveState/InteractorProperty IsNormal
      static constexpr const int IsNormal = 16;
      // Get static field: static public Oculus.Interaction.InteractorActiveState/InteractorProperty IsNormal
      static ::Oculus::Interaction::InteractorActiveState::InteractorProperty _get_IsNormal();
      // Set static field: static public Oculus.Interaction.InteractorActiveState/InteractorProperty IsNormal
      static void _set_IsNormal(::Oculus::Interaction::InteractorActiveState::InteractorProperty value);
      // static field const value: static public Oculus.Interaction.InteractorActiveState/InteractorProperty IsHovering
      static constexpr const int IsHovering = 32;
      // Get static field: static public Oculus.Interaction.InteractorActiveState/InteractorProperty IsHovering
      static ::Oculus::Interaction::InteractorActiveState::InteractorProperty _get_IsHovering();
      // Set static field: static public Oculus.Interaction.InteractorActiveState/InteractorProperty IsHovering
      static void _set_IsHovering(::Oculus::Interaction::InteractorActiveState::InteractorProperty value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Oculus.Interaction.InteractorActiveState/InteractorProperty
    #pragma pack(pop)
    static check_size<sizeof(InteractorActiveState::InteractorProperty), 0 + sizeof(int)> __Oculus_Interaction_InteractorActiveState_InteractorPropertySizeCheck;
    static_assert(sizeof(InteractorActiveState::InteractorProperty) == 0x4);
    public:
    // private UnityEngine.Object _interactor
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Object* interactor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.IInteractor Interactor
    // Size: 0x8
    // Offset: 0x28
    ::Oculus::Interaction::IInteractor* Interactor;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::IInteractor*) == 0x8);
    // private Oculus.Interaction.InteractorActiveState/InteractorProperty _property
    // Size: 0x4
    // Offset: 0x30
    ::Oculus::Interaction::InteractorActiveState::InteractorProperty property;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::InteractorActiveState::InteractorProperty) == 0x4);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::IActiveState
    operator ::Oculus::Interaction::IActiveState() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::IActiveState*>(this);
    }
    // Get instance field reference: private UnityEngine.Object _interactor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__interactor();
    // Get instance field reference: private Oculus.Interaction.IInteractor Interactor
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::IInteractor*& dyn_Interactor();
    // Get instance field reference: private Oculus.Interaction.InteractorActiveState/InteractorProperty _property
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::InteractorActiveState::InteractorProperty& dyn__property();
    // public Oculus.Interaction.InteractorActiveState/InteractorProperty get_Property()
    // Offset: 0x4787C04
    ::Oculus::Interaction::InteractorActiveState::InteractorProperty get_Property();
    // public System.Void set_Property(Oculus.Interaction.InteractorActiveState/InteractorProperty value)
    // Offset: 0x4787C0C
    void set_Property(::Oculus::Interaction::InteractorActiveState::InteractorProperty value);
    // public System.Boolean get_Active()
    // Offset: 0x4787C14
    bool get_Active();
    // protected System.Void Awake()
    // Offset: 0x4787F44
    void Awake();
    // protected System.Void Start()
    // Offset: 0x4787FAC
    void Start();
    // public System.Void InjectAllInteractorActiveState(Oculus.Interaction.IInteractor interactor)
    // Offset: 0x4787FB0
    void InjectAllInteractorActiveState(::Oculus::Interaction::IInteractor* interactor);
    // public System.Void InjectInteractor(Oculus.Interaction.IInteractor interactor)
    // Offset: 0x4787FB4
    void InjectInteractor(::Oculus::Interaction::IInteractor* interactor);
    // public System.Void .ctor()
    // Offset: 0x4788084
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InteractorActiveState* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::InteractorActiveState::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InteractorActiveState*, creationType>()));
    }
  }; // Oculus.Interaction.InteractorActiveState
  #pragma pack(pop)
  static check_size<sizeof(InteractorActiveState), 48 + sizeof(::Oculus::Interaction::InteractorActiveState::InteractorProperty)> __Oculus_Interaction_InteractorActiveStateSizeCheck;
  static_assert(sizeof(InteractorActiveState) == 0x34);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::InteractorActiveState::InteractorProperty, "Oculus.Interaction", "InteractorActiveState/InteractorProperty");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::InteractorActiveState::get_Property
// Il2CppName: get_Property
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::InteractorActiveState::InteractorProperty (Oculus::Interaction::InteractorActiveState::*)()>(&Oculus::Interaction::InteractorActiveState::get_Property)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractorActiveState*), "get_Property", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractorActiveState::set_Property
// Il2CppName: set_Property
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractorActiveState::*)(::Oculus::Interaction::InteractorActiveState::InteractorProperty)>(&Oculus::Interaction::InteractorActiveState::set_Property)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "InteractorActiveState/InteractorProperty")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractorActiveState*), "set_Property", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractorActiveState::get_Active
// Il2CppName: get_Active
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::InteractorActiveState::*)()>(&Oculus::Interaction::InteractorActiveState::get_Active)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractorActiveState*), "get_Active", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractorActiveState::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractorActiveState::*)()>(&Oculus::Interaction::InteractorActiveState::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractorActiveState*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractorActiveState::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractorActiveState::*)()>(&Oculus::Interaction::InteractorActiveState::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractorActiveState*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractorActiveState::InjectAllInteractorActiveState
// Il2CppName: InjectAllInteractorActiveState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractorActiveState::*)(::Oculus::Interaction::IInteractor*)>(&Oculus::Interaction::InteractorActiveState::InjectAllInteractorActiveState)> {
  static const MethodInfo* get() {
    static auto* interactor = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IInteractor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractorActiveState*), "InjectAllInteractorActiveState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactor});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractorActiveState::InjectInteractor
// Il2CppName: InjectInteractor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::InteractorActiveState::*)(::Oculus::Interaction::IInteractor*)>(&Oculus::Interaction::InteractorActiveState::InjectInteractor)> {
  static const MethodInfo* get() {
    static auto* interactor = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IInteractor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::InteractorActiveState*), "InjectInteractor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactor});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::InteractorActiveState::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
