// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.EventSystems.PointerInputModule
#include "UnityEngine/EventSystems/PointerInputModule.hpp"
// Including type: Oculus.Interaction.PointerEvent
#include "Oculus/Interaction/PointerEvent.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction
namespace Oculus::Interaction {
  // Forward declaring type: IPointableCanvas
  class IPointableCanvas;
  // Forward declaring type: PointableCanvasEventArgs
  class PointableCanvasEventArgs;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Camera
  class Camera;
  // Forward declaring type: Canvas
  class Canvas;
  // Skipping declaration: Vector2 because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: ICollection`1<T>
  template<typename T>
  class ICollection_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: UnityEngine::EventSystems
namespace UnityEngine::EventSystems {
  // Skipping declaration: PointerEventData because it is already included!
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: PointableCanvasModule
  class PointableCanvasModule;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::PointableCanvasModule);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::PointableCanvasModule*, "Oculus.Interaction", "PointableCanvasModule");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0xA1
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.PointableCanvasModule
  // [TokenAttribute] Offset: FFFFFFFF
  class PointableCanvasModule : public ::UnityEngine::EventSystems::PointerInputModule {
    public:
    // Nested type: ::Oculus::Interaction::PointableCanvasModule::Pointer
    class Pointer;
    // Nested type: ::Oculus::Interaction::PointableCanvasModule::$$c__DisplayClass24_0
    class $$c__DisplayClass24_0;
    public:
    // private System.Boolean _useInitialPressPositionForDrag
    // Size: 0x1
    // Offset: 0x68
    bool useInitialPressPositionForDrag;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: useInitialPressPositionForDrag and: pointerEventCamera
    char __padding0[0x7] = {};
    // private UnityEngine.Camera _pointerEventCamera
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::Camera* pointerEventCamera;
    // Field size check
    static_assert(sizeof(::UnityEngine::Camera*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.Int32,Oculus.Interaction.PointableCanvasModule/Pointer> _pointerMap
    // Size: 0x8
    // Offset: 0x78
    ::System::Collections::Generic::Dictionary_2<int, ::Oculus::Interaction::PointableCanvasModule::Pointer*>* pointerMap;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<int, ::Oculus::Interaction::PointableCanvasModule::Pointer*>*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.EventSystems.RaycastResult> _raycastResultCache
    // Size: 0x8
    // Offset: 0x80
    ::System::Collections::Generic::List_1<::UnityEngine::EventSystems::RaycastResult>* raycastResultCache;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::EventSystems::RaycastResult>*) == 0x8);
    // private System.Collections.Generic.List`1<Oculus.Interaction.PointableCanvasModule/Pointer> _pointersForDeletion
    // Size: 0x8
    // Offset: 0x88
    ::System::Collections::Generic::List_1<::Oculus::Interaction::PointableCanvasModule::Pointer*>* pointersForDeletion;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Oculus::Interaction::PointableCanvasModule::Pointer*>*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<Oculus.Interaction.IPointableCanvas,System.Action`1<Oculus.Interaction.PointerEvent>> _pointerCanvasActionMap
    // Size: 0x8
    // Offset: 0x90
    ::System::Collections::Generic::Dictionary_2<::Oculus::Interaction::IPointableCanvas*, ::System::Action_1<::Oculus::Interaction::PointerEvent>*>* pointerCanvasActionMap;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::Oculus::Interaction::IPointableCanvas*, ::System::Action_1<::Oculus::Interaction::PointerEvent>*>*) == 0x8);
    // private Oculus.Interaction.PointableCanvasModule/Pointer[] _pointersToProcessScratch
    // Size: 0x8
    // Offset: 0x98
    ::ArrayW<::Oculus::Interaction::PointableCanvasModule::Pointer*> pointersToProcessScratch;
    // Field size check
    static_assert(sizeof(::ArrayW<::Oculus::Interaction::PointableCanvasModule::Pointer*>) == 0x8);
    // protected System.Boolean _started
    // Size: 0x1
    // Offset: 0xA0
    bool started;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get static field: static private System.Action`1<Oculus.Interaction.PointableCanvasEventArgs> WhenSelected
    static ::System::Action_1<::Oculus::Interaction::PointableCanvasEventArgs*>* _get_WhenSelected();
    // Set static field: static private System.Action`1<Oculus.Interaction.PointableCanvasEventArgs> WhenSelected
    static void _set_WhenSelected(::System::Action_1<::Oculus::Interaction::PointableCanvasEventArgs*>* value);
    // Get static field: static private System.Action`1<Oculus.Interaction.PointableCanvasEventArgs> WhenUnselected
    static ::System::Action_1<::Oculus::Interaction::PointableCanvasEventArgs*>* _get_WhenUnselected();
    // Set static field: static private System.Action`1<Oculus.Interaction.PointableCanvasEventArgs> WhenUnselected
    static void _set_WhenUnselected(::System::Action_1<::Oculus::Interaction::PointableCanvasEventArgs*>* value);
    // Get static field: static private System.Action`1<Oculus.Interaction.PointableCanvasEventArgs> WhenSelectableHovered
    static ::System::Action_1<::Oculus::Interaction::PointableCanvasEventArgs*>* _get_WhenSelectableHovered();
    // Set static field: static private System.Action`1<Oculus.Interaction.PointableCanvasEventArgs> WhenSelectableHovered
    static void _set_WhenSelectableHovered(::System::Action_1<::Oculus::Interaction::PointableCanvasEventArgs*>* value);
    // Get static field: static private System.Action`1<Oculus.Interaction.PointableCanvasEventArgs> WhenSelectableUnhovered
    static ::System::Action_1<::Oculus::Interaction::PointableCanvasEventArgs*>* _get_WhenSelectableUnhovered();
    // Set static field: static private System.Action`1<Oculus.Interaction.PointableCanvasEventArgs> WhenSelectableUnhovered
    static void _set_WhenSelectableUnhovered(::System::Action_1<::Oculus::Interaction::PointableCanvasEventArgs*>* value);
    // Get static field: static private Oculus.Interaction.PointableCanvasModule _instance
    static ::Oculus::Interaction::PointableCanvasModule* _get__instance();
    // Set static field: static private Oculus.Interaction.PointableCanvasModule _instance
    static void _set__instance(::Oculus::Interaction::PointableCanvasModule* value);
    // Get instance field reference: private System.Boolean _useInitialPressPositionForDrag
    [[deprecated("Use field access instead!")]] bool& dyn__useInitialPressPositionForDrag();
    // Get instance field reference: private UnityEngine.Camera _pointerEventCamera
    [[deprecated("Use field access instead!")]] ::UnityEngine::Camera*& dyn__pointerEventCamera();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.Int32,Oculus.Interaction.PointableCanvasModule/Pointer> _pointerMap
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<int, ::Oculus::Interaction::PointableCanvasModule::Pointer*>*& dyn__pointerMap();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.EventSystems.RaycastResult> _raycastResultCache
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::EventSystems::RaycastResult>*& dyn__raycastResultCache();
    // Get instance field reference: private System.Collections.Generic.List`1<Oculus.Interaction.PointableCanvasModule/Pointer> _pointersForDeletion
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Oculus::Interaction::PointableCanvasModule::Pointer*>*& dyn__pointersForDeletion();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<Oculus.Interaction.IPointableCanvas,System.Action`1<Oculus.Interaction.PointerEvent>> _pointerCanvasActionMap
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::Oculus::Interaction::IPointableCanvas*, ::System::Action_1<::Oculus::Interaction::PointerEvent>*>*& dyn__pointerCanvasActionMap();
    // Get instance field reference: private Oculus.Interaction.PointableCanvasModule/Pointer[] _pointersToProcessScratch
    [[deprecated("Use field access instead!")]] ::ArrayW<::Oculus::Interaction::PointableCanvasModule::Pointer*>& dyn__pointersToProcessScratch();
    // Get instance field reference: protected System.Boolean _started
    [[deprecated("Use field access instead!")]] bool& dyn__started();
    // static public System.Void add_WhenSelected(System.Action`1<Oculus.Interaction.PointableCanvasEventArgs> value)
    // Offset: 0x47D6CB4
    static void add_WhenSelected(::System::Action_1<::Oculus::Interaction::PointableCanvasEventArgs*>* value);
    // static public System.Void remove_WhenSelected(System.Action`1<Oculus.Interaction.PointableCanvasEventArgs> value)
    // Offset: 0x47D6D80
    static void remove_WhenSelected(::System::Action_1<::Oculus::Interaction::PointableCanvasEventArgs*>* value);
    // static public System.Void add_WhenUnselected(System.Action`1<Oculus.Interaction.PointableCanvasEventArgs> value)
    // Offset: 0x47D6E4C
    static void add_WhenUnselected(::System::Action_1<::Oculus::Interaction::PointableCanvasEventArgs*>* value);
    // static public System.Void remove_WhenUnselected(System.Action`1<Oculus.Interaction.PointableCanvasEventArgs> value)
    // Offset: 0x47D6F1C
    static void remove_WhenUnselected(::System::Action_1<::Oculus::Interaction::PointableCanvasEventArgs*>* value);
    // static public System.Void add_WhenSelectableHovered(System.Action`1<Oculus.Interaction.PointableCanvasEventArgs> value)
    // Offset: 0x47D6FEC
    static void add_WhenSelectableHovered(::System::Action_1<::Oculus::Interaction::PointableCanvasEventArgs*>* value);
    // static public System.Void remove_WhenSelectableHovered(System.Action`1<Oculus.Interaction.PointableCanvasEventArgs> value)
    // Offset: 0x47D70BC
    static void remove_WhenSelectableHovered(::System::Action_1<::Oculus::Interaction::PointableCanvasEventArgs*>* value);
    // static public System.Void add_WhenSelectableUnhovered(System.Action`1<Oculus.Interaction.PointableCanvasEventArgs> value)
    // Offset: 0x47D718C
    static void add_WhenSelectableUnhovered(::System::Action_1<::Oculus::Interaction::PointableCanvasEventArgs*>* value);
    // static public System.Void remove_WhenSelectableUnhovered(System.Action`1<Oculus.Interaction.PointableCanvasEventArgs> value)
    // Offset: 0x47D725C
    static void remove_WhenSelectableUnhovered(::System::Action_1<::Oculus::Interaction::PointableCanvasEventArgs*>* value);
    // static private Oculus.Interaction.PointableCanvasModule get_Instance()
    // Offset: 0x47D732C
    static ::Oculus::Interaction::PointableCanvasModule* get_Instance();
    // static public System.Void RegisterPointableCanvas(Oculus.Interaction.IPointableCanvas pointerCanvas)
    // Offset: 0x47D6980
    static void RegisterPointableCanvas(::Oculus::Interaction::IPointableCanvas* pointerCanvas);
    // static public System.Void UnregisterPointableCanvas(Oculus.Interaction.IPointableCanvas pointerCanvas)
    // Offset: 0x47D69F8
    static void UnregisterPointableCanvas(::Oculus::Interaction::IPointableCanvas* pointerCanvas);
    // private System.Void AddPointerCanvas(Oculus.Interaction.IPointableCanvas pointerCanvas)
    // Offset: 0x47D7374
    void AddPointerCanvas(::Oculus::Interaction::IPointableCanvas* pointerCanvas);
    // private System.Void RemovePointerCanvas(Oculus.Interaction.IPointableCanvas pointerCanvas)
    // Offset: 0x47D74EC
    void RemovePointerCanvas(::Oculus::Interaction::IPointableCanvas* pointerCanvas);
    // private System.Void HandlePointerEvent(UnityEngine.Canvas canvas, Oculus.Interaction.PointerEvent evt)
    // Offset: 0x47D7A70
    void HandlePointerEvent(::UnityEngine::Canvas* canvas, ::Oculus::Interaction::PointerEvent evt);
    // static protected UnityEngine.EventSystems.RaycastResult FindFirstRaycastWithinCanvas(System.Collections.Generic.List`1<UnityEngine.EventSystems.RaycastResult> candidates, UnityEngine.Canvas canvas)
    // Offset: 0x47D8098
    static ::UnityEngine::EventSystems::RaycastResult FindFirstRaycastWithinCanvas(::System::Collections::Generic::List_1<::UnityEngine::EventSystems::RaycastResult>* candidates, ::UnityEngine::Canvas* canvas);
    // private System.Void UpdateRaycasts(Oculus.Interaction.PointableCanvasModule/Pointer pointer, out System.Boolean pressed, out System.Boolean released)
    // Offset: 0x47D8248
    void UpdateRaycasts(::Oculus::Interaction::PointableCanvasModule::Pointer* pointer, ByRef<bool> pressed, ByRef<bool> released);
    // private System.Void ProcessPointers(System.Collections.Generic.ICollection`1<Oculus.Interaction.PointableCanvasModule/Pointer> pointers, System.Boolean clearAndReleasePointers)
    // Offset: 0x47D89D4
    void ProcessPointers(::System::Collections::Generic::ICollection_1<::Oculus::Interaction::PointableCanvasModule::Pointer*>* pointers, bool clearAndReleasePointers);
    // private System.Void ProcessPointer(Oculus.Interaction.PointableCanvasModule/Pointer pointer, System.Boolean forceRelease)
    // Offset: 0x47D8BEC
    void ProcessPointer(::Oculus::Interaction::PointableCanvasModule::Pointer* pointer, bool forceRelease);
    // private System.Void HandleSelectableHover(Oculus.Interaction.PointableCanvasModule/Pointer pointer, System.Boolean wasDragging)
    // Offset: 0x47D940C
    void HandleSelectableHover(::Oculus::Interaction::PointableCanvasModule::Pointer* pointer, bool wasDragging);
    // private System.Void HandleSelectablePress(Oculus.Interaction.PointableCanvasModule/Pointer pointer, System.Boolean pressed, System.Boolean released, System.Boolean wasDragging)
    // Offset: 0x47D961C
    void HandleSelectablePress(::Oculus::Interaction::PointableCanvasModule::Pointer* pointer, bool pressed, bool released, bool wasDragging);
    // protected System.Void UpdatePointerEventData(UnityEngine.EventSystems.PointerEventData pointerEvent, System.Boolean pressed, System.Boolean released)
    // Offset: 0x47D8D08
    void UpdatePointerEventData(::UnityEngine::EventSystems::PointerEventData* pointerEvent, bool pressed, bool released);
    // private System.Void ClearPointerSelection(UnityEngine.EventSystems.PointerEventData pointerEvent)
    // Offset: 0x47D7970
    void ClearPointerSelection(::UnityEngine::EventSystems::PointerEventData* pointerEvent);
    // static protected System.Boolean ShouldStartDrag(UnityEngine.Vector2 pressPos, UnityEngine.Vector2 currentPos, System.Single threshold, System.Boolean useDragThreshold)
    // Offset: 0x47D9A08
    static bool ShouldStartDrag(::UnityEngine::Vector2 pressPos, ::UnityEngine::Vector2 currentPos, float threshold, bool useDragThreshold);
    // public System.Void .ctor()
    // Offset: 0x47D9A38
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PointableCanvasModule* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::PointableCanvasModule::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PointableCanvasModule*, creationType>()));
    }
    // private System.Void <Start>b__31_0()
    // Offset: 0x47D9C34
    void $Start$b__31_0();
    // protected override System.Void Awake()
    // Offset: 0x47D7E0C
    // Implemented from: UnityEngine.EventSystems.UIBehaviour
    // Base method: System.Void UIBehaviour::Awake()
    void Awake();
    // protected override System.Void OnDestroy()
    // Offset: 0x47D7E68
    // Implemented from: UnityEngine.EventSystems.UIBehaviour
    // Base method: System.Void UIBehaviour::OnDestroy()
    void OnDestroy();
    // protected override System.Void Start()
    // Offset: 0x47D7EC4
    // Implemented from: UnityEngine.EventSystems.UIBehaviour
    // Base method: System.Void UIBehaviour::Start()
    void Start();
    // protected override System.Void OnEnable()
    // Offset: 0x47D7F60
    // Implemented from: UnityEngine.EventSystems.BaseInputModule
    // Base method: System.Void BaseInputModule::OnEnable()
    void OnEnable();
    // protected override System.Void OnDisable()
    // Offset: 0x47D8014
    // Implemented from: UnityEngine.EventSystems.BaseInputModule
    // Base method: System.Void BaseInputModule::OnDisable()
    void OnDisable();
    // public override System.Void Process()
    // Offset: 0x47D8964
    // Implemented from: UnityEngine.EventSystems.BaseInputModule
    // Base method: System.Void BaseInputModule::Process()
    void Process();
    // protected override System.Void ProcessDrag(UnityEngine.EventSystems.PointerEventData pointerEvent)
    // Offset: 0x47D97D0
    // Implemented from: UnityEngine.EventSystems.PointerInputModule
    // Base method: System.Void PointerInputModule::ProcessDrag(UnityEngine.EventSystems.PointerEventData pointerEvent)
    void ProcessDrag(::UnityEngine::EventSystems::PointerEventData* pointerEvent);
  }; // Oculus.Interaction.PointableCanvasModule
  #pragma pack(pop)
  static check_size<sizeof(PointableCanvasModule), 160 + sizeof(bool)> __Oculus_Interaction_PointableCanvasModuleSizeCheck;
  static_assert(sizeof(PointableCanvasModule) == 0xA1);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::PointableCanvasModule::add_WhenSelected
// Il2CppName: add_WhenSelected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action_1<::Oculus::Interaction::PointableCanvasEventArgs*>*)>(&Oculus::Interaction::PointableCanvasModule::add_WhenSelected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Interaction", "PointableCanvasEventArgs")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableCanvasModule*), "add_WhenSelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableCanvasModule::remove_WhenSelected
// Il2CppName: remove_WhenSelected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action_1<::Oculus::Interaction::PointableCanvasEventArgs*>*)>(&Oculus::Interaction::PointableCanvasModule::remove_WhenSelected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Interaction", "PointableCanvasEventArgs")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableCanvasModule*), "remove_WhenSelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableCanvasModule::add_WhenUnselected
// Il2CppName: add_WhenUnselected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action_1<::Oculus::Interaction::PointableCanvasEventArgs*>*)>(&Oculus::Interaction::PointableCanvasModule::add_WhenUnselected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Interaction", "PointableCanvasEventArgs")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableCanvasModule*), "add_WhenUnselected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableCanvasModule::remove_WhenUnselected
// Il2CppName: remove_WhenUnselected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action_1<::Oculus::Interaction::PointableCanvasEventArgs*>*)>(&Oculus::Interaction::PointableCanvasModule::remove_WhenUnselected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Interaction", "PointableCanvasEventArgs")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableCanvasModule*), "remove_WhenUnselected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableCanvasModule::add_WhenSelectableHovered
// Il2CppName: add_WhenSelectableHovered
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action_1<::Oculus::Interaction::PointableCanvasEventArgs*>*)>(&Oculus::Interaction::PointableCanvasModule::add_WhenSelectableHovered)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Interaction", "PointableCanvasEventArgs")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableCanvasModule*), "add_WhenSelectableHovered", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableCanvasModule::remove_WhenSelectableHovered
// Il2CppName: remove_WhenSelectableHovered
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action_1<::Oculus::Interaction::PointableCanvasEventArgs*>*)>(&Oculus::Interaction::PointableCanvasModule::remove_WhenSelectableHovered)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Interaction", "PointableCanvasEventArgs")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableCanvasModule*), "remove_WhenSelectableHovered", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableCanvasModule::add_WhenSelectableUnhovered
// Il2CppName: add_WhenSelectableUnhovered
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action_1<::Oculus::Interaction::PointableCanvasEventArgs*>*)>(&Oculus::Interaction::PointableCanvasModule::add_WhenSelectableUnhovered)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Interaction", "PointableCanvasEventArgs")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableCanvasModule*), "add_WhenSelectableUnhovered", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableCanvasModule::remove_WhenSelectableUnhovered
// Il2CppName: remove_WhenSelectableUnhovered
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action_1<::Oculus::Interaction::PointableCanvasEventArgs*>*)>(&Oculus::Interaction::PointableCanvasModule::remove_WhenSelectableUnhovered)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Interaction", "PointableCanvasEventArgs")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableCanvasModule*), "remove_WhenSelectableUnhovered", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableCanvasModule::get_Instance
// Il2CppName: get_Instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::PointableCanvasModule* (*)()>(&Oculus::Interaction::PointableCanvasModule::get_Instance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableCanvasModule*), "get_Instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableCanvasModule::RegisterPointableCanvas
// Il2CppName: RegisterPointableCanvas
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Oculus::Interaction::IPointableCanvas*)>(&Oculus::Interaction::PointableCanvasModule::RegisterPointableCanvas)> {
  static const MethodInfo* get() {
    static auto* pointerCanvas = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IPointableCanvas")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableCanvasModule*), "RegisterPointableCanvas", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pointerCanvas});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableCanvasModule::UnregisterPointableCanvas
// Il2CppName: UnregisterPointableCanvas
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Oculus::Interaction::IPointableCanvas*)>(&Oculus::Interaction::PointableCanvasModule::UnregisterPointableCanvas)> {
  static const MethodInfo* get() {
    static auto* pointerCanvas = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IPointableCanvas")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableCanvasModule*), "UnregisterPointableCanvas", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pointerCanvas});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableCanvasModule::AddPointerCanvas
// Il2CppName: AddPointerCanvas
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PointableCanvasModule::*)(::Oculus::Interaction::IPointableCanvas*)>(&Oculus::Interaction::PointableCanvasModule::AddPointerCanvas)> {
  static const MethodInfo* get() {
    static auto* pointerCanvas = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IPointableCanvas")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableCanvasModule*), "AddPointerCanvas", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pointerCanvas});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableCanvasModule::RemovePointerCanvas
// Il2CppName: RemovePointerCanvas
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PointableCanvasModule::*)(::Oculus::Interaction::IPointableCanvas*)>(&Oculus::Interaction::PointableCanvasModule::RemovePointerCanvas)> {
  static const MethodInfo* get() {
    static auto* pointerCanvas = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IPointableCanvas")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableCanvasModule*), "RemovePointerCanvas", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pointerCanvas});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableCanvasModule::HandlePointerEvent
// Il2CppName: HandlePointerEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PointableCanvasModule::*)(::UnityEngine::Canvas*, ::Oculus::Interaction::PointerEvent)>(&Oculus::Interaction::PointableCanvasModule::HandlePointerEvent)> {
  static const MethodInfo* get() {
    static auto* canvas = &::il2cpp_utils::GetClassFromName("UnityEngine", "Canvas")->byval_arg;
    static auto* evt = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "PointerEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableCanvasModule*), "HandlePointerEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{canvas, evt});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableCanvasModule::FindFirstRaycastWithinCanvas
// Il2CppName: FindFirstRaycastWithinCanvas
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::EventSystems::RaycastResult (*)(::System::Collections::Generic::List_1<::UnityEngine::EventSystems::RaycastResult>*, ::UnityEngine::Canvas*)>(&Oculus::Interaction::PointableCanvasModule::FindFirstRaycastWithinCanvas)> {
  static const MethodInfo* get() {
    static auto* candidates = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.EventSystems", "RaycastResult")})->byval_arg;
    static auto* canvas = &::il2cpp_utils::GetClassFromName("UnityEngine", "Canvas")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableCanvasModule*), "FindFirstRaycastWithinCanvas", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{candidates, canvas});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableCanvasModule::UpdateRaycasts
// Il2CppName: UpdateRaycasts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PointableCanvasModule::*)(::Oculus::Interaction::PointableCanvasModule::Pointer*, ByRef<bool>, ByRef<bool>)>(&Oculus::Interaction::PointableCanvasModule::UpdateRaycasts)> {
  static const MethodInfo* get() {
    static auto* pointer = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "PointableCanvasModule/Pointer")->byval_arg;
    static auto* pressed = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    static auto* released = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableCanvasModule*), "UpdateRaycasts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pointer, pressed, released});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableCanvasModule::ProcessPointers
// Il2CppName: ProcessPointers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PointableCanvasModule::*)(::System::Collections::Generic::ICollection_1<::Oculus::Interaction::PointableCanvasModule::Pointer*>*, bool)>(&Oculus::Interaction::PointableCanvasModule::ProcessPointers)> {
  static const MethodInfo* get() {
    static auto* pointers = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "ICollection`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Interaction", "PointableCanvasModule/Pointer")})->byval_arg;
    static auto* clearAndReleasePointers = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableCanvasModule*), "ProcessPointers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pointers, clearAndReleasePointers});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableCanvasModule::ProcessPointer
// Il2CppName: ProcessPointer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PointableCanvasModule::*)(::Oculus::Interaction::PointableCanvasModule::Pointer*, bool)>(&Oculus::Interaction::PointableCanvasModule::ProcessPointer)> {
  static const MethodInfo* get() {
    static auto* pointer = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "PointableCanvasModule/Pointer")->byval_arg;
    static auto* forceRelease = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableCanvasModule*), "ProcessPointer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pointer, forceRelease});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableCanvasModule::HandleSelectableHover
// Il2CppName: HandleSelectableHover
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PointableCanvasModule::*)(::Oculus::Interaction::PointableCanvasModule::Pointer*, bool)>(&Oculus::Interaction::PointableCanvasModule::HandleSelectableHover)> {
  static const MethodInfo* get() {
    static auto* pointer = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "PointableCanvasModule/Pointer")->byval_arg;
    static auto* wasDragging = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableCanvasModule*), "HandleSelectableHover", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pointer, wasDragging});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableCanvasModule::HandleSelectablePress
// Il2CppName: HandleSelectablePress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PointableCanvasModule::*)(::Oculus::Interaction::PointableCanvasModule::Pointer*, bool, bool, bool)>(&Oculus::Interaction::PointableCanvasModule::HandleSelectablePress)> {
  static const MethodInfo* get() {
    static auto* pointer = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "PointableCanvasModule/Pointer")->byval_arg;
    static auto* pressed = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* released = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* wasDragging = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableCanvasModule*), "HandleSelectablePress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pointer, pressed, released, wasDragging});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableCanvasModule::UpdatePointerEventData
// Il2CppName: UpdatePointerEventData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PointableCanvasModule::*)(::UnityEngine::EventSystems::PointerEventData*, bool, bool)>(&Oculus::Interaction::PointableCanvasModule::UpdatePointerEventData)> {
  static const MethodInfo* get() {
    static auto* pointerEvent = &::il2cpp_utils::GetClassFromName("UnityEngine.EventSystems", "PointerEventData")->byval_arg;
    static auto* pressed = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* released = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableCanvasModule*), "UpdatePointerEventData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pointerEvent, pressed, released});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableCanvasModule::ClearPointerSelection
// Il2CppName: ClearPointerSelection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PointableCanvasModule::*)(::UnityEngine::EventSystems::PointerEventData*)>(&Oculus::Interaction::PointableCanvasModule::ClearPointerSelection)> {
  static const MethodInfo* get() {
    static auto* pointerEvent = &::il2cpp_utils::GetClassFromName("UnityEngine.EventSystems", "PointerEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableCanvasModule*), "ClearPointerSelection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pointerEvent});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableCanvasModule::ShouldStartDrag
// Il2CppName: ShouldStartDrag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Vector2, ::UnityEngine::Vector2, float, bool)>(&Oculus::Interaction::PointableCanvasModule::ShouldStartDrag)> {
  static const MethodInfo* get() {
    static auto* pressPos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* currentPos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* threshold = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* useDragThreshold = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableCanvasModule*), "ShouldStartDrag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pressPos, currentPos, threshold, useDragThreshold});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableCanvasModule::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Interaction::PointableCanvasModule::$Start$b__31_0
// Il2CppName: <Start>b__31_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PointableCanvasModule::*)()>(&Oculus::Interaction::PointableCanvasModule::$Start$b__31_0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableCanvasModule*), "<Start>b__31_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableCanvasModule::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PointableCanvasModule::*)()>(&Oculus::Interaction::PointableCanvasModule::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableCanvasModule*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableCanvasModule::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PointableCanvasModule::*)()>(&Oculus::Interaction::PointableCanvasModule::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableCanvasModule*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableCanvasModule::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PointableCanvasModule::*)()>(&Oculus::Interaction::PointableCanvasModule::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableCanvasModule*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableCanvasModule::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PointableCanvasModule::*)()>(&Oculus::Interaction::PointableCanvasModule::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableCanvasModule*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableCanvasModule::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PointableCanvasModule::*)()>(&Oculus::Interaction::PointableCanvasModule::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableCanvasModule*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableCanvasModule::Process
// Il2CppName: Process
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PointableCanvasModule::*)()>(&Oculus::Interaction::PointableCanvasModule::Process)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableCanvasModule*), "Process", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableCanvasModule::ProcessDrag
// Il2CppName: ProcessDrag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PointableCanvasModule::*)(::UnityEngine::EventSystems::PointerEventData*)>(&Oculus::Interaction::PointableCanvasModule::ProcessDrag)> {
  static const MethodInfo* get() {
    static auto* pointerEvent = &::il2cpp_utils::GetClassFromName("UnityEngine.EventSystems", "PointerEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableCanvasModule*), "ProcessDrag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pointerEvent});
  }
};
