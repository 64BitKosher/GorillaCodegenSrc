// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Oculus.Interaction.Grab.GrabSurfaces.IGrabSurface
#include "Oculus/Interaction/Grab/GrabSurfaces/IGrabSurface.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction::Grab::GrabSurfaces
namespace Oculus::Interaction::Grab::GrabSurfaces {
  // Forward declaring type: CylinderSurfaceData
  class CylinderSurfaceData;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Pose
  struct Pose;
  // Skipping declaration: Vector3 because it is already included!
  // Skipping declaration: Quaternion because it is already included!
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Ray
  struct Ray;
}
// Forward declaring namespace: Oculus::Interaction::Grab
namespace Oculus::Interaction::Grab {
  // Forward declaring type: GrabPoseScore
  struct GrabPoseScore;
  // Forward declaring type: PoseMeasureParameters
  struct PoseMeasureParameters;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.Grab.GrabSurfaces
namespace Oculus::Interaction::Grab::GrabSurfaces {
  // Forward declaring type: CylinderGrabSurface
  class CylinderGrabSurface;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface*, "Oculus.Interaction.Grab.GrabSurfaces", "CylinderGrabSurface");
// Type namespace: Oculus.Interaction.Grab.GrabSurfaces
namespace Oculus::Interaction::Grab::GrabSurfaces {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.Grab.GrabSurfaces.CylinderGrabSurface
  // [TokenAttribute] Offset: FFFFFFFF
  class CylinderGrabSurface : public ::UnityEngine::MonoBehaviour/*, public ::Oculus::Interaction::Grab::GrabSurfaces::IGrabSurface*/ {
    public:
    public:
    // protected Oculus.Interaction.Grab.GrabSurfaces.CylinderSurfaceData _data
    // Size: 0x8
    // Offset: 0x20
    ::Oculus::Interaction::Grab::GrabSurfaces::CylinderSurfaceData* data;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Grab::GrabSurfaces::CylinderSurfaceData*) == 0x8);
    // private UnityEngine.Transform _relativeTo
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Transform* relativeTo;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::Grab::GrabSurfaces::IGrabSurface
    operator ::Oculus::Interaction::Grab::GrabSurfaces::IGrabSurface() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::Grab::GrabSurfaces::IGrabSurface*>(this);
    }
    // static field const value: static private System.Single Epsilon
    static constexpr const float Epsilon = 1e-06;
    // Get static field: static private System.Single Epsilon
    static float _get_Epsilon();
    // Set static field: static private System.Single Epsilon
    static void _set_Epsilon(float value);
    // Get instance field reference: protected Oculus.Interaction.Grab.GrabSurfaces.CylinderSurfaceData _data
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Grab::GrabSurfaces::CylinderSurfaceData*& dyn__data();
    // Get instance field reference: private UnityEngine.Transform _relativeTo
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__relativeTo();
    // private UnityEngine.Pose get_RelativePose()
    // Offset: 0x4835634
    ::UnityEngine::Pose get_RelativePose();
    // public UnityEngine.Pose GetReferencePose(UnityEngine.Transform relativeTo)
    // Offset: 0x4835684
    ::UnityEngine::Pose GetReferencePose(::UnityEngine::Transform* relativeTo);
    // public System.Single get_ArcOffset()
    // Offset: 0x48356FC
    float get_ArcOffset();
    // public System.Void set_ArcOffset(System.Single value)
    // Offset: 0x4835718
    void set_ArcOffset(float value);
    // public System.Single get_ArcLength()
    // Offset: 0x48357A0
    float get_ArcLength();
    // public System.Void set_ArcLength(System.Single value)
    // Offset: 0x48357BC
    void set_ArcLength(float value);
    // private UnityEngine.Vector3 get_LocalPerpendicularDir()
    // Offset: 0x4835844
    ::UnityEngine::Vector3 get_LocalPerpendicularDir();
    // private UnityEngine.Vector3 get_LocalDirection()
    // Offset: 0x4835A18
    ::UnityEngine::Vector3 get_LocalDirection();
    // public UnityEngine.Vector3 GetPerpendicularDir(UnityEngine.Transform relativeTo)
    // Offset: 0x4835B4C
    ::UnityEngine::Vector3 GetPerpendicularDir(::UnityEngine::Transform* relativeTo);
    // public UnityEngine.Vector3 GetStartArcDir(UnityEngine.Transform relativeTo)
    // Offset: 0x4835B70
    ::UnityEngine::Vector3 GetStartArcDir(::UnityEngine::Transform* relativeTo);
    // public UnityEngine.Vector3 GetEndArcDir(UnityEngine.Transform relativeTo)
    // Offset: 0x4835C1C
    ::UnityEngine::Vector3 GetEndArcDir(::UnityEngine::Transform* relativeTo);
    // public UnityEngine.Vector3 GetStartPoint(UnityEngine.Transform relativeTo)
    // Offset: 0x4835D78
    ::UnityEngine::Vector3 GetStartPoint(::UnityEngine::Transform* relativeTo);
    // public System.Void SetStartPoint(UnityEngine.Vector3 point, UnityEngine.Transform relativeTo)
    // Offset: 0x4835DA4
    void SetStartPoint(::UnityEngine::Vector3 point, ::UnityEngine::Transform* relativeTo);
    // public UnityEngine.Vector3 GetEndPoint(UnityEngine.Transform relativeTo)
    // Offset: 0x4835DD4
    ::UnityEngine::Vector3 GetEndPoint(::UnityEngine::Transform* relativeTo);
    // public System.Void SetEndPoint(UnityEngine.Vector3 point, UnityEngine.Transform relativeTo)
    // Offset: 0x4835E00
    void SetEndPoint(::UnityEngine::Vector3 point, ::UnityEngine::Transform* relativeTo);
    // public System.Single GetRadius(UnityEngine.Transform relativeTo)
    // Offset: 0x4835E30
    float GetRadius(::UnityEngine::Transform* relativeTo);
    // public UnityEngine.Vector3 GetDirection(UnityEngine.Transform relativeTo)
    // Offset: 0x4835FEC
    ::UnityEngine::Vector3 GetDirection(::UnityEngine::Transform* relativeTo);
    // private System.Single GetHeight(UnityEngine.Transform relativeTo)
    // Offset: 0x4836010
    float GetHeight(::UnityEngine::Transform* relativeTo);
    // private UnityEngine.Quaternion GetRotation(UnityEngine.Transform relativeTo)
    // Offset: 0x48360C8
    ::UnityEngine::Quaternion GetRotation(::UnityEngine::Transform* relativeTo);
    // protected System.Void Reset()
    // Offset: 0x483621C
    void Reset();
    // protected System.Void Start()
    // Offset: 0x4836304
    void Start();
    // public UnityEngine.Pose MirrorPose(in UnityEngine.Pose pose, UnityEngine.Transform relativeTo)
    // Offset: 0x4836308
    ::UnityEngine::Pose MirrorPose(ByRef<::UnityEngine::Pose> pose, ::UnityEngine::Transform* relativeTo);
    // private UnityEngine.Vector3 PointAltitude(UnityEngine.Vector3 point, UnityEngine.Transform relativeTo)
    // Offset: 0x4836450
    ::UnityEngine::Vector3 PointAltitude(::UnityEngine::Vector3 point, ::UnityEngine::Transform* relativeTo);
    // public Oculus.Interaction.Grab.GrabPoseScore CalculateBestPoseAtSurface(in UnityEngine.Pose targetPose, out UnityEngine.Pose bestPose, in Oculus.Interaction.Grab.PoseMeasureParameters scoringModifier, UnityEngine.Transform relativeTo)
    // Offset: 0x4836594
    ::Oculus::Interaction::Grab::GrabPoseScore CalculateBestPoseAtSurface(ByRef<::UnityEngine::Pose> targetPose, ByRef<::UnityEngine::Pose> bestPose, ByRef<::Oculus::Interaction::Grab::PoseMeasureParameters> scoringModifier, ::UnityEngine::Transform* relativeTo);
    // public Oculus.Interaction.Grab.GrabSurfaces.IGrabSurface CreateMirroredSurface(UnityEngine.GameObject gameObject)
    // Offset: 0x483666C
    ::Oculus::Interaction::Grab::GrabSurfaces::IGrabSurface* CreateMirroredSurface(::UnityEngine::GameObject* gameObject);
    // public Oculus.Interaction.Grab.GrabSurfaces.IGrabSurface CreateDuplicatedSurface(UnityEngine.GameObject gameObject)
    // Offset: 0x48366F0
    ::Oculus::Interaction::Grab::GrabSurfaces::IGrabSurface* CreateDuplicatedSurface(::UnityEngine::GameObject* gameObject);
    // protected UnityEngine.Vector3 NearestPointInSurface(UnityEngine.Vector3 targetPosition, UnityEngine.Transform relativeTo)
    // Offset: 0x48367FC
    ::UnityEngine::Vector3 NearestPointInSurface(::UnityEngine::Vector3 targetPosition, ::UnityEngine::Transform* relativeTo);
    // public System.Boolean CalculateBestPoseAtSurface(UnityEngine.Ray targetRay, out UnityEngine.Pose bestPose, UnityEngine.Transform relativeTo)
    // Offset: 0x4836CE0
    bool CalculateBestPoseAtSurface(::UnityEngine::Ray targetRay, ByRef<::UnityEngine::Pose> bestPose, ::UnityEngine::Transform* relativeTo);
    // protected UnityEngine.Pose MinimalRotationPoseAtSurface(in UnityEngine.Pose userPose, UnityEngine.Transform relativeTo)
    // Offset: 0x4837148
    ::UnityEngine::Pose MinimalRotationPoseAtSurface(ByRef<::UnityEngine::Pose> userPose, ::UnityEngine::Transform* relativeTo);
    // protected UnityEngine.Pose MinimalTranslationPoseAtSurface(in UnityEngine.Pose userPose, UnityEngine.Transform relativeTo)
    // Offset: 0x4837024
    ::UnityEngine::Pose MinimalTranslationPoseAtSurface(ByRef<::UnityEngine::Pose> userPose, ::UnityEngine::Transform* relativeTo);
    // protected UnityEngine.Quaternion CalculateRotationOffset(UnityEngine.Vector3 surfacePoint, UnityEngine.Transform relativeTo)
    // Offset: 0x4837598
    ::UnityEngine::Quaternion CalculateRotationOffset(::UnityEngine::Vector3 surfacePoint, ::UnityEngine::Transform* relativeTo);
    // public System.Void InjectAllCylinderSurface(Oculus.Interaction.Grab.GrabSurfaces.CylinderSurfaceData data, UnityEngine.Transform relativeTo)
    // Offset: 0x4837710
    void InjectAllCylinderSurface(::Oculus::Interaction::Grab::GrabSurfaces::CylinderSurfaceData* data, ::UnityEngine::Transform* relativeTo);
    // public System.Void InjectData(Oculus.Interaction.Grab.GrabSurfaces.CylinderSurfaceData data)
    // Offset: 0x4837740
    void InjectData(::Oculus::Interaction::Grab::GrabSurfaces::CylinderSurfaceData* data);
    // public System.Void InjectRelativeTo(UnityEngine.Transform relativeTo)
    // Offset: 0x4837748
    void InjectRelativeTo(::UnityEngine::Transform* relativeTo);
    // public System.Void .ctor()
    // Offset: 0x4837750
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CylinderGrabSurface* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CylinderGrabSurface*, creationType>()));
    }
    // private Oculus.Interaction.Grab.GrabPoseScore Oculus.Interaction.Grab.GrabSurfaces.IGrabSurface.CalculateBestPoseAtSurface(in UnityEngine.Pose targetPose, out UnityEngine.Pose bestPose, in Oculus.Interaction.Grab.PoseMeasureParameters scoringModifier, UnityEngine.Transform relativeTo)
    // Offset: 0x48377DC
    ::Oculus::Interaction::Grab::GrabPoseScore Oculus_Interaction_Grab_GrabSurfaces_IGrabSurface_CalculateBestPoseAtSurface(ByRef<::UnityEngine::Pose> targetPose, ByRef<::UnityEngine::Pose> bestPose, ByRef<::Oculus::Interaction::Grab::PoseMeasureParameters> scoringModifier, ::UnityEngine::Transform* relativeTo);
    // private UnityEngine.Pose Oculus.Interaction.Grab.GrabSurfaces.IGrabSurface.MirrorPose(in UnityEngine.Pose gripPose, UnityEngine.Transform relativeTo)
    // Offset: 0x48377E0
    ::UnityEngine::Pose Oculus_Interaction_Grab_GrabSurfaces_IGrabSurface_MirrorPose(ByRef<::UnityEngine::Pose> gripPose, ::UnityEngine::Transform* relativeTo);
  }; // Oculus.Interaction.Grab.GrabSurfaces.CylinderGrabSurface
  #pragma pack(pop)
  static check_size<sizeof(CylinderGrabSurface), 40 + sizeof(::UnityEngine::Transform*)> __Oculus_Interaction_Grab_GrabSurfaces_CylinderGrabSurfaceSizeCheck;
  static_assert(sizeof(CylinderGrabSurface) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::get_RelativePose
// Il2CppName: get_RelativePose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Pose (Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::*)()>(&Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::get_RelativePose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface*), "get_RelativePose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::GetReferencePose
// Il2CppName: GetReferencePose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Pose (Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::*)(::UnityEngine::Transform*)>(&Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::GetReferencePose)> {
  static const MethodInfo* get() {
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface*), "GetReferencePose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{relativeTo});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::get_ArcOffset
// Il2CppName: get_ArcOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::*)()>(&Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::get_ArcOffset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface*), "get_ArcOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::set_ArcOffset
// Il2CppName: set_ArcOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::*)(float)>(&Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::set_ArcOffset)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface*), "set_ArcOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::get_ArcLength
// Il2CppName: get_ArcLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::*)()>(&Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::get_ArcLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface*), "get_ArcLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::set_ArcLength
// Il2CppName: set_ArcLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::*)(float)>(&Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::set_ArcLength)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface*), "set_ArcLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::get_LocalPerpendicularDir
// Il2CppName: get_LocalPerpendicularDir
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::*)()>(&Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::get_LocalPerpendicularDir)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface*), "get_LocalPerpendicularDir", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::get_LocalDirection
// Il2CppName: get_LocalDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::*)()>(&Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::get_LocalDirection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface*), "get_LocalDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::GetPerpendicularDir
// Il2CppName: GetPerpendicularDir
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::*)(::UnityEngine::Transform*)>(&Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::GetPerpendicularDir)> {
  static const MethodInfo* get() {
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface*), "GetPerpendicularDir", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{relativeTo});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::GetStartArcDir
// Il2CppName: GetStartArcDir
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::*)(::UnityEngine::Transform*)>(&Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::GetStartArcDir)> {
  static const MethodInfo* get() {
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface*), "GetStartArcDir", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{relativeTo});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::GetEndArcDir
// Il2CppName: GetEndArcDir
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::*)(::UnityEngine::Transform*)>(&Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::GetEndArcDir)> {
  static const MethodInfo* get() {
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface*), "GetEndArcDir", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{relativeTo});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::GetStartPoint
// Il2CppName: GetStartPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::*)(::UnityEngine::Transform*)>(&Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::GetStartPoint)> {
  static const MethodInfo* get() {
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface*), "GetStartPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{relativeTo});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::SetStartPoint
// Il2CppName: SetStartPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::*)(::UnityEngine::Vector3, ::UnityEngine::Transform*)>(&Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::SetStartPoint)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface*), "SetStartPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point, relativeTo});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::GetEndPoint
// Il2CppName: GetEndPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::*)(::UnityEngine::Transform*)>(&Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::GetEndPoint)> {
  static const MethodInfo* get() {
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface*), "GetEndPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{relativeTo});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::SetEndPoint
// Il2CppName: SetEndPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::*)(::UnityEngine::Vector3, ::UnityEngine::Transform*)>(&Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::SetEndPoint)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface*), "SetEndPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point, relativeTo});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::GetRadius
// Il2CppName: GetRadius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::*)(::UnityEngine::Transform*)>(&Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::GetRadius)> {
  static const MethodInfo* get() {
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface*), "GetRadius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{relativeTo});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::GetDirection
// Il2CppName: GetDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::*)(::UnityEngine::Transform*)>(&Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::GetDirection)> {
  static const MethodInfo* get() {
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface*), "GetDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{relativeTo});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::GetHeight
// Il2CppName: GetHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::*)(::UnityEngine::Transform*)>(&Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::GetHeight)> {
  static const MethodInfo* get() {
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface*), "GetHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{relativeTo});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::GetRotation
// Il2CppName: GetRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::*)(::UnityEngine::Transform*)>(&Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::GetRotation)> {
  static const MethodInfo* get() {
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface*), "GetRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{relativeTo});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::*)()>(&Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::*)()>(&Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::MirrorPose
// Il2CppName: MirrorPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Pose (Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::*)(ByRef<::UnityEngine::Pose>, ::UnityEngine::Transform*)>(&Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::MirrorPose)> {
  static const MethodInfo* get() {
    static auto* pose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface*), "MirrorPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pose, relativeTo});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::PointAltitude
// Il2CppName: PointAltitude
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::*)(::UnityEngine::Vector3, ::UnityEngine::Transform*)>(&Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::PointAltitude)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface*), "PointAltitude", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point, relativeTo});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::CalculateBestPoseAtSurface
// Il2CppName: CalculateBestPoseAtSurface
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Grab::GrabPoseScore (Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::*)(ByRef<::UnityEngine::Pose>, ByRef<::UnityEngine::Pose>, ByRef<::Oculus::Interaction::Grab::PoseMeasureParameters>, ::UnityEngine::Transform*)>(&Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::CalculateBestPoseAtSurface)> {
  static const MethodInfo* get() {
    static auto* targetPose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    static auto* bestPose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    static auto* scoringModifier = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Grab", "PoseMeasureParameters")->this_arg;
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface*), "CalculateBestPoseAtSurface", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetPose, bestPose, scoringModifier, relativeTo});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::CreateMirroredSurface
// Il2CppName: CreateMirroredSurface
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Grab::GrabSurfaces::IGrabSurface* (Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::*)(::UnityEngine::GameObject*)>(&Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::CreateMirroredSurface)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface*), "CreateMirroredSurface", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::CreateDuplicatedSurface
// Il2CppName: CreateDuplicatedSurface
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Grab::GrabSurfaces::IGrabSurface* (Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::*)(::UnityEngine::GameObject*)>(&Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::CreateDuplicatedSurface)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface*), "CreateDuplicatedSurface", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::NearestPointInSurface
// Il2CppName: NearestPointInSurface
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::*)(::UnityEngine::Vector3, ::UnityEngine::Transform*)>(&Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::NearestPointInSurface)> {
  static const MethodInfo* get() {
    static auto* targetPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface*), "NearestPointInSurface", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetPosition, relativeTo});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::CalculateBestPoseAtSurface
// Il2CppName: CalculateBestPoseAtSurface
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::*)(::UnityEngine::Ray, ByRef<::UnityEngine::Pose>, ::UnityEngine::Transform*)>(&Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::CalculateBestPoseAtSurface)> {
  static const MethodInfo* get() {
    static auto* targetRay = &::il2cpp_utils::GetClassFromName("UnityEngine", "Ray")->byval_arg;
    static auto* bestPose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface*), "CalculateBestPoseAtSurface", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetRay, bestPose, relativeTo});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::MinimalRotationPoseAtSurface
// Il2CppName: MinimalRotationPoseAtSurface
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Pose (Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::*)(ByRef<::UnityEngine::Pose>, ::UnityEngine::Transform*)>(&Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::MinimalRotationPoseAtSurface)> {
  static const MethodInfo* get() {
    static auto* userPose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface*), "MinimalRotationPoseAtSurface", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userPose, relativeTo});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::MinimalTranslationPoseAtSurface
// Il2CppName: MinimalTranslationPoseAtSurface
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Pose (Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::*)(ByRef<::UnityEngine::Pose>, ::UnityEngine::Transform*)>(&Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::MinimalTranslationPoseAtSurface)> {
  static const MethodInfo* get() {
    static auto* userPose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface*), "MinimalTranslationPoseAtSurface", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userPose, relativeTo});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::CalculateRotationOffset
// Il2CppName: CalculateRotationOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::*)(::UnityEngine::Vector3, ::UnityEngine::Transform*)>(&Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::CalculateRotationOffset)> {
  static const MethodInfo* get() {
    static auto* surfacePoint = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface*), "CalculateRotationOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{surfacePoint, relativeTo});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::InjectAllCylinderSurface
// Il2CppName: InjectAllCylinderSurface
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::*)(::Oculus::Interaction::Grab::GrabSurfaces::CylinderSurfaceData*, ::UnityEngine::Transform*)>(&Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::InjectAllCylinderSurface)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Grab.GrabSurfaces", "CylinderSurfaceData")->byval_arg;
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface*), "InjectAllCylinderSurface", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, relativeTo});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::InjectData
// Il2CppName: InjectData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::*)(::Oculus::Interaction::Grab::GrabSurfaces::CylinderSurfaceData*)>(&Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::InjectData)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Grab.GrabSurfaces", "CylinderSurfaceData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface*), "InjectData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::InjectRelativeTo
// Il2CppName: InjectRelativeTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::*)(::UnityEngine::Transform*)>(&Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::InjectRelativeTo)> {
  static const MethodInfo* get() {
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface*), "InjectRelativeTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{relativeTo});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::Oculus_Interaction_Grab_GrabSurfaces_IGrabSurface_CalculateBestPoseAtSurface
// Il2CppName: Oculus.Interaction.Grab.GrabSurfaces.IGrabSurface.CalculateBestPoseAtSurface
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Grab::GrabPoseScore (Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::*)(ByRef<::UnityEngine::Pose>, ByRef<::UnityEngine::Pose>, ByRef<::Oculus::Interaction::Grab::PoseMeasureParameters>, ::UnityEngine::Transform*)>(&Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::Oculus_Interaction_Grab_GrabSurfaces_IGrabSurface_CalculateBestPoseAtSurface)> {
  static const MethodInfo* get() {
    static auto* targetPose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    static auto* bestPose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    static auto* scoringModifier = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Grab", "PoseMeasureParameters")->this_arg;
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface*), "Oculus.Interaction.Grab.GrabSurfaces.IGrabSurface.CalculateBestPoseAtSurface", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetPose, bestPose, scoringModifier, relativeTo});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::Oculus_Interaction_Grab_GrabSurfaces_IGrabSurface_MirrorPose
// Il2CppName: Oculus.Interaction.Grab.GrabSurfaces.IGrabSurface.MirrorPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Pose (Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::*)(ByRef<::UnityEngine::Pose>, ::UnityEngine::Transform*)>(&Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface::Oculus_Interaction_Grab_GrabSurfaces_IGrabSurface_MirrorPose)> {
  static const MethodInfo* get() {
    static auto* gripPose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::CylinderGrabSurface*), "Oculus.Interaction.Grab.GrabSurfaces.IGrabSurface.MirrorPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gripPose, relativeTo});
  }
};
