// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Oculus.Interaction.Grab.GrabSurfaces.IGrabSurface
#include "Oculus/Interaction/Grab/GrabSurfaces/IGrabSurface.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction::Grab::GrabSurfaces
namespace Oculus::Interaction::Grab::GrabSurfaces {
  // Forward declaring type: BoxGrabSurfaceData
  class BoxGrabSurfaceData;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Pose
  struct Pose;
  // Forward declaring type: Vector4
  struct Vector4;
  // Forward declaring type: Ray
  struct Ray;
  // Skipping declaration: Quaternion because it is already included!
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: Oculus::Interaction::Grab
namespace Oculus::Interaction::Grab {
  // Forward declaring type: GrabPoseScore
  struct GrabPoseScore;
  // Forward declaring type: PoseMeasureParameters
  struct PoseMeasureParameters;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: ValueTuple`2<T1, T2>
  template<typename T1, typename T2>
  struct ValueTuple_2;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.Grab.GrabSurfaces
namespace Oculus::Interaction::Grab::GrabSurfaces {
  // Forward declaring type: BoxGrabSurface
  class BoxGrabSurface;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface*, "Oculus.Interaction.Grab.GrabSurfaces", "BoxGrabSurface");
// Type namespace: Oculus.Interaction.Grab.GrabSurfaces
namespace Oculus::Interaction::Grab::GrabSurfaces {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.Grab.GrabSurfaces.BoxGrabSurface
  // [TokenAttribute] Offset: FFFFFFFF
  class BoxGrabSurface : public ::UnityEngine::MonoBehaviour/*, public ::Oculus::Interaction::Grab::GrabSurfaces::IGrabSurface*/ {
    public:
    public:
    // protected Oculus.Interaction.Grab.GrabSurfaces.BoxGrabSurfaceData _data
    // Size: 0x8
    // Offset: 0x20
    ::Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurfaceData* data;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurfaceData*) == 0x8);
    // private UnityEngine.Transform _relativeTo
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Transform* relativeTo;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::Grab::GrabSurfaces::IGrabSurface
    operator ::Oculus::Interaction::Grab::GrabSurfaces::IGrabSurface() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::Grab::GrabSurfaces::IGrabSurface*>(this);
    }
    // Get instance field reference: protected Oculus.Interaction.Grab.GrabSurfaces.BoxGrabSurfaceData _data
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurfaceData*& dyn__data();
    // Get instance field reference: private UnityEngine.Transform _relativeTo
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__relativeTo();
    // private UnityEngine.Pose get_RelativePose()
    // Offset: 0x4832F88
    ::UnityEngine::Pose get_RelativePose();
    // public UnityEngine.Pose GetReferencePose(UnityEngine.Transform relativeTo)
    // Offset: 0x4832FD8
    ::UnityEngine::Pose GetReferencePose(::UnityEngine::Transform* relativeTo);
    // public System.Single GetWidthOffset(UnityEngine.Transform relativeTo)
    // Offset: 0x4833050
    float GetWidthOffset(::UnityEngine::Transform* relativeTo);
    // public System.Void SetWidthOffset(System.Single widthOffset, UnityEngine.Transform relativeTo)
    // Offset: 0x4833088
    void SetWidthOffset(float widthOffset, ::UnityEngine::Transform* relativeTo);
    // public UnityEngine.Vector4 GetSnapOffset(UnityEngine.Transform relativeTo)
    // Offset: 0x48330C4
    ::UnityEngine::Vector4 GetSnapOffset(::UnityEngine::Transform* relativeTo);
    // public System.Void SetSnapOffset(UnityEngine.Vector4 snapOffset, UnityEngine.Transform relativeTo)
    // Offset: 0x4833118
    void SetSnapOffset(::UnityEngine::Vector4 snapOffset, ::UnityEngine::Transform* relativeTo);
    // public UnityEngine.Vector3 GetSize(UnityEngine.Transform relativeTo)
    // Offset: 0x4833178
    ::UnityEngine::Vector3 GetSize(::UnityEngine::Transform* relativeTo);
    // public System.Void SetSize(UnityEngine.Vector3 size, UnityEngine.Transform relativeTo)
    // Offset: 0x48331C8
    void SetSize(::UnityEngine::Vector3 size, ::UnityEngine::Transform* relativeTo);
    // public UnityEngine.Quaternion GetRotation(UnityEngine.Transform relativeTo)
    // Offset: 0x4833220
    ::UnityEngine::Quaternion GetRotation(::UnityEngine::Transform* relativeTo);
    // public System.Void SetRotation(UnityEngine.Quaternion rotation, UnityEngine.Transform relativeTo)
    // Offset: 0x4833300
    void SetRotation(::UnityEngine::Quaternion rotation, ::UnityEngine::Transform* relativeTo);
    // public UnityEngine.Vector3 GetDirection(UnityEngine.Transform relativeTo)
    // Offset: 0x48333EC
    ::UnityEngine::Vector3 GetDirection(::UnityEngine::Transform* relativeTo);
    // protected System.Void Reset()
    // Offset: 0x4833468
    void Reset();
    // protected System.Void Start()
    // Offset: 0x4833550
    void Start();
    // public UnityEngine.Pose MirrorPose(in UnityEngine.Pose pose, UnityEngine.Transform relativeTo)
    // Offset: 0x4833554
    ::UnityEngine::Pose MirrorPose(ByRef<::UnityEngine::Pose> pose, ::UnityEngine::Transform* relativeTo);
    // public Oculus.Interaction.Grab.GrabSurfaces.IGrabSurface CreateMirroredSurface(UnityEngine.GameObject gameObject)
    // Offset: 0x4833764
    ::Oculus::Interaction::Grab::GrabSurfaces::IGrabSurface* CreateMirroredSurface(::UnityEngine::GameObject* gameObject);
    // public Oculus.Interaction.Grab.GrabSurfaces.IGrabSurface CreateDuplicatedSurface(UnityEngine.GameObject gameObject)
    // Offset: 0x48337E8
    ::Oculus::Interaction::Grab::GrabSurfaces::IGrabSurface* CreateDuplicatedSurface(::UnityEngine::GameObject* gameObject);
    // public Oculus.Interaction.Grab.GrabPoseScore CalculateBestPoseAtSurface(in UnityEngine.Pose targetPose, out UnityEngine.Pose bestPose, in Oculus.Interaction.Grab.PoseMeasureParameters scoringModifier, UnityEngine.Transform relativeTo)
    // Offset: 0x4833858
    ::Oculus::Interaction::Grab::GrabPoseScore CalculateBestPoseAtSurface(ByRef<::UnityEngine::Pose> targetPose, ByRef<::UnityEngine::Pose> bestPose, ByRef<::Oculus::Interaction::Grab::PoseMeasureParameters> scoringModifier, ::UnityEngine::Transform* relativeTo);
    // private System.Void CalculateCorners(out UnityEngine.Vector3 bottomLeft, out UnityEngine.Vector3 bottomRight, out UnityEngine.Vector3 topLeft, out UnityEngine.Vector3 topRight, UnityEngine.Transform relativeTo)
    // Offset: 0x4833930
    void CalculateCorners(ByRef<::UnityEngine::Vector3> bottomLeft, ByRef<::UnityEngine::Vector3> bottomRight, ByRef<::UnityEngine::Vector3> topLeft, ByRef<::UnityEngine::Vector3> topRight, ::UnityEngine::Transform* relativeTo);
    // private UnityEngine.Vector3 ProjectOnSegment(UnityEngine.Vector3 point, System.ValueTuple`2<UnityEngine.Vector3,UnityEngine.Vector3> segment)
    // Offset: 0x4833B40
    ::UnityEngine::Vector3 ProjectOnSegment(::UnityEngine::Vector3 point, ::System::ValueTuple_2<::UnityEngine::Vector3, ::UnityEngine::Vector3> segment);
    // public System.Boolean CalculateBestPoseAtSurface(UnityEngine.Ray targetRay, out UnityEngine.Pose bestPose, UnityEngine.Transform relativeTo)
    // Offset: 0x4833D54
    bool CalculateBestPoseAtSurface(::UnityEngine::Ray targetRay, ByRef<::UnityEngine::Pose> bestPose, ::UnityEngine::Transform* relativeTo);
    // protected UnityEngine.Vector3 NearestPointInSurface(UnityEngine.Vector3 targetPosition, UnityEngine.Transform relativeTo)
    // Offset: 0x4834088
    ::UnityEngine::Vector3 NearestPointInSurface(::UnityEngine::Vector3 targetPosition, ::UnityEngine::Transform* relativeTo);
    // private System.Void NearestPointAndAngleInSurface(UnityEngine.Vector3 targetPosition, out UnityEngine.Vector3 surfacePoint, out System.Single angle, UnityEngine.Transform relativeTo)
    // Offset: 0x4834270
    void NearestPointAndAngleInSurface(::UnityEngine::Vector3 targetPosition, ByRef<::UnityEngine::Vector3> surfacePoint, ByRef<float> angle, ::UnityEngine::Transform* relativeTo);
    // protected UnityEngine.Pose MinimalRotationPoseAtSurface(in UnityEngine.Pose userPose, UnityEngine.Transform relativeTo)
    // Offset: 0x4834764
    ::UnityEngine::Pose MinimalRotationPoseAtSurface(ByRef<::UnityEngine::Pose> userPose, ::UnityEngine::Transform* relativeTo);
    // protected UnityEngine.Pose MinimalTranslationPoseAtSurface(in UnityEngine.Pose userPose, UnityEngine.Transform relativeTo)
    // Offset: 0x48340C0
    ::UnityEngine::Pose MinimalTranslationPoseAtSurface(ByRef<::UnityEngine::Pose> userPose, ::UnityEngine::Transform* relativeTo);
    // static private System.Single RotationalScore(in UnityEngine.Quaternion from, in UnityEngine.Quaternion to)
    // Offset: 0x4834E9C
    static float RotationalScore(ByRef<::UnityEngine::Quaternion> from, ByRef<::UnityEngine::Quaternion> to);
    // public System.Void InjectAllBoxSurface(Oculus.Interaction.Grab.GrabSurfaces.BoxGrabSurfaceData data, UnityEngine.Transform relativeTo)
    // Offset: 0x4835094
    void InjectAllBoxSurface(::Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurfaceData* data, ::UnityEngine::Transform* relativeTo);
    // public System.Void InjectData(Oculus.Interaction.Grab.GrabSurfaces.BoxGrabSurfaceData data)
    // Offset: 0x48350C4
    void InjectData(::Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurfaceData* data);
    // public System.Void InjectRelativeTo(UnityEngine.Transform relativeTo)
    // Offset: 0x48350CC
    void InjectRelativeTo(::UnityEngine::Transform* relativeTo);
    // public System.Void .ctor()
    // Offset: 0x48350D4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BoxGrabSurface* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BoxGrabSurface*, creationType>()));
    }
    // private Oculus.Interaction.Grab.GrabPoseScore Oculus.Interaction.Grab.GrabSurfaces.IGrabSurface.CalculateBestPoseAtSurface(in UnityEngine.Pose targetPose, out UnityEngine.Pose bestPose, in Oculus.Interaction.Grab.PoseMeasureParameters scoringModifier, UnityEngine.Transform relativeTo)
    // Offset: 0x4835160
    ::Oculus::Interaction::Grab::GrabPoseScore Oculus_Interaction_Grab_GrabSurfaces_IGrabSurface_CalculateBestPoseAtSurface(ByRef<::UnityEngine::Pose> targetPose, ByRef<::UnityEngine::Pose> bestPose, ByRef<::Oculus::Interaction::Grab::PoseMeasureParameters> scoringModifier, ::UnityEngine::Transform* relativeTo);
    // private UnityEngine.Pose Oculus.Interaction.Grab.GrabSurfaces.IGrabSurface.MirrorPose(in UnityEngine.Pose gripPose, UnityEngine.Transform relativeTo)
    // Offset: 0x4835164
    ::UnityEngine::Pose Oculus_Interaction_Grab_GrabSurfaces_IGrabSurface_MirrorPose(ByRef<::UnityEngine::Pose> gripPose, ::UnityEngine::Transform* relativeTo);
  }; // Oculus.Interaction.Grab.GrabSurfaces.BoxGrabSurface
  #pragma pack(pop)
  static check_size<sizeof(BoxGrabSurface), 40 + sizeof(::UnityEngine::Transform*)> __Oculus_Interaction_Grab_GrabSurfaces_BoxGrabSurfaceSizeCheck;
  static_assert(sizeof(BoxGrabSurface) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::get_RelativePose
// Il2CppName: get_RelativePose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Pose (Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::*)()>(&Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::get_RelativePose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface*), "get_RelativePose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::GetReferencePose
// Il2CppName: GetReferencePose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Pose (Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::*)(::UnityEngine::Transform*)>(&Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::GetReferencePose)> {
  static const MethodInfo* get() {
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface*), "GetReferencePose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{relativeTo});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::GetWidthOffset
// Il2CppName: GetWidthOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::*)(::UnityEngine::Transform*)>(&Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::GetWidthOffset)> {
  static const MethodInfo* get() {
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface*), "GetWidthOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{relativeTo});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::SetWidthOffset
// Il2CppName: SetWidthOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::*)(float, ::UnityEngine::Transform*)>(&Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::SetWidthOffset)> {
  static const MethodInfo* get() {
    static auto* widthOffset = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface*), "SetWidthOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{widthOffset, relativeTo});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::GetSnapOffset
// Il2CppName: GetSnapOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::*)(::UnityEngine::Transform*)>(&Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::GetSnapOffset)> {
  static const MethodInfo* get() {
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface*), "GetSnapOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{relativeTo});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::SetSnapOffset
// Il2CppName: SetSnapOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::*)(::UnityEngine::Vector4, ::UnityEngine::Transform*)>(&Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::SetSnapOffset)> {
  static const MethodInfo* get() {
    static auto* snapOffset = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface*), "SetSnapOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{snapOffset, relativeTo});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::GetSize
// Il2CppName: GetSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::*)(::UnityEngine::Transform*)>(&Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::GetSize)> {
  static const MethodInfo* get() {
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface*), "GetSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{relativeTo});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::SetSize
// Il2CppName: SetSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::*)(::UnityEngine::Vector3, ::UnityEngine::Transform*)>(&Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::SetSize)> {
  static const MethodInfo* get() {
    static auto* size = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface*), "SetSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{size, relativeTo});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::GetRotation
// Il2CppName: GetRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::*)(::UnityEngine::Transform*)>(&Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::GetRotation)> {
  static const MethodInfo* get() {
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface*), "GetRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{relativeTo});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::SetRotation
// Il2CppName: SetRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::*)(::UnityEngine::Quaternion, ::UnityEngine::Transform*)>(&Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::SetRotation)> {
  static const MethodInfo* get() {
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface*), "SetRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rotation, relativeTo});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::GetDirection
// Il2CppName: GetDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::*)(::UnityEngine::Transform*)>(&Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::GetDirection)> {
  static const MethodInfo* get() {
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface*), "GetDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{relativeTo});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::*)()>(&Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::*)()>(&Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::MirrorPose
// Il2CppName: MirrorPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Pose (Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::*)(ByRef<::UnityEngine::Pose>, ::UnityEngine::Transform*)>(&Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::MirrorPose)> {
  static const MethodInfo* get() {
    static auto* pose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface*), "MirrorPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pose, relativeTo});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::CreateMirroredSurface
// Il2CppName: CreateMirroredSurface
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Grab::GrabSurfaces::IGrabSurface* (Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::*)(::UnityEngine::GameObject*)>(&Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::CreateMirroredSurface)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface*), "CreateMirroredSurface", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::CreateDuplicatedSurface
// Il2CppName: CreateDuplicatedSurface
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Grab::GrabSurfaces::IGrabSurface* (Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::*)(::UnityEngine::GameObject*)>(&Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::CreateDuplicatedSurface)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface*), "CreateDuplicatedSurface", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::CalculateBestPoseAtSurface
// Il2CppName: CalculateBestPoseAtSurface
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Grab::GrabPoseScore (Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::*)(ByRef<::UnityEngine::Pose>, ByRef<::UnityEngine::Pose>, ByRef<::Oculus::Interaction::Grab::PoseMeasureParameters>, ::UnityEngine::Transform*)>(&Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::CalculateBestPoseAtSurface)> {
  static const MethodInfo* get() {
    static auto* targetPose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    static auto* bestPose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    static auto* scoringModifier = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Grab", "PoseMeasureParameters")->this_arg;
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface*), "CalculateBestPoseAtSurface", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetPose, bestPose, scoringModifier, relativeTo});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::CalculateCorners
// Il2CppName: CalculateCorners
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::*)(ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>, ::UnityEngine::Transform*)>(&Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::CalculateCorners)> {
  static const MethodInfo* get() {
    static auto* bottomLeft = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* bottomRight = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* topLeft = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* topRight = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface*), "CalculateCorners", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bottomLeft, bottomRight, topLeft, topRight, relativeTo});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::ProjectOnSegment
// Il2CppName: ProjectOnSegment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::*)(::UnityEngine::Vector3, ::System::ValueTuple_2<::UnityEngine::Vector3, ::UnityEngine::Vector3>)>(&Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::ProjectOnSegment)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* segment = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ValueTuple`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), ::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface*), "ProjectOnSegment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point, segment});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::CalculateBestPoseAtSurface
// Il2CppName: CalculateBestPoseAtSurface
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::*)(::UnityEngine::Ray, ByRef<::UnityEngine::Pose>, ::UnityEngine::Transform*)>(&Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::CalculateBestPoseAtSurface)> {
  static const MethodInfo* get() {
    static auto* targetRay = &::il2cpp_utils::GetClassFromName("UnityEngine", "Ray")->byval_arg;
    static auto* bestPose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface*), "CalculateBestPoseAtSurface", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetRay, bestPose, relativeTo});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::NearestPointInSurface
// Il2CppName: NearestPointInSurface
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::*)(::UnityEngine::Vector3, ::UnityEngine::Transform*)>(&Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::NearestPointInSurface)> {
  static const MethodInfo* get() {
    static auto* targetPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface*), "NearestPointInSurface", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetPosition, relativeTo});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::NearestPointAndAngleInSurface
// Il2CppName: NearestPointAndAngleInSurface
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::*)(::UnityEngine::Vector3, ByRef<::UnityEngine::Vector3>, ByRef<float>, ::UnityEngine::Transform*)>(&Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::NearestPointAndAngleInSurface)> {
  static const MethodInfo* get() {
    static auto* targetPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* surfacePoint = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* angle = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface*), "NearestPointAndAngleInSurface", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetPosition, surfacePoint, angle, relativeTo});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::MinimalRotationPoseAtSurface
// Il2CppName: MinimalRotationPoseAtSurface
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Pose (Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::*)(ByRef<::UnityEngine::Pose>, ::UnityEngine::Transform*)>(&Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::MinimalRotationPoseAtSurface)> {
  static const MethodInfo* get() {
    static auto* userPose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface*), "MinimalRotationPoseAtSurface", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userPose, relativeTo});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::MinimalTranslationPoseAtSurface
// Il2CppName: MinimalTranslationPoseAtSurface
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Pose (Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::*)(ByRef<::UnityEngine::Pose>, ::UnityEngine::Transform*)>(&Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::MinimalTranslationPoseAtSurface)> {
  static const MethodInfo* get() {
    static auto* userPose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface*), "MinimalTranslationPoseAtSurface", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userPose, relativeTo});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::RotationalScore
// Il2CppName: RotationalScore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(ByRef<::UnityEngine::Quaternion>, ByRef<::UnityEngine::Quaternion>)>(&Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::RotationalScore)> {
  static const MethodInfo* get() {
    static auto* from = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface*), "RotationalScore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{from, to});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::InjectAllBoxSurface
// Il2CppName: InjectAllBoxSurface
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::*)(::Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurfaceData*, ::UnityEngine::Transform*)>(&Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::InjectAllBoxSurface)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Grab.GrabSurfaces", "BoxGrabSurfaceData")->byval_arg;
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface*), "InjectAllBoxSurface", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, relativeTo});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::InjectData
// Il2CppName: InjectData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::*)(::Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurfaceData*)>(&Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::InjectData)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Grab.GrabSurfaces", "BoxGrabSurfaceData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface*), "InjectData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::InjectRelativeTo
// Il2CppName: InjectRelativeTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::*)(::UnityEngine::Transform*)>(&Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::InjectRelativeTo)> {
  static const MethodInfo* get() {
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface*), "InjectRelativeTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{relativeTo});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::Oculus_Interaction_Grab_GrabSurfaces_IGrabSurface_CalculateBestPoseAtSurface
// Il2CppName: Oculus.Interaction.Grab.GrabSurfaces.IGrabSurface.CalculateBestPoseAtSurface
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Grab::GrabPoseScore (Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::*)(ByRef<::UnityEngine::Pose>, ByRef<::UnityEngine::Pose>, ByRef<::Oculus::Interaction::Grab::PoseMeasureParameters>, ::UnityEngine::Transform*)>(&Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::Oculus_Interaction_Grab_GrabSurfaces_IGrabSurface_CalculateBestPoseAtSurface)> {
  static const MethodInfo* get() {
    static auto* targetPose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    static auto* bestPose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    static auto* scoringModifier = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Grab", "PoseMeasureParameters")->this_arg;
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface*), "Oculus.Interaction.Grab.GrabSurfaces.IGrabSurface.CalculateBestPoseAtSurface", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetPose, bestPose, scoringModifier, relativeTo});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::Oculus_Interaction_Grab_GrabSurfaces_IGrabSurface_MirrorPose
// Il2CppName: Oculus.Interaction.Grab.GrabSurfaces.IGrabSurface.MirrorPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Pose (Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::*)(ByRef<::UnityEngine::Pose>, ::UnityEngine::Transform*)>(&Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface::Oculus_Interaction_Grab_GrabSurfaces_IGrabSurface_MirrorPose)> {
  static const MethodInfo* get() {
    static auto* gripPose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::BoxGrabSurface*), "Oculus.Interaction.Grab.GrabSurfaces.IGrabSurface.MirrorPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gripPose, relativeTo});
  }
};
