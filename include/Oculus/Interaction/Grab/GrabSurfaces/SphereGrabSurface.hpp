// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Oculus.Interaction.Grab.GrabSurfaces.IGrabSurface
#include "Oculus/Interaction/Grab/GrabSurfaces/IGrabSurface.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction::Grab::GrabSurfaces
namespace Oculus::Interaction::Grab::GrabSurfaces {
  // Forward declaring type: SphereGrabSurfaceData
  class SphereGrabSurfaceData;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Pose
  struct Pose;
  // Skipping declaration: Vector3 because it is already included!
  // Forward declaring type: Ray
  struct Ray;
  // Forward declaring type: GameObject
  class GameObject;
  // Skipping declaration: Quaternion because it is already included!
}
// Forward declaring namespace: Oculus::Interaction::Grab
namespace Oculus::Interaction::Grab {
  // Forward declaring type: GrabPoseScore
  struct GrabPoseScore;
  // Forward declaring type: PoseMeasureParameters
  struct PoseMeasureParameters;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.Grab.GrabSurfaces
namespace Oculus::Interaction::Grab::GrabSurfaces {
  // Forward declaring type: SphereGrabSurface
  class SphereGrabSurface;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface*, "Oculus.Interaction.Grab.GrabSurfaces", "SphereGrabSurface");
// Type namespace: Oculus.Interaction.Grab.GrabSurfaces
namespace Oculus::Interaction::Grab::GrabSurfaces {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.Grab.GrabSurfaces.SphereGrabSurface
  // [TokenAttribute] Offset: FFFFFFFF
  class SphereGrabSurface : public ::UnityEngine::MonoBehaviour/*, public ::Oculus::Interaction::Grab::GrabSurfaces::IGrabSurface*/ {
    public:
    public:
    // protected Oculus.Interaction.Grab.GrabSurfaces.SphereGrabSurfaceData _data
    // Size: 0x8
    // Offset: 0x20
    ::Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurfaceData* data;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurfaceData*) == 0x8);
    // private UnityEngine.Transform _relativeTo
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Transform* relativeTo;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::Grab::GrabSurfaces::IGrabSurface
    operator ::Oculus::Interaction::Grab::GrabSurfaces::IGrabSurface() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::Grab::GrabSurfaces::IGrabSurface*>(this);
    }
    // Get instance field reference: protected Oculus.Interaction.Grab.GrabSurfaces.SphereGrabSurfaceData _data
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurfaceData*& dyn__data();
    // Get instance field reference: private UnityEngine.Transform _relativeTo
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__relativeTo();
    // private UnityEngine.Pose get_RelativePose()
    // Offset: 0x4837974
    ::UnityEngine::Pose get_RelativePose();
    // public UnityEngine.Pose GetReferencePose(UnityEngine.Transform relativeTo)
    // Offset: 0x48379C4
    ::UnityEngine::Pose GetReferencePose(::UnityEngine::Transform* relativeTo);
    // public UnityEngine.Vector3 GetCentre(UnityEngine.Transform relativeTo)
    // Offset: 0x4837A3C
    ::UnityEngine::Vector3 GetCentre(::UnityEngine::Transform* relativeTo);
    // public System.Void SetCentre(UnityEngine.Vector3 point, UnityEngine.Transform relativeTo)
    // Offset: 0x4837A68
    void SetCentre(::UnityEngine::Vector3 point, ::UnityEngine::Transform* relativeTo);
    // public System.Single GetRadius(UnityEngine.Transform relativeTo)
    // Offset: 0x4837A98
    float GetRadius(::UnityEngine::Transform* relativeTo);
    // public UnityEngine.Vector3 GetDirection(UnityEngine.Transform relativeTo)
    // Offset: 0x4837B58
    ::UnityEngine::Vector3 GetDirection(::UnityEngine::Transform* relativeTo);
    // protected System.Void Reset()
    // Offset: 0x4837C70
    void Reset();
    // protected System.Void Start()
    // Offset: 0x4837D58
    void Start();
    // public UnityEngine.Pose MirrorPose(in UnityEngine.Pose pose, UnityEngine.Transform relativeTo)
    // Offset: 0x4837D5C
    ::UnityEngine::Pose MirrorPose(ByRef<::UnityEngine::Pose> pose, ::UnityEngine::Transform* relativeTo);
    // public System.Boolean CalculateBestPoseAtSurface(UnityEngine.Ray targetRay, out UnityEngine.Pose bestPose, UnityEngine.Transform relativeTo)
    // Offset: 0x4837E90
    bool CalculateBestPoseAtSurface(::UnityEngine::Ray targetRay, ByRef<::UnityEngine::Pose> bestPose, ::UnityEngine::Transform* relativeTo);
    // public Oculus.Interaction.Grab.GrabPoseScore CalculateBestPoseAtSurface(in UnityEngine.Pose targetPose, out UnityEngine.Pose bestPose, in Oculus.Interaction.Grab.PoseMeasureParameters scoringModifier, UnityEngine.Transform relativeTo)
    // Offset: 0x48383C0
    ::Oculus::Interaction::Grab::GrabPoseScore CalculateBestPoseAtSurface(ByRef<::UnityEngine::Pose> targetPose, ByRef<::UnityEngine::Pose> bestPose, ByRef<::Oculus::Interaction::Grab::PoseMeasureParameters> scoringModifier, ::UnityEngine::Transform* relativeTo);
    // public Oculus.Interaction.Grab.GrabSurfaces.IGrabSurface CreateMirroredSurface(UnityEngine.GameObject gameObject)
    // Offset: 0x4838498
    ::Oculus::Interaction::Grab::GrabSurfaces::IGrabSurface* CreateMirroredSurface(::UnityEngine::GameObject* gameObject);
    // public Oculus.Interaction.Grab.GrabSurfaces.IGrabSurface CreateDuplicatedSurface(UnityEngine.GameObject gameObject)
    // Offset: 0x483851C
    ::Oculus::Interaction::Grab::GrabSurfaces::IGrabSurface* CreateDuplicatedSurface(::UnityEngine::GameObject* gameObject);
    // protected UnityEngine.Vector3 NearestPointInSurface(UnityEngine.Vector3 targetPosition, UnityEngine.Transform relativeTo)
    // Offset: 0x483818C
    ::UnityEngine::Vector3 NearestPointInSurface(::UnityEngine::Vector3 targetPosition, ::UnityEngine::Transform* relativeTo);
    // protected UnityEngine.Pose MinimalRotationPoseAtSurface(in UnityEngine.Pose userPose, UnityEngine.Transform relativeTo)
    // Offset: 0x483858C
    ::UnityEngine::Pose MinimalRotationPoseAtSurface(ByRef<::UnityEngine::Pose> userPose, ::UnityEngine::Transform* relativeTo);
    // protected UnityEngine.Pose MinimalTranslationPoseAtSurface(in UnityEngine.Pose userPose, UnityEngine.Transform relativeTo)
    // Offset: 0x48382BC
    ::UnityEngine::Pose MinimalTranslationPoseAtSurface(ByRef<::UnityEngine::Pose> userPose, ::UnityEngine::Transform* relativeTo);
    // protected UnityEngine.Quaternion RotationAtPoint(UnityEngine.Vector3 surfacePoint, UnityEngine.Quaternion baseRot, UnityEngine.Quaternion desiredRotation, UnityEngine.Transform relativeTo)
    // Offset: 0x4838798
    ::UnityEngine::Quaternion RotationAtPoint(::UnityEngine::Vector3 surfacePoint, ::UnityEngine::Quaternion baseRot, ::UnityEngine::Quaternion desiredRotation, ::UnityEngine::Transform* relativeTo);
    // public System.Void InjectAllSphereSurface(Oculus.Interaction.Grab.GrabSurfaces.SphereGrabSurfaceData data, UnityEngine.Transform relativeTo)
    // Offset: 0x4838CC4
    void InjectAllSphereSurface(::Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurfaceData* data, ::UnityEngine::Transform* relativeTo);
    // public System.Void InjectData(Oculus.Interaction.Grab.GrabSurfaces.SphereGrabSurfaceData data)
    // Offset: 0x4838CF4
    void InjectData(::Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurfaceData* data);
    // public System.Void InjectRelativeTo(UnityEngine.Transform relativeTo)
    // Offset: 0x4838CFC
    void InjectRelativeTo(::UnityEngine::Transform* relativeTo);
    // public System.Void .ctor()
    // Offset: 0x4838D04
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SphereGrabSurface* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SphereGrabSurface*, creationType>()));
    }
    // private Oculus.Interaction.Grab.GrabPoseScore Oculus.Interaction.Grab.GrabSurfaces.IGrabSurface.CalculateBestPoseAtSurface(in UnityEngine.Pose targetPose, out UnityEngine.Pose bestPose, in Oculus.Interaction.Grab.PoseMeasureParameters scoringModifier, UnityEngine.Transform relativeTo)
    // Offset: 0x4838D6C
    ::Oculus::Interaction::Grab::GrabPoseScore Oculus_Interaction_Grab_GrabSurfaces_IGrabSurface_CalculateBestPoseAtSurface(ByRef<::UnityEngine::Pose> targetPose, ByRef<::UnityEngine::Pose> bestPose, ByRef<::Oculus::Interaction::Grab::PoseMeasureParameters> scoringModifier, ::UnityEngine::Transform* relativeTo);
    // private UnityEngine.Pose Oculus.Interaction.Grab.GrabSurfaces.IGrabSurface.MirrorPose(in UnityEngine.Pose gripPose, UnityEngine.Transform relativeTo)
    // Offset: 0x4838D70
    ::UnityEngine::Pose Oculus_Interaction_Grab_GrabSurfaces_IGrabSurface_MirrorPose(ByRef<::UnityEngine::Pose> gripPose, ::UnityEngine::Transform* relativeTo);
  }; // Oculus.Interaction.Grab.GrabSurfaces.SphereGrabSurface
  #pragma pack(pop)
  static check_size<sizeof(SphereGrabSurface), 40 + sizeof(::UnityEngine::Transform*)> __Oculus_Interaction_Grab_GrabSurfaces_SphereGrabSurfaceSizeCheck;
  static_assert(sizeof(SphereGrabSurface) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface::get_RelativePose
// Il2CppName: get_RelativePose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Pose (Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface::*)()>(&Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface::get_RelativePose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface*), "get_RelativePose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface::GetReferencePose
// Il2CppName: GetReferencePose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Pose (Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface::*)(::UnityEngine::Transform*)>(&Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface::GetReferencePose)> {
  static const MethodInfo* get() {
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface*), "GetReferencePose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{relativeTo});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface::GetCentre
// Il2CppName: GetCentre
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface::*)(::UnityEngine::Transform*)>(&Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface::GetCentre)> {
  static const MethodInfo* get() {
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface*), "GetCentre", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{relativeTo});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface::SetCentre
// Il2CppName: SetCentre
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface::*)(::UnityEngine::Vector3, ::UnityEngine::Transform*)>(&Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface::SetCentre)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface*), "SetCentre", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point, relativeTo});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface::GetRadius
// Il2CppName: GetRadius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface::*)(::UnityEngine::Transform*)>(&Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface::GetRadius)> {
  static const MethodInfo* get() {
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface*), "GetRadius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{relativeTo});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface::GetDirection
// Il2CppName: GetDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface::*)(::UnityEngine::Transform*)>(&Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface::GetDirection)> {
  static const MethodInfo* get() {
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface*), "GetDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{relativeTo});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface::*)()>(&Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface::*)()>(&Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface::MirrorPose
// Il2CppName: MirrorPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Pose (Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface::*)(ByRef<::UnityEngine::Pose>, ::UnityEngine::Transform*)>(&Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface::MirrorPose)> {
  static const MethodInfo* get() {
    static auto* pose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface*), "MirrorPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pose, relativeTo});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface::CalculateBestPoseAtSurface
// Il2CppName: CalculateBestPoseAtSurface
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface::*)(::UnityEngine::Ray, ByRef<::UnityEngine::Pose>, ::UnityEngine::Transform*)>(&Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface::CalculateBestPoseAtSurface)> {
  static const MethodInfo* get() {
    static auto* targetRay = &::il2cpp_utils::GetClassFromName("UnityEngine", "Ray")->byval_arg;
    static auto* bestPose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface*), "CalculateBestPoseAtSurface", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetRay, bestPose, relativeTo});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface::CalculateBestPoseAtSurface
// Il2CppName: CalculateBestPoseAtSurface
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Grab::GrabPoseScore (Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface::*)(ByRef<::UnityEngine::Pose>, ByRef<::UnityEngine::Pose>, ByRef<::Oculus::Interaction::Grab::PoseMeasureParameters>, ::UnityEngine::Transform*)>(&Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface::CalculateBestPoseAtSurface)> {
  static const MethodInfo* get() {
    static auto* targetPose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    static auto* bestPose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    static auto* scoringModifier = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Grab", "PoseMeasureParameters")->this_arg;
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface*), "CalculateBestPoseAtSurface", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetPose, bestPose, scoringModifier, relativeTo});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface::CreateMirroredSurface
// Il2CppName: CreateMirroredSurface
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Grab::GrabSurfaces::IGrabSurface* (Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface::*)(::UnityEngine::GameObject*)>(&Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface::CreateMirroredSurface)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface*), "CreateMirroredSurface", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface::CreateDuplicatedSurface
// Il2CppName: CreateDuplicatedSurface
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Grab::GrabSurfaces::IGrabSurface* (Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface::*)(::UnityEngine::GameObject*)>(&Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface::CreateDuplicatedSurface)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface*), "CreateDuplicatedSurface", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface::NearestPointInSurface
// Il2CppName: NearestPointInSurface
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface::*)(::UnityEngine::Vector3, ::UnityEngine::Transform*)>(&Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface::NearestPointInSurface)> {
  static const MethodInfo* get() {
    static auto* targetPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface*), "NearestPointInSurface", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetPosition, relativeTo});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface::MinimalRotationPoseAtSurface
// Il2CppName: MinimalRotationPoseAtSurface
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Pose (Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface::*)(ByRef<::UnityEngine::Pose>, ::UnityEngine::Transform*)>(&Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface::MinimalRotationPoseAtSurface)> {
  static const MethodInfo* get() {
    static auto* userPose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface*), "MinimalRotationPoseAtSurface", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userPose, relativeTo});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface::MinimalTranslationPoseAtSurface
// Il2CppName: MinimalTranslationPoseAtSurface
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Pose (Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface::*)(ByRef<::UnityEngine::Pose>, ::UnityEngine::Transform*)>(&Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface::MinimalTranslationPoseAtSurface)> {
  static const MethodInfo* get() {
    static auto* userPose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface*), "MinimalTranslationPoseAtSurface", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userPose, relativeTo});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface::RotationAtPoint
// Il2CppName: RotationAtPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface::*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion, ::UnityEngine::Quaternion, ::UnityEngine::Transform*)>(&Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface::RotationAtPoint)> {
  static const MethodInfo* get() {
    static auto* surfacePoint = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* baseRot = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* desiredRotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface*), "RotationAtPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{surfacePoint, baseRot, desiredRotation, relativeTo});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface::InjectAllSphereSurface
// Il2CppName: InjectAllSphereSurface
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface::*)(::Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurfaceData*, ::UnityEngine::Transform*)>(&Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface::InjectAllSphereSurface)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Grab.GrabSurfaces", "SphereGrabSurfaceData")->byval_arg;
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface*), "InjectAllSphereSurface", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, relativeTo});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface::InjectData
// Il2CppName: InjectData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface::*)(::Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurfaceData*)>(&Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface::InjectData)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Grab.GrabSurfaces", "SphereGrabSurfaceData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface*), "InjectData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface::InjectRelativeTo
// Il2CppName: InjectRelativeTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface::*)(::UnityEngine::Transform*)>(&Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface::InjectRelativeTo)> {
  static const MethodInfo* get() {
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface*), "InjectRelativeTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{relativeTo});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface::Oculus_Interaction_Grab_GrabSurfaces_IGrabSurface_CalculateBestPoseAtSurface
// Il2CppName: Oculus.Interaction.Grab.GrabSurfaces.IGrabSurface.CalculateBestPoseAtSurface
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Grab::GrabPoseScore (Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface::*)(ByRef<::UnityEngine::Pose>, ByRef<::UnityEngine::Pose>, ByRef<::Oculus::Interaction::Grab::PoseMeasureParameters>, ::UnityEngine::Transform*)>(&Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface::Oculus_Interaction_Grab_GrabSurfaces_IGrabSurface_CalculateBestPoseAtSurface)> {
  static const MethodInfo* get() {
    static auto* targetPose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    static auto* bestPose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    static auto* scoringModifier = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Grab", "PoseMeasureParameters")->this_arg;
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface*), "Oculus.Interaction.Grab.GrabSurfaces.IGrabSurface.CalculateBestPoseAtSurface", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetPose, bestPose, scoringModifier, relativeTo});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface::Oculus_Interaction_Grab_GrabSurfaces_IGrabSurface_MirrorPose
// Il2CppName: Oculus.Interaction.Grab.GrabSurfaces.IGrabSurface.MirrorPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Pose (Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface::*)(ByRef<::UnityEngine::Pose>, ::UnityEngine::Transform*)>(&Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface::Oculus_Interaction_Grab_GrabSurfaces_IGrabSurface_MirrorPose)> {
  static const MethodInfo* get() {
    static auto* gripPose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurface*), "Oculus.Interaction.Grab.GrabSurfaces.IGrabSurface.MirrorPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gripPose, relativeTo});
  }
};
