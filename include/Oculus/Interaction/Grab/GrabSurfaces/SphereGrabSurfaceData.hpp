// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ICloneable
#include "System/ICloneable.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: Oculus.Interaction.Grab.GrabSurfaces
namespace Oculus::Interaction::Grab::GrabSurfaces {
  // Forward declaring type: SphereGrabSurfaceData
  class SphereGrabSurfaceData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurfaceData);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurfaceData*, "Oculus.Interaction.Grab.GrabSurfaces", "SphereGrabSurfaceData");
// Type namespace: Oculus.Interaction.Grab.GrabSurfaces
namespace Oculus::Interaction::Grab::GrabSurfaces {
  // Size: 0x1C
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.Grab.GrabSurfaces.SphereGrabSurfaceData
  // [TokenAttribute] Offset: FFFFFFFF
  class SphereGrabSurfaceData : public ::Il2CppObject/*, public ::System::ICloneable*/ {
    public:
    public:
    // public UnityEngine.Vector3 centre
    // Size: 0xC
    // Offset: 0x10
    ::UnityEngine::Vector3 centre;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    public:
    // Creating interface conversion operator: operator ::System::ICloneable
    operator ::System::ICloneable() noexcept {
      return *reinterpret_cast<::System::ICloneable*>(this);
    }
    // Creating conversion operator: operator ::UnityEngine::Vector3
    constexpr operator ::UnityEngine::Vector3() const noexcept {
      return centre;
    }
    // Get instance field reference: public UnityEngine.Vector3 centre
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_centre();
    // public System.Object Clone()
    // Offset: 0x4837810
    ::Il2CppObject* Clone();
    // public Oculus.Interaction.Grab.GrabSurfaces.SphereGrabSurfaceData Mirror()
    // Offset: 0x48378F4
    ::Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurfaceData* Mirror();
    // public System.Void .ctor()
    // Offset: 0x4837894
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SphereGrabSurfaceData* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurfaceData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SphereGrabSurfaceData*, creationType>()));
    }
  }; // Oculus.Interaction.Grab.GrabSurfaces.SphereGrabSurfaceData
  #pragma pack(pop)
  static check_size<sizeof(SphereGrabSurfaceData), 16 + sizeof(::UnityEngine::Vector3)> __Oculus_Interaction_Grab_GrabSurfaces_SphereGrabSurfaceDataSizeCheck;
  static_assert(sizeof(SphereGrabSurfaceData) == 0x1C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurfaceData::Clone
// Il2CppName: Clone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurfaceData::*)()>(&Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurfaceData::Clone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurfaceData*), "Clone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurfaceData::Mirror
// Il2CppName: Mirror
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurfaceData* (Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurfaceData::*)()>(&Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurfaceData::Mirror)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurfaceData*), "Mirror", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::SphereGrabSurfaceData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
