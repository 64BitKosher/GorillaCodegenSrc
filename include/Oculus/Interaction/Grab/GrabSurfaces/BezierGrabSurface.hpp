// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Oculus.Interaction.Grab.GrabSurfaces.IGrabSurface
#include "Oculus/Interaction/Grab/GrabSurfaces/IGrabSurface.hpp"
// Including type: Oculus.Interaction.Grab.GrabSurfaces.BezierControlPoint
#include "Oculus/Interaction/Grab/GrabSurfaces/BezierControlPoint.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction::Grab::GrabSurfaces
namespace Oculus::Interaction::Grab::GrabSurfaces {
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Skipping declaration: Pose because it is already included!
  // Forward declaring type: Ray
  struct Ray;
  // Forward declaring type: Plane
  struct Plane;
  // Skipping declaration: Vector3 because it is already included!
  // Skipping declaration: Quaternion because it is already included!
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: Oculus::Interaction::Grab
namespace Oculus::Interaction::Grab {
  // Forward declaring type: GrabPoseScore
  struct GrabPoseScore;
  // Forward declaring type: PoseMeasureParameters
  struct PoseMeasureParameters;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.Grab.GrabSurfaces
namespace Oculus::Interaction::Grab::GrabSurfaces {
  // Forward declaring type: BezierGrabSurface
  class BezierGrabSurface;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Grab::GrabSurfaces::BezierGrabSurface);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Grab::GrabSurfaces::BezierGrabSurface*, "Oculus.Interaction.Grab.GrabSurfaces", "BezierGrabSurface");
// Type namespace: Oculus.Interaction.Grab.GrabSurfaces
namespace Oculus::Interaction::Grab::GrabSurfaces {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.Grab.GrabSurfaces.BezierGrabSurface
  // [TokenAttribute] Offset: FFFFFFFF
  class BezierGrabSurface : public ::UnityEngine::MonoBehaviour/*, public ::Oculus::Interaction::Grab::GrabSurfaces::IGrabSurface*/ {
    public:
    // Nested type: ::Oculus::Interaction::Grab::GrabSurfaces::BezierGrabSurface::$$c__DisplayClass7_0
    class $$c__DisplayClass7_0;
    public:
    // private System.Collections.Generic.List`1<Oculus.Interaction.Grab.GrabSurfaces.BezierControlPoint> _controlPoints
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::Oculus::Interaction::Grab::GrabSurfaces::BezierControlPoint>* controlPoints;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Oculus::Interaction::Grab::GrabSurfaces::BezierControlPoint>*) == 0x8);
    // private UnityEngine.Transform _relativeTo
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Transform* relativeTo;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::Grab::GrabSurfaces::IGrabSurface
    operator ::Oculus::Interaction::Grab::GrabSurfaces::IGrabSurface() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::Grab::GrabSurfaces::IGrabSurface*>(this);
    }
    // static field const value: static private System.Single MAX_PLANE_DOT
    static constexpr const float MAX_PLANE_DOT = 0.95;
    // Get static field: static private System.Single MAX_PLANE_DOT
    static float _get_MAX_PLANE_DOT();
    // Set static field: static private System.Single MAX_PLANE_DOT
    static void _set_MAX_PLANE_DOT(float value);
    // Get instance field reference: private System.Collections.Generic.List`1<Oculus.Interaction.Grab.GrabSurfaces.BezierControlPoint> _controlPoints
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Oculus::Interaction::Grab::GrabSurfaces::BezierControlPoint>*& dyn__controlPoints();
    // Get instance field reference: private UnityEngine.Transform _relativeTo
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__relativeTo();
    // public System.Collections.Generic.List`1<Oculus.Interaction.Grab.GrabSurfaces.BezierControlPoint> get_ControlPoints()
    // Offset: 0x4830C98
    ::System::Collections::Generic::List_1<::Oculus::Interaction::Grab::GrabSurfaces::BezierControlPoint>* get_ControlPoints();
    // protected System.Void Reset()
    // Offset: 0x4830CA0
    void Reset();
    // protected System.Void Start()
    // Offset: 0x4830D88
    void Start();
    // public Oculus.Interaction.Grab.GrabPoseScore CalculateBestPoseAtSurface(in UnityEngine.Pose targetPose, out UnityEngine.Pose bestPose, in Oculus.Interaction.Grab.PoseMeasureParameters scoringModifier, UnityEngine.Transform relativeTo)
    // Offset: 0x4830D8C
    ::Oculus::Interaction::Grab::GrabPoseScore CalculateBestPoseAtSurface(ByRef<::UnityEngine::Pose> targetPose, ByRef<::UnityEngine::Pose> bestPose, ByRef<::Oculus::Interaction::Grab::PoseMeasureParameters> scoringModifier, ::UnityEngine::Transform* relativeTo);
    // public System.Boolean CalculateBestPoseAtSurface(UnityEngine.Ray targetRay, out UnityEngine.Pose bestPose, UnityEngine.Transform relativeTo)
    // Offset: 0x48318B4
    bool CalculateBestPoseAtSurface(::UnityEngine::Ray targetRay, ByRef<::UnityEngine::Pose> bestPose, ::UnityEngine::Transform* relativeTo);
    // private UnityEngine.Plane GenerateRaycastPlane(UnityEngine.Vector3 p0, UnityEngine.Vector3 p1, UnityEngine.Vector3 p2, UnityEngine.Vector3 fallbackDir)
    // Offset: 0x4831FC8
    ::UnityEngine::Plane GenerateRaycastPlane(::UnityEngine::Vector3 p0, ::UnityEngine::Vector3 p1, ::UnityEngine::Vector3 p2, ::UnityEngine::Vector3 fallbackDir);
    // private System.Single ProgressForRotation(UnityEngine.Quaternion targetRotation, UnityEngine.Quaternion from, UnityEngine.Quaternion to)
    // Offset: 0x48314F0
    float ProgressForRotation(::UnityEngine::Quaternion targetRotation, ::UnityEngine::Quaternion from, ::UnityEngine::Quaternion to);
    // private UnityEngine.Vector3 NearestPointInTriangle(UnityEngine.Vector3 point, UnityEngine.Vector3 p0, UnityEngine.Vector3 p1, UnityEngine.Vector3 p2, out System.Single t)
    // Offset: 0x483128C
    ::UnityEngine::Vector3 NearestPointInTriangle(::UnityEngine::Vector3 point, ::UnityEngine::Vector3 p0, ::UnityEngine::Vector3 p1, ::UnityEngine::Vector3 p2, ByRef<float> t);
    // private UnityEngine.Vector3 NearestPointToSegment(UnityEngine.Vector3 point, UnityEngine.Vector3 start, UnityEngine.Vector3 end, out System.Single progress)
    // Offset: 0x483239C
    ::UnityEngine::Vector3 NearestPointToSegment(::UnityEngine::Vector3 point, ::UnityEngine::Vector3 start, ::UnityEngine::Vector3 end, ByRef<float> progress);
    // public Oculus.Interaction.Grab.GrabSurfaces.IGrabSurface CreateDuplicatedSurface(UnityEngine.GameObject gameObject)
    // Offset: 0x48326B4
    ::Oculus::Interaction::Grab::GrabSurfaces::IGrabSurface* CreateDuplicatedSurface(::UnityEngine::GameObject* gameObject);
    // public Oculus.Interaction.Grab.GrabSurfaces.IGrabSurface CreateMirroredSurface(UnityEngine.GameObject gameObject)
    // Offset: 0x4832778
    ::Oculus::Interaction::Grab::GrabSurfaces::IGrabSurface* CreateMirroredSurface(::UnityEngine::GameObject* gameObject);
    // public UnityEngine.Pose MirrorPose(in UnityEngine.Pose gripPose, UnityEngine.Transform relativeTo)
    // Offset: 0x4832BB8
    ::UnityEngine::Pose MirrorPose(ByRef<::UnityEngine::Pose> gripPose, ::UnityEngine::Transform* relativeTo);
    // static public UnityEngine.Vector3 EvaluateBezier(UnityEngine.Vector3 start, UnityEngine.Vector3 middle, UnityEngine.Vector3 end, System.Single t)
    // Offset: 0x4832328
    static ::UnityEngine::Vector3 EvaluateBezier(::UnityEngine::Vector3 start, ::UnityEngine::Vector3 middle, ::UnityEngine::Vector3 end, float t);
    // public System.Void InjectAllBezierSurface(System.Collections.Generic.List`1<Oculus.Interaction.Grab.GrabSurfaces.BezierControlPoint> controlPoints, UnityEngine.Transform relativeTo)
    // Offset: 0x4832BCC
    void InjectAllBezierSurface(::System::Collections::Generic::List_1<::Oculus::Interaction::Grab::GrabSurfaces::BezierControlPoint>* controlPoints, ::UnityEngine::Transform* relativeTo);
    // public System.Void InjectControlPoints(System.Collections.Generic.List`1<Oculus.Interaction.Grab.GrabSurfaces.BezierControlPoint> controlPoints)
    // Offset: 0x4832BFC
    void InjectControlPoints(::System::Collections::Generic::List_1<::Oculus::Interaction::Grab::GrabSurfaces::BezierControlPoint>* controlPoints);
    // public System.Void InjectRelativeTo(UnityEngine.Transform relativeTo)
    // Offset: 0x4832C04
    void InjectRelativeTo(::UnityEngine::Transform* relativeTo);
    // public System.Void .ctor()
    // Offset: 0x4832C0C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BezierGrabSurface* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Grab::GrabSurfaces::BezierGrabSurface::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BezierGrabSurface*, creationType>()));
    }
    // private Oculus.Interaction.Grab.GrabPoseScore Oculus.Interaction.Grab.GrabSurfaces.IGrabSurface.CalculateBestPoseAtSurface(in UnityEngine.Pose targetPose, out UnityEngine.Pose bestPose, in Oculus.Interaction.Grab.PoseMeasureParameters scoringModifier, UnityEngine.Transform relativeTo)
    // Offset: 0x4832C94
    ::Oculus::Interaction::Grab::GrabPoseScore Oculus_Interaction_Grab_GrabSurfaces_IGrabSurface_CalculateBestPoseAtSurface(ByRef<::UnityEngine::Pose> targetPose, ByRef<::UnityEngine::Pose> bestPose, ByRef<::Oculus::Interaction::Grab::PoseMeasureParameters> scoringModifier, ::UnityEngine::Transform* relativeTo);
    // private UnityEngine.Pose Oculus.Interaction.Grab.GrabSurfaces.IGrabSurface.MirrorPose(in UnityEngine.Pose gripPose, UnityEngine.Transform relativeTo)
    // Offset: 0x4832C98
    ::UnityEngine::Pose Oculus_Interaction_Grab_GrabSurfaces_IGrabSurface_MirrorPose(ByRef<::UnityEngine::Pose> gripPose, ::UnityEngine::Transform* relativeTo);
  }; // Oculus.Interaction.Grab.GrabSurfaces.BezierGrabSurface
  #pragma pack(pop)
  static check_size<sizeof(BezierGrabSurface), 40 + sizeof(::UnityEngine::Transform*)> __Oculus_Interaction_Grab_GrabSurfaces_BezierGrabSurfaceSizeCheck;
  static_assert(sizeof(BezierGrabSurface) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::BezierGrabSurface::get_ControlPoints
// Il2CppName: get_ControlPoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::Oculus::Interaction::Grab::GrabSurfaces::BezierControlPoint>* (Oculus::Interaction::Grab::GrabSurfaces::BezierGrabSurface::*)()>(&Oculus::Interaction::Grab::GrabSurfaces::BezierGrabSurface::get_ControlPoints)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::BezierGrabSurface*), "get_ControlPoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::BezierGrabSurface::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Grab::GrabSurfaces::BezierGrabSurface::*)()>(&Oculus::Interaction::Grab::GrabSurfaces::BezierGrabSurface::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::BezierGrabSurface*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::BezierGrabSurface::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Grab::GrabSurfaces::BezierGrabSurface::*)()>(&Oculus::Interaction::Grab::GrabSurfaces::BezierGrabSurface::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::BezierGrabSurface*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::BezierGrabSurface::CalculateBestPoseAtSurface
// Il2CppName: CalculateBestPoseAtSurface
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Grab::GrabPoseScore (Oculus::Interaction::Grab::GrabSurfaces::BezierGrabSurface::*)(ByRef<::UnityEngine::Pose>, ByRef<::UnityEngine::Pose>, ByRef<::Oculus::Interaction::Grab::PoseMeasureParameters>, ::UnityEngine::Transform*)>(&Oculus::Interaction::Grab::GrabSurfaces::BezierGrabSurface::CalculateBestPoseAtSurface)> {
  static const MethodInfo* get() {
    static auto* targetPose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    static auto* bestPose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    static auto* scoringModifier = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Grab", "PoseMeasureParameters")->this_arg;
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::BezierGrabSurface*), "CalculateBestPoseAtSurface", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetPose, bestPose, scoringModifier, relativeTo});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::BezierGrabSurface::CalculateBestPoseAtSurface
// Il2CppName: CalculateBestPoseAtSurface
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Grab::GrabSurfaces::BezierGrabSurface::*)(::UnityEngine::Ray, ByRef<::UnityEngine::Pose>, ::UnityEngine::Transform*)>(&Oculus::Interaction::Grab::GrabSurfaces::BezierGrabSurface::CalculateBestPoseAtSurface)> {
  static const MethodInfo* get() {
    static auto* targetRay = &::il2cpp_utils::GetClassFromName("UnityEngine", "Ray")->byval_arg;
    static auto* bestPose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::BezierGrabSurface*), "CalculateBestPoseAtSurface", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetRay, bestPose, relativeTo});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::BezierGrabSurface::GenerateRaycastPlane
// Il2CppName: GenerateRaycastPlane
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Plane (Oculus::Interaction::Grab::GrabSurfaces::BezierGrabSurface::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&Oculus::Interaction::Grab::GrabSurfaces::BezierGrabSurface::GenerateRaycastPlane)> {
  static const MethodInfo* get() {
    static auto* p0 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* p1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* p2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* fallbackDir = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::BezierGrabSurface*), "GenerateRaycastPlane", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p0, p1, p2, fallbackDir});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::BezierGrabSurface::ProgressForRotation
// Il2CppName: ProgressForRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::Grab::GrabSurfaces::BezierGrabSurface::*)(::UnityEngine::Quaternion, ::UnityEngine::Quaternion, ::UnityEngine::Quaternion)>(&Oculus::Interaction::Grab::GrabSurfaces::BezierGrabSurface::ProgressForRotation)> {
  static const MethodInfo* get() {
    static auto* targetRotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* from = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::BezierGrabSurface*), "ProgressForRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetRotation, from, to});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::BezierGrabSurface::NearestPointInTriangle
// Il2CppName: NearestPointInTriangle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Oculus::Interaction::Grab::GrabSurfaces::BezierGrabSurface::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ByRef<float>)>(&Oculus::Interaction::Grab::GrabSurfaces::BezierGrabSurface::NearestPointInTriangle)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* p0 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* p1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* p2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::BezierGrabSurface*), "NearestPointInTriangle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point, p0, p1, p2, t});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::BezierGrabSurface::NearestPointToSegment
// Il2CppName: NearestPointToSegment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Oculus::Interaction::Grab::GrabSurfaces::BezierGrabSurface::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ByRef<float>)>(&Oculus::Interaction::Grab::GrabSurfaces::BezierGrabSurface::NearestPointToSegment)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* progress = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::BezierGrabSurface*), "NearestPointToSegment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point, start, end, progress});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::BezierGrabSurface::CreateDuplicatedSurface
// Il2CppName: CreateDuplicatedSurface
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Grab::GrabSurfaces::IGrabSurface* (Oculus::Interaction::Grab::GrabSurfaces::BezierGrabSurface::*)(::UnityEngine::GameObject*)>(&Oculus::Interaction::Grab::GrabSurfaces::BezierGrabSurface::CreateDuplicatedSurface)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::BezierGrabSurface*), "CreateDuplicatedSurface", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::BezierGrabSurface::CreateMirroredSurface
// Il2CppName: CreateMirroredSurface
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Grab::GrabSurfaces::IGrabSurface* (Oculus::Interaction::Grab::GrabSurfaces::BezierGrabSurface::*)(::UnityEngine::GameObject*)>(&Oculus::Interaction::Grab::GrabSurfaces::BezierGrabSurface::CreateMirroredSurface)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::BezierGrabSurface*), "CreateMirroredSurface", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::BezierGrabSurface::MirrorPose
// Il2CppName: MirrorPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Pose (Oculus::Interaction::Grab::GrabSurfaces::BezierGrabSurface::*)(ByRef<::UnityEngine::Pose>, ::UnityEngine::Transform*)>(&Oculus::Interaction::Grab::GrabSurfaces::BezierGrabSurface::MirrorPose)> {
  static const MethodInfo* get() {
    static auto* gripPose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::BezierGrabSurface*), "MirrorPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gripPose, relativeTo});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::BezierGrabSurface::EvaluateBezier
// Il2CppName: EvaluateBezier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, float)>(&Oculus::Interaction::Grab::GrabSurfaces::BezierGrabSurface::EvaluateBezier)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* middle = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::BezierGrabSurface*), "EvaluateBezier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, middle, end, t});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::BezierGrabSurface::InjectAllBezierSurface
// Il2CppName: InjectAllBezierSurface
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Grab::GrabSurfaces::BezierGrabSurface::*)(::System::Collections::Generic::List_1<::Oculus::Interaction::Grab::GrabSurfaces::BezierControlPoint>*, ::UnityEngine::Transform*)>(&Oculus::Interaction::Grab::GrabSurfaces::BezierGrabSurface::InjectAllBezierSurface)> {
  static const MethodInfo* get() {
    static auto* controlPoints = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Interaction.Grab.GrabSurfaces", "BezierControlPoint")})->byval_arg;
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::BezierGrabSurface*), "InjectAllBezierSurface", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controlPoints, relativeTo});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::BezierGrabSurface::InjectControlPoints
// Il2CppName: InjectControlPoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Grab::GrabSurfaces::BezierGrabSurface::*)(::System::Collections::Generic::List_1<::Oculus::Interaction::Grab::GrabSurfaces::BezierControlPoint>*)>(&Oculus::Interaction::Grab::GrabSurfaces::BezierGrabSurface::InjectControlPoints)> {
  static const MethodInfo* get() {
    static auto* controlPoints = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Interaction.Grab.GrabSurfaces", "BezierControlPoint")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::BezierGrabSurface*), "InjectControlPoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controlPoints});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::BezierGrabSurface::InjectRelativeTo
// Il2CppName: InjectRelativeTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Grab::GrabSurfaces::BezierGrabSurface::*)(::UnityEngine::Transform*)>(&Oculus::Interaction::Grab::GrabSurfaces::BezierGrabSurface::InjectRelativeTo)> {
  static const MethodInfo* get() {
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::BezierGrabSurface*), "InjectRelativeTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{relativeTo});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::BezierGrabSurface::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::BezierGrabSurface::Oculus_Interaction_Grab_GrabSurfaces_IGrabSurface_CalculateBestPoseAtSurface
// Il2CppName: Oculus.Interaction.Grab.GrabSurfaces.IGrabSurface.CalculateBestPoseAtSurface
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Grab::GrabPoseScore (Oculus::Interaction::Grab::GrabSurfaces::BezierGrabSurface::*)(ByRef<::UnityEngine::Pose>, ByRef<::UnityEngine::Pose>, ByRef<::Oculus::Interaction::Grab::PoseMeasureParameters>, ::UnityEngine::Transform*)>(&Oculus::Interaction::Grab::GrabSurfaces::BezierGrabSurface::Oculus_Interaction_Grab_GrabSurfaces_IGrabSurface_CalculateBestPoseAtSurface)> {
  static const MethodInfo* get() {
    static auto* targetPose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    static auto* bestPose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    static auto* scoringModifier = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Grab", "PoseMeasureParameters")->this_arg;
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::BezierGrabSurface*), "Oculus.Interaction.Grab.GrabSurfaces.IGrabSurface.CalculateBestPoseAtSurface", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetPose, bestPose, scoringModifier, relativeTo});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabSurfaces::BezierGrabSurface::Oculus_Interaction_Grab_GrabSurfaces_IGrabSurface_MirrorPose
// Il2CppName: Oculus.Interaction.Grab.GrabSurfaces.IGrabSurface.MirrorPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Pose (Oculus::Interaction::Grab::GrabSurfaces::BezierGrabSurface::*)(ByRef<::UnityEngine::Pose>, ::UnityEngine::Transform*)>(&Oculus::Interaction::Grab::GrabSurfaces::BezierGrabSurface::Oculus_Interaction_Grab_GrabSurfaces_IGrabSurface_MirrorPose)> {
  static const MethodInfo* get() {
    static auto* gripPose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabSurfaces::BezierGrabSurface*), "Oculus.Interaction.Grab.GrabSurfaces.IGrabSurface.MirrorPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gripPose, relativeTo});
  }
};
