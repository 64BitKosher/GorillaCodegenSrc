// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction::Grab
namespace Oculus::Interaction::Grab {
  // Forward declaring type: GrabPoseScore
  struct GrabPoseScore;
  // Forward declaring type: PoseMeasureParameters
  struct PoseMeasureParameters;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Pose
  struct Pose;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Vector3
  struct Vector3;
  // Forward declaring type: Collider
  class Collider;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.Grab
namespace Oculus::Interaction::Grab {
  // Forward declaring type: GrabPoseHelper
  class GrabPoseHelper;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Grab::GrabPoseHelper);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Grab::GrabPoseHelper*, "Oculus.Interaction.Grab", "GrabPoseHelper");
// Type namespace: Oculus.Interaction.Grab
namespace Oculus::Interaction::Grab {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.Grab.GrabPoseHelper
  // [TokenAttribute] Offset: FFFFFFFF
  class GrabPoseHelper : public ::Il2CppObject {
    public:
    // Nested type: ::Oculus::Interaction::Grab::GrabPoseHelper::PoseCalculator
    class PoseCalculator;
    // static public Oculus.Interaction.Grab.GrabPoseScore CalculateBestPoseAtSurface(in UnityEngine.Pose desiredPose, out UnityEngine.Pose bestPose, in Oculus.Interaction.Grab.PoseMeasureParameters scoringModifier, UnityEngine.Transform relativeTo, Oculus.Interaction.Grab.GrabPoseHelper/PoseCalculator minimalTranslationPoseCalculator, Oculus.Interaction.Grab.GrabPoseHelper/PoseCalculator minimalRotationPoseCalculator)
    // Offset: 0x4830268
    static ::Oculus::Interaction::Grab::GrabPoseScore CalculateBestPoseAtSurface(ByRef<::UnityEngine::Pose> desiredPose, ByRef<::UnityEngine::Pose> bestPose, ByRef<::Oculus::Interaction::Grab::PoseMeasureParameters> scoringModifier, ::UnityEngine::Transform* relativeTo, ::Oculus::Interaction::Grab::GrabPoseHelper::PoseCalculator* minimalTranslationPoseCalculator, ::Oculus::Interaction::Grab::GrabPoseHelper::PoseCalculator* minimalRotationPoseCalculator);
    // static public UnityEngine.Pose SelectBestPose(in UnityEngine.Pose poseA, in UnityEngine.Pose poseB, in UnityEngine.Pose reference, Oculus.Interaction.Grab.PoseMeasureParameters scoringModifier, out Oculus.Interaction.Grab.GrabPoseScore bestScore)
    // Offset: 0x4830418
    static ::UnityEngine::Pose SelectBestPose(ByRef<::UnityEngine::Pose> poseA, ByRef<::UnityEngine::Pose> poseB, ByRef<::UnityEngine::Pose> reference, ::Oculus::Interaction::Grab::PoseMeasureParameters scoringModifier, ByRef<::Oculus::Interaction::Grab::GrabPoseScore> bestScore);
    // static public Oculus.Interaction.Grab.GrabPoseScore CollidersScore(UnityEngine.Vector3 position, UnityEngine.Collider[] colliders, out UnityEngine.Vector3 hitPoint)
    // Offset: 0x48304F8
    static ::Oculus::Interaction::Grab::GrabPoseScore CollidersScore(::UnityEngine::Vector3 position, ::ArrayW<::UnityEngine::Collider*> colliders, ByRef<::UnityEngine::Vector3> hitPoint);
  }; // Oculus.Interaction.Grab.GrabPoseHelper
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabPoseHelper::CalculateBestPoseAtSurface
// Il2CppName: CalculateBestPoseAtSurface
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Grab::GrabPoseScore (*)(ByRef<::UnityEngine::Pose>, ByRef<::UnityEngine::Pose>, ByRef<::Oculus::Interaction::Grab::PoseMeasureParameters>, ::UnityEngine::Transform*, ::Oculus::Interaction::Grab::GrabPoseHelper::PoseCalculator*, ::Oculus::Interaction::Grab::GrabPoseHelper::PoseCalculator*)>(&Oculus::Interaction::Grab::GrabPoseHelper::CalculateBestPoseAtSurface)> {
  static const MethodInfo* get() {
    static auto* desiredPose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    static auto* bestPose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    static auto* scoringModifier = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Grab", "PoseMeasureParameters")->this_arg;
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* minimalTranslationPoseCalculator = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Grab", "GrabPoseHelper/PoseCalculator")->byval_arg;
    static auto* minimalRotationPoseCalculator = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Grab", "GrabPoseHelper/PoseCalculator")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabPoseHelper*), "CalculateBestPoseAtSurface", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{desiredPose, bestPose, scoringModifier, relativeTo, minimalTranslationPoseCalculator, minimalRotationPoseCalculator});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabPoseHelper::SelectBestPose
// Il2CppName: SelectBestPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Pose (*)(ByRef<::UnityEngine::Pose>, ByRef<::UnityEngine::Pose>, ByRef<::UnityEngine::Pose>, ::Oculus::Interaction::Grab::PoseMeasureParameters, ByRef<::Oculus::Interaction::Grab::GrabPoseScore>)>(&Oculus::Interaction::Grab::GrabPoseHelper::SelectBestPose)> {
  static const MethodInfo* get() {
    static auto* poseA = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    static auto* poseB = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    static auto* reference = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    static auto* scoringModifier = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Grab", "PoseMeasureParameters")->byval_arg;
    static auto* bestScore = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Grab", "GrabPoseScore")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabPoseHelper*), "SelectBestPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{poseA, poseB, reference, scoringModifier, bestScore});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Grab::GrabPoseHelper::CollidersScore
// Il2CppName: CollidersScore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Grab::GrabPoseScore (*)(::UnityEngine::Vector3, ::ArrayW<::UnityEngine::Collider*>, ByRef<::UnityEngine::Vector3>)>(&Oculus::Interaction::Grab::GrabPoseHelper::CollidersScore)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* colliders = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Collider"), 1)->byval_arg;
    static auto* hitPoint = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Grab::GrabPoseHelper*), "CollidersScore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, colliders, hitPoint});
  }
};
