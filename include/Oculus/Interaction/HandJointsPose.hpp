// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Oculus.Interaction.Input.HandJointId
#include "Oculus/Interaction/Input/HandJointId.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Object because it is already included!
}
// Forward declaring namespace: Oculus::Interaction::Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: IHand
  class IHand;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: HandJointsPose
  class HandJointsPose;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::HandJointsPose);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::HandJointsPose*, "Oculus.Interaction", "HandJointsPose");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x55
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.HandJointsPose
  // [TokenAttribute] Offset: FFFFFFFF
  class HandJointsPose : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::Oculus::Interaction::HandJointsPose::WeightedJoint
    struct WeightedJoint;
    // Size: 0x8
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Oculus.Interaction.HandJointsPose/WeightedJoint
    // [TokenAttribute] Offset: FFFFFFFF
    struct WeightedJoint/*, public ::System::ValueType*/ {
      public:
      public:
      // public Oculus.Interaction.Input.HandJointId handJointId
      // Size: 0x4
      // Offset: 0x0
      ::Oculus::Interaction::Input::HandJointId handJointId;
      // Field size check
      static_assert(sizeof(::Oculus::Interaction::Input::HandJointId) == 0x4);
      // public System.Single weight
      // Size: 0x4
      // Offset: 0x4
      float weight;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      public:
      // Creating value type constructor for type: WeightedJoint
      constexpr WeightedJoint(::Oculus::Interaction::Input::HandJointId handJointId_ = {}, float weight_ = {}) noexcept : handJointId{handJointId_}, weight{weight_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public Oculus.Interaction.Input.HandJointId handJointId
      [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::HandJointId& dyn_handJointId();
      // Get instance field reference: public System.Single weight
      [[deprecated("Use field access instead!")]] float& dyn_weight();
    }; // Oculus.Interaction.HandJointsPose/WeightedJoint
    #pragma pack(pop)
    static check_size<sizeof(HandJointsPose::WeightedJoint), 4 + sizeof(float)> __Oculus_Interaction_HandJointsPose_WeightedJointSizeCheck;
    static_assert(sizeof(HandJointsPose::WeightedJoint) == 0x8);
    public:
    // private UnityEngine.Object _hand
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Object* hand;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.Input.IHand <Hand>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    ::Oculus::Interaction::Input::IHand* Hand;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::IHand*) == 0x8);
    // private System.Collections.Generic.List`1<Oculus.Interaction.HandJointsPose/WeightedJoint> _weightedJoints
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::List_1<::Oculus::Interaction::HandJointsPose::WeightedJoint>* weightedJoints;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Oculus::Interaction::HandJointsPose::WeightedJoint>*) == 0x8);
    // private UnityEngine.Vector3 _localPositionOffset
    // Size: 0xC
    // Offset: 0x38
    ::UnityEngine::Vector3 localPositionOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Quaternion _rotationOffset
    // Size: 0x10
    // Offset: 0x44
    ::UnityEngine::Quaternion rotationOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // protected System.Boolean _started
    // Size: 0x1
    // Offset: 0x54
    bool started;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private UnityEngine.Object _hand
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__hand();
    // Get instance field reference: private Oculus.Interaction.Input.IHand <Hand>k__BackingField
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::IHand*& dyn_$Hand$k__BackingField();
    // Get instance field reference: private System.Collections.Generic.List`1<Oculus.Interaction.HandJointsPose/WeightedJoint> _weightedJoints
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Oculus::Interaction::HandJointsPose::WeightedJoint>*& dyn__weightedJoints();
    // Get instance field reference: private UnityEngine.Vector3 _localPositionOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__localPositionOffset();
    // Get instance field reference: private UnityEngine.Quaternion _rotationOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn__rotationOffset();
    // Get instance field reference: protected System.Boolean _started
    [[deprecated("Use field access instead!")]] bool& dyn__started();
    // public Oculus.Interaction.Input.IHand get_Hand()
    // Offset: 0x47D0E78
    ::Oculus::Interaction::Input::IHand* get_Hand();
    // private System.Void set_Hand(Oculus.Interaction.Input.IHand value)
    // Offset: 0x47D0E80
    void set_Hand(::Oculus::Interaction::Input::IHand* value);
    // public System.Collections.Generic.List`1<Oculus.Interaction.HandJointsPose/WeightedJoint> get_WeightedJoints()
    // Offset: 0x47D0E88
    ::System::Collections::Generic::List_1<::Oculus::Interaction::HandJointsPose::WeightedJoint>* get_WeightedJoints();
    // public System.Void set_WeightedJoints(System.Collections.Generic.List`1<Oculus.Interaction.HandJointsPose/WeightedJoint> value)
    // Offset: 0x47D0E90
    void set_WeightedJoints(::System::Collections::Generic::List_1<::Oculus::Interaction::HandJointsPose::WeightedJoint>* value);
    // public UnityEngine.Vector3 get_LocalPositionOffset()
    // Offset: 0x47D0E98
    ::UnityEngine::Vector3 get_LocalPositionOffset();
    // public System.Void set_LocalPositionOffset(UnityEngine.Vector3 value)
    // Offset: 0x47D0EA4
    void set_LocalPositionOffset(::UnityEngine::Vector3 value);
    // public UnityEngine.Quaternion get_RotationOffset()
    // Offset: 0x47D0EB0
    ::UnityEngine::Quaternion get_RotationOffset();
    // public System.Void set_RotationOffset(UnityEngine.Quaternion value)
    // Offset: 0x47D0EBC
    void set_RotationOffset(::UnityEngine::Quaternion value);
    // protected System.Void Awake()
    // Offset: 0x47D0EC8
    void Awake();
    // protected System.Void Start()
    // Offset: 0x47D0F20
    void Start();
    // protected System.Void OnEnable()
    // Offset: 0x47D0F58
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x47D1058
    void OnDisable();
    // private System.Void HandleHandUpdated()
    // Offset: 0x47D1158
    void HandleHandUpdated();
    // public System.Void InjectAllHandJoint(Oculus.Interaction.Input.IHand hand)
    // Offset: 0x47D1588
    void InjectAllHandJoint(::Oculus::Interaction::Input::IHand* hand);
    // public System.Void InjectHand(Oculus.Interaction.Input.IHand hand)
    // Offset: 0x47D158C
    void InjectHand(::Oculus::Interaction::Input::IHand* hand);
    // public System.Void .ctor()
    // Offset: 0x47D165C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HandJointsPose* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::HandJointsPose::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HandJointsPose*, creationType>()));
    }
  }; // Oculus.Interaction.HandJointsPose
  #pragma pack(pop)
  static check_size<sizeof(HandJointsPose), 84 + sizeof(bool)> __Oculus_Interaction_HandJointsPoseSizeCheck;
  static_assert(sizeof(HandJointsPose) == 0x55);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::HandJointsPose::WeightedJoint, "Oculus.Interaction", "HandJointsPose/WeightedJoint");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::HandJointsPose::get_Hand
// Il2CppName: get_Hand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Input::IHand* (Oculus::Interaction::HandJointsPose::*)()>(&Oculus::Interaction::HandJointsPose::get_Hand)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandJointsPose*), "get_Hand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandJointsPose::set_Hand
// Il2CppName: set_Hand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandJointsPose::*)(::Oculus::Interaction::Input::IHand*)>(&Oculus::Interaction::HandJointsPose::set_Hand)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandJointsPose*), "set_Hand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandJointsPose::get_WeightedJoints
// Il2CppName: get_WeightedJoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::Oculus::Interaction::HandJointsPose::WeightedJoint>* (Oculus::Interaction::HandJointsPose::*)()>(&Oculus::Interaction::HandJointsPose::get_WeightedJoints)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandJointsPose*), "get_WeightedJoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandJointsPose::set_WeightedJoints
// Il2CppName: set_WeightedJoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandJointsPose::*)(::System::Collections::Generic::List_1<::Oculus::Interaction::HandJointsPose::WeightedJoint>*)>(&Oculus::Interaction::HandJointsPose::set_WeightedJoints)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Interaction", "HandJointsPose/WeightedJoint")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandJointsPose*), "set_WeightedJoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandJointsPose::get_LocalPositionOffset
// Il2CppName: get_LocalPositionOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Oculus::Interaction::HandJointsPose::*)()>(&Oculus::Interaction::HandJointsPose::get_LocalPositionOffset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandJointsPose*), "get_LocalPositionOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandJointsPose::set_LocalPositionOffset
// Il2CppName: set_LocalPositionOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandJointsPose::*)(::UnityEngine::Vector3)>(&Oculus::Interaction::HandJointsPose::set_LocalPositionOffset)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandJointsPose*), "set_LocalPositionOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandJointsPose::get_RotationOffset
// Il2CppName: get_RotationOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (Oculus::Interaction::HandJointsPose::*)()>(&Oculus::Interaction::HandJointsPose::get_RotationOffset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandJointsPose*), "get_RotationOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandJointsPose::set_RotationOffset
// Il2CppName: set_RotationOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandJointsPose::*)(::UnityEngine::Quaternion)>(&Oculus::Interaction::HandJointsPose::set_RotationOffset)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandJointsPose*), "set_RotationOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandJointsPose::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandJointsPose::*)()>(&Oculus::Interaction::HandJointsPose::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandJointsPose*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandJointsPose::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandJointsPose::*)()>(&Oculus::Interaction::HandJointsPose::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandJointsPose*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandJointsPose::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandJointsPose::*)()>(&Oculus::Interaction::HandJointsPose::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandJointsPose*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandJointsPose::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandJointsPose::*)()>(&Oculus::Interaction::HandJointsPose::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandJointsPose*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandJointsPose::HandleHandUpdated
// Il2CppName: HandleHandUpdated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandJointsPose::*)()>(&Oculus::Interaction::HandJointsPose::HandleHandUpdated)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandJointsPose*), "HandleHandUpdated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandJointsPose::InjectAllHandJoint
// Il2CppName: InjectAllHandJoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandJointsPose::*)(::Oculus::Interaction::Input::IHand*)>(&Oculus::Interaction::HandJointsPose::InjectAllHandJoint)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandJointsPose*), "InjectAllHandJoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandJointsPose::InjectHand
// Il2CppName: InjectHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandJointsPose::*)(::Oculus::Interaction::Input::IHand*)>(&Oculus::Interaction::HandJointsPose::InjectHand)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandJointsPose*), "InjectHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandJointsPose::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
