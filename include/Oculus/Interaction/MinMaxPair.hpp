// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: MinMaxPair
  struct MinMaxPair;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::MinMaxPair, "Oculus.Interaction", "MinMaxPair");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0xC
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Oculus.Interaction.MinMaxPair
  // [TokenAttribute] Offset: FFFFFFFF
  struct MinMaxPair/*, public ::System::ValueType*/ {
    public:
    public:
    // private System.Boolean _useRandomRange
    // Size: 0x1
    // Offset: 0x0
    bool useRandomRange;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: useRandomRange and: min
    char __padding0[0x3] = {};
    // private System.Single _min
    // Size: 0x4
    // Offset: 0x4
    float min;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _max
    // Size: 0x4
    // Offset: 0x8
    float max;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating value type constructor for type: MinMaxPair
    constexpr MinMaxPair(bool useRandomRange_ = {}, float min_ = {}, float max_ = {}) noexcept : useRandomRange{useRandomRange_}, min{min_}, max{max_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private System.Boolean _useRandomRange
    [[deprecated("Use field access instead!")]] bool& dyn__useRandomRange();
    // Get instance field reference: private System.Single _min
    [[deprecated("Use field access instead!")]] float& dyn__min();
    // Get instance field reference: private System.Single _max
    [[deprecated("Use field access instead!")]] float& dyn__max();
    // public System.Boolean get_UseRandomRange()
    // Offset: 0x47988B4
    bool get_UseRandomRange();
    // public System.Single get_Min()
    // Offset: 0x47988BC
    float get_Min();
    // public System.Single get_Max()
    // Offset: 0x47988C4
    float get_Max();
  }; // Oculus.Interaction.MinMaxPair
  #pragma pack(pop)
  static check_size<sizeof(MinMaxPair), 8 + sizeof(float)> __Oculus_Interaction_MinMaxPairSizeCheck;
  static_assert(sizeof(MinMaxPair) == 0xC);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::MinMaxPair::get_UseRandomRange
// Il2CppName: get_UseRandomRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::MinMaxPair::*)()>(&Oculus::Interaction::MinMaxPair::get_UseRandomRange)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::MinMaxPair), "get_UseRandomRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::MinMaxPair::get_Min
// Il2CppName: get_Min
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::MinMaxPair::*)()>(&Oculus::Interaction::MinMaxPair::get_Min)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::MinMaxPair), "get_Min", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::MinMaxPair::get_Max
// Il2CppName: get_Max
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::MinMaxPair::*)()>(&Oculus::Interaction::MinMaxPair::get_Max)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::MinMaxPair), "get_Max", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
