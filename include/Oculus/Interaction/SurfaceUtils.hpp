// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction::Surfaces
namespace Oculus::Interaction::Surfaces {
  // Forward declaring type: ISurfacePatch
  class ISurfacePatch;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector3
  struct Vector3;
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: SurfaceUtils
  class SurfaceUtils;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::SurfaceUtils);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::SurfaceUtils*, "Oculus.Interaction", "SurfaceUtils");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.SurfaceUtils
  // [TokenAttribute] Offset: FFFFFFFF
  class SurfaceUtils : public ::Il2CppObject {
    public:
    // static public System.Single ComputeDistanceAbove(Oculus.Interaction.Surfaces.ISurfacePatch surfacePatch, UnityEngine.Vector3 point, System.Single radius)
    // Offset: 0x47DCF00
    static float ComputeDistanceAbove(::Oculus::Interaction::Surfaces::ISurfacePatch* surfacePatch, ::UnityEngine::Vector3 point, float radius);
    // static public System.Single ComputeTangentDistance(Oculus.Interaction.Surfaces.ISurfacePatch surfacePatch, UnityEngine.Vector3 point, System.Single radius)
    // Offset: 0x47DD084
    static float ComputeTangentDistance(::Oculus::Interaction::Surfaces::ISurfacePatch* surfacePatch, ::UnityEngine::Vector3 point, float radius);
    // static public System.Single ComputeDepth(Oculus.Interaction.Surfaces.ISurfacePatch surfacePatch, UnityEngine.Vector3 point, System.Single radius)
    // Offset: 0x47DD2EC
    static float ComputeDepth(::Oculus::Interaction::Surfaces::ISurfacePatch* surfacePatch, ::UnityEngine::Vector3 point, float radius);
    // static public System.Single ComputeDistanceFrom(Oculus.Interaction.Surfaces.ISurfacePatch surfacePatch, UnityEngine.Vector3 point, System.Single radius)
    // Offset: 0x47DD308
    static float ComputeDistanceFrom(::Oculus::Interaction::Surfaces::ISurfacePatch* surfacePatch, ::UnityEngine::Vector3 point, float radius);
  }; // Oculus.Interaction.SurfaceUtils
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::SurfaceUtils::ComputeDistanceAbove
// Il2CppName: ComputeDistanceAbove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::Oculus::Interaction::Surfaces::ISurfacePatch*, ::UnityEngine::Vector3, float)>(&Oculus::Interaction::SurfaceUtils::ComputeDistanceAbove)> {
  static const MethodInfo* get() {
    static auto* surfacePatch = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Surfaces", "ISurfacePatch")->byval_arg;
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SurfaceUtils*), "ComputeDistanceAbove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{surfacePatch, point, radius});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SurfaceUtils::ComputeTangentDistance
// Il2CppName: ComputeTangentDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::Oculus::Interaction::Surfaces::ISurfacePatch*, ::UnityEngine::Vector3, float)>(&Oculus::Interaction::SurfaceUtils::ComputeTangentDistance)> {
  static const MethodInfo* get() {
    static auto* surfacePatch = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Surfaces", "ISurfacePatch")->byval_arg;
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SurfaceUtils*), "ComputeTangentDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{surfacePatch, point, radius});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SurfaceUtils::ComputeDepth
// Il2CppName: ComputeDepth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::Oculus::Interaction::Surfaces::ISurfacePatch*, ::UnityEngine::Vector3, float)>(&Oculus::Interaction::SurfaceUtils::ComputeDepth)> {
  static const MethodInfo* get() {
    static auto* surfacePatch = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Surfaces", "ISurfacePatch")->byval_arg;
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SurfaceUtils*), "ComputeDepth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{surfacePatch, point, radius});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SurfaceUtils::ComputeDistanceFrom
// Il2CppName: ComputeDistanceFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::Oculus::Interaction::Surfaces::ISurfacePatch*, ::UnityEngine::Vector3, float)>(&Oculus::Interaction::SurfaceUtils::ComputeDistanceFrom)> {
  static const MethodInfo* get() {
    static auto* surfacePatch = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Surfaces", "ISurfacePatch")->byval_arg;
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SurfaceUtils*), "ComputeDistanceFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{surfacePatch, point, radius});
  }
};
