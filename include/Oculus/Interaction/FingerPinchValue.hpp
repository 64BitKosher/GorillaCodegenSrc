// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Oculus.Interaction.Input.IAxis1D
#include "Oculus/Interaction/Input/IAxis1D.hpp"
// Including type: Oculus.Interaction.Input.HandFinger
#include "Oculus/Interaction/Input/HandFinger.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Object because it is already included!
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
}
// Forward declaring namespace: Oculus::Interaction::Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: IHand
  class IHand;
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: FingerPinchValue
  class FingerPinchValue;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::FingerPinchValue);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::FingerPinchValue*, "Oculus.Interaction", "FingerPinchValue");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x46
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.FingerPinchValue
  // [TokenAttribute] Offset: FFFFFFFF
  class FingerPinchValue : public ::UnityEngine::MonoBehaviour/*, public ::Oculus::Interaction::Input::IAxis1D*/ {
    public:
    public:
    // private UnityEngine.Object _hand
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Object* hand;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.Input.IHand <Hand>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    ::Oculus::Interaction::Input::IHand* Hand;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::IHand*) == 0x8);
    // private Oculus.Interaction.Input.HandFinger _finger
    // Size: 0x4
    // Offset: 0x30
    ::Oculus::Interaction::Input::HandFinger finger;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::HandFinger) == 0x4);
    // private System.Single _changeRate
    // Size: 0x4
    // Offset: 0x34
    float changeRate;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.AnimationCurve _curve
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::AnimationCurve* curve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // private System.Single _value
    // Size: 0x4
    // Offset: 0x40
    float value;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Boolean _started
    // Size: 0x1
    // Offset: 0x44
    bool started;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _firstCall
    // Size: 0x1
    // Offset: 0x45
    bool firstCall;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::Input::IAxis1D
    operator ::Oculus::Interaction::Input::IAxis1D() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::Input::IAxis1D*>(this);
    }
    // Get instance field reference: private UnityEngine.Object _hand
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__hand();
    // Get instance field reference: private Oculus.Interaction.Input.IHand <Hand>k__BackingField
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::IHand*& dyn_$Hand$k__BackingField();
    // Get instance field reference: private Oculus.Interaction.Input.HandFinger _finger
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::HandFinger& dyn__finger();
    // Get instance field reference: private System.Single _changeRate
    [[deprecated("Use field access instead!")]] float& dyn__changeRate();
    // Get instance field reference: private UnityEngine.AnimationCurve _curve
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn__curve();
    // Get instance field reference: private System.Single _value
    [[deprecated("Use field access instead!")]] float& dyn__value();
    // Get instance field reference: protected System.Boolean _started
    [[deprecated("Use field access instead!")]] bool& dyn__started();
    // Get instance field reference: private System.Boolean _firstCall
    [[deprecated("Use field access instead!")]] bool& dyn__firstCall();
    // public Oculus.Interaction.Input.IHand get_Hand()
    // Offset: 0x47D02D0
    ::Oculus::Interaction::Input::IHand* get_Hand();
    // private System.Void set_Hand(Oculus.Interaction.Input.IHand value)
    // Offset: 0x47D02D8
    void set_Hand(::Oculus::Interaction::Input::IHand* value);
    // public Oculus.Interaction.Input.HandFinger get_Finger()
    // Offset: 0x47D02E0
    ::Oculus::Interaction::Input::HandFinger get_Finger();
    // public System.Void set_Finger(Oculus.Interaction.Input.HandFinger value)
    // Offset: 0x47D02E8
    void set_Finger(::Oculus::Interaction::Input::HandFinger value);
    // public System.Single get_ChangeRate()
    // Offset: 0x47D02F0
    float get_ChangeRate();
    // private System.Void set_ChangeRate(System.Single value)
    // Offset: 0x47D02F8
    void set_ChangeRate(float value);
    // public UnityEngine.AnimationCurve get_Curve()
    // Offset: 0x47D0300
    ::UnityEngine::AnimationCurve* get_Curve();
    // public System.Void set_Curve(UnityEngine.AnimationCurve value)
    // Offset: 0x47D0308
    void set_Curve(::UnityEngine::AnimationCurve* value);
    // protected System.Void Awake()
    // Offset: 0x47D0310
    void Awake();
    // protected System.Void Start()
    // Offset: 0x47D0368
    void Start();
    // protected System.Void OnEnable()
    // Offset: 0x47D03A0
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x47D04A8
    void OnDisable();
    // public System.Single Value()
    // Offset: 0x47D05A8
    float Value();
    // private System.Void HandleHandUpdated()
    // Offset: 0x47D05B0
    void HandleHandUpdated();
    // public System.Void InjectAllFingerPinchValue(Oculus.Interaction.Input.IHand hand)
    // Offset: 0x47D06AC
    void InjectAllFingerPinchValue(::Oculus::Interaction::Input::IHand* hand);
    // public System.Void InjectHand(Oculus.Interaction.Input.IHand hand)
    // Offset: 0x47D06B0
    void InjectHand(::Oculus::Interaction::Input::IHand* hand);
    // public System.Void .ctor()
    // Offset: 0x47D0780
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FingerPinchValue* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::FingerPinchValue::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FingerPinchValue*, creationType>()));
    }
  }; // Oculus.Interaction.FingerPinchValue
  #pragma pack(pop)
  static check_size<sizeof(FingerPinchValue), 69 + sizeof(bool)> __Oculus_Interaction_FingerPinchValueSizeCheck;
  static_assert(sizeof(FingerPinchValue) == 0x46);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::FingerPinchValue::get_Hand
// Il2CppName: get_Hand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Input::IHand* (Oculus::Interaction::FingerPinchValue::*)()>(&Oculus::Interaction::FingerPinchValue::get_Hand)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::FingerPinchValue*), "get_Hand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::FingerPinchValue::set_Hand
// Il2CppName: set_Hand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::FingerPinchValue::*)(::Oculus::Interaction::Input::IHand*)>(&Oculus::Interaction::FingerPinchValue::set_Hand)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::FingerPinchValue*), "set_Hand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::FingerPinchValue::get_Finger
// Il2CppName: get_Finger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Input::HandFinger (Oculus::Interaction::FingerPinchValue::*)()>(&Oculus::Interaction::FingerPinchValue::get_Finger)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::FingerPinchValue*), "get_Finger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::FingerPinchValue::set_Finger
// Il2CppName: set_Finger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::FingerPinchValue::*)(::Oculus::Interaction::Input::HandFinger)>(&Oculus::Interaction::FingerPinchValue::set_Finger)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "HandFinger")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::FingerPinchValue*), "set_Finger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::FingerPinchValue::get_ChangeRate
// Il2CppName: get_ChangeRate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::FingerPinchValue::*)()>(&Oculus::Interaction::FingerPinchValue::get_ChangeRate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::FingerPinchValue*), "get_ChangeRate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::FingerPinchValue::set_ChangeRate
// Il2CppName: set_ChangeRate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::FingerPinchValue::*)(float)>(&Oculus::Interaction::FingerPinchValue::set_ChangeRate)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::FingerPinchValue*), "set_ChangeRate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::FingerPinchValue::get_Curve
// Il2CppName: get_Curve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AnimationCurve* (Oculus::Interaction::FingerPinchValue::*)()>(&Oculus::Interaction::FingerPinchValue::get_Curve)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::FingerPinchValue*), "get_Curve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::FingerPinchValue::set_Curve
// Il2CppName: set_Curve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::FingerPinchValue::*)(::UnityEngine::AnimationCurve*)>(&Oculus::Interaction::FingerPinchValue::set_Curve)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "AnimationCurve")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::FingerPinchValue*), "set_Curve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::FingerPinchValue::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::FingerPinchValue::*)()>(&Oculus::Interaction::FingerPinchValue::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::FingerPinchValue*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::FingerPinchValue::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::FingerPinchValue::*)()>(&Oculus::Interaction::FingerPinchValue::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::FingerPinchValue*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::FingerPinchValue::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::FingerPinchValue::*)()>(&Oculus::Interaction::FingerPinchValue::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::FingerPinchValue*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::FingerPinchValue::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::FingerPinchValue::*)()>(&Oculus::Interaction::FingerPinchValue::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::FingerPinchValue*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::FingerPinchValue::Value
// Il2CppName: Value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::FingerPinchValue::*)()>(&Oculus::Interaction::FingerPinchValue::Value)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::FingerPinchValue*), "Value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::FingerPinchValue::HandleHandUpdated
// Il2CppName: HandleHandUpdated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::FingerPinchValue::*)()>(&Oculus::Interaction::FingerPinchValue::HandleHandUpdated)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::FingerPinchValue*), "HandleHandUpdated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::FingerPinchValue::InjectAllFingerPinchValue
// Il2CppName: InjectAllFingerPinchValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::FingerPinchValue::*)(::Oculus::Interaction::Input::IHand*)>(&Oculus::Interaction::FingerPinchValue::InjectAllFingerPinchValue)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::FingerPinchValue*), "InjectAllFingerPinchValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::FingerPinchValue::InjectHand
// Il2CppName: InjectHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::FingerPinchValue::*)(::Oculus::Interaction::Input::IHand*)>(&Oculus::Interaction::FingerPinchValue::InjectHand)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::FingerPinchValue*), "InjectHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::FingerPinchValue::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
