// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction
namespace Oculus::Interaction {
  // Forward declaring type: MaterialPropertyBlockEditor
  class MaterialPropertyBlockEditor;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Object because it is already included!
}
// Forward declaring namespace: Oculus::Interaction::Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: IHand
  class IHand;
  // Forward declaring type: HandFinger
  struct HandFinger;
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: HandConfidenceVisual
  class HandConfidenceVisual;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::HandConfidenceVisual);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::HandConfidenceVisual*, "Oculus.Interaction", "HandConfidenceVisual");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.HandConfidenceVisual
  // [TokenAttribute] Offset: FFFFFFFF
  class HandConfidenceVisual : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::Oculus::Interaction::HandConfidenceVisual::$$c__DisplayClass18_0
    struct $$c__DisplayClass18_0;
    public:
    // private UnityEngine.Object _hand
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Object* hand;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.Input.IHand <Hand>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    ::Oculus::Interaction::Input::IHand* Hand;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::IHand*) == 0x8);
    // private Oculus.Interaction.MaterialPropertyBlockEditor _handMaterialPropertyBlockEditor
    // Size: 0x8
    // Offset: 0x30
    ::Oculus::Interaction::MaterialPropertyBlockEditor* handMaterialPropertyBlockEditor;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::MaterialPropertyBlockEditor*) == 0x8);
    // private System.Single _speed
    // Size: 0x4
    // Offset: 0x38
    float speed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private readonly System.Int32 _handConfidenceId
    // Size: 0x4
    // Offset: 0x3C
    int handConfidenceId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single[] _jointsConfidence
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<float> jointsConfidence;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // protected System.Boolean _started
    // Size: 0x1
    // Offset: 0x48
    bool started;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: started and: lastTime
    char __padding6[0x3] = {};
    // private System.Single _lastTime
    // Size: 0x4
    // Offset: 0x4C
    float lastTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: private UnityEngine.Object _hand
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__hand();
    // Get instance field reference: private Oculus.Interaction.Input.IHand <Hand>k__BackingField
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::IHand*& dyn_$Hand$k__BackingField();
    // Get instance field reference: private Oculus.Interaction.MaterialPropertyBlockEditor _handMaterialPropertyBlockEditor
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::MaterialPropertyBlockEditor*& dyn__handMaterialPropertyBlockEditor();
    // Get instance field reference: private System.Single _speed
    [[deprecated("Use field access instead!")]] float& dyn__speed();
    // Get instance field reference: private readonly System.Int32 _handConfidenceId
    [[deprecated("Use field access instead!")]] int& dyn__handConfidenceId();
    // Get instance field reference: private System.Single[] _jointsConfidence
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn__jointsConfidence();
    // Get instance field reference: protected System.Boolean _started
    [[deprecated("Use field access instead!")]] bool& dyn__started();
    // Get instance field reference: private System.Single _lastTime
    [[deprecated("Use field access instead!")]] float& dyn__lastTime();
    // private Oculus.Interaction.Input.IHand get_Hand()
    // Offset: 0x47C5574
    ::Oculus::Interaction::Input::IHand* get_Hand();
    // private System.Void set_Hand(Oculus.Interaction.Input.IHand value)
    // Offset: 0x47C557C
    void set_Hand(::Oculus::Interaction::Input::IHand* value);
    // public System.Single get_Speed()
    // Offset: 0x47C5584
    float get_Speed();
    // public System.Void set_Speed(System.Single value)
    // Offset: 0x47C558C
    void set_Speed(float value);
    // private System.Void Awake()
    // Offset: 0x47C5594
    void Awake();
    // protected System.Void Start()
    // Offset: 0x47C55EC
    void Start();
    // protected System.Void OnEnable()
    // Offset: 0x47C5630
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x47C5730
    void OnDisable();
    // private System.Void UpdateVisual()
    // Offset: 0x47C5830
    void UpdateVisual();
    // public System.Void InjectAllHandConfidenceVisual(Oculus.Interaction.Input.IHand hand, Oculus.Interaction.MaterialPropertyBlockEditor handMaterialPropertyBlockEditor)
    // Offset: 0x47C6070
    void InjectAllHandConfidenceVisual(::Oculus::Interaction::Input::IHand* hand, ::Oculus::Interaction::MaterialPropertyBlockEditor* handMaterialPropertyBlockEditor);
    // public System.Void InjectHand(Oculus.Interaction.Input.IHand hand)
    // Offset: 0x47C609C
    void InjectHand(::Oculus::Interaction::Input::IHand* hand);
    // public System.Void InjectHandMaterialPropertyBlockEditor(Oculus.Interaction.MaterialPropertyBlockEditor handMaterialPropertyBlockEditor)
    // Offset: 0x47C616C
    void InjectHandMaterialPropertyBlockEditor(::Oculus::Interaction::MaterialPropertyBlockEditor* handMaterialPropertyBlockEditor);
    // public System.Void .ctor()
    // Offset: 0x47C6174
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HandConfidenceVisual* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::HandConfidenceVisual::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HandConfidenceVisual*, creationType>()));
    }
    // private System.Void <UpdateVisual>g__FillConfidence|18_0(Oculus.Interaction.Input.HandFinger finger, System.Int32 offset, System.Int32 lenght, ref Oculus.Interaction.HandConfidenceVisual/<>c__DisplayClass18_0 )
    // Offset: 0x47C5A0C
    void $UpdateVisual$g__FillConfidence_18_0(::Oculus::Interaction::Input::HandFinger finger, int offset, int lenght, ByRef<::Oculus::Interaction::HandConfidenceVisual::$$c__DisplayClass18_0> param_3);
  }; // Oculus.Interaction.HandConfidenceVisual
  #pragma pack(pop)
  static check_size<sizeof(HandConfidenceVisual), 76 + sizeof(float)> __Oculus_Interaction_HandConfidenceVisualSizeCheck;
  static_assert(sizeof(HandConfidenceVisual) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::HandConfidenceVisual::get_Hand
// Il2CppName: get_Hand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Input::IHand* (Oculus::Interaction::HandConfidenceVisual::*)()>(&Oculus::Interaction::HandConfidenceVisual::get_Hand)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandConfidenceVisual*), "get_Hand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandConfidenceVisual::set_Hand
// Il2CppName: set_Hand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandConfidenceVisual::*)(::Oculus::Interaction::Input::IHand*)>(&Oculus::Interaction::HandConfidenceVisual::set_Hand)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandConfidenceVisual*), "set_Hand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandConfidenceVisual::get_Speed
// Il2CppName: get_Speed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::HandConfidenceVisual::*)()>(&Oculus::Interaction::HandConfidenceVisual::get_Speed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandConfidenceVisual*), "get_Speed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandConfidenceVisual::set_Speed
// Il2CppName: set_Speed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandConfidenceVisual::*)(float)>(&Oculus::Interaction::HandConfidenceVisual::set_Speed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandConfidenceVisual*), "set_Speed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandConfidenceVisual::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandConfidenceVisual::*)()>(&Oculus::Interaction::HandConfidenceVisual::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandConfidenceVisual*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandConfidenceVisual::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandConfidenceVisual::*)()>(&Oculus::Interaction::HandConfidenceVisual::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandConfidenceVisual*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandConfidenceVisual::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandConfidenceVisual::*)()>(&Oculus::Interaction::HandConfidenceVisual::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandConfidenceVisual*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandConfidenceVisual::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandConfidenceVisual::*)()>(&Oculus::Interaction::HandConfidenceVisual::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandConfidenceVisual*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandConfidenceVisual::UpdateVisual
// Il2CppName: UpdateVisual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandConfidenceVisual::*)()>(&Oculus::Interaction::HandConfidenceVisual::UpdateVisual)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandConfidenceVisual*), "UpdateVisual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandConfidenceVisual::InjectAllHandConfidenceVisual
// Il2CppName: InjectAllHandConfidenceVisual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandConfidenceVisual::*)(::Oculus::Interaction::Input::IHand*, ::Oculus::Interaction::MaterialPropertyBlockEditor*)>(&Oculus::Interaction::HandConfidenceVisual::InjectAllHandConfidenceVisual)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHand")->byval_arg;
    static auto* handMaterialPropertyBlockEditor = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "MaterialPropertyBlockEditor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandConfidenceVisual*), "InjectAllHandConfidenceVisual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand, handMaterialPropertyBlockEditor});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandConfidenceVisual::InjectHand
// Il2CppName: InjectHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandConfidenceVisual::*)(::Oculus::Interaction::Input::IHand*)>(&Oculus::Interaction::HandConfidenceVisual::InjectHand)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandConfidenceVisual*), "InjectHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandConfidenceVisual::InjectHandMaterialPropertyBlockEditor
// Il2CppName: InjectHandMaterialPropertyBlockEditor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandConfidenceVisual::*)(::Oculus::Interaction::MaterialPropertyBlockEditor*)>(&Oculus::Interaction::HandConfidenceVisual::InjectHandMaterialPropertyBlockEditor)> {
  static const MethodInfo* get() {
    static auto* handMaterialPropertyBlockEditor = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "MaterialPropertyBlockEditor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandConfidenceVisual*), "InjectHandMaterialPropertyBlockEditor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handMaterialPropertyBlockEditor});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandConfidenceVisual::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Interaction::HandConfidenceVisual::$UpdateVisual$g__FillConfidence_18_0
// Il2CppName: <UpdateVisual>g__FillConfidence|18_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandConfidenceVisual::*)(::Oculus::Interaction::Input::HandFinger, int, int, ByRef<::Oculus::Interaction::HandConfidenceVisual::$$c__DisplayClass18_0>)>(&Oculus::Interaction::HandConfidenceVisual::$UpdateVisual$g__FillConfidence_18_0)> {
  static const MethodInfo* get() {
    static auto* finger = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "HandFinger")->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* lenght = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* param_3 = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "HandConfidenceVisual/<>c__DisplayClass18_0")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandConfidenceVisual*), "<UpdateVisual>g__FillConfidence|18_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{finger, offset, lenght, param_3});
  }
};
