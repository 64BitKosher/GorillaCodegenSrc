// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Object because it is already included!
}
// Forward declaring namespace: Oculus::Interaction
namespace Oculus::Interaction {
  // Forward declaring type: IPointableCanvas
  class IPointableCanvas;
  // Forward declaring type: PointableCanvasEventArgs
  class PointableCanvasEventArgs;
}
// Forward declaring namespace: UnityEngine::Events
namespace UnityEngine::Events {
  // Forward declaring type: UnityEvent
  class UnityEvent;
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: PointableCanvasUnityEventWrapper
  class PointableCanvasUnityEventWrapper;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::PointableCanvasUnityEventWrapper);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::PointableCanvasUnityEventWrapper*, "Oculus.Interaction", "PointableCanvasUnityEventWrapper");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x69
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.PointableCanvasUnityEventWrapper
  // [TokenAttribute] Offset: FFFFFFFF
  class PointableCanvasUnityEventWrapper : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.Object _pointableCanvas
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Object* pointableCanvas;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.IPointableCanvas PointableCanvas
    // Size: 0x8
    // Offset: 0x28
    ::Oculus::Interaction::IPointableCanvas* PointableCanvas;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::IPointableCanvas*) == 0x8);
    // private System.Boolean _suppressWhileDragging
    // Size: 0x1
    // Offset: 0x30
    bool suppressWhileDragging;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: suppressWhileDragging and: whenBeginHighlight
    char __padding2[0x7] = {};
    // private UnityEngine.Events.UnityEvent _whenBeginHighlight
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Events::UnityEvent* whenBeginHighlight;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    // private UnityEngine.Events.UnityEvent _whenEndHighlight
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Events::UnityEvent* whenEndHighlight;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    // private UnityEngine.Events.UnityEvent _whenSelectedHovered
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Events::UnityEvent* whenSelectedHovered;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    // private UnityEngine.Events.UnityEvent _whenSelectedEmpty
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::Events::UnityEvent* whenSelectedEmpty;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    // private UnityEngine.Events.UnityEvent _whenUnselectedHovered
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::Events::UnityEvent* whenUnselectedHovered;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    // private UnityEngine.Events.UnityEvent _whenUnselectedEmpty
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::Events::UnityEvent* whenUnselectedEmpty;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    // protected System.Boolean _started
    // Size: 0x1
    // Offset: 0x68
    bool started;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private UnityEngine.Object _pointableCanvas
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__pointableCanvas();
    // Get instance field reference: private Oculus.Interaction.IPointableCanvas PointableCanvas
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::IPointableCanvas*& dyn_PointableCanvas();
    // Get instance field reference: private System.Boolean _suppressWhileDragging
    [[deprecated("Use field access instead!")]] bool& dyn__suppressWhileDragging();
    // Get instance field reference: private UnityEngine.Events.UnityEvent _whenBeginHighlight
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn__whenBeginHighlight();
    // Get instance field reference: private UnityEngine.Events.UnityEvent _whenEndHighlight
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn__whenEndHighlight();
    // Get instance field reference: private UnityEngine.Events.UnityEvent _whenSelectedHovered
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn__whenSelectedHovered();
    // Get instance field reference: private UnityEngine.Events.UnityEvent _whenSelectedEmpty
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn__whenSelectedEmpty();
    // Get instance field reference: private UnityEngine.Events.UnityEvent _whenUnselectedHovered
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn__whenUnselectedHovered();
    // Get instance field reference: private UnityEngine.Events.UnityEvent _whenUnselectedEmpty
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn__whenUnselectedEmpty();
    // Get instance field reference: protected System.Boolean _started
    [[deprecated("Use field access instead!")]] bool& dyn__started();
    // private System.Boolean ShouldFireEvent(Oculus.Interaction.PointableCanvasEventArgs args)
    // Offset: 0x47D9D78
    bool ShouldFireEvent(::Oculus::Interaction::PointableCanvasEventArgs* args);
    // private System.Void PointableCanvasModule_WhenSelectableHoverEnter(Oculus.Interaction.PointableCanvasEventArgs args)
    // Offset: 0x47D9E8C
    void PointableCanvasModule_WhenSelectableHoverEnter(::Oculus::Interaction::PointableCanvasEventArgs* args);
    // private System.Void PointableCanvasModule_WhenSelectableHoverExit(Oculus.Interaction.PointableCanvasEventArgs args)
    // Offset: 0x47D9EBC
    void PointableCanvasModule_WhenSelectableHoverExit(::Oculus::Interaction::PointableCanvasEventArgs* args);
    // private System.Void PointableCanvasModule_WhenSelectableSelected(Oculus.Interaction.PointableCanvasEventArgs args)
    // Offset: 0x47D9EEC
    void PointableCanvasModule_WhenSelectableSelected(::Oculus::Interaction::PointableCanvasEventArgs* args);
    // private System.Void PointableCanvasModule_WhenSelectableUnselected(Oculus.Interaction.PointableCanvasEventArgs args)
    // Offset: 0x47D9F90
    void PointableCanvasModule_WhenSelectableUnselected(::Oculus::Interaction::PointableCanvasEventArgs* args);
    // protected System.Void Awake()
    // Offset: 0x47DA034
    void Awake();
    // protected System.Void Start()
    // Offset: 0x47DA09C
    void Start();
    // protected System.Void OnEnable()
    // Offset: 0x47DA0D4
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x47DA21C
    void OnDisable();
    // public System.Void .ctor()
    // Offset: 0x47DA364
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PointableCanvasUnityEventWrapper* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::PointableCanvasUnityEventWrapper::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PointableCanvasUnityEventWrapper*, creationType>()));
    }
  }; // Oculus.Interaction.PointableCanvasUnityEventWrapper
  #pragma pack(pop)
  static check_size<sizeof(PointableCanvasUnityEventWrapper), 104 + sizeof(bool)> __Oculus_Interaction_PointableCanvasUnityEventWrapperSizeCheck;
  static_assert(sizeof(PointableCanvasUnityEventWrapper) == 0x69);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::PointableCanvasUnityEventWrapper::ShouldFireEvent
// Il2CppName: ShouldFireEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::PointableCanvasUnityEventWrapper::*)(::Oculus::Interaction::PointableCanvasEventArgs*)>(&Oculus::Interaction::PointableCanvasUnityEventWrapper::ShouldFireEvent)> {
  static const MethodInfo* get() {
    static auto* args = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "PointableCanvasEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableCanvasUnityEventWrapper*), "ShouldFireEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{args});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableCanvasUnityEventWrapper::PointableCanvasModule_WhenSelectableHoverEnter
// Il2CppName: PointableCanvasModule_WhenSelectableHoverEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PointableCanvasUnityEventWrapper::*)(::Oculus::Interaction::PointableCanvasEventArgs*)>(&Oculus::Interaction::PointableCanvasUnityEventWrapper::PointableCanvasModule_WhenSelectableHoverEnter)> {
  static const MethodInfo* get() {
    static auto* args = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "PointableCanvasEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableCanvasUnityEventWrapper*), "PointableCanvasModule_WhenSelectableHoverEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{args});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableCanvasUnityEventWrapper::PointableCanvasModule_WhenSelectableHoverExit
// Il2CppName: PointableCanvasModule_WhenSelectableHoverExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PointableCanvasUnityEventWrapper::*)(::Oculus::Interaction::PointableCanvasEventArgs*)>(&Oculus::Interaction::PointableCanvasUnityEventWrapper::PointableCanvasModule_WhenSelectableHoverExit)> {
  static const MethodInfo* get() {
    static auto* args = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "PointableCanvasEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableCanvasUnityEventWrapper*), "PointableCanvasModule_WhenSelectableHoverExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{args});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableCanvasUnityEventWrapper::PointableCanvasModule_WhenSelectableSelected
// Il2CppName: PointableCanvasModule_WhenSelectableSelected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PointableCanvasUnityEventWrapper::*)(::Oculus::Interaction::PointableCanvasEventArgs*)>(&Oculus::Interaction::PointableCanvasUnityEventWrapper::PointableCanvasModule_WhenSelectableSelected)> {
  static const MethodInfo* get() {
    static auto* args = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "PointableCanvasEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableCanvasUnityEventWrapper*), "PointableCanvasModule_WhenSelectableSelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{args});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableCanvasUnityEventWrapper::PointableCanvasModule_WhenSelectableUnselected
// Il2CppName: PointableCanvasModule_WhenSelectableUnselected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PointableCanvasUnityEventWrapper::*)(::Oculus::Interaction::PointableCanvasEventArgs*)>(&Oculus::Interaction::PointableCanvasUnityEventWrapper::PointableCanvasModule_WhenSelectableUnselected)> {
  static const MethodInfo* get() {
    static auto* args = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "PointableCanvasEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableCanvasUnityEventWrapper*), "PointableCanvasModule_WhenSelectableUnselected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{args});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableCanvasUnityEventWrapper::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PointableCanvasUnityEventWrapper::*)()>(&Oculus::Interaction::PointableCanvasUnityEventWrapper::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableCanvasUnityEventWrapper*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableCanvasUnityEventWrapper::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PointableCanvasUnityEventWrapper::*)()>(&Oculus::Interaction::PointableCanvasUnityEventWrapper::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableCanvasUnityEventWrapper*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableCanvasUnityEventWrapper::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PointableCanvasUnityEventWrapper::*)()>(&Oculus::Interaction::PointableCanvasUnityEventWrapper::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableCanvasUnityEventWrapper*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableCanvasUnityEventWrapper::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PointableCanvasUnityEventWrapper::*)()>(&Oculus::Interaction::PointableCanvasUnityEventWrapper::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PointableCanvasUnityEventWrapper*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PointableCanvasUnityEventWrapper::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
