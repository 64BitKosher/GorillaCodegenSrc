// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Oculus.Interaction.GrabAPI.FingerRawPinchAPI
#include "Oculus/Interaction/GrabAPI/FingerRawPinchAPI.hpp"
// Including type: Oculus.Interaction.Input.HandFinger
#include "Oculus/Interaction/Input/HandFinger.hpp"
// Including type: Oculus.Interaction.Input.HandJointId
#include "Oculus/Interaction/Input/HandJointId.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction::Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: IHand
  class IHand;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::GrabAPI::FingerRawPinchAPI::FingerPinchData);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::GrabAPI::FingerRawPinchAPI::FingerPinchData*, "Oculus.Interaction.GrabAPI", "FingerRawPinchAPI/FingerPinchData");
// Type namespace: Oculus.Interaction.GrabAPI
namespace Oculus::Interaction::GrabAPI {
  // Size: 0x2C
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.GrabAPI.FingerRawPinchAPI/FingerPinchData
  // [TokenAttribute] Offset: FFFFFFFF
  class FingerRawPinchAPI::FingerPinchData : public ::Il2CppObject {
    public:
    public:
    // private readonly Oculus.Interaction.Input.HandFinger _finger
    // Size: 0x4
    // Offset: 0x10
    ::Oculus::Interaction::Input::HandFinger finger;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::HandFinger) == 0x4);
    // private readonly Oculus.Interaction.Input.HandJointId _tipId
    // Size: 0x4
    // Offset: 0x14
    ::Oculus::Interaction::Input::HandJointId tipId;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::HandJointId) == 0x4);
    // public System.Single PinchStrength
    // Size: 0x4
    // Offset: 0x18
    float PinchStrength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean IsPinching
    // Size: 0x1
    // Offset: 0x1C
    bool IsPinching;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <IsPinchingChanged>k__BackingField
    // Size: 0x1
    // Offset: 0x1D
    bool IsPinchingChanged;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: IsPinchingChanged and: TipPosition
    char __padding4[0x2] = {};
    // private UnityEngine.Vector3 <TipPosition>k__BackingField
    // Size: 0xC
    // Offset: 0x20
    ::UnityEngine::Vector3 TipPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    public:
    // Get instance field reference: private readonly Oculus.Interaction.Input.HandFinger _finger
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::HandFinger& dyn__finger();
    // Get instance field reference: private readonly Oculus.Interaction.Input.HandJointId _tipId
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::HandJointId& dyn__tipId();
    // Get instance field reference: public System.Single PinchStrength
    [[deprecated("Use field access instead!")]] float& dyn_PinchStrength();
    // Get instance field reference: public System.Boolean IsPinching
    [[deprecated("Use field access instead!")]] bool& dyn_IsPinching();
    // Get instance field reference: private System.Boolean <IsPinchingChanged>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$IsPinchingChanged$k__BackingField();
    // Get instance field reference: private UnityEngine.Vector3 <TipPosition>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_$TipPosition$k__BackingField();
    // public System.Boolean get_IsPinchingChanged()
    // Offset: 0x483AE4C
    bool get_IsPinchingChanged();
    // private System.Void set_IsPinchingChanged(System.Boolean value)
    // Offset: 0x483AE54
    void set_IsPinchingChanged(bool value);
    // public UnityEngine.Vector3 get_TipPosition()
    // Offset: 0x483AE60
    ::UnityEngine::Vector3 get_TipPosition();
    // private System.Void set_TipPosition(UnityEngine.Vector3 value)
    // Offset: 0x483AE6C
    void set_TipPosition(::UnityEngine::Vector3 value);
    // public System.Void .ctor(Oculus.Interaction.Input.HandFinger fingerId)
    // Offset: 0x483ADD0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FingerRawPinchAPI::FingerPinchData* New_ctor(::Oculus::Interaction::Input::HandFinger fingerId) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::GrabAPI::FingerRawPinchAPI::FingerPinchData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FingerRawPinchAPI::FingerPinchData*, creationType>(fingerId)));
    }
    // private System.Void UpdateTipPosition(Oculus.Interaction.Input.IHand hand)
    // Offset: 0x483AE78
    void UpdateTipPosition(::Oculus::Interaction::Input::IHand* hand);
    // public System.Void UpdateIsPinching(Oculus.Interaction.Input.IHand hand)
    // Offset: 0x483AA7C
    void UpdateIsPinching(::Oculus::Interaction::Input::IHand* hand);
    // public System.Void ClearState()
    // Offset: 0x483ABC4
    void ClearState();
  }; // Oculus.Interaction.GrabAPI.FingerRawPinchAPI/FingerPinchData
  #pragma pack(pop)
  static check_size<sizeof(FingerRawPinchAPI::FingerPinchData), 32 + sizeof(::UnityEngine::Vector3)> __Oculus_Interaction_GrabAPI_FingerRawPinchAPI_FingerPinchDataSizeCheck;
  static_assert(sizeof(FingerRawPinchAPI::FingerPinchData) == 0x2C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::GrabAPI::FingerRawPinchAPI::FingerPinchData::get_IsPinchingChanged
// Il2CppName: get_IsPinchingChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::GrabAPI::FingerRawPinchAPI::FingerPinchData::*)()>(&Oculus::Interaction::GrabAPI::FingerRawPinchAPI::FingerPinchData::get_IsPinchingChanged)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::GrabAPI::FingerRawPinchAPI::FingerPinchData*), "get_IsPinchingChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::GrabAPI::FingerRawPinchAPI::FingerPinchData::set_IsPinchingChanged
// Il2CppName: set_IsPinchingChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::GrabAPI::FingerRawPinchAPI::FingerPinchData::*)(bool)>(&Oculus::Interaction::GrabAPI::FingerRawPinchAPI::FingerPinchData::set_IsPinchingChanged)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::GrabAPI::FingerRawPinchAPI::FingerPinchData*), "set_IsPinchingChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::GrabAPI::FingerRawPinchAPI::FingerPinchData::get_TipPosition
// Il2CppName: get_TipPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Oculus::Interaction::GrabAPI::FingerRawPinchAPI::FingerPinchData::*)()>(&Oculus::Interaction::GrabAPI::FingerRawPinchAPI::FingerPinchData::get_TipPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::GrabAPI::FingerRawPinchAPI::FingerPinchData*), "get_TipPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::GrabAPI::FingerRawPinchAPI::FingerPinchData::set_TipPosition
// Il2CppName: set_TipPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::GrabAPI::FingerRawPinchAPI::FingerPinchData::*)(::UnityEngine::Vector3)>(&Oculus::Interaction::GrabAPI::FingerRawPinchAPI::FingerPinchData::set_TipPosition)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::GrabAPI::FingerRawPinchAPI::FingerPinchData*), "set_TipPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::GrabAPI::FingerRawPinchAPI::FingerPinchData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Interaction::GrabAPI::FingerRawPinchAPI::FingerPinchData::UpdateTipPosition
// Il2CppName: UpdateTipPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::GrabAPI::FingerRawPinchAPI::FingerPinchData::*)(::Oculus::Interaction::Input::IHand*)>(&Oculus::Interaction::GrabAPI::FingerRawPinchAPI::FingerPinchData::UpdateTipPosition)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::GrabAPI::FingerRawPinchAPI::FingerPinchData*), "UpdateTipPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::GrabAPI::FingerRawPinchAPI::FingerPinchData::UpdateIsPinching
// Il2CppName: UpdateIsPinching
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::GrabAPI::FingerRawPinchAPI::FingerPinchData::*)(::Oculus::Interaction::Input::IHand*)>(&Oculus::Interaction::GrabAPI::FingerRawPinchAPI::FingerPinchData::UpdateIsPinching)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::GrabAPI::FingerRawPinchAPI::FingerPinchData*), "UpdateIsPinching", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::GrabAPI::FingerRawPinchAPI::FingerPinchData::ClearState
// Il2CppName: ClearState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::GrabAPI::FingerRawPinchAPI::FingerPinchData::*)()>(&Oculus::Interaction::GrabAPI::FingerRawPinchAPI::FingerPinchData::ClearState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::GrabAPI::FingerRawPinchAPI::FingerPinchData*), "ClearState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
