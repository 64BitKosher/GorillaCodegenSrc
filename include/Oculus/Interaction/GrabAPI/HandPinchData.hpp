// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: UnityEngine.Pose
#include "UnityEngine/Pose.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IReadOnlyList`1<T>
  template<typename T>
  class IReadOnlyList_1;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.GrabAPI
namespace Oculus::Interaction::GrabAPI {
  // Forward declaring type: HandPinchData
  class HandPinchData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::GrabAPI::HandPinchData);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::GrabAPI::HandPinchData*, "Oculus.Interaction.GrabAPI", "HandPinchData");
// Type namespace: Oculus.Interaction.GrabAPI
namespace Oculus::Interaction::GrabAPI {
  // Size: 0x18
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Oculus.Interaction.GrabAPI.HandPinchData
  // [TokenAttribute] Offset: FFFFFFFF
  class HandPinchData : public ::Il2CppObject {
    public:
    public:
    // private readonly System.Single[] _jointPositions
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<float> jointPositions;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    public:
    // Creating conversion operator: operator ::ArrayW<float>
    constexpr operator ::ArrayW<float>() const noexcept {
      return jointPositions;
    }
    // static field const value: static private System.Int32 NumHandJoints
    static constexpr const int NumHandJoints = 24;
    // Get static field: static private System.Int32 NumHandJoints
    static int _get_NumHandJoints();
    // Set static field: static private System.Int32 NumHandJoints
    static void _set_NumHandJoints(int value);
    // Get instance field reference: private readonly System.Single[] _jointPositions
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn__jointPositions();
    // public System.Void .ctor()
    // Offset: 0x4839704
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HandPinchData* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::GrabAPI::HandPinchData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HandPinchData*, creationType>()));
    }
    // public System.Void SetJoints(System.Collections.Generic.IReadOnlyList`1<UnityEngine.Pose> poses)
    // Offset: 0x4839768
    void SetJoints(::System::Collections::Generic::IReadOnlyList_1<::UnityEngine::Pose>* poses);
    // public System.Void SetJoints(System.Collections.Generic.IReadOnlyList`1<UnityEngine.Vector3> positions)
    // Offset: 0x483988C
    void SetJoints(::System::Collections::Generic::IReadOnlyList_1<::UnityEngine::Vector3>* positions);
  }; // Oculus.Interaction.GrabAPI.HandPinchData
  #pragma pack(pop)
  static check_size<sizeof(HandPinchData), 16 + sizeof(::ArrayW<float>)> __Oculus_Interaction_GrabAPI_HandPinchDataSizeCheck;
  static_assert(sizeof(HandPinchData) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::GrabAPI::HandPinchData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Interaction::GrabAPI::HandPinchData::SetJoints
// Il2CppName: SetJoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::GrabAPI::HandPinchData::*)(::System::Collections::Generic::IReadOnlyList_1<::UnityEngine::Pose>*)>(&Oculus::Interaction::GrabAPI::HandPinchData::SetJoints)> {
  static const MethodInfo* get() {
    static auto* poses = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IReadOnlyList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::GrabAPI::HandPinchData*), "SetJoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{poses});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::GrabAPI::HandPinchData::SetJoints
// Il2CppName: SetJoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::GrabAPI::HandPinchData::*)(::System::Collections::Generic::IReadOnlyList_1<::UnityEngine::Vector3>*)>(&Oculus::Interaction::GrabAPI::HandPinchData::SetJoints)> {
  static const MethodInfo* get() {
    static auto* positions = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IReadOnlyList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::GrabAPI::HandPinchData*), "SetJoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{positions});
  }
};
