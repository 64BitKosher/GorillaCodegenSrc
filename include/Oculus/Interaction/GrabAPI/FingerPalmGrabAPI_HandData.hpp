// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Oculus.Interaction.GrabAPI.FingerPalmGrabAPI
#include "Oculus/Interaction/GrabAPI/FingerPalmGrabAPI.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: UnityEngine.Pose
#include "UnityEngine/Pose.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IReadOnlyList`1<T>
  template<typename T>
  class IReadOnlyList_1;
}
// Forward declaring namespace: Oculus::Interaction::Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: Handedness
  struct Handedness;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::GrabAPI::FingerPalmGrabAPI::HandData);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::GrabAPI::FingerPalmGrabAPI::HandData*, "Oculus.Interaction.GrabAPI", "FingerPalmGrabAPI/HandData");
// Type namespace: Oculus.Interaction.GrabAPI
namespace Oculus::Interaction::GrabAPI {
  // Size: 0x38
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Oculus.Interaction.GrabAPI.FingerPalmGrabAPI/HandData
  // [TokenAttribute] Offset: FFFFFFFF
  class FingerPalmGrabAPI::HandData : public ::Il2CppObject {
    public:
    public:
    // private System.Single[] jointValues
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<float> jointValues;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // private System.Single _rootRotX
    // Size: 0x4
    // Offset: 0x18
    float rootRotX;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _rootRotY
    // Size: 0x4
    // Offset: 0x1C
    float rootRotY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _rootRotZ
    // Size: 0x4
    // Offset: 0x20
    float rootRotZ;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _rootRotW
    // Size: 0x4
    // Offset: 0x24
    float rootRotW;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _rootPosX
    // Size: 0x4
    // Offset: 0x28
    float rootPosX;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _rootPosY
    // Size: 0x4
    // Offset: 0x2C
    float rootPosY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _rootPosZ
    // Size: 0x4
    // Offset: 0x30
    float rootPosZ;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 _handedness
    // Size: 0x4
    // Offset: 0x34
    int handedness;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // static field const value: static private System.Int32 NumHandJoints
    static constexpr const int NumHandJoints = 24;
    // Get static field: static private System.Int32 NumHandJoints
    static int _get_NumHandJoints();
    // Set static field: static private System.Int32 NumHandJoints
    static void _set_NumHandJoints(int value);
    // Get instance field reference: private System.Single[] jointValues
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_jointValues();
    // Get instance field reference: private System.Single _rootRotX
    [[deprecated("Use field access instead!")]] float& dyn__rootRotX();
    // Get instance field reference: private System.Single _rootRotY
    [[deprecated("Use field access instead!")]] float& dyn__rootRotY();
    // Get instance field reference: private System.Single _rootRotZ
    [[deprecated("Use field access instead!")]] float& dyn__rootRotZ();
    // Get instance field reference: private System.Single _rootRotW
    [[deprecated("Use field access instead!")]] float& dyn__rootRotW();
    // Get instance field reference: private System.Single _rootPosX
    [[deprecated("Use field access instead!")]] float& dyn__rootPosX();
    // Get instance field reference: private System.Single _rootPosY
    [[deprecated("Use field access instead!")]] float& dyn__rootPosY();
    // Get instance field reference: private System.Single _rootPosZ
    [[deprecated("Use field access instead!")]] float& dyn__rootPosZ();
    // Get instance field reference: private System.Int32 _handedness
    [[deprecated("Use field access instead!")]] int& dyn__handedness();
    // public System.Void .ctor()
    // Offset: 0x48391AC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FingerPalmGrabAPI::HandData* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::GrabAPI::FingerPalmGrabAPI::HandData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FingerPalmGrabAPI::HandData*, creationType>()));
    }
    // public System.Void SetData(System.Collections.Generic.IReadOnlyList`1<UnityEngine.Pose> joints, UnityEngine.Pose root, Oculus.Interaction.Input.Handedness handedness)
    // Offset: 0x48394F8
    void SetData(::System::Collections::Generic::IReadOnlyList_1<::UnityEngine::Pose>* joints, ::UnityEngine::Pose root, ::Oculus::Interaction::Input::Handedness handedness);
  }; // Oculus.Interaction.GrabAPI.FingerPalmGrabAPI/HandData
  #pragma pack(pop)
  static check_size<sizeof(FingerPalmGrabAPI::HandData), 52 + sizeof(int)> __Oculus_Interaction_GrabAPI_FingerPalmGrabAPI_HandDataSizeCheck;
  static_assert(sizeof(FingerPalmGrabAPI::HandData) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::GrabAPI::FingerPalmGrabAPI::HandData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Interaction::GrabAPI::FingerPalmGrabAPI::HandData::SetData
// Il2CppName: SetData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::GrabAPI::FingerPalmGrabAPI::HandData::*)(::System::Collections::Generic::IReadOnlyList_1<::UnityEngine::Pose>*, ::UnityEngine::Pose, ::Oculus::Interaction::Input::Handedness)>(&Oculus::Interaction::GrabAPI::FingerPalmGrabAPI::HandData::SetData)> {
  static const MethodInfo* get() {
    static auto* joints = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IReadOnlyList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")})->byval_arg;
    static auto* root = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->byval_arg;
    static auto* handedness = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "Handedness")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::GrabAPI::FingerPalmGrabAPI::HandData*), "SetData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{joints, root, handedness});
  }
};
