// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction::GrabAPI
namespace Oculus::Interaction::GrabAPI {
  // Forward declaring type: HandGrabAPI
  class HandGrabAPI;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.GrabAPI
namespace Oculus::Interaction::GrabAPI {
  // Forward declaring type: FingerRawPinchInjector
  class FingerRawPinchInjector;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::GrabAPI::FingerRawPinchInjector);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::GrabAPI::FingerRawPinchInjector*, "Oculus.Interaction.GrabAPI", "FingerRawPinchInjector");
// Type namespace: Oculus.Interaction.GrabAPI
namespace Oculus::Interaction::GrabAPI {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.GrabAPI.FingerRawPinchInjector
  // [TokenAttribute] Offset: FFFFFFFF
  class FingerRawPinchInjector : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private Oculus.Interaction.GrabAPI.HandGrabAPI _handGrabAPI
    // Size: 0x8
    // Offset: 0x20
    ::Oculus::Interaction::GrabAPI::HandGrabAPI* handGrabAPI;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::GrabAPI::HandGrabAPI*) == 0x8);
    public:
    // Get instance field reference: private Oculus.Interaction.GrabAPI.HandGrabAPI _handGrabAPI
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::GrabAPI::HandGrabAPI*& dyn__handGrabAPI();
    // protected System.Void Awake()
    // Offset: 0x483AF54
    void Awake();
    // public System.Void .ctor()
    // Offset: 0x483AFEC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FingerRawPinchInjector* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::GrabAPI::FingerRawPinchInjector::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FingerRawPinchInjector*, creationType>()));
    }
  }; // Oculus.Interaction.GrabAPI.FingerRawPinchInjector
  #pragma pack(pop)
  static check_size<sizeof(FingerRawPinchInjector), 32 + sizeof(::Oculus::Interaction::GrabAPI::HandGrabAPI*)> __Oculus_Interaction_GrabAPI_FingerRawPinchInjectorSizeCheck;
  static_assert(sizeof(FingerRawPinchInjector) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::GrabAPI::FingerRawPinchInjector::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::GrabAPI::FingerRawPinchInjector::*)()>(&Oculus::Interaction::GrabAPI::FingerRawPinchInjector::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::GrabAPI::FingerRawPinchInjector*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::GrabAPI::FingerRawPinchInjector::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
