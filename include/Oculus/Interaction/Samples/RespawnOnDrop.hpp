// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Events
namespace UnityEngine::Events {
  // Forward declaring type: UnityEvent
  class UnityEvent;
}
// Forward declaring namespace: Oculus::Interaction
namespace Oculus::Interaction {
  // Forward declaring type: TwoGrabFreeTransformer
  class TwoGrabFreeTransformer;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Rigidbody
  class Rigidbody;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.Samples
namespace Oculus::Interaction::Samples {
  // Forward declaring type: RespawnOnDrop
  class RespawnOnDrop;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Samples::RespawnOnDrop);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Samples::RespawnOnDrop*, "Oculus.Interaction.Samples", "RespawnOnDrop");
// Type namespace: Oculus.Interaction.Samples
namespace Oculus::Interaction::Samples {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.Samples.RespawnOnDrop
  // [TokenAttribute] Offset: FFFFFFFF
  class RespawnOnDrop : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private System.Single _yThresholdForRespawn
    // Size: 0x4
    // Offset: 0x20
    float yThresholdForRespawn;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: yThresholdForRespawn and: whenRespawned
    char __padding0[0x4] = {};
    // private UnityEngine.Events.UnityEvent _whenRespawned
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Events::UnityEvent* whenRespawned;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    // private UnityEngine.Vector3 _initialPosition
    // Size: 0xC
    // Offset: 0x30
    ::UnityEngine::Vector3 initialPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Quaternion _initialRotation
    // Size: 0x10
    // Offset: 0x3C
    ::UnityEngine::Quaternion initialRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private UnityEngine.Vector3 _initialScale
    // Size: 0xC
    // Offset: 0x4C
    ::UnityEngine::Vector3 initialScale;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private Oculus.Interaction.TwoGrabFreeTransformer[] _freeTransformers
    // Size: 0x8
    // Offset: 0x58
    ::ArrayW<::Oculus::Interaction::TwoGrabFreeTransformer*> freeTransformers;
    // Field size check
    static_assert(sizeof(::ArrayW<::Oculus::Interaction::TwoGrabFreeTransformer*>) == 0x8);
    // private UnityEngine.Rigidbody _rigidBody
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::Rigidbody* rigidBody;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rigidbody*) == 0x8);
    public:
    // Get instance field reference: private System.Single _yThresholdForRespawn
    [[deprecated("Use field access instead!")]] float& dyn__yThresholdForRespawn();
    // Get instance field reference: private UnityEngine.Events.UnityEvent _whenRespawned
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn__whenRespawned();
    // Get instance field reference: private UnityEngine.Vector3 _initialPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__initialPosition();
    // Get instance field reference: private UnityEngine.Quaternion _initialRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn__initialRotation();
    // Get instance field reference: private UnityEngine.Vector3 _initialScale
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__initialScale();
    // Get instance field reference: private Oculus.Interaction.TwoGrabFreeTransformer[] _freeTransformers
    [[deprecated("Use field access instead!")]] ::ArrayW<::Oculus::Interaction::TwoGrabFreeTransformer*>& dyn__freeTransformers();
    // Get instance field reference: private UnityEngine.Rigidbody _rigidBody
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rigidbody*& dyn__rigidBody();
    // public UnityEngine.Events.UnityEvent get_WhenRespawned()
    // Offset: 0x47A0AF4
    ::UnityEngine::Events::UnityEvent* get_WhenRespawned();
    // protected System.Void OnEnable()
    // Offset: 0x47A0AFC
    void OnEnable();
    // protected System.Void Update()
    // Offset: 0x47A0BE8
    void Update();
    // public System.Void .ctor()
    // Offset: 0x47A0DCC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RespawnOnDrop* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Samples::RespawnOnDrop::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RespawnOnDrop*, creationType>()));
    }
  }; // Oculus.Interaction.Samples.RespawnOnDrop
  #pragma pack(pop)
  static check_size<sizeof(RespawnOnDrop), 96 + sizeof(::UnityEngine::Rigidbody*)> __Oculus_Interaction_Samples_RespawnOnDropSizeCheck;
  static_assert(sizeof(RespawnOnDrop) == 0x68);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Samples::RespawnOnDrop::get_WhenRespawned
// Il2CppName: get_WhenRespawned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Events::UnityEvent* (Oculus::Interaction::Samples::RespawnOnDrop::*)()>(&Oculus::Interaction::Samples::RespawnOnDrop::get_WhenRespawned)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Samples::RespawnOnDrop*), "get_WhenRespawned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Samples::RespawnOnDrop::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Samples::RespawnOnDrop::*)()>(&Oculus::Interaction::Samples::RespawnOnDrop::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Samples::RespawnOnDrop*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Samples::RespawnOnDrop::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Samples::RespawnOnDrop::*)()>(&Oculus::Interaction::Samples::RespawnOnDrop::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Samples::RespawnOnDrop*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Samples::RespawnOnDrop::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
