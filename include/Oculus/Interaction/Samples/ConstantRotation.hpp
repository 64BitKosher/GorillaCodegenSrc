// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: Oculus.Interaction.Samples
namespace Oculus::Interaction::Samples {
  // Forward declaring type: ConstantRotation
  class ConstantRotation;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Samples::ConstantRotation);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Samples::ConstantRotation*, "Oculus.Interaction.Samples", "ConstantRotation");
// Type namespace: Oculus.Interaction.Samples
namespace Oculus::Interaction::Samples {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.Samples.ConstantRotation
  // [TokenAttribute] Offset: FFFFFFFF
  class ConstantRotation : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private System.Single _rotationSpeed
    // Size: 0x4
    // Offset: 0x20
    float rotationSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector3 _localAxis
    // Size: 0xC
    // Offset: 0x24
    ::UnityEngine::Vector3 localAxis;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    public:
    // Get instance field reference: private System.Single _rotationSpeed
    [[deprecated("Use field access instead!")]] float& dyn__rotationSpeed();
    // Get instance field reference: private UnityEngine.Vector3 _localAxis
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__localAxis();
    // public System.Single get_RotationSpeed()
    // Offset: 0x47A1FB4
    float get_RotationSpeed();
    // public System.Void set_RotationSpeed(System.Single value)
    // Offset: 0x47A1FBC
    void set_RotationSpeed(float value);
    // public UnityEngine.Vector3 get_LocalAxis()
    // Offset: 0x47A1FC4
    ::UnityEngine::Vector3 get_LocalAxis();
    // public System.Void set_LocalAxis(UnityEngine.Vector3 value)
    // Offset: 0x47A1FD0
    void set_LocalAxis(::UnityEngine::Vector3 value);
    // protected System.Void Update()
    // Offset: 0x47A1FDC
    void Update();
    // public System.Void .ctor()
    // Offset: 0x47A203C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ConstantRotation* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Samples::ConstantRotation::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ConstantRotation*, creationType>()));
    }
  }; // Oculus.Interaction.Samples.ConstantRotation
  #pragma pack(pop)
  static check_size<sizeof(ConstantRotation), 36 + sizeof(::UnityEngine::Vector3)> __Oculus_Interaction_Samples_ConstantRotationSizeCheck;
  static_assert(sizeof(ConstantRotation) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Samples::ConstantRotation::get_RotationSpeed
// Il2CppName: get_RotationSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::Samples::ConstantRotation::*)()>(&Oculus::Interaction::Samples::ConstantRotation::get_RotationSpeed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Samples::ConstantRotation*), "get_RotationSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Samples::ConstantRotation::set_RotationSpeed
// Il2CppName: set_RotationSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Samples::ConstantRotation::*)(float)>(&Oculus::Interaction::Samples::ConstantRotation::set_RotationSpeed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Samples::ConstantRotation*), "set_RotationSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Samples::ConstantRotation::get_LocalAxis
// Il2CppName: get_LocalAxis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Oculus::Interaction::Samples::ConstantRotation::*)()>(&Oculus::Interaction::Samples::ConstantRotation::get_LocalAxis)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Samples::ConstantRotation*), "get_LocalAxis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Samples::ConstantRotation::set_LocalAxis
// Il2CppName: set_LocalAxis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Samples::ConstantRotation::*)(::UnityEngine::Vector3)>(&Oculus::Interaction::Samples::ConstantRotation::set_LocalAxis)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Samples::ConstantRotation*), "set_LocalAxis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Samples::ConstantRotation::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Samples::ConstantRotation::*)()>(&Oculus::Interaction::Samples::ConstantRotation::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Samples::ConstantRotation*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Samples::ConstantRotation::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
