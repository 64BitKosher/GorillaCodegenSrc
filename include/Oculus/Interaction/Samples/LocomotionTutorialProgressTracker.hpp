// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Oculus.Interaction.Locomotion.LocomotionEvent/TranslationType
#include "Oculus/Interaction/Locomotion/LocomotionEvent.hpp"
// Including type: Oculus.Interaction.Locomotion.LocomotionEvent/RotationType
// Already included the same include: Oculus/Interaction/Locomotion/LocomotionEvent.hpp
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Image
  class Image;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Sprite
  class Sprite;
  // Skipping declaration: Object because it is already included!
  // Forward declaring type: Pose
  struct Pose;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: Oculus::Interaction::Locomotion
namespace Oculus::Interaction::Locomotion {
  // Forward declaring type: ILocomotionEventHandler
  class ILocomotionEventHandler;
  // Skipping declaration: LocomotionEvent because it is already included!
}
// Forward declaring namespace: UnityEngine::Events
namespace UnityEngine::Events {
  // Forward declaring type: UnityEvent
  class UnityEvent;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.Samples
namespace Oculus::Interaction::Samples {
  // Forward declaring type: LocomotionTutorialProgressTracker
  class LocomotionTutorialProgressTracker;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Samples::LocomotionTutorialProgressTracker);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Samples::LocomotionTutorialProgressTracker*, "Oculus.Interaction.Samples", "LocomotionTutorialProgressTracker");
// Type namespace: Oculus.Interaction.Samples
namespace Oculus::Interaction::Samples {
  // Size: 0x74
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.Samples.LocomotionTutorialProgressTracker
  // [TokenAttribute] Offset: FFFFFFFF
  class LocomotionTutorialProgressTracker : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.UI.Image[] _dots
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::UnityEngine::UI::Image*> dots;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::UI::Image*>) == 0x8);
    // private UnityEngine.Sprite _pendingSprite
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Sprite* pendingSprite;
    // Field size check
    static_assert(sizeof(::UnityEngine::Sprite*) == 0x8);
    // private UnityEngine.Sprite _currentSprite
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Sprite* currentSprite;
    // Field size check
    static_assert(sizeof(::UnityEngine::Sprite*) == 0x8);
    // private UnityEngine.Sprite _completedSprite
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Sprite* completedSprite;
    // Field size check
    static_assert(sizeof(::UnityEngine::Sprite*) == 0x8);
    // private System.Collections.Generic.List`1<Oculus.Interaction.Locomotion.LocomotionEvent/TranslationType> _consumeTranslationEvents
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::Generic::List_1<::Oculus::Interaction::Locomotion::LocomotionEvent::TranslationType>* consumeTranslationEvents;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Oculus::Interaction::Locomotion::LocomotionEvent::TranslationType>*) == 0x8);
    // private System.Collections.Generic.List`1<Oculus.Interaction.Locomotion.LocomotionEvent/RotationType> _consumeRotationEvents
    // Size: 0x8
    // Offset: 0x48
    ::System::Collections::Generic::List_1<::Oculus::Interaction::Locomotion::LocomotionEvent::RotationType>* consumeRotationEvents;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Oculus::Interaction::Locomotion::LocomotionEvent::RotationType>*) == 0x8);
    // private UnityEngine.Object _locomotionHandler
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::Object* locomotionHandler;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.Locomotion.ILocomotionEventHandler LocomotionHandler
    // Size: 0x8
    // Offset: 0x58
    ::Oculus::Interaction::Locomotion::ILocomotionEventHandler* LocomotionHandler;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Locomotion::ILocomotionEventHandler*) == 0x8);
    // public UnityEngine.Events.UnityEvent WhenCompleted
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::Events::UnityEvent* WhenCompleted;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    // protected System.Boolean _started
    // Size: 0x1
    // Offset: 0x68
    bool started;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: started and: currentProgress
    char __padding9[0x3] = {};
    // private System.Int32 _currentProgress
    // Size: 0x4
    // Offset: 0x6C
    int currentProgress;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _totalProgress
    // Size: 0x4
    // Offset: 0x70
    int totalProgress;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: private UnityEngine.UI.Image[] _dots
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::UI::Image*>& dyn__dots();
    // Get instance field reference: private UnityEngine.Sprite _pendingSprite
    [[deprecated("Use field access instead!")]] ::UnityEngine::Sprite*& dyn__pendingSprite();
    // Get instance field reference: private UnityEngine.Sprite _currentSprite
    [[deprecated("Use field access instead!")]] ::UnityEngine::Sprite*& dyn__currentSprite();
    // Get instance field reference: private UnityEngine.Sprite _completedSprite
    [[deprecated("Use field access instead!")]] ::UnityEngine::Sprite*& dyn__completedSprite();
    // Get instance field reference: private System.Collections.Generic.List`1<Oculus.Interaction.Locomotion.LocomotionEvent/TranslationType> _consumeTranslationEvents
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Oculus::Interaction::Locomotion::LocomotionEvent::TranslationType>*& dyn__consumeTranslationEvents();
    // Get instance field reference: private System.Collections.Generic.List`1<Oculus.Interaction.Locomotion.LocomotionEvent/RotationType> _consumeRotationEvents
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Oculus::Interaction::Locomotion::LocomotionEvent::RotationType>*& dyn__consumeRotationEvents();
    // Get instance field reference: private UnityEngine.Object _locomotionHandler
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__locomotionHandler();
    // Get instance field reference: private Oculus.Interaction.Locomotion.ILocomotionEventHandler LocomotionHandler
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Locomotion::ILocomotionEventHandler*& dyn_LocomotionHandler();
    // Get instance field reference: public UnityEngine.Events.UnityEvent WhenCompleted
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn_WhenCompleted();
    // Get instance field reference: protected System.Boolean _started
    [[deprecated("Use field access instead!")]] bool& dyn__started();
    // Get instance field reference: private System.Int32 _currentProgress
    [[deprecated("Use field access instead!")]] int& dyn__currentProgress();
    // Get instance field reference: private System.Int32 _totalProgress
    [[deprecated("Use field access instead!")]] int& dyn__totalProgress();
    // protected System.Void Awake()
    // Offset: 0x479EED0
    void Awake();
    // protected System.Void Start()
    // Offset: 0x479EF38
    void Start();
    // protected System.Void OnEnable()
    // Offset: 0x479EF84
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x479F10C
    void OnDisable();
    // private System.Void LocomotionEventHandled(Oculus.Interaction.Locomotion.LocomotionEvent arg1, UnityEngine.Pose arg2)
    // Offset: 0x479F20C
    void LocomotionEventHandled(::Oculus::Interaction::Locomotion::LocomotionEvent arg1, ::UnityEngine::Pose arg2);
    // private System.Void Progress()
    // Offset: 0x479F2A8
    void Progress();
    // private System.Void ResetProgress()
    // Offset: 0x479F08C
    void ResetProgress();
    // public System.Void InjectAllLocomotionTutorialProgressTracker(UnityEngine.UI.Image[] dots, UnityEngine.Sprite pendingSprite, UnityEngine.Sprite currentSprite, UnityEngine.Sprite completedSprite, System.Collections.Generic.List`1<Oculus.Interaction.Locomotion.LocomotionEvent/TranslationType> consumeTranslationEvents, System.Collections.Generic.List`1<Oculus.Interaction.Locomotion.LocomotionEvent/RotationType> consumeRotationEvents, Oculus.Interaction.Locomotion.ILocomotionEventHandler locomotionHandler)
    // Offset: 0x479F35C
    void InjectAllLocomotionTutorialProgressTracker(::ArrayW<::UnityEngine::UI::Image*> dots, ::UnityEngine::Sprite* pendingSprite, ::UnityEngine::Sprite* currentSprite, ::UnityEngine::Sprite* completedSprite, ::System::Collections::Generic::List_1<::Oculus::Interaction::Locomotion::LocomotionEvent::TranslationType>* consumeTranslationEvents, ::System::Collections::Generic::List_1<::Oculus::Interaction::Locomotion::LocomotionEvent::RotationType>* consumeRotationEvents, ::Oculus::Interaction::Locomotion::ILocomotionEventHandler* locomotionHandler);
    // public System.Void InjectDots(UnityEngine.UI.Image[] dots)
    // Offset: 0x479F4CC
    void InjectDots(::ArrayW<::UnityEngine::UI::Image*> dots);
    // public System.Void InjectPendingSprite(UnityEngine.Sprite pendingSprite)
    // Offset: 0x479F4D4
    void InjectPendingSprite(::UnityEngine::Sprite* pendingSprite);
    // public System.Void InjectCurrentSprite(UnityEngine.Sprite currentSprite)
    // Offset: 0x479F4DC
    void InjectCurrentSprite(::UnityEngine::Sprite* currentSprite);
    // public System.Void InjectCompletedSprite(UnityEngine.Sprite completedSprite)
    // Offset: 0x479F4E4
    void InjectCompletedSprite(::UnityEngine::Sprite* completedSprite);
    // public System.Void InjectConsumeTranslationEvents(System.Collections.Generic.List`1<Oculus.Interaction.Locomotion.LocomotionEvent/TranslationType> consumeTranslationEvents)
    // Offset: 0x479F4EC
    void InjectConsumeTranslationEvents(::System::Collections::Generic::List_1<::Oculus::Interaction::Locomotion::LocomotionEvent::TranslationType>* consumeTranslationEvents);
    // public System.Void InjectConsumeRotationEvents(System.Collections.Generic.List`1<Oculus.Interaction.Locomotion.LocomotionEvent/RotationType> consumeRotationEvents)
    // Offset: 0x479F4F4
    void InjectConsumeRotationEvents(::System::Collections::Generic::List_1<::Oculus::Interaction::Locomotion::LocomotionEvent::RotationType>* consumeRotationEvents);
    // public System.Void InjectLocomotionHandler(Oculus.Interaction.Locomotion.ILocomotionEventHandler locomotionHandler)
    // Offset: 0x479F3FC
    void InjectLocomotionHandler(::Oculus::Interaction::Locomotion::ILocomotionEventHandler* locomotionHandler);
    // public System.Void .ctor()
    // Offset: 0x479F4FC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LocomotionTutorialProgressTracker* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Samples::LocomotionTutorialProgressTracker::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LocomotionTutorialProgressTracker*, creationType>()));
    }
  }; // Oculus.Interaction.Samples.LocomotionTutorialProgressTracker
  #pragma pack(pop)
  static check_size<sizeof(LocomotionTutorialProgressTracker), 112 + sizeof(int)> __Oculus_Interaction_Samples_LocomotionTutorialProgressTrackerSizeCheck;
  static_assert(sizeof(LocomotionTutorialProgressTracker) == 0x74);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Samples::LocomotionTutorialProgressTracker::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Samples::LocomotionTutorialProgressTracker::*)()>(&Oculus::Interaction::Samples::LocomotionTutorialProgressTracker::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Samples::LocomotionTutorialProgressTracker*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Samples::LocomotionTutorialProgressTracker::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Samples::LocomotionTutorialProgressTracker::*)()>(&Oculus::Interaction::Samples::LocomotionTutorialProgressTracker::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Samples::LocomotionTutorialProgressTracker*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Samples::LocomotionTutorialProgressTracker::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Samples::LocomotionTutorialProgressTracker::*)()>(&Oculus::Interaction::Samples::LocomotionTutorialProgressTracker::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Samples::LocomotionTutorialProgressTracker*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Samples::LocomotionTutorialProgressTracker::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Samples::LocomotionTutorialProgressTracker::*)()>(&Oculus::Interaction::Samples::LocomotionTutorialProgressTracker::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Samples::LocomotionTutorialProgressTracker*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Samples::LocomotionTutorialProgressTracker::LocomotionEventHandled
// Il2CppName: LocomotionEventHandled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Samples::LocomotionTutorialProgressTracker::*)(::Oculus::Interaction::Locomotion::LocomotionEvent, ::UnityEngine::Pose)>(&Oculus::Interaction::Samples::LocomotionTutorialProgressTracker::LocomotionEventHandled)> {
  static const MethodInfo* get() {
    static auto* arg1 = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Locomotion", "LocomotionEvent")->byval_arg;
    static auto* arg2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Samples::LocomotionTutorialProgressTracker*), "LocomotionEventHandled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{arg1, arg2});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Samples::LocomotionTutorialProgressTracker::Progress
// Il2CppName: Progress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Samples::LocomotionTutorialProgressTracker::*)()>(&Oculus::Interaction::Samples::LocomotionTutorialProgressTracker::Progress)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Samples::LocomotionTutorialProgressTracker*), "Progress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Samples::LocomotionTutorialProgressTracker::ResetProgress
// Il2CppName: ResetProgress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Samples::LocomotionTutorialProgressTracker::*)()>(&Oculus::Interaction::Samples::LocomotionTutorialProgressTracker::ResetProgress)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Samples::LocomotionTutorialProgressTracker*), "ResetProgress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Samples::LocomotionTutorialProgressTracker::InjectAllLocomotionTutorialProgressTracker
// Il2CppName: InjectAllLocomotionTutorialProgressTracker
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Samples::LocomotionTutorialProgressTracker::*)(::ArrayW<::UnityEngine::UI::Image*>, ::UnityEngine::Sprite*, ::UnityEngine::Sprite*, ::UnityEngine::Sprite*, ::System::Collections::Generic::List_1<::Oculus::Interaction::Locomotion::LocomotionEvent::TranslationType>*, ::System::Collections::Generic::List_1<::Oculus::Interaction::Locomotion::LocomotionEvent::RotationType>*, ::Oculus::Interaction::Locomotion::ILocomotionEventHandler*)>(&Oculus::Interaction::Samples::LocomotionTutorialProgressTracker::InjectAllLocomotionTutorialProgressTracker)> {
  static const MethodInfo* get() {
    static auto* dots = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine.UI", "Image"), 1)->byval_arg;
    static auto* pendingSprite = &::il2cpp_utils::GetClassFromName("UnityEngine", "Sprite")->byval_arg;
    static auto* currentSprite = &::il2cpp_utils::GetClassFromName("UnityEngine", "Sprite")->byval_arg;
    static auto* completedSprite = &::il2cpp_utils::GetClassFromName("UnityEngine", "Sprite")->byval_arg;
    static auto* consumeTranslationEvents = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Interaction.Locomotion", "LocomotionEvent/TranslationType")})->byval_arg;
    static auto* consumeRotationEvents = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Interaction.Locomotion", "LocomotionEvent/RotationType")})->byval_arg;
    static auto* locomotionHandler = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Locomotion", "ILocomotionEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Samples::LocomotionTutorialProgressTracker*), "InjectAllLocomotionTutorialProgressTracker", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dots, pendingSprite, currentSprite, completedSprite, consumeTranslationEvents, consumeRotationEvents, locomotionHandler});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Samples::LocomotionTutorialProgressTracker::InjectDots
// Il2CppName: InjectDots
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Samples::LocomotionTutorialProgressTracker::*)(::ArrayW<::UnityEngine::UI::Image*>)>(&Oculus::Interaction::Samples::LocomotionTutorialProgressTracker::InjectDots)> {
  static const MethodInfo* get() {
    static auto* dots = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine.UI", "Image"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Samples::LocomotionTutorialProgressTracker*), "InjectDots", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dots});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Samples::LocomotionTutorialProgressTracker::InjectPendingSprite
// Il2CppName: InjectPendingSprite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Samples::LocomotionTutorialProgressTracker::*)(::UnityEngine::Sprite*)>(&Oculus::Interaction::Samples::LocomotionTutorialProgressTracker::InjectPendingSprite)> {
  static const MethodInfo* get() {
    static auto* pendingSprite = &::il2cpp_utils::GetClassFromName("UnityEngine", "Sprite")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Samples::LocomotionTutorialProgressTracker*), "InjectPendingSprite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pendingSprite});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Samples::LocomotionTutorialProgressTracker::InjectCurrentSprite
// Il2CppName: InjectCurrentSprite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Samples::LocomotionTutorialProgressTracker::*)(::UnityEngine::Sprite*)>(&Oculus::Interaction::Samples::LocomotionTutorialProgressTracker::InjectCurrentSprite)> {
  static const MethodInfo* get() {
    static auto* currentSprite = &::il2cpp_utils::GetClassFromName("UnityEngine", "Sprite")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Samples::LocomotionTutorialProgressTracker*), "InjectCurrentSprite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currentSprite});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Samples::LocomotionTutorialProgressTracker::InjectCompletedSprite
// Il2CppName: InjectCompletedSprite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Samples::LocomotionTutorialProgressTracker::*)(::UnityEngine::Sprite*)>(&Oculus::Interaction::Samples::LocomotionTutorialProgressTracker::InjectCompletedSprite)> {
  static const MethodInfo* get() {
    static auto* completedSprite = &::il2cpp_utils::GetClassFromName("UnityEngine", "Sprite")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Samples::LocomotionTutorialProgressTracker*), "InjectCompletedSprite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{completedSprite});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Samples::LocomotionTutorialProgressTracker::InjectConsumeTranslationEvents
// Il2CppName: InjectConsumeTranslationEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Samples::LocomotionTutorialProgressTracker::*)(::System::Collections::Generic::List_1<::Oculus::Interaction::Locomotion::LocomotionEvent::TranslationType>*)>(&Oculus::Interaction::Samples::LocomotionTutorialProgressTracker::InjectConsumeTranslationEvents)> {
  static const MethodInfo* get() {
    static auto* consumeTranslationEvents = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Interaction.Locomotion", "LocomotionEvent/TranslationType")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Samples::LocomotionTutorialProgressTracker*), "InjectConsumeTranslationEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{consumeTranslationEvents});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Samples::LocomotionTutorialProgressTracker::InjectConsumeRotationEvents
// Il2CppName: InjectConsumeRotationEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Samples::LocomotionTutorialProgressTracker::*)(::System::Collections::Generic::List_1<::Oculus::Interaction::Locomotion::LocomotionEvent::RotationType>*)>(&Oculus::Interaction::Samples::LocomotionTutorialProgressTracker::InjectConsumeRotationEvents)> {
  static const MethodInfo* get() {
    static auto* consumeRotationEvents = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Interaction.Locomotion", "LocomotionEvent/RotationType")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Samples::LocomotionTutorialProgressTracker*), "InjectConsumeRotationEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{consumeRotationEvents});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Samples::LocomotionTutorialProgressTracker::InjectLocomotionHandler
// Il2CppName: InjectLocomotionHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Samples::LocomotionTutorialProgressTracker::*)(::Oculus::Interaction::Locomotion::ILocomotionEventHandler*)>(&Oculus::Interaction::Samples::LocomotionTutorialProgressTracker::InjectLocomotionHandler)> {
  static const MethodInfo* get() {
    static auto* locomotionHandler = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Locomotion", "ILocomotionEventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Samples::LocomotionTutorialProgressTracker*), "InjectLocomotionHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{locomotionHandler});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Samples::LocomotionTutorialProgressTracker::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
