// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction::Samples
namespace Oculus::Interaction::Samples {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Object because it is already included!
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: Oculus::Interaction::Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: IHmd
  class IHmd;
}
// Forward declaring namespace: Oculus::Interaction
namespace Oculus::Interaction {
  // Forward declaring type: ActiveStateSelector
  class ActiveStateSelector;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.Samples
namespace Oculus::Interaction::Samples {
  // Forward declaring type: PoseUseSample
  class PoseUseSample;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Samples::PoseUseSample);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Samples::PoseUseSample*, "Oculus.Interaction.Samples", "PoseUseSample");
// Type namespace: Oculus.Interaction.Samples
namespace Oculus::Interaction::Samples {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.Samples.PoseUseSample
  // [TokenAttribute] Offset: FFFFFFFF
  class PoseUseSample : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::Oculus::Interaction::Samples::PoseUseSample::$$c__DisplayClass10_0
    class $$c__DisplayClass10_0;
    public:
    // private UnityEngine.Object _hmd
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Object* hmd;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.Input.IHmd <Hmd>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    ::Oculus::Interaction::Input::IHmd* Hmd;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::IHmd*) == 0x8);
    // private Oculus.Interaction.ActiveStateSelector[] _poses
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::Oculus::Interaction::ActiveStateSelector*> poses;
    // Field size check
    static_assert(sizeof(::ArrayW<::Oculus::Interaction::ActiveStateSelector*>) == 0x8);
    // private UnityEngine.Material[] _onSelectIcons
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<::UnityEngine::Material*> onSelectIcons;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Material*>) == 0x8);
    // private UnityEngine.GameObject _poseActiveVisualPrefab
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::GameObject* poseActiveVisualPrefab;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject[] _poseActiveVisuals
    // Size: 0x8
    // Offset: 0x48
    ::ArrayW<::UnityEngine::GameObject*> poseActiveVisuals;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::GameObject*>) == 0x8);
    public:
    // Get instance field reference: private UnityEngine.Object _hmd
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__hmd();
    // Get instance field reference: private Oculus.Interaction.Input.IHmd <Hmd>k__BackingField
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::IHmd*& dyn_$Hmd$k__BackingField();
    // Get instance field reference: private Oculus.Interaction.ActiveStateSelector[] _poses
    [[deprecated("Use field access instead!")]] ::ArrayW<::Oculus::Interaction::ActiveStateSelector*>& dyn__poses();
    // Get instance field reference: private UnityEngine.Material[] _onSelectIcons
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Material*>& dyn__onSelectIcons();
    // Get instance field reference: private UnityEngine.GameObject _poseActiveVisualPrefab
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn__poseActiveVisualPrefab();
    // Get instance field reference: private UnityEngine.GameObject[] _poseActiveVisuals
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& dyn__poseActiveVisuals();
    // private Oculus.Interaction.Input.IHmd get_Hmd()
    // Offset: 0x47A02B0
    ::Oculus::Interaction::Input::IHmd* get_Hmd();
    // private System.Void set_Hmd(Oculus.Interaction.Input.IHmd value)
    // Offset: 0x47A02B8
    void set_Hmd(::Oculus::Interaction::Input::IHmd* value);
    // protected System.Void Awake()
    // Offset: 0x47A02C0
    void Awake();
    // protected System.Void Start()
    // Offset: 0x47A0318
    void Start();
    // private System.Void ShowVisuals(System.Int32 poseNumber)
    // Offset: 0x47A0650
    void ShowVisuals(int poseNumber);
    // private System.Void HideVisuals(System.Int32 poseNumber)
    // Offset: 0x47A0A64
    void HideVisuals(int poseNumber);
    // public System.Void .ctor()
    // Offset: 0x47A0AAC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PoseUseSample* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Samples::PoseUseSample::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PoseUseSample*, creationType>()));
    }
  }; // Oculus.Interaction.Samples.PoseUseSample
  #pragma pack(pop)
  static check_size<sizeof(PoseUseSample), 72 + sizeof(::ArrayW<::UnityEngine::GameObject*>)> __Oculus_Interaction_Samples_PoseUseSampleSizeCheck;
  static_assert(sizeof(PoseUseSample) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Samples::PoseUseSample::get_Hmd
// Il2CppName: get_Hmd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Input::IHmd* (Oculus::Interaction::Samples::PoseUseSample::*)()>(&Oculus::Interaction::Samples::PoseUseSample::get_Hmd)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Samples::PoseUseSample*), "get_Hmd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Samples::PoseUseSample::set_Hmd
// Il2CppName: set_Hmd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Samples::PoseUseSample::*)(::Oculus::Interaction::Input::IHmd*)>(&Oculus::Interaction::Samples::PoseUseSample::set_Hmd)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHmd")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Samples::PoseUseSample*), "set_Hmd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Samples::PoseUseSample::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Samples::PoseUseSample::*)()>(&Oculus::Interaction::Samples::PoseUseSample::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Samples::PoseUseSample*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Samples::PoseUseSample::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Samples::PoseUseSample::*)()>(&Oculus::Interaction::Samples::PoseUseSample::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Samples::PoseUseSample*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Samples::PoseUseSample::ShowVisuals
// Il2CppName: ShowVisuals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Samples::PoseUseSample::*)(int)>(&Oculus::Interaction::Samples::PoseUseSample::ShowVisuals)> {
  static const MethodInfo* get() {
    static auto* poseNumber = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Samples::PoseUseSample*), "ShowVisuals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{poseNumber});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Samples::PoseUseSample::HideVisuals
// Il2CppName: HideVisuals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Samples::PoseUseSample::*)(int)>(&Oculus::Interaction::Samples::PoseUseSample::HideVisuals)> {
  static const MethodInfo* get() {
    static auto* poseNumber = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Samples::PoseUseSample*), "HideVisuals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{poseNumber});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Samples::PoseUseSample::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
