// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Object because it is already included!
}
// Forward declaring namespace: Oculus::Interaction::Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: IHand
  class IHand;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.Samples.PalmMenu
namespace Oculus::Interaction::Samples::PalmMenu {
  // Forward declaring type: MatchNonDominantPalmWorldSpaceTransform
  class MatchNonDominantPalmWorldSpaceTransform;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Samples::PalmMenu::MatchNonDominantPalmWorldSpaceTransform);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Samples::PalmMenu::MatchNonDominantPalmWorldSpaceTransform*, "Oculus.Interaction.Samples.PalmMenu", "MatchNonDominantPalmWorldSpaceTransform");
// Type namespace: Oculus.Interaction.Samples.PalmMenu
namespace Oculus::Interaction::Samples::PalmMenu {
  // Size: 0x70
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.Samples.PalmMenu.MatchNonDominantPalmWorldSpaceTransform
  // [TokenAttribute] Offset: FFFFFFFF
  class MatchNonDominantPalmWorldSpaceTransform : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.Object _leftHand
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Object* leftHand;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private UnityEngine.Object _rightHand
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Object* rightHand;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private UnityEngine.Vector3 _leftAnchorPoint
    // Size: 0xC
    // Offset: 0x30
    ::UnityEngine::Vector3 leftAnchorPoint;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 _leftAimPoint
    // Size: 0xC
    // Offset: 0x3C
    ::UnityEngine::Vector3 leftAimPoint;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 _rightAnchorPoint
    // Size: 0xC
    // Offset: 0x48
    ::UnityEngine::Vector3 rightAnchorPoint;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 _rightAimPoint
    // Size: 0xC
    // Offset: 0x54
    ::UnityEngine::Vector3 rightAimPoint;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private Oculus.Interaction.Input.IHand <LeftHand>k__BackingField
    // Size: 0x8
    // Offset: 0x60
    ::Oculus::Interaction::Input::IHand* LeftHand;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::IHand*) == 0x8);
    // private Oculus.Interaction.Input.IHand <RightHand>k__BackingField
    // Size: 0x8
    // Offset: 0x68
    ::Oculus::Interaction::Input::IHand* RightHand;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::IHand*) == 0x8);
    public:
    // Get instance field reference: private UnityEngine.Object _leftHand
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__leftHand();
    // Get instance field reference: private UnityEngine.Object _rightHand
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__rightHand();
    // Get instance field reference: private UnityEngine.Vector3 _leftAnchorPoint
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__leftAnchorPoint();
    // Get instance field reference: private UnityEngine.Vector3 _leftAimPoint
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__leftAimPoint();
    // Get instance field reference: private UnityEngine.Vector3 _rightAnchorPoint
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__rightAnchorPoint();
    // Get instance field reference: private UnityEngine.Vector3 _rightAimPoint
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__rightAimPoint();
    // Get instance field reference: private Oculus.Interaction.Input.IHand <LeftHand>k__BackingField
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::IHand*& dyn_$LeftHand$k__BackingField();
    // Get instance field reference: private Oculus.Interaction.Input.IHand <RightHand>k__BackingField
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::IHand*& dyn_$RightHand$k__BackingField();
    // private Oculus.Interaction.Input.IHand get_LeftHand()
    // Offset: 0x47A2828
    ::Oculus::Interaction::Input::IHand* get_LeftHand();
    // private System.Void set_LeftHand(Oculus.Interaction.Input.IHand value)
    // Offset: 0x47A2830
    void set_LeftHand(::Oculus::Interaction::Input::IHand* value);
    // private Oculus.Interaction.Input.IHand get_RightHand()
    // Offset: 0x47A2838
    ::Oculus::Interaction::Input::IHand* get_RightHand();
    // private System.Void set_RightHand(Oculus.Interaction.Input.IHand value)
    // Offset: 0x47A2840
    void set_RightHand(::Oculus::Interaction::Input::IHand* value);
    // protected System.Void Awake()
    // Offset: 0x47A2848
    void Awake();
    // private System.Void Update()
    // Offset: 0x47A28BC
    void Update();
    // public System.Void .ctor()
    // Offset: 0x47A2D8C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MatchNonDominantPalmWorldSpaceTransform* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Samples::PalmMenu::MatchNonDominantPalmWorldSpaceTransform::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MatchNonDominantPalmWorldSpaceTransform*, creationType>()));
    }
  }; // Oculus.Interaction.Samples.PalmMenu.MatchNonDominantPalmWorldSpaceTransform
  #pragma pack(pop)
  static check_size<sizeof(MatchNonDominantPalmWorldSpaceTransform), 104 + sizeof(::Oculus::Interaction::Input::IHand*)> __Oculus_Interaction_Samples_PalmMenu_MatchNonDominantPalmWorldSpaceTransformSizeCheck;
  static_assert(sizeof(MatchNonDominantPalmWorldSpaceTransform) == 0x70);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Samples::PalmMenu::MatchNonDominantPalmWorldSpaceTransform::get_LeftHand
// Il2CppName: get_LeftHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Input::IHand* (Oculus::Interaction::Samples::PalmMenu::MatchNonDominantPalmWorldSpaceTransform::*)()>(&Oculus::Interaction::Samples::PalmMenu::MatchNonDominantPalmWorldSpaceTransform::get_LeftHand)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Samples::PalmMenu::MatchNonDominantPalmWorldSpaceTransform*), "get_LeftHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Samples::PalmMenu::MatchNonDominantPalmWorldSpaceTransform::set_LeftHand
// Il2CppName: set_LeftHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Samples::PalmMenu::MatchNonDominantPalmWorldSpaceTransform::*)(::Oculus::Interaction::Input::IHand*)>(&Oculus::Interaction::Samples::PalmMenu::MatchNonDominantPalmWorldSpaceTransform::set_LeftHand)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Samples::PalmMenu::MatchNonDominantPalmWorldSpaceTransform*), "set_LeftHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Samples::PalmMenu::MatchNonDominantPalmWorldSpaceTransform::get_RightHand
// Il2CppName: get_RightHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Input::IHand* (Oculus::Interaction::Samples::PalmMenu::MatchNonDominantPalmWorldSpaceTransform::*)()>(&Oculus::Interaction::Samples::PalmMenu::MatchNonDominantPalmWorldSpaceTransform::get_RightHand)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Samples::PalmMenu::MatchNonDominantPalmWorldSpaceTransform*), "get_RightHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Samples::PalmMenu::MatchNonDominantPalmWorldSpaceTransform::set_RightHand
// Il2CppName: set_RightHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Samples::PalmMenu::MatchNonDominantPalmWorldSpaceTransform::*)(::Oculus::Interaction::Input::IHand*)>(&Oculus::Interaction::Samples::PalmMenu::MatchNonDominantPalmWorldSpaceTransform::set_RightHand)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Samples::PalmMenu::MatchNonDominantPalmWorldSpaceTransform*), "set_RightHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Samples::PalmMenu::MatchNonDominantPalmWorldSpaceTransform::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Samples::PalmMenu::MatchNonDominantPalmWorldSpaceTransform::*)()>(&Oculus::Interaction::Samples::PalmMenu::MatchNonDominantPalmWorldSpaceTransform::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Samples::PalmMenu::MatchNonDominantPalmWorldSpaceTransform*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Samples::PalmMenu::MatchNonDominantPalmWorldSpaceTransform::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Samples::PalmMenu::MatchNonDominantPalmWorldSpaceTransform::*)()>(&Oculus::Interaction::Samples::PalmMenu::MatchNonDominantPalmWorldSpaceTransform::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Samples::PalmMenu::MatchNonDominantPalmWorldSpaceTransform*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Samples::PalmMenu::MatchNonDominantPalmWorldSpaceTransform::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
