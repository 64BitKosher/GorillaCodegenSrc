// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Oculus.Interaction.IGameObjectFilter
#include "Oculus/Interaction/IGameObjectFilter.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Object because it is already included!
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: Oculus::Interaction::Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: IHand
  class IHand;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.Samples.PalmMenu
namespace Oculus::Interaction::Samples::PalmMenu {
  // Forward declaring type: DominantHandGameObjectFilter
  class DominantHandGameObjectFilter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Samples::PalmMenu::DominantHandGameObjectFilter);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Samples::PalmMenu::DominantHandGameObjectFilter*, "Oculus.Interaction.Samples.PalmMenu", "DominantHandGameObjectFilter");
// Type namespace: Oculus.Interaction.Samples.PalmMenu
namespace Oculus::Interaction::Samples::PalmMenu {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.Samples.PalmMenu.DominantHandGameObjectFilter
  // [TokenAttribute] Offset: FFFFFFFF
  class DominantHandGameObjectFilter : public ::UnityEngine::MonoBehaviour/*, public ::Oculus::Interaction::IGameObjectFilter*/ {
    public:
    public:
    // private UnityEngine.Object _leftHand
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Object* leftHand;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private UnityEngine.GameObject[] _leftHandedGameObjects
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::UnityEngine::GameObject*> leftHandedGameObjects;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::GameObject*>) == 0x8);
    // private UnityEngine.GameObject[] _rightHandedGameObjects
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::UnityEngine::GameObject*> rightHandedGameObjects;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::GameObject*>) == 0x8);
    // private Oculus.Interaction.Input.IHand <LeftHand>k__BackingField
    // Size: 0x8
    // Offset: 0x38
    ::Oculus::Interaction::Input::IHand* LeftHand;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::IHand*) == 0x8);
    // private readonly System.Collections.Generic.HashSet`1<UnityEngine.GameObject> _leftHandedGameObjectSet
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::Generic::HashSet_1<::UnityEngine::GameObject*>* leftHandedGameObjectSet;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<::UnityEngine::GameObject*>*) == 0x8);
    // private readonly System.Collections.Generic.HashSet`1<UnityEngine.GameObject> _rightHandedGameObjectSet
    // Size: 0x8
    // Offset: 0x48
    ::System::Collections::Generic::HashSet_1<::UnityEngine::GameObject*>* rightHandedGameObjectSet;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<::UnityEngine::GameObject*>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::IGameObjectFilter
    operator ::Oculus::Interaction::IGameObjectFilter() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::IGameObjectFilter*>(this);
    }
    // Get instance field reference: private UnityEngine.Object _leftHand
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__leftHand();
    // Get instance field reference: private UnityEngine.GameObject[] _leftHandedGameObjects
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& dyn__leftHandedGameObjects();
    // Get instance field reference: private UnityEngine.GameObject[] _rightHandedGameObjects
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& dyn__rightHandedGameObjects();
    // Get instance field reference: private Oculus.Interaction.Input.IHand <LeftHand>k__BackingField
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::IHand*& dyn_$LeftHand$k__BackingField();
    // Get instance field reference: private readonly System.Collections.Generic.HashSet`1<UnityEngine.GameObject> _leftHandedGameObjectSet
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::UnityEngine::GameObject*>*& dyn__leftHandedGameObjectSet();
    // Get instance field reference: private readonly System.Collections.Generic.HashSet`1<UnityEngine.GameObject> _rightHandedGameObjectSet
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::UnityEngine::GameObject*>*& dyn__rightHandedGameObjectSet();
    // private Oculus.Interaction.Input.IHand get_LeftHand()
    // Offset: 0x47A257C
    ::Oculus::Interaction::Input::IHand* get_LeftHand();
    // private System.Void set_LeftHand(Oculus.Interaction.Input.IHand value)
    // Offset: 0x47A2584
    void set_LeftHand(::Oculus::Interaction::Input::IHand* value);
    // protected System.Void Start()
    // Offset: 0x47A258C
    void Start();
    // public System.Boolean Filter(UnityEngine.GameObject go)
    // Offset: 0x47A26A0
    bool Filter(::UnityEngine::GameObject* go);
    // public System.Void .ctor()
    // Offset: 0x47A277C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DominantHandGameObjectFilter* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Samples::PalmMenu::DominantHandGameObjectFilter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DominantHandGameObjectFilter*, creationType>()));
    }
  }; // Oculus.Interaction.Samples.PalmMenu.DominantHandGameObjectFilter
  #pragma pack(pop)
  static check_size<sizeof(DominantHandGameObjectFilter), 72 + sizeof(::System::Collections::Generic::HashSet_1<::UnityEngine::GameObject*>*)> __Oculus_Interaction_Samples_PalmMenu_DominantHandGameObjectFilterSizeCheck;
  static_assert(sizeof(DominantHandGameObjectFilter) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Samples::PalmMenu::DominantHandGameObjectFilter::get_LeftHand
// Il2CppName: get_LeftHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Input::IHand* (Oculus::Interaction::Samples::PalmMenu::DominantHandGameObjectFilter::*)()>(&Oculus::Interaction::Samples::PalmMenu::DominantHandGameObjectFilter::get_LeftHand)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Samples::PalmMenu::DominantHandGameObjectFilter*), "get_LeftHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Samples::PalmMenu::DominantHandGameObjectFilter::set_LeftHand
// Il2CppName: set_LeftHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Samples::PalmMenu::DominantHandGameObjectFilter::*)(::Oculus::Interaction::Input::IHand*)>(&Oculus::Interaction::Samples::PalmMenu::DominantHandGameObjectFilter::set_LeftHand)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Samples::PalmMenu::DominantHandGameObjectFilter*), "set_LeftHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Samples::PalmMenu::DominantHandGameObjectFilter::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Samples::PalmMenu::DominantHandGameObjectFilter::*)()>(&Oculus::Interaction::Samples::PalmMenu::DominantHandGameObjectFilter::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Samples::PalmMenu::DominantHandGameObjectFilter*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Samples::PalmMenu::DominantHandGameObjectFilter::Filter
// Il2CppName: Filter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Samples::PalmMenu::DominantHandGameObjectFilter::*)(::UnityEngine::GameObject*)>(&Oculus::Interaction::Samples::PalmMenu::DominantHandGameObjectFilter::Filter)> {
  static const MethodInfo* get() {
    static auto* go = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Samples::PalmMenu::DominantHandGameObjectFilter*), "Filter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{go});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Samples::PalmMenu::DominantHandGameObjectFilter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
