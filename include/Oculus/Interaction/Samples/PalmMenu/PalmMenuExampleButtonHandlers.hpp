// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Mesh
  class Mesh;
}
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TMP_Text
  class TMP_Text;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.Samples.PalmMenu
namespace Oculus::Interaction::Samples::PalmMenu {
  // Forward declaring type: PalmMenuExampleButtonHandlers
  class PalmMenuExampleButtonHandlers;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Samples::PalmMenu::PalmMenuExampleButtonHandlers);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Samples::PalmMenu::PalmMenuExampleButtonHandlers*, "Oculus.Interaction.Samples.PalmMenu", "PalmMenuExampleButtonHandlers");
// Type namespace: Oculus.Interaction.Samples.PalmMenu
namespace Oculus::Interaction::Samples::PalmMenu {
  // Size: 0xAC
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.Samples.PalmMenu.PalmMenuExampleButtonHandlers
  // [TokenAttribute] Offset: FFFFFFFF
  class PalmMenuExampleButtonHandlers : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.GameObject _controlledObject
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::GameObject* controlledObject;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.Color[] _colors
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::UnityEngine::Color> colors;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Color>) == 0x8);
    // private UnityEngine.GameObject _rotationEnabledIcon
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::GameObject* rotationEnabledIcon;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject _rotationDisabledIcon
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::GameObject* rotationDisabledIcon;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private System.Single _rotationLerpSpeed
    // Size: 0x4
    // Offset: 0x40
    float rotationLerpSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: rotationLerpSpeed and: rotationDirectionText
    char __padding4[0x4] = {};
    // private TMPro.TMP_Text _rotationDirectionText
    // Size: 0x8
    // Offset: 0x48
    ::TMPro::TMP_Text* rotationDirectionText;
    // Field size check
    static_assert(sizeof(::TMPro::TMP_Text*) == 0x8);
    // private System.String[] _rotationDirectionNames
    // Size: 0x8
    // Offset: 0x50
    ::ArrayW<::StringW> rotationDirectionNames;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // private UnityEngine.GameObject[] _rotationDirectionIcons
    // Size: 0x8
    // Offset: 0x58
    ::ArrayW<::UnityEngine::GameObject*> rotationDirectionIcons;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::GameObject*>) == 0x8);
    // private UnityEngine.Quaternion[] _rotationDirections
    // Size: 0x8
    // Offset: 0x60
    ::ArrayW<::UnityEngine::Quaternion> rotationDirections;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Quaternion>) == 0x8);
    // private TMPro.TMP_Text _elevationText
    // Size: 0x8
    // Offset: 0x68
    ::TMPro::TMP_Text* elevationText;
    // Field size check
    static_assert(sizeof(::TMPro::TMP_Text*) == 0x8);
    // private System.Single _elevationChangeIncrement
    // Size: 0x4
    // Offset: 0x70
    float elevationChangeIncrement;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _elevationChangeLerpSpeed
    // Size: 0x4
    // Offset: 0x74
    float elevationChangeLerpSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private TMPro.TMP_Text _shapeNameText
    // Size: 0x8
    // Offset: 0x78
    ::TMPro::TMP_Text* shapeNameText;
    // Field size check
    static_assert(sizeof(::TMPro::TMP_Text*) == 0x8);
    // private System.String[] _shapeNames
    // Size: 0x8
    // Offset: 0x80
    ::ArrayW<::StringW> shapeNames;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // private UnityEngine.Mesh[] _shapes
    // Size: 0x8
    // Offset: 0x88
    ::ArrayW<::UnityEngine::Mesh*> shapes;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Mesh*>) == 0x8);
    // private System.Int32 _currentColorIdx
    // Size: 0x4
    // Offset: 0x90
    int currentColorIdx;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean _rotationEnabled
    // Size: 0x1
    // Offset: 0x94
    bool rotationEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: rotationEnabled and: currentRotationDirectionIdx
    char __padding16[0x3] = {};
    // private System.Int32 _currentRotationDirectionIdx
    // Size: 0x4
    // Offset: 0x98
    int currentRotationDirectionIdx;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Vector3 _targetPosition
    // Size: 0xC
    // Offset: 0x9C
    ::UnityEngine::Vector3 targetPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Int32 _currentShapeIdx
    // Size: 0x4
    // Offset: 0xA8
    int currentShapeIdx;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: private UnityEngine.GameObject _controlledObject
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn__controlledObject();
    // Get instance field reference: private UnityEngine.Color[] _colors
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Color>& dyn__colors();
    // Get instance field reference: private UnityEngine.GameObject _rotationEnabledIcon
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn__rotationEnabledIcon();
    // Get instance field reference: private UnityEngine.GameObject _rotationDisabledIcon
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn__rotationDisabledIcon();
    // Get instance field reference: private System.Single _rotationLerpSpeed
    [[deprecated("Use field access instead!")]] float& dyn__rotationLerpSpeed();
    // Get instance field reference: private TMPro.TMP_Text _rotationDirectionText
    [[deprecated("Use field access instead!")]] ::TMPro::TMP_Text*& dyn__rotationDirectionText();
    // Get instance field reference: private System.String[] _rotationDirectionNames
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn__rotationDirectionNames();
    // Get instance field reference: private UnityEngine.GameObject[] _rotationDirectionIcons
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& dyn__rotationDirectionIcons();
    // Get instance field reference: private UnityEngine.Quaternion[] _rotationDirections
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Quaternion>& dyn__rotationDirections();
    // Get instance field reference: private TMPro.TMP_Text _elevationText
    [[deprecated("Use field access instead!")]] ::TMPro::TMP_Text*& dyn__elevationText();
    // Get instance field reference: private System.Single _elevationChangeIncrement
    [[deprecated("Use field access instead!")]] float& dyn__elevationChangeIncrement();
    // Get instance field reference: private System.Single _elevationChangeLerpSpeed
    [[deprecated("Use field access instead!")]] float& dyn__elevationChangeLerpSpeed();
    // Get instance field reference: private TMPro.TMP_Text _shapeNameText
    [[deprecated("Use field access instead!")]] ::TMPro::TMP_Text*& dyn__shapeNameText();
    // Get instance field reference: private System.String[] _shapeNames
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn__shapeNames();
    // Get instance field reference: private UnityEngine.Mesh[] _shapes
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Mesh*>& dyn__shapes();
    // Get instance field reference: private System.Int32 _currentColorIdx
    [[deprecated("Use field access instead!")]] int& dyn__currentColorIdx();
    // Get instance field reference: private System.Boolean _rotationEnabled
    [[deprecated("Use field access instead!")]] bool& dyn__rotationEnabled();
    // Get instance field reference: private System.Int32 _currentRotationDirectionIdx
    [[deprecated("Use field access instead!")]] int& dyn__currentRotationDirectionIdx();
    // Get instance field reference: private UnityEngine.Vector3 _targetPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__targetPosition();
    // Get instance field reference: private System.Int32 _currentShapeIdx
    [[deprecated("Use field access instead!")]] int& dyn__currentShapeIdx();
    // private System.Void Start()
    // Offset: 0x47A3244
    void Start();
    // private System.Void Update()
    // Offset: 0x47A36AC
    void Update();
    // public System.Void CycleColor()
    // Offset: 0x47A32E4
    void CycleColor();
    // public System.Void ToggleRotationEnabled()
    // Offset: 0x47A33B0
    void ToggleRotationEnabled();
    // public System.Void CycleRotationDirection()
    // Offset: 0x47A33F8
    void CycleRotationDirection();
    // public System.Void IncrementElevation(System.Boolean up)
    // Offset: 0x47A34D8
    void IncrementElevation(bool up);
    // public System.Void CycleShape(System.Boolean cycleForward)
    // Offset: 0x47A35B0
    void CycleShape(bool cycleForward);
    // public System.Void .ctor()
    // Offset: 0x47A38F8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PalmMenuExampleButtonHandlers* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Samples::PalmMenu::PalmMenuExampleButtonHandlers::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PalmMenuExampleButtonHandlers*, creationType>()));
    }
  }; // Oculus.Interaction.Samples.PalmMenu.PalmMenuExampleButtonHandlers
  #pragma pack(pop)
  static check_size<sizeof(PalmMenuExampleButtonHandlers), 168 + sizeof(int)> __Oculus_Interaction_Samples_PalmMenu_PalmMenuExampleButtonHandlersSizeCheck;
  static_assert(sizeof(PalmMenuExampleButtonHandlers) == 0xAC);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Samples::PalmMenu::PalmMenuExampleButtonHandlers::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Samples::PalmMenu::PalmMenuExampleButtonHandlers::*)()>(&Oculus::Interaction::Samples::PalmMenu::PalmMenuExampleButtonHandlers::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Samples::PalmMenu::PalmMenuExampleButtonHandlers*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Samples::PalmMenu::PalmMenuExampleButtonHandlers::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Samples::PalmMenu::PalmMenuExampleButtonHandlers::*)()>(&Oculus::Interaction::Samples::PalmMenu::PalmMenuExampleButtonHandlers::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Samples::PalmMenu::PalmMenuExampleButtonHandlers*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Samples::PalmMenu::PalmMenuExampleButtonHandlers::CycleColor
// Il2CppName: CycleColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Samples::PalmMenu::PalmMenuExampleButtonHandlers::*)()>(&Oculus::Interaction::Samples::PalmMenu::PalmMenuExampleButtonHandlers::CycleColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Samples::PalmMenu::PalmMenuExampleButtonHandlers*), "CycleColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Samples::PalmMenu::PalmMenuExampleButtonHandlers::ToggleRotationEnabled
// Il2CppName: ToggleRotationEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Samples::PalmMenu::PalmMenuExampleButtonHandlers::*)()>(&Oculus::Interaction::Samples::PalmMenu::PalmMenuExampleButtonHandlers::ToggleRotationEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Samples::PalmMenu::PalmMenuExampleButtonHandlers*), "ToggleRotationEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Samples::PalmMenu::PalmMenuExampleButtonHandlers::CycleRotationDirection
// Il2CppName: CycleRotationDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Samples::PalmMenu::PalmMenuExampleButtonHandlers::*)()>(&Oculus::Interaction::Samples::PalmMenu::PalmMenuExampleButtonHandlers::CycleRotationDirection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Samples::PalmMenu::PalmMenuExampleButtonHandlers*), "CycleRotationDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Samples::PalmMenu::PalmMenuExampleButtonHandlers::IncrementElevation
// Il2CppName: IncrementElevation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Samples::PalmMenu::PalmMenuExampleButtonHandlers::*)(bool)>(&Oculus::Interaction::Samples::PalmMenu::PalmMenuExampleButtonHandlers::IncrementElevation)> {
  static const MethodInfo* get() {
    static auto* up = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Samples::PalmMenu::PalmMenuExampleButtonHandlers*), "IncrementElevation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{up});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Samples::PalmMenu::PalmMenuExampleButtonHandlers::CycleShape
// Il2CppName: CycleShape
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Samples::PalmMenu::PalmMenuExampleButtonHandlers::*)(bool)>(&Oculus::Interaction::Samples::PalmMenu::PalmMenuExampleButtonHandlers::CycleShape)> {
  static const MethodInfo* get() {
    static auto* cycleForward = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Samples::PalmMenu::PalmMenuExampleButtonHandlers*), "CycleShape", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cycleForward});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Samples::PalmMenu::PalmMenuExampleButtonHandlers::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
