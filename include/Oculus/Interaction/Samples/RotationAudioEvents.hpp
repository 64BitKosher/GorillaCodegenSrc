// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Quaternion because it is already included!
  // Skipping declaration: Object because it is already included!
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: UnityEngine::Events
namespace UnityEngine::Events {
  // Forward declaring type: UnityEvent
  class UnityEvent;
}
// Forward declaring namespace: Oculus::Interaction
namespace Oculus::Interaction {
  // Forward declaring type: IInteractableView
  class IInteractableView;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.Samples
namespace Oculus::Interaction::Samples {
  // Forward declaring type: RotationAudioEvents
  class RotationAudioEvents;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Samples::RotationAudioEvents);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Samples::RotationAudioEvents*, "Oculus.Interaction.Samples", "RotationAudioEvents");
// Type namespace: Oculus.Interaction.Samples
namespace Oculus::Interaction::Samples {
  // Size: 0x75
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.Samples.RotationAudioEvents
  // [TokenAttribute] Offset: FFFFFFFF
  class RotationAudioEvents : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::Oculus::Interaction::Samples::RotationAudioEvents::Direction
    struct Direction;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Oculus.Interaction.Samples.RotationAudioEvents/Direction
    // [TokenAttribute] Offset: FFFFFFFF
    struct Direction/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: Direction
      constexpr Direction(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Oculus.Interaction.Samples.RotationAudioEvents/Direction None
      static constexpr const int None = 0;
      // Get static field: static public Oculus.Interaction.Samples.RotationAudioEvents/Direction None
      static ::Oculus::Interaction::Samples::RotationAudioEvents::Direction _get_None();
      // Set static field: static public Oculus.Interaction.Samples.RotationAudioEvents/Direction None
      static void _set_None(::Oculus::Interaction::Samples::RotationAudioEvents::Direction value);
      // static field const value: static public Oculus.Interaction.Samples.RotationAudioEvents/Direction Opening
      static constexpr const int Opening = 1;
      // Get static field: static public Oculus.Interaction.Samples.RotationAudioEvents/Direction Opening
      static ::Oculus::Interaction::Samples::RotationAudioEvents::Direction _get_Opening();
      // Set static field: static public Oculus.Interaction.Samples.RotationAudioEvents/Direction Opening
      static void _set_Opening(::Oculus::Interaction::Samples::RotationAudioEvents::Direction value);
      // static field const value: static public Oculus.Interaction.Samples.RotationAudioEvents/Direction Closing
      static constexpr const int Closing = 2;
      // Get static field: static public Oculus.Interaction.Samples.RotationAudioEvents/Direction Closing
      static ::Oculus::Interaction::Samples::RotationAudioEvents::Direction _get_Closing();
      // Set static field: static public Oculus.Interaction.Samples.RotationAudioEvents/Direction Closing
      static void _set_Closing(::Oculus::Interaction::Samples::RotationAudioEvents::Direction value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Oculus.Interaction.Samples.RotationAudioEvents/Direction
    #pragma pack(pop)
    static check_size<sizeof(RotationAudioEvents::Direction), 0 + sizeof(int)> __Oculus_Interaction_Samples_RotationAudioEvents_DirectionSizeCheck;
    static_assert(sizeof(RotationAudioEvents::Direction) == 0x4);
    public:
    // private UnityEngine.Object _interactableView
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Object* interactableView;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private UnityEngine.Transform _trackedTransform
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Transform* trackedTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform _relativeTo
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Transform* relativeTo;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private System.Single _thresholdDeg
    // Size: 0x4
    // Offset: 0x38
    float thresholdDeg;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _maxRangeDeg
    // Size: 0x4
    // Offset: 0x3C
    float maxRangeDeg;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Events.UnityEvent _whenRotationStarted
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Events::UnityEvent* whenRotationStarted;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    // private UnityEngine.Events.UnityEvent _whenRotationEnded
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Events::UnityEvent* whenRotationEnded;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    // private UnityEngine.Events.UnityEvent _whenRotatedOpen
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::Events::UnityEvent* whenRotatedOpen;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    // private UnityEngine.Events.UnityEvent _whenRotatedClosed
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::Events::UnityEvent* whenRotatedClosed;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    // private Oculus.Interaction.IInteractableView InteractableView
    // Size: 0x8
    // Offset: 0x60
    ::Oculus::Interaction::IInteractableView* InteractableView;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::IInteractableView*) == 0x8);
    // private System.Single _baseDelta
    // Size: 0x4
    // Offset: 0x68
    float baseDelta;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _isRotating
    // Size: 0x1
    // Offset: 0x6C
    bool isRotating;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isRotating and: lastCrossedDirection
    char __padding11[0x3] = {};
    // private Oculus.Interaction.Samples.RotationAudioEvents/Direction _lastCrossedDirection
    // Size: 0x4
    // Offset: 0x70
    ::Oculus::Interaction::Samples::RotationAudioEvents::Direction lastCrossedDirection;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Samples::RotationAudioEvents::Direction) == 0x4);
    // protected System.Boolean _started
    // Size: 0x1
    // Offset: 0x74
    bool started;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private UnityEngine.Object _interactableView
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__interactableView();
    // Get instance field reference: private UnityEngine.Transform _trackedTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__trackedTransform();
    // Get instance field reference: private UnityEngine.Transform _relativeTo
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__relativeTo();
    // Get instance field reference: private System.Single _thresholdDeg
    [[deprecated("Use field access instead!")]] float& dyn__thresholdDeg();
    // Get instance field reference: private System.Single _maxRangeDeg
    [[deprecated("Use field access instead!")]] float& dyn__maxRangeDeg();
    // Get instance field reference: private UnityEngine.Events.UnityEvent _whenRotationStarted
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn__whenRotationStarted();
    // Get instance field reference: private UnityEngine.Events.UnityEvent _whenRotationEnded
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn__whenRotationEnded();
    // Get instance field reference: private UnityEngine.Events.UnityEvent _whenRotatedOpen
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn__whenRotatedOpen();
    // Get instance field reference: private UnityEngine.Events.UnityEvent _whenRotatedClosed
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn__whenRotatedClosed();
    // Get instance field reference: private Oculus.Interaction.IInteractableView InteractableView
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::IInteractableView*& dyn_InteractableView();
    // Get instance field reference: private System.Single _baseDelta
    [[deprecated("Use field access instead!")]] float& dyn__baseDelta();
    // Get instance field reference: private System.Boolean _isRotating
    [[deprecated("Use field access instead!")]] bool& dyn__isRotating();
    // Get instance field reference: private Oculus.Interaction.Samples.RotationAudioEvents/Direction _lastCrossedDirection
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Samples::RotationAudioEvents::Direction& dyn__lastCrossedDirection();
    // Get instance field reference: protected System.Boolean _started
    [[deprecated("Use field access instead!")]] bool& dyn__started();
    // public UnityEngine.Events.UnityEvent get_WhenRotationStarted()
    // Offset: 0x47A0E38
    ::UnityEngine::Events::UnityEvent* get_WhenRotationStarted();
    // public UnityEngine.Events.UnityEvent get_WhenRotationEnded()
    // Offset: 0x47A0E40
    ::UnityEngine::Events::UnityEvent* get_WhenRotationEnded();
    // public UnityEngine.Events.UnityEvent get_WhenRotatedOpen()
    // Offset: 0x47A0E48
    ::UnityEngine::Events::UnityEvent* get_WhenRotatedOpen();
    // public UnityEngine.Events.UnityEvent get_WhenRotatedClosed()
    // Offset: 0x47A0E50
    ::UnityEngine::Events::UnityEvent* get_WhenRotatedClosed();
    // private UnityEngine.Transform get_TrackedTransform()
    // Offset: 0x47A0E58
    ::UnityEngine::Transform* get_TrackedTransform();
    // private System.Void RotationStarted()
    // Offset: 0x47A0ED8
    void RotationStarted();
    // private System.Void RotationEnded()
    // Offset: 0x47A0FA4
    void RotationEnded();
    // private UnityEngine.Quaternion GetCurrentRotation()
    // Offset: 0x47A0FC0
    ::UnityEngine::Quaternion GetCurrentRotation();
    // private System.Single GetTotalDelta()
    // Offset: 0x47A0F04
    float GetTotalDelta();
    // private System.Void UpdateRotation()
    // Offset: 0x47A1090
    void UpdateRotation();
    // protected System.Void Awake()
    // Offset: 0x47A1148
    void Awake();
    // protected System.Void Start()
    // Offset: 0x47A11B0
    void Start();
    // protected System.Void Update()
    // Offset: 0x47A11E8
    void Update();
    // public System.Void .ctor()
    // Offset: 0x47A12DC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RotationAudioEvents* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Samples::RotationAudioEvents::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RotationAudioEvents*, creationType>()));
    }
  }; // Oculus.Interaction.Samples.RotationAudioEvents
  #pragma pack(pop)
  static check_size<sizeof(RotationAudioEvents), 116 + sizeof(bool)> __Oculus_Interaction_Samples_RotationAudioEventsSizeCheck;
  static_assert(sizeof(RotationAudioEvents) == 0x75);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Samples::RotationAudioEvents::Direction, "Oculus.Interaction.Samples", "RotationAudioEvents/Direction");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Samples::RotationAudioEvents::get_WhenRotationStarted
// Il2CppName: get_WhenRotationStarted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Events::UnityEvent* (Oculus::Interaction::Samples::RotationAudioEvents::*)()>(&Oculus::Interaction::Samples::RotationAudioEvents::get_WhenRotationStarted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Samples::RotationAudioEvents*), "get_WhenRotationStarted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Samples::RotationAudioEvents::get_WhenRotationEnded
// Il2CppName: get_WhenRotationEnded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Events::UnityEvent* (Oculus::Interaction::Samples::RotationAudioEvents::*)()>(&Oculus::Interaction::Samples::RotationAudioEvents::get_WhenRotationEnded)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Samples::RotationAudioEvents*), "get_WhenRotationEnded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Samples::RotationAudioEvents::get_WhenRotatedOpen
// Il2CppName: get_WhenRotatedOpen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Events::UnityEvent* (Oculus::Interaction::Samples::RotationAudioEvents::*)()>(&Oculus::Interaction::Samples::RotationAudioEvents::get_WhenRotatedOpen)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Samples::RotationAudioEvents*), "get_WhenRotatedOpen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Samples::RotationAudioEvents::get_WhenRotatedClosed
// Il2CppName: get_WhenRotatedClosed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Events::UnityEvent* (Oculus::Interaction::Samples::RotationAudioEvents::*)()>(&Oculus::Interaction::Samples::RotationAudioEvents::get_WhenRotatedClosed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Samples::RotationAudioEvents*), "get_WhenRotatedClosed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Samples::RotationAudioEvents::get_TrackedTransform
// Il2CppName: get_TrackedTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (Oculus::Interaction::Samples::RotationAudioEvents::*)()>(&Oculus::Interaction::Samples::RotationAudioEvents::get_TrackedTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Samples::RotationAudioEvents*), "get_TrackedTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Samples::RotationAudioEvents::RotationStarted
// Il2CppName: RotationStarted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Samples::RotationAudioEvents::*)()>(&Oculus::Interaction::Samples::RotationAudioEvents::RotationStarted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Samples::RotationAudioEvents*), "RotationStarted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Samples::RotationAudioEvents::RotationEnded
// Il2CppName: RotationEnded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Samples::RotationAudioEvents::*)()>(&Oculus::Interaction::Samples::RotationAudioEvents::RotationEnded)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Samples::RotationAudioEvents*), "RotationEnded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Samples::RotationAudioEvents::GetCurrentRotation
// Il2CppName: GetCurrentRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (Oculus::Interaction::Samples::RotationAudioEvents::*)()>(&Oculus::Interaction::Samples::RotationAudioEvents::GetCurrentRotation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Samples::RotationAudioEvents*), "GetCurrentRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Samples::RotationAudioEvents::GetTotalDelta
// Il2CppName: GetTotalDelta
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::Samples::RotationAudioEvents::*)()>(&Oculus::Interaction::Samples::RotationAudioEvents::GetTotalDelta)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Samples::RotationAudioEvents*), "GetTotalDelta", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Samples::RotationAudioEvents::UpdateRotation
// Il2CppName: UpdateRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Samples::RotationAudioEvents::*)()>(&Oculus::Interaction::Samples::RotationAudioEvents::UpdateRotation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Samples::RotationAudioEvents*), "UpdateRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Samples::RotationAudioEvents::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Samples::RotationAudioEvents::*)()>(&Oculus::Interaction::Samples::RotationAudioEvents::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Samples::RotationAudioEvents*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Samples::RotationAudioEvents::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Samples::RotationAudioEvents::*)()>(&Oculus::Interaction::Samples::RotationAudioEvents::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Samples::RotationAudioEvents*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Samples::RotationAudioEvents::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Samples::RotationAudioEvents::*)()>(&Oculus::Interaction::Samples::RotationAudioEvents::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Samples::RotationAudioEvents*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Samples::RotationAudioEvents::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
