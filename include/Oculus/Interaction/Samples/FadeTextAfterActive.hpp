// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TextMeshPro
  class TextMeshPro;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.Samples
namespace Oculus::Interaction::Samples {
  // Forward declaring type: FadeTextAfterActive
  class FadeTextAfterActive;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Samples::FadeTextAfterActive);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Samples::FadeTextAfterActive*, "Oculus.Interaction.Samples", "FadeTextAfterActive");
// Type namespace: Oculus.Interaction.Samples
namespace Oculus::Interaction::Samples {
  // Size: 0x34
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.Samples.FadeTextAfterActive
  // [TokenAttribute] Offset: FFFFFFFF
  class FadeTextAfterActive : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private System.Single _fadeOutTime
    // Size: 0x4
    // Offset: 0x20
    float fadeOutTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: fadeOutTime and: text
    char __padding0[0x4] = {};
    // private TMPro.TextMeshPro _text
    // Size: 0x8
    // Offset: 0x28
    ::TMPro::TextMeshPro* text;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshPro*) == 0x8);
    // private System.Single _timeLeft
    // Size: 0x4
    // Offset: 0x30
    float timeLeft;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: private System.Single _fadeOutTime
    [[deprecated("Use field access instead!")]] float& dyn__fadeOutTime();
    // Get instance field reference: private TMPro.TextMeshPro _text
    [[deprecated("Use field access instead!")]] ::TMPro::TextMeshPro*& dyn__text();
    // Get instance field reference: private System.Single _timeLeft
    [[deprecated("Use field access instead!")]] float& dyn__timeLeft();
    // protected System.Void OnEnable()
    // Offset: 0x479E948
    void OnEnable();
    // protected System.Void Update()
    // Offset: 0x479E9F8
    void Update();
    // public System.Void .ctor()
    // Offset: 0x479EB08
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FadeTextAfterActive* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Samples::FadeTextAfterActive::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FadeTextAfterActive*, creationType>()));
    }
  }; // Oculus.Interaction.Samples.FadeTextAfterActive
  #pragma pack(pop)
  static check_size<sizeof(FadeTextAfterActive), 48 + sizeof(float)> __Oculus_Interaction_Samples_FadeTextAfterActiveSizeCheck;
  static_assert(sizeof(FadeTextAfterActive) == 0x34);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Samples::FadeTextAfterActive::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Samples::FadeTextAfterActive::*)()>(&Oculus::Interaction::Samples::FadeTextAfterActive::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Samples::FadeTextAfterActive*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Samples::FadeTextAfterActive::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Samples::FadeTextAfterActive::*)()>(&Oculus::Interaction::Samples::FadeTextAfterActive::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Samples::FadeTextAfterActive*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Samples::FadeTextAfterActive::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
