// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Renderer
  class Renderer;
  // Forward declaring type: Material
  class Material;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.Samples
namespace Oculus::Interaction::Samples {
  // Forward declaring type: ColorChanger
  class ColorChanger;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Samples::ColorChanger);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Samples::ColorChanger*, "Oculus.Interaction.Samples", "ColorChanger");
// Type namespace: Oculus.Interaction.Samples
namespace Oculus::Interaction::Samples {
  // Size: 0x44
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.Samples.ColorChanger
  // [TokenAttribute] Offset: FFFFFFFF
  class ColorChanger : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.Renderer _target
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Renderer* target;
    // Field size check
    static_assert(sizeof(::UnityEngine::Renderer*) == 0x8);
    // private UnityEngine.Material _targetMaterial
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Material* targetMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.Color _savedColor
    // Size: 0x10
    // Offset: 0x30
    ::UnityEngine::Color savedColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private System.Single _lastHue
    // Size: 0x4
    // Offset: 0x40
    float lastHue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: private UnityEngine.Renderer _target
    [[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& dyn__target();
    // Get instance field reference: private UnityEngine.Material _targetMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn__targetMaterial();
    // Get instance field reference: private UnityEngine.Color _savedColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__savedColor();
    // Get instance field reference: private System.Single _lastHue
    [[deprecated("Use field access instead!")]] float& dyn__lastHue();
    // public System.Void NextColor()
    // Offset: 0x479E614
    void NextColor();
    // public System.Void Save()
    // Offset: 0x479E668
    void Save();
    // public System.Void Revert()
    // Offset: 0x479E694
    void Revert();
    // protected System.Void Start()
    // Offset: 0x479E6BC
    void Start();
    // private System.Void OnDestroy()
    // Offset: 0x479E714
    void OnDestroy();
    // public System.Void .ctor()
    // Offset: 0x479E770
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ColorChanger* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Samples::ColorChanger::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ColorChanger*, creationType>()));
    }
  }; // Oculus.Interaction.Samples.ColorChanger
  #pragma pack(pop)
  static check_size<sizeof(ColorChanger), 64 + sizeof(float)> __Oculus_Interaction_Samples_ColorChangerSizeCheck;
  static_assert(sizeof(ColorChanger) == 0x44);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Samples::ColorChanger::NextColor
// Il2CppName: NextColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Samples::ColorChanger::*)()>(&Oculus::Interaction::Samples::ColorChanger::NextColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Samples::ColorChanger*), "NextColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Samples::ColorChanger::Save
// Il2CppName: Save
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Samples::ColorChanger::*)()>(&Oculus::Interaction::Samples::ColorChanger::Save)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Samples::ColorChanger*), "Save", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Samples::ColorChanger::Revert
// Il2CppName: Revert
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Samples::ColorChanger::*)()>(&Oculus::Interaction::Samples::ColorChanger::Revert)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Samples::ColorChanger*), "Revert", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Samples::ColorChanger::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Samples::ColorChanger::*)()>(&Oculus::Interaction::Samples::ColorChanger::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Samples::ColorChanger*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Samples::ColorChanger::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Samples::ColorChanger::*)()>(&Oculus::Interaction::Samples::ColorChanger::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Samples::ColorChanger*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Samples::ColorChanger::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
