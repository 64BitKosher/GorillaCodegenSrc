// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction::Samples
namespace Oculus::Interaction::Samples {
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.Samples
namespace Oculus::Interaction::Samples {
  // Forward declaring type: SceneLoader
  class SceneLoader;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Samples::SceneLoader);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Samples::SceneLoader*, "Oculus.Interaction.Samples", "SceneLoader");
// Type namespace: Oculus.Interaction.Samples
namespace Oculus::Interaction::Samples {
  // Size: 0x3C
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.Samples.SceneLoader
  // [TokenAttribute] Offset: FFFFFFFF
  class SceneLoader : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::Oculus::Interaction::Samples::SceneLoader::$$c
    class $$c;
    // Nested type: ::Oculus::Interaction::Samples::SceneLoader::$LoadSceneAsync$d__6
    class $LoadSceneAsync$d__6;
    public:
    // private System.Boolean _loading
    // Size: 0x1
    // Offset: 0x20
    bool loading;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: loading and: WhenLoadingScene
    char __padding0[0x7] = {};
    // public System.Action`1<System.String> WhenLoadingScene
    // Size: 0x8
    // Offset: 0x28
    ::System::Action_1<::StringW>* WhenLoadingScene;
    // Field size check
    static_assert(sizeof(::System::Action_1<::StringW>*) == 0x8);
    // public System.Action`1<System.String> WhenSceneLoaded
    // Size: 0x8
    // Offset: 0x30
    ::System::Action_1<::StringW>* WhenSceneLoaded;
    // Field size check
    static_assert(sizeof(::System::Action_1<::StringW>*) == 0x8);
    // private System.Int32 _waitingCount
    // Size: 0x4
    // Offset: 0x38
    int waitingCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: private System.Boolean _loading
    [[deprecated("Use field access instead!")]] bool& dyn__loading();
    // Get instance field reference: public System.Action`1<System.String> WhenLoadingScene
    [[deprecated("Use field access instead!")]] ::System::Action_1<::StringW>*& dyn_WhenLoadingScene();
    // Get instance field reference: public System.Action`1<System.String> WhenSceneLoaded
    [[deprecated("Use field access instead!")]] ::System::Action_1<::StringW>*& dyn_WhenSceneLoaded();
    // Get instance field reference: private System.Int32 _waitingCount
    [[deprecated("Use field access instead!")]] int& dyn__waitingCount();
    // public System.Void Load(System.String sceneName)
    // Offset: 0x47A1AF0
    void Load(::StringW sceneName);
    // public System.Void HandleReadyToLoad(System.String sceneName)
    // Offset: 0x47A1B80
    void HandleReadyToLoad(::StringW sceneName);
    // private System.Collections.IEnumerator LoadSceneAsync(System.String sceneName)
    // Offset: 0x47A1BBC
    ::System::Collections::IEnumerator* LoadSceneAsync(::StringW sceneName);
    // public System.Void .ctor()
    // Offset: 0x47A1C6C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SceneLoader* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Samples::SceneLoader::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SceneLoader*, creationType>()));
    }
  }; // Oculus.Interaction.Samples.SceneLoader
  #pragma pack(pop)
  static check_size<sizeof(SceneLoader), 56 + sizeof(int)> __Oculus_Interaction_Samples_SceneLoaderSizeCheck;
  static_assert(sizeof(SceneLoader) == 0x3C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Samples::SceneLoader::Load
// Il2CppName: Load
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Samples::SceneLoader::*)(::StringW)>(&Oculus::Interaction::Samples::SceneLoader::Load)> {
  static const MethodInfo* get() {
    static auto* sceneName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Samples::SceneLoader*), "Load", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sceneName});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Samples::SceneLoader::HandleReadyToLoad
// Il2CppName: HandleReadyToLoad
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Samples::SceneLoader::*)(::StringW)>(&Oculus::Interaction::Samples::SceneLoader::HandleReadyToLoad)> {
  static const MethodInfo* get() {
    static auto* sceneName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Samples::SceneLoader*), "HandleReadyToLoad", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sceneName});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Samples::SceneLoader::LoadSceneAsync
// Il2CppName: LoadSceneAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (Oculus::Interaction::Samples::SceneLoader::*)(::StringW)>(&Oculus::Interaction::Samples::SceneLoader::LoadSceneAsync)> {
  static const MethodInfo* get() {
    static auto* sceneName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Samples::SceneLoader*), "LoadSceneAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sceneName});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Samples::SceneLoader::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
