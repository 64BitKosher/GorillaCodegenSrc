// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Pose
  struct Pose;
  // Skipping declaration: Vector3 because it is already included!
  // Forward declaring type: Collider
  class Collider;
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: ConicalFrustum
  class ConicalFrustum;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::ConicalFrustum);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::ConicalFrustum*, "Oculus.Interaction", "ConicalFrustum");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.ConicalFrustum
  // [TokenAttribute] Offset: FFFFFFFF
  class ConicalFrustum : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private System.Single _minLength
    // Size: 0x4
    // Offset: 0x20
    float minLength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _maxLength
    // Size: 0x4
    // Offset: 0x24
    float maxLength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _radiusStart
    // Size: 0x4
    // Offset: 0x28
    float radiusStart;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _apertureDegrees
    // Size: 0x4
    // Offset: 0x2C
    float apertureDegrees;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: private System.Single _minLength
    [[deprecated("Use field access instead!")]] float& dyn__minLength();
    // Get instance field reference: private System.Single _maxLength
    [[deprecated("Use field access instead!")]] float& dyn__maxLength();
    // Get instance field reference: private System.Single _radiusStart
    [[deprecated("Use field access instead!")]] float& dyn__radiusStart();
    // Get instance field reference: private System.Single _apertureDegrees
    [[deprecated("Use field access instead!")]] float& dyn__apertureDegrees();
    // public UnityEngine.Pose get_Pose()
    // Offset: 0x47CF5E0
    ::UnityEngine::Pose get_Pose();
    // public System.Single get_MinLength()
    // Offset: 0x47CF620
    float get_MinLength();
    // public System.Void set_MinLength(System.Single value)
    // Offset: 0x47CF628
    void set_MinLength(float value);
    // public System.Single get_MaxLength()
    // Offset: 0x47CF630
    float get_MaxLength();
    // public System.Void set_MaxLength(System.Single value)
    // Offset: 0x47CF638
    void set_MaxLength(float value);
    // public System.Single get_RadiusStart()
    // Offset: 0x47CF640
    float get_RadiusStart();
    // public System.Void set_RadiusStart(System.Single value)
    // Offset: 0x47CF648
    void set_RadiusStart(float value);
    // public System.Single get_ApertureDegrees()
    // Offset: 0x47CF650
    float get_ApertureDegrees();
    // public System.Void set_ApertureDegrees(System.Single value)
    // Offset: 0x47CF658
    void set_ApertureDegrees(float value);
    // public UnityEngine.Vector3 get_StartPoint()
    // Offset: 0x47CF660
    ::UnityEngine::Vector3 get_StartPoint();
    // public UnityEngine.Vector3 get_EndPoint()
    // Offset: 0x47CF6E8
    ::UnityEngine::Vector3 get_EndPoint();
    // public UnityEngine.Vector3 get_Direction()
    // Offset: 0x47CF6C8
    ::UnityEngine::Vector3 get_Direction();
    // public System.Boolean IsPointInConeFrustum(UnityEngine.Vector3 point)
    // Offset: 0x47CF750
    bool IsPointInConeFrustum(::UnityEngine::Vector3 point);
    // public System.Single ConeFrustumRadiusAtLength(System.Single length)
    // Offset: 0x47CFA04
    float ConeFrustumRadiusAtLength(float length);
    // public System.Boolean HitsCollider(UnityEngine.Collider collider, out System.Single score, out UnityEngine.Vector3 point)
    // Offset: 0x47CFA64
    bool HitsCollider(::UnityEngine::Collider* collider, ByRef<float> score, ByRef<::UnityEngine::Vector3> point);
    // public UnityEngine.Vector3 NearestColliderHit(UnityEngine.Collider collider, out System.Single score)
    // Offset: 0x47CFE94
    ::UnityEngine::Vector3 NearestColliderHit(::UnityEngine::Collider* collider, ByRef<float> score);
    // public System.Void .ctor()
    // Offset: 0x47D02B4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ConicalFrustum* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::ConicalFrustum::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ConicalFrustum*, creationType>()));
    }
  }; // Oculus.Interaction.ConicalFrustum
  #pragma pack(pop)
  static check_size<sizeof(ConicalFrustum), 44 + sizeof(float)> __Oculus_Interaction_ConicalFrustumSizeCheck;
  static_assert(sizeof(ConicalFrustum) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::ConicalFrustum::get_Pose
// Il2CppName: get_Pose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Pose (Oculus::Interaction::ConicalFrustum::*)()>(&Oculus::Interaction::ConicalFrustum::get_Pose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ConicalFrustum*), "get_Pose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ConicalFrustum::get_MinLength
// Il2CppName: get_MinLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::ConicalFrustum::*)()>(&Oculus::Interaction::ConicalFrustum::get_MinLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ConicalFrustum*), "get_MinLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ConicalFrustum::set_MinLength
// Il2CppName: set_MinLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ConicalFrustum::*)(float)>(&Oculus::Interaction::ConicalFrustum::set_MinLength)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ConicalFrustum*), "set_MinLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ConicalFrustum::get_MaxLength
// Il2CppName: get_MaxLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::ConicalFrustum::*)()>(&Oculus::Interaction::ConicalFrustum::get_MaxLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ConicalFrustum*), "get_MaxLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ConicalFrustum::set_MaxLength
// Il2CppName: set_MaxLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ConicalFrustum::*)(float)>(&Oculus::Interaction::ConicalFrustum::set_MaxLength)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ConicalFrustum*), "set_MaxLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ConicalFrustum::get_RadiusStart
// Il2CppName: get_RadiusStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::ConicalFrustum::*)()>(&Oculus::Interaction::ConicalFrustum::get_RadiusStart)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ConicalFrustum*), "get_RadiusStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ConicalFrustum::set_RadiusStart
// Il2CppName: set_RadiusStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ConicalFrustum::*)(float)>(&Oculus::Interaction::ConicalFrustum::set_RadiusStart)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ConicalFrustum*), "set_RadiusStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ConicalFrustum::get_ApertureDegrees
// Il2CppName: get_ApertureDegrees
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::ConicalFrustum::*)()>(&Oculus::Interaction::ConicalFrustum::get_ApertureDegrees)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ConicalFrustum*), "get_ApertureDegrees", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ConicalFrustum::set_ApertureDegrees
// Il2CppName: set_ApertureDegrees
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ConicalFrustum::*)(float)>(&Oculus::Interaction::ConicalFrustum::set_ApertureDegrees)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ConicalFrustum*), "set_ApertureDegrees", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ConicalFrustum::get_StartPoint
// Il2CppName: get_StartPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Oculus::Interaction::ConicalFrustum::*)()>(&Oculus::Interaction::ConicalFrustum::get_StartPoint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ConicalFrustum*), "get_StartPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ConicalFrustum::get_EndPoint
// Il2CppName: get_EndPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Oculus::Interaction::ConicalFrustum::*)()>(&Oculus::Interaction::ConicalFrustum::get_EndPoint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ConicalFrustum*), "get_EndPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ConicalFrustum::get_Direction
// Il2CppName: get_Direction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Oculus::Interaction::ConicalFrustum::*)()>(&Oculus::Interaction::ConicalFrustum::get_Direction)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ConicalFrustum*), "get_Direction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ConicalFrustum::IsPointInConeFrustum
// Il2CppName: IsPointInConeFrustum
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::ConicalFrustum::*)(::UnityEngine::Vector3)>(&Oculus::Interaction::ConicalFrustum::IsPointInConeFrustum)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ConicalFrustum*), "IsPointInConeFrustum", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ConicalFrustum::ConeFrustumRadiusAtLength
// Il2CppName: ConeFrustumRadiusAtLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::ConicalFrustum::*)(float)>(&Oculus::Interaction::ConicalFrustum::ConeFrustumRadiusAtLength)> {
  static const MethodInfo* get() {
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ConicalFrustum*), "ConeFrustumRadiusAtLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{length});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ConicalFrustum::HitsCollider
// Il2CppName: HitsCollider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::ConicalFrustum::*)(::UnityEngine::Collider*, ByRef<float>, ByRef<::UnityEngine::Vector3>)>(&Oculus::Interaction::ConicalFrustum::HitsCollider)> {
  static const MethodInfo* get() {
    static auto* collider = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    static auto* score = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ConicalFrustum*), "HitsCollider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{collider, score, point});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ConicalFrustum::NearestColliderHit
// Il2CppName: NearestColliderHit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Oculus::Interaction::ConicalFrustum::*)(::UnityEngine::Collider*, ByRef<float>)>(&Oculus::Interaction::ConicalFrustum::NearestColliderHit)> {
  static const MethodInfo* get() {
    static auto* collider = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    static auto* score = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ConicalFrustum*), "NearestColliderHit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{collider, score});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ConicalFrustum::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
