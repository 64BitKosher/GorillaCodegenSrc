// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Object because it is already included!
  // Forward declaring type: Renderer
  class Renderer;
  // Forward declaring type: Material
  class Material;
}
// Forward declaring namespace: Oculus::Interaction
namespace Oculus::Interaction {
  // Forward declaring type: ISelector
  class ISelector;
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: SelectorDebugVisual
  class SelectorDebugVisual;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::SelectorDebugVisual);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::SelectorDebugVisual*, "Oculus.Interaction", "SelectorDebugVisual");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x62
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.SelectorDebugVisual
  // [TokenAttribute] Offset: FFFFFFFF
  class SelectorDebugVisual : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.Object _selector
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Object* selector;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private UnityEngine.Renderer _renderer
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Renderer* renderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::Renderer*) == 0x8);
    // private UnityEngine.Color _normalColor
    // Size: 0x10
    // Offset: 0x30
    ::UnityEngine::Color normalColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color _selectColor
    // Size: 0x10
    // Offset: 0x40
    ::UnityEngine::Color selectColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private Oculus.Interaction.ISelector Selector
    // Size: 0x8
    // Offset: 0x50
    ::Oculus::Interaction::ISelector* Selector;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::ISelector*) == 0x8);
    // private UnityEngine.Material _material
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::Material* material;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private System.Boolean _selected
    // Size: 0x1
    // Offset: 0x60
    bool selected;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean _started
    // Size: 0x1
    // Offset: 0x61
    bool started;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private UnityEngine.Object _selector
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__selector();
    // Get instance field reference: private UnityEngine.Renderer _renderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& dyn__renderer();
    // Get instance field reference: private UnityEngine.Color _normalColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__normalColor();
    // Get instance field reference: private UnityEngine.Color _selectColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__selectColor();
    // Get instance field reference: private Oculus.Interaction.ISelector Selector
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::ISelector*& dyn_Selector();
    // Get instance field reference: private UnityEngine.Material _material
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn__material();
    // Get instance field reference: private System.Boolean _selected
    [[deprecated("Use field access instead!")]] bool& dyn__selected();
    // Get instance field reference: protected System.Boolean _started
    [[deprecated("Use field access instead!")]] bool& dyn__started();
    // public UnityEngine.Color get_NormalColor()
    // Offset: 0x47C94F4
    ::UnityEngine::Color get_NormalColor();
    // public System.Void set_NormalColor(UnityEngine.Color value)
    // Offset: 0x47C9500
    void set_NormalColor(::UnityEngine::Color value);
    // public UnityEngine.Color get_SelectColor()
    // Offset: 0x47C950C
    ::UnityEngine::Color get_SelectColor();
    // public System.Void set_SelectColor(UnityEngine.Color value)
    // Offset: 0x47C9518
    void set_SelectColor(::UnityEngine::Color value);
    // protected System.Void Awake()
    // Offset: 0x47C9524
    void Awake();
    // protected System.Void Start()
    // Offset: 0x47C958C
    void Start();
    // protected System.Void OnEnable()
    // Offset: 0x47C9604
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x47C97B0
    void OnDisable();
    // private System.Void OnDestroy()
    // Offset: 0x47C99A4
    void OnDestroy();
    // private System.Void HandleSelected()
    // Offset: 0x47C9A00
    void HandleSelected();
    // private System.Void HandleUnselected()
    // Offset: 0x47C9968
    void HandleUnselected();
    // public System.Void InjectAllSelectorDebugVisual(Oculus.Interaction.ISelector selector, UnityEngine.Renderer renderer)
    // Offset: 0x47C9A40
    void InjectAllSelectorDebugVisual(::Oculus::Interaction::ISelector* selector, ::UnityEngine::Renderer* renderer);
    // public System.Void InjectSelector(Oculus.Interaction.ISelector selector)
    // Offset: 0x47C9A6C
    void InjectSelector(::Oculus::Interaction::ISelector* selector);
    // public System.Void InjectRenderer(UnityEngine.Renderer renderer)
    // Offset: 0x47C9B3C
    void InjectRenderer(::UnityEngine::Renderer* renderer);
    // public System.Void .ctor()
    // Offset: 0x47C9B44
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SelectorDebugVisual* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::SelectorDebugVisual::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SelectorDebugVisual*, creationType>()));
    }
  }; // Oculus.Interaction.SelectorDebugVisual
  #pragma pack(pop)
  static check_size<sizeof(SelectorDebugVisual), 97 + sizeof(bool)> __Oculus_Interaction_SelectorDebugVisualSizeCheck;
  static_assert(sizeof(SelectorDebugVisual) == 0x62);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::SelectorDebugVisual::get_NormalColor
// Il2CppName: get_NormalColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (Oculus::Interaction::SelectorDebugVisual::*)()>(&Oculus::Interaction::SelectorDebugVisual::get_NormalColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SelectorDebugVisual*), "get_NormalColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SelectorDebugVisual::set_NormalColor
// Il2CppName: set_NormalColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SelectorDebugVisual::*)(::UnityEngine::Color)>(&Oculus::Interaction::SelectorDebugVisual::set_NormalColor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SelectorDebugVisual*), "set_NormalColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SelectorDebugVisual::get_SelectColor
// Il2CppName: get_SelectColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (Oculus::Interaction::SelectorDebugVisual::*)()>(&Oculus::Interaction::SelectorDebugVisual::get_SelectColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SelectorDebugVisual*), "get_SelectColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SelectorDebugVisual::set_SelectColor
// Il2CppName: set_SelectColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SelectorDebugVisual::*)(::UnityEngine::Color)>(&Oculus::Interaction::SelectorDebugVisual::set_SelectColor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SelectorDebugVisual*), "set_SelectColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SelectorDebugVisual::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SelectorDebugVisual::*)()>(&Oculus::Interaction::SelectorDebugVisual::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SelectorDebugVisual*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SelectorDebugVisual::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SelectorDebugVisual::*)()>(&Oculus::Interaction::SelectorDebugVisual::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SelectorDebugVisual*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SelectorDebugVisual::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SelectorDebugVisual::*)()>(&Oculus::Interaction::SelectorDebugVisual::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SelectorDebugVisual*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SelectorDebugVisual::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SelectorDebugVisual::*)()>(&Oculus::Interaction::SelectorDebugVisual::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SelectorDebugVisual*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SelectorDebugVisual::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SelectorDebugVisual::*)()>(&Oculus::Interaction::SelectorDebugVisual::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SelectorDebugVisual*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SelectorDebugVisual::HandleSelected
// Il2CppName: HandleSelected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SelectorDebugVisual::*)()>(&Oculus::Interaction::SelectorDebugVisual::HandleSelected)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SelectorDebugVisual*), "HandleSelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SelectorDebugVisual::HandleUnselected
// Il2CppName: HandleUnselected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SelectorDebugVisual::*)()>(&Oculus::Interaction::SelectorDebugVisual::HandleUnselected)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SelectorDebugVisual*), "HandleUnselected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SelectorDebugVisual::InjectAllSelectorDebugVisual
// Il2CppName: InjectAllSelectorDebugVisual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SelectorDebugVisual::*)(::Oculus::Interaction::ISelector*, ::UnityEngine::Renderer*)>(&Oculus::Interaction::SelectorDebugVisual::InjectAllSelectorDebugVisual)> {
  static const MethodInfo* get() {
    static auto* selector = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "ISelector")->byval_arg;
    static auto* renderer = &::il2cpp_utils::GetClassFromName("UnityEngine", "Renderer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SelectorDebugVisual*), "InjectAllSelectorDebugVisual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{selector, renderer});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SelectorDebugVisual::InjectSelector
// Il2CppName: InjectSelector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SelectorDebugVisual::*)(::Oculus::Interaction::ISelector*)>(&Oculus::Interaction::SelectorDebugVisual::InjectSelector)> {
  static const MethodInfo* get() {
    static auto* selector = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "ISelector")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SelectorDebugVisual*), "InjectSelector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{selector});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SelectorDebugVisual::InjectRenderer
// Il2CppName: InjectRenderer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SelectorDebugVisual::*)(::UnityEngine::Renderer*)>(&Oculus::Interaction::SelectorDebugVisual::InjectRenderer)> {
  static const MethodInfo* get() {
    static auto* renderer = &::il2cpp_utils::GetClassFromName("UnityEngine", "Renderer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SelectorDebugVisual*), "InjectRenderer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderer});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SelectorDebugVisual::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
