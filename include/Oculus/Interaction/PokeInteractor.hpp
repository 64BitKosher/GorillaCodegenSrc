// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Oculus.Interaction.PointerInteractor`2
#include "Oculus/Interaction/PointerInteractor_2.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction
namespace Oculus::Interaction {
  // Forward declaring type: PokeInteractable
  class PokeInteractable;
  // Forward declaring type: ProgressCurve
  class ProgressCurve;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Skipping declaration: Pose because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`1<TResult>
  template<typename TResult>
  class Func_1;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: Oculus::Interaction::Surfaces
namespace Oculus::Interaction::Surfaces {
  // Forward declaring type: SurfaceHit
  struct SurfaceHit;
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: PokeInteractor
  class PokeInteractor;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::PokeInteractor);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::PokeInteractor*, "Oculus.Interaction", "PokeInteractor");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // WARNING Size may be invalid!
  // Autogenerated type: Oculus.Interaction.PokeInteractor
  // [TokenAttribute] Offset: FFFFFFFF
  class PokeInteractor : public ::Oculus::Interaction::PointerInteractor_2<::Oculus::Interaction::PokeInteractor*, ::Oculus::Interaction::PokeInteractable*> {
    public:
    // Nested type: ::Oculus::Interaction::PokeInteractor::SurfaceHitCache
    class SurfaceHitCache;
    // Nested type: ::Oculus::Interaction::PokeInteractor::$$c
    class $$c;
    public:
    // private UnityEngine.Transform _pointTransform
    // Size: 0x8
    // Offset: 0x118
    ::UnityEngine::Transform* pointTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private System.Single _radius
    // Size: 0x4
    // Offset: 0x120
    float radius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _touchReleaseThreshold
    // Size: 0x4
    // Offset: 0x124
    float touchReleaseThreshold;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _equalDistanceThreshold
    // Size: 0x4
    // Offset: 0x128
    float equalDistanceThreshold;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector3 <ClosestPoint>k__BackingField
    // Size: 0xC
    // Offset: 0x12C
    ::UnityEngine::Vector3 ClosestPoint;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 <TouchPoint>k__BackingField
    // Size: 0xC
    // Offset: 0x138
    ::UnityEngine::Vector3 TouchPoint;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 <TouchNormal>k__BackingField
    // Size: 0xC
    // Offset: 0x144
    ::UnityEngine::Vector3 TouchNormal;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 <Origin>k__BackingField
    // Size: 0xC
    // Offset: 0x150
    ::UnityEngine::Vector3 Origin;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 _previousPokeOrigin
    // Size: 0xC
    // Offset: 0x15C
    ::UnityEngine::Vector3 previousPokeOrigin;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private Oculus.Interaction.PokeInteractable _previousCandidate
    // Size: 0x8
    // Offset: 0x168
    ::Oculus::Interaction::PokeInteractable* previousCandidate;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::PokeInteractable*) == 0x8);
    // private Oculus.Interaction.PokeInteractable _hitInteractable
    // Size: 0x8
    // Offset: 0x170
    ::Oculus::Interaction::PokeInteractable* hitInteractable;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::PokeInteractable*) == 0x8);
    // private Oculus.Interaction.PokeInteractable _recoilInteractable
    // Size: 0x8
    // Offset: 0x178
    ::Oculus::Interaction::PokeInteractable* recoilInteractable;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::PokeInteractable*) == 0x8);
    // private UnityEngine.Vector3 _previousSurfacePointLocal
    // Size: 0xC
    // Offset: 0x180
    ::UnityEngine::Vector3 previousSurfacePointLocal;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 _firstTouchPointLocal
    // Size: 0xC
    // Offset: 0x18C
    ::UnityEngine::Vector3 firstTouchPointLocal;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 _targetTouchPointLocal
    // Size: 0xC
    // Offset: 0x198
    ::UnityEngine::Vector3 targetTouchPointLocal;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 _easeTouchPointLocal
    // Size: 0xC
    // Offset: 0x1A4
    ::UnityEngine::Vector3 easeTouchPointLocal;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Boolean _isRecoiled
    // Size: 0x1
    // Offset: 0x1B0
    bool isRecoiled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _isDragging
    // Size: 0x1
    // Offset: 0x1B1
    bool isDragging;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private Oculus.Interaction.ProgressCurve _dragEaseCurve
    // Size: 0x8
    // Offset: 0x1B8
    ::Oculus::Interaction::ProgressCurve* dragEaseCurve;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::ProgressCurve*) == 0x8);
    // private Oculus.Interaction.ProgressCurve _pinningResyncCurve
    // Size: 0x8
    // Offset: 0x1C0
    ::Oculus::Interaction::ProgressCurve* pinningResyncCurve;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::ProgressCurve*) == 0x8);
    // private UnityEngine.Vector3 _dragCompareSurfacePointLocal
    // Size: 0xC
    // Offset: 0x1C8
    ::UnityEngine::Vector3 dragCompareSurfacePointLocal;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Single _maxDistanceFromFirstTouchPoint
    // Size: 0x4
    // Offset: 0x1D4
    float maxDistanceFromFirstTouchPoint;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _recoilVelocityExpansion
    // Size: 0x4
    // Offset: 0x1D8
    float recoilVelocityExpansion;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _selectMaxDepth
    // Size: 0x4
    // Offset: 0x1DC
    float selectMaxDepth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _reEnterDepth
    // Size: 0x4
    // Offset: 0x1E0
    float reEnterDepth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _lastUpdateTime
    // Size: 0x4
    // Offset: 0x1E4
    float lastUpdateTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Func`1<System.Single> _timeProvider
    // Size: 0x8
    // Offset: 0x1E8
    ::System::Func_1<float>* timeProvider;
    // Field size check
    static_assert(sizeof(::System::Func_1<float>*) == 0x8);
    // private System.Boolean _isPassedSurface
    // Size: 0x1
    // Offset: 0x1F0
    bool isPassedSurface;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Action`1<System.Boolean> WhenPassedSurfaceChanged
    // Size: 0x8
    // Offset: 0x1F8
    ::System::Action_1<bool>* WhenPassedSurfaceChanged;
    // Field size check
    static_assert(sizeof(::System::Action_1<bool>*) == 0x8);
    // private Oculus.Interaction.PokeInteractor/SurfaceHitCache _hitCache
    // Size: 0x8
    // Offset: 0x200
    ::Oculus::Interaction::PokeInteractor::SurfaceHitCache* hitCache;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::PokeInteractor::SurfaceHitCache*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<Oculus.Interaction.PokeInteractable,UnityEngine.Matrix4x4> _previousSurfaceTransformMap
    // Size: 0x8
    // Offset: 0x208
    ::System::Collections::Generic::Dictionary_2<::Oculus::Interaction::PokeInteractable*, ::UnityEngine::Matrix4x4>* previousSurfaceTransformMap;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::Oculus::Interaction::PokeInteractable*, ::UnityEngine::Matrix4x4>*) == 0x8);
    // private System.Single _previousDragCurveProgress
    // Size: 0x4
    // Offset: 0x210
    float previousDragCurveProgress;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _previousPinningCurveProgress
    // Size: 0x4
    // Offset: 0x214
    float previousPinningCurveProgress;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: private UnityEngine.Transform _pointTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__pointTransform();
    // Get instance field reference: private System.Single _radius
    [[deprecated("Use field access instead!")]] float& dyn__radius();
    // Get instance field reference: private System.Single _touchReleaseThreshold
    [[deprecated("Use field access instead!")]] float& dyn__touchReleaseThreshold();
    // Get instance field reference: private System.Single _equalDistanceThreshold
    [[deprecated("Use field access instead!")]] float& dyn__equalDistanceThreshold();
    // Get instance field reference: private UnityEngine.Vector3 <ClosestPoint>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_$ClosestPoint$k__BackingField();
    // Get instance field reference: private UnityEngine.Vector3 <TouchPoint>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_$TouchPoint$k__BackingField();
    // Get instance field reference: private UnityEngine.Vector3 <TouchNormal>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_$TouchNormal$k__BackingField();
    // Get instance field reference: private UnityEngine.Vector3 <Origin>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_$Origin$k__BackingField();
    // Get instance field reference: private UnityEngine.Vector3 _previousPokeOrigin
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__previousPokeOrigin();
    // Get instance field reference: private Oculus.Interaction.PokeInteractable _previousCandidate
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::PokeInteractable*& dyn__previousCandidate();
    // Get instance field reference: private Oculus.Interaction.PokeInteractable _hitInteractable
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::PokeInteractable*& dyn__hitInteractable();
    // Get instance field reference: private Oculus.Interaction.PokeInteractable _recoilInteractable
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::PokeInteractable*& dyn__recoilInteractable();
    // Get instance field reference: private UnityEngine.Vector3 _previousSurfacePointLocal
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__previousSurfacePointLocal();
    // Get instance field reference: private UnityEngine.Vector3 _firstTouchPointLocal
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__firstTouchPointLocal();
    // Get instance field reference: private UnityEngine.Vector3 _targetTouchPointLocal
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__targetTouchPointLocal();
    // Get instance field reference: private UnityEngine.Vector3 _easeTouchPointLocal
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__easeTouchPointLocal();
    // Get instance field reference: private System.Boolean _isRecoiled
    [[deprecated("Use field access instead!")]] bool& dyn__isRecoiled();
    // Get instance field reference: private System.Boolean _isDragging
    [[deprecated("Use field access instead!")]] bool& dyn__isDragging();
    // Get instance field reference: private Oculus.Interaction.ProgressCurve _dragEaseCurve
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::ProgressCurve*& dyn__dragEaseCurve();
    // Get instance field reference: private Oculus.Interaction.ProgressCurve _pinningResyncCurve
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::ProgressCurve*& dyn__pinningResyncCurve();
    // Get instance field reference: private UnityEngine.Vector3 _dragCompareSurfacePointLocal
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__dragCompareSurfacePointLocal();
    // Get instance field reference: private System.Single _maxDistanceFromFirstTouchPoint
    [[deprecated("Use field access instead!")]] float& dyn__maxDistanceFromFirstTouchPoint();
    // Get instance field reference: private System.Single _recoilVelocityExpansion
    [[deprecated("Use field access instead!")]] float& dyn__recoilVelocityExpansion();
    // Get instance field reference: private System.Single _selectMaxDepth
    [[deprecated("Use field access instead!")]] float& dyn__selectMaxDepth();
    // Get instance field reference: private System.Single _reEnterDepth
    [[deprecated("Use field access instead!")]] float& dyn__reEnterDepth();
    // Get instance field reference: private System.Single _lastUpdateTime
    [[deprecated("Use field access instead!")]] float& dyn__lastUpdateTime();
    // Get instance field reference: private System.Func`1<System.Single> _timeProvider
    [[deprecated("Use field access instead!")]] ::System::Func_1<float>*& dyn__timeProvider();
    // Get instance field reference: private System.Boolean _isPassedSurface
    [[deprecated("Use field access instead!")]] bool& dyn__isPassedSurface();
    // Get instance field reference: public System.Action`1<System.Boolean> WhenPassedSurfaceChanged
    [[deprecated("Use field access instead!")]] ::System::Action_1<bool>*& dyn_WhenPassedSurfaceChanged();
    // Get instance field reference: private Oculus.Interaction.PokeInteractor/SurfaceHitCache _hitCache
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::PokeInteractor::SurfaceHitCache*& dyn__hitCache();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<Oculus.Interaction.PokeInteractable,UnityEngine.Matrix4x4> _previousSurfaceTransformMap
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::Oculus::Interaction::PokeInteractable*, ::UnityEngine::Matrix4x4>*& dyn__previousSurfaceTransformMap();
    // Get instance field reference: private System.Single _previousDragCurveProgress
    [[deprecated("Use field access instead!")]] float& dyn__previousDragCurveProgress();
    // Get instance field reference: private System.Single _previousPinningCurveProgress
    [[deprecated("Use field access instead!")]] float& dyn__previousPinningCurveProgress();
    // public UnityEngine.Vector3 get_ClosestPoint()
    // Offset: 0x47AD868
    ::UnityEngine::Vector3 get_ClosestPoint();
    // private System.Void set_ClosestPoint(UnityEngine.Vector3 value)
    // Offset: 0x47AD878
    void set_ClosestPoint(::UnityEngine::Vector3 value);
    // public UnityEngine.Vector3 get_TouchPoint()
    // Offset: 0x47AD888
    ::UnityEngine::Vector3 get_TouchPoint();
    // private System.Void set_TouchPoint(UnityEngine.Vector3 value)
    // Offset: 0x47AD898
    void set_TouchPoint(::UnityEngine::Vector3 value);
    // public UnityEngine.Vector3 get_TouchNormal()
    // Offset: 0x47AD8A8
    ::UnityEngine::Vector3 get_TouchNormal();
    // private System.Void set_TouchNormal(UnityEngine.Vector3 value)
    // Offset: 0x47AD8B8
    void set_TouchNormal(::UnityEngine::Vector3 value);
    // public System.Single get_Radius()
    // Offset: 0x47AD8C8
    float get_Radius();
    // public UnityEngine.Vector3 get_Origin()
    // Offset: 0x47AD8D0
    ::UnityEngine::Vector3 get_Origin();
    // private System.Void set_Origin(UnityEngine.Vector3 value)
    // Offset: 0x47AD8E0
    void set_Origin(::UnityEngine::Vector3 value);
    // public System.Boolean get_IsPassedSurface()
    // Offset: 0x47AD8F0
    bool get_IsPassedSurface();
    // public System.Void set_IsPassedSurface(System.Boolean value)
    // Offset: 0x47AD8F8
    void set_IsPassedSurface(bool value);
    // private System.Boolean GetBackingHit(Oculus.Interaction.PokeInteractable interactable, out Oculus.Interaction.Surfaces.SurfaceHit hit)
    // Offset: 0x47AE298
    bool GetBackingHit(::Oculus::Interaction::PokeInteractable* interactable, ByRef<::Oculus::Interaction::Surfaces::SurfaceHit> hit);
    // private System.Boolean GetPatchHit(Oculus.Interaction.PokeInteractable interactable, out Oculus.Interaction.Surfaces.SurfaceHit hit)
    // Offset: 0x47AE52C
    bool GetPatchHit(::Oculus::Interaction::PokeInteractable* interactable, ByRef<::Oculus::Interaction::Surfaces::SurfaceHit> hit);
    // private System.Boolean InteractableInRange(Oculus.Interaction.PokeInteractable interactable)
    // Offset: 0x47AE74C
    bool InteractableInRange(::Oculus::Interaction::PokeInteractable* interactable);
    // protected Oculus.Interaction.PokeInteractable ComputeCandidate()
    // Offset: 0x47AEC94
    ::Oculus::Interaction::PokeInteractable* ComputeCandidate();
    // protected System.Int32 ComputeCandidateTiebreaker(Oculus.Interaction.PokeInteractable a, Oculus.Interaction.PokeInteractable b)
    // Offset: 0x47B0500
    int ComputeCandidateTiebreaker(::Oculus::Interaction::PokeInteractable* a, ::Oculus::Interaction::PokeInteractable* b);
    // private Oculus.Interaction.PokeInteractable ComputeSelectCandidate()
    // Offset: 0x47AEDBC
    ::Oculus::Interaction::PokeInteractable* ComputeSelectCandidate();
    // private System.Boolean PassesEnterHoverDistanceCheck(UnityEngine.Vector3 position, Oculus.Interaction.PokeInteractable interactable)
    // Offset: 0x47B0594
    bool PassesEnterHoverDistanceCheck(::UnityEngine::Vector3 position, ::Oculus::Interaction::PokeInteractable* interactable);
    // public System.Single MinPokeDepth(Oculus.Interaction.PokeInteractable interactable)
    // Offset: 0x47B06CC
    float MinPokeDepth(::Oculus::Interaction::PokeInteractable* interactable);
    // private Oculus.Interaction.PokeInteractable ComputeHoverCandidate()
    // Offset: 0x47AFE50
    ::Oculus::Interaction::PokeInteractable* ComputeHoverCandidate();
    // protected System.Void InteractableSelected(Oculus.Interaction.PokeInteractable interactable)
    // Offset: 0x47B08B0
    void InteractableSelected(::Oculus::Interaction::PokeInteractable* interactable);
    // private System.Single ComputeDistanceAbove(Oculus.Interaction.PokeInteractable interactable, UnityEngine.Vector3 point)
    // Offset: 0x47B0684
    float ComputeDistanceAbove(::Oculus::Interaction::PokeInteractable* interactable, ::UnityEngine::Vector3 point);
    // public System.Single ComputeDepth(Oculus.Interaction.PokeInteractable interactable, UnityEngine.Vector3 point)
    // Offset: 0x47B0DC0
    float ComputeDepth(::Oculus::Interaction::PokeInteractable* interactable, ::UnityEngine::Vector3 point);
    // private System.Single ComputePokeDepth(Oculus.Interaction.PokeInteractable interactable, UnityEngine.Vector3 point)
    // Offset: 0x47AE214
    float ComputePokeDepth(::Oculus::Interaction::PokeInteractable* interactable, ::UnityEngine::Vector3 point);
    // private System.Single ComputeDistanceFrom(Oculus.Interaction.PokeInteractable interactable, UnityEngine.Vector3 point)
    // Offset: 0x47B0DE4
    float ComputeDistanceFrom(::Oculus::Interaction::PokeInteractable* interactable, ::UnityEngine::Vector3 point);
    // private System.Single ComputeTangentDistance(Oculus.Interaction.PokeInteractable interactable, UnityEngine.Vector3 point)
    // Offset: 0x47B06A8
    float ComputeTangentDistance(::Oculus::Interaction::PokeInteractable* interactable, ::UnityEngine::Vector3 point);
    // protected System.Boolean SurfaceUpdate(Oculus.Interaction.PokeInteractable interactable)
    // Offset: 0x47B0E08
    bool SurfaceUpdate(::Oculus::Interaction::PokeInteractable* interactable);
    // protected System.Boolean ShouldCancel(Oculus.Interaction.PokeInteractable interactable)
    // Offset: 0x47B177C
    bool ShouldCancel(::Oculus::Interaction::PokeInteractable* interactable);
    // protected System.Boolean ShouldRecoil(Oculus.Interaction.PokeInteractable interactable)
    // Offset: 0x47B180C
    bool ShouldRecoil(::Oculus::Interaction::PokeInteractable* interactable);
    // public System.Void InjectAllPokeInteractor(UnityEngine.Transform pointTransform, System.Single radius)
    // Offset: 0x47B1DA0
    void InjectAllPokeInteractor(::UnityEngine::Transform* pointTransform, float radius);
    // public System.Void InjectPointTransform(UnityEngine.Transform pointTransform)
    // Offset: 0x47B1DCC
    void InjectPointTransform(::UnityEngine::Transform* pointTransform);
    // public System.Void InjectRadius(System.Single radius)
    // Offset: 0x47B1DDC
    void InjectRadius(float radius);
    // public System.Void InjectOptionalTouchReleaseThreshold(System.Single touchReleaseThreshold)
    // Offset: 0x47B1DE4
    void InjectOptionalTouchReleaseThreshold(float touchReleaseThreshold);
    // public System.Void InjectOptionalEqualDistanceThreshold(System.Single equalDistanceThreshold)
    // Offset: 0x47B1DEC
    void InjectOptionalEqualDistanceThreshold(float equalDistanceThreshold);
    // public System.Void InjectOptionalTimeProvider(System.Func`1<System.Single> timeProvider)
    // Offset: 0x47B1DF4
    void InjectOptionalTimeProvider(::System::Func_1<float>* timeProvider);
    // protected override System.Void Awake()
    // Offset: 0x47AD93C
    // Implemented from: Oculus.Interaction.Interactor`2
    // Base method: System.Void Interactor_2::Awake()
    void Awake();
    // protected override System.Void Start()
    // Offset: 0x47ADA60
    // Implemented from: Oculus.Interaction.Interactor`2
    // Base method: System.Void Interactor_2::Start()
    void Start();
    // protected override System.Void DoPreprocess()
    // Offset: 0x47ADC40
    // Implemented from: Oculus.Interaction.Interactor`2
    // Base method: System.Void Interactor_2::DoPreprocess()
    void DoPreprocess();
    // protected override System.Void DoPostprocess()
    // Offset: 0x47ADD4C
    // Implemented from: Oculus.Interaction.PointerInteractor`2
    // Base method: System.Void PointerInteractor_2::DoPostprocess()
    void DoPostprocess();
    // protected override System.Boolean ComputeShouldSelect()
    // Offset: 0x47AE134
    // Implemented from: Oculus.Interaction.Interactor`2
    // Base method: System.Boolean Interactor_2::ComputeShouldSelect()
    bool ComputeShouldSelect();
    // protected override System.Boolean ComputeShouldUnselect()
    // Offset: 0x47AE238
    // Implemented from: Oculus.Interaction.Interactor`2
    // Base method: System.Boolean Interactor_2::ComputeShouldUnselect()
    bool ComputeShouldUnselect();
    // protected override System.Void DoHoverUpdate()
    // Offset: 0x47AEAD8
    // Implemented from: Oculus.Interaction.Interactor`2
    // Base method: System.Void Interactor_2::DoHoverUpdate()
    void DoHoverUpdate();
    // protected override System.Void HandleDisabled()
    // Offset: 0x47B0BF0
    // Implemented from: Oculus.Interaction.Interactor`2
    // Base method: System.Void Interactor_2::HandleDisabled()
    void HandleDisabled();
    // protected override UnityEngine.Pose ComputePointerPose()
    // Offset: 0x47B0C54
    // Implemented from: Oculus.Interaction.PointerInteractor`2
    // Base method: UnityEngine.Pose PointerInteractor_2::ComputePointerPose()
    ::UnityEngine::Pose ComputePointerPose();
    // protected override System.Void DoSelectUpdate()
    // Offset: 0x47B1C18
    // Implemented from: Oculus.Interaction.Interactor`2
    // Base method: System.Void Interactor_2::DoSelectUpdate()
    void DoSelectUpdate();
    // public System.Void .ctor()
    // Offset: 0x47B1E04
    // Implemented from: Oculus.Interaction.PointerInteractor`2
    // Base method: System.Void PointerInteractor_2::.ctor()
    // Base method: System.Void Interactor_2::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PokeInteractor* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::PokeInteractor::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PokeInteractor*, creationType>()));
    }
  }; // Oculus.Interaction.PokeInteractor
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::PokeInteractor::get_ClosestPoint
// Il2CppName: get_ClosestPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Oculus::Interaction::PokeInteractor::*)()>(&Oculus::Interaction::PokeInteractor::get_ClosestPoint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PokeInteractor*), "get_ClosestPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PokeInteractor::set_ClosestPoint
// Il2CppName: set_ClosestPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PokeInteractor::*)(::UnityEngine::Vector3)>(&Oculus::Interaction::PokeInteractor::set_ClosestPoint)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PokeInteractor*), "set_ClosestPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PokeInteractor::get_TouchPoint
// Il2CppName: get_TouchPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Oculus::Interaction::PokeInteractor::*)()>(&Oculus::Interaction::PokeInteractor::get_TouchPoint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PokeInteractor*), "get_TouchPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PokeInteractor::set_TouchPoint
// Il2CppName: set_TouchPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PokeInteractor::*)(::UnityEngine::Vector3)>(&Oculus::Interaction::PokeInteractor::set_TouchPoint)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PokeInteractor*), "set_TouchPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PokeInteractor::get_TouchNormal
// Il2CppName: get_TouchNormal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Oculus::Interaction::PokeInteractor::*)()>(&Oculus::Interaction::PokeInteractor::get_TouchNormal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PokeInteractor*), "get_TouchNormal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PokeInteractor::set_TouchNormal
// Il2CppName: set_TouchNormal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PokeInteractor::*)(::UnityEngine::Vector3)>(&Oculus::Interaction::PokeInteractor::set_TouchNormal)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PokeInteractor*), "set_TouchNormal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PokeInteractor::get_Radius
// Il2CppName: get_Radius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::PokeInteractor::*)()>(&Oculus::Interaction::PokeInteractor::get_Radius)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PokeInteractor*), "get_Radius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PokeInteractor::get_Origin
// Il2CppName: get_Origin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Oculus::Interaction::PokeInteractor::*)()>(&Oculus::Interaction::PokeInteractor::get_Origin)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PokeInteractor*), "get_Origin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PokeInteractor::set_Origin
// Il2CppName: set_Origin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PokeInteractor::*)(::UnityEngine::Vector3)>(&Oculus::Interaction::PokeInteractor::set_Origin)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PokeInteractor*), "set_Origin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PokeInteractor::get_IsPassedSurface
// Il2CppName: get_IsPassedSurface
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::PokeInteractor::*)()>(&Oculus::Interaction::PokeInteractor::get_IsPassedSurface)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PokeInteractor*), "get_IsPassedSurface", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PokeInteractor::set_IsPassedSurface
// Il2CppName: set_IsPassedSurface
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PokeInteractor::*)(bool)>(&Oculus::Interaction::PokeInteractor::set_IsPassedSurface)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PokeInteractor*), "set_IsPassedSurface", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PokeInteractor::GetBackingHit
// Il2CppName: GetBackingHit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::PokeInteractor::*)(::Oculus::Interaction::PokeInteractable*, ByRef<::Oculus::Interaction::Surfaces::SurfaceHit>)>(&Oculus::Interaction::PokeInteractor::GetBackingHit)> {
  static const MethodInfo* get() {
    static auto* interactable = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "PokeInteractable")->byval_arg;
    static auto* hit = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Surfaces", "SurfaceHit")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PokeInteractor*), "GetBackingHit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactable, hit});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PokeInteractor::GetPatchHit
// Il2CppName: GetPatchHit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::PokeInteractor::*)(::Oculus::Interaction::PokeInteractable*, ByRef<::Oculus::Interaction::Surfaces::SurfaceHit>)>(&Oculus::Interaction::PokeInteractor::GetPatchHit)> {
  static const MethodInfo* get() {
    static auto* interactable = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "PokeInteractable")->byval_arg;
    static auto* hit = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Surfaces", "SurfaceHit")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PokeInteractor*), "GetPatchHit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactable, hit});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PokeInteractor::InteractableInRange
// Il2CppName: InteractableInRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::PokeInteractor::*)(::Oculus::Interaction::PokeInteractable*)>(&Oculus::Interaction::PokeInteractor::InteractableInRange)> {
  static const MethodInfo* get() {
    static auto* interactable = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "PokeInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PokeInteractor*), "InteractableInRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactable});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PokeInteractor::ComputeCandidate
// Il2CppName: ComputeCandidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::PokeInteractable* (Oculus::Interaction::PokeInteractor::*)()>(&Oculus::Interaction::PokeInteractor::ComputeCandidate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PokeInteractor*), "ComputeCandidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PokeInteractor::ComputeCandidateTiebreaker
// Il2CppName: ComputeCandidateTiebreaker
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Oculus::Interaction::PokeInteractor::*)(::Oculus::Interaction::PokeInteractable*, ::Oculus::Interaction::PokeInteractable*)>(&Oculus::Interaction::PokeInteractor::ComputeCandidateTiebreaker)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "PokeInteractable")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "PokeInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PokeInteractor*), "ComputeCandidateTiebreaker", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PokeInteractor::ComputeSelectCandidate
// Il2CppName: ComputeSelectCandidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::PokeInteractable* (Oculus::Interaction::PokeInteractor::*)()>(&Oculus::Interaction::PokeInteractor::ComputeSelectCandidate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PokeInteractor*), "ComputeSelectCandidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PokeInteractor::PassesEnterHoverDistanceCheck
// Il2CppName: PassesEnterHoverDistanceCheck
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::PokeInteractor::*)(::UnityEngine::Vector3, ::Oculus::Interaction::PokeInteractable*)>(&Oculus::Interaction::PokeInteractor::PassesEnterHoverDistanceCheck)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* interactable = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "PokeInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PokeInteractor*), "PassesEnterHoverDistanceCheck", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, interactable});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PokeInteractor::MinPokeDepth
// Il2CppName: MinPokeDepth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::PokeInteractor::*)(::Oculus::Interaction::PokeInteractable*)>(&Oculus::Interaction::PokeInteractor::MinPokeDepth)> {
  static const MethodInfo* get() {
    static auto* interactable = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "PokeInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PokeInteractor*), "MinPokeDepth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactable});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PokeInteractor::ComputeHoverCandidate
// Il2CppName: ComputeHoverCandidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::PokeInteractable* (Oculus::Interaction::PokeInteractor::*)()>(&Oculus::Interaction::PokeInteractor::ComputeHoverCandidate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PokeInteractor*), "ComputeHoverCandidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PokeInteractor::InteractableSelected
// Il2CppName: InteractableSelected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PokeInteractor::*)(::Oculus::Interaction::PokeInteractable*)>(&Oculus::Interaction::PokeInteractor::InteractableSelected)> {
  static const MethodInfo* get() {
    static auto* interactable = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "PokeInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PokeInteractor*), "InteractableSelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactable});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PokeInteractor::ComputeDistanceAbove
// Il2CppName: ComputeDistanceAbove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::PokeInteractor::*)(::Oculus::Interaction::PokeInteractable*, ::UnityEngine::Vector3)>(&Oculus::Interaction::PokeInteractor::ComputeDistanceAbove)> {
  static const MethodInfo* get() {
    static auto* interactable = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "PokeInteractable")->byval_arg;
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PokeInteractor*), "ComputeDistanceAbove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactable, point});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PokeInteractor::ComputeDepth
// Il2CppName: ComputeDepth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::PokeInteractor::*)(::Oculus::Interaction::PokeInteractable*, ::UnityEngine::Vector3)>(&Oculus::Interaction::PokeInteractor::ComputeDepth)> {
  static const MethodInfo* get() {
    static auto* interactable = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "PokeInteractable")->byval_arg;
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PokeInteractor*), "ComputeDepth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactable, point});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PokeInteractor::ComputePokeDepth
// Il2CppName: ComputePokeDepth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::PokeInteractor::*)(::Oculus::Interaction::PokeInteractable*, ::UnityEngine::Vector3)>(&Oculus::Interaction::PokeInteractor::ComputePokeDepth)> {
  static const MethodInfo* get() {
    static auto* interactable = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "PokeInteractable")->byval_arg;
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PokeInteractor*), "ComputePokeDepth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactable, point});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PokeInteractor::ComputeDistanceFrom
// Il2CppName: ComputeDistanceFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::PokeInteractor::*)(::Oculus::Interaction::PokeInteractable*, ::UnityEngine::Vector3)>(&Oculus::Interaction::PokeInteractor::ComputeDistanceFrom)> {
  static const MethodInfo* get() {
    static auto* interactable = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "PokeInteractable")->byval_arg;
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PokeInteractor*), "ComputeDistanceFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactable, point});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PokeInteractor::ComputeTangentDistance
// Il2CppName: ComputeTangentDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::PokeInteractor::*)(::Oculus::Interaction::PokeInteractable*, ::UnityEngine::Vector3)>(&Oculus::Interaction::PokeInteractor::ComputeTangentDistance)> {
  static const MethodInfo* get() {
    static auto* interactable = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "PokeInteractable")->byval_arg;
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PokeInteractor*), "ComputeTangentDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactable, point});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PokeInteractor::SurfaceUpdate
// Il2CppName: SurfaceUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::PokeInteractor::*)(::Oculus::Interaction::PokeInteractable*)>(&Oculus::Interaction::PokeInteractor::SurfaceUpdate)> {
  static const MethodInfo* get() {
    static auto* interactable = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "PokeInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PokeInteractor*), "SurfaceUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactable});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PokeInteractor::ShouldCancel
// Il2CppName: ShouldCancel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::PokeInteractor::*)(::Oculus::Interaction::PokeInteractable*)>(&Oculus::Interaction::PokeInteractor::ShouldCancel)> {
  static const MethodInfo* get() {
    static auto* interactable = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "PokeInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PokeInteractor*), "ShouldCancel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactable});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PokeInteractor::ShouldRecoil
// Il2CppName: ShouldRecoil
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::PokeInteractor::*)(::Oculus::Interaction::PokeInteractable*)>(&Oculus::Interaction::PokeInteractor::ShouldRecoil)> {
  static const MethodInfo* get() {
    static auto* interactable = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "PokeInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PokeInteractor*), "ShouldRecoil", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactable});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PokeInteractor::InjectAllPokeInteractor
// Il2CppName: InjectAllPokeInteractor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PokeInteractor::*)(::UnityEngine::Transform*, float)>(&Oculus::Interaction::PokeInteractor::InjectAllPokeInteractor)> {
  static const MethodInfo* get() {
    static auto* pointTransform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PokeInteractor*), "InjectAllPokeInteractor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pointTransform, radius});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PokeInteractor::InjectPointTransform
// Il2CppName: InjectPointTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PokeInteractor::*)(::UnityEngine::Transform*)>(&Oculus::Interaction::PokeInteractor::InjectPointTransform)> {
  static const MethodInfo* get() {
    static auto* pointTransform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PokeInteractor*), "InjectPointTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pointTransform});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PokeInteractor::InjectRadius
// Il2CppName: InjectRadius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PokeInteractor::*)(float)>(&Oculus::Interaction::PokeInteractor::InjectRadius)> {
  static const MethodInfo* get() {
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PokeInteractor*), "InjectRadius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{radius});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PokeInteractor::InjectOptionalTouchReleaseThreshold
// Il2CppName: InjectOptionalTouchReleaseThreshold
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PokeInteractor::*)(float)>(&Oculus::Interaction::PokeInteractor::InjectOptionalTouchReleaseThreshold)> {
  static const MethodInfo* get() {
    static auto* touchReleaseThreshold = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PokeInteractor*), "InjectOptionalTouchReleaseThreshold", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{touchReleaseThreshold});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PokeInteractor::InjectOptionalEqualDistanceThreshold
// Il2CppName: InjectOptionalEqualDistanceThreshold
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PokeInteractor::*)(float)>(&Oculus::Interaction::PokeInteractor::InjectOptionalEqualDistanceThreshold)> {
  static const MethodInfo* get() {
    static auto* equalDistanceThreshold = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PokeInteractor*), "InjectOptionalEqualDistanceThreshold", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{equalDistanceThreshold});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PokeInteractor::InjectOptionalTimeProvider
// Il2CppName: InjectOptionalTimeProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PokeInteractor::*)(::System::Func_1<float>*)>(&Oculus::Interaction::PokeInteractor::InjectOptionalTimeProvider)> {
  static const MethodInfo* get() {
    static auto* timeProvider = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Func`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PokeInteractor*), "InjectOptionalTimeProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{timeProvider});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PokeInteractor::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PokeInteractor::*)()>(&Oculus::Interaction::PokeInteractor::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PokeInteractor*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PokeInteractor::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PokeInteractor::*)()>(&Oculus::Interaction::PokeInteractor::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PokeInteractor*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PokeInteractor::DoPreprocess
// Il2CppName: DoPreprocess
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PokeInteractor::*)()>(&Oculus::Interaction::PokeInteractor::DoPreprocess)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PokeInteractor*), "DoPreprocess", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PokeInteractor::DoPostprocess
// Il2CppName: DoPostprocess
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PokeInteractor::*)()>(&Oculus::Interaction::PokeInteractor::DoPostprocess)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PokeInteractor*), "DoPostprocess", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PokeInteractor::ComputeShouldSelect
// Il2CppName: ComputeShouldSelect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::PokeInteractor::*)()>(&Oculus::Interaction::PokeInteractor::ComputeShouldSelect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PokeInteractor*), "ComputeShouldSelect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PokeInteractor::ComputeShouldUnselect
// Il2CppName: ComputeShouldUnselect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::PokeInteractor::*)()>(&Oculus::Interaction::PokeInteractor::ComputeShouldUnselect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PokeInteractor*), "ComputeShouldUnselect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PokeInteractor::DoHoverUpdate
// Il2CppName: DoHoverUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PokeInteractor::*)()>(&Oculus::Interaction::PokeInteractor::DoHoverUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PokeInteractor*), "DoHoverUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PokeInteractor::HandleDisabled
// Il2CppName: HandleDisabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PokeInteractor::*)()>(&Oculus::Interaction::PokeInteractor::HandleDisabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PokeInteractor*), "HandleDisabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PokeInteractor::ComputePointerPose
// Il2CppName: ComputePointerPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Pose (Oculus::Interaction::PokeInteractor::*)()>(&Oculus::Interaction::PokeInteractor::ComputePointerPose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PokeInteractor*), "ComputePointerPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PokeInteractor::DoSelectUpdate
// Il2CppName: DoSelectUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PokeInteractor::*)()>(&Oculus::Interaction::PokeInteractor::DoSelectUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PokeInteractor*), "DoSelectUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PokeInteractor::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
