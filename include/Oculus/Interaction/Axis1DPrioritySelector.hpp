// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Oculus.Interaction.Input.IAxis1D
#include "Oculus/Interaction/Input/IAxis1D.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction
namespace Oculus::Interaction {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Object because it is already included!
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: Axis1DPrioritySelector
  class Axis1DPrioritySelector;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Axis1DPrioritySelector);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Axis1DPrioritySelector*, "Oculus.Interaction", "Axis1DPrioritySelector");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.Axis1DPrioritySelector
  // [TokenAttribute] Offset: FFFFFFFF
  class Axis1DPrioritySelector : public ::UnityEngine::MonoBehaviour/*, public ::Oculus::Interaction::Input::IAxis1D*/ {
    public:
    // Nested type: ::Oculus::Interaction::Axis1DPrioritySelector::AxisData
    class AxisData;
    public:
    // private Oculus.Interaction.Axis1DPrioritySelector/AxisData[] _axisData
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::Oculus::Interaction::Axis1DPrioritySelector::AxisData*> axisData;
    // Field size check
    static_assert(sizeof(::ArrayW<::Oculus::Interaction::Axis1DPrioritySelector::AxisData*>) == 0x8);
    // private UnityEngine.Object _fallbackIfNoMatchAxis
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Object* fallbackIfNoMatchAxis;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.Input.IAxis1D FallbackIfNoMatchAxis
    // Size: 0x8
    // Offset: 0x30
    ::Oculus::Interaction::Input::IAxis1D* FallbackIfNoMatchAxis;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::IAxis1D*) == 0x8);
    // private Oculus.Interaction.Axis1DPrioritySelector/AxisData ActiveAxis
    // Size: 0x8
    // Offset: 0x38
    ::Oculus::Interaction::Axis1DPrioritySelector::AxisData* ActiveAxis;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Axis1DPrioritySelector::AxisData*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::Input::IAxis1D
    operator ::Oculus::Interaction::Input::IAxis1D() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::Input::IAxis1D*>(this);
    }
    // Get instance field reference: private Oculus.Interaction.Axis1DPrioritySelector/AxisData[] _axisData
    [[deprecated("Use field access instead!")]] ::ArrayW<::Oculus::Interaction::Axis1DPrioritySelector::AxisData*>& dyn__axisData();
    // Get instance field reference: private UnityEngine.Object _fallbackIfNoMatchAxis
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__fallbackIfNoMatchAxis();
    // Get instance field reference: private Oculus.Interaction.Input.IAxis1D FallbackIfNoMatchAxis
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::IAxis1D*& dyn_FallbackIfNoMatchAxis();
    // Get instance field reference: private Oculus.Interaction.Axis1DPrioritySelector/AxisData ActiveAxis
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Axis1DPrioritySelector::AxisData*& dyn_ActiveAxis();
    // protected Oculus.Interaction.Input.IAxis1D get_Current()
    // Offset: 0x4777D8C
    ::Oculus::Interaction::Input::IAxis1D* get_Current();
    // protected System.Void Awake()
    // Offset: 0x4777F20
    void Awake();
    // protected System.Void Start()
    // Offset: 0x4778084
    void Start();
    // public System.Single Value()
    // Offset: 0x47780D4
    float Value();
    // private Oculus.Interaction.Input.IAxis1D GetActiveAxis()
    // Offset: 0x4777D90
    ::Oculus::Interaction::Input::IAxis1D* GetActiveAxis();
    // public System.Void InjectAll(Oculus.Interaction.Axis1DPrioritySelector/AxisData[] axisData, Oculus.Interaction.Input.IAxis1D fallbackIfNoMatchAxis)
    // Offset: 0x477817C
    void InjectAll(::ArrayW<::Oculus::Interaction::Axis1DPrioritySelector::AxisData*> axisData, ::Oculus::Interaction::Input::IAxis1D* fallbackIfNoMatchAxis);
    // public System.Void .ctor()
    // Offset: 0x47782A0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Axis1DPrioritySelector* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Axis1DPrioritySelector::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Axis1DPrioritySelector*, creationType>()));
    }
  }; // Oculus.Interaction.Axis1DPrioritySelector
  #pragma pack(pop)
  static check_size<sizeof(Axis1DPrioritySelector), 56 + sizeof(::Oculus::Interaction::Axis1DPrioritySelector::AxisData*)> __Oculus_Interaction_Axis1DPrioritySelectorSizeCheck;
  static_assert(sizeof(Axis1DPrioritySelector) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Axis1DPrioritySelector::get_Current
// Il2CppName: get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Input::IAxis1D* (Oculus::Interaction::Axis1DPrioritySelector::*)()>(&Oculus::Interaction::Axis1DPrioritySelector::get_Current)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Axis1DPrioritySelector*), "get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Axis1DPrioritySelector::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Axis1DPrioritySelector::*)()>(&Oculus::Interaction::Axis1DPrioritySelector::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Axis1DPrioritySelector*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Axis1DPrioritySelector::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Axis1DPrioritySelector::*)()>(&Oculus::Interaction::Axis1DPrioritySelector::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Axis1DPrioritySelector*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Axis1DPrioritySelector::Value
// Il2CppName: Value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::Axis1DPrioritySelector::*)()>(&Oculus::Interaction::Axis1DPrioritySelector::Value)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Axis1DPrioritySelector*), "Value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Axis1DPrioritySelector::GetActiveAxis
// Il2CppName: GetActiveAxis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Input::IAxis1D* (Oculus::Interaction::Axis1DPrioritySelector::*)()>(&Oculus::Interaction::Axis1DPrioritySelector::GetActiveAxis)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Axis1DPrioritySelector*), "GetActiveAxis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Axis1DPrioritySelector::InjectAll
// Il2CppName: InjectAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Axis1DPrioritySelector::*)(::ArrayW<::Oculus::Interaction::Axis1DPrioritySelector::AxisData*>, ::Oculus::Interaction::Input::IAxis1D*)>(&Oculus::Interaction::Axis1DPrioritySelector::InjectAll)> {
  static const MethodInfo* get() {
    static auto* axisData = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Oculus.Interaction", "Axis1DPrioritySelector/AxisData"), 1)->byval_arg;
    static auto* fallbackIfNoMatchAxis = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IAxis1D")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Axis1DPrioritySelector*), "InjectAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{axisData, fallbackIfNoMatchAxis});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Axis1DPrioritySelector::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
