// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Oculus.Interaction.SequentialSlotsProvider
#include "Oculus/Interaction/SequentialSlotsProvider.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::SequentialSlotsProvider::$$c__DisplayClass9_0);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::SequentialSlotsProvider::$$c__DisplayClass9_0*, "Oculus.Interaction", "SequentialSlotsProvider/<>c__DisplayClass9_0");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x14
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.SequentialSlotsProvider/<>c__DisplayClass9_0
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  class SequentialSlotsProvider::$$c__DisplayClass9_0 : public ::Il2CppObject {
    public:
    public:
    // public System.Int32 id
    // Size: 0x4
    // Offset: 0x10
    int id;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return id;
    }
    // Get instance field reference: public System.Int32 id
    [[deprecated("Use field access instead!")]] int& dyn_id();
    // public System.Void .ctor()
    // Offset: 0x47B9458
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SequentialSlotsProvider::$$c__DisplayClass9_0* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::SequentialSlotsProvider::$$c__DisplayClass9_0::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SequentialSlotsProvider::$$c__DisplayClass9_0*, creationType>()));
    }
    // System.Boolean <TryFindIndexForInteractor>b__0(System.Int32 i)
    // Offset: 0x47B965C
    bool $TryFindIndexForInteractor$b__0(int i);
  }; // Oculus.Interaction.SequentialSlotsProvider/<>c__DisplayClass9_0
  #pragma pack(pop)
  static check_size<sizeof(SequentialSlotsProvider::$$c__DisplayClass9_0), 16 + sizeof(int)> __Oculus_Interaction_SequentialSlotsProvider_$$c__DisplayClass9_0SizeCheck;
  static_assert(sizeof(SequentialSlotsProvider::$$c__DisplayClass9_0) == 0x14);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::SequentialSlotsProvider::$$c__DisplayClass9_0::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Interaction::SequentialSlotsProvider::$$c__DisplayClass9_0::$TryFindIndexForInteractor$b__0
// Il2CppName: <TryFindIndexForInteractor>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::SequentialSlotsProvider::$$c__DisplayClass9_0::*)(int)>(&Oculus::Interaction::SequentialSlotsProvider::$$c__DisplayClass9_0::$TryFindIndexForInteractor$b__0)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SequentialSlotsProvider::$$c__DisplayClass9_0*), "<TryFindIndexForInteractor>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i});
  }
};
