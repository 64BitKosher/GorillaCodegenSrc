// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction
namespace Oculus::Interaction {
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Component
  class Component;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: AssertUtils
  class AssertUtils;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::AssertUtils);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::AssertUtils*, "Oculus.Interaction", "AssertUtils");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.AssertUtils
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExtensionAttribute] Offset: FFFFFFFF
  class AssertUtils : public ::Il2CppObject {
    public:
    // Nested type: ::Oculus::Interaction::AssertUtils::$$c
    class $$c;
    // static field const value: static public System.String HiglightColor
    static constexpr const char* HiglightColor = "#3366ff";
    // Get static field: static public System.String HiglightColor
    static ::StringW _get_HiglightColor();
    // Set static field: static public System.String HiglightColor
    static void _set_HiglightColor(::StringW value);
    // static public System.Void AssertIsTrue(UnityEngine.Component component, System.Boolean value, System.String whyItFailed, System.String whereItFailed, System.String howToFix)
    // Offset: 0x47DB01C
    static void AssertIsTrue(::UnityEngine::Component* component, bool value, ::StringW whyItFailed, ::StringW whereItFailed, ::StringW howToFix);
    // static public System.Void AssertAspect(UnityEngine.Component component, TValue aspect, System.String aspectLocation, System.String whyItFailed, System.String whereFailed, System.String howToFix)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue>
    static void AssertAspect(::UnityEngine::Component* component, TValue aspect, ::StringW aspectLocation, ::StringW whyItFailed, ::StringW whereFailed, ::StringW howToFix) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::AssertUtils::AssertAspect");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Oculus.Interaction", "AssertUtils", "AssertAspect", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(component), ::il2cpp_utils::ExtractType(aspect), ::il2cpp_utils::ExtractType(aspectLocation), ::il2cpp_utils::ExtractType(whyItFailed), ::il2cpp_utils::ExtractType(whereFailed), ::il2cpp_utils::ExtractType(howToFix)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, component, aspect, aspectLocation, whyItFailed, whereFailed, howToFix);
    }
    // static public System.Void AssertField(UnityEngine.Component component, TValue value, System.String variableName, System.String whyItFailed, System.String whereItFailed, System.String howToFix)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue>
    static void AssertField(::UnityEngine::Component* component, TValue value, ::StringW variableName, ::StringW whyItFailed, ::StringW whereItFailed, ::StringW howToFix) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::AssertUtils::AssertField");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Oculus.Interaction", "AssertUtils", "AssertField", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(component), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(variableName), ::il2cpp_utils::ExtractType(whyItFailed), ::il2cpp_utils::ExtractType(whereItFailed), ::il2cpp_utils::ExtractType(howToFix)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, component, value, variableName, whyItFailed, whereItFailed, howToFix);
    }
    // static public System.Void AssertCollectionField(UnityEngine.Component component, System.Collections.Generic.IEnumerable`1<TValue> value, System.String variableName, System.String whyItFailed, System.String whereFailed, System.String howToFix)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue>
    static void AssertCollectionField(::UnityEngine::Component* component, ::System::Collections::Generic::IEnumerable_1<TValue>* value, ::StringW variableName, ::StringW whyItFailed, ::StringW whereFailed, ::StringW howToFix) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::AssertUtils::AssertCollectionField");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Oculus.Interaction", "AssertUtils", "AssertCollectionField", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(component), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(variableName), ::il2cpp_utils::ExtractType(whyItFailed), ::il2cpp_utils::ExtractType(whereFailed), ::il2cpp_utils::ExtractType(howToFix)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, component, value, variableName, whyItFailed, whereFailed, howToFix);
    }
    // static public System.Void AssertCollectionItems(UnityEngine.Component component, System.Collections.Generic.IEnumerable`1<TValue> value, System.String variableName, System.String whyItFailed, System.String whereItFailed, System.String howToFix)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue>
    static void AssertCollectionItems(::UnityEngine::Component* component, ::System::Collections::Generic::IEnumerable_1<TValue>* value, ::StringW variableName, ::StringW whyItFailed, ::StringW whereItFailed, ::StringW howToFix) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::AssertUtils::AssertCollectionItems");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Oculus.Interaction", "AssertUtils", "AssertCollectionItems", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(component), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(variableName), ::il2cpp_utils::ExtractType(whyItFailed), ::il2cpp_utils::ExtractType(whereItFailed), ::il2cpp_utils::ExtractType(howToFix)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, component, value, variableName, whyItFailed, whereItFailed, howToFix);
    }
    // static public System.String Nicify(System.String variableName)
    // Offset: 0x47DB054
    static ::StringW Nicify(::StringW variableName);
  }; // Oculus.Interaction.AssertUtils
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::AssertUtils::AssertIsTrue
// Il2CppName: AssertIsTrue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Component*, bool, ::StringW, ::StringW, ::StringW)>(&Oculus::Interaction::AssertUtils::AssertIsTrue)> {
  static const MethodInfo* get() {
    static auto* component = &::il2cpp_utils::GetClassFromName("UnityEngine", "Component")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* whyItFailed = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* whereItFailed = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* howToFix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::AssertUtils*), "AssertIsTrue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{component, value, whyItFailed, whereItFailed, howToFix});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::AssertUtils::AssertAspect
// Il2CppName: AssertAspect
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Oculus::Interaction::AssertUtils::AssertField
// Il2CppName: AssertField
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Oculus::Interaction::AssertUtils::AssertCollectionField
// Il2CppName: AssertCollectionField
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Oculus::Interaction::AssertUtils::AssertCollectionItems
// Il2CppName: AssertCollectionItems
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Oculus::Interaction::AssertUtils::Nicify
// Il2CppName: Nicify
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW)>(&Oculus::Interaction::AssertUtils::Nicify)> {
  static const MethodInfo* get() {
    static auto* variableName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::AssertUtils*), "Nicify", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{variableName});
  }
};
