// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Oculus.Interaction.ITransformer
#include "Oculus/Interaction/ITransformer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction
namespace Oculus::Interaction {
  // Forward declaring type: IGrabbable
  class IGrabbable;
  // Skipping declaration: Axis because it is already included!
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: TwoGrabRotateTransformer
  class TwoGrabRotateTransformer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::TwoGrabRotateTransformer);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::TwoGrabRotateTransformer*, "Oculus.Interaction", "TwoGrabRotateTransformer");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x54
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.TwoGrabRotateTransformer
  // [TokenAttribute] Offset: FFFFFFFF
  class TwoGrabRotateTransformer : public ::UnityEngine::MonoBehaviour/*, public ::Oculus::Interaction::ITransformer*/ {
    public:
    // Nested type: ::Oculus::Interaction::TwoGrabRotateTransformer::Axis
    struct Axis;
    // Nested type: ::Oculus::Interaction::TwoGrabRotateTransformer::TwoGrabRotateConstraints
    class TwoGrabRotateConstraints;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Oculus.Interaction.TwoGrabRotateTransformer/Axis
    // [TokenAttribute] Offset: FFFFFFFF
    struct Axis/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: Axis
      constexpr Axis(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Oculus.Interaction.TwoGrabRotateTransformer/Axis Right
      static constexpr const int Right = 0;
      // Get static field: static public Oculus.Interaction.TwoGrabRotateTransformer/Axis Right
      static ::Oculus::Interaction::TwoGrabRotateTransformer::Axis _get_Right();
      // Set static field: static public Oculus.Interaction.TwoGrabRotateTransformer/Axis Right
      static void _set_Right(::Oculus::Interaction::TwoGrabRotateTransformer::Axis value);
      // static field const value: static public Oculus.Interaction.TwoGrabRotateTransformer/Axis Up
      static constexpr const int Up = 1;
      // Get static field: static public Oculus.Interaction.TwoGrabRotateTransformer/Axis Up
      static ::Oculus::Interaction::TwoGrabRotateTransformer::Axis _get_Up();
      // Set static field: static public Oculus.Interaction.TwoGrabRotateTransformer/Axis Up
      static void _set_Up(::Oculus::Interaction::TwoGrabRotateTransformer::Axis value);
      // static field const value: static public Oculus.Interaction.TwoGrabRotateTransformer/Axis Forward
      static constexpr const int Forward = 2;
      // Get static field: static public Oculus.Interaction.TwoGrabRotateTransformer/Axis Forward
      static ::Oculus::Interaction::TwoGrabRotateTransformer::Axis _get_Forward();
      // Set static field: static public Oculus.Interaction.TwoGrabRotateTransformer/Axis Forward
      static void _set_Forward(::Oculus::Interaction::TwoGrabRotateTransformer::Axis value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Oculus.Interaction.TwoGrabRotateTransformer/Axis
    #pragma pack(pop)
    static check_size<sizeof(TwoGrabRotateTransformer::Axis), 0 + sizeof(int)> __Oculus_Interaction_TwoGrabRotateTransformer_AxisSizeCheck;
    static_assert(sizeof(TwoGrabRotateTransformer::Axis) == 0x4);
    public:
    // private UnityEngine.Transform _pivotTransform
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Transform* pivotTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private Oculus.Interaction.TwoGrabRotateTransformer/Axis _rotationAxis
    // Size: 0x4
    // Offset: 0x28
    ::Oculus::Interaction::TwoGrabRotateTransformer::Axis rotationAxis;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::TwoGrabRotateTransformer::Axis) == 0x4);
    // Padding between fields: rotationAxis and: constraints
    char __padding1[0x4] = {};
    // private Oculus.Interaction.TwoGrabRotateTransformer/TwoGrabRotateConstraints _constraints
    // Size: 0x8
    // Offset: 0x30
    ::Oculus::Interaction::TwoGrabRotateTransformer::TwoGrabRotateConstraints* constraints;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::TwoGrabRotateTransformer::TwoGrabRotateConstraints*) == 0x8);
    // private System.Single _relativeAngle
    // Size: 0x4
    // Offset: 0x38
    float relativeAngle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _constrainedRelativeAngle
    // Size: 0x4
    // Offset: 0x3C
    float constrainedRelativeAngle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private Oculus.Interaction.IGrabbable _grabbable
    // Size: 0x8
    // Offset: 0x40
    ::Oculus::Interaction::IGrabbable* grabbable;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::IGrabbable*) == 0x8);
    // private UnityEngine.Vector3 _previousHandsVectorOnPlane
    // Size: 0xC
    // Offset: 0x48
    ::UnityEngine::Vector3 previousHandsVectorOnPlane;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::ITransformer
    operator ::Oculus::Interaction::ITransformer() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::ITransformer*>(this);
    }
    // Get instance field reference: private UnityEngine.Transform _pivotTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__pivotTransform();
    // Get instance field reference: private Oculus.Interaction.TwoGrabRotateTransformer/Axis _rotationAxis
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::TwoGrabRotateTransformer::Axis& dyn__rotationAxis();
    // Get instance field reference: private Oculus.Interaction.TwoGrabRotateTransformer/TwoGrabRotateConstraints _constraints
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::TwoGrabRotateTransformer::TwoGrabRotateConstraints*& dyn__constraints();
    // Get instance field reference: private System.Single _relativeAngle
    [[deprecated("Use field access instead!")]] float& dyn__relativeAngle();
    // Get instance field reference: private System.Single _constrainedRelativeAngle
    [[deprecated("Use field access instead!")]] float& dyn__constrainedRelativeAngle();
    // Get instance field reference: private Oculus.Interaction.IGrabbable _grabbable
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::IGrabbable*& dyn__grabbable();
    // Get instance field reference: private UnityEngine.Vector3 _previousHandsVectorOnPlane
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__previousHandsVectorOnPlane();
    // private UnityEngine.Transform get_PivotTransform()
    // Offset: 0x47A77C0
    ::UnityEngine::Transform* get_PivotTransform();
    // public System.Void Initialize(Oculus.Interaction.IGrabbable grabbable)
    // Offset: 0x47A78B0
    void Initialize(::Oculus::Interaction::IGrabbable* grabbable);
    // public System.Void BeginTransform()
    // Offset: 0x47A78B8
    void BeginTransform();
    // public System.Void UpdateTransform()
    // Offset: 0x47A7CC0
    void UpdateTransform();
    // public System.Void EndTransform()
    // Offset: 0x47A7E74
    void EndTransform();
    // private UnityEngine.Vector3 CalculateRotationAxisInWorldSpace()
    // Offset: 0x47A78E4
    ::UnityEngine::Vector3 CalculateRotationAxisInWorldSpace();
    // private UnityEngine.Vector3 CalculateHandsVectorOnPlane(UnityEngine.Vector3 planeNormal)
    // Offset: 0x47A79D8
    ::UnityEngine::Vector3 CalculateHandsVectorOnPlane(::UnityEngine::Vector3 planeNormal);
    // public System.Void InjectOptionalPivotTransform(UnityEngine.Transform pivotTransform)
    // Offset: 0x47A7E78
    void InjectOptionalPivotTransform(::UnityEngine::Transform* pivotTransform);
    // public System.Void InjectOptionalRotationAxis(Oculus.Interaction.TwoGrabRotateTransformer/Axis rotationAxis)
    // Offset: 0x47A7E80
    void InjectOptionalRotationAxis(::Oculus::Interaction::TwoGrabRotateTransformer::Axis rotationAxis);
    // public System.Void InjectOptionalConstraints(Oculus.Interaction.TwoGrabRotateTransformer/TwoGrabRotateConstraints constraints)
    // Offset: 0x47A7E88
    void InjectOptionalConstraints(::Oculus::Interaction::TwoGrabRotateTransformer::TwoGrabRotateConstraints* constraints);
    // public System.Void .ctor()
    // Offset: 0x47A7E90
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TwoGrabRotateTransformer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::TwoGrabRotateTransformer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TwoGrabRotateTransformer*, creationType>()));
    }
  }; // Oculus.Interaction.TwoGrabRotateTransformer
  #pragma pack(pop)
  static check_size<sizeof(TwoGrabRotateTransformer), 72 + sizeof(::UnityEngine::Vector3)> __Oculus_Interaction_TwoGrabRotateTransformerSizeCheck;
  static_assert(sizeof(TwoGrabRotateTransformer) == 0x54);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::TwoGrabRotateTransformer::Axis, "Oculus.Interaction", "TwoGrabRotateTransformer/Axis");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::TwoGrabRotateTransformer::get_PivotTransform
// Il2CppName: get_PivotTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (Oculus::Interaction::TwoGrabRotateTransformer::*)()>(&Oculus::Interaction::TwoGrabRotateTransformer::get_PivotTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TwoGrabRotateTransformer*), "get_PivotTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TwoGrabRotateTransformer::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TwoGrabRotateTransformer::*)(::Oculus::Interaction::IGrabbable*)>(&Oculus::Interaction::TwoGrabRotateTransformer::Initialize)> {
  static const MethodInfo* get() {
    static auto* grabbable = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IGrabbable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TwoGrabRotateTransformer*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{grabbable});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TwoGrabRotateTransformer::BeginTransform
// Il2CppName: BeginTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TwoGrabRotateTransformer::*)()>(&Oculus::Interaction::TwoGrabRotateTransformer::BeginTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TwoGrabRotateTransformer*), "BeginTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TwoGrabRotateTransformer::UpdateTransform
// Il2CppName: UpdateTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TwoGrabRotateTransformer::*)()>(&Oculus::Interaction::TwoGrabRotateTransformer::UpdateTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TwoGrabRotateTransformer*), "UpdateTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TwoGrabRotateTransformer::EndTransform
// Il2CppName: EndTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TwoGrabRotateTransformer::*)()>(&Oculus::Interaction::TwoGrabRotateTransformer::EndTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TwoGrabRotateTransformer*), "EndTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TwoGrabRotateTransformer::CalculateRotationAxisInWorldSpace
// Il2CppName: CalculateRotationAxisInWorldSpace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Oculus::Interaction::TwoGrabRotateTransformer::*)()>(&Oculus::Interaction::TwoGrabRotateTransformer::CalculateRotationAxisInWorldSpace)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TwoGrabRotateTransformer*), "CalculateRotationAxisInWorldSpace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TwoGrabRotateTransformer::CalculateHandsVectorOnPlane
// Il2CppName: CalculateHandsVectorOnPlane
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Oculus::Interaction::TwoGrabRotateTransformer::*)(::UnityEngine::Vector3)>(&Oculus::Interaction::TwoGrabRotateTransformer::CalculateHandsVectorOnPlane)> {
  static const MethodInfo* get() {
    static auto* planeNormal = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TwoGrabRotateTransformer*), "CalculateHandsVectorOnPlane", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{planeNormal});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TwoGrabRotateTransformer::InjectOptionalPivotTransform
// Il2CppName: InjectOptionalPivotTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TwoGrabRotateTransformer::*)(::UnityEngine::Transform*)>(&Oculus::Interaction::TwoGrabRotateTransformer::InjectOptionalPivotTransform)> {
  static const MethodInfo* get() {
    static auto* pivotTransform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TwoGrabRotateTransformer*), "InjectOptionalPivotTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pivotTransform});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TwoGrabRotateTransformer::InjectOptionalRotationAxis
// Il2CppName: InjectOptionalRotationAxis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TwoGrabRotateTransformer::*)(::Oculus::Interaction::TwoGrabRotateTransformer::Axis)>(&Oculus::Interaction::TwoGrabRotateTransformer::InjectOptionalRotationAxis)> {
  static const MethodInfo* get() {
    static auto* rotationAxis = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "TwoGrabRotateTransformer/Axis")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TwoGrabRotateTransformer*), "InjectOptionalRotationAxis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rotationAxis});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TwoGrabRotateTransformer::InjectOptionalConstraints
// Il2CppName: InjectOptionalConstraints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TwoGrabRotateTransformer::*)(::Oculus::Interaction::TwoGrabRotateTransformer::TwoGrabRotateConstraints*)>(&Oculus::Interaction::TwoGrabRotateTransformer::InjectOptionalConstraints)> {
  static const MethodInfo* get() {
    static auto* constraints = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "TwoGrabRotateTransformer/TwoGrabRotateConstraints")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TwoGrabRotateTransformer*), "InjectOptionalConstraints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{constraints});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TwoGrabRotateTransformer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
