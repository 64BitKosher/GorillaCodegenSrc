// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Pose
#include "UnityEngine/Pose.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Object because it is already included!
}
// Forward declaring namespace: Oculus::Interaction::Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: IHmd
  class IHmd;
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: CenterEyeOffset
  class CenterEyeOffset;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::CenterEyeOffset);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::CenterEyeOffset*, "Oculus.Interaction", "CenterEyeOffset");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x69
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.CenterEyeOffset
  // [TokenAttribute] Offset: FFFFFFFF
  class CenterEyeOffset : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.Object _hmd
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Object* hmd;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.Input.IHmd <Hmd>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    ::Oculus::Interaction::Input::IHmd* Hmd;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::IHmd*) == 0x8);
    // private UnityEngine.Vector3 _offset
    // Size: 0xC
    // Offset: 0x30
    ::UnityEngine::Vector3 offset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Quaternion _rotation
    // Size: 0x10
    // Offset: 0x3C
    ::UnityEngine::Quaternion rotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private UnityEngine.Pose _cachedPose
    // Size: 0x1C
    // Offset: 0x4C
    ::UnityEngine::Pose cachedPose;
    // Field size check
    static_assert(sizeof(::UnityEngine::Pose) == 0x1C);
    // protected System.Boolean _started
    // Size: 0x1
    // Offset: 0x68
    bool started;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private UnityEngine.Object _hmd
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__hmd();
    // Get instance field reference: private Oculus.Interaction.Input.IHmd <Hmd>k__BackingField
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::IHmd*& dyn_$Hmd$k__BackingField();
    // Get instance field reference: private UnityEngine.Vector3 _offset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__offset();
    // Get instance field reference: private UnityEngine.Quaternion _rotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn__rotation();
    // Get instance field reference: private UnityEngine.Pose _cachedPose
    [[deprecated("Use field access instead!")]] ::UnityEngine::Pose& dyn__cachedPose();
    // Get instance field reference: protected System.Boolean _started
    [[deprecated("Use field access instead!")]] bool& dyn__started();
    // public Oculus.Interaction.Input.IHmd get_Hmd()
    // Offset: 0x47CEFB4
    ::Oculus::Interaction::Input::IHmd* get_Hmd();
    // private System.Void set_Hmd(Oculus.Interaction.Input.IHmd value)
    // Offset: 0x47CEFBC
    void set_Hmd(::Oculus::Interaction::Input::IHmd* value);
    // protected System.Void Awake()
    // Offset: 0x47CEFC4
    void Awake();
    // protected System.Void Start()
    // Offset: 0x47CF01C
    void Start();
    // protected System.Void OnEnable()
    // Offset: 0x47CF054
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x47CF154
    void OnDisable();
    // private System.Void HandleUpdated()
    // Offset: 0x47CF254
    void HandleUpdated();
    // public System.Void GetOffset(ref UnityEngine.Pose pose)
    // Offset: 0x47CF35C
    void GetOffset(ByRef<::UnityEngine::Pose> pose);
    // public System.Void GetWorldPose(ref UnityEngine.Pose pose)
    // Offset: 0x47CF378
    void GetWorldPose(ByRef<::UnityEngine::Pose> pose);
    // public System.Void InjectOffset(UnityEngine.Vector3 offset)
    // Offset: 0x47CF3D4
    void InjectOffset(::UnityEngine::Vector3 offset);
    // public System.Void InjectRotation(UnityEngine.Quaternion rotation)
    // Offset: 0x47CF3E0
    void InjectRotation(::UnityEngine::Quaternion rotation);
    // public System.Void InjectAllCenterEyeOffset(Oculus.Interaction.Input.IHmd hmd, UnityEngine.Vector3 offset, UnityEngine.Quaternion rotation)
    // Offset: 0x47CF3EC
    void InjectAllCenterEyeOffset(::Oculus::Interaction::Input::IHmd* hmd, ::UnityEngine::Vector3 offset, ::UnityEngine::Quaternion rotation);
    // public System.Void InjectHmd(Oculus.Interaction.Input.IHmd hmd)
    // Offset: 0x47CF44C
    void InjectHmd(::Oculus::Interaction::Input::IHmd* hmd);
    // public System.Void .ctor()
    // Offset: 0x47CF518
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CenterEyeOffset* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::CenterEyeOffset::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CenterEyeOffset*, creationType>()));
    }
  }; // Oculus.Interaction.CenterEyeOffset
  #pragma pack(pop)
  static check_size<sizeof(CenterEyeOffset), 104 + sizeof(bool)> __Oculus_Interaction_CenterEyeOffsetSizeCheck;
  static_assert(sizeof(CenterEyeOffset) == 0x69);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::CenterEyeOffset::get_Hmd
// Il2CppName: get_Hmd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Input::IHmd* (Oculus::Interaction::CenterEyeOffset::*)()>(&Oculus::Interaction::CenterEyeOffset::get_Hmd)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::CenterEyeOffset*), "get_Hmd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::CenterEyeOffset::set_Hmd
// Il2CppName: set_Hmd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::CenterEyeOffset::*)(::Oculus::Interaction::Input::IHmd*)>(&Oculus::Interaction::CenterEyeOffset::set_Hmd)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHmd")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::CenterEyeOffset*), "set_Hmd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::CenterEyeOffset::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::CenterEyeOffset::*)()>(&Oculus::Interaction::CenterEyeOffset::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::CenterEyeOffset*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::CenterEyeOffset::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::CenterEyeOffset::*)()>(&Oculus::Interaction::CenterEyeOffset::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::CenterEyeOffset*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::CenterEyeOffset::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::CenterEyeOffset::*)()>(&Oculus::Interaction::CenterEyeOffset::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::CenterEyeOffset*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::CenterEyeOffset::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::CenterEyeOffset::*)()>(&Oculus::Interaction::CenterEyeOffset::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::CenterEyeOffset*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::CenterEyeOffset::HandleUpdated
// Il2CppName: HandleUpdated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::CenterEyeOffset::*)()>(&Oculus::Interaction::CenterEyeOffset::HandleUpdated)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::CenterEyeOffset*), "HandleUpdated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::CenterEyeOffset::GetOffset
// Il2CppName: GetOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::CenterEyeOffset::*)(ByRef<::UnityEngine::Pose>)>(&Oculus::Interaction::CenterEyeOffset::GetOffset)> {
  static const MethodInfo* get() {
    static auto* pose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::CenterEyeOffset*), "GetOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pose});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::CenterEyeOffset::GetWorldPose
// Il2CppName: GetWorldPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::CenterEyeOffset::*)(ByRef<::UnityEngine::Pose>)>(&Oculus::Interaction::CenterEyeOffset::GetWorldPose)> {
  static const MethodInfo* get() {
    static auto* pose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::CenterEyeOffset*), "GetWorldPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pose});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::CenterEyeOffset::InjectOffset
// Il2CppName: InjectOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::CenterEyeOffset::*)(::UnityEngine::Vector3)>(&Oculus::Interaction::CenterEyeOffset::InjectOffset)> {
  static const MethodInfo* get() {
    static auto* offset = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::CenterEyeOffset*), "InjectOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{offset});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::CenterEyeOffset::InjectRotation
// Il2CppName: InjectRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::CenterEyeOffset::*)(::UnityEngine::Quaternion)>(&Oculus::Interaction::CenterEyeOffset::InjectRotation)> {
  static const MethodInfo* get() {
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::CenterEyeOffset*), "InjectRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rotation});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::CenterEyeOffset::InjectAllCenterEyeOffset
// Il2CppName: InjectAllCenterEyeOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::CenterEyeOffset::*)(::Oculus::Interaction::Input::IHmd*, ::UnityEngine::Vector3, ::UnityEngine::Quaternion)>(&Oculus::Interaction::CenterEyeOffset::InjectAllCenterEyeOffset)> {
  static const MethodInfo* get() {
    static auto* hmd = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHmd")->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::CenterEyeOffset*), "InjectAllCenterEyeOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hmd, offset, rotation});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::CenterEyeOffset::InjectHmd
// Il2CppName: InjectHmd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::CenterEyeOffset::*)(::Oculus::Interaction::Input::IHmd*)>(&Oculus::Interaction::CenterEyeOffset::InjectHmd)> {
  static const MethodInfo* get() {
    static auto* hmd = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHmd")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::CenterEyeOffset*), "InjectHmd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hmd});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::CenterEyeOffset::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
