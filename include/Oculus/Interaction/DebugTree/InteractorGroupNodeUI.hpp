// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Oculus.Interaction.DebugTree.INodeUI`1
#include "Oculus/Interaction/DebugTree/INodeUI_1.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction
namespace Oculus::Interaction {
  // Forward declaring type: IInteractor
  class IInteractor;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: RectTransform
  class RectTransform;
}
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TextMeshProUGUI
  class TextMeshProUGUI;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Image
  class Image;
}
// Forward declaring namespace: Oculus::Interaction::DebugTree
namespace Oculus::Interaction::DebugTree {
  // Forward declaring type: ITreeNode`1<TLeaf>
  template<typename TLeaf>
  class ITreeNode_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.DebugTree
namespace Oculus::Interaction::DebugTree {
  // Forward declaring type: InteractorGroupNodeUI
  class InteractorGroupNodeUI;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::DebugTree::InteractorGroupNodeUI);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::DebugTree::InteractorGroupNodeUI*, "Oculus.Interaction.DebugTree", "InteractorGroupNodeUI");
// Type namespace: Oculus.Interaction.DebugTree
namespace Oculus::Interaction::DebugTree {
  // Size: 0x8A
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.DebugTree.InteractorGroupNodeUI
  // [TokenAttribute] Offset: FFFFFFFF
  class InteractorGroupNodeUI : public ::UnityEngine::MonoBehaviour/*, public ::Oculus::Interaction::DebugTree::INodeUI_1<::Oculus::Interaction::IInteractor*>*/ {
    public:
    public:
    // private UnityEngine.RectTransform _childArea
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::RectTransform* childArea;
    // Field size check
    static_assert(sizeof(::UnityEngine::RectTransform*) == 0x8);
    // private UnityEngine.RectTransform _connectingLine
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::RectTransform* connectingLine;
    // Field size check
    static_assert(sizeof(::UnityEngine::RectTransform*) == 0x8);
    // private TMPro.TextMeshProUGUI _label
    // Size: 0x8
    // Offset: 0x30
    ::TMPro::TextMeshProUGUI* label;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshProUGUI*) == 0x8);
    // private UnityEngine.UI.Image _activeImage
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::UI::Image* activeImage;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Image*) == 0x8);
    // private UnityEngine.Color _selectColor
    // Size: 0x10
    // Offset: 0x40
    ::UnityEngine::Color selectColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color _hoverColor
    // Size: 0x10
    // Offset: 0x50
    ::UnityEngine::Color hoverColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color _normalColor
    // Size: 0x10
    // Offset: 0x60
    ::UnityEngine::Color normalColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color _disabledColor
    // Size: 0x10
    // Offset: 0x70
    ::UnityEngine::Color disabledColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private Oculus.Interaction.DebugTree.ITreeNode`1<Oculus.Interaction.IInteractor> _boundNode
    // Size: 0x8
    // Offset: 0x80
    ::Oculus::Interaction::DebugTree::ITreeNode_1<::Oculus::Interaction::IInteractor*>* boundNode;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::DebugTree::ITreeNode_1<::Oculus::Interaction::IInteractor*>*) == 0x8);
    // private System.Boolean _isRoot
    // Size: 0x1
    // Offset: 0x88
    bool isRoot;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _isDuplicate
    // Size: 0x1
    // Offset: 0x89
    bool isDuplicate;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::DebugTree::INodeUI_1<::Oculus::Interaction::IInteractor*>
    operator ::Oculus::Interaction::DebugTree::INodeUI_1<::Oculus::Interaction::IInteractor*>() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::DebugTree::INodeUI_1<::Oculus::Interaction::IInteractor*>*>(this);
    }
    // static field const value: static private System.String OBJNAME_FORMAT
    static constexpr const char* OBJNAME_FORMAT = "<color=#dddddd><size=85%>{0}</size></color>";
    // Get static field: static private System.String OBJNAME_FORMAT
    static ::StringW _get_OBJNAME_FORMAT();
    // Set static field: static private System.String OBJNAME_FORMAT
    static void _set_OBJNAME_FORMAT(::StringW value);
    // Get instance field reference: private UnityEngine.RectTransform _childArea
    [[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& dyn__childArea();
    // Get instance field reference: private UnityEngine.RectTransform _connectingLine
    [[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& dyn__connectingLine();
    // Get instance field reference: private TMPro.TextMeshProUGUI _label
    [[deprecated("Use field access instead!")]] ::TMPro::TextMeshProUGUI*& dyn__label();
    // Get instance field reference: private UnityEngine.UI.Image _activeImage
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Image*& dyn__activeImage();
    // Get instance field reference: private UnityEngine.Color _selectColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__selectColor();
    // Get instance field reference: private UnityEngine.Color _hoverColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__hoverColor();
    // Get instance field reference: private UnityEngine.Color _normalColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__normalColor();
    // Get instance field reference: private UnityEngine.Color _disabledColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__disabledColor();
    // Get instance field reference: private Oculus.Interaction.DebugTree.ITreeNode`1<Oculus.Interaction.IInteractor> _boundNode
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::DebugTree::ITreeNode_1<::Oculus::Interaction::IInteractor*>*& dyn__boundNode();
    // Get instance field reference: private System.Boolean _isRoot
    [[deprecated("Use field access instead!")]] bool& dyn__isRoot();
    // Get instance field reference: private System.Boolean _isDuplicate
    [[deprecated("Use field access instead!")]] bool& dyn__isDuplicate();
    // public UnityEngine.RectTransform get_ChildArea()
    // Offset: 0x47FEFF4
    ::UnityEngine::RectTransform* get_ChildArea();
    // public System.Void Bind(Oculus.Interaction.DebugTree.ITreeNode`1<Oculus.Interaction.IInteractor> node, System.Boolean isRoot, System.Boolean isDuplicate)
    // Offset: 0x47FEFFC
    void Bind(::Oculus::Interaction::DebugTree::ITreeNode_1<::Oculus::Interaction::IInteractor*>* node, bool isRoot, bool isDuplicate);
    // protected System.Void Start()
    // Offset: 0x47FF260
    void Start();
    // protected System.Void Update()
    // Offset: 0x47FF264
    void Update();
    // private System.String GetLabelText(Oculus.Interaction.DebugTree.ITreeNode`1<Oculus.Interaction.IInteractor> node)
    // Offset: 0x47FF05C
    ::StringW GetLabelText(::Oculus::Interaction::DebugTree::ITreeNode_1<::Oculus::Interaction::IInteractor*>* node);
    // public System.Void .ctor()
    // Offset: 0x47FF470
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InteractorGroupNodeUI* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::DebugTree::InteractorGroupNodeUI::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InteractorGroupNodeUI*, creationType>()));
    }
  }; // Oculus.Interaction.DebugTree.InteractorGroupNodeUI
  #pragma pack(pop)
  static check_size<sizeof(InteractorGroupNodeUI), 137 + sizeof(bool)> __Oculus_Interaction_DebugTree_InteractorGroupNodeUISizeCheck;
  static_assert(sizeof(InteractorGroupNodeUI) == 0x8A);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::DebugTree::InteractorGroupNodeUI::get_ChildArea
// Il2CppName: get_ChildArea
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::RectTransform* (Oculus::Interaction::DebugTree::InteractorGroupNodeUI::*)()>(&Oculus::Interaction::DebugTree::InteractorGroupNodeUI::get_ChildArea)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::DebugTree::InteractorGroupNodeUI*), "get_ChildArea", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::DebugTree::InteractorGroupNodeUI::Bind
// Il2CppName: Bind
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::DebugTree::InteractorGroupNodeUI::*)(::Oculus::Interaction::DebugTree::ITreeNode_1<::Oculus::Interaction::IInteractor*>*, bool, bool)>(&Oculus::Interaction::DebugTree::InteractorGroupNodeUI::Bind)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Oculus.Interaction.DebugTree", "ITreeNode`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IInteractor")})->byval_arg;
    static auto* isRoot = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* isDuplicate = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::DebugTree::InteractorGroupNodeUI*), "Bind", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node, isRoot, isDuplicate});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::DebugTree::InteractorGroupNodeUI::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::DebugTree::InteractorGroupNodeUI::*)()>(&Oculus::Interaction::DebugTree::InteractorGroupNodeUI::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::DebugTree::InteractorGroupNodeUI*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::DebugTree::InteractorGroupNodeUI::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::DebugTree::InteractorGroupNodeUI::*)()>(&Oculus::Interaction::DebugTree::InteractorGroupNodeUI::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::DebugTree::InteractorGroupNodeUI*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::DebugTree::InteractorGroupNodeUI::GetLabelText
// Il2CppName: GetLabelText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Oculus::Interaction::DebugTree::InteractorGroupNodeUI::*)(::Oculus::Interaction::DebugTree::ITreeNode_1<::Oculus::Interaction::IInteractor*>*)>(&Oculus::Interaction::DebugTree::InteractorGroupNodeUI::GetLabelText)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Oculus.Interaction.DebugTree", "ITreeNode`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IInteractor")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::DebugTree::InteractorGroupNodeUI*), "GetLabelText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::DebugTree::InteractorGroupNodeUI::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
