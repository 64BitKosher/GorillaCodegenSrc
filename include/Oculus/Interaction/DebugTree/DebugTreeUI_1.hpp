// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: RectTransform
  class RectTransform;
}
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TMP_Text
  class TMP_Text;
}
// Forward declaring namespace: Oculus::Interaction::DebugTree
namespace Oculus::Interaction::DebugTree {
  // Forward declaring type: DebugTree`1<TLeaf>
  template<typename TLeaf>
  class DebugTree_1;
  // Forward declaring type: ITreeNode`1<TLeaf>
  template<typename TLeaf>
  class ITreeNode_1;
  // Forward declaring type: INodeUI`1<TLeaf>
  template<typename TLeaf>
  class INodeUI_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.DebugTree
namespace Oculus::Interaction::DebugTree {
  // Forward declaring type: DebugTreeUI`1<TLeaf>
  template<typename TLeaf>
  class DebugTreeUI_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::Oculus::Interaction::DebugTree::DebugTreeUI_1, "Oculus.Interaction.DebugTree", "DebugTreeUI`1");
// Type namespace: Oculus.Interaction.DebugTree
namespace Oculus::Interaction::DebugTree {
  // WARNING Size may be invalid!
  // Autogenerated type: Oculus.Interaction.DebugTree.DebugTreeUI`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename TLeaf>
  class DebugTreeUI_1 : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.RectTransform _contentArea
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::RectTransform* contentArea;
    // Field size check
    static_assert(sizeof(::UnityEngine::RectTransform*) == 0x8);
    // private TMPro.TMP_Text _title
    // Size: 0x8
    // Offset: 0x0
    ::TMPro::TMP_Text* title;
    // Field size check
    static_assert(sizeof(::TMPro::TMP_Text*) == 0x8);
    // private System.Boolean _buildTreeOnStart
    // Size: 0x1
    // Offset: 0x0
    bool buildTreeOnStart;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private Oculus.Interaction.DebugTree.DebugTree`1<TLeaf> _tree
    // Size: 0x8
    // Offset: 0x0
    ::Oculus::Interaction::DebugTree::DebugTree_1<TLeaf>* tree;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::DebugTree::DebugTree_1<TLeaf>*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<Oculus.Interaction.DebugTree.ITreeNode`1<TLeaf>,Oculus.Interaction.DebugTree.INodeUI`1<TLeaf>> _nodeToUI
    // Size: 0x8
    // Offset: 0x0
    ::System::Collections::Generic::Dictionary_2<::Oculus::Interaction::DebugTree::ITreeNode_1<TLeaf>*, ::Oculus::Interaction::DebugTree::INodeUI_1<TLeaf>*>* nodeToUI;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::Oculus::Interaction::DebugTree::ITreeNode_1<TLeaf>*, ::Oculus::Interaction::DebugTree::INodeUI_1<TLeaf>*>*) == 0x8);
    public:
    // Autogenerated instance field getter
    // Get instance field: private UnityEngine.RectTransform _contentArea
    [[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& dyn__contentArea() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::DebugTree::DebugTreeUI_1::dyn__contentArea");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_contentArea"))->offset;
      return *reinterpret_cast<::UnityEngine::RectTransform**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private TMPro.TMP_Text _title
    [[deprecated("Use field access instead!")]] ::TMPro::TMP_Text*& dyn__title() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::DebugTree::DebugTreeUI_1::dyn__title");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_title"))->offset;
      return *reinterpret_cast<::TMPro::TMP_Text**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Boolean _buildTreeOnStart
    [[deprecated("Use field access instead!")]] bool& dyn__buildTreeOnStart() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::DebugTree::DebugTreeUI_1::dyn__buildTreeOnStart");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_buildTreeOnStart"))->offset;
      return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private Oculus.Interaction.DebugTree.DebugTree`1<TLeaf> _tree
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::DebugTree::DebugTree_1<TLeaf>*& dyn__tree() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::DebugTree::DebugTreeUI_1::dyn__tree");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_tree"))->offset;
      return *reinterpret_cast<::Oculus::Interaction::DebugTree::DebugTree_1<TLeaf>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Collections.Generic.Dictionary`2<Oculus.Interaction.DebugTree.ITreeNode`1<TLeaf>,Oculus.Interaction.DebugTree.INodeUI`1<TLeaf>> _nodeToUI
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::Oculus::Interaction::DebugTree::ITreeNode_1<TLeaf>*, ::Oculus::Interaction::DebugTree::INodeUI_1<TLeaf>*>*& dyn__nodeToUI() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::DebugTree::DebugTreeUI_1::dyn__nodeToUI");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_nodeToUI"))->offset;
      return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<::Oculus::Interaction::DebugTree::ITreeNode_1<TLeaf>*, ::Oculus::Interaction::DebugTree::INodeUI_1<TLeaf>*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // protected TLeaf get_Value()
    // Offset: 0xFFFFFFFFFFFFFFFF
    TLeaf get_Value() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::DebugTree::DebugTreeUI_1::get_Value");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Oculus::Interaction::DebugTree::DebugTreeUI_1<TLeaf>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<TLeaf, false>(this, ___internal__method);
    }
    // protected Oculus.Interaction.DebugTree.INodeUI`1<TLeaf> get_NodePrefab()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Oculus::Interaction::DebugTree::INodeUI_1<TLeaf>* get_NodePrefab() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::DebugTree::DebugTreeUI_1::get_NodePrefab");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Oculus::Interaction::DebugTree::DebugTreeUI_1<TLeaf>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::Oculus::Interaction::DebugTree::INodeUI_1<TLeaf>*, false>(this, ___internal__method);
    }
    // protected System.Void Start()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Start() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::DebugTree::DebugTreeUI_1::Start");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Oculus::Interaction::DebugTree::DebugTreeUI_1<TLeaf>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public System.Void BuildTree()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void BuildTree() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::DebugTree::DebugTreeUI_1::BuildTree");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BuildTree", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // private System.Void BuildTreeRecursive(UnityEngine.RectTransform parent, Oculus.Interaction.DebugTree.ITreeNode`1<TLeaf> node, System.Boolean isRoot)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void BuildTreeRecursive(::UnityEngine::RectTransform* parent, ::Oculus::Interaction::DebugTree::ITreeNode_1<TLeaf>* node, bool isRoot) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::DebugTree::DebugTreeUI_1::BuildTreeRecursive");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BuildTreeRecursive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parent), ::il2cpp_utils::ExtractType(node), ::il2cpp_utils::ExtractType(isRoot)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, parent, node, isRoot);
    }
    // private System.Void ClearContentArea()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void ClearContentArea() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::DebugTree::DebugTreeUI_1::ClearContentArea");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearContentArea", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // private System.Void SetTitleText()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SetTitleText() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::DebugTree::DebugTreeUI_1::SetTitleText");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetTitleText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // protected Oculus.Interaction.DebugTree.DebugTree`1<TLeaf> InstantiateTree(TLeaf value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Oculus::Interaction::DebugTree::DebugTree_1<TLeaf>* InstantiateTree(TLeaf value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::DebugTree::DebugTreeUI_1::InstantiateTree");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Oculus::Interaction::DebugTree::DebugTreeUI_1<TLeaf>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::Oculus::Interaction::DebugTree::DebugTree_1<TLeaf>*, false>(this, ___internal__method, value);
    }
    // protected System.String TitleForValue(TLeaf value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::StringW TitleForValue(TLeaf value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::DebugTree::DebugTreeUI_1::TitleForValue");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Oculus::Interaction::DebugTree::DebugTreeUI_1<TLeaf>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method, value);
    }
    // protected System.Void .ctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DebugTreeUI_1<TLeaf>* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::DebugTree::DebugTreeUI_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DebugTreeUI_1<TLeaf>*, creationType>()));
    }
  }; // Oculus.Interaction.DebugTree.DebugTreeUI`1
  // Could not write size check! Type: Oculus.Interaction.DebugTree.DebugTreeUI`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
