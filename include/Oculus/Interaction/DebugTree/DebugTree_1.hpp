// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Oculus.Interaction.DebugTree.ITreeNode`1
#include "Oculus/Interaction/DebugTree/ITreeNode_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction::DebugTree
namespace Oculus::Interaction::DebugTree {
  // Skipping declaration: Node because it is already included!
  // Skipping declaration: <>c because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`2<T, TResult>
  template<typename T, typename TResult>
  class Func_2;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.DebugTree
namespace Oculus::Interaction::DebugTree {
  // Forward declaring type: DebugTree`1<TLeaf>
  template<typename TLeaf>
  class DebugTree_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::Oculus::Interaction::DebugTree::DebugTree_1, "Oculus.Interaction.DebugTree", "DebugTree`1");
// Type namespace: Oculus.Interaction.DebugTree
namespace Oculus::Interaction::DebugTree {
  // WARNING Size may be invalid!
  // Autogenerated type: Oculus.Interaction.DebugTree.DebugTree`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename TLeaf>
  class DebugTree_1 : public ::Il2CppObject {
    public:
    // Nested type: ::Oculus::Interaction::DebugTree::DebugTree_1::Node<TLeaf>
    class Node;
    // Nested type: ::Oculus::Interaction::DebugTree::DebugTree_1::$$c<TLeaf>
    class $$c;
    // WARNING Size may be invalid!
    // Autogenerated type: Oculus.Interaction.DebugTree.DebugTree`1/Node
    // [TokenAttribute] Offset: FFFFFFFF
    class Node : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject/*, public ::Oculus::Interaction::DebugTree::ITreeNode_1<TLeaf>*/ {
      public:
      using declaring_type = DebugTree_1<TLeaf>*;
      static constexpr std::string_view NESTED_NAME = "Node";
      static constexpr bool IS_VALUE_TYPE = false;
      public:
      // private TLeaf <Value>k__BackingField
      // Size: 0xFFFFFFFF
      // Offset: 0x0
      TLeaf Value;
      // private System.Collections.Generic.List`1<Oculus.Interaction.DebugTree.DebugTree`1/Node<TLeaf>> <Children>k__BackingField
      // Size: 0x8
      // Offset: 0x0
      ::System::Collections::Generic::List_1<typename ::Oculus::Interaction::DebugTree::DebugTree_1<TLeaf>::Node*>* Children;
      // Field size check
      static_assert(sizeof(::System::Collections::Generic::List_1<typename ::Oculus::Interaction::DebugTree::DebugTree_1<TLeaf>::Node*>*) == 0x8);
      public:
      // Creating interface conversion operator: operator ::Oculus::Interaction::DebugTree::ITreeNode_1<TLeaf>
      operator ::Oculus::Interaction::DebugTree::ITreeNode_1<TLeaf>() noexcept {
        return *reinterpret_cast<::Oculus::Interaction::DebugTree::ITreeNode_1<TLeaf>*>(this);
      }
      // Autogenerated instance field getter
      // Get instance field: private TLeaf <Value>k__BackingField
      [[deprecated("Use field access instead!")]] TLeaf& dyn_$Value$k__BackingField() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::DebugTree::DebugTree_1::Node::dyn_$Value$k__BackingField");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Value>k__BackingField"))->offset;
        return *reinterpret_cast<TLeaf*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private System.Collections.Generic.List`1<Oculus.Interaction.DebugTree.DebugTree`1/Node<TLeaf>> <Children>k__BackingField
      [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<typename ::Oculus::Interaction::DebugTree::DebugTree_1<TLeaf>::Node*>*& dyn_$Children$k__BackingField() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::DebugTree::DebugTree_1::Node::dyn_$Children$k__BackingField");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Children>k__BackingField"))->offset;
        return *reinterpret_cast<::System::Collections::Generic::List_1<typename ::Oculus::Interaction::DebugTree::DebugTree_1<TLeaf>::Node*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // private TLeaf Oculus.Interaction.DebugTree.ITreeNode<TLeaf>.get_Value()
      // Offset: 0xFFFFFFFFFFFFFFFF
      TLeaf Oculus_Interaction_DebugTree_ITreeNode$TLeaf$_get_Value() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::DebugTree::DebugTree_1::Node::Oculus.Interaction.DebugTree.ITreeNode<TLeaf>.get_Value");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::Oculus::Interaction::DebugTree::DebugTree_1<TLeaf>::Node*), -1));
        return ::il2cpp_utils::RunMethodRethrow<TLeaf, false>(this, ___internal__method);
      }
      // private System.Collections.Generic.IEnumerable`1<Oculus.Interaction.DebugTree.ITreeNode`1<TLeaf>> Oculus.Interaction.DebugTree.ITreeNode<TLeaf>.get_Children()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::System::Collections::Generic::IEnumerable_1<::Oculus::Interaction::DebugTree::ITreeNode_1<TLeaf>*>* Oculus_Interaction_DebugTree_ITreeNode$TLeaf$_get_Children() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::DebugTree::DebugTree_1::Node::Oculus.Interaction.DebugTree.ITreeNode<TLeaf>.get_Children");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::Oculus::Interaction::DebugTree::DebugTree_1<TLeaf>::Node*), -1));
        return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerable_1<::Oculus::Interaction::DebugTree::ITreeNode_1<TLeaf>*>*, false>(this, ___internal__method);
      }
      // public TLeaf get_Value()
      // Offset: 0xFFFFFFFFFFFFFFFF
      TLeaf get_Value() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::DebugTree::DebugTree_1::Node::get_Value");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Value", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<TLeaf, false>(this, ___internal__method);
      }
      // public System.Void set_Value(TLeaf value)
      // Offset: 0xFFFFFFFFFFFFFFFF
      void set_Value(TLeaf value) {
        static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::DebugTree::DebugTree_1::Node::set_Value");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Value", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
      }
      // public System.Collections.Generic.List`1<Oculus.Interaction.DebugTree.DebugTree`1/Node<TLeaf>> get_Children()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::System::Collections::Generic::List_1<typename ::Oculus::Interaction::DebugTree::DebugTree_1<TLeaf>::Node*>* get_Children() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::DebugTree::DebugTree_1::Node::get_Children");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Children", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::List_1<typename ::Oculus::Interaction::DebugTree::DebugTree_1<TLeaf>::Node*>*, false>(this, ___internal__method);
      }
      // public System.Void set_Children(System.Collections.Generic.List`1<Oculus.Interaction.DebugTree.DebugTree`1/Node<TLeaf>> value)
      // Offset: 0xFFFFFFFFFFFFFFFF
      void set_Children(::System::Collections::Generic::List_1<typename ::Oculus::Interaction::DebugTree::DebugTree_1<TLeaf>::Node*>* value) {
        static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::DebugTree::DebugTree_1::Node::set_Children");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Children", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFFFFFFFFFF
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename DebugTree_1<TLeaf>::Node* New_ctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::DebugTree::DebugTree_1::Node::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename DebugTree_1<TLeaf>::Node*, creationType>()));
      }
    }; // Oculus.Interaction.DebugTree.DebugTree`1/Node
    // Could not write size check! Type: Oculus.Interaction.DebugTree.DebugTree`1/Node is generic, or has no fields that are valid for size checks!
    // WARNING Size may be invalid!
    // Autogenerated type: Oculus.Interaction.DebugTree.DebugTree`1/<>c
    // [TokenAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: FFFFFFFF
    class $$c : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject {
      public:
      using declaring_type = DebugTree_1<TLeaf>*;
      static constexpr std::string_view NESTED_NAME = "<>c";
      static constexpr bool IS_VALUE_TYPE = false;
      // Autogenerated static field getter
      // Get static field: static public readonly Oculus.Interaction.DebugTree.DebugTree`1/<>c<TLeaf> <>9
      static typename ::Oculus::Interaction::DebugTree::DebugTree_1<TLeaf>::$$c* _get_$$9() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::DebugTree::DebugTree_1::$$c::_get_$$9");
        return THROW_UNLESS((il2cpp_utils::GetFieldValue<typename ::Oculus::Interaction::DebugTree::DebugTree_1<TLeaf>::$$c*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename DebugTree_1<TLeaf>::$$c*>::get(), "<>9")));
      }
      // Autogenerated static field setter
      // Set static field: static public readonly Oculus.Interaction.DebugTree.DebugTree`1/<>c<TLeaf> <>9
      static void _set_$$9(typename ::Oculus::Interaction::DebugTree::DebugTree_1<TLeaf>::$$c* value) {
        static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::DebugTree::DebugTree_1::$$c::_set_$$9");
        THROW_UNLESS((il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename DebugTree_1<TLeaf>::$$c*>::get(), "<>9", value)));
      }
      // Autogenerated static field getter
      // Get static field: static public System.Func`2<Oculus.Interaction.DebugTree.DebugTree`1/Node<TLeaf>,System.Boolean> <>9__8_1
      static ::System::Func_2<typename ::Oculus::Interaction::DebugTree::DebugTree_1<TLeaf>::Node*, bool>* _get_$$9__8_1() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::DebugTree::DebugTree_1::$$c::_get_$$9__8_1");
        return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Func_2<typename ::Oculus::Interaction::DebugTree::DebugTree_1<TLeaf>::Node*, bool>*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename DebugTree_1<TLeaf>::$$c*>::get(), "<>9__8_1")));
      }
      // Autogenerated static field setter
      // Set static field: static public System.Func`2<Oculus.Interaction.DebugTree.DebugTree`1/Node<TLeaf>,System.Boolean> <>9__8_1
      static void _set_$$9__8_1(::System::Func_2<typename ::Oculus::Interaction::DebugTree::DebugTree_1<TLeaf>::Node*, bool>* value) {
        static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::DebugTree::DebugTree_1::$$c::_set_$$9__8_1");
        THROW_UNLESS((il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename DebugTree_1<TLeaf>::$$c*>::get(), "<>9__8_1", value)));
      }
      // static private System.Void .cctor()
      // Offset: 0xFFFFFFFFFFFFFFFF
      static void _cctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::DebugTree::DebugTree_1::$$c::.cctor");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename DebugTree_1<TLeaf>::$$c*>::get(), ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFFFFFFFFFF
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename DebugTree_1<TLeaf>::$$c* New_ctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::DebugTree::DebugTree_1::$$c::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename DebugTree_1<TLeaf>::$$c*, creationType>()));
      }
      // System.Boolean <BuildTreeRecursive>b__8_1(Oculus.Interaction.DebugTree.DebugTree`1/Node<TLeaf> child)
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool $BuildTreeRecursive$b__8_1(typename ::Oculus::Interaction::DebugTree::DebugTree_1<TLeaf>::Node* child) {
        static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::DebugTree::DebugTree_1::$$c::<BuildTreeRecursive>b__8_1");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<BuildTreeRecursive>b__8_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(child)})));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, child);
      }
    }; // Oculus.Interaction.DebugTree.DebugTree`1/<>c
    // Could not write size check! Type: Oculus.Interaction.DebugTree.DebugTree`1/<>c is generic, or has no fields that are valid for size checks!
    public:
    // private System.Collections.Generic.Dictionary`2<TLeaf,Oculus.Interaction.DebugTree.DebugTree`1/Node<TLeaf>> _existingNodes
    // Size: 0x8
    // Offset: 0x0
    ::System::Collections::Generic::Dictionary_2<TLeaf, typename ::Oculus::Interaction::DebugTree::DebugTree_1<TLeaf>::Node*>* existingNodes;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<TLeaf, typename ::Oculus::Interaction::DebugTree::DebugTree_1<TLeaf>::Node*>*) == 0x8);
    // private readonly TLeaf Root
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    TLeaf Root;
    // private Oculus.Interaction.DebugTree.DebugTree`1/Node<TLeaf> _rootNode
    // Size: 0x8
    // Offset: 0x0
    typename ::Oculus::Interaction::DebugTree::DebugTree_1<TLeaf>::Node* rootNode;
    // Field size check
    static_assert(sizeof(typename ::Oculus::Interaction::DebugTree::DebugTree_1<TLeaf>::Node*) == 0x8);
    public:
    // Autogenerated instance field getter
    // Get instance field: private System.Collections.Generic.Dictionary`2<TLeaf,Oculus.Interaction.DebugTree.DebugTree`1/Node<TLeaf>> _existingNodes
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<TLeaf, typename ::Oculus::Interaction::DebugTree::DebugTree_1<TLeaf>::Node*>*& dyn__existingNodes() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::DebugTree::DebugTree_1::dyn__existingNodes");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_existingNodes"))->offset;
      return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<TLeaf, typename ::Oculus::Interaction::DebugTree::DebugTree_1<TLeaf>::Node*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly TLeaf Root
    [[deprecated("Use field access instead!")]] TLeaf& dyn_Root() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::DebugTree::DebugTree_1::dyn_Root");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "Root"))->offset;
      return *reinterpret_cast<TLeaf*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private Oculus.Interaction.DebugTree.DebugTree`1/Node<TLeaf> _rootNode
    [[deprecated("Use field access instead!")]] typename ::Oculus::Interaction::DebugTree::DebugTree_1<TLeaf>::Node*& dyn__rootNode() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::DebugTree::DebugTree_1::dyn__rootNode");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rootNode"))->offset;
      return *reinterpret_cast<typename ::Oculus::Interaction::DebugTree::DebugTree_1<TLeaf>::Node**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Void .ctor(TLeaf root)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DebugTree_1<TLeaf>* New_ctor(TLeaf root) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::DebugTree::DebugTree_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DebugTree_1<TLeaf>*, creationType>(root)));
    }
    // public Oculus.Interaction.DebugTree.ITreeNode`1<TLeaf> GetRootNode()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Oculus::Interaction::DebugTree::ITreeNode_1<TLeaf>* GetRootNode() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::DebugTree::DebugTree_1::GetRootNode");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRootNode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::Oculus::Interaction::DebugTree::ITreeNode_1<TLeaf>*, false>(this, ___internal__method);
    }
    // public System.Void Rebuild()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Rebuild() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::DebugTree::DebugTree_1::Rebuild");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Rebuild", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // private Oculus.Interaction.DebugTree.DebugTree`1/Node<TLeaf> BuildTree(TLeaf root)
    // Offset: 0xFFFFFFFFFFFFFFFF
    typename ::Oculus::Interaction::DebugTree::DebugTree_1<TLeaf>::Node* BuildTree(TLeaf root) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::DebugTree::DebugTree_1::BuildTree");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BuildTree", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(root)})));
      return ::il2cpp_utils::RunMethodRethrow<typename ::Oculus::Interaction::DebugTree::DebugTree_1<TLeaf>::Node*, false>(this, ___internal__method, root);
    }
    // private Oculus.Interaction.DebugTree.DebugTree`1/Node<TLeaf> BuildTreeRecursive(TLeaf value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    typename ::Oculus::Interaction::DebugTree::DebugTree_1<TLeaf>::Node* BuildTreeRecursive(TLeaf value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::DebugTree::DebugTree_1::BuildTreeRecursive");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BuildTreeRecursive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      return ::il2cpp_utils::RunMethodRethrow<typename ::Oculus::Interaction::DebugTree::DebugTree_1<TLeaf>::Node*, false>(this, ___internal__method, value);
    }
    // protected System.Boolean TryGetChildren(TLeaf node, out System.Collections.Generic.IEnumerable`1<TLeaf> children)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool TryGetChildren(TLeaf node, ByRef<::System::Collections::Generic::IEnumerable_1<TLeaf>*> children) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::DebugTree::DebugTree_1::TryGetChildren");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Oculus::Interaction::DebugTree::DebugTree_1<TLeaf>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, node, byref(children));
    }
    // private Oculus.Interaction.DebugTree.DebugTree`1/Node<TLeaf> <BuildTreeRecursive>b__8_0(TLeaf child)
    // Offset: 0xFFFFFFFFFFFFFFFF
    typename ::Oculus::Interaction::DebugTree::DebugTree_1<TLeaf>::Node* $BuildTreeRecursive$b__8_0(TLeaf child) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::DebugTree::DebugTree_1::<BuildTreeRecursive>b__8_0");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<BuildTreeRecursive>b__8_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(child)})));
      return ::il2cpp_utils::RunMethodRethrow<typename ::Oculus::Interaction::DebugTree::DebugTree_1<TLeaf>::Node*, false>(this, ___internal__method, child);
    }
  }; // Oculus.Interaction.DebugTree.DebugTree`1
  // Could not write size check! Type: Oculus.Interaction.DebugTree.DebugTree`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
