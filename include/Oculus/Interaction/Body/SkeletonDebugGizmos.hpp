// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction::Body
namespace Oculus::Interaction::Body {
  // Skipping declaration: VisibilityFlags because it is already included!
}
// Forward declaring namespace: Oculus::Interaction::Body::Input
namespace Oculus::Interaction::Body::Input {
  // Forward declaring type: BodyJointId
  struct BodyJointId;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Pose
  struct Pose;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.Body
namespace Oculus::Interaction::Body {
  // Forward declaring type: SkeletonDebugGizmos
  class SkeletonDebugGizmos;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Body::SkeletonDebugGizmos);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Body::SkeletonDebugGizmos*, "Oculus.Interaction.Body", "SkeletonDebugGizmos");
// Type namespace: Oculus.Interaction.Body
namespace Oculus::Interaction::Body {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.Body.SkeletonDebugGizmos
  // [TokenAttribute] Offset: FFFFFFFF
  class SkeletonDebugGizmos : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::Oculus::Interaction::Body::SkeletonDebugGizmos::VisibilityFlags
    struct VisibilityFlags;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Oculus.Interaction.Body.SkeletonDebugGizmos/VisibilityFlags
    // [TokenAttribute] Offset: FFFFFFFF
    // [FlagsAttribute] Offset: FFFFFFFF
    struct VisibilityFlags/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: VisibilityFlags
      constexpr VisibilityFlags(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Oculus.Interaction.Body.SkeletonDebugGizmos/VisibilityFlags Joints
      static constexpr const int Joints = 1;
      // Get static field: static public Oculus.Interaction.Body.SkeletonDebugGizmos/VisibilityFlags Joints
      static ::Oculus::Interaction::Body::SkeletonDebugGizmos::VisibilityFlags _get_Joints();
      // Set static field: static public Oculus.Interaction.Body.SkeletonDebugGizmos/VisibilityFlags Joints
      static void _set_Joints(::Oculus::Interaction::Body::SkeletonDebugGizmos::VisibilityFlags value);
      // static field const value: static public Oculus.Interaction.Body.SkeletonDebugGizmos/VisibilityFlags Axes
      static constexpr const int Axes = 2;
      // Get static field: static public Oculus.Interaction.Body.SkeletonDebugGizmos/VisibilityFlags Axes
      static ::Oculus::Interaction::Body::SkeletonDebugGizmos::VisibilityFlags _get_Axes();
      // Set static field: static public Oculus.Interaction.Body.SkeletonDebugGizmos/VisibilityFlags Axes
      static void _set_Axes(::Oculus::Interaction::Body::SkeletonDebugGizmos::VisibilityFlags value);
      // static field const value: static public Oculus.Interaction.Body.SkeletonDebugGizmos/VisibilityFlags Bones
      static constexpr const int Bones = 4;
      // Get static field: static public Oculus.Interaction.Body.SkeletonDebugGizmos/VisibilityFlags Bones
      static ::Oculus::Interaction::Body::SkeletonDebugGizmos::VisibilityFlags _get_Bones();
      // Set static field: static public Oculus.Interaction.Body.SkeletonDebugGizmos/VisibilityFlags Bones
      static void _set_Bones(::Oculus::Interaction::Body::SkeletonDebugGizmos::VisibilityFlags value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Oculus.Interaction.Body.SkeletonDebugGizmos/VisibilityFlags
    #pragma pack(pop)
    static check_size<sizeof(SkeletonDebugGizmos::VisibilityFlags), 0 + sizeof(int)> __Oculus_Interaction_Body_SkeletonDebugGizmos_VisibilityFlagsSizeCheck;
    static_assert(sizeof(SkeletonDebugGizmos::VisibilityFlags) == 0x4);
    public:
    // private Oculus.Interaction.Body.SkeletonDebugGizmos/VisibilityFlags _visibility
    // Size: 0x4
    // Offset: 0x20
    ::Oculus::Interaction::Body::SkeletonDebugGizmos::VisibilityFlags visibility;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Body::SkeletonDebugGizmos::VisibilityFlags) == 0x4);
    // private UnityEngine.Color _jointColor
    // Size: 0x10
    // Offset: 0x24
    ::UnityEngine::Color jointColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color _boneColor
    // Size: 0x10
    // Offset: 0x34
    ::UnityEngine::Color boneColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private System.Single _radius
    // Size: 0x4
    // Offset: 0x44
    float radius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: private Oculus.Interaction.Body.SkeletonDebugGizmos/VisibilityFlags _visibility
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Body::SkeletonDebugGizmos::VisibilityFlags& dyn__visibility();
    // Get instance field reference: private UnityEngine.Color _jointColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__jointColor();
    // Get instance field reference: private UnityEngine.Color _boneColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__boneColor();
    // Get instance field reference: private System.Single _radius
    [[deprecated("Use field access instead!")]] float& dyn__radius();
    // public System.Single get_Radius()
    // Offset: 0x4841C58
    float get_Radius();
    // public System.Void set_Radius(System.Single value)
    // Offset: 0x4841C60
    void set_Radius(float value);
    // public Oculus.Interaction.Body.SkeletonDebugGizmos/VisibilityFlags get_Visibility()
    // Offset: 0x4841C68
    ::Oculus::Interaction::Body::SkeletonDebugGizmos::VisibilityFlags get_Visibility();
    // public System.Void set_Visibility(Oculus.Interaction.Body.SkeletonDebugGizmos/VisibilityFlags value)
    // Offset: 0x4841C70
    void set_Visibility(::Oculus::Interaction::Body::SkeletonDebugGizmos::VisibilityFlags value);
    // public UnityEngine.Color get_JointColor()
    // Offset: 0x4841C78
    ::UnityEngine::Color get_JointColor();
    // public System.Void set_JointColor(UnityEngine.Color value)
    // Offset: 0x4841C84
    void set_JointColor(::UnityEngine::Color value);
    // public UnityEngine.Color get_BoneColor()
    // Offset: 0x4841C90
    ::UnityEngine::Color get_BoneColor();
    // public System.Void set_BoneColor(UnityEngine.Color value)
    // Offset: 0x4841C9C
    void set_BoneColor(::UnityEngine::Color value);
    // private System.Single get_LineWidth()
    // Offset: 0x4841CA8
    float get_LineWidth();
    // protected System.Boolean TryGetWorldJointPose(Oculus.Interaction.Body.Input.BodyJointId jointId, out UnityEngine.Pose pose)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool TryGetWorldJointPose(::Oculus::Interaction::Body::Input::BodyJointId jointId, ByRef<::UnityEngine::Pose> pose);
    // protected System.Boolean TryGetParentJointId(Oculus.Interaction.Body.Input.BodyJointId jointId, out Oculus.Interaction.Body.Input.BodyJointId parent)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool TryGetParentJointId(::Oculus::Interaction::Body::Input::BodyJointId jointId, ByRef<::Oculus::Interaction::Body::Input::BodyJointId> parent);
    // protected System.Boolean get_HasNegativeScale()
    // Offset: 0x4841628
    bool get_HasNegativeScale();
    // protected System.Void Draw(Oculus.Interaction.Body.Input.BodyJointId joint, Oculus.Interaction.Body.SkeletonDebugGizmos/VisibilityFlags visibility)
    // Offset: 0x484194C
    void Draw(::Oculus::Interaction::Body::Input::BodyJointId joint, ::Oculus::Interaction::Body::SkeletonDebugGizmos::VisibilityFlags visibility);
    // protected System.Void .ctor()
    // Offset: 0x4841C28
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SkeletonDebugGizmos* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Body::SkeletonDebugGizmos::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SkeletonDebugGizmos*, creationType>()));
    }
  }; // Oculus.Interaction.Body.SkeletonDebugGizmos
  #pragma pack(pop)
  static check_size<sizeof(SkeletonDebugGizmos), 68 + sizeof(float)> __Oculus_Interaction_Body_SkeletonDebugGizmosSizeCheck;
  static_assert(sizeof(SkeletonDebugGizmos) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Body::SkeletonDebugGizmos::VisibilityFlags, "Oculus.Interaction.Body", "SkeletonDebugGizmos/VisibilityFlags");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Body::SkeletonDebugGizmos::get_Radius
// Il2CppName: get_Radius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::Body::SkeletonDebugGizmos::*)()>(&Oculus::Interaction::Body::SkeletonDebugGizmos::get_Radius)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Body::SkeletonDebugGizmos*), "get_Radius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Body::SkeletonDebugGizmos::set_Radius
// Il2CppName: set_Radius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Body::SkeletonDebugGizmos::*)(float)>(&Oculus::Interaction::Body::SkeletonDebugGizmos::set_Radius)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Body::SkeletonDebugGizmos*), "set_Radius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Body::SkeletonDebugGizmos::get_Visibility
// Il2CppName: get_Visibility
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Body::SkeletonDebugGizmos::VisibilityFlags (Oculus::Interaction::Body::SkeletonDebugGizmos::*)()>(&Oculus::Interaction::Body::SkeletonDebugGizmos::get_Visibility)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Body::SkeletonDebugGizmos*), "get_Visibility", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Body::SkeletonDebugGizmos::set_Visibility
// Il2CppName: set_Visibility
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Body::SkeletonDebugGizmos::*)(::Oculus::Interaction::Body::SkeletonDebugGizmos::VisibilityFlags)>(&Oculus::Interaction::Body::SkeletonDebugGizmos::set_Visibility)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Body", "SkeletonDebugGizmos/VisibilityFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Body::SkeletonDebugGizmos*), "set_Visibility", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Body::SkeletonDebugGizmos::get_JointColor
// Il2CppName: get_JointColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (Oculus::Interaction::Body::SkeletonDebugGizmos::*)()>(&Oculus::Interaction::Body::SkeletonDebugGizmos::get_JointColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Body::SkeletonDebugGizmos*), "get_JointColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Body::SkeletonDebugGizmos::set_JointColor
// Il2CppName: set_JointColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Body::SkeletonDebugGizmos::*)(::UnityEngine::Color)>(&Oculus::Interaction::Body::SkeletonDebugGizmos::set_JointColor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Body::SkeletonDebugGizmos*), "set_JointColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Body::SkeletonDebugGizmos::get_BoneColor
// Il2CppName: get_BoneColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (Oculus::Interaction::Body::SkeletonDebugGizmos::*)()>(&Oculus::Interaction::Body::SkeletonDebugGizmos::get_BoneColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Body::SkeletonDebugGizmos*), "get_BoneColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Body::SkeletonDebugGizmos::set_BoneColor
// Il2CppName: set_BoneColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Body::SkeletonDebugGizmos::*)(::UnityEngine::Color)>(&Oculus::Interaction::Body::SkeletonDebugGizmos::set_BoneColor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Body::SkeletonDebugGizmos*), "set_BoneColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Body::SkeletonDebugGizmos::get_LineWidth
// Il2CppName: get_LineWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::Body::SkeletonDebugGizmos::*)()>(&Oculus::Interaction::Body::SkeletonDebugGizmos::get_LineWidth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Body::SkeletonDebugGizmos*), "get_LineWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Body::SkeletonDebugGizmos::TryGetWorldJointPose
// Il2CppName: TryGetWorldJointPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Body::SkeletonDebugGizmos::*)(::Oculus::Interaction::Body::Input::BodyJointId, ByRef<::UnityEngine::Pose>)>(&Oculus::Interaction::Body::SkeletonDebugGizmos::TryGetWorldJointPose)> {
  static const MethodInfo* get() {
    static auto* jointId = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Body.Input", "BodyJointId")->byval_arg;
    static auto* pose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Body::SkeletonDebugGizmos*), "TryGetWorldJointPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{jointId, pose});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Body::SkeletonDebugGizmos::TryGetParentJointId
// Il2CppName: TryGetParentJointId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Body::SkeletonDebugGizmos::*)(::Oculus::Interaction::Body::Input::BodyJointId, ByRef<::Oculus::Interaction::Body::Input::BodyJointId>)>(&Oculus::Interaction::Body::SkeletonDebugGizmos::TryGetParentJointId)> {
  static const MethodInfo* get() {
    static auto* jointId = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Body.Input", "BodyJointId")->byval_arg;
    static auto* parent = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Body.Input", "BodyJointId")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Body::SkeletonDebugGizmos*), "TryGetParentJointId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{jointId, parent});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Body::SkeletonDebugGizmos::get_HasNegativeScale
// Il2CppName: get_HasNegativeScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Body::SkeletonDebugGizmos::*)()>(&Oculus::Interaction::Body::SkeletonDebugGizmos::get_HasNegativeScale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Body::SkeletonDebugGizmos*), "get_HasNegativeScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Body::SkeletonDebugGizmos::Draw
// Il2CppName: Draw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Body::SkeletonDebugGizmos::*)(::Oculus::Interaction::Body::Input::BodyJointId, ::Oculus::Interaction::Body::SkeletonDebugGizmos::VisibilityFlags)>(&Oculus::Interaction::Body::SkeletonDebugGizmos::Draw)> {
  static const MethodInfo* get() {
    static auto* joint = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Body.Input", "BodyJointId")->byval_arg;
    static auto* visibility = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Body", "SkeletonDebugGizmos/VisibilityFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Body::SkeletonDebugGizmos*), "Draw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{joint, visibility});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Body::SkeletonDebugGizmos::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
