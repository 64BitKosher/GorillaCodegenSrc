// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: OVRSkeleton/IOVRSkeletonDataProvider
#include "GlobalNamespace/OVRSkeleton_IOVRSkeletonDataProvider.hpp"
// Including type: OVRPlugin/Quatf
#include "GlobalNamespace/OVRPlugin.hpp"
// Including type: OVRPlugin/Vector3f
// Already included the same include: GlobalNamespace/OVRPlugin.hpp
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Object because it is already included!
}
// Forward declaring namespace: Oculus::Interaction::Body::PoseDetection
namespace Oculus::Interaction::Body::PoseDetection {
  // Forward declaring type: IBodyPose
  class IBodyPose;
}
// Forward declaring namespace: Oculus::Interaction::Body::Input
namespace Oculus::Interaction::Body::Input {
  // Forward declaring type: OVRSkeletonMapping
  class OVRSkeletonMapping;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.Body.PoseDetection
namespace Oculus::Interaction::Body::PoseDetection {
  // Forward declaring type: OVRBodyPoseSkeletonProvider
  class OVRBodyPoseSkeletonProvider;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Body::PoseDetection::OVRBodyPoseSkeletonProvider);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Body::PoseDetection::OVRBodyPoseSkeletonProvider*, "Oculus.Interaction.Body.PoseDetection", "OVRBodyPoseSkeletonProvider");
// Type namespace: Oculus.Interaction.Body.PoseDetection
namespace Oculus::Interaction::Body::PoseDetection {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.Body.PoseDetection.OVRBodyPoseSkeletonProvider
  // [TokenAttribute] Offset: FFFFFFFF
  class OVRBodyPoseSkeletonProvider : public ::UnityEngine::MonoBehaviour/*, public ::GlobalNamespace::OVRSkeleton::IOVRSkeletonDataProvider*/ {
    public:
    public:
    // private UnityEngine.Object _bodyPose
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Object* bodyPose;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.Body.PoseDetection.IBodyPose BodyPose
    // Size: 0x8
    // Offset: 0x28
    ::Oculus::Interaction::Body::PoseDetection::IBodyPose* BodyPose;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Body::PoseDetection::IBodyPose*) == 0x8);
    // private OVRPlugin/Quatf[] _boneRotations
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::GlobalNamespace::OVRPlugin::Quatf> boneRotations;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::OVRPlugin::Quatf>) == 0x8);
    // private OVRPlugin/Vector3f[] _boneTranslations
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<::GlobalNamespace::OVRPlugin::Vector3f> boneTranslations;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::OVRPlugin::Vector3f>) == 0x8);
    // private readonly Oculus.Interaction.Body.Input.OVRSkeletonMapping _mapping
    // Size: 0x8
    // Offset: 0x40
    ::Oculus::Interaction::Body::Input::OVRSkeletonMapping* mapping;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Body::Input::OVRSkeletonMapping*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::GlobalNamespace::OVRSkeleton::IOVRSkeletonDataProvider
    operator ::GlobalNamespace::OVRSkeleton::IOVRSkeletonDataProvider() noexcept {
      return *reinterpret_cast<::GlobalNamespace::OVRSkeleton::IOVRSkeletonDataProvider*>(this);
    }
    // static field const value: static private System.Int32 OVR_NUM_JOINTS
    static constexpr const int OVR_NUM_JOINTS = 70;
    // Get static field: static private System.Int32 OVR_NUM_JOINTS
    static int _get_OVR_NUM_JOINTS();
    // Set static field: static private System.Int32 OVR_NUM_JOINTS
    static void _set_OVR_NUM_JOINTS(int value);
    // Get instance field reference: private UnityEngine.Object _bodyPose
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__bodyPose();
    // Get instance field reference: private Oculus.Interaction.Body.PoseDetection.IBodyPose BodyPose
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Body::PoseDetection::IBodyPose*& dyn_BodyPose();
    // Get instance field reference: private OVRPlugin/Quatf[] _boneRotations
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::OVRPlugin::Quatf>& dyn__boneRotations();
    // Get instance field reference: private OVRPlugin/Vector3f[] _boneTranslations
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::OVRPlugin::Vector3f>& dyn__boneTranslations();
    // Get instance field reference: private readonly Oculus.Interaction.Body.Input.OVRSkeletonMapping _mapping
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Body::Input::OVRSkeletonMapping*& dyn__mapping();
    // protected System.Void Awake()
    // Offset: 0x4796160
    void Awake();
    // protected System.Void Start()
    // Offset: 0x47961C8
    void Start();
    // private OVRSkeleton/SkeletonPoseData OVRSkeleton.IOVRSkeletonDataProvider.GetSkeletonPoseData()
    // Offset: 0x47961CC
    ::GlobalNamespace::OVRSkeleton::SkeletonPoseData OVRSkeleton_IOVRSkeletonDataProvider_GetSkeletonPoseData();
    // public OVRSkeleton/SkeletonType GetSkeletonType()
    // Offset: 0x4796520
    ::GlobalNamespace::OVRSkeleton::SkeletonType GetSkeletonType();
    // public System.Void .ctor()
    // Offset: 0x4796528
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OVRBodyPoseSkeletonProvider* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Body::PoseDetection::OVRBodyPoseSkeletonProvider::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OVRBodyPoseSkeletonProvider*, creationType>()));
    }
    // private System.Boolean OVRSkeleton.IOVRSkeletonDataProvider.get_enabled()
    // Offset: 0x47972E0
    bool OVRSkeleton_IOVRSkeletonDataProvider_get_enabled();
    // static T[] <OVRSkeleton.IOVRSkeletonDataProvider.GetSkeletonPoseData>g__EnsureLength|8_0(T[] array, System.Int32 length)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::ArrayW<T> $OVRSkeleton_IOVRSkeletonDataProvider_GetSkeletonPoseData$g__EnsureLength_8_0(::ArrayW<T> array, int length) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Body::PoseDetection::OVRBodyPoseSkeletonProvider::<OVRSkeleton.IOVRSkeletonDataProvider.GetSkeletonPoseData>g__EnsureLength|8_0");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Oculus.Interaction.Body.PoseDetection", "OVRBodyPoseSkeletonProvider", "<OVRSkeleton.IOVRSkeletonDataProvider.GetSkeletonPoseData>g__EnsureLength|8_0", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(length)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::ArrayW<T>, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array, length);
    }
  }; // Oculus.Interaction.Body.PoseDetection.OVRBodyPoseSkeletonProvider
  #pragma pack(pop)
  static check_size<sizeof(OVRBodyPoseSkeletonProvider), 64 + sizeof(::Oculus::Interaction::Body::Input::OVRSkeletonMapping*)> __Oculus_Interaction_Body_PoseDetection_OVRBodyPoseSkeletonProviderSizeCheck;
  static_assert(sizeof(OVRBodyPoseSkeletonProvider) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Body::PoseDetection::OVRBodyPoseSkeletonProvider::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Body::PoseDetection::OVRBodyPoseSkeletonProvider::*)()>(&Oculus::Interaction::Body::PoseDetection::OVRBodyPoseSkeletonProvider::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Body::PoseDetection::OVRBodyPoseSkeletonProvider*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Body::PoseDetection::OVRBodyPoseSkeletonProvider::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Body::PoseDetection::OVRBodyPoseSkeletonProvider::*)()>(&Oculus::Interaction::Body::PoseDetection::OVRBodyPoseSkeletonProvider::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Body::PoseDetection::OVRBodyPoseSkeletonProvider*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Body::PoseDetection::OVRBodyPoseSkeletonProvider::OVRSkeleton_IOVRSkeletonDataProvider_GetSkeletonPoseData
// Il2CppName: OVRSkeleton.IOVRSkeletonDataProvider.GetSkeletonPoseData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRSkeleton::SkeletonPoseData (Oculus::Interaction::Body::PoseDetection::OVRBodyPoseSkeletonProvider::*)()>(&Oculus::Interaction::Body::PoseDetection::OVRBodyPoseSkeletonProvider::OVRSkeleton_IOVRSkeletonDataProvider_GetSkeletonPoseData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Body::PoseDetection::OVRBodyPoseSkeletonProvider*), "OVRSkeleton.IOVRSkeletonDataProvider.GetSkeletonPoseData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Body::PoseDetection::OVRBodyPoseSkeletonProvider::GetSkeletonType
// Il2CppName: GetSkeletonType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRSkeleton::SkeletonType (Oculus::Interaction::Body::PoseDetection::OVRBodyPoseSkeletonProvider::*)()>(&Oculus::Interaction::Body::PoseDetection::OVRBodyPoseSkeletonProvider::GetSkeletonType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Body::PoseDetection::OVRBodyPoseSkeletonProvider*), "GetSkeletonType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Body::PoseDetection::OVRBodyPoseSkeletonProvider::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Interaction::Body::PoseDetection::OVRBodyPoseSkeletonProvider::OVRSkeleton_IOVRSkeletonDataProvider_get_enabled
// Il2CppName: OVRSkeleton.IOVRSkeletonDataProvider.get_enabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Body::PoseDetection::OVRBodyPoseSkeletonProvider::*)()>(&Oculus::Interaction::Body::PoseDetection::OVRBodyPoseSkeletonProvider::OVRSkeleton_IOVRSkeletonDataProvider_get_enabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Body::PoseDetection::OVRBodyPoseSkeletonProvider*), "OVRSkeleton.IOVRSkeletonDataProvider.get_enabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Body::PoseDetection::OVRBodyPoseSkeletonProvider::$OVRSkeleton_IOVRSkeletonDataProvider_GetSkeletonPoseData$g__EnsureLength_8_0
// Il2CppName: <OVRSkeleton.IOVRSkeletonDataProvider.GetSkeletonPoseData>g__EnsureLength|8_0
// Cannot write MetadataGetter for generic methods!
