// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Oculus.Interaction.IActiveState
#include "Oculus/Interaction/IActiveState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`1<TResult>
  template<typename TResult>
  class Func_1;
}
// Forward declaring namespace: Oculus::Interaction::Body::PoseDetection
namespace Oculus::Interaction::Body::PoseDetection {
  // Forward declaring type: IBodyPose
  class IBodyPose;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Object because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: IReadOnlyDictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class IReadOnlyDictionary_2;
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Forward declaring namespace: Oculus::Interaction::Body::Input
namespace Oculus::Interaction::Body::Input {
  // Forward declaring type: BodyJointId
  struct BodyJointId;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.Body.PoseDetection
namespace Oculus::Interaction::Body::PoseDetection {
  // Forward declaring type: BodyPoseComparerActiveState
  class BodyPoseComparerActiveState;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Body::PoseDetection::BodyPoseComparerActiveState);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Body::PoseDetection::BodyPoseComparerActiveState*, "Oculus.Interaction.Body.PoseDetection", "BodyPoseComparerActiveState");
// Type namespace: Oculus.Interaction.Body.PoseDetection
namespace Oculus::Interaction::Body::PoseDetection {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.Body.PoseDetection.BodyPoseComparerActiveState
  // [TokenAttribute] Offset: FFFFFFFF
  class BodyPoseComparerActiveState : public ::UnityEngine::MonoBehaviour/*, public ::Oculus::Interaction::IActiveState*/ {
    public:
    // Nested type: ::Oculus::Interaction::Body::PoseDetection::BodyPoseComparerActiveState::BodyPoseComparerFeatureState
    struct BodyPoseComparerFeatureState;
    // Nested type: ::Oculus::Interaction::Body::PoseDetection::BodyPoseComparerActiveState::JointComparerConfig
    class JointComparerConfig;
    // Nested type: ::Oculus::Interaction::Body::PoseDetection::BodyPoseComparerActiveState::$$c
    class $$c;
    // Size: 0x8
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Oculus.Interaction.Body.PoseDetection.BodyPoseComparerActiveState/BodyPoseComparerFeatureState
    // [TokenAttribute] Offset: FFFFFFFF
    struct BodyPoseComparerFeatureState/*, public ::System::ValueType*/ {
      public:
      public:
      // public readonly System.Single Delta
      // Size: 0x4
      // Offset: 0x0
      float Delta;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public readonly System.Single MaxDelta
      // Size: 0x4
      // Offset: 0x4
      float MaxDelta;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      public:
      // Creating value type constructor for type: BodyPoseComparerFeatureState
      constexpr BodyPoseComparerFeatureState(float Delta_ = {}, float MaxDelta_ = {}) noexcept : Delta{Delta_}, MaxDelta{MaxDelta_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public readonly System.Single Delta
      [[deprecated("Use field access instead!")]] float& dyn_Delta();
      // Get instance field reference: public readonly System.Single MaxDelta
      [[deprecated("Use field access instead!")]] float& dyn_MaxDelta();
      // public System.Void .ctor(System.Single delta, System.Single maxDelta)
      // Offset: 0x4842288
      // ABORTED: conflicts with another method.  BodyPoseComparerFeatureState(float delta, float maxDelta);
    }; // Oculus.Interaction.Body.PoseDetection.BodyPoseComparerActiveState/BodyPoseComparerFeatureState
    #pragma pack(pop)
    static check_size<sizeof(BodyPoseComparerActiveState::BodyPoseComparerFeatureState), 4 + sizeof(float)> __Oculus_Interaction_Body_PoseDetection_BodyPoseComparerActiveState_BodyPoseComparerFeatureStateSizeCheck;
    static_assert(sizeof(BodyPoseComparerActiveState::BodyPoseComparerFeatureState) == 0x8);
    public:
    // private UnityEngine.Object _poseA
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Object* poseA;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.Body.PoseDetection.IBodyPose PoseA
    // Size: 0x8
    // Offset: 0x28
    ::Oculus::Interaction::Body::PoseDetection::IBodyPose* PoseA;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Body::PoseDetection::IBodyPose*) == 0x8);
    // private UnityEngine.Object _poseB
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Object* poseB;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.Body.PoseDetection.IBodyPose PoseB
    // Size: 0x8
    // Offset: 0x38
    ::Oculus::Interaction::Body::PoseDetection::IBodyPose* PoseB;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Body::PoseDetection::IBodyPose*) == 0x8);
    // private System.Collections.Generic.List`1<Oculus.Interaction.Body.PoseDetection.BodyPoseComparerActiveState/JointComparerConfig> _configs
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::Generic::List_1<::Oculus::Interaction::Body::PoseDetection::BodyPoseComparerActiveState::JointComparerConfig*>* configs;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Oculus::Interaction::Body::PoseDetection::BodyPoseComparerActiveState::JointComparerConfig*>*) == 0x8);
    // private System.Single _minTimeInState
    // Size: 0x4
    // Offset: 0x48
    float minTimeInState;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: minTimeInState and: featureStates
    char __padding5[0x4] = {};
    // private System.Collections.Generic.Dictionary`2<Oculus.Interaction.Body.PoseDetection.BodyPoseComparerActiveState/JointComparerConfig,Oculus.Interaction.Body.PoseDetection.BodyPoseComparerActiveState/BodyPoseComparerFeatureState> _featureStates
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::Generic::Dictionary_2<::Oculus::Interaction::Body::PoseDetection::BodyPoseComparerActiveState::JointComparerConfig*, ::Oculus::Interaction::Body::PoseDetection::BodyPoseComparerActiveState::BodyPoseComparerFeatureState>* featureStates;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::Oculus::Interaction::Body::PoseDetection::BodyPoseComparerActiveState::JointComparerConfig*, ::Oculus::Interaction::Body::PoseDetection::BodyPoseComparerActiveState::BodyPoseComparerFeatureState>*) == 0x8);
    // private System.Func`1<System.Single> _timeProvider
    // Size: 0x8
    // Offset: 0x58
    ::System::Func_1<float>* timeProvider;
    // Field size check
    static_assert(sizeof(::System::Func_1<float>*) == 0x8);
    // private System.Boolean _isActive
    // Size: 0x1
    // Offset: 0x60
    bool isActive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _internalActive
    // Size: 0x1
    // Offset: 0x61
    bool internalActive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: internalActive and: lastStateChangeTime
    char __padding9[0x2] = {};
    // private System.Single _lastStateChangeTime
    // Size: 0x4
    // Offset: 0x64
    float lastStateChangeTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::IActiveState
    operator ::Oculus::Interaction::IActiveState() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::IActiveState*>(this);
    }
    // Get instance field reference: private UnityEngine.Object _poseA
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__poseA();
    // Get instance field reference: private Oculus.Interaction.Body.PoseDetection.IBodyPose PoseA
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Body::PoseDetection::IBodyPose*& dyn_PoseA();
    // Get instance field reference: private UnityEngine.Object _poseB
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__poseB();
    // Get instance field reference: private Oculus.Interaction.Body.PoseDetection.IBodyPose PoseB
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Body::PoseDetection::IBodyPose*& dyn_PoseB();
    // Get instance field reference: private System.Collections.Generic.List`1<Oculus.Interaction.Body.PoseDetection.BodyPoseComparerActiveState/JointComparerConfig> _configs
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Oculus::Interaction::Body::PoseDetection::BodyPoseComparerActiveState::JointComparerConfig*>*& dyn__configs();
    // Get instance field reference: private System.Single _minTimeInState
    [[deprecated("Use field access instead!")]] float& dyn__minTimeInState();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<Oculus.Interaction.Body.PoseDetection.BodyPoseComparerActiveState/JointComparerConfig,Oculus.Interaction.Body.PoseDetection.BodyPoseComparerActiveState/BodyPoseComparerFeatureState> _featureStates
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::Oculus::Interaction::Body::PoseDetection::BodyPoseComparerActiveState::JointComparerConfig*, ::Oculus::Interaction::Body::PoseDetection::BodyPoseComparerActiveState::BodyPoseComparerFeatureState>*& dyn__featureStates();
    // Get instance field reference: private System.Func`1<System.Single> _timeProvider
    [[deprecated("Use field access instead!")]] ::System::Func_1<float>*& dyn__timeProvider();
    // Get instance field reference: private System.Boolean _isActive
    [[deprecated("Use field access instead!")]] bool& dyn__isActive();
    // Get instance field reference: private System.Boolean _internalActive
    [[deprecated("Use field access instead!")]] bool& dyn__internalActive();
    // Get instance field reference: private System.Single _lastStateChangeTime
    [[deprecated("Use field access instead!")]] float& dyn__lastStateChangeTime();
    // public System.Single get_MinTimeInState()
    // Offset: 0x4841CB8
    float get_MinTimeInState();
    // public System.Void set_MinTimeInState(System.Single value)
    // Offset: 0x4841CC0
    void set_MinTimeInState(float value);
    // public System.Collections.Generic.IReadOnlyDictionary`2<Oculus.Interaction.Body.PoseDetection.BodyPoseComparerActiveState/JointComparerConfig,Oculus.Interaction.Body.PoseDetection.BodyPoseComparerActiveState/BodyPoseComparerFeatureState> get_FeatureStates()
    // Offset: 0x4841CC8
    ::System::Collections::Generic::IReadOnlyDictionary_2<::Oculus::Interaction::Body::PoseDetection::BodyPoseComparerActiveState::JointComparerConfig*, ::Oculus::Interaction::Body::PoseDetection::BodyPoseComparerActiveState::BodyPoseComparerFeatureState>* get_FeatureStates();
    // protected System.Void Awake()
    // Offset: 0x4841CD0
    void Awake();
    // protected System.Void Start()
    // Offset: 0x4841E28
    void Start();
    // public System.Boolean get_Active()
    // Offset: 0x4841E2C
    bool get_Active();
    // private System.Boolean GetJointDelta(Oculus.Interaction.Body.Input.BodyJointId joint, out System.Single delta)
    // Offset: 0x48420BC
    bool GetJointDelta(::Oculus::Interaction::Body::Input::BodyJointId joint, ByRef<float> delta);
    // public System.Void InjectAllBodyPoseComparerActiveState(Oculus.Interaction.Body.PoseDetection.IBodyPose poseA, Oculus.Interaction.Body.PoseDetection.IBodyPose poseB, System.Collections.Generic.IEnumerable`1<Oculus.Interaction.Body.PoseDetection.BodyPoseComparerActiveState/JointComparerConfig> configs)
    // Offset: 0x4842290
    void InjectAllBodyPoseComparerActiveState(::Oculus::Interaction::Body::PoseDetection::IBodyPose* poseA, ::Oculus::Interaction::Body::PoseDetection::IBodyPose* poseB, ::System::Collections::Generic::IEnumerable_1<::Oculus::Interaction::Body::PoseDetection::BodyPoseComparerActiveState::JointComparerConfig*>* configs);
    // public System.Void InjectPoseA(Oculus.Interaction.Body.PoseDetection.IBodyPose poseA)
    // Offset: 0x48422C8
    void InjectPoseA(::Oculus::Interaction::Body::PoseDetection::IBodyPose* poseA);
    // public System.Void InjectPoseB(Oculus.Interaction.Body.PoseDetection.IBodyPose poseB)
    // Offset: 0x4842398
    void InjectPoseB(::Oculus::Interaction::Body::PoseDetection::IBodyPose* poseB);
    // public System.Void InjectJoints(System.Collections.Generic.IEnumerable`1<Oculus.Interaction.Body.PoseDetection.BodyPoseComparerActiveState/JointComparerConfig> configs)
    // Offset: 0x4842468
    void InjectJoints(::System::Collections::Generic::IEnumerable_1<::Oculus::Interaction::Body::PoseDetection::BodyPoseComparerActiveState::JointComparerConfig*>* configs);
    // public System.Void InjectOptionalTimeProvider(System.Func`1<System.Single> timeProvider)
    // Offset: 0x48424EC
    void InjectOptionalTimeProvider(::System::Func_1<float>* timeProvider);
    // public System.Void .ctor()
    // Offset: 0x48424F4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BodyPoseComparerActiveState* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Body::PoseDetection::BodyPoseComparerActiveState::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BodyPoseComparerActiveState*, creationType>()));
    }
  }; // Oculus.Interaction.Body.PoseDetection.BodyPoseComparerActiveState
  #pragma pack(pop)
  static check_size<sizeof(BodyPoseComparerActiveState), 100 + sizeof(float)> __Oculus_Interaction_Body_PoseDetection_BodyPoseComparerActiveStateSizeCheck;
  static_assert(sizeof(BodyPoseComparerActiveState) == 0x68);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Body::PoseDetection::BodyPoseComparerActiveState::BodyPoseComparerFeatureState, "Oculus.Interaction.Body.PoseDetection", "BodyPoseComparerActiveState/BodyPoseComparerFeatureState");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Body::PoseDetection::BodyPoseComparerActiveState::get_MinTimeInState
// Il2CppName: get_MinTimeInState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::Body::PoseDetection::BodyPoseComparerActiveState::*)()>(&Oculus::Interaction::Body::PoseDetection::BodyPoseComparerActiveState::get_MinTimeInState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Body::PoseDetection::BodyPoseComparerActiveState*), "get_MinTimeInState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Body::PoseDetection::BodyPoseComparerActiveState::set_MinTimeInState
// Il2CppName: set_MinTimeInState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Body::PoseDetection::BodyPoseComparerActiveState::*)(float)>(&Oculus::Interaction::Body::PoseDetection::BodyPoseComparerActiveState::set_MinTimeInState)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Body::PoseDetection::BodyPoseComparerActiveState*), "set_MinTimeInState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Body::PoseDetection::BodyPoseComparerActiveState::get_FeatureStates
// Il2CppName: get_FeatureStates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IReadOnlyDictionary_2<::Oculus::Interaction::Body::PoseDetection::BodyPoseComparerActiveState::JointComparerConfig*, ::Oculus::Interaction::Body::PoseDetection::BodyPoseComparerActiveState::BodyPoseComparerFeatureState>* (Oculus::Interaction::Body::PoseDetection::BodyPoseComparerActiveState::*)()>(&Oculus::Interaction::Body::PoseDetection::BodyPoseComparerActiveState::get_FeatureStates)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Body::PoseDetection::BodyPoseComparerActiveState*), "get_FeatureStates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Body::PoseDetection::BodyPoseComparerActiveState::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Body::PoseDetection::BodyPoseComparerActiveState::*)()>(&Oculus::Interaction::Body::PoseDetection::BodyPoseComparerActiveState::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Body::PoseDetection::BodyPoseComparerActiveState*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Body::PoseDetection::BodyPoseComparerActiveState::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Body::PoseDetection::BodyPoseComparerActiveState::*)()>(&Oculus::Interaction::Body::PoseDetection::BodyPoseComparerActiveState::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Body::PoseDetection::BodyPoseComparerActiveState*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Body::PoseDetection::BodyPoseComparerActiveState::get_Active
// Il2CppName: get_Active
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Body::PoseDetection::BodyPoseComparerActiveState::*)()>(&Oculus::Interaction::Body::PoseDetection::BodyPoseComparerActiveState::get_Active)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Body::PoseDetection::BodyPoseComparerActiveState*), "get_Active", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Body::PoseDetection::BodyPoseComparerActiveState::GetJointDelta
// Il2CppName: GetJointDelta
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Body::PoseDetection::BodyPoseComparerActiveState::*)(::Oculus::Interaction::Body::Input::BodyJointId, ByRef<float>)>(&Oculus::Interaction::Body::PoseDetection::BodyPoseComparerActiveState::GetJointDelta)> {
  static const MethodInfo* get() {
    static auto* joint = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Body.Input", "BodyJointId")->byval_arg;
    static auto* delta = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Body::PoseDetection::BodyPoseComparerActiveState*), "GetJointDelta", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{joint, delta});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Body::PoseDetection::BodyPoseComparerActiveState::InjectAllBodyPoseComparerActiveState
// Il2CppName: InjectAllBodyPoseComparerActiveState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Body::PoseDetection::BodyPoseComparerActiveState::*)(::Oculus::Interaction::Body::PoseDetection::IBodyPose*, ::Oculus::Interaction::Body::PoseDetection::IBodyPose*, ::System::Collections::Generic::IEnumerable_1<::Oculus::Interaction::Body::PoseDetection::BodyPoseComparerActiveState::JointComparerConfig*>*)>(&Oculus::Interaction::Body::PoseDetection::BodyPoseComparerActiveState::InjectAllBodyPoseComparerActiveState)> {
  static const MethodInfo* get() {
    static auto* poseA = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Body.PoseDetection", "IBodyPose")->byval_arg;
    static auto* poseB = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Body.PoseDetection", "IBodyPose")->byval_arg;
    static auto* configs = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IEnumerable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Interaction.Body.PoseDetection", "BodyPoseComparerActiveState/JointComparerConfig")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Body::PoseDetection::BodyPoseComparerActiveState*), "InjectAllBodyPoseComparerActiveState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{poseA, poseB, configs});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Body::PoseDetection::BodyPoseComparerActiveState::InjectPoseA
// Il2CppName: InjectPoseA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Body::PoseDetection::BodyPoseComparerActiveState::*)(::Oculus::Interaction::Body::PoseDetection::IBodyPose*)>(&Oculus::Interaction::Body::PoseDetection::BodyPoseComparerActiveState::InjectPoseA)> {
  static const MethodInfo* get() {
    static auto* poseA = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Body.PoseDetection", "IBodyPose")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Body::PoseDetection::BodyPoseComparerActiveState*), "InjectPoseA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{poseA});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Body::PoseDetection::BodyPoseComparerActiveState::InjectPoseB
// Il2CppName: InjectPoseB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Body::PoseDetection::BodyPoseComparerActiveState::*)(::Oculus::Interaction::Body::PoseDetection::IBodyPose*)>(&Oculus::Interaction::Body::PoseDetection::BodyPoseComparerActiveState::InjectPoseB)> {
  static const MethodInfo* get() {
    static auto* poseB = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Body.PoseDetection", "IBodyPose")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Body::PoseDetection::BodyPoseComparerActiveState*), "InjectPoseB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{poseB});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Body::PoseDetection::BodyPoseComparerActiveState::InjectJoints
// Il2CppName: InjectJoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Body::PoseDetection::BodyPoseComparerActiveState::*)(::System::Collections::Generic::IEnumerable_1<::Oculus::Interaction::Body::PoseDetection::BodyPoseComparerActiveState::JointComparerConfig*>*)>(&Oculus::Interaction::Body::PoseDetection::BodyPoseComparerActiveState::InjectJoints)> {
  static const MethodInfo* get() {
    static auto* configs = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IEnumerable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Interaction.Body.PoseDetection", "BodyPoseComparerActiveState/JointComparerConfig")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Body::PoseDetection::BodyPoseComparerActiveState*), "InjectJoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{configs});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Body::PoseDetection::BodyPoseComparerActiveState::InjectOptionalTimeProvider
// Il2CppName: InjectOptionalTimeProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Body::PoseDetection::BodyPoseComparerActiveState::*)(::System::Func_1<float>*)>(&Oculus::Interaction::Body::PoseDetection::BodyPoseComparerActiveState::InjectOptionalTimeProvider)> {
  static const MethodInfo* get() {
    static auto* timeProvider = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Func`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Body::PoseDetection::BodyPoseComparerActiveState*), "InjectOptionalTimeProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{timeProvider});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Body::PoseDetection::BodyPoseComparerActiveState::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
