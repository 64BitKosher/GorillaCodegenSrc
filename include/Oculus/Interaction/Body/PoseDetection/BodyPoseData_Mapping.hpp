// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Oculus.Interaction.Body.PoseDetection.BodyPoseData
#include "Oculus/Interaction/Body/PoseDetection/BodyPoseData.hpp"
// Including type: Oculus.Interaction.Body.Input.ISkeletonMapping
#include "Oculus/Interaction/Body/Input/ISkeletonMapping.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction::Collections
namespace Oculus::Interaction::Collections {
  // Forward declaring type: EnumerableHashSet`1<T>
  template<typename T>
  class EnumerableHashSet_1;
  // Forward declaring type: IEnumerableHashSet`1<T>
  template<typename T>
  class IEnumerableHashSet_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Body::PoseDetection::BodyPoseData::Mapping);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Body::PoseDetection::BodyPoseData::Mapping*, "Oculus.Interaction.Body.PoseDetection", "BodyPoseData/Mapping");
// Type namespace: Oculus.Interaction.Body.PoseDetection
namespace Oculus::Interaction::Body::PoseDetection {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.Body.PoseDetection.BodyPoseData/Mapping
  // [TokenAttribute] Offset: FFFFFFFF
  class BodyPoseData::Mapping : public ::Il2CppObject/*, public ::Oculus::Interaction::Body::Input::ISkeletonMapping*/ {
    public:
    public:
    // public Oculus.Interaction.Collections.EnumerableHashSet`1<Oculus.Interaction.Body.Input.BodyJointId> Joints
    // Size: 0x8
    // Offset: 0x10
    ::Oculus::Interaction::Collections::EnumerableHashSet_1<::Oculus::Interaction::Body::Input::BodyJointId>* Joints;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Collections::EnumerableHashSet_1<::Oculus::Interaction::Body::Input::BodyJointId>*) == 0x8);
    // public System.Collections.Generic.Dictionary`2<Oculus.Interaction.Body.Input.BodyJointId,Oculus.Interaction.Body.Input.BodyJointId> JointToParent
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::Dictionary_2<::Oculus::Interaction::Body::Input::BodyJointId, ::Oculus::Interaction::Body::Input::BodyJointId>* JointToParent;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::Oculus::Interaction::Body::Input::BodyJointId, ::Oculus::Interaction::Body::Input::BodyJointId>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::Body::Input::ISkeletonMapping
    operator ::Oculus::Interaction::Body::Input::ISkeletonMapping() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::Body::Input::ISkeletonMapping*>(this);
    }
    // Get instance field reference: public Oculus.Interaction.Collections.EnumerableHashSet`1<Oculus.Interaction.Body.Input.BodyJointId> Joints
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Collections::EnumerableHashSet_1<::Oculus::Interaction::Body::Input::BodyJointId>*& dyn_Joints();
    // Get instance field reference: public System.Collections.Generic.Dictionary`2<Oculus.Interaction.Body.Input.BodyJointId,Oculus.Interaction.Body.Input.BodyJointId> JointToParent
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::Oculus::Interaction::Body::Input::BodyJointId, ::Oculus::Interaction::Body::Input::BodyJointId>*& dyn_JointToParent();
    // private Oculus.Interaction.Collections.IEnumerableHashSet`1<Oculus.Interaction.Body.Input.BodyJointId> Oculus.Interaction.Body.Input.ISkeletonMapping.get_Joints()
    // Offset: 0x4843B68
    ::Oculus::Interaction::Collections::IEnumerableHashSet_1<::Oculus::Interaction::Body::Input::BodyJointId>* Oculus_Interaction_Body_Input_ISkeletonMapping_get_Joints();
    // private System.Boolean Oculus.Interaction.Body.Input.ISkeletonMapping.TryGetParentJointId(Oculus.Interaction.Body.Input.BodyJointId jointId, out Oculus.Interaction.Body.Input.BodyJointId parent)
    // Offset: 0x4843B70
    bool Oculus_Interaction_Body_Input_ISkeletonMapping_TryGetParentJointId(::Oculus::Interaction::Body::Input::BodyJointId jointId, ByRef<::Oculus::Interaction::Body::Input::BodyJointId> parent);
    // public System.Void .ctor()
    // Offset: 0x4843A8C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BodyPoseData::Mapping* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Body::PoseDetection::BodyPoseData::Mapping::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BodyPoseData::Mapping*, creationType>()));
    }
  }; // Oculus.Interaction.Body.PoseDetection.BodyPoseData/Mapping
  #pragma pack(pop)
  static check_size<sizeof(BodyPoseData::Mapping), 24 + sizeof(::System::Collections::Generic::Dictionary_2<::Oculus::Interaction::Body::Input::BodyJointId, ::Oculus::Interaction::Body::Input::BodyJointId>*)> __Oculus_Interaction_Body_PoseDetection_BodyPoseData_MappingSizeCheck;
  static_assert(sizeof(BodyPoseData::Mapping) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Body::PoseDetection::BodyPoseData::Mapping::Oculus_Interaction_Body_Input_ISkeletonMapping_get_Joints
// Il2CppName: Oculus.Interaction.Body.Input.ISkeletonMapping.get_Joints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Collections::IEnumerableHashSet_1<::Oculus::Interaction::Body::Input::BodyJointId>* (Oculus::Interaction::Body::PoseDetection::BodyPoseData::Mapping::*)()>(&Oculus::Interaction::Body::PoseDetection::BodyPoseData::Mapping::Oculus_Interaction_Body_Input_ISkeletonMapping_get_Joints)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Body::PoseDetection::BodyPoseData::Mapping*), "Oculus.Interaction.Body.Input.ISkeletonMapping.get_Joints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Body::PoseDetection::BodyPoseData::Mapping::Oculus_Interaction_Body_Input_ISkeletonMapping_TryGetParentJointId
// Il2CppName: Oculus.Interaction.Body.Input.ISkeletonMapping.TryGetParentJointId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Body::PoseDetection::BodyPoseData::Mapping::*)(::Oculus::Interaction::Body::Input::BodyJointId, ByRef<::Oculus::Interaction::Body::Input::BodyJointId>)>(&Oculus::Interaction::Body::PoseDetection::BodyPoseData::Mapping::Oculus_Interaction_Body_Input_ISkeletonMapping_TryGetParentJointId)> {
  static const MethodInfo* get() {
    static auto* jointId = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Body.Input", "BodyJointId")->byval_arg;
    static auto* parent = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Body.Input", "BodyJointId")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Body::PoseDetection::BodyPoseData::Mapping*), "Oculus.Interaction.Body.Input.ISkeletonMapping.TryGetParentJointId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{jointId, parent});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Body::PoseDetection::BodyPoseData::Mapping::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
