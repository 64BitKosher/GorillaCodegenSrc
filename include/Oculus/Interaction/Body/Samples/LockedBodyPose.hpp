// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Oculus.Interaction.Body.PoseDetection.IBodyPose
#include "Oculus/Interaction/Body/PoseDetection/IBodyPose.hpp"
// Including type: Oculus.Interaction.Body.Input.BodyJointId
#include "Oculus/Interaction/Body/Input/BodyJointId.hpp"
// Including type: UnityEngine.Pose
#include "UnityEngine/Pose.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction::Body::Samples
namespace Oculus::Interaction::Body::Samples {
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Object because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: Oculus::Interaction::Body::Input
namespace Oculus::Interaction::Body::Input {
  // Forward declaring type: ISkeletonMapping
  class ISkeletonMapping;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.Body.Samples
namespace Oculus::Interaction::Body::Samples {
  // Forward declaring type: LockedBodyPose
  class LockedBodyPose;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Body::Samples::LockedBodyPose);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Body::Samples::LockedBodyPose*, "Oculus.Interaction.Body.Samples", "LockedBodyPose");
// Type namespace: Oculus.Interaction.Body.Samples
namespace Oculus::Interaction::Body::Samples {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.Body.Samples.LockedBodyPose
  // [TokenAttribute] Offset: FFFFFFFF
  class LockedBodyPose : public ::UnityEngine::MonoBehaviour/*, public ::Oculus::Interaction::Body::PoseDetection::IBodyPose*/ {
    public:
    // Nested type: ::Oculus::Interaction::Body::Samples::LockedBodyPose::$$c
    class $$c;
    public:
    // private System.Action WhenBodyPoseUpdated
    // Size: 0x8
    // Offset: 0x20
    ::System::Action* WhenBodyPoseUpdated;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private UnityEngine.Object _pose
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Object* pose;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.Body.PoseDetection.IBodyPose Pose
    // Size: 0x8
    // Offset: 0x30
    ::Oculus::Interaction::Body::PoseDetection::IBodyPose* Pose;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Body::PoseDetection::IBodyPose*) == 0x8);
    // private Oculus.Interaction.Body.Input.BodyJointId _referenceJoint
    // Size: 0x4
    // Offset: 0x38
    ::Oculus::Interaction::Body::Input::BodyJointId referenceJoint;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Body::Input::BodyJointId) == 0x4);
    // private UnityEngine.Pose _referenceOffset
    // Size: 0x1C
    // Offset: 0x3C
    ::UnityEngine::Pose referenceOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Pose) == 0x1C);
    // protected System.Boolean _started
    // Size: 0x1
    // Offset: 0x58
    bool started;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: started and: lockedPoses
    char __padding5[0x7] = {};
    // private System.Collections.Generic.Dictionary`2<Oculus.Interaction.Body.Input.BodyJointId,UnityEngine.Pose> _lockedPoses
    // Size: 0x8
    // Offset: 0x60
    ::System::Collections::Generic::Dictionary_2<::Oculus::Interaction::Body::Input::BodyJointId, ::UnityEngine::Pose>* lockedPoses;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::Oculus::Interaction::Body::Input::BodyJointId, ::UnityEngine::Pose>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::Body::PoseDetection::IBodyPose
    operator ::Oculus::Interaction::Body::PoseDetection::IBodyPose() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::Body::PoseDetection::IBodyPose*>(this);
    }
    // Get static field: static private readonly UnityEngine.Pose HIP_OFFSET
    static ::UnityEngine::Pose _get_HIP_OFFSET();
    // Set static field: static private readonly UnityEngine.Pose HIP_OFFSET
    static void _set_HIP_OFFSET(::UnityEngine::Pose value);
    // Get instance field reference: private System.Action WhenBodyPoseUpdated
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_WhenBodyPoseUpdated();
    // Get instance field reference: private UnityEngine.Object _pose
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__pose();
    // Get instance field reference: private Oculus.Interaction.Body.PoseDetection.IBodyPose Pose
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Body::PoseDetection::IBodyPose*& dyn_Pose();
    // Get instance field reference: private Oculus.Interaction.Body.Input.BodyJointId _referenceJoint
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Body::Input::BodyJointId& dyn__referenceJoint();
    // Get instance field reference: private UnityEngine.Pose _referenceOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Pose& dyn__referenceOffset();
    // Get instance field reference: protected System.Boolean _started
    [[deprecated("Use field access instead!")]] bool& dyn__started();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<Oculus.Interaction.Body.Input.BodyJointId,UnityEngine.Pose> _lockedPoses
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::Oculus::Interaction::Body::Input::BodyJointId, ::UnityEngine::Pose>*& dyn__lockedPoses();
    // public System.Void add_WhenBodyPoseUpdated(System.Action value)
    // Offset: 0x47A43B8
    void add_WhenBodyPoseUpdated(::System::Action* value);
    // public System.Void remove_WhenBodyPoseUpdated(System.Action value)
    // Offset: 0x47A4454
    void remove_WhenBodyPoseUpdated(::System::Action* value);
    // public Oculus.Interaction.Body.Input.ISkeletonMapping get_SkeletonMapping()
    // Offset: 0x47A44F0
    ::Oculus::Interaction::Body::Input::ISkeletonMapping* get_SkeletonMapping();
    // public System.Boolean GetJointPoseLocal(Oculus.Interaction.Body.Input.BodyJointId bodyJointId, out UnityEngine.Pose pose)
    // Offset: 0x47A4594
    bool GetJointPoseLocal(::Oculus::Interaction::Body::Input::BodyJointId bodyJointId, ByRef<::UnityEngine::Pose> pose);
    // public System.Boolean GetJointPoseFromRoot(Oculus.Interaction.Body.Input.BodyJointId bodyJointId, out UnityEngine.Pose pose)
    // Offset: 0x47A4650
    bool GetJointPoseFromRoot(::Oculus::Interaction::Body::Input::BodyJointId bodyJointId, ByRef<::UnityEngine::Pose> pose);
    // private System.Void UpdateLockedBodyPose()
    // Offset: 0x47A46B8
    void UpdateLockedBodyPose();
    // protected System.Void Awake()
    // Offset: 0x47A48E0
    void Awake();
    // protected System.Void Start()
    // Offset: 0x47A499C
    void Start();
    // protected System.Void OnEnable()
    // Offset: 0x47A49DC
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x47A4AD8
    void OnDisable();
    // public System.Void .ctor()
    // Offset: 0x47A4BD8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LockedBodyPose* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Body::Samples::LockedBodyPose::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LockedBodyPose*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x47A4D20
    static void _cctor();
  }; // Oculus.Interaction.Body.Samples.LockedBodyPose
  #pragma pack(pop)
  static check_size<sizeof(LockedBodyPose), 96 + sizeof(::System::Collections::Generic::Dictionary_2<::Oculus::Interaction::Body::Input::BodyJointId, ::UnityEngine::Pose>*)> __Oculus_Interaction_Body_Samples_LockedBodyPoseSizeCheck;
  static_assert(sizeof(LockedBodyPose) == 0x68);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Body::Samples::LockedBodyPose::add_WhenBodyPoseUpdated
// Il2CppName: add_WhenBodyPoseUpdated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Body::Samples::LockedBodyPose::*)(::System::Action*)>(&Oculus::Interaction::Body::Samples::LockedBodyPose::add_WhenBodyPoseUpdated)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Body::Samples::LockedBodyPose*), "add_WhenBodyPoseUpdated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Body::Samples::LockedBodyPose::remove_WhenBodyPoseUpdated
// Il2CppName: remove_WhenBodyPoseUpdated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Body::Samples::LockedBodyPose::*)(::System::Action*)>(&Oculus::Interaction::Body::Samples::LockedBodyPose::remove_WhenBodyPoseUpdated)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Body::Samples::LockedBodyPose*), "remove_WhenBodyPoseUpdated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Body::Samples::LockedBodyPose::get_SkeletonMapping
// Il2CppName: get_SkeletonMapping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Body::Input::ISkeletonMapping* (Oculus::Interaction::Body::Samples::LockedBodyPose::*)()>(&Oculus::Interaction::Body::Samples::LockedBodyPose::get_SkeletonMapping)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Body::Samples::LockedBodyPose*), "get_SkeletonMapping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Body::Samples::LockedBodyPose::GetJointPoseLocal
// Il2CppName: GetJointPoseLocal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Body::Samples::LockedBodyPose::*)(::Oculus::Interaction::Body::Input::BodyJointId, ByRef<::UnityEngine::Pose>)>(&Oculus::Interaction::Body::Samples::LockedBodyPose::GetJointPoseLocal)> {
  static const MethodInfo* get() {
    static auto* bodyJointId = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Body.Input", "BodyJointId")->byval_arg;
    static auto* pose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Body::Samples::LockedBodyPose*), "GetJointPoseLocal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bodyJointId, pose});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Body::Samples::LockedBodyPose::GetJointPoseFromRoot
// Il2CppName: GetJointPoseFromRoot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Body::Samples::LockedBodyPose::*)(::Oculus::Interaction::Body::Input::BodyJointId, ByRef<::UnityEngine::Pose>)>(&Oculus::Interaction::Body::Samples::LockedBodyPose::GetJointPoseFromRoot)> {
  static const MethodInfo* get() {
    static auto* bodyJointId = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Body.Input", "BodyJointId")->byval_arg;
    static auto* pose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Body::Samples::LockedBodyPose*), "GetJointPoseFromRoot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bodyJointId, pose});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Body::Samples::LockedBodyPose::UpdateLockedBodyPose
// Il2CppName: UpdateLockedBodyPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Body::Samples::LockedBodyPose::*)()>(&Oculus::Interaction::Body::Samples::LockedBodyPose::UpdateLockedBodyPose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Body::Samples::LockedBodyPose*), "UpdateLockedBodyPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Body::Samples::LockedBodyPose::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Body::Samples::LockedBodyPose::*)()>(&Oculus::Interaction::Body::Samples::LockedBodyPose::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Body::Samples::LockedBodyPose*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Body::Samples::LockedBodyPose::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Body::Samples::LockedBodyPose::*)()>(&Oculus::Interaction::Body::Samples::LockedBodyPose::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Body::Samples::LockedBodyPose*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Body::Samples::LockedBodyPose::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Body::Samples::LockedBodyPose::*)()>(&Oculus::Interaction::Body::Samples::LockedBodyPose::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Body::Samples::LockedBodyPose*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Body::Samples::LockedBodyPose::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Body::Samples::LockedBodyPose::*)()>(&Oculus::Interaction::Body::Samples::LockedBodyPose::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Body::Samples::LockedBodyPose*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Body::Samples::LockedBodyPose::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Interaction::Body::Samples::LockedBodyPose::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Oculus::Interaction::Body::Samples::LockedBodyPose::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Body::Samples::LockedBodyPose*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
