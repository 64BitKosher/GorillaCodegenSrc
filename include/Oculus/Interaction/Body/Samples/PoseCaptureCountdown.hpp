// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Events
namespace UnityEngine::Events {
  // Forward declaring type: UnityEvent
  class UnityEvent;
}
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TextMeshProUGUI
  class TextMeshProUGUI;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Renderer
  class Renderer;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.Body.Samples
namespace Oculus::Interaction::Body::Samples {
  // Forward declaring type: PoseCaptureCountdown
  class PoseCaptureCountdown;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Body::Samples::PoseCaptureCountdown);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Body::Samples::PoseCaptureCountdown*, "Oculus.Interaction.Body.Samples", "PoseCaptureCountdown");
// Type namespace: Oculus.Interaction.Body.Samples
namespace Oculus::Interaction::Body::Samples {
  // Size: 0x6C
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.Body.Samples.PoseCaptureCountdown
  // [TokenAttribute] Offset: FFFFFFFF
  class PoseCaptureCountdown : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.Events.UnityEvent _timerStart
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Events::UnityEvent* timerStart;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    // private UnityEngine.Events.UnityEvent _timerSecondTick
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Events::UnityEvent* timerSecondTick;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    // private UnityEngine.Events.UnityEvent _timeUp
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Events::UnityEvent* timeUp;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    // private TMPro.TextMeshProUGUI _countdownText
    // Size: 0x8
    // Offset: 0x38
    ::TMPro::TextMeshProUGUI* countdownText;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshProUGUI*) == 0x8);
    // private System.String _poseText
    // Size: 0x8
    // Offset: 0x40
    ::StringW poseText;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Single duration
    // Size: 0x4
    // Offset: 0x48
    float duration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: duration and: renderer
    char __padding5[0x4] = {};
    // private UnityEngine.Renderer _renderer
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::Renderer* renderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::Renderer*) == 0x8);
    // private UnityEngine.Color _resetColor
    // Size: 0x10
    // Offset: 0x58
    ::UnityEngine::Color resetColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private System.Single _timer
    // Size: 0x4
    // Offset: 0x68
    float timer;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: private UnityEngine.Events.UnityEvent _timerStart
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn__timerStart();
    // Get instance field reference: private UnityEngine.Events.UnityEvent _timerSecondTick
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn__timerSecondTick();
    // Get instance field reference: private UnityEngine.Events.UnityEvent _timeUp
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn__timeUp();
    // Get instance field reference: private TMPro.TextMeshProUGUI _countdownText
    [[deprecated("Use field access instead!")]] ::TMPro::TextMeshProUGUI*& dyn__countdownText();
    // Get instance field reference: private System.String _poseText
    [[deprecated("Use field access instead!")]] ::StringW& dyn__poseText();
    // Get instance field reference: private System.Single duration
    [[deprecated("Use field access instead!")]] float& dyn_duration();
    // Get instance field reference: private UnityEngine.Renderer _renderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& dyn__renderer();
    // Get instance field reference: private UnityEngine.Color _resetColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__resetColor();
    // Get instance field reference: private System.Single _timer
    [[deprecated("Use field access instead!")]] float& dyn__timer();
    // public System.Void Restart()
    // Offset: 0x47A4E08
    void Restart();
    // private System.Void Update()
    // Offset: 0x47A4EB8
    void Update();
    // public System.Void .ctor()
    // Offset: 0x47A4FEC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PoseCaptureCountdown* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Body::Samples::PoseCaptureCountdown::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PoseCaptureCountdown*, creationType>()));
    }
  }; // Oculus.Interaction.Body.Samples.PoseCaptureCountdown
  #pragma pack(pop)
  static check_size<sizeof(PoseCaptureCountdown), 104 + sizeof(float)> __Oculus_Interaction_Body_Samples_PoseCaptureCountdownSizeCheck;
  static_assert(sizeof(PoseCaptureCountdown) == 0x6C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Body::Samples::PoseCaptureCountdown::Restart
// Il2CppName: Restart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Body::Samples::PoseCaptureCountdown::*)()>(&Oculus::Interaction::Body::Samples::PoseCaptureCountdown::Restart)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Body::Samples::PoseCaptureCountdown*), "Restart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Body::Samples::PoseCaptureCountdown::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Body::Samples::PoseCaptureCountdown::*)()>(&Oculus::Interaction::Body::Samples::PoseCaptureCountdown::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Body::Samples::PoseCaptureCountdown*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Body::Samples::PoseCaptureCountdown::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
