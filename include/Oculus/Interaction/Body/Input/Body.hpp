// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Oculus.Interaction.Input.DataModifier`1
#include "Oculus/Interaction/Input/DataModifier_1.hpp"
// Including type: Oculus.Interaction.Body.Input.IBody
#include "Oculus/Interaction/Body/Input/IBody.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction::Body::Input
namespace Oculus::Interaction::Body::Input {
  // Forward declaring type: BodyDataAsset
  class BodyDataAsset;
  // Forward declaring type: BodyJointsCache
  class BodyJointsCache;
  // Forward declaring type: ISkeletonMapping
  class ISkeletonMapping;
  // Forward declaring type: BodyJointId
  struct BodyJointId;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Pose
  struct Pose;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.Body.Input
namespace Oculus::Interaction::Body::Input {
  // Forward declaring type: Body
  class Body;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Body::Input::Body);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Body::Input::Body*, "Oculus.Interaction.Body.Input", "Body");
// Type namespace: Oculus.Interaction.Body.Input
namespace Oculus::Interaction::Body::Input {
  // WARNING Size may be invalid!
  // Autogenerated type: Oculus.Interaction.Body.Input.Body
  // [TokenAttribute] Offset: FFFFFFFF
  class Body : public ::Oculus::Interaction::Input::DataModifier_1<::Oculus::Interaction::Body::Input::BodyDataAsset*>/*, public ::Oculus::Interaction::Body::Input::IBody*/ {
    public:
    // Nested type: ::Oculus::Interaction::Body::Input::Body::$$c
    class $$c;
    public:
    // private UnityEngine.Transform _trackingSpace
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::Transform* trackingSpace;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private System.Action WhenBodyUpdated
    // Size: 0x8
    // Offset: 0x78
    ::System::Action* WhenBodyUpdated;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private Oculus.Interaction.Body.Input.BodyJointsCache _jointPosesCache
    // Size: 0x8
    // Offset: 0x80
    ::Oculus::Interaction::Body::Input::BodyJointsCache* jointPosesCache;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Body::Input::BodyJointsCache*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::Body::Input::IBody
    operator ::Oculus::Interaction::Body::Input::IBody() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::Body::Input::IBody*>(this);
    }
    // Get instance field reference: private UnityEngine.Transform _trackingSpace
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__trackingSpace();
    // Get instance field reference: private System.Action WhenBodyUpdated
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_WhenBodyUpdated();
    // Get instance field reference: private Oculus.Interaction.Body.Input.BodyJointsCache _jointPosesCache
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Body::Input::BodyJointsCache*& dyn__jointPosesCache();
    // public System.Boolean get_IsConnected()
    // Offset: 0x4844FF0
    bool get_IsConnected();
    // public System.Boolean get_IsHighConfidence()
    // Offset: 0x4845048
    bool get_IsHighConfidence();
    // public System.Single get_Scale()
    // Offset: 0x48450A0
    float get_Scale();
    // public Oculus.Interaction.Body.Input.ISkeletonMapping get_SkeletonMapping()
    // Offset: 0x48450F8
    ::Oculus::Interaction::Body::Input::ISkeletonMapping* get_SkeletonMapping();
    // public System.Boolean get_IsTrackedDataValid()
    // Offset: 0x4845150
    bool get_IsTrackedDataValid();
    // public System.Void add_WhenBodyUpdated(System.Action value)
    // Offset: 0x48451A8
    void add_WhenBodyUpdated(::System::Action* value);
    // public System.Void remove_WhenBodyUpdated(System.Action value)
    // Offset: 0x4845244
    void remove_WhenBodyUpdated(::System::Action* value);
    // public System.Boolean GetJointPose(Oculus.Interaction.Body.Input.BodyJointId bodyJointId, out UnityEngine.Pose pose)
    // Offset: 0x48452E0
    bool GetJointPose(::Oculus::Interaction::Body::Input::BodyJointId bodyJointId, ByRef<::UnityEngine::Pose> pose);
    // public System.Boolean GetJointPoseLocal(Oculus.Interaction.Body.Input.BodyJointId bodyJointId, out UnityEngine.Pose pose)
    // Offset: 0x48455BC
    bool GetJointPoseLocal(::Oculus::Interaction::Body::Input::BodyJointId bodyJointId, ByRef<::UnityEngine::Pose> pose);
    // public System.Boolean GetJointPoseFromRoot(Oculus.Interaction.Body.Input.BodyJointId bodyJointId, out UnityEngine.Pose pose)
    // Offset: 0x48457EC
    bool GetJointPoseFromRoot(::Oculus::Interaction::Body::Input::BodyJointId bodyJointId, ByRef<::UnityEngine::Pose> pose);
    // public System.Boolean GetRootPose(out UnityEngine.Pose pose)
    // Offset: 0x4845A1C
    bool GetRootPose(ByRef<::UnityEngine::Pose> pose);
    // private System.Void InitializeJointPosesCache()
    // Offset: 0x4845AEC
    void InitializeJointPosesCache();
    // private System.Void CheckJointPosesCacheUpdate()
    // Offset: 0x48454B8
    void CheckJointPosesCacheUpdate();
    // protected System.Void Apply(Oculus.Interaction.Body.Input.BodyDataAsset data)
    // Offset: 0x48460C0
    void Apply(::Oculus::Interaction::Body::Input::BodyDataAsset* data);
    // public override System.Void MarkInputDataRequiresUpdate()
    // Offset: 0x48460C4
    // Implemented from: Oculus.Interaction.Input.DataSource`1
    // Base method: System.Void DataSource_1::MarkInputDataRequiresUpdate()
    void MarkInputDataRequiresUpdate();
    // public System.Void .ctor()
    // Offset: 0x4846150
    // Implemented from: Oculus.Interaction.Input.DataModifier`1
    // Base method: System.Void DataModifier_1::.ctor()
    // Base method: System.Void DataSource_1::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Body* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Body::Input::Body::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Body*, creationType>()));
    }
  }; // Oculus.Interaction.Body.Input.Body
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Body::Input::Body::get_IsConnected
// Il2CppName: get_IsConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Body::Input::Body::*)()>(&Oculus::Interaction::Body::Input::Body::get_IsConnected)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Body::Input::Body*), "get_IsConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Body::Input::Body::get_IsHighConfidence
// Il2CppName: get_IsHighConfidence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Body::Input::Body::*)()>(&Oculus::Interaction::Body::Input::Body::get_IsHighConfidence)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Body::Input::Body*), "get_IsHighConfidence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Body::Input::Body::get_Scale
// Il2CppName: get_Scale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::Body::Input::Body::*)()>(&Oculus::Interaction::Body::Input::Body::get_Scale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Body::Input::Body*), "get_Scale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Body::Input::Body::get_SkeletonMapping
// Il2CppName: get_SkeletonMapping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Body::Input::ISkeletonMapping* (Oculus::Interaction::Body::Input::Body::*)()>(&Oculus::Interaction::Body::Input::Body::get_SkeletonMapping)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Body::Input::Body*), "get_SkeletonMapping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Body::Input::Body::get_IsTrackedDataValid
// Il2CppName: get_IsTrackedDataValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Body::Input::Body::*)()>(&Oculus::Interaction::Body::Input::Body::get_IsTrackedDataValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Body::Input::Body*), "get_IsTrackedDataValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Body::Input::Body::add_WhenBodyUpdated
// Il2CppName: add_WhenBodyUpdated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Body::Input::Body::*)(::System::Action*)>(&Oculus::Interaction::Body::Input::Body::add_WhenBodyUpdated)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Body::Input::Body*), "add_WhenBodyUpdated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Body::Input::Body::remove_WhenBodyUpdated
// Il2CppName: remove_WhenBodyUpdated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Body::Input::Body::*)(::System::Action*)>(&Oculus::Interaction::Body::Input::Body::remove_WhenBodyUpdated)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Body::Input::Body*), "remove_WhenBodyUpdated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Body::Input::Body::GetJointPose
// Il2CppName: GetJointPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Body::Input::Body::*)(::Oculus::Interaction::Body::Input::BodyJointId, ByRef<::UnityEngine::Pose>)>(&Oculus::Interaction::Body::Input::Body::GetJointPose)> {
  static const MethodInfo* get() {
    static auto* bodyJointId = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Body.Input", "BodyJointId")->byval_arg;
    static auto* pose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Body::Input::Body*), "GetJointPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bodyJointId, pose});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Body::Input::Body::GetJointPoseLocal
// Il2CppName: GetJointPoseLocal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Body::Input::Body::*)(::Oculus::Interaction::Body::Input::BodyJointId, ByRef<::UnityEngine::Pose>)>(&Oculus::Interaction::Body::Input::Body::GetJointPoseLocal)> {
  static const MethodInfo* get() {
    static auto* bodyJointId = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Body.Input", "BodyJointId")->byval_arg;
    static auto* pose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Body::Input::Body*), "GetJointPoseLocal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bodyJointId, pose});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Body::Input::Body::GetJointPoseFromRoot
// Il2CppName: GetJointPoseFromRoot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Body::Input::Body::*)(::Oculus::Interaction::Body::Input::BodyJointId, ByRef<::UnityEngine::Pose>)>(&Oculus::Interaction::Body::Input::Body::GetJointPoseFromRoot)> {
  static const MethodInfo* get() {
    static auto* bodyJointId = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Body.Input", "BodyJointId")->byval_arg;
    static auto* pose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Body::Input::Body*), "GetJointPoseFromRoot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bodyJointId, pose});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Body::Input::Body::GetRootPose
// Il2CppName: GetRootPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Body::Input::Body::*)(ByRef<::UnityEngine::Pose>)>(&Oculus::Interaction::Body::Input::Body::GetRootPose)> {
  static const MethodInfo* get() {
    static auto* pose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Body::Input::Body*), "GetRootPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pose});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Body::Input::Body::InitializeJointPosesCache
// Il2CppName: InitializeJointPosesCache
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Body::Input::Body::*)()>(&Oculus::Interaction::Body::Input::Body::InitializeJointPosesCache)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Body::Input::Body*), "InitializeJointPosesCache", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Body::Input::Body::CheckJointPosesCacheUpdate
// Il2CppName: CheckJointPosesCacheUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Body::Input::Body::*)()>(&Oculus::Interaction::Body::Input::Body::CheckJointPosesCacheUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Body::Input::Body*), "CheckJointPosesCacheUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Body::Input::Body::Apply
// Il2CppName: Apply
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Body::Input::Body::*)(::Oculus::Interaction::Body::Input::BodyDataAsset*)>(&Oculus::Interaction::Body::Input::Body::Apply)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Body.Input", "BodyDataAsset")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Body::Input::Body*), "Apply", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Body::Input::Body::MarkInputDataRequiresUpdate
// Il2CppName: MarkInputDataRequiresUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Body::Input::Body::*)()>(&Oculus::Interaction::Body::Input::Body::MarkInputDataRequiresUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Body::Input::Body*), "MarkInputDataRequiresUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Body::Input::Body::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
