// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Oculus.Interaction.Body.Input.BodySkeletonMapping`1
#include "Oculus/Interaction/Body/Input/BodySkeletonMapping_1.hpp"
// Including type: OVRPlugin/BoneId
#include "GlobalNamespace/OVRPlugin.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: IReadOnlyDictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class IReadOnlyDictionary_2;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.Body.Input
namespace Oculus::Interaction::Body::Input {
  // Forward declaring type: OVRSkeletonMapping
  class OVRSkeletonMapping;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Body::Input::OVRSkeletonMapping);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Body::Input::OVRSkeletonMapping*, "Oculus.Interaction.Body.Input", "OVRSkeletonMapping");
// Type namespace: Oculus.Interaction.Body.Input
namespace Oculus::Interaction::Body::Input {
  // WARNING Size may be invalid!
  // Autogenerated type: Oculus.Interaction.Body.Input.OVRSkeletonMapping
  // [TokenAttribute] Offset: FFFFFFFF
  class OVRSkeletonMapping : public ::Oculus::Interaction::Body::Input::BodySkeletonMapping_1<::GlobalNamespace::OVRPlugin::BoneId> {
    public:
    public:
    // private readonly System.Collections.Generic.Dictionary`2<Oculus.Interaction.Body.Input.BodyJointId,Oculus.Interaction.Body.Input.BodySkeletonMapping`1/JointInfo<OVRPlugin/BoneId>> _jointMapping
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::Dictionary_2<::Oculus::Interaction::Body::Input::BodyJointId, typename ::Oculus::Interaction::Body::Input::BodySkeletonMapping_1<::GlobalNamespace::OVRPlugin::BoneId>::JointInfo>* jointMapping;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::Oculus::Interaction::Body::Input::BodyJointId, typename ::Oculus::Interaction::Body::Input::BodySkeletonMapping_1<::GlobalNamespace::OVRPlugin::BoneId>::JointInfo>*) == 0x8);
    public:
    // Creating conversion operator: operator ::System::Collections::Generic::Dictionary_2<::Oculus::Interaction::Body::Input::BodyJointId, typename ::Oculus::Interaction::Body::Input::BodySkeletonMapping_1<::GlobalNamespace::OVRPlugin::BoneId>::JointInfo>*
    constexpr operator ::System::Collections::Generic::Dictionary_2<::Oculus::Interaction::Body::Input::BodyJointId, typename ::Oculus::Interaction::Body::Input::BodySkeletonMapping_1<::GlobalNamespace::OVRPlugin::BoneId>::JointInfo>*() const noexcept {
      return jointMapping;
    }
    // Get instance field reference: private readonly System.Collections.Generic.Dictionary`2<Oculus.Interaction.Body.Input.BodyJointId,Oculus.Interaction.Body.Input.BodySkeletonMapping`1/JointInfo<OVRPlugin/BoneId>> _jointMapping
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::Oculus::Interaction::Body::Input::BodyJointId, typename ::Oculus::Interaction::Body::Input::BodySkeletonMapping_1<::GlobalNamespace::OVRPlugin::BoneId>::JointInfo>*& dyn__jointMapping();
    // protected System.Collections.Generic.IReadOnlyDictionary`2<Oculus.Interaction.Body.Input.BodyJointId,Oculus.Interaction.Body.Input.BodySkeletonMapping`1/JointInfo<OVRPlugin/BoneId>> GetJointMapping()
    // Offset: 0x4797BA4
    ::System::Collections::Generic::IReadOnlyDictionary_2<::Oculus::Interaction::Body::Input::BodyJointId, typename ::Oculus::Interaction::Body::Input::BodySkeletonMapping_1<::GlobalNamespace::OVRPlugin::BoneId>::JointInfo>* GetJointMapping();
    // protected OVRPlugin/BoneId GetRoot()
    // Offset: 0x4797BAC
    ::GlobalNamespace::OVRPlugin::BoneId GetRoot();
    // public System.Void .ctor()
    // Offset: 0x47965F8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OVRSkeletonMapping* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Body::Input::OVRSkeletonMapping::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OVRSkeletonMapping*, creationType>()));
    }
  }; // Oculus.Interaction.Body.Input.OVRSkeletonMapping
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Body::Input::OVRSkeletonMapping::GetJointMapping
// Il2CppName: GetJointMapping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IReadOnlyDictionary_2<::Oculus::Interaction::Body::Input::BodyJointId, typename ::Oculus::Interaction::Body::Input::BodySkeletonMapping_1<::GlobalNamespace::OVRPlugin::BoneId>::JointInfo>* (Oculus::Interaction::Body::Input::OVRSkeletonMapping::*)()>(&Oculus::Interaction::Body::Input::OVRSkeletonMapping::GetJointMapping)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Body::Input::OVRSkeletonMapping*), "GetJointMapping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Body::Input::OVRSkeletonMapping::GetRoot
// Il2CppName: GetRoot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::BoneId (Oculus::Interaction::Body::Input::OVRSkeletonMapping::*)()>(&Oculus::Interaction::Body::Input::OVRSkeletonMapping::GetRoot)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Body::Input::OVRSkeletonMapping*), "GetRoot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Body::Input::OVRSkeletonMapping::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
