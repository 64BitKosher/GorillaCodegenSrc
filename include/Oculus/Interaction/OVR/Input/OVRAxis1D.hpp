// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Oculus.Interaction.Input.IAxis1D
#include "Oculus/Interaction/Input/IAxis1D.hpp"
// Including type: OVRInput/Controller
#include "GlobalNamespace/OVRInput.hpp"
// Including type: OVRInput/Axis1D
#include "GlobalNamespace/OVRInput_Axis1D.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction::OVR::Input
namespace Oculus::Interaction::OVR::Input {
}
// Completed forward declares
// Type namespace: Oculus.Interaction.OVR.Input
namespace Oculus::Interaction::OVR::Input {
  // Forward declaring type: OVRAxis1D
  class OVRAxis1D;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::OVR::Input::OVRAxis1D);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::OVR::Input::OVRAxis1D*, "Oculus.Interaction.OVR.Input", "OVRAxis1D");
// Type namespace: Oculus.Interaction.OVR.Input
namespace Oculus::Interaction::OVR::Input {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.OVR.Input.OVRAxis1D
  // [TokenAttribute] Offset: FFFFFFFF
  class OVRAxis1D : public ::UnityEngine::MonoBehaviour/*, public ::Oculus::Interaction::Input::IAxis1D*/ {
    public:
    // Nested type: ::Oculus::Interaction::OVR::Input::OVRAxis1D::RemapConfig
    class RemapConfig;
    public:
    // private OVRInput/Controller _controller
    // Size: 0x4
    // Offset: 0x20
    ::GlobalNamespace::OVRInput::Controller controller;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRInput::Controller) == 0x4);
    // private OVRInput/Axis1D _axis1D
    // Size: 0x4
    // Offset: 0x24
    ::GlobalNamespace::OVRInput::Axis1D axis1D;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRInput::Axis1D) == 0x4);
    // private Oculus.Interaction.OVR.Input.OVRAxis1D/RemapConfig _remapConfig
    // Size: 0x8
    // Offset: 0x28
    ::Oculus::Interaction::OVR::Input::OVRAxis1D::RemapConfig* remapConfig;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::OVR::Input::OVRAxis1D::RemapConfig*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::Input::IAxis1D
    operator ::Oculus::Interaction::Input::IAxis1D() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::Input::IAxis1D*>(this);
    }
    // Get instance field reference: private OVRInput/Controller _controller
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRInput::Controller& dyn__controller();
    // Get instance field reference: private OVRInput/Axis1D _axis1D
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRInput::Axis1D& dyn__axis1D();
    // Get instance field reference: private Oculus.Interaction.OVR.Input.OVRAxis1D/RemapConfig _remapConfig
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::OVR::Input::OVRAxis1D::RemapConfig*& dyn__remapConfig();
    // public System.Single Value()
    // Offset: 0x478E7BC
    float Value();
    // public System.Void .ctor()
    // Offset: 0x478E84C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OVRAxis1D* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::OVR::Input::OVRAxis1D::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OVRAxis1D*, creationType>()));
    }
  }; // Oculus.Interaction.OVR.Input.OVRAxis1D
  #pragma pack(pop)
  static check_size<sizeof(OVRAxis1D), 40 + sizeof(::Oculus::Interaction::OVR::Input::OVRAxis1D::RemapConfig*)> __Oculus_Interaction_OVR_Input_OVRAxis1DSizeCheck;
  static_assert(sizeof(OVRAxis1D) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::OVR::Input::OVRAxis1D::Value
// Il2CppName: Value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::OVR::Input::OVRAxis1D::*)()>(&Oculus::Interaction::OVR::Input::OVRAxis1D::Value)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::OVR::Input::OVRAxis1D*), "Value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::OVR::Input::OVRAxis1D::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
