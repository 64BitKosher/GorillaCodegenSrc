// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Oculus.Interaction.ISnapPoseDelegate
#include "Oculus/Interaction/ISnapPoseDelegate.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Forward declaring namespace: Oculus::Interaction
namespace Oculus::Interaction {
  // Forward declaring type: ListLayout
  class ListLayout;
  // Forward declaring type: ListLayoutEase
  class ListLayoutEase;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Pose
  struct Pose;
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: ListSnapPoseDelegate
  class ListSnapPoseDelegate;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::ListSnapPoseDelegate);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::ListSnapPoseDelegate*, "Oculus.Interaction", "ListSnapPoseDelegate");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x3C
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.ListSnapPoseDelegate
  // [TokenAttribute] Offset: FFFFFFFF
  class ListSnapPoseDelegate : public ::UnityEngine::MonoBehaviour/*, public ::Oculus::Interaction::ISnapPoseDelegate*/ {
    public:
    public:
    // private System.Collections.Generic.HashSet`1<System.Int32> _snappedIds
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::HashSet_1<int>* snappedIds;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<int>*) == 0x8);
    // private Oculus.Interaction.ListLayout _layout
    // Size: 0x8
    // Offset: 0x28
    ::Oculus::Interaction::ListLayout* layout;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::ListLayout*) == 0x8);
    // private Oculus.Interaction.ListLayoutEase _layoutEase
    // Size: 0x8
    // Offset: 0x30
    ::Oculus::Interaction::ListLayoutEase* layoutEase;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::ListLayoutEase*) == 0x8);
    // private System.Single _defaultSize
    // Size: 0x4
    // Offset: 0x38
    float defaultSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::ISnapPoseDelegate
    operator ::Oculus::Interaction::ISnapPoseDelegate() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::ISnapPoseDelegate*>(this);
    }
    // Get instance field reference: private System.Collections.Generic.HashSet`1<System.Int32> _snappedIds
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<int>*& dyn__snappedIds();
    // Get instance field reference: private Oculus.Interaction.ListLayout _layout
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::ListLayout*& dyn__layout();
    // Get instance field reference: private Oculus.Interaction.ListLayoutEase _layoutEase
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::ListLayoutEase*& dyn__layoutEase();
    // Get instance field reference: private System.Single _defaultSize
    [[deprecated("Use field access instead!")]] float& dyn__defaultSize();
    // protected System.Void Start()
    // Offset: 0x47B8A10
    void Start();
    // protected System.Void Update()
    // Offset: 0x47B8B30
    void Update();
    // protected System.Single SizeForId(System.Int32 id)
    // Offset: 0x47B8B54
    float SizeForId(int id);
    // protected System.Single FloatForPose(UnityEngine.Pose pose)
    // Offset: 0x47B8B5C
    float FloatForPose(::UnityEngine::Pose pose);
    // protected UnityEngine.Pose PoseForFloat(System.Single position)
    // Offset: 0x47B8B88
    ::UnityEngine::Pose PoseForFloat(float position);
    // public System.Void TrackElement(System.Int32 id, UnityEngine.Pose p)
    // Offset: 0x47B8C40
    void TrackElement(int id, ::UnityEngine::Pose p);
    // public System.Void UntrackElement(System.Int32 id)
    // Offset: 0x47B8CE0
    void UntrackElement(int id);
    // public System.Void SnapElement(System.Int32 id, UnityEngine.Pose pose)
    // Offset: 0x47B8CF8
    void SnapElement(int id, ::UnityEngine::Pose pose);
    // public System.Void UnsnapElement(System.Int32 id)
    // Offset: 0x47B8D50
    void UnsnapElement(int id);
    // public System.Void MoveTrackedElement(System.Int32 id, UnityEngine.Pose p)
    // Offset: 0x47B8DA8
    void MoveTrackedElement(int id, ::UnityEngine::Pose p);
    // public System.Boolean SnapPoseForElement(System.Int32 id, UnityEngine.Pose pose, out UnityEngine.Pose result)
    // Offset: 0x47B8E14
    bool SnapPoseForElement(int id, ::UnityEngine::Pose pose, ByRef<::UnityEngine::Pose> result);
    // public System.Single get_Size()
    // Offset: 0x47B8F50
    float get_Size();
    // public System.Void .ctor()
    // Offset: 0x47B8F6C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ListSnapPoseDelegate* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::ListSnapPoseDelegate::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ListSnapPoseDelegate*, creationType>()));
    }
  }; // Oculus.Interaction.ListSnapPoseDelegate
  #pragma pack(pop)
  static check_size<sizeof(ListSnapPoseDelegate), 56 + sizeof(float)> __Oculus_Interaction_ListSnapPoseDelegateSizeCheck;
  static_assert(sizeof(ListSnapPoseDelegate) == 0x3C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::ListSnapPoseDelegate::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ListSnapPoseDelegate::*)()>(&Oculus::Interaction::ListSnapPoseDelegate::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ListSnapPoseDelegate*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ListSnapPoseDelegate::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ListSnapPoseDelegate::*)()>(&Oculus::Interaction::ListSnapPoseDelegate::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ListSnapPoseDelegate*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ListSnapPoseDelegate::SizeForId
// Il2CppName: SizeForId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::ListSnapPoseDelegate::*)(int)>(&Oculus::Interaction::ListSnapPoseDelegate::SizeForId)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ListSnapPoseDelegate*), "SizeForId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ListSnapPoseDelegate::FloatForPose
// Il2CppName: FloatForPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::ListSnapPoseDelegate::*)(::UnityEngine::Pose)>(&Oculus::Interaction::ListSnapPoseDelegate::FloatForPose)> {
  static const MethodInfo* get() {
    static auto* pose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ListSnapPoseDelegate*), "FloatForPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pose});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ListSnapPoseDelegate::PoseForFloat
// Il2CppName: PoseForFloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Pose (Oculus::Interaction::ListSnapPoseDelegate::*)(float)>(&Oculus::Interaction::ListSnapPoseDelegate::PoseForFloat)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ListSnapPoseDelegate*), "PoseForFloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ListSnapPoseDelegate::TrackElement
// Il2CppName: TrackElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ListSnapPoseDelegate::*)(int, ::UnityEngine::Pose)>(&Oculus::Interaction::ListSnapPoseDelegate::TrackElement)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* p = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ListSnapPoseDelegate*), "TrackElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, p});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ListSnapPoseDelegate::UntrackElement
// Il2CppName: UntrackElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ListSnapPoseDelegate::*)(int)>(&Oculus::Interaction::ListSnapPoseDelegate::UntrackElement)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ListSnapPoseDelegate*), "UntrackElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ListSnapPoseDelegate::SnapElement
// Il2CppName: SnapElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ListSnapPoseDelegate::*)(int, ::UnityEngine::Pose)>(&Oculus::Interaction::ListSnapPoseDelegate::SnapElement)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* pose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ListSnapPoseDelegate*), "SnapElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, pose});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ListSnapPoseDelegate::UnsnapElement
// Il2CppName: UnsnapElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ListSnapPoseDelegate::*)(int)>(&Oculus::Interaction::ListSnapPoseDelegate::UnsnapElement)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ListSnapPoseDelegate*), "UnsnapElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ListSnapPoseDelegate::MoveTrackedElement
// Il2CppName: MoveTrackedElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ListSnapPoseDelegate::*)(int, ::UnityEngine::Pose)>(&Oculus::Interaction::ListSnapPoseDelegate::MoveTrackedElement)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* p = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ListSnapPoseDelegate*), "MoveTrackedElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, p});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ListSnapPoseDelegate::SnapPoseForElement
// Il2CppName: SnapPoseForElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::ListSnapPoseDelegate::*)(int, ::UnityEngine::Pose, ByRef<::UnityEngine::Pose>)>(&Oculus::Interaction::ListSnapPoseDelegate::SnapPoseForElement)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* pose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ListSnapPoseDelegate*), "SnapPoseForElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, pose, result});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ListSnapPoseDelegate::get_Size
// Il2CppName: get_Size
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::ListSnapPoseDelegate::*)()>(&Oculus::Interaction::ListSnapPoseDelegate::get_Size)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ListSnapPoseDelegate*), "get_Size", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ListSnapPoseDelegate::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
