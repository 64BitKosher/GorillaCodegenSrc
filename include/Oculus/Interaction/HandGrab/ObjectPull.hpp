// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Oculus.Interaction.IMovement
#include "Oculus/Interaction/IMovement.hpp"
// Including type: UnityEngine.Pose
#include "UnityEngine/Pose.hpp"
// Including type: UnityEngine.Plane
#include "UnityEngine/Plane.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: Oculus.Interaction.HandGrab
namespace Oculus::Interaction::HandGrab {
  // Forward declaring type: ObjectPull
  class ObjectPull;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::HandGrab::ObjectPull);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::HandGrab::ObjectPull*, "Oculus.Interaction.HandGrab", "ObjectPull");
// Type namespace: Oculus.Interaction.HandGrab
namespace Oculus::Interaction::HandGrab {
  // Size: 0xAD
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.HandGrab.ObjectPull
  // [TokenAttribute] Offset: FFFFFFFF
  class ObjectPull : public ::Il2CppObject/*, public ::Oculus::Interaction::IMovement*/ {
    public:
    public:
    // private System.Single _speed
    // Size: 0x4
    // Offset: 0x10
    float speed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _deadZone
    // Size: 0x4
    // Offset: 0x14
    float deadZone;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Pose _current
    // Size: 0x1C
    // Offset: 0x18
    ::UnityEngine::Pose current;
    // Field size check
    static_assert(sizeof(::UnityEngine::Pose) == 0x1C);
    // private UnityEngine.Pose _grabberStartPose
    // Size: 0x1C
    // Offset: 0x34
    ::UnityEngine::Pose grabberStartPose;
    // Field size check
    static_assert(sizeof(::UnityEngine::Pose) == 0x1C);
    // private UnityEngine.Pose _grabbableStartPose
    // Size: 0x1C
    // Offset: 0x50
    ::UnityEngine::Pose grabbableStartPose;
    // Field size check
    static_assert(sizeof(::UnityEngine::Pose) == 0x1C);
    // private UnityEngine.Pose _target
    // Size: 0x1C
    // Offset: 0x6C
    ::UnityEngine::Pose target;
    // Field size check
    static_assert(sizeof(::UnityEngine::Pose) == 0x1C);
    // private UnityEngine.Plane _pullingPlane
    // Size: 0x10
    // Offset: 0x88
    ::UnityEngine::Plane pullingPlane;
    // Field size check
    static_assert(sizeof(::UnityEngine::Plane) == 0x10);
    // private UnityEngine.Vector3 _translationDelta
    // Size: 0xC
    // Offset: 0x98
    ::UnityEngine::Vector3 translationDelta;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Single _lastTime
    // Size: 0x4
    // Offset: 0xA4
    float lastTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _originalDistance
    // Size: 0x4
    // Offset: 0xA8
    float originalDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _reachedGrabber
    // Size: 0x1
    // Offset: 0xAC
    bool reachedGrabber;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::IMovement
    operator ::Oculus::Interaction::IMovement() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::IMovement*>(this);
    }
    // Get instance field reference: private System.Single _speed
    [[deprecated("Use field access instead!")]] float& dyn__speed();
    // Get instance field reference: private System.Single _deadZone
    [[deprecated("Use field access instead!")]] float& dyn__deadZone();
    // Get instance field reference: private UnityEngine.Pose _current
    [[deprecated("Use field access instead!")]] ::UnityEngine::Pose& dyn__current();
    // Get instance field reference: private UnityEngine.Pose _grabberStartPose
    [[deprecated("Use field access instead!")]] ::UnityEngine::Pose& dyn__grabberStartPose();
    // Get instance field reference: private UnityEngine.Pose _grabbableStartPose
    [[deprecated("Use field access instead!")]] ::UnityEngine::Pose& dyn__grabbableStartPose();
    // Get instance field reference: private UnityEngine.Pose _target
    [[deprecated("Use field access instead!")]] ::UnityEngine::Pose& dyn__target();
    // Get instance field reference: private UnityEngine.Plane _pullingPlane
    [[deprecated("Use field access instead!")]] ::UnityEngine::Plane& dyn__pullingPlane();
    // Get instance field reference: private UnityEngine.Vector3 _translationDelta
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__translationDelta();
    // Get instance field reference: private System.Single _lastTime
    [[deprecated("Use field access instead!")]] float& dyn__lastTime();
    // Get instance field reference: private System.Single _originalDistance
    [[deprecated("Use field access instead!")]] float& dyn__originalDistance();
    // Get instance field reference: private System.Boolean _reachedGrabber
    [[deprecated("Use field access instead!")]] bool& dyn__reachedGrabber();
    // public UnityEngine.Pose get_Pose()
    // Offset: 0x482F0A0
    ::UnityEngine::Pose get_Pose();
    // public System.Boolean get_Stopped()
    // Offset: 0x482F0B4
    bool get_Stopped();
    // public System.Void .ctor(System.Single speed, System.Single deadZone)
    // Offset: 0x482EFA0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ObjectPull* New_ctor(float speed, float deadZone) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::HandGrab::ObjectPull::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ObjectPull*, creationType>(speed, deadZone)));
    }
    // public System.Void MoveTo(UnityEngine.Pose target)
    // Offset: 0x482F0BC
    void MoveTo(::UnityEngine::Pose target);
    // public System.Void UpdateTarget(UnityEngine.Pose target)
    // Offset: 0x482F30C
    void UpdateTarget(::UnityEngine::Pose target);
    // public System.Void StopAndSetPose(UnityEngine.Pose source)
    // Offset: 0x482F328
    void StopAndSetPose(::UnityEngine::Pose source);
    // public System.Void Tick()
    // Offset: 0x482F344
    void Tick();
  }; // Oculus.Interaction.HandGrab.ObjectPull
  #pragma pack(pop)
  static check_size<sizeof(ObjectPull), 172 + sizeof(bool)> __Oculus_Interaction_HandGrab_ObjectPullSizeCheck;
  static_assert(sizeof(ObjectPull) == 0xAD);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::ObjectPull::get_Pose
// Il2CppName: get_Pose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Pose (Oculus::Interaction::HandGrab::ObjectPull::*)()>(&Oculus::Interaction::HandGrab::ObjectPull::get_Pose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::ObjectPull*), "get_Pose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::ObjectPull::get_Stopped
// Il2CppName: get_Stopped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::HandGrab::ObjectPull::*)()>(&Oculus::Interaction::HandGrab::ObjectPull::get_Stopped)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::ObjectPull*), "get_Stopped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::ObjectPull::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::ObjectPull::MoveTo
// Il2CppName: MoveTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrab::ObjectPull::*)(::UnityEngine::Pose)>(&Oculus::Interaction::HandGrab::ObjectPull::MoveTo)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::ObjectPull*), "MoveTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::ObjectPull::UpdateTarget
// Il2CppName: UpdateTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrab::ObjectPull::*)(::UnityEngine::Pose)>(&Oculus::Interaction::HandGrab::ObjectPull::UpdateTarget)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::ObjectPull*), "UpdateTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::ObjectPull::StopAndSetPose
// Il2CppName: StopAndSetPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrab::ObjectPull::*)(::UnityEngine::Pose)>(&Oculus::Interaction::HandGrab::ObjectPull::StopAndSetPose)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::ObjectPull*), "StopAndSetPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::ObjectPull::Tick
// Il2CppName: Tick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrab::ObjectPull::*)()>(&Oculus::Interaction::HandGrab::ObjectPull::Tick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::ObjectPull*), "Tick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
