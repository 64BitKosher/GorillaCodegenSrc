// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Oculus.Interaction.Input.HandJointId
#include "Oculus/Interaction/Input/HandJointId.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Quaternion
  struct Quaternion;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.HandGrab.Visuals
namespace Oculus::Interaction::HandGrab::Visuals {
  // Forward declaring type: HandJointMap
  class HandJointMap;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::HandGrab::Visuals::HandJointMap);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::HandGrab::Visuals::HandJointMap*, "Oculus.Interaction.HandGrab.Visuals", "HandJointMap");
// Type namespace: Oculus.Interaction.HandGrab.Visuals
namespace Oculus::Interaction::HandGrab::Visuals {
  // Size: 0x2C
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.HandGrab.Visuals.HandJointMap
  // [TokenAttribute] Offset: FFFFFFFF
  class HandJointMap : public ::Il2CppObject {
    public:
    public:
    // public Oculus.Interaction.Input.HandJointId id
    // Size: 0x4
    // Offset: 0x10
    ::Oculus::Interaction::Input::HandJointId id;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::HandJointId) == 0x4);
    // Padding between fields: id and: transform
    char __padding0[0x4] = {};
    // public UnityEngine.Transform transform
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Transform* transform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Vector3 rotationOffset
    // Size: 0xC
    // Offset: 0x20
    ::UnityEngine::Vector3 rotationOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    public:
    // Get instance field reference: public Oculus.Interaction.Input.HandJointId id
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::HandJointId& dyn_id();
    // Get instance field reference: public UnityEngine.Transform transform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_transform();
    // Get instance field reference: public UnityEngine.Vector3 rotationOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_rotationOffset();
    // public UnityEngine.Quaternion get_RotationOffset()
    // Offset: 0x482FBDC
    ::UnityEngine::Quaternion get_RotationOffset();
    // public UnityEngine.Quaternion get_TrackedRotation()
    // Offset: 0x482FC00
    ::UnityEngine::Quaternion get_TrackedRotation();
    // public System.Void .ctor()
    // Offset: 0x482FCE0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HandJointMap* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::HandGrab::Visuals::HandJointMap::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HandJointMap*, creationType>()));
    }
  }; // Oculus.Interaction.HandGrab.Visuals.HandJointMap
  #pragma pack(pop)
  static check_size<sizeof(HandJointMap), 32 + sizeof(::UnityEngine::Vector3)> __Oculus_Interaction_HandGrab_Visuals_HandJointMapSizeCheck;
  static_assert(sizeof(HandJointMap) == 0x2C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::Visuals::HandJointMap::get_RotationOffset
// Il2CppName: get_RotationOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (Oculus::Interaction::HandGrab::Visuals::HandJointMap::*)()>(&Oculus::Interaction::HandGrab::Visuals::HandJointMap::get_RotationOffset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::Visuals::HandJointMap*), "get_RotationOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::Visuals::HandJointMap::get_TrackedRotation
// Il2CppName: get_TrackedRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (Oculus::Interaction::HandGrab::Visuals::HandJointMap::*)()>(&Oculus::Interaction::HandGrab::Visuals::HandJointMap::get_TrackedRotation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::Visuals::HandJointMap*), "get_TrackedRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::Visuals::HandJointMap::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
