// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction::HandGrab
namespace Oculus::Interaction::HandGrab {
  // Forward declaring type: HandGrabPose
  class HandGrabPose;
  // Forward declaring type: HandGrabResult
  class HandGrabResult;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Pose
  struct Pose;
}
// Forward declaring namespace: Oculus::Interaction::Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: Handedness
  struct Handedness;
}
// Forward declaring namespace: Oculus::Interaction::Grab
namespace Oculus::Interaction::Grab {
  // Forward declaring type: PoseMeasureParameters
  struct PoseMeasureParameters;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.HandGrab
namespace Oculus::Interaction::HandGrab {
  // Forward declaring type: GrabPoseFinder
  class GrabPoseFinder;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::HandGrab::GrabPoseFinder);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::HandGrab::GrabPoseFinder*, "Oculus.Interaction.HandGrab", "GrabPoseFinder");
// Type namespace: Oculus.Interaction.HandGrab
namespace Oculus::Interaction::HandGrab {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.HandGrab.GrabPoseFinder
  // [TokenAttribute] Offset: FFFFFFFF
  class GrabPoseFinder : public ::Il2CppObject {
    public:
    // Nested type: ::Oculus::Interaction::HandGrab::GrabPoseFinder::FindResult
    struct FindResult;
    // Nested type: ::Oculus::Interaction::HandGrab::GrabPoseFinder::InterpolationCache
    class InterpolationCache;
    public:
    // private System.Collections.Generic.List`1<Oculus.Interaction.HandGrab.HandGrabPose> _handGrabPoses
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::List_1<::Oculus::Interaction::HandGrab::HandGrabPose*>* handGrabPoses;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Oculus::Interaction::HandGrab::HandGrabPose*>*) == 0x8);
    // private UnityEngine.Transform _relativeTo
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Transform* relativeTo;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private Oculus.Interaction.HandGrab.GrabPoseFinder/InterpolationCache _interpolationCache
    // Size: 0x8
    // Offset: 0x20
    ::Oculus::Interaction::HandGrab::GrabPoseFinder::InterpolationCache* interpolationCache;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::HandGrab::GrabPoseFinder::InterpolationCache*) == 0x8);
    public:
    // Get instance field reference: private System.Collections.Generic.List`1<Oculus.Interaction.HandGrab.HandGrabPose> _handGrabPoses
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Oculus::Interaction::HandGrab::HandGrabPose*>*& dyn__handGrabPoses();
    // Get instance field reference: private UnityEngine.Transform _relativeTo
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__relativeTo();
    // Get instance field reference: private Oculus.Interaction.HandGrab.GrabPoseFinder/InterpolationCache _interpolationCache
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::HandGrab::GrabPoseFinder::InterpolationCache*& dyn__interpolationCache();
    // public System.Boolean get_UsesHandPose()
    // Offset: 0x48214B0
    bool get_UsesHandPose();
    // public System.Void .ctor(System.Collections.Generic.List`1<Oculus.Interaction.HandGrab.HandGrabPose> handGrabPoses, UnityEngine.Transform relativeTo)
    // Offset: 0x4820DFC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GrabPoseFinder* New_ctor(::System::Collections::Generic::List_1<::Oculus::Interaction::HandGrab::HandGrabPose*>* handGrabPoses, ::UnityEngine::Transform* relativeTo) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::HandGrab::GrabPoseFinder::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GrabPoseFinder*, creationType>(handGrabPoses, relativeTo)));
    }
    // public System.Boolean SupportsHandedness(Oculus.Interaction.Input.Handedness handedness)
    // Offset: 0x4821554
    bool SupportsHandedness(::Oculus::Interaction::Input::Handedness handedness);
    // public Oculus.Interaction.HandGrab.GrabPoseFinder/FindResult FindBestPose(UnityEngine.Pose userPose, System.Single handScale, Oculus.Interaction.Input.Handedness handedness, Oculus.Interaction.Grab.PoseMeasureParameters scoringModifier, ref Oculus.Interaction.HandGrab.HandGrabResult result)
    // Offset: 0x4821368
    ::Oculus::Interaction::HandGrab::GrabPoseFinder::FindResult FindBestPose(::UnityEngine::Pose userPose, float handScale, ::Oculus::Interaction::Input::Handedness handedness, ::Oculus::Interaction::Grab::PoseMeasureParameters scoringModifier, ByRef<::Oculus::Interaction::HandGrab::HandGrabResult*> result);
    // private System.Boolean CalculateBestScaleInterpolatedPose(UnityEngine.Pose userPose, Oculus.Interaction.Input.Handedness handedness, System.Single handScale, Oculus.Interaction.Grab.PoseMeasureParameters scoringModifier, ref Oculus.Interaction.HandGrab.HandGrabResult result)
    // Offset: 0x48231F0
    bool CalculateBestScaleInterpolatedPose(::UnityEngine::Pose userPose, ::Oculus::Interaction::Input::Handedness handedness, float handScale, ::Oculus::Interaction::Grab::PoseMeasureParameters scoringModifier, ByRef<::Oculus::Interaction::HandGrab::HandGrabResult*> result);
    // static public System.Boolean FindInterpolationRange(System.Single relativeHandScale, System.Collections.Generic.List`1<Oculus.Interaction.HandGrab.HandGrabPose> grabPoses, out Oculus.Interaction.HandGrab.HandGrabPose from, out Oculus.Interaction.HandGrab.HandGrabPose to, out System.Single t)
    // Offset: 0x48237D0
    static bool FindInterpolationRange(float relativeHandScale, ::System::Collections::Generic::List_1<::Oculus::Interaction::HandGrab::HandGrabPose*>* grabPoses, ByRef<::Oculus::Interaction::HandGrab::HandGrabPose*> from, ByRef<::Oculus::Interaction::HandGrab::HandGrabPose*> to, ByRef<float> t);
    // static private Oculus.Interaction.HandGrab.HandGrabPose FindPreviousScaledGrabPose(System.Collections.Generic.List`1<Oculus.Interaction.HandGrab.HandGrabPose> grabPoses, System.Single upLimit, System.Boolean notEqual)
    // Offset: 0x4823A88
    static ::Oculus::Interaction::HandGrab::HandGrabPose* FindPreviousScaledGrabPose(::System::Collections::Generic::List_1<::Oculus::Interaction::HandGrab::HandGrabPose*>* grabPoses, float upLimit, bool notEqual);
    // static private Oculus.Interaction.HandGrab.HandGrabPose FindNextScaledGrabPose(System.Collections.Generic.List`1<Oculus.Interaction.HandGrab.HandGrabPose> grabPoses, System.Single lowLimit, System.Boolean notEqual)
    // Offset: 0x4823C24
    static ::Oculus::Interaction::HandGrab::HandGrabPose* FindNextScaledGrabPose(::System::Collections::Generic::List_1<::Oculus::Interaction::HandGrab::HandGrabPose*>* grabPoses, float lowLimit, bool notEqual);
  }; // Oculus.Interaction.HandGrab.GrabPoseFinder
  #pragma pack(pop)
  static check_size<sizeof(GrabPoseFinder), 32 + sizeof(::Oculus::Interaction::HandGrab::GrabPoseFinder::InterpolationCache*)> __Oculus_Interaction_HandGrab_GrabPoseFinderSizeCheck;
  static_assert(sizeof(GrabPoseFinder) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::GrabPoseFinder::get_UsesHandPose
// Il2CppName: get_UsesHandPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::HandGrab::GrabPoseFinder::*)()>(&Oculus::Interaction::HandGrab::GrabPoseFinder::get_UsesHandPose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::GrabPoseFinder*), "get_UsesHandPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::GrabPoseFinder::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::GrabPoseFinder::SupportsHandedness
// Il2CppName: SupportsHandedness
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::HandGrab::GrabPoseFinder::*)(::Oculus::Interaction::Input::Handedness)>(&Oculus::Interaction::HandGrab::GrabPoseFinder::SupportsHandedness)> {
  static const MethodInfo* get() {
    static auto* handedness = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "Handedness")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::GrabPoseFinder*), "SupportsHandedness", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handedness});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::GrabPoseFinder::FindBestPose
// Il2CppName: FindBestPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::HandGrab::GrabPoseFinder::FindResult (Oculus::Interaction::HandGrab::GrabPoseFinder::*)(::UnityEngine::Pose, float, ::Oculus::Interaction::Input::Handedness, ::Oculus::Interaction::Grab::PoseMeasureParameters, ByRef<::Oculus::Interaction::HandGrab::HandGrabResult*>)>(&Oculus::Interaction::HandGrab::GrabPoseFinder::FindBestPose)> {
  static const MethodInfo* get() {
    static auto* userPose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->byval_arg;
    static auto* handScale = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* handedness = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "Handedness")->byval_arg;
    static auto* scoringModifier = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Grab", "PoseMeasureParameters")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.HandGrab", "HandGrabResult")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::GrabPoseFinder*), "FindBestPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userPose, handScale, handedness, scoringModifier, result});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::GrabPoseFinder::CalculateBestScaleInterpolatedPose
// Il2CppName: CalculateBestScaleInterpolatedPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::HandGrab::GrabPoseFinder::*)(::UnityEngine::Pose, ::Oculus::Interaction::Input::Handedness, float, ::Oculus::Interaction::Grab::PoseMeasureParameters, ByRef<::Oculus::Interaction::HandGrab::HandGrabResult*>)>(&Oculus::Interaction::HandGrab::GrabPoseFinder::CalculateBestScaleInterpolatedPose)> {
  static const MethodInfo* get() {
    static auto* userPose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->byval_arg;
    static auto* handedness = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "Handedness")->byval_arg;
    static auto* handScale = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* scoringModifier = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Grab", "PoseMeasureParameters")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.HandGrab", "HandGrabResult")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::GrabPoseFinder*), "CalculateBestScaleInterpolatedPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userPose, handedness, handScale, scoringModifier, result});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::GrabPoseFinder::FindInterpolationRange
// Il2CppName: FindInterpolationRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(float, ::System::Collections::Generic::List_1<::Oculus::Interaction::HandGrab::HandGrabPose*>*, ByRef<::Oculus::Interaction::HandGrab::HandGrabPose*>, ByRef<::Oculus::Interaction::HandGrab::HandGrabPose*>, ByRef<float>)>(&Oculus::Interaction::HandGrab::GrabPoseFinder::FindInterpolationRange)> {
  static const MethodInfo* get() {
    static auto* relativeHandScale = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* grabPoses = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Interaction.HandGrab", "HandGrabPose")})->byval_arg;
    static auto* from = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.HandGrab", "HandGrabPose")->this_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.HandGrab", "HandGrabPose")->this_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::GrabPoseFinder*), "FindInterpolationRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{relativeHandScale, grabPoses, from, to, t});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::GrabPoseFinder::FindPreviousScaledGrabPose
// Il2CppName: FindPreviousScaledGrabPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::HandGrab::HandGrabPose* (*)(::System::Collections::Generic::List_1<::Oculus::Interaction::HandGrab::HandGrabPose*>*, float, bool)>(&Oculus::Interaction::HandGrab::GrabPoseFinder::FindPreviousScaledGrabPose)> {
  static const MethodInfo* get() {
    static auto* grabPoses = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Interaction.HandGrab", "HandGrabPose")})->byval_arg;
    static auto* upLimit = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* notEqual = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::GrabPoseFinder*), "FindPreviousScaledGrabPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{grabPoses, upLimit, notEqual});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::GrabPoseFinder::FindNextScaledGrabPose
// Il2CppName: FindNextScaledGrabPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::HandGrab::HandGrabPose* (*)(::System::Collections::Generic::List_1<::Oculus::Interaction::HandGrab::HandGrabPose*>*, float, bool)>(&Oculus::Interaction::HandGrab::GrabPoseFinder::FindNextScaledGrabPose)> {
  static const MethodInfo* get() {
    static auto* grabPoses = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Interaction.HandGrab", "HandGrabPose")})->byval_arg;
    static auto* lowLimit = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* notEqual = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::GrabPoseFinder*), "FindNextScaledGrabPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{grabPoses, lowLimit, notEqual});
  }
};
