// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Oculus.Interaction.Input.Handedness
#include "Oculus/Interaction/Input/Handedness.hpp"
// Including type: Oculus.Interaction.Input.JointFreedom
#include "Oculus/Interaction/Input/JointFreedom.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Type namespace: Oculus.Interaction.HandGrab
namespace Oculus::Interaction::HandGrab {
  // Forward declaring type: HandPose
  class HandPose;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::HandGrab::HandPose);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::HandGrab::HandPose*, "Oculus.Interaction.HandGrab", "HandPose");
// Type namespace: Oculus.Interaction.HandGrab
namespace Oculus::Interaction::HandGrab {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.HandGrab.HandPose
  // [TokenAttribute] Offset: FFFFFFFF
  class HandPose : public ::Il2CppObject {
    public:
    public:
    // private Oculus.Interaction.Input.Handedness _handedness
    // Size: 0x4
    // Offset: 0x10
    ::Oculus::Interaction::Input::Handedness handedness;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::Handedness) == 0x4);
    // Padding between fields: handedness and: fingersFreedom
    char __padding0[0x4] = {};
    // private Oculus.Interaction.Input.JointFreedom[] _fingersFreedom
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::Oculus::Interaction::Input::JointFreedom> fingersFreedom;
    // Field size check
    static_assert(sizeof(::ArrayW<::Oculus::Interaction::Input::JointFreedom>) == 0x8);
    // private UnityEngine.Quaternion[] _jointRotations
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::UnityEngine::Quaternion> jointRotations;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Quaternion>) == 0x8);
    public:
    // Get instance field reference: private Oculus.Interaction.Input.Handedness _handedness
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::Handedness& dyn__handedness();
    // Get instance field reference: private Oculus.Interaction.Input.JointFreedom[] _fingersFreedom
    [[deprecated("Use field access instead!")]] ::ArrayW<::Oculus::Interaction::Input::JointFreedom>& dyn__fingersFreedom();
    // Get instance field reference: private UnityEngine.Quaternion[] _jointRotations
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Quaternion>& dyn__jointRotations();
    // public Oculus.Interaction.Input.Handedness get_Handedness()
    // Offset: 0x482AB0C
    ::Oculus::Interaction::Input::Handedness get_Handedness();
    // public System.Void set_Handedness(Oculus.Interaction.Input.Handedness value)
    // Offset: 0x482AB14
    void set_Handedness(::Oculus::Interaction::Input::Handedness value);
    // public UnityEngine.Quaternion[] get_JointRotations()
    // Offset: 0x482AB1C
    ::ArrayW<::UnityEngine::Quaternion> get_JointRotations();
    // public System.Void set_JointRotations(UnityEngine.Quaternion[] value)
    // Offset: 0x482ABC4
    void set_JointRotations(::ArrayW<::UnityEngine::Quaternion> value);
    // public Oculus.Interaction.Input.JointFreedom[] get_FingersFreedom()
    // Offset: 0x482ABCC
    ::ArrayW<::Oculus::Interaction::Input::JointFreedom> get_FingersFreedom();
    // public System.Void .ctor()
    // Offset: 0x4829990
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HandPose* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::HandGrab::HandPose::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HandPose*, creationType>()));
    }
    // public System.Void .ctor(Oculus.Interaction.Input.Handedness handedness)
    // Offset: 0x482AC48
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HandPose* New_ctor(::Oculus::Interaction::Input::Handedness handedness) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::HandGrab::HandPose::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HandPose*, creationType>(handedness)));
    }
    // public System.Void .ctor(Oculus.Interaction.HandGrab.HandPose other)
    // Offset: 0x482A394
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HandPose* New_ctor(::Oculus::Interaction::HandGrab::HandPose* other) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::HandGrab::HandPose::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HandPose*, creationType>(other)));
    }
    // public System.Void CopyFrom(Oculus.Interaction.HandGrab.HandPose from, System.Boolean mirrorHandedness)
    // Offset: 0x4829684
    void CopyFrom(::Oculus::Interaction::HandGrab::HandPose* from, bool mirrorHandedness);
    // static public System.Void Lerp(in Oculus.Interaction.HandGrab.HandPose from, in Oculus.Interaction.HandGrab.HandPose to, System.Single t, ref Oculus.Interaction.HandGrab.HandPose result)
    // Offset: 0x482AD10
    static void Lerp(ByRef<::Oculus::Interaction::HandGrab::HandPose*> from, ByRef<::Oculus::Interaction::HandGrab::HandPose*> to, float t, ByRef<::Oculus::Interaction::HandGrab::HandPose*> result);
  }; // Oculus.Interaction.HandGrab.HandPose
  #pragma pack(pop)
  static check_size<sizeof(HandPose), 32 + sizeof(::ArrayW<::UnityEngine::Quaternion>)> __Oculus_Interaction_HandGrab_HandPoseSizeCheck;
  static_assert(sizeof(HandPose) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandPose::get_Handedness
// Il2CppName: get_Handedness
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Input::Handedness (Oculus::Interaction::HandGrab::HandPose::*)()>(&Oculus::Interaction::HandGrab::HandPose::get_Handedness)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::HandPose*), "get_Handedness", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandPose::set_Handedness
// Il2CppName: set_Handedness
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrab::HandPose::*)(::Oculus::Interaction::Input::Handedness)>(&Oculus::Interaction::HandGrab::HandPose::set_Handedness)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "Handedness")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::HandPose*), "set_Handedness", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandPose::get_JointRotations
// Il2CppName: get_JointRotations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Quaternion> (Oculus::Interaction::HandGrab::HandPose::*)()>(&Oculus::Interaction::HandGrab::HandPose::get_JointRotations)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::HandPose*), "get_JointRotations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandPose::set_JointRotations
// Il2CppName: set_JointRotations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrab::HandPose::*)(::ArrayW<::UnityEngine::Quaternion>)>(&Oculus::Interaction::HandGrab::HandPose::set_JointRotations)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::HandPose*), "set_JointRotations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandPose::get_FingersFreedom
// Il2CppName: get_FingersFreedom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Oculus::Interaction::Input::JointFreedom> (Oculus::Interaction::HandGrab::HandPose::*)()>(&Oculus::Interaction::HandGrab::HandPose::get_FingersFreedom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::HandPose*), "get_FingersFreedom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandPose::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandPose::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandPose::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandPose::CopyFrom
// Il2CppName: CopyFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrab::HandPose::*)(::Oculus::Interaction::HandGrab::HandPose*, bool)>(&Oculus::Interaction::HandGrab::HandPose::CopyFrom)> {
  static const MethodInfo* get() {
    static auto* from = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.HandGrab", "HandPose")->byval_arg;
    static auto* mirrorHandedness = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::HandPose*), "CopyFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{from, mirrorHandedness});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandPose::Lerp
// Il2CppName: Lerp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::Oculus::Interaction::HandGrab::HandPose*>, ByRef<::Oculus::Interaction::HandGrab::HandPose*>, float, ByRef<::Oculus::Interaction::HandGrab::HandPose*>)>(&Oculus::Interaction::HandGrab::HandPose::Lerp)> {
  static const MethodInfo* get() {
    static auto* from = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.HandGrab", "HandPose")->this_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.HandGrab", "HandPose")->this_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.HandGrab", "HandPose")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::HandPose*), "Lerp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{from, to, t, result});
  }
};
