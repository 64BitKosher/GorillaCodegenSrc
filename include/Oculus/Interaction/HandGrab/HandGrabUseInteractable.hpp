// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Oculus.Interaction.Interactable`2
#include "Oculus/Interaction/Interactable_2.hpp"
// Including type: Oculus.Interaction.GrabAPI.GrabbingRule
#include "Oculus/Interaction/GrabAPI/GrabbingRule.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction::HandGrab
namespace Oculus::Interaction::HandGrab {
  // Forward declaring type: HandGrabUseInteractor
  class HandGrabUseInteractor;
  // Forward declaring type: IHandGrabUseDelegate
  class IHandGrabUseDelegate;
  // Forward declaring type: HandGrabPose
  class HandGrabPose;
  // Forward declaring type: HandPose
  class HandPose;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Object because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.HandGrab
namespace Oculus::Interaction::HandGrab {
  // Forward declaring type: HandGrabUseInteractable
  class HandGrabUseInteractable;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::HandGrab::HandGrabUseInteractable);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::HandGrab::HandGrabUseInteractable*, "Oculus.Interaction.HandGrab", "HandGrabUseInteractable");
// Type namespace: Oculus.Interaction.HandGrab
namespace Oculus::Interaction::HandGrab {
  // WARNING Size may be invalid!
  // Autogenerated type: Oculus.Interaction.HandGrab.HandGrabUseInteractable
  // [TokenAttribute] Offset: FFFFFFFF
  class HandGrabUseInteractable : public ::Oculus::Interaction::Interactable_2<::Oculus::Interaction::HandGrab::HandGrabUseInteractor*, ::Oculus::Interaction::HandGrab::HandGrabUseInteractable*> {
    public:
    public:
    // private UnityEngine.Object _handUseDelegate
    // Size: 0x8
    // Offset: 0xB0
    ::UnityEngine::Object* handUseDelegate;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.HandGrab.IHandGrabUseDelegate <HandUseDelegate>k__BackingField
    // Size: 0x8
    // Offset: 0xB8
    ::Oculus::Interaction::HandGrab::IHandGrabUseDelegate* HandUseDelegate;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::HandGrab::IHandGrabUseDelegate*) == 0x8);
    // private Oculus.Interaction.GrabAPI.GrabbingRule _useFingers
    // Size: 0x18
    // Offset: 0xC0
    ::Oculus::Interaction::GrabAPI::GrabbingRule useFingers;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::GrabAPI::GrabbingRule) == 0x18);
    // private System.Single _strengthDeadzone
    // Size: 0x4
    // Offset: 0xD8
    float strengthDeadzone;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Collections.Generic.List`1<Oculus.Interaction.HandGrab.HandGrabPose> _relaxedHandGrabPoses
    // Size: 0x8
    // Offset: 0xE0
    ::System::Collections::Generic::List_1<::Oculus::Interaction::HandGrab::HandGrabPose*>* relaxedHandGrabPoses;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Oculus::Interaction::HandGrab::HandGrabPose*>*) == 0x8);
    // private System.Collections.Generic.List`1<Oculus.Interaction.HandGrab.HandGrabPose> _tightHandGrabPoses
    // Size: 0x8
    // Offset: 0xE8
    ::System::Collections::Generic::List_1<::Oculus::Interaction::HandGrab::HandGrabPose*>* tightHandGrabPoses;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Oculus::Interaction::HandGrab::HandGrabPose*>*) == 0x8);
    // private System.Single <UseProgress>k__BackingField
    // Size: 0x4
    // Offset: 0xF0
    float UseProgress;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: private UnityEngine.Object _handUseDelegate
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__handUseDelegate();
    // Get instance field reference: private Oculus.Interaction.HandGrab.IHandGrabUseDelegate <HandUseDelegate>k__BackingField
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::HandGrab::IHandGrabUseDelegate*& dyn_$HandUseDelegate$k__BackingField();
    // Get instance field reference: private Oculus.Interaction.GrabAPI.GrabbingRule _useFingers
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::GrabAPI::GrabbingRule& dyn__useFingers();
    // Get instance field reference: private System.Single _strengthDeadzone
    [[deprecated("Use field access instead!")]] float& dyn__strengthDeadzone();
    // Get instance field reference: private System.Collections.Generic.List`1<Oculus.Interaction.HandGrab.HandGrabPose> _relaxedHandGrabPoses
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Oculus::Interaction::HandGrab::HandGrabPose*>*& dyn__relaxedHandGrabPoses();
    // Get instance field reference: private System.Collections.Generic.List`1<Oculus.Interaction.HandGrab.HandGrabPose> _tightHandGrabPoses
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Oculus::Interaction::HandGrab::HandGrabPose*>*& dyn__tightHandGrabPoses();
    // Get instance field reference: private System.Single <UseProgress>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$UseProgress$k__BackingField();
    // private Oculus.Interaction.HandGrab.IHandGrabUseDelegate get_HandUseDelegate()
    // Offset: 0x482B890
    ::Oculus::Interaction::HandGrab::IHandGrabUseDelegate* get_HandUseDelegate();
    // private System.Void set_HandUseDelegate(Oculus.Interaction.HandGrab.IHandGrabUseDelegate value)
    // Offset: 0x482B898
    void set_HandUseDelegate(::Oculus::Interaction::HandGrab::IHandGrabUseDelegate* value);
    // public Oculus.Interaction.GrabAPI.GrabbingRule get_UseFingers()
    // Offset: 0x482B8A0
    ::Oculus::Interaction::GrabAPI::GrabbingRule get_UseFingers();
    // public System.Void set_UseFingers(Oculus.Interaction.GrabAPI.GrabbingRule value)
    // Offset: 0x482B8B4
    void set_UseFingers(::Oculus::Interaction::GrabAPI::GrabbingRule value);
    // public System.Single get_StrengthDeadzone()
    // Offset: 0x482B8C8
    float get_StrengthDeadzone();
    // public System.Void set_StrengthDeadzone(System.Single value)
    // Offset: 0x482B8D0
    void set_StrengthDeadzone(float value);
    // public System.Single get_UseProgress()
    // Offset: 0x482B8D8
    float get_UseProgress();
    // private System.Void set_UseProgress(System.Single value)
    // Offset: 0x482B8E0
    void set_UseProgress(float value);
    // public System.Collections.Generic.List`1<Oculus.Interaction.HandGrab.HandGrabPose> get_RelaxGrabPoints()
    // Offset: 0x482B8E8
    ::System::Collections::Generic::List_1<::Oculus::Interaction::HandGrab::HandGrabPose*>* get_RelaxGrabPoints();
    // public System.Collections.Generic.List`1<Oculus.Interaction.HandGrab.HandGrabPose> get_TightGrabPoints()
    // Offset: 0x482B8F0
    ::System::Collections::Generic::List_1<::Oculus::Interaction::HandGrab::HandGrabPose*>* get_TightGrabPoints();
    // public System.Single get_UseStrengthDeadZone()
    // Offset: 0x482B8F8
    float get_UseStrengthDeadZone();
    // protected System.Void Reset()
    // Offset: 0x482B900
    void Reset();
    // protected System.Void SelectingInteractorAdded(Oculus.Interaction.HandGrab.HandGrabUseInteractor interactor)
    // Offset: 0x482BA7C
    void SelectingInteractorAdded(::Oculus::Interaction::HandGrab::HandGrabUseInteractor* interactor);
    // protected System.Void SelectingInteractorRemoved(Oculus.Interaction.HandGrab.HandGrabUseInteractor interactor)
    // Offset: 0x482BB58
    void SelectingInteractorRemoved(::Oculus::Interaction::HandGrab::HandGrabUseInteractor* interactor);
    // public System.Single ComputeUseStrength(System.Single strength)
    // Offset: 0x482BC38
    float ComputeUseStrength(float strength);
    // public System.Boolean FindBestHandPoses(System.Single handScale, ref Oculus.Interaction.HandGrab.HandPose relaxedHandPose, ref Oculus.Interaction.HandGrab.HandPose tightHandPose, out System.Single score)
    // Offset: 0x482BD10
    bool FindBestHandPoses(float handScale, ByRef<::Oculus::Interaction::HandGrab::HandPose*> relaxedHandPose, ByRef<::Oculus::Interaction::HandGrab::HandPose*> tightHandPose, ByRef<float> score);
    // private System.Boolean FindScaledHandPose(System.Collections.Generic.List`1<Oculus.Interaction.HandGrab.HandGrabPose> _handGrabPoses, System.Single handScale, ref Oculus.Interaction.HandGrab.HandPose handPose)
    // Offset: 0x482BD7C
    bool FindScaledHandPose(::System::Collections::Generic::List_1<::Oculus::Interaction::HandGrab::HandGrabPose*>* _handGrabPoses, float handScale, ByRef<::Oculus::Interaction::HandGrab::HandPose*> handPose);
    // public System.Void InjectOptionalForwardUseDelegate(Oculus.Interaction.HandGrab.IHandGrabUseDelegate useDelegate)
    // Offset: 0x482BF28
    void InjectOptionalForwardUseDelegate(::Oculus::Interaction::HandGrab::IHandGrabUseDelegate* useDelegate);
    // public System.Void InjectOptionalRelaxedHandGrabPoints(System.Collections.Generic.List`1<Oculus.Interaction.HandGrab.HandGrabPose> relaxedHandGrabPoints)
    // Offset: 0x482BFF8
    void InjectOptionalRelaxedHandGrabPoints(::System::Collections::Generic::List_1<::Oculus::Interaction::HandGrab::HandGrabPose*>* relaxedHandGrabPoints);
    // public System.Void InjectOptionalTightHandGrabPoints(System.Collections.Generic.List`1<Oculus.Interaction.HandGrab.HandGrabPose> tightHandGrabPoints)
    // Offset: 0x482C000
    void InjectOptionalTightHandGrabPoints(::System::Collections::Generic::List_1<::Oculus::Interaction::HandGrab::HandGrabPose*>* tightHandGrabPoints);
    // protected override System.Void Awake()
    // Offset: 0x482B9FC
    // Implemented from: Oculus.Interaction.Interactable`2
    // Base method: System.Void Interactable_2::Awake()
    void Awake();
    // public System.Void .ctor()
    // Offset: 0x482C008
    // Implemented from: Oculus.Interaction.Interactable`2
    // Base method: System.Void Interactable_2::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HandGrabUseInteractable* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::HandGrab::HandGrabUseInteractable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HandGrabUseInteractable*, creationType>()));
    }
  }; // Oculus.Interaction.HandGrab.HandGrabUseInteractable
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandGrabUseInteractable::get_HandUseDelegate
// Il2CppName: get_HandUseDelegate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::HandGrab::IHandGrabUseDelegate* (Oculus::Interaction::HandGrab::HandGrabUseInteractable::*)()>(&Oculus::Interaction::HandGrab::HandGrabUseInteractable::get_HandUseDelegate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::HandGrabUseInteractable*), "get_HandUseDelegate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandGrabUseInteractable::set_HandUseDelegate
// Il2CppName: set_HandUseDelegate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrab::HandGrabUseInteractable::*)(::Oculus::Interaction::HandGrab::IHandGrabUseDelegate*)>(&Oculus::Interaction::HandGrab::HandGrabUseInteractable::set_HandUseDelegate)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.HandGrab", "IHandGrabUseDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::HandGrabUseInteractable*), "set_HandUseDelegate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandGrabUseInteractable::get_UseFingers
// Il2CppName: get_UseFingers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::GrabAPI::GrabbingRule (Oculus::Interaction::HandGrab::HandGrabUseInteractable::*)()>(&Oculus::Interaction::HandGrab::HandGrabUseInteractable::get_UseFingers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::HandGrabUseInteractable*), "get_UseFingers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandGrabUseInteractable::set_UseFingers
// Il2CppName: set_UseFingers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrab::HandGrabUseInteractable::*)(::Oculus::Interaction::GrabAPI::GrabbingRule)>(&Oculus::Interaction::HandGrab::HandGrabUseInteractable::set_UseFingers)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.GrabAPI", "GrabbingRule")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::HandGrabUseInteractable*), "set_UseFingers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandGrabUseInteractable::get_StrengthDeadzone
// Il2CppName: get_StrengthDeadzone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::HandGrab::HandGrabUseInteractable::*)()>(&Oculus::Interaction::HandGrab::HandGrabUseInteractable::get_StrengthDeadzone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::HandGrabUseInteractable*), "get_StrengthDeadzone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandGrabUseInteractable::set_StrengthDeadzone
// Il2CppName: set_StrengthDeadzone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrab::HandGrabUseInteractable::*)(float)>(&Oculus::Interaction::HandGrab::HandGrabUseInteractable::set_StrengthDeadzone)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::HandGrabUseInteractable*), "set_StrengthDeadzone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandGrabUseInteractable::get_UseProgress
// Il2CppName: get_UseProgress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::HandGrab::HandGrabUseInteractable::*)()>(&Oculus::Interaction::HandGrab::HandGrabUseInteractable::get_UseProgress)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::HandGrabUseInteractable*), "get_UseProgress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandGrabUseInteractable::set_UseProgress
// Il2CppName: set_UseProgress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrab::HandGrabUseInteractable::*)(float)>(&Oculus::Interaction::HandGrab::HandGrabUseInteractable::set_UseProgress)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::HandGrabUseInteractable*), "set_UseProgress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandGrabUseInteractable::get_RelaxGrabPoints
// Il2CppName: get_RelaxGrabPoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::Oculus::Interaction::HandGrab::HandGrabPose*>* (Oculus::Interaction::HandGrab::HandGrabUseInteractable::*)()>(&Oculus::Interaction::HandGrab::HandGrabUseInteractable::get_RelaxGrabPoints)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::HandGrabUseInteractable*), "get_RelaxGrabPoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandGrabUseInteractable::get_TightGrabPoints
// Il2CppName: get_TightGrabPoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::Oculus::Interaction::HandGrab::HandGrabPose*>* (Oculus::Interaction::HandGrab::HandGrabUseInteractable::*)()>(&Oculus::Interaction::HandGrab::HandGrabUseInteractable::get_TightGrabPoints)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::HandGrabUseInteractable*), "get_TightGrabPoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandGrabUseInteractable::get_UseStrengthDeadZone
// Il2CppName: get_UseStrengthDeadZone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::HandGrab::HandGrabUseInteractable::*)()>(&Oculus::Interaction::HandGrab::HandGrabUseInteractable::get_UseStrengthDeadZone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::HandGrabUseInteractable*), "get_UseStrengthDeadZone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandGrabUseInteractable::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrab::HandGrabUseInteractable::*)()>(&Oculus::Interaction::HandGrab::HandGrabUseInteractable::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::HandGrabUseInteractable*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandGrabUseInteractable::SelectingInteractorAdded
// Il2CppName: SelectingInteractorAdded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrab::HandGrabUseInteractable::*)(::Oculus::Interaction::HandGrab::HandGrabUseInteractor*)>(&Oculus::Interaction::HandGrab::HandGrabUseInteractable::SelectingInteractorAdded)> {
  static const MethodInfo* get() {
    static auto* interactor = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.HandGrab", "HandGrabUseInteractor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::HandGrabUseInteractable*), "SelectingInteractorAdded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactor});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandGrabUseInteractable::SelectingInteractorRemoved
// Il2CppName: SelectingInteractorRemoved
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrab::HandGrabUseInteractable::*)(::Oculus::Interaction::HandGrab::HandGrabUseInteractor*)>(&Oculus::Interaction::HandGrab::HandGrabUseInteractable::SelectingInteractorRemoved)> {
  static const MethodInfo* get() {
    static auto* interactor = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.HandGrab", "HandGrabUseInteractor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::HandGrabUseInteractable*), "SelectingInteractorRemoved", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactor});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandGrabUseInteractable::ComputeUseStrength
// Il2CppName: ComputeUseStrength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::HandGrab::HandGrabUseInteractable::*)(float)>(&Oculus::Interaction::HandGrab::HandGrabUseInteractable::ComputeUseStrength)> {
  static const MethodInfo* get() {
    static auto* strength = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::HandGrabUseInteractable*), "ComputeUseStrength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{strength});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandGrabUseInteractable::FindBestHandPoses
// Il2CppName: FindBestHandPoses
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::HandGrab::HandGrabUseInteractable::*)(float, ByRef<::Oculus::Interaction::HandGrab::HandPose*>, ByRef<::Oculus::Interaction::HandGrab::HandPose*>, ByRef<float>)>(&Oculus::Interaction::HandGrab::HandGrabUseInteractable::FindBestHandPoses)> {
  static const MethodInfo* get() {
    static auto* handScale = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* relaxedHandPose = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.HandGrab", "HandPose")->this_arg;
    static auto* tightHandPose = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.HandGrab", "HandPose")->this_arg;
    static auto* score = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::HandGrabUseInteractable*), "FindBestHandPoses", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handScale, relaxedHandPose, tightHandPose, score});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandGrabUseInteractable::FindScaledHandPose
// Il2CppName: FindScaledHandPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::HandGrab::HandGrabUseInteractable::*)(::System::Collections::Generic::List_1<::Oculus::Interaction::HandGrab::HandGrabPose*>*, float, ByRef<::Oculus::Interaction::HandGrab::HandPose*>)>(&Oculus::Interaction::HandGrab::HandGrabUseInteractable::FindScaledHandPose)> {
  static const MethodInfo* get() {
    static auto* _handGrabPoses = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Interaction.HandGrab", "HandGrabPose")})->byval_arg;
    static auto* handScale = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* handPose = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.HandGrab", "HandPose")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::HandGrabUseInteractable*), "FindScaledHandPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_handGrabPoses, handScale, handPose});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandGrabUseInteractable::InjectOptionalForwardUseDelegate
// Il2CppName: InjectOptionalForwardUseDelegate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrab::HandGrabUseInteractable::*)(::Oculus::Interaction::HandGrab::IHandGrabUseDelegate*)>(&Oculus::Interaction::HandGrab::HandGrabUseInteractable::InjectOptionalForwardUseDelegate)> {
  static const MethodInfo* get() {
    static auto* useDelegate = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.HandGrab", "IHandGrabUseDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::HandGrabUseInteractable*), "InjectOptionalForwardUseDelegate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{useDelegate});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandGrabUseInteractable::InjectOptionalRelaxedHandGrabPoints
// Il2CppName: InjectOptionalRelaxedHandGrabPoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrab::HandGrabUseInteractable::*)(::System::Collections::Generic::List_1<::Oculus::Interaction::HandGrab::HandGrabPose*>*)>(&Oculus::Interaction::HandGrab::HandGrabUseInteractable::InjectOptionalRelaxedHandGrabPoints)> {
  static const MethodInfo* get() {
    static auto* relaxedHandGrabPoints = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Interaction.HandGrab", "HandGrabPose")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::HandGrabUseInteractable*), "InjectOptionalRelaxedHandGrabPoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{relaxedHandGrabPoints});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandGrabUseInteractable::InjectOptionalTightHandGrabPoints
// Il2CppName: InjectOptionalTightHandGrabPoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrab::HandGrabUseInteractable::*)(::System::Collections::Generic::List_1<::Oculus::Interaction::HandGrab::HandGrabPose*>*)>(&Oculus::Interaction::HandGrab::HandGrabUseInteractable::InjectOptionalTightHandGrabPoints)> {
  static const MethodInfo* get() {
    static auto* tightHandGrabPoints = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Interaction.HandGrab", "HandGrabPose")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::HandGrabUseInteractable*), "InjectOptionalTightHandGrabPoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tightHandGrabPoints});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandGrabUseInteractable::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrab::HandGrabUseInteractable::*)()>(&Oculus::Interaction::HandGrab::HandGrabUseInteractable::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::HandGrabUseInteractable*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandGrabUseInteractable::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
