// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Oculus.Interaction.IMovement
#include "Oculus/Interaction/IMovement.hpp"
// Including type: UnityEngine.Pose
#include "UnityEngine/Pose.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: Oculus.Interaction.HandGrab
namespace Oculus::Interaction::HandGrab {
  // Forward declaring type: MoveRelativeToTarget
  class MoveRelativeToTarget;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::HandGrab::MoveRelativeToTarget);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::HandGrab::MoveRelativeToTarget*, "Oculus.Interaction.HandGrab", "MoveRelativeToTarget");
// Type namespace: Oculus.Interaction.HandGrab
namespace Oculus::Interaction::HandGrab {
  // Size: 0x64
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.HandGrab.MoveRelativeToTarget
  // [TokenAttribute] Offset: FFFFFFFF
  class MoveRelativeToTarget : public ::Il2CppObject/*, public ::Oculus::Interaction::IMovement*/ {
    public:
    public:
    // private UnityEngine.Pose _current
    // Size: 0x1C
    // Offset: 0x10
    ::UnityEngine::Pose current;
    // Field size check
    static_assert(sizeof(::UnityEngine::Pose) == 0x1C);
    // private UnityEngine.Pose _originalTarget
    // Size: 0x1C
    // Offset: 0x2C
    ::UnityEngine::Pose originalTarget;
    // Field size check
    static_assert(sizeof(::UnityEngine::Pose) == 0x1C);
    // private UnityEngine.Pose _originalSource
    // Size: 0x1C
    // Offset: 0x48
    ::UnityEngine::Pose originalSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::Pose) == 0x1C);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::IMovement
    operator ::Oculus::Interaction::IMovement() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::IMovement*>(this);
    }
    // Get instance field reference: private UnityEngine.Pose _current
    [[deprecated("Use field access instead!")]] ::UnityEngine::Pose& dyn__current();
    // Get instance field reference: private UnityEngine.Pose _originalTarget
    [[deprecated("Use field access instead!")]] ::UnityEngine::Pose& dyn__originalTarget();
    // Get instance field reference: private UnityEngine.Pose _originalSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::Pose& dyn__originalSource();
    // public UnityEngine.Pose get_Pose()
    // Offset: 0x482E9B8
    ::UnityEngine::Pose get_Pose();
    // public System.Boolean get_Stopped()
    // Offset: 0x482E9CC
    bool get_Stopped();
    // public System.Void MoveTo(UnityEngine.Pose target)
    // Offset: 0x482E9D4
    void MoveTo(::UnityEngine::Pose target);
    // public System.Void UpdateTarget(UnityEngine.Pose target)
    // Offset: 0x482E9F0
    void UpdateTarget(::UnityEngine::Pose target);
    // public System.Void StopAndSetPose(UnityEngine.Pose source)
    // Offset: 0x482EA48
    void StopAndSetPose(::UnityEngine::Pose source);
    // public System.Void Tick()
    // Offset: 0x482EA94
    void Tick();
    // public System.Void .ctor()
    // Offset: 0x482E920
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MoveRelativeToTarget* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::HandGrab::MoveRelativeToTarget::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MoveRelativeToTarget*, creationType>()));
    }
  }; // Oculus.Interaction.HandGrab.MoveRelativeToTarget
  #pragma pack(pop)
  static check_size<sizeof(MoveRelativeToTarget), 72 + sizeof(::UnityEngine::Pose)> __Oculus_Interaction_HandGrab_MoveRelativeToTargetSizeCheck;
  static_assert(sizeof(MoveRelativeToTarget) == 0x64);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::MoveRelativeToTarget::get_Pose
// Il2CppName: get_Pose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Pose (Oculus::Interaction::HandGrab::MoveRelativeToTarget::*)()>(&Oculus::Interaction::HandGrab::MoveRelativeToTarget::get_Pose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::MoveRelativeToTarget*), "get_Pose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::MoveRelativeToTarget::get_Stopped
// Il2CppName: get_Stopped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::HandGrab::MoveRelativeToTarget::*)()>(&Oculus::Interaction::HandGrab::MoveRelativeToTarget::get_Stopped)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::MoveRelativeToTarget*), "get_Stopped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::MoveRelativeToTarget::MoveTo
// Il2CppName: MoveTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrab::MoveRelativeToTarget::*)(::UnityEngine::Pose)>(&Oculus::Interaction::HandGrab::MoveRelativeToTarget::MoveTo)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::MoveRelativeToTarget*), "MoveTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::MoveRelativeToTarget::UpdateTarget
// Il2CppName: UpdateTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrab::MoveRelativeToTarget::*)(::UnityEngine::Pose)>(&Oculus::Interaction::HandGrab::MoveRelativeToTarget::UpdateTarget)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::MoveRelativeToTarget*), "UpdateTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::MoveRelativeToTarget::StopAndSetPose
// Il2CppName: StopAndSetPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrab::MoveRelativeToTarget::*)(::UnityEngine::Pose)>(&Oculus::Interaction::HandGrab::MoveRelativeToTarget::StopAndSetPose)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::MoveRelativeToTarget*), "StopAndSetPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::MoveRelativeToTarget::Tick
// Il2CppName: Tick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrab::MoveRelativeToTarget::*)()>(&Oculus::Interaction::HandGrab::MoveRelativeToTarget::Tick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::MoveRelativeToTarget*), "Tick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::MoveRelativeToTarget::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
