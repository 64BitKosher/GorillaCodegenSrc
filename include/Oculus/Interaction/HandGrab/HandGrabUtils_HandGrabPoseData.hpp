// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Oculus.Interaction.HandGrab.HandGrabUtils
#include "Oculus/Interaction/HandGrab/HandGrabUtils.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Pose
#include "UnityEngine/Pose.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction::HandGrab
namespace Oculus::Interaction::HandGrab {
  // Forward declaring type: HandPose
  class HandPose;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::HandGrab::HandGrabUtils::HandGrabPoseData, "Oculus.Interaction.HandGrab", "HandGrabUtils/HandGrabPoseData");
// Type namespace: Oculus.Interaction.HandGrab
namespace Oculus::Interaction::HandGrab {
  // Size: 0x2C
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Oculus.Interaction.HandGrab.HandGrabUtils/HandGrabPoseData
  // [TokenAttribute] Offset: FFFFFFFF
  struct HandGrabUtils::HandGrabPoseData/*, public ::System::ValueType*/ {
    public:
    public:
    // public UnityEngine.Pose gripPose
    // Size: 0x1C
    // Offset: 0x0
    ::UnityEngine::Pose gripPose;
    // Field size check
    static_assert(sizeof(::UnityEngine::Pose) == 0x1C);
    // Padding between fields: gripPose and: handPose
    char __padding0[0x4] = {};
    // public Oculus.Interaction.HandGrab.HandPose handPose
    // Size: 0x8
    // Offset: 0x20
    ::Oculus::Interaction::HandGrab::HandPose* handPose;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::HandGrab::HandPose*) == 0x8);
    // public System.Single scale
    // Size: 0x4
    // Offset: 0x28
    float scale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating value type constructor for type: HandGrabPoseData
    constexpr HandGrabPoseData(::UnityEngine::Pose gripPose_ = {}, ::Oculus::Interaction::HandGrab::HandPose* handPose_ = {}, float scale_ = {}) noexcept : gripPose{gripPose_}, handPose{handPose_}, scale{scale_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public UnityEngine.Pose gripPose
    [[deprecated("Use field access instead!")]] ::UnityEngine::Pose& dyn_gripPose();
    // Get instance field reference: public Oculus.Interaction.HandGrab.HandPose handPose
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::HandGrab::HandPose*& dyn_handPose();
    // Get instance field reference: public System.Single scale
    [[deprecated("Use field access instead!")]] float& dyn_scale();
  }; // Oculus.Interaction.HandGrab.HandGrabUtils/HandGrabPoseData
  #pragma pack(pop)
  static check_size<sizeof(HandGrabUtils::HandGrabPoseData), 40 + sizeof(float)> __Oculus_Interaction_HandGrab_HandGrabUtils_HandGrabPoseDataSizeCheck;
  static_assert(sizeof(HandGrabUtils::HandGrabPoseData) == 0x2C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
