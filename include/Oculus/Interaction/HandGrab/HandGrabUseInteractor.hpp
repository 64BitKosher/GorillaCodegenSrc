// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Oculus.Interaction.Interactor`2
#include "Oculus/Interaction/Interactor_2.hpp"
// Including type: Oculus.Interaction.HandGrab.IHandGrabState
#include "Oculus/Interaction/HandGrab/IHandGrabState.hpp"
// Including type: Oculus.Interaction.Input.HandFingerFlags
#include "Oculus/Interaction/Input/HandFingerFlags.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction::HandGrab
namespace Oculus::Interaction::HandGrab {
  // Forward declaring type: HandGrabUseInteractable
  class HandGrabUseInteractable;
  // Forward declaring type: HandPose
  class HandPose;
  // Forward declaring type: HandGrabTarget
  class HandGrabTarget;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Object because it is already included!
  // Forward declaring type: Pose
  struct Pose;
}
// Forward declaring namespace: Oculus::Interaction::Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: IHand
  class IHand;
  // Forward declaring type: HandFinger
  struct HandFinger;
}
// Forward declaring namespace: Oculus::Interaction
namespace Oculus::Interaction {
  // Forward declaring type: IFingerUseAPI
  class IFingerUseAPI;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.HandGrab
namespace Oculus::Interaction::HandGrab {
  // Forward declaring type: HandGrabUseInteractor
  class HandGrabUseInteractor;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::HandGrab::HandGrabUseInteractor);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::HandGrab::HandGrabUseInteractor*, "Oculus.Interaction.HandGrab", "HandGrabUseInteractor");
// Type namespace: Oculus.Interaction.HandGrab
namespace Oculus::Interaction::HandGrab {
  // WARNING Size may be invalid!
  // Autogenerated type: Oculus.Interaction.HandGrab.HandGrabUseInteractor
  // [TokenAttribute] Offset: FFFFFFFF
  class HandGrabUseInteractor : public ::Oculus::Interaction::Interactor_2<::Oculus::Interaction::HandGrab::HandGrabUseInteractor*, ::Oculus::Interaction::HandGrab::HandGrabUseInteractable*>/*, public ::Oculus::Interaction::HandGrab::IHandGrabState*/ {
    public:
    // Nested type: ::Oculus::Interaction::HandGrab::HandGrabUseInteractor::$$c
    class $$c;
    public:
    // private UnityEngine.Object _hand
    // Size: 0x8
    // Offset: 0x118
    ::UnityEngine::Object* hand;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.Input.IHand <Hand>k__BackingField
    // Size: 0x8
    // Offset: 0x120
    ::Oculus::Interaction::Input::IHand* Hand;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::IHand*) == 0x8);
    // private UnityEngine.Object _useAPI
    // Size: 0x8
    // Offset: 0x128
    ::UnityEngine::Object* useAPI;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.IFingerUseAPI <UseAPI>k__BackingField
    // Size: 0x8
    // Offset: 0x130
    ::Oculus::Interaction::IFingerUseAPI* UseAPI;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::IFingerUseAPI*) == 0x8);
    // private Oculus.Interaction.HandGrab.HandPose _relaxedHandPose
    // Size: 0x8
    // Offset: 0x138
    ::Oculus::Interaction::HandGrab::HandPose* relaxedHandPose;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::HandGrab::HandPose*) == 0x8);
    // private Oculus.Interaction.HandGrab.HandPose _tightHandPose
    // Size: 0x8
    // Offset: 0x140
    ::Oculus::Interaction::HandGrab::HandPose* tightHandPose;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::HandGrab::HandPose*) == 0x8);
    // private Oculus.Interaction.HandGrab.HandPose _cachedRelaxedHandPose
    // Size: 0x8
    // Offset: 0x148
    ::Oculus::Interaction::HandGrab::HandPose* cachedRelaxedHandPose;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::HandGrab::HandPose*) == 0x8);
    // private Oculus.Interaction.HandGrab.HandPose _cachedTightHandPose
    // Size: 0x8
    // Offset: 0x150
    ::Oculus::Interaction::HandGrab::HandPose* cachedTightHandPose;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::HandGrab::HandPose*) == 0x8);
    // private Oculus.Interaction.Input.HandFingerFlags _fingersInUse
    // Size: 0x4
    // Offset: 0x158
    ::Oculus::Interaction::Input::HandFingerFlags fingersInUse;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::HandFingerFlags) == 0x4);
    // private System.Single[] _fingerUseStrength
    // Size: 0x8
    // Offset: 0x160
    ::ArrayW<float> fingerUseStrength;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // private System.Boolean _usesHandPose
    // Size: 0x1
    // Offset: 0x168
    bool usesHandPose;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _handUseShouldSelect
    // Size: 0x1
    // Offset: 0x169
    bool handUseShouldSelect;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _handUseShouldUnselect
    // Size: 0x1
    // Offset: 0x16A
    bool handUseShouldUnselect;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private readonly Oculus.Interaction.HandGrab.HandGrabTarget <HandGrabTarget>k__BackingField
    // Size: 0x8
    // Offset: 0x170
    ::Oculus::Interaction::HandGrab::HandGrabTarget* HandGrabTarget;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::HandGrab::HandGrabTarget*) == 0x8);
    // private System.Action`1<Oculus.Interaction.HandGrab.IHandGrabState> <WhenHandGrabStarted>k__BackingField
    // Size: 0x8
    // Offset: 0x178
    ::System::Action_1<::Oculus::Interaction::HandGrab::IHandGrabState*>* WhenHandGrabStarted;
    // Field size check
    static_assert(sizeof(::System::Action_1<::Oculus::Interaction::HandGrab::IHandGrabState*>*) == 0x8);
    // private System.Action`1<Oculus.Interaction.HandGrab.IHandGrabState> <WhenHandGrabEnded>k__BackingField
    // Size: 0x8
    // Offset: 0x180
    ::System::Action_1<::Oculus::Interaction::HandGrab::IHandGrabState*>* WhenHandGrabEnded;
    // Field size check
    static_assert(sizeof(::System::Action_1<::Oculus::Interaction::HandGrab::IHandGrabState*>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::HandGrab::IHandGrabState
    operator ::Oculus::Interaction::HandGrab::IHandGrabState() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::HandGrab::IHandGrabState*>(this);
    }
    // Get instance field reference: private UnityEngine.Object _hand
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__hand();
    // Get instance field reference: private Oculus.Interaction.Input.IHand <Hand>k__BackingField
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::IHand*& dyn_$Hand$k__BackingField();
    // Get instance field reference: private UnityEngine.Object _useAPI
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__useAPI();
    // Get instance field reference: private Oculus.Interaction.IFingerUseAPI <UseAPI>k__BackingField
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::IFingerUseAPI*& dyn_$UseAPI$k__BackingField();
    // Get instance field reference: private Oculus.Interaction.HandGrab.HandPose _relaxedHandPose
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::HandGrab::HandPose*& dyn__relaxedHandPose();
    // Get instance field reference: private Oculus.Interaction.HandGrab.HandPose _tightHandPose
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::HandGrab::HandPose*& dyn__tightHandPose();
    // Get instance field reference: private Oculus.Interaction.HandGrab.HandPose _cachedRelaxedHandPose
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::HandGrab::HandPose*& dyn__cachedRelaxedHandPose();
    // Get instance field reference: private Oculus.Interaction.HandGrab.HandPose _cachedTightHandPose
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::HandGrab::HandPose*& dyn__cachedTightHandPose();
    // Get instance field reference: private Oculus.Interaction.Input.HandFingerFlags _fingersInUse
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::HandFingerFlags& dyn__fingersInUse();
    // Get instance field reference: private System.Single[] _fingerUseStrength
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn__fingerUseStrength();
    // Get instance field reference: private System.Boolean _usesHandPose
    [[deprecated("Use field access instead!")]] bool& dyn__usesHandPose();
    // Get instance field reference: private System.Boolean _handUseShouldSelect
    [[deprecated("Use field access instead!")]] bool& dyn__handUseShouldSelect();
    // Get instance field reference: private System.Boolean _handUseShouldUnselect
    [[deprecated("Use field access instead!")]] bool& dyn__handUseShouldUnselect();
    // Get instance field reference: private readonly Oculus.Interaction.HandGrab.HandGrabTarget <HandGrabTarget>k__BackingField
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::HandGrab::HandGrabTarget*& dyn_$HandGrabTarget$k__BackingField();
    // Get instance field reference: private System.Action`1<Oculus.Interaction.HandGrab.IHandGrabState> <WhenHandGrabStarted>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Action_1<::Oculus::Interaction::HandGrab::IHandGrabState*>*& dyn_$WhenHandGrabStarted$k__BackingField();
    // Get instance field reference: private System.Action`1<Oculus.Interaction.HandGrab.IHandGrabState> <WhenHandGrabEnded>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Action_1<::Oculus::Interaction::HandGrab::IHandGrabState*>*& dyn_$WhenHandGrabEnded$k__BackingField();
    // public Oculus.Interaction.Input.IHand get_Hand()
    // Offset: 0x482C100
    ::Oculus::Interaction::Input::IHand* get_Hand();
    // private System.Void set_Hand(Oculus.Interaction.Input.IHand value)
    // Offset: 0x482C108
    void set_Hand(::Oculus::Interaction::Input::IHand* value);
    // public Oculus.Interaction.IFingerUseAPI get_UseAPI()
    // Offset: 0x482C118
    ::Oculus::Interaction::IFingerUseAPI* get_UseAPI();
    // private System.Void set_UseAPI(Oculus.Interaction.IFingerUseAPI value)
    // Offset: 0x482C120
    void set_UseAPI(::Oculus::Interaction::IFingerUseAPI* value);
    // public Oculus.Interaction.HandGrab.HandGrabTarget get_HandGrabTarget()
    // Offset: 0x482C130
    ::Oculus::Interaction::HandGrab::HandGrabTarget* get_HandGrabTarget();
    // public System.Boolean get_IsGrabbing()
    // Offset: 0x482C138
    bool get_IsGrabbing();
    // public System.Single get_WristStrength()
    // Offset: 0x482C1A4
    float get_WristStrength();
    // public System.Single get_FingersStrength()
    // Offset: 0x482C1AC
    float get_FingersStrength();
    // public UnityEngine.Pose get_WristToGrabPoseOffset()
    // Offset: 0x482C1CC
    ::UnityEngine::Pose get_WristToGrabPoseOffset();
    // public System.Action`1<Oculus.Interaction.HandGrab.IHandGrabState> get_WhenHandGrabStarted()
    // Offset: 0x482C240
    ::System::Action_1<::Oculus::Interaction::HandGrab::IHandGrabState*>* get_WhenHandGrabStarted();
    // public System.Void set_WhenHandGrabStarted(System.Action`1<Oculus.Interaction.HandGrab.IHandGrabState> value)
    // Offset: 0x482C248
    void set_WhenHandGrabStarted(::System::Action_1<::Oculus::Interaction::HandGrab::IHandGrabState*>* value);
    // public System.Action`1<Oculus.Interaction.HandGrab.IHandGrabState> get_WhenHandGrabEnded()
    // Offset: 0x482C258
    ::System::Action_1<::Oculus::Interaction::HandGrab::IHandGrabState*>* get_WhenHandGrabEnded();
    // public System.Void set_WhenHandGrabEnded(System.Action`1<Oculus.Interaction.HandGrab.IHandGrabState> value)
    // Offset: 0x482C260
    void set_WhenHandGrabEnded(::System::Action_1<::Oculus::Interaction::HandGrab::IHandGrabState*>* value);
    // protected System.Void InteractableSelected(Oculus.Interaction.HandGrab.HandGrabUseInteractable interactable)
    // Offset: 0x482C3E4
    void InteractableSelected(::Oculus::Interaction::HandGrab::HandGrabUseInteractable* interactable);
    // protected System.Void InteractableUnselected(Oculus.Interaction.HandGrab.HandGrabUseInteractable interactable)
    // Offset: 0x482C4EC
    void InteractableUnselected(::Oculus::Interaction::HandGrab::HandGrabUseInteractable* interactable);
    // private System.Void StartUsing()
    // Offset: 0x482C444
    void StartUsing();
    // private System.Boolean IsUsingInteractable(Oculus.Interaction.HandGrab.HandGrabUseInteractable interactable)
    // Offset: 0x482C5B8
    bool IsUsingInteractable(::Oculus::Interaction::HandGrab::HandGrabUseInteractable* interactable);
    // private System.Single CalculateUseStrength(ref System.Single[] fingerUseStrength)
    // Offset: 0x482C860
    float CalculateUseStrength(ByRef<::ArrayW<float>> fingerUseStrength);
    // private System.Void MoveFingers(ref System.Single[] fingerUseProgress, System.Single useProgress)
    // Offset: 0x482CB04
    void MoveFingers(ByRef<::ArrayW<float>> fingerUseProgress, float useProgress);
    // private System.Void MarkFingerInUse(Oculus.Interaction.Input.HandFinger finger)
    // Offset: 0x482CC20
    void MarkFingerInUse(::Oculus::Interaction::Input::HandFinger finger);
    // private System.Void UnmarkFingerInUse(Oculus.Interaction.Input.HandFinger finger)
    // Offset: 0x482CC38
    void UnmarkFingerInUse(::Oculus::Interaction::Input::HandFinger finger);
    // private System.Void LerpFingerRotation(UnityEngine.Quaternion[] from, UnityEngine.Quaternion[] to, UnityEngine.Quaternion[] result, Oculus.Interaction.Input.HandFinger finger, System.Single t)
    // Offset: 0x482CC50
    void LerpFingerRotation(::ArrayW<::UnityEngine::Quaternion> from, ::ArrayW<::UnityEngine::Quaternion> to, ::ArrayW<::UnityEngine::Quaternion> result, ::Oculus::Interaction::Input::HandFinger finger, float t);
    // public Oculus.Interaction.Input.HandFingerFlags GrabbingFingers()
    // Offset: 0x482CD90
    ::Oculus::Interaction::Input::HandFingerFlags GrabbingFingers();
    // protected Oculus.Interaction.HandGrab.HandGrabUseInteractable ComputeCandidate()
    // Offset: 0x482CD98
    ::Oculus::Interaction::HandGrab::HandGrabUseInteractable* ComputeCandidate();
    // public System.Void InjectAllHandGrabUseInteractor(Oculus.Interaction.IFingerUseAPI useApi)
    // Offset: 0x482D118
    void InjectAllHandGrabUseInteractor(::Oculus::Interaction::IFingerUseAPI* useApi);
    // public System.Void InjectUseApi(Oculus.Interaction.IFingerUseAPI useApi)
    // Offset: 0x482D11C
    void InjectUseApi(::Oculus::Interaction::IFingerUseAPI* useApi);
    // public System.Void InjectOptionalHand(Oculus.Interaction.Input.IHand hand)
    // Offset: 0x482D1EC
    void InjectOptionalHand(::Oculus::Interaction::Input::IHand* hand);
    // protected override System.Boolean ComputeShouldSelect()
    // Offset: 0x482C270
    // Implemented from: Oculus.Interaction.Interactor`2
    // Base method: System.Boolean Interactor_2::ComputeShouldSelect()
    bool ComputeShouldSelect();
    // protected override System.Boolean ComputeShouldUnselect()
    // Offset: 0x482C278
    // Implemented from: Oculus.Interaction.Interactor`2
    // Base method: System.Boolean Interactor_2::ComputeShouldUnselect()
    bool ComputeShouldUnselect();
    // protected override System.Void Awake()
    // Offset: 0x482C2FC
    // Implemented from: Oculus.Interaction.Interactor`2
    // Base method: System.Void Interactor_2::Awake()
    void Awake();
    // protected override System.Void Start()
    // Offset: 0x482C3AC
    // Implemented from: Oculus.Interaction.Interactor`2
    // Base method: System.Void Interactor_2::Start()
    void Start();
    // protected override System.Void DoHoverUpdate()
    // Offset: 0x482C54C
    // Implemented from: Oculus.Interaction.Interactor`2
    // Base method: System.Void Interactor_2::DoHoverUpdate()
    void DoHoverUpdate();
    // protected override System.Void DoSelectUpdate()
    // Offset: 0x482C748
    // Implemented from: Oculus.Interaction.Interactor`2
    // Base method: System.Void Interactor_2::DoSelectUpdate()
    void DoSelectUpdate();
    // public System.Void .ctor()
    // Offset: 0x482D2BC
    // Implemented from: Oculus.Interaction.Interactor`2
    // Base method: System.Void Interactor_2::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HandGrabUseInteractor* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::HandGrab::HandGrabUseInteractor::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HandGrabUseInteractor*, creationType>()));
    }
  }; // Oculus.Interaction.HandGrab.HandGrabUseInteractor
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandGrabUseInteractor::get_Hand
// Il2CppName: get_Hand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Input::IHand* (Oculus::Interaction::HandGrab::HandGrabUseInteractor::*)()>(&Oculus::Interaction::HandGrab::HandGrabUseInteractor::get_Hand)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::HandGrabUseInteractor*), "get_Hand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandGrabUseInteractor::set_Hand
// Il2CppName: set_Hand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrab::HandGrabUseInteractor::*)(::Oculus::Interaction::Input::IHand*)>(&Oculus::Interaction::HandGrab::HandGrabUseInteractor::set_Hand)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::HandGrabUseInteractor*), "set_Hand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandGrabUseInteractor::get_UseAPI
// Il2CppName: get_UseAPI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::IFingerUseAPI* (Oculus::Interaction::HandGrab::HandGrabUseInteractor::*)()>(&Oculus::Interaction::HandGrab::HandGrabUseInteractor::get_UseAPI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::HandGrabUseInteractor*), "get_UseAPI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandGrabUseInteractor::set_UseAPI
// Il2CppName: set_UseAPI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrab::HandGrabUseInteractor::*)(::Oculus::Interaction::IFingerUseAPI*)>(&Oculus::Interaction::HandGrab::HandGrabUseInteractor::set_UseAPI)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IFingerUseAPI")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::HandGrabUseInteractor*), "set_UseAPI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandGrabUseInteractor::get_HandGrabTarget
// Il2CppName: get_HandGrabTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::HandGrab::HandGrabTarget* (Oculus::Interaction::HandGrab::HandGrabUseInteractor::*)()>(&Oculus::Interaction::HandGrab::HandGrabUseInteractor::get_HandGrabTarget)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::HandGrabUseInteractor*), "get_HandGrabTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandGrabUseInteractor::get_IsGrabbing
// Il2CppName: get_IsGrabbing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::HandGrab::HandGrabUseInteractor::*)()>(&Oculus::Interaction::HandGrab::HandGrabUseInteractor::get_IsGrabbing)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::HandGrabUseInteractor*), "get_IsGrabbing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandGrabUseInteractor::get_WristStrength
// Il2CppName: get_WristStrength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::HandGrab::HandGrabUseInteractor::*)()>(&Oculus::Interaction::HandGrab::HandGrabUseInteractor::get_WristStrength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::HandGrabUseInteractor*), "get_WristStrength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandGrabUseInteractor::get_FingersStrength
// Il2CppName: get_FingersStrength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::HandGrab::HandGrabUseInteractor::*)()>(&Oculus::Interaction::HandGrab::HandGrabUseInteractor::get_FingersStrength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::HandGrabUseInteractor*), "get_FingersStrength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandGrabUseInteractor::get_WristToGrabPoseOffset
// Il2CppName: get_WristToGrabPoseOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Pose (Oculus::Interaction::HandGrab::HandGrabUseInteractor::*)()>(&Oculus::Interaction::HandGrab::HandGrabUseInteractor::get_WristToGrabPoseOffset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::HandGrabUseInteractor*), "get_WristToGrabPoseOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandGrabUseInteractor::get_WhenHandGrabStarted
// Il2CppName: get_WhenHandGrabStarted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Action_1<::Oculus::Interaction::HandGrab::IHandGrabState*>* (Oculus::Interaction::HandGrab::HandGrabUseInteractor::*)()>(&Oculus::Interaction::HandGrab::HandGrabUseInteractor::get_WhenHandGrabStarted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::HandGrabUseInteractor*), "get_WhenHandGrabStarted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandGrabUseInteractor::set_WhenHandGrabStarted
// Il2CppName: set_WhenHandGrabStarted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrab::HandGrabUseInteractor::*)(::System::Action_1<::Oculus::Interaction::HandGrab::IHandGrabState*>*)>(&Oculus::Interaction::HandGrab::HandGrabUseInteractor::set_WhenHandGrabStarted)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Interaction.HandGrab", "IHandGrabState")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::HandGrabUseInteractor*), "set_WhenHandGrabStarted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandGrabUseInteractor::get_WhenHandGrabEnded
// Il2CppName: get_WhenHandGrabEnded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Action_1<::Oculus::Interaction::HandGrab::IHandGrabState*>* (Oculus::Interaction::HandGrab::HandGrabUseInteractor::*)()>(&Oculus::Interaction::HandGrab::HandGrabUseInteractor::get_WhenHandGrabEnded)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::HandGrabUseInteractor*), "get_WhenHandGrabEnded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandGrabUseInteractor::set_WhenHandGrabEnded
// Il2CppName: set_WhenHandGrabEnded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrab::HandGrabUseInteractor::*)(::System::Action_1<::Oculus::Interaction::HandGrab::IHandGrabState*>*)>(&Oculus::Interaction::HandGrab::HandGrabUseInteractor::set_WhenHandGrabEnded)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Interaction.HandGrab", "IHandGrabState")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::HandGrabUseInteractor*), "set_WhenHandGrabEnded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandGrabUseInteractor::InteractableSelected
// Il2CppName: InteractableSelected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrab::HandGrabUseInteractor::*)(::Oculus::Interaction::HandGrab::HandGrabUseInteractable*)>(&Oculus::Interaction::HandGrab::HandGrabUseInteractor::InteractableSelected)> {
  static const MethodInfo* get() {
    static auto* interactable = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.HandGrab", "HandGrabUseInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::HandGrabUseInteractor*), "InteractableSelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactable});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandGrabUseInteractor::InteractableUnselected
// Il2CppName: InteractableUnselected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrab::HandGrabUseInteractor::*)(::Oculus::Interaction::HandGrab::HandGrabUseInteractable*)>(&Oculus::Interaction::HandGrab::HandGrabUseInteractor::InteractableUnselected)> {
  static const MethodInfo* get() {
    static auto* interactable = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.HandGrab", "HandGrabUseInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::HandGrabUseInteractor*), "InteractableUnselected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactable});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandGrabUseInteractor::StartUsing
// Il2CppName: StartUsing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrab::HandGrabUseInteractor::*)()>(&Oculus::Interaction::HandGrab::HandGrabUseInteractor::StartUsing)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::HandGrabUseInteractor*), "StartUsing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandGrabUseInteractor::IsUsingInteractable
// Il2CppName: IsUsingInteractable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::HandGrab::HandGrabUseInteractor::*)(::Oculus::Interaction::HandGrab::HandGrabUseInteractable*)>(&Oculus::Interaction::HandGrab::HandGrabUseInteractor::IsUsingInteractable)> {
  static const MethodInfo* get() {
    static auto* interactable = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.HandGrab", "HandGrabUseInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::HandGrabUseInteractor*), "IsUsingInteractable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactable});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandGrabUseInteractor::CalculateUseStrength
// Il2CppName: CalculateUseStrength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::HandGrab::HandGrabUseInteractor::*)(ByRef<::ArrayW<float>>)>(&Oculus::Interaction::HandGrab::HandGrabUseInteractor::CalculateUseStrength)> {
  static const MethodInfo* get() {
    static auto* fingerUseStrength = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::HandGrabUseInteractor*), "CalculateUseStrength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fingerUseStrength});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandGrabUseInteractor::MoveFingers
// Il2CppName: MoveFingers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrab::HandGrabUseInteractor::*)(ByRef<::ArrayW<float>>, float)>(&Oculus::Interaction::HandGrab::HandGrabUseInteractor::MoveFingers)> {
  static const MethodInfo* get() {
    static auto* fingerUseProgress = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->this_arg;
    static auto* useProgress = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::HandGrabUseInteractor*), "MoveFingers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fingerUseProgress, useProgress});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandGrabUseInteractor::MarkFingerInUse
// Il2CppName: MarkFingerInUse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrab::HandGrabUseInteractor::*)(::Oculus::Interaction::Input::HandFinger)>(&Oculus::Interaction::HandGrab::HandGrabUseInteractor::MarkFingerInUse)> {
  static const MethodInfo* get() {
    static auto* finger = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "HandFinger")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::HandGrabUseInteractor*), "MarkFingerInUse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{finger});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandGrabUseInteractor::UnmarkFingerInUse
// Il2CppName: UnmarkFingerInUse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrab::HandGrabUseInteractor::*)(::Oculus::Interaction::Input::HandFinger)>(&Oculus::Interaction::HandGrab::HandGrabUseInteractor::UnmarkFingerInUse)> {
  static const MethodInfo* get() {
    static auto* finger = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "HandFinger")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::HandGrabUseInteractor*), "UnmarkFingerInUse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{finger});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandGrabUseInteractor::LerpFingerRotation
// Il2CppName: LerpFingerRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrab::HandGrabUseInteractor::*)(::ArrayW<::UnityEngine::Quaternion>, ::ArrayW<::UnityEngine::Quaternion>, ::ArrayW<::UnityEngine::Quaternion>, ::Oculus::Interaction::Input::HandFinger, float)>(&Oculus::Interaction::HandGrab::HandGrabUseInteractor::LerpFingerRotation)> {
  static const MethodInfo* get() {
    static auto* from = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion"), 1)->byval_arg;
    static auto* to = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion"), 1)->byval_arg;
    static auto* result = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion"), 1)->byval_arg;
    static auto* finger = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "HandFinger")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::HandGrabUseInteractor*), "LerpFingerRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{from, to, result, finger, t});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandGrabUseInteractor::GrabbingFingers
// Il2CppName: GrabbingFingers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Input::HandFingerFlags (Oculus::Interaction::HandGrab::HandGrabUseInteractor::*)()>(&Oculus::Interaction::HandGrab::HandGrabUseInteractor::GrabbingFingers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::HandGrabUseInteractor*), "GrabbingFingers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandGrabUseInteractor::ComputeCandidate
// Il2CppName: ComputeCandidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::HandGrab::HandGrabUseInteractable* (Oculus::Interaction::HandGrab::HandGrabUseInteractor::*)()>(&Oculus::Interaction::HandGrab::HandGrabUseInteractor::ComputeCandidate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::HandGrabUseInteractor*), "ComputeCandidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandGrabUseInteractor::InjectAllHandGrabUseInteractor
// Il2CppName: InjectAllHandGrabUseInteractor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrab::HandGrabUseInteractor::*)(::Oculus::Interaction::IFingerUseAPI*)>(&Oculus::Interaction::HandGrab::HandGrabUseInteractor::InjectAllHandGrabUseInteractor)> {
  static const MethodInfo* get() {
    static auto* useApi = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IFingerUseAPI")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::HandGrabUseInteractor*), "InjectAllHandGrabUseInteractor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{useApi});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandGrabUseInteractor::InjectUseApi
// Il2CppName: InjectUseApi
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrab::HandGrabUseInteractor::*)(::Oculus::Interaction::IFingerUseAPI*)>(&Oculus::Interaction::HandGrab::HandGrabUseInteractor::InjectUseApi)> {
  static const MethodInfo* get() {
    static auto* useApi = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IFingerUseAPI")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::HandGrabUseInteractor*), "InjectUseApi", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{useApi});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandGrabUseInteractor::InjectOptionalHand
// Il2CppName: InjectOptionalHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrab::HandGrabUseInteractor::*)(::Oculus::Interaction::Input::IHand*)>(&Oculus::Interaction::HandGrab::HandGrabUseInteractor::InjectOptionalHand)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::HandGrabUseInteractor*), "InjectOptionalHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandGrabUseInteractor::ComputeShouldSelect
// Il2CppName: ComputeShouldSelect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::HandGrab::HandGrabUseInteractor::*)()>(&Oculus::Interaction::HandGrab::HandGrabUseInteractor::ComputeShouldSelect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::HandGrabUseInteractor*), "ComputeShouldSelect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandGrabUseInteractor::ComputeShouldUnselect
// Il2CppName: ComputeShouldUnselect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::HandGrab::HandGrabUseInteractor::*)()>(&Oculus::Interaction::HandGrab::HandGrabUseInteractor::ComputeShouldUnselect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::HandGrabUseInteractor*), "ComputeShouldUnselect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandGrabUseInteractor::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrab::HandGrabUseInteractor::*)()>(&Oculus::Interaction::HandGrab::HandGrabUseInteractor::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::HandGrabUseInteractor*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandGrabUseInteractor::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrab::HandGrabUseInteractor::*)()>(&Oculus::Interaction::HandGrab::HandGrabUseInteractor::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::HandGrabUseInteractor*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandGrabUseInteractor::DoHoverUpdate
// Il2CppName: DoHoverUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrab::HandGrabUseInteractor::*)()>(&Oculus::Interaction::HandGrab::HandGrabUseInteractor::DoHoverUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::HandGrabUseInteractor*), "DoHoverUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandGrabUseInteractor::DoSelectUpdate
// Il2CppName: DoSelectUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrab::HandGrabUseInteractor::*)()>(&Oculus::Interaction::HandGrab::HandGrabUseInteractor::DoSelectUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::HandGrabUseInteractor*), "DoSelectUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandGrabUseInteractor::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
