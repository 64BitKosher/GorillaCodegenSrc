// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Oculus.Interaction.IMovement
#include "Oculus/Interaction/IMovement.hpp"
// Including type: UnityEngine.Pose
#include "UnityEngine/Pose.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.HandGrab
namespace Oculus::Interaction::HandGrab {
  // Forward declaring type: FollowTarget
  class FollowTarget;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::HandGrab::FollowTarget);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::HandGrab::FollowTarget*, "Oculus.Interaction.HandGrab", "FollowTarget");
// Type namespace: Oculus.Interaction.HandGrab
namespace Oculus::Interaction::HandGrab {
  // Size: 0x5C
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.HandGrab.FollowTarget
  // [TokenAttribute] Offset: FFFFFFFF
  class FollowTarget : public ::Il2CppObject/*, public ::Oculus::Interaction::IMovement*/ {
    public:
    public:
    // private System.Single _speed
    // Size: 0x4
    // Offset: 0x10
    float speed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: speed and: space
    char __padding0[0x4] = {};
    // private UnityEngine.Transform _space
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Transform* space;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Pose _localTarget
    // Size: 0x1C
    // Offset: 0x20
    ::UnityEngine::Pose localTarget;
    // Field size check
    static_assert(sizeof(::UnityEngine::Pose) == 0x1C);
    // private UnityEngine.Pose _localPose
    // Size: 0x1C
    // Offset: 0x3C
    ::UnityEngine::Pose localPose;
    // Field size check
    static_assert(sizeof(::UnityEngine::Pose) == 0x1C);
    // private System.Single _startTime
    // Size: 0x4
    // Offset: 0x58
    float startTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::IMovement
    operator ::Oculus::Interaction::IMovement() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::IMovement*>(this);
    }
    // static field const value: static private System.Single ROTATION_SPEED_FACTOR
    static constexpr const float ROTATION_SPEED_FACTOR = 50;
    // Get static field: static private System.Single ROTATION_SPEED_FACTOR
    static float _get_ROTATION_SPEED_FACTOR();
    // Set static field: static private System.Single ROTATION_SPEED_FACTOR
    static void _set_ROTATION_SPEED_FACTOR(float value);
    // Get instance field reference: private System.Single _speed
    [[deprecated("Use field access instead!")]] float& dyn__speed();
    // Get instance field reference: private UnityEngine.Transform _space
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__space();
    // Get instance field reference: private UnityEngine.Pose _localTarget
    [[deprecated("Use field access instead!")]] ::UnityEngine::Pose& dyn__localTarget();
    // Get instance field reference: private UnityEngine.Pose _localPose
    [[deprecated("Use field access instead!")]] ::UnityEngine::Pose& dyn__localPose();
    // Get instance field reference: private System.Single _startTime
    [[deprecated("Use field access instead!")]] float& dyn__startTime();
    // public UnityEngine.Pose get_Pose()
    // Offset: 0x482E3C0
    ::UnityEngine::Pose get_Pose();
    // public System.Boolean get_Stopped()
    // Offset: 0x482E4F4
    bool get_Stopped();
    // public System.Void .ctor(System.Single speed, UnityEngine.Transform space)
    // Offset: 0x482E370
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FollowTarget* New_ctor(float speed, ::UnityEngine::Transform* space) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::HandGrab::FollowTarget::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FollowTarget*, creationType>(speed, space)));
    }
    // private UnityEngine.Pose ToLocal(in UnityEngine.Pose pose)
    // Offset: 0x482E4FC
    ::UnityEngine::Pose ToLocal(ByRef<::UnityEngine::Pose> pose);
    // private UnityEngine.Pose ToWorld(in UnityEngine.Pose pose)
    // Offset: 0x482E3F4
    ::UnityEngine::Pose ToWorld(ByRef<::UnityEngine::Pose> pose);
    // public System.Void MoveTo(UnityEngine.Pose target)
    // Offset: 0x482E604
    void MoveTo(::UnityEngine::Pose target);
    // public System.Void UpdateTarget(UnityEngine.Pose target)
    // Offset: 0x482E664
    void UpdateTarget(::UnityEngine::Pose target);
    // public System.Void StopAndSetPose(UnityEngine.Pose source)
    // Offset: 0x482E890
    void StopAndSetPose(::UnityEngine::Pose source);
    // public System.Void Tick()
    // Offset: 0x482E6AC
    void Tick();
  }; // Oculus.Interaction.HandGrab.FollowTarget
  #pragma pack(pop)
  static check_size<sizeof(FollowTarget), 88 + sizeof(float)> __Oculus_Interaction_HandGrab_FollowTargetSizeCheck;
  static_assert(sizeof(FollowTarget) == 0x5C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::FollowTarget::get_Pose
// Il2CppName: get_Pose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Pose (Oculus::Interaction::HandGrab::FollowTarget::*)()>(&Oculus::Interaction::HandGrab::FollowTarget::get_Pose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::FollowTarget*), "get_Pose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::FollowTarget::get_Stopped
// Il2CppName: get_Stopped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::HandGrab::FollowTarget::*)()>(&Oculus::Interaction::HandGrab::FollowTarget::get_Stopped)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::FollowTarget*), "get_Stopped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::FollowTarget::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::FollowTarget::ToLocal
// Il2CppName: ToLocal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Pose (Oculus::Interaction::HandGrab::FollowTarget::*)(ByRef<::UnityEngine::Pose>)>(&Oculus::Interaction::HandGrab::FollowTarget::ToLocal)> {
  static const MethodInfo* get() {
    static auto* pose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::FollowTarget*), "ToLocal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pose});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::FollowTarget::ToWorld
// Il2CppName: ToWorld
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Pose (Oculus::Interaction::HandGrab::FollowTarget::*)(ByRef<::UnityEngine::Pose>)>(&Oculus::Interaction::HandGrab::FollowTarget::ToWorld)> {
  static const MethodInfo* get() {
    static auto* pose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::FollowTarget*), "ToWorld", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pose});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::FollowTarget::MoveTo
// Il2CppName: MoveTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrab::FollowTarget::*)(::UnityEngine::Pose)>(&Oculus::Interaction::HandGrab::FollowTarget::MoveTo)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::FollowTarget*), "MoveTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::FollowTarget::UpdateTarget
// Il2CppName: UpdateTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrab::FollowTarget::*)(::UnityEngine::Pose)>(&Oculus::Interaction::HandGrab::FollowTarget::UpdateTarget)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::FollowTarget*), "UpdateTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::FollowTarget::StopAndSetPose
// Il2CppName: StopAndSetPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrab::FollowTarget::*)(::UnityEngine::Pose)>(&Oculus::Interaction::HandGrab::FollowTarget::StopAndSetPose)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::FollowTarget*), "StopAndSetPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::FollowTarget::Tick
// Il2CppName: Tick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrab::FollowTarget::*)()>(&Oculus::Interaction::HandGrab::FollowTarget::Tick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::FollowTarget*), "Tick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
