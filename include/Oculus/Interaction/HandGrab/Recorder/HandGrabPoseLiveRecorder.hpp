// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Oculus.Interaction.IActiveState
#include "Oculus/Interaction/IActiveState.hpp"
// Including type: UnityEngine.Pose
#include "UnityEngine/Pose.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: Oculus::Interaction::HandGrab::Recorder
namespace Oculus::Interaction::HandGrab::Recorder {
  // Forward declaring type: TimerUIControl
  class TimerUIControl;
  // Forward declaring type: RigidbodyDetector
  class RigidbodyDetector;
  // Skipping declaration: RecorderStep because it is already included!
}
// Forward declaring namespace: Oculus::Interaction::HandGrab
namespace Oculus::Interaction::HandGrab {
  // Forward declaring type: HandGrabInteractor
  class HandGrabInteractor;
  // Forward declaring type: HandPose
  class HandPose;
  // Forward declaring type: HandGrabInteractable
  class HandGrabInteractable;
  // Forward declaring type: HandGrabPose
  class HandGrabPose;
}
// Forward declaring namespace: Oculus::Interaction::HandGrab::Visuals
namespace Oculus::Interaction::HandGrab::Visuals {
  // Forward declaring type: HandGhostProvider
  class HandGhostProvider;
}
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TextMeshPro
  class TextMeshPro;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: WaitForSeconds
  class WaitForSeconds;
  // Forward declaring type: Coroutine
  class Coroutine;
  // Forward declaring type: Rigidbody
  class Rigidbody;
}
// Forward declaring namespace: UnityEngine::Events
namespace UnityEngine::Events {
  // Forward declaring type: UnityEvent
  class UnityEvent;
  // Forward declaring type: UnityEvent`1<T0>
  template<typename T0>
  class UnityEvent_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: Oculus::Interaction::Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: IHand
  class IHand;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.HandGrab.Recorder
namespace Oculus::Interaction::HandGrab::Recorder {
  // Forward declaring type: HandGrabPoseLiveRecorder
  class HandGrabPoseLiveRecorder;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder*, "Oculus.Interaction.HandGrab.Recorder", "HandGrabPoseLiveRecorder");
// Type namespace: Oculus.Interaction.HandGrab.Recorder
namespace Oculus::Interaction::HandGrab::Recorder {
  // Size: 0xAD
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.HandGrab.Recorder.HandGrabPoseLiveRecorder
  // [TokenAttribute] Offset: FFFFFFFF
  class HandGrabPoseLiveRecorder : public ::UnityEngine::MonoBehaviour/*, public ::Oculus::Interaction::IActiveState*/ {
    public:
    // Nested type: ::Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder::RecorderStep
    struct RecorderStep;
    // Nested type: ::Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder::$DelayedSnapshot$d__29
    class $DelayedSnapshot$d__29;
    // Size: 0x40
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Oculus.Interaction.HandGrab.Recorder.HandGrabPoseLiveRecorder/RecorderStep
    // [TokenAttribute] Offset: FFFFFFFF
    struct RecorderStep/*, public ::System::ValueType*/ {
      public:
      public:
      // private Oculus.Interaction.HandGrab.HandPose <RawHandPose>k__BackingField
      // Size: 0x8
      // Offset: 0x0
      ::Oculus::Interaction::HandGrab::HandPose* RawHandPose;
      // Field size check
      static_assert(sizeof(::Oculus::Interaction::HandGrab::HandPose*) == 0x8);
      // private UnityEngine.Pose <GrabPoint>k__BackingField
      // Size: 0x1C
      // Offset: 0x8
      ::UnityEngine::Pose GrabPoint;
      // Field size check
      static_assert(sizeof(::UnityEngine::Pose) == 0x1C);
      // Padding between fields: GrabPoint and: Item
      char __padding1[0x4] = {};
      // private UnityEngine.Rigidbody <Item>k__BackingField
      // Size: 0x8
      // Offset: 0x28
      ::UnityEngine::Rigidbody* Item;
      // Field size check
      static_assert(sizeof(::UnityEngine::Rigidbody*) == 0x8);
      // private System.Single <HandScale>k__BackingField
      // Size: 0x4
      // Offset: 0x30
      float HandScale;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // Padding between fields: HandScale and: interactable
      char __padding3[0x4] = {};
      // public Oculus.Interaction.HandGrab.HandGrabInteractable interactable
      // Size: 0x8
      // Offset: 0x38
      ::Oculus::Interaction::HandGrab::HandGrabInteractable* interactable;
      // Field size check
      static_assert(sizeof(::Oculus::Interaction::HandGrab::HandGrabInteractable*) == 0x8);
      public:
      // Creating value type constructor for type: RecorderStep
      constexpr RecorderStep(::Oculus::Interaction::HandGrab::HandPose* RawHandPose_ = {}, ::UnityEngine::Pose GrabPoint_ = {}, ::UnityEngine::Rigidbody* Item_ = {}, float HandScale_ = {}, ::Oculus::Interaction::HandGrab::HandGrabInteractable* interactable_ = {}) noexcept : RawHandPose{RawHandPose_}, GrabPoint{GrabPoint_}, Item{Item_}, HandScale{HandScale_}, interactable{interactable_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: private Oculus.Interaction.HandGrab.HandPose <RawHandPose>k__BackingField
      [[deprecated("Use field access instead!")]] ::Oculus::Interaction::HandGrab::HandPose*& dyn_$RawHandPose$k__BackingField();
      // Get instance field reference: private UnityEngine.Pose <GrabPoint>k__BackingField
      [[deprecated("Use field access instead!")]] ::UnityEngine::Pose& dyn_$GrabPoint$k__BackingField();
      // Get instance field reference: private UnityEngine.Rigidbody <Item>k__BackingField
      [[deprecated("Use field access instead!")]] ::UnityEngine::Rigidbody*& dyn_$Item$k__BackingField();
      // Get instance field reference: private System.Single <HandScale>k__BackingField
      [[deprecated("Use field access instead!")]] float& dyn_$HandScale$k__BackingField();
      // Get instance field reference: public Oculus.Interaction.HandGrab.HandGrabInteractable interactable
      [[deprecated("Use field access instead!")]] ::Oculus::Interaction::HandGrab::HandGrabInteractable*& dyn_interactable();
      // public Oculus.Interaction.HandGrab.HandPose get_RawHandPose()
      // Offset: 0x479D704
      ::Oculus::Interaction::HandGrab::HandPose* get_RawHandPose();
      // private System.Void set_RawHandPose(Oculus.Interaction.HandGrab.HandPose value)
      // Offset: 0x479D70C
      void set_RawHandPose(::Oculus::Interaction::HandGrab::HandPose* value);
      // public UnityEngine.Pose get_GrabPoint()
      // Offset: 0x479D714
      ::UnityEngine::Pose get_GrabPoint();
      // private System.Void set_GrabPoint(UnityEngine.Pose value)
      // Offset: 0x479D728
      void set_GrabPoint(::UnityEngine::Pose value);
      // public UnityEngine.Rigidbody get_Item()
      // Offset: 0x479D744
      ::UnityEngine::Rigidbody* get_Item();
      // private System.Void set_Item(UnityEngine.Rigidbody value)
      // Offset: 0x479D74C
      void set_Item(::UnityEngine::Rigidbody* value);
      // public System.Single get_HandScale()
      // Offset: 0x479D754
      float get_HandScale();
      // private System.Void set_HandScale(System.Single value)
      // Offset: 0x479D75C
      void set_HandScale(float value);
      // public System.Void .ctor(Oculus.Interaction.HandGrab.HandPose rawPose, UnityEngine.Pose grabPoint, System.Single scale, UnityEngine.Rigidbody item)
      // Offset: 0x479D570
      RecorderStep(::Oculus::Interaction::HandGrab::HandPose* rawPose, ::UnityEngine::Pose grabPoint, float scale, ::UnityEngine::Rigidbody* item);
      // public System.Void ClearInteractable()
      // Offset: 0x479CE6C
      void ClearInteractable();
    }; // Oculus.Interaction.HandGrab.Recorder.HandGrabPoseLiveRecorder/RecorderStep
    #pragma pack(pop)
    static check_size<sizeof(HandGrabPoseLiveRecorder::RecorderStep), 56 + sizeof(::Oculus::Interaction::HandGrab::HandGrabInteractable*)> __Oculus_Interaction_HandGrab_Recorder_HandGrabPoseLiveRecorder_RecorderStepSizeCheck;
    static_assert(sizeof(HandGrabPoseLiveRecorder::RecorderStep) == 0x40);
    public:
    // private Oculus.Interaction.HandGrab.HandGrabInteractor _leftHand
    // Size: 0x8
    // Offset: 0x20
    ::Oculus::Interaction::HandGrab::HandGrabInteractor* leftHand;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::HandGrab::HandGrabInteractor*) == 0x8);
    // private Oculus.Interaction.HandGrab.HandGrabInteractor _rightHand
    // Size: 0x8
    // Offset: 0x28
    ::Oculus::Interaction::HandGrab::HandGrabInteractor* rightHand;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::HandGrab::HandGrabInteractor*) == 0x8);
    // private Oculus.Interaction.HandGrab.Visuals.HandGhostProvider _ghostProvider
    // Size: 0x8
    // Offset: 0x30
    ::Oculus::Interaction::HandGrab::Visuals::HandGhostProvider* ghostProvider;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::HandGrab::Visuals::HandGhostProvider*) == 0x8);
    // private Oculus.Interaction.HandGrab.Recorder.TimerUIControl _timerControl
    // Size: 0x8
    // Offset: 0x38
    ::Oculus::Interaction::HandGrab::Recorder::TimerUIControl* timerControl;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::HandGrab::Recorder::TimerUIControl*) == 0x8);
    // private TMPro.TextMeshPro _delayLabel
    // Size: 0x8
    // Offset: 0x40
    ::TMPro::TextMeshPro* delayLabel;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshPro*) == 0x8);
    // private Oculus.Interaction.HandGrab.Recorder.RigidbodyDetector _leftDetector
    // Size: 0x8
    // Offset: 0x48
    ::Oculus::Interaction::HandGrab::Recorder::RigidbodyDetector* leftDetector;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::HandGrab::Recorder::RigidbodyDetector*) == 0x8);
    // private Oculus.Interaction.HandGrab.Recorder.RigidbodyDetector _rightDetector
    // Size: 0x8
    // Offset: 0x50
    ::Oculus::Interaction::HandGrab::Recorder::RigidbodyDetector* rightDetector;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::HandGrab::Recorder::RigidbodyDetector*) == 0x8);
    // private UnityEngine.WaitForSeconds _waitOneSeconds
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::WaitForSeconds* waitOneSeconds;
    // Field size check
    static_assert(sizeof(::UnityEngine::WaitForSeconds*) == 0x8);
    // private UnityEngine.Coroutine _delayedSnapRoutine
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::Coroutine* delayedSnapRoutine;
    // Field size check
    static_assert(sizeof(::UnityEngine::Coroutine*) == 0x8);
    // public UnityEngine.Events.UnityEvent WhenTimeStep
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::Events::UnityEvent* WhenTimeStep;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    // public UnityEngine.Events.UnityEvent WhenSnapshot
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::Events::UnityEvent* WhenSnapshot;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    // public UnityEngine.Events.UnityEvent WhenError
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::Events::UnityEvent* WhenError;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    // public UnityEngine.Events.UnityEvent`1<System.Boolean> WhenCanUndo
    // Size: 0x8
    // Offset: 0x80
    ::UnityEngine::Events::UnityEvent_1<bool>* WhenCanUndo;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent_1<bool>*) == 0x8);
    // public UnityEngine.Events.UnityEvent`1<System.Boolean> WhenCanRedo
    // Size: 0x8
    // Offset: 0x88
    ::UnityEngine::Events::UnityEvent_1<bool>* WhenCanRedo;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent_1<bool>*) == 0x8);
    // public UnityEngine.Events.UnityEvent WhenGrabAllowed
    // Size: 0x8
    // Offset: 0x90
    ::UnityEngine::Events::UnityEvent* WhenGrabAllowed;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    // public UnityEngine.Events.UnityEvent WhenGrabDisallowed
    // Size: 0x8
    // Offset: 0x98
    ::UnityEngine::Events::UnityEvent* WhenGrabDisallowed;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    // private System.Collections.Generic.List`1<Oculus.Interaction.HandGrab.Recorder.HandGrabPoseLiveRecorder/RecorderStep> _recorderSteps
    // Size: 0x8
    // Offset: 0xA0
    ::System::Collections::Generic::List_1<::Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder::RecorderStep>* recorderSteps;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder::RecorderStep>*) == 0x8);
    // private System.Int32 _currentStepIndex
    // Size: 0x4
    // Offset: 0xA8
    int currentStepIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean _grabbingEnabled
    // Size: 0x1
    // Offset: 0xAC
    bool grabbingEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::IActiveState
    operator ::Oculus::Interaction::IActiveState() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::IActiveState*>(this);
    }
    // Get instance field reference: private Oculus.Interaction.HandGrab.HandGrabInteractor _leftHand
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::HandGrab::HandGrabInteractor*& dyn__leftHand();
    // Get instance field reference: private Oculus.Interaction.HandGrab.HandGrabInteractor _rightHand
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::HandGrab::HandGrabInteractor*& dyn__rightHand();
    // Get instance field reference: private Oculus.Interaction.HandGrab.Visuals.HandGhostProvider _ghostProvider
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::HandGrab::Visuals::HandGhostProvider*& dyn__ghostProvider();
    // Get instance field reference: private Oculus.Interaction.HandGrab.Recorder.TimerUIControl _timerControl
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::HandGrab::Recorder::TimerUIControl*& dyn__timerControl();
    // Get instance field reference: private TMPro.TextMeshPro _delayLabel
    [[deprecated("Use field access instead!")]] ::TMPro::TextMeshPro*& dyn__delayLabel();
    // Get instance field reference: private Oculus.Interaction.HandGrab.Recorder.RigidbodyDetector _leftDetector
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::HandGrab::Recorder::RigidbodyDetector*& dyn__leftDetector();
    // Get instance field reference: private Oculus.Interaction.HandGrab.Recorder.RigidbodyDetector _rightDetector
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::HandGrab::Recorder::RigidbodyDetector*& dyn__rightDetector();
    // Get instance field reference: private UnityEngine.WaitForSeconds _waitOneSeconds
    [[deprecated("Use field access instead!")]] ::UnityEngine::WaitForSeconds*& dyn__waitOneSeconds();
    // Get instance field reference: private UnityEngine.Coroutine _delayedSnapRoutine
    [[deprecated("Use field access instead!")]] ::UnityEngine::Coroutine*& dyn__delayedSnapRoutine();
    // Get instance field reference: public UnityEngine.Events.UnityEvent WhenTimeStep
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn_WhenTimeStep();
    // Get instance field reference: public UnityEngine.Events.UnityEvent WhenSnapshot
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn_WhenSnapshot();
    // Get instance field reference: public UnityEngine.Events.UnityEvent WhenError
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn_WhenError();
    // Get instance field reference: public UnityEngine.Events.UnityEvent`1<System.Boolean> WhenCanUndo
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent_1<bool>*& dyn_WhenCanUndo();
    // Get instance field reference: public UnityEngine.Events.UnityEvent`1<System.Boolean> WhenCanRedo
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent_1<bool>*& dyn_WhenCanRedo();
    // Get instance field reference: public UnityEngine.Events.UnityEvent WhenGrabAllowed
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn_WhenGrabAllowed();
    // Get instance field reference: public UnityEngine.Events.UnityEvent WhenGrabDisallowed
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn_WhenGrabDisallowed();
    // Get instance field reference: private System.Collections.Generic.List`1<Oculus.Interaction.HandGrab.Recorder.HandGrabPoseLiveRecorder/RecorderStep> _recorderSteps
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder::RecorderStep>*& dyn__recorderSteps();
    // Get instance field reference: private System.Int32 _currentStepIndex
    [[deprecated("Use field access instead!")]] int& dyn__currentStepIndex();
    // Get instance field reference: private System.Boolean _grabbingEnabled
    [[deprecated("Use field access instead!")]] bool& dyn__grabbingEnabled();
    // private System.Int32 get_CurrentStepIndex()
    // Offset: 0x479C174
    int get_CurrentStepIndex();
    // private System.Void set_CurrentStepIndex(System.Int32 value)
    // Offset: 0x479C17C
    void set_CurrentStepIndex(int value);
    // public System.Boolean get_Active()
    // Offset: 0x479C220
    bool get_Active();
    // private System.Void Awake()
    // Offset: 0x479C228
    void Awake();
    // private System.Void Start()
    // Offset: 0x479C290
    void Start();
    // public System.Void Record()
    // Offset: 0x479C540
    void Record();
    // private System.Void ClearSnapshot()
    // Offset: 0x479C3A8
    void ClearSnapshot();
    // private System.Collections.IEnumerator DelayedSnapshot(System.Int32 seconds)
    // Offset: 0x479C5F4
    ::System::Collections::IEnumerator* DelayedSnapshot(int seconds);
    // private System.Boolean TakeSnapshot()
    // Offset: 0x479C670
    bool TakeSnapshot();
    // private UnityEngine.Rigidbody FindNearestItem(UnityEngine.Rigidbody handBody, Oculus.Interaction.HandGrab.Recorder.RigidbodyDetector detector, out System.Single bestDistance)
    // Offset: 0x479C7F4
    ::UnityEngine::Rigidbody* FindNearestItem(::UnityEngine::Rigidbody* handBody, ::Oculus::Interaction::HandGrab::Recorder::RigidbodyDetector* detector, ByRef<float> bestDistance);
    // public System.Void Undo()
    // Offset: 0x479CDDC
    void Undo();
    // public System.Void Redo()
    // Offset: 0x479CF14
    void Redo();
    // public System.Void EnableGrabbing(System.Boolean enable)
    // Offset: 0x479C518
    void EnableGrabbing(bool enable);
    // private System.Boolean Record(Oculus.Interaction.Input.IHand hand, UnityEngine.Rigidbody item)
    // Offset: 0x479CA20
    bool Record(::Oculus::Interaction::Input::IHand* hand, ::UnityEngine::Rigidbody* item);
    // private Oculus.Interaction.HandGrab.HandPose TrackedPose(Oculus.Interaction.Input.IHand hand)
    // Offset: 0x479D354
    ::Oculus::Interaction::HandGrab::HandPose* TrackedPose(::Oculus::Interaction::Input::IHand* hand);
    // private System.Void AddHandGrabPose(Oculus.Interaction.HandGrab.Recorder.HandGrabPoseLiveRecorder/RecorderStep recorderStep, out Oculus.Interaction.HandGrab.HandGrabInteractable interactable, out Oculus.Interaction.HandGrab.HandGrabPose handGrabPose)
    // Offset: 0x479D040
    void AddHandGrabPose(::Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder::RecorderStep recorderStep, ByRef<::Oculus::Interaction::HandGrab::HandGrabInteractable*> interactable, ByRef<::Oculus::Interaction::HandGrab::HandGrabPose*> handGrabPose);
    // private System.Void AttachGhost(Oculus.Interaction.HandGrab.HandGrabPose point, System.Single referenceScale)
    // Offset: 0x479D1A8
    void AttachGhost(::Oculus::Interaction::HandGrab::HandGrabPose* point, float referenceScale);
    // public System.Void .ctor()
    // Offset: 0x479D638
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HandGrabPoseLiveRecorder* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HandGrabPoseLiveRecorder*, creationType>()));
    }
  }; // Oculus.Interaction.HandGrab.Recorder.HandGrabPoseLiveRecorder
  #pragma pack(pop)
  static check_size<sizeof(HandGrabPoseLiveRecorder), 172 + sizeof(bool)> __Oculus_Interaction_HandGrab_Recorder_HandGrabPoseLiveRecorderSizeCheck;
  static_assert(sizeof(HandGrabPoseLiveRecorder) == 0xAD);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder::RecorderStep, "Oculus.Interaction.HandGrab.Recorder", "HandGrabPoseLiveRecorder/RecorderStep");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder::get_CurrentStepIndex
// Il2CppName: get_CurrentStepIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder::*)()>(&Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder::get_CurrentStepIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder*), "get_CurrentStepIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder::set_CurrentStepIndex
// Il2CppName: set_CurrentStepIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder::*)(int)>(&Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder::set_CurrentStepIndex)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder*), "set_CurrentStepIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder::get_Active
// Il2CppName: get_Active
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder::*)()>(&Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder::get_Active)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder*), "get_Active", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder::*)()>(&Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder::*)()>(&Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder::Record
// Il2CppName: Record
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder::*)()>(&Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder::Record)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder*), "Record", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder::ClearSnapshot
// Il2CppName: ClearSnapshot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder::*)()>(&Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder::ClearSnapshot)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder*), "ClearSnapshot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder::DelayedSnapshot
// Il2CppName: DelayedSnapshot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder::*)(int)>(&Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder::DelayedSnapshot)> {
  static const MethodInfo* get() {
    static auto* seconds = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder*), "DelayedSnapshot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{seconds});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder::TakeSnapshot
// Il2CppName: TakeSnapshot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder::*)()>(&Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder::TakeSnapshot)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder*), "TakeSnapshot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder::FindNearestItem
// Il2CppName: FindNearestItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rigidbody* (Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder::*)(::UnityEngine::Rigidbody*, ::Oculus::Interaction::HandGrab::Recorder::RigidbodyDetector*, ByRef<float>)>(&Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder::FindNearestItem)> {
  static const MethodInfo* get() {
    static auto* handBody = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rigidbody")->byval_arg;
    static auto* detector = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.HandGrab.Recorder", "RigidbodyDetector")->byval_arg;
    static auto* bestDistance = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder*), "FindNearestItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handBody, detector, bestDistance});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder::Undo
// Il2CppName: Undo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder::*)()>(&Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder::Undo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder*), "Undo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder::Redo
// Il2CppName: Redo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder::*)()>(&Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder::Redo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder*), "Redo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder::EnableGrabbing
// Il2CppName: EnableGrabbing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder::*)(bool)>(&Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder::EnableGrabbing)> {
  static const MethodInfo* get() {
    static auto* enable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder*), "EnableGrabbing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enable});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder::Record
// Il2CppName: Record
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder::*)(::Oculus::Interaction::Input::IHand*, ::UnityEngine::Rigidbody*)>(&Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder::Record)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHand")->byval_arg;
    static auto* item = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rigidbody")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder*), "Record", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand, item});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder::TrackedPose
// Il2CppName: TrackedPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::HandGrab::HandPose* (Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder::*)(::Oculus::Interaction::Input::IHand*)>(&Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder::TrackedPose)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder*), "TrackedPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder::AddHandGrabPose
// Il2CppName: AddHandGrabPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder::*)(::Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder::RecorderStep, ByRef<::Oculus::Interaction::HandGrab::HandGrabInteractable*>, ByRef<::Oculus::Interaction::HandGrab::HandGrabPose*>)>(&Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder::AddHandGrabPose)> {
  static const MethodInfo* get() {
    static auto* recorderStep = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.HandGrab.Recorder", "HandGrabPoseLiveRecorder/RecorderStep")->byval_arg;
    static auto* interactable = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.HandGrab", "HandGrabInteractable")->this_arg;
    static auto* handGrabPose = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.HandGrab", "HandGrabPose")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder*), "AddHandGrabPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{recorderStep, interactable, handGrabPose});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder::AttachGhost
// Il2CppName: AttachGhost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder::*)(::Oculus::Interaction::HandGrab::HandGrabPose*, float)>(&Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder::AttachGhost)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.HandGrab", "HandGrabPose")->byval_arg;
    static auto* referenceScale = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder*), "AttachGhost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point, referenceScale});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::Recorder::HandGrabPoseLiveRecorder::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
