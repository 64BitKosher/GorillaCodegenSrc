// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Object because it is already included!
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Pose
  struct Pose;
}
// Forward declaring namespace: Oculus::Interaction::Grab::GrabSurfaces
namespace Oculus::Interaction::Grab::GrabSurfaces {
  // Forward declaring type: IGrabSurface
  class IGrabSurface;
}
// Forward declaring namespace: Oculus::Interaction::HandGrab
namespace Oculus::Interaction::HandGrab {
  // Forward declaring type: HandPose
  class HandPose;
  // Forward declaring type: HandGrabResult
  class HandGrabResult;
}
// Forward declaring namespace: Oculus::Interaction::Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: Handedness
  struct Handedness;
}
// Forward declaring namespace: Oculus::Interaction::Grab
namespace Oculus::Interaction::Grab {
  // Forward declaring type: PoseMeasureParameters
  struct PoseMeasureParameters;
  // Forward declaring type: GrabPoseScore
  struct GrabPoseScore;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.HandGrab
namespace Oculus::Interaction::HandGrab {
  // Forward declaring type: HandGrabPose
  class HandGrabPose;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::HandGrab::HandGrabPose);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::HandGrab::HandGrabPose*, "Oculus.Interaction.HandGrab", "HandGrabPose");
// Type namespace: Oculus.Interaction.HandGrab
namespace Oculus::Interaction::HandGrab {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.HandGrab.HandGrabPose
  // [TokenAttribute] Offset: FFFFFFFF
  class HandGrabPose : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.Object _surface
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Object* surface;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.Grab.GrabSurfaces.IGrabSurface _snapSurface
    // Size: 0x8
    // Offset: 0x28
    ::Oculus::Interaction::Grab::GrabSurfaces::IGrabSurface* snapSurface;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Grab::GrabSurfaces::IGrabSurface*) == 0x8);
    // private UnityEngine.Transform _relativeTo
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Transform* relativeTo;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private System.Boolean _usesHandPose
    // Size: 0x1
    // Offset: 0x38
    bool usesHandPose;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: usesHandPose and: handPose
    char __padding3[0x7] = {};
    // private Oculus.Interaction.HandGrab.HandPose _handPose
    // Size: 0x8
    // Offset: 0x40
    ::Oculus::Interaction::HandGrab::HandPose* handPose;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::HandGrab::HandPose*) == 0x8);
    public:
    // Get instance field reference: private UnityEngine.Object _surface
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__surface();
    // Get instance field reference: private Oculus.Interaction.Grab.GrabSurfaces.IGrabSurface _snapSurface
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Grab::GrabSurfaces::IGrabSurface*& dyn__snapSurface();
    // Get instance field reference: private UnityEngine.Transform _relativeTo
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__relativeTo();
    // Get instance field reference: private System.Boolean _usesHandPose
    [[deprecated("Use field access instead!")]] bool& dyn__usesHandPose();
    // Get instance field reference: private Oculus.Interaction.HandGrab.HandPose _handPose
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::HandGrab::HandPose*& dyn__handPose();
    // public Oculus.Interaction.Grab.GrabSurfaces.IGrabSurface get_SnapSurface()
    // Offset: 0x48291B0
    ::Oculus::Interaction::Grab::GrabSurfaces::IGrabSurface* get_SnapSurface();
    // private System.Void set_SnapSurface(Oculus.Interaction.Grab.GrabSurfaces.IGrabSurface value)
    // Offset: 0x482920C
    void set_SnapSurface(::Oculus::Interaction::Grab::GrabSurfaces::IGrabSurface* value);
    // public Oculus.Interaction.HandGrab.HandPose get_HandPose()
    // Offset: 0x4829214
    ::Oculus::Interaction::HandGrab::HandPose* get_HandPose();
    // public System.Single get_RelativeScale()
    // Offset: 0x482922C
    float get_RelativeScale();
    // public UnityEngine.Pose get_RelativePose()
    // Offset: 0x4829274
    ::UnityEngine::Pose get_RelativePose();
    // public UnityEngine.Transform get_RelativeTo()
    // Offset: 0x4829344
    ::UnityEngine::Transform* get_RelativeTo();
    // protected System.Void Reset()
    // Offset: 0x482934C
    void Reset();
    // public System.Boolean UsesHandPose()
    // Offset: 0x4829434
    bool UsesHandPose();
    // public System.Boolean CalculateBestPose(UnityEngine.Pose userPose, Oculus.Interaction.Input.Handedness handedness, Oculus.Interaction.Grab.PoseMeasureParameters scoringModifier, UnityEngine.Transform relativeTo, ref Oculus.Interaction.HandGrab.HandGrabResult result)
    // Offset: 0x482943C
    bool CalculateBestPose(::UnityEngine::Pose userPose, ::Oculus::Interaction::Input::Handedness handedness, ::Oculus::Interaction::Grab::PoseMeasureParameters scoringModifier, ::UnityEngine::Transform* relativeTo, ByRef<::Oculus::Interaction::HandGrab::HandGrabResult*> result);
    // private Oculus.Interaction.Grab.GrabPoseScore CompareNearPoses(in UnityEngine.Pose worldPoint, Oculus.Interaction.Grab.PoseMeasureParameters scoringModifier, UnityEngine.Transform relativeTo, out UnityEngine.Pose bestWorldPose)
    // Offset: 0x4829534
    ::Oculus::Interaction::Grab::GrabPoseScore CompareNearPoses(ByRef<::UnityEngine::Pose> worldPoint, ::Oculus::Interaction::Grab::PoseMeasureParameters scoringModifier, ::UnityEngine::Transform* relativeTo, ByRef<::UnityEngine::Pose> bestWorldPose);
    // public System.Void InjectAllHandGrabPose(UnityEngine.Transform relativeTo)
    // Offset: 0x4829814
    void InjectAllHandGrabPose(::UnityEngine::Transform* relativeTo);
    // public System.Void InjectRelativeTo(UnityEngine.Transform relativeTo)
    // Offset: 0x482981C
    void InjectRelativeTo(::UnityEngine::Transform* relativeTo);
    // public System.Void InjectOptionalSurface(Oculus.Interaction.Grab.GrabSurfaces.IGrabSurface surface)
    // Offset: 0x4829824
    void InjectOptionalSurface(::Oculus::Interaction::Grab::GrabSurfaces::IGrabSurface* surface);
    // public System.Void InjectOptionalHandPose(Oculus.Interaction.HandGrab.HandPose handPose)
    // Offset: 0x48298F4
    void InjectOptionalHandPose(::Oculus::Interaction::HandGrab::HandPose* handPose);
    // public System.Void .ctor()
    // Offset: 0x4829920
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HandGrabPose* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::HandGrab::HandGrabPose::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HandGrabPose*, creationType>()));
    }
  }; // Oculus.Interaction.HandGrab.HandGrabPose
  #pragma pack(pop)
  static check_size<sizeof(HandGrabPose), 64 + sizeof(::Oculus::Interaction::HandGrab::HandPose*)> __Oculus_Interaction_HandGrab_HandGrabPoseSizeCheck;
  static_assert(sizeof(HandGrabPose) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandGrabPose::get_SnapSurface
// Il2CppName: get_SnapSurface
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Grab::GrabSurfaces::IGrabSurface* (Oculus::Interaction::HandGrab::HandGrabPose::*)()>(&Oculus::Interaction::HandGrab::HandGrabPose::get_SnapSurface)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::HandGrabPose*), "get_SnapSurface", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandGrabPose::set_SnapSurface
// Il2CppName: set_SnapSurface
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrab::HandGrabPose::*)(::Oculus::Interaction::Grab::GrabSurfaces::IGrabSurface*)>(&Oculus::Interaction::HandGrab::HandGrabPose::set_SnapSurface)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Grab.GrabSurfaces", "IGrabSurface")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::HandGrabPose*), "set_SnapSurface", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandGrabPose::get_HandPose
// Il2CppName: get_HandPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::HandGrab::HandPose* (Oculus::Interaction::HandGrab::HandGrabPose::*)()>(&Oculus::Interaction::HandGrab::HandGrabPose::get_HandPose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::HandGrabPose*), "get_HandPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandGrabPose::get_RelativeScale
// Il2CppName: get_RelativeScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::HandGrab::HandGrabPose::*)()>(&Oculus::Interaction::HandGrab::HandGrabPose::get_RelativeScale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::HandGrabPose*), "get_RelativeScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandGrabPose::get_RelativePose
// Il2CppName: get_RelativePose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Pose (Oculus::Interaction::HandGrab::HandGrabPose::*)()>(&Oculus::Interaction::HandGrab::HandGrabPose::get_RelativePose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::HandGrabPose*), "get_RelativePose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandGrabPose::get_RelativeTo
// Il2CppName: get_RelativeTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (Oculus::Interaction::HandGrab::HandGrabPose::*)()>(&Oculus::Interaction::HandGrab::HandGrabPose::get_RelativeTo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::HandGrabPose*), "get_RelativeTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandGrabPose::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrab::HandGrabPose::*)()>(&Oculus::Interaction::HandGrab::HandGrabPose::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::HandGrabPose*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandGrabPose::UsesHandPose
// Il2CppName: UsesHandPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::HandGrab::HandGrabPose::*)()>(&Oculus::Interaction::HandGrab::HandGrabPose::UsesHandPose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::HandGrabPose*), "UsesHandPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandGrabPose::CalculateBestPose
// Il2CppName: CalculateBestPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::HandGrab::HandGrabPose::*)(::UnityEngine::Pose, ::Oculus::Interaction::Input::Handedness, ::Oculus::Interaction::Grab::PoseMeasureParameters, ::UnityEngine::Transform*, ByRef<::Oculus::Interaction::HandGrab::HandGrabResult*>)>(&Oculus::Interaction::HandGrab::HandGrabPose::CalculateBestPose)> {
  static const MethodInfo* get() {
    static auto* userPose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->byval_arg;
    static auto* handedness = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "Handedness")->byval_arg;
    static auto* scoringModifier = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Grab", "PoseMeasureParameters")->byval_arg;
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.HandGrab", "HandGrabResult")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::HandGrabPose*), "CalculateBestPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userPose, handedness, scoringModifier, relativeTo, result});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandGrabPose::CompareNearPoses
// Il2CppName: CompareNearPoses
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Grab::GrabPoseScore (Oculus::Interaction::HandGrab::HandGrabPose::*)(ByRef<::UnityEngine::Pose>, ::Oculus::Interaction::Grab::PoseMeasureParameters, ::UnityEngine::Transform*, ByRef<::UnityEngine::Pose>)>(&Oculus::Interaction::HandGrab::HandGrabPose::CompareNearPoses)> {
  static const MethodInfo* get() {
    static auto* worldPoint = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    static auto* scoringModifier = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Grab", "PoseMeasureParameters")->byval_arg;
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* bestWorldPose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::HandGrabPose*), "CompareNearPoses", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{worldPoint, scoringModifier, relativeTo, bestWorldPose});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandGrabPose::InjectAllHandGrabPose
// Il2CppName: InjectAllHandGrabPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrab::HandGrabPose::*)(::UnityEngine::Transform*)>(&Oculus::Interaction::HandGrab::HandGrabPose::InjectAllHandGrabPose)> {
  static const MethodInfo* get() {
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::HandGrabPose*), "InjectAllHandGrabPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{relativeTo});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandGrabPose::InjectRelativeTo
// Il2CppName: InjectRelativeTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrab::HandGrabPose::*)(::UnityEngine::Transform*)>(&Oculus::Interaction::HandGrab::HandGrabPose::InjectRelativeTo)> {
  static const MethodInfo* get() {
    static auto* relativeTo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::HandGrabPose*), "InjectRelativeTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{relativeTo});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandGrabPose::InjectOptionalSurface
// Il2CppName: InjectOptionalSurface
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrab::HandGrabPose::*)(::Oculus::Interaction::Grab::GrabSurfaces::IGrabSurface*)>(&Oculus::Interaction::HandGrab::HandGrabPose::InjectOptionalSurface)> {
  static const MethodInfo* get() {
    static auto* surface = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Grab.GrabSurfaces", "IGrabSurface")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::HandGrabPose*), "InjectOptionalSurface", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{surface});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandGrabPose::InjectOptionalHandPose
// Il2CppName: InjectOptionalHandPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrab::HandGrabPose::*)(::Oculus::Interaction::HandGrab::HandPose*)>(&Oculus::Interaction::HandGrab::HandGrabPose::InjectOptionalHandPose)> {
  static const MethodInfo* get() {
    static auto* handPose = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.HandGrab", "HandPose")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::HandGrabPose*), "InjectOptionalHandPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handPose});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandGrabPose::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
