// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Pose
#include "UnityEngine/Pose.hpp"
// Including type: Oculus.Interaction.Grab.GrabPoseScore
#include "Oculus/Interaction/Grab/GrabPoseScore.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction::HandGrab
namespace Oculus::Interaction::HandGrab {
  // Forward declaring type: HandPose
  class HandPose;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.HandGrab
namespace Oculus::Interaction::HandGrab {
  // Forward declaring type: HandGrabResult
  class HandGrabResult;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::HandGrab::HandGrabResult);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::HandGrab::HandGrabResult*, "Oculus.Interaction.HandGrab", "HandGrabResult");
// Type namespace: Oculus.Interaction.HandGrab
namespace Oculus::Interaction::HandGrab {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.HandGrab.HandGrabResult
  // [TokenAttribute] Offset: FFFFFFFF
  class HandGrabResult : public ::Il2CppObject {
    public:
    public:
    // public System.Boolean HasHandPose
    // Size: 0x1
    // Offset: 0x10
    bool HasHandPose;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: HasHandPose and: HandPose
    char __padding0[0x7] = {};
    // public Oculus.Interaction.HandGrab.HandPose HandPose
    // Size: 0x8
    // Offset: 0x18
    ::Oculus::Interaction::HandGrab::HandPose* HandPose;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::HandGrab::HandPose*) == 0x8);
    // public UnityEngine.Pose RelativePose
    // Size: 0x1C
    // Offset: 0x20
    ::UnityEngine::Pose RelativePose;
    // Field size check
    static_assert(sizeof(::UnityEngine::Pose) == 0x1C);
    // public Oculus.Interaction.Grab.GrabPoseScore Score
    // Size: 0xC
    // Offset: 0x3C
    ::Oculus::Interaction::Grab::GrabPoseScore Score;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Grab::GrabPoseScore) == 0xC);
    public:
    // Get instance field reference: public System.Boolean HasHandPose
    [[deprecated("Use field access instead!")]] bool& dyn_HasHandPose();
    // Get instance field reference: public Oculus.Interaction.HandGrab.HandPose HandPose
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::HandGrab::HandPose*& dyn_HandPose();
    // Get instance field reference: public UnityEngine.Pose RelativePose
    [[deprecated("Use field access instead!")]] ::UnityEngine::Pose& dyn_RelativePose();
    // Get instance field reference: public Oculus.Interaction.Grab.GrabPoseScore Score
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Grab::GrabPoseScore& dyn_Score();
    // public System.Void .ctor()
    // Offset: 0x4828EF0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HandGrabResult* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::HandGrab::HandGrabResult::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HandGrabResult*, creationType>()));
    }
    // public System.Void CopyFrom(Oculus.Interaction.HandGrab.HandGrabResult other)
    // Offset: 0x4829A44
    void CopyFrom(::Oculus::Interaction::HandGrab::HandGrabResult* other);
  }; // Oculus.Interaction.HandGrab.HandGrabResult
  #pragma pack(pop)
  static check_size<sizeof(HandGrabResult), 60 + sizeof(::Oculus::Interaction::Grab::GrabPoseScore)> __Oculus_Interaction_HandGrab_HandGrabResultSizeCheck;
  static_assert(sizeof(HandGrabResult) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandGrabResult::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::HandGrabResult::CopyFrom
// Il2CppName: CopyFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrab::HandGrabResult::*)(::Oculus::Interaction::HandGrab::HandGrabResult*)>(&Oculus::Interaction::HandGrab::HandGrabResult::CopyFrom)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.HandGrab", "HandGrabResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::HandGrabResult*), "CopyFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
