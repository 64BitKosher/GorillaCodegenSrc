// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.Single
#include "System/Single.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
  // Forward declaring type: Pose
  struct Pose;
}
// Forward declaring namespace: Oculus::Interaction
namespace Oculus::Interaction {
  // Forward declaring type: Tween
  class Tween;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.HandGrab
namespace Oculus::Interaction::HandGrab {
  // Forward declaring type: PoseTravelData
  struct PoseTravelData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::HandGrab::PoseTravelData, "Oculus.Interaction.HandGrab", "PoseTravelData");
// Type namespace: Oculus.Interaction.HandGrab
namespace Oculus::Interaction::HandGrab {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Oculus.Interaction.HandGrab.PoseTravelData
  // [TokenAttribute] Offset: FFFFFFFF
  struct PoseTravelData/*, public ::System::ValueType*/ {
    public:
    public:
    // private System.Single _travelSpeed
    // Size: 0x4
    // Offset: 0x0
    float travelSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _useFixedTravelTime
    // Size: 0x1
    // Offset: 0x4
    bool useFixedTravelTime;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: useFixedTravelTime and: travelCurve
    char __padding1[0x3] = {};
    // private UnityEngine.AnimationCurve _travelCurve
    // Size: 0x8
    // Offset: 0x8
    ::UnityEngine::AnimationCurve* travelCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    public:
    // Creating value type constructor for type: PoseTravelData
    constexpr PoseTravelData(float travelSpeed_ = {}, bool useFixedTravelTime_ = {}, ::UnityEngine::AnimationCurve* travelCurve_ = {}) noexcept : travelSpeed{travelSpeed_}, useFixedTravelTime{useFixedTravelTime_}, travelCurve{travelCurve_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // static field const value: static private System.Single DEGREES_TO_PERCEIVED_METERS
    static constexpr const float DEGREES_TO_PERCEIVED_METERS = 0.0013888889;
    // Get static field: static private System.Single DEGREES_TO_PERCEIVED_METERS
    static float _get_DEGREES_TO_PERCEIVED_METERS();
    // Set static field: static private System.Single DEGREES_TO_PERCEIVED_METERS
    static void _set_DEGREES_TO_PERCEIVED_METERS(float value);
    // Get instance field reference: private System.Single _travelSpeed
    [[deprecated("Use field access instead!")]] float& dyn__travelSpeed();
    // Get instance field reference: private System.Boolean _useFixedTravelTime
    [[deprecated("Use field access instead!")]] bool& dyn__useFixedTravelTime();
    // Get instance field reference: private UnityEngine.AnimationCurve _travelCurve
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn__travelCurve();
    // static public Oculus.Interaction.HandGrab.PoseTravelData get_DEFAULT()
    // Offset: 0x482B1CC
    static ::Oculus::Interaction::HandGrab::PoseTravelData get_DEFAULT();
    // static public Oculus.Interaction.HandGrab.PoseTravelData get_FAST()
    // Offset: 0x482B220
    static ::Oculus::Interaction::HandGrab::PoseTravelData get_FAST();
    // public Oculus.Interaction.Tween CreateTween(in UnityEngine.Pose from, in UnityEngine.Pose to)
    // Offset: 0x482B27C
    ::Oculus::Interaction::Tween* CreateTween(ByRef<::UnityEngine::Pose> from, ByRef<::UnityEngine::Pose> to);
    // static private System.Single PerceivedDistance(in UnityEngine.Pose from, in UnityEngine.Pose to)
    // Offset: 0x482B37C
    static float PerceivedDistance(ByRef<::UnityEngine::Pose> from, ByRef<::UnityEngine::Pose> to);
  }; // Oculus.Interaction.HandGrab.PoseTravelData
  #pragma pack(pop)
  static check_size<sizeof(PoseTravelData), 8 + sizeof(::UnityEngine::AnimationCurve*)> __Oculus_Interaction_HandGrab_PoseTravelDataSizeCheck;
  static_assert(sizeof(PoseTravelData) == 0x10);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::PoseTravelData::get_DEFAULT
// Il2CppName: get_DEFAULT
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::HandGrab::PoseTravelData (*)()>(&Oculus::Interaction::HandGrab::PoseTravelData::get_DEFAULT)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::PoseTravelData), "get_DEFAULT", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::PoseTravelData::get_FAST
// Il2CppName: get_FAST
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::HandGrab::PoseTravelData (*)()>(&Oculus::Interaction::HandGrab::PoseTravelData::get_FAST)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::PoseTravelData), "get_FAST", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::PoseTravelData::CreateTween
// Il2CppName: CreateTween
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Tween* (Oculus::Interaction::HandGrab::PoseTravelData::*)(ByRef<::UnityEngine::Pose>, ByRef<::UnityEngine::Pose>)>(&Oculus::Interaction::HandGrab::PoseTravelData::CreateTween)> {
  static const MethodInfo* get() {
    static auto* from = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::PoseTravelData), "CreateTween", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{from, to});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::PoseTravelData::PerceivedDistance
// Il2CppName: PerceivedDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(ByRef<::UnityEngine::Pose>, ByRef<::UnityEngine::Pose>)>(&Oculus::Interaction::HandGrab::PoseTravelData::PerceivedDistance)> {
  static const MethodInfo* get() {
    static auto* from = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::PoseTravelData), "PerceivedDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{from, to});
  }
};
