// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Oculus.Interaction.IMovementProvider
#include "Oculus/Interaction/IMovementProvider.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: Oculus::Interaction
namespace Oculus::Interaction {
  // Forward declaring type: IMovement
  class IMovement;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.HandGrab
namespace Oculus::Interaction::HandGrab {
  // Forward declaring type: FollowTargetProvider
  class FollowTargetProvider;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::HandGrab::FollowTargetProvider);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::HandGrab::FollowTargetProvider*, "Oculus.Interaction.HandGrab", "FollowTargetProvider");
// Type namespace: Oculus.Interaction.HandGrab
namespace Oculus::Interaction::HandGrab {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.HandGrab.FollowTargetProvider
  // [TokenAttribute] Offset: FFFFFFFF
  class FollowTargetProvider : public ::UnityEngine::MonoBehaviour/*, public ::Oculus::Interaction::IMovementProvider*/ {
    public:
    public:
    // private System.Single _speed
    // Size: 0x4
    // Offset: 0x20
    float speed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: speed and: space
    char __padding0[0x4] = {};
    // private UnityEngine.Transform _space
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Transform* space;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::IMovementProvider
    operator ::Oculus::Interaction::IMovementProvider() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::IMovementProvider*>(this);
    }
    // Get instance field reference: private System.Single _speed
    [[deprecated("Use field access instead!")]] float& dyn__speed();
    // Get instance field reference: private UnityEngine.Transform _space
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__space();
    // private System.Void Awake()
    // Offset: 0x482E2D0
    void Awake();
    // public Oculus.Interaction.IMovement CreateMovement()
    // Offset: 0x482E2F4
    ::Oculus::Interaction::IMovement* CreateMovement();
    // public System.Void .ctor()
    // Offset: 0x482E3B0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FollowTargetProvider* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::HandGrab::FollowTargetProvider::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FollowTargetProvider*, creationType>()));
    }
  }; // Oculus.Interaction.HandGrab.FollowTargetProvider
  #pragma pack(pop)
  static check_size<sizeof(FollowTargetProvider), 40 + sizeof(::UnityEngine::Transform*)> __Oculus_Interaction_HandGrab_FollowTargetProviderSizeCheck;
  static_assert(sizeof(FollowTargetProvider) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::FollowTargetProvider::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandGrab::FollowTargetProvider::*)()>(&Oculus::Interaction::HandGrab::FollowTargetProvider::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::FollowTargetProvider*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::FollowTargetProvider::CreateMovement
// Il2CppName: CreateMovement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::IMovement* (Oculus::Interaction::HandGrab::FollowTargetProvider::*)()>(&Oculus::Interaction::HandGrab::FollowTargetProvider::CreateMovement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandGrab::FollowTargetProvider*), "CreateMovement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandGrab::FollowTargetProvider::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
