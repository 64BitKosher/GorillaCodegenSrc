// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Oculus.Interaction.PointerInteractor`2
#include "Oculus/Interaction/PointerInteractor_2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction
namespace Oculus::Interaction {
  // Forward declaring type: TouchHandGrabInteractable
  class TouchHandGrabInteractable;
  // Forward declaring type: IHandSphereMap
  class IHandSphereMap;
  // Forward declaring type: IActiveState
  class IActiveState;
  // Forward declaring type: TouchShadowHand
  class TouchShadowHand;
  // Forward declaring type: ColliderGroup
  class ColliderGroup;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Object because it is already included!
  // Forward declaring type: Transform
  class Transform;
  // Skipping declaration: Quaternion because it is already included!
}
// Forward declaring namespace: Oculus::Interaction::Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: IHand
  class IHand;
  // Forward declaring type: ShadowHand
  class ShadowHand;
  // Forward declaring type: HandFinger
  struct HandFinger;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Func`1<TResult>
  template<typename TResult>
  class Func_1;
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: TouchHandGrabInteractor
  class TouchHandGrabInteractor;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::TouchHandGrabInteractor);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::TouchHandGrabInteractor*, "Oculus.Interaction", "TouchHandGrabInteractor");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // WARNING Size may be invalid!
  // Autogenerated type: Oculus.Interaction.TouchHandGrabInteractor
  // [TokenAttribute] Offset: FFFFFFFF
  class TouchHandGrabInteractor : public ::Oculus::Interaction::PointerInteractor_2<::Oculus::Interaction::TouchHandGrabInteractor*, ::Oculus::Interaction::TouchHandGrabInteractable*> {
    public:
    // Nested type: ::Oculus::Interaction::TouchHandGrabInteractor::FingerStatus
    class FingerStatus;
    // Nested type: ::Oculus::Interaction::TouchHandGrabInteractor::$$c
    class $$c;
    public:
    // private UnityEngine.Object _hand
    // Size: 0x8
    // Offset: 0x118
    ::UnityEngine::Object* hand;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.Input.IHand <Hand>k__BackingField
    // Size: 0x8
    // Offset: 0x120
    ::Oculus::Interaction::Input::IHand* Hand;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::IHand*) == 0x8);
    // private UnityEngine.Object _openHand
    // Size: 0x8
    // Offset: 0x128
    ::UnityEngine::Object* openHand;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.Input.IHand <OpenHand>k__BackingField
    // Size: 0x8
    // Offset: 0x130
    ::Oculus::Interaction::Input::IHand* OpenHand;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::IHand*) == 0x8);
    // private UnityEngine.Object _handSphereMap
    // Size: 0x8
    // Offset: 0x138
    ::UnityEngine::Object* handSphereMap;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // protected Oculus.Interaction.IHandSphereMap HandSphereMap
    // Size: 0x8
    // Offset: 0x140
    ::Oculus::Interaction::IHandSphereMap* HandSphereMap;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::IHandSphereMap*) == 0x8);
    // private UnityEngine.Transform _hoverLocation
    // Size: 0x8
    // Offset: 0x148
    ::UnityEngine::Transform* hoverLocation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform _grabLocation
    // Size: 0x8
    // Offset: 0x150
    ::UnityEngine::Transform* grabLocation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private System.Single _minHoverDistance
    // Size: 0x4
    // Offset: 0x158
    float minHoverDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _curlDeltaThreshold
    // Size: 0x4
    // Offset: 0x15C
    float curlDeltaThreshold;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _curlTimeThreshold
    // Size: 0x4
    // Offset: 0x160
    float curlTimeThreshold;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 _iterations
    // Size: 0x4
    // Offset: 0x164
    int iterations;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Object _grabPrerequisite
    // Size: 0x8
    // Offset: 0x168
    ::UnityEngine::Object* grabPrerequisite;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private System.Action WhenFingerLocked
    // Size: 0x8
    // Offset: 0x170
    ::System::Action* WhenFingerLocked;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private UnityEngine.Vector3 _saveOffset
    // Size: 0xC
    // Offset: 0x178
    ::UnityEngine::Vector3 saveOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 GrabOffset
    // Size: 0xC
    // Offset: 0x184
    ::UnityEngine::Vector3 GrabOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // protected Oculus.Interaction.IActiveState GrabPrerequisite
    // Size: 0x8
    // Offset: 0x190
    ::Oculus::Interaction::IActiveState* GrabPrerequisite;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::IActiveState*) == 0x8);
    // private Oculus.Interaction.TouchHandGrabInteractor/FingerStatus[] _fingerStatuses
    // Size: 0x8
    // Offset: 0x198
    ::ArrayW<::Oculus::Interaction::TouchHandGrabInteractor::FingerStatus*> fingerStatuses;
    // Field size check
    static_assert(sizeof(::ArrayW<::Oculus::Interaction::TouchHandGrabInteractor::FingerStatus*>) == 0x8);
    // private Oculus.Interaction.TouchShadowHand _touchShadowHand
    // Size: 0x8
    // Offset: 0x1A0
    ::Oculus::Interaction::TouchShadowHand* touchShadowHand;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::TouchShadowHand*) == 0x8);
    // private Oculus.Interaction.Input.ShadowHand _fromShadow
    // Size: 0x8
    // Offset: 0x1A8
    ::Oculus::Interaction::Input::ShadowHand* fromShadow;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::ShadowHand*) == 0x8);
    // private Oculus.Interaction.Input.ShadowHand _toShadow
    // Size: 0x8
    // Offset: 0x1B0
    ::Oculus::Interaction::Input::ShadowHand* toShadow;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::ShadowHand*) == 0x8);
    // private Oculus.Interaction.Input.ShadowHand _openShadow
    // Size: 0x8
    // Offset: 0x1B8
    ::Oculus::Interaction::Input::ShadowHand* openShadow;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::ShadowHand*) == 0x8);
    // private System.Func`1<System.Single> _timeProvider
    // Size: 0x8
    // Offset: 0x1C0
    ::System::Func_1<float>* timeProvider;
    // Field size check
    static_assert(sizeof(::System::Func_1<float>*) == 0x8);
    // private System.Boolean _firstSelect
    // Size: 0x1
    // Offset: 0x1C8
    bool firstSelect;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Single _previousTime
    // Size: 0x4
    // Offset: 0x1CC
    float previousTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _deltaTime
    // Size: 0x4
    // Offset: 0x1D0
    float deltaTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: private UnityEngine.Object _hand
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__hand();
    // Get instance field reference: private Oculus.Interaction.Input.IHand <Hand>k__BackingField
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::IHand*& dyn_$Hand$k__BackingField();
    // Get instance field reference: private UnityEngine.Object _openHand
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__openHand();
    // Get instance field reference: private Oculus.Interaction.Input.IHand <OpenHand>k__BackingField
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::IHand*& dyn_$OpenHand$k__BackingField();
    // Get instance field reference: private UnityEngine.Object _handSphereMap
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__handSphereMap();
    // Get instance field reference: protected Oculus.Interaction.IHandSphereMap HandSphereMap
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::IHandSphereMap*& dyn_HandSphereMap();
    // Get instance field reference: private UnityEngine.Transform _hoverLocation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__hoverLocation();
    // Get instance field reference: private UnityEngine.Transform _grabLocation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__grabLocation();
    // Get instance field reference: private System.Single _minHoverDistance
    [[deprecated("Use field access instead!")]] float& dyn__minHoverDistance();
    // Get instance field reference: private System.Single _curlDeltaThreshold
    [[deprecated("Use field access instead!")]] float& dyn__curlDeltaThreshold();
    // Get instance field reference: private System.Single _curlTimeThreshold
    [[deprecated("Use field access instead!")]] float& dyn__curlTimeThreshold();
    // Get instance field reference: private System.Int32 _iterations
    [[deprecated("Use field access instead!")]] int& dyn__iterations();
    // Get instance field reference: private UnityEngine.Object _grabPrerequisite
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__grabPrerequisite();
    // Get instance field reference: private System.Action WhenFingerLocked
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_WhenFingerLocked();
    // Get instance field reference: private UnityEngine.Vector3 _saveOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__saveOffset();
    // Get instance field reference: private UnityEngine.Vector3 GrabOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_GrabOffset();
    // Get instance field reference: protected Oculus.Interaction.IActiveState GrabPrerequisite
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::IActiveState*& dyn_GrabPrerequisite();
    // Get instance field reference: private Oculus.Interaction.TouchHandGrabInteractor/FingerStatus[] _fingerStatuses
    [[deprecated("Use field access instead!")]] ::ArrayW<::Oculus::Interaction::TouchHandGrabInteractor::FingerStatus*>& dyn__fingerStatuses();
    // Get instance field reference: private Oculus.Interaction.TouchShadowHand _touchShadowHand
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::TouchShadowHand*& dyn__touchShadowHand();
    // Get instance field reference: private Oculus.Interaction.Input.ShadowHand _fromShadow
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::ShadowHand*& dyn__fromShadow();
    // Get instance field reference: private Oculus.Interaction.Input.ShadowHand _toShadow
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::ShadowHand*& dyn__toShadow();
    // Get instance field reference: private Oculus.Interaction.Input.ShadowHand _openShadow
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::ShadowHand*& dyn__openShadow();
    // Get instance field reference: private System.Func`1<System.Single> _timeProvider
    [[deprecated("Use field access instead!")]] ::System::Func_1<float>*& dyn__timeProvider();
    // Get instance field reference: private System.Boolean _firstSelect
    [[deprecated("Use field access instead!")]] bool& dyn__firstSelect();
    // Get instance field reference: private System.Single _previousTime
    [[deprecated("Use field access instead!")]] float& dyn__previousTime();
    // Get instance field reference: private System.Single _deltaTime
    [[deprecated("Use field access instead!")]] float& dyn__deltaTime();
    // private Oculus.Interaction.Input.IHand get_Hand()
    // Offset: 0x47BD2B4
    ::Oculus::Interaction::Input::IHand* get_Hand();
    // private System.Void set_Hand(Oculus.Interaction.Input.IHand value)
    // Offset: 0x47BD2BC
    void set_Hand(::Oculus::Interaction::Input::IHand* value);
    // private Oculus.Interaction.Input.IHand get_OpenHand()
    // Offset: 0x47BD2CC
    ::Oculus::Interaction::Input::IHand* get_OpenHand();
    // private System.Void set_OpenHand(Oculus.Interaction.Input.IHand value)
    // Offset: 0x47BD2D4
    void set_OpenHand(::Oculus::Interaction::Input::IHand* value);
    // public System.Void add_WhenFingerLocked(System.Action value)
    // Offset: 0x47BD2E4
    void add_WhenFingerLocked(::System::Action* value);
    // public System.Void remove_WhenFingerLocked(System.Action value)
    // Offset: 0x47BD384
    void remove_WhenFingerLocked(::System::Action* value);
    // private UnityEngine.Vector3 get_GrabPosition()
    // Offset: 0x47BD424
    ::UnityEngine::Vector3 get_GrabPosition();
    // private UnityEngine.Quaternion get_GrabRotation()
    // Offset: 0x47BD440
    ::UnityEngine::Quaternion get_GrabRotation();
    // public System.Boolean IsFingerLocked(Oculus.Interaction.Input.HandFinger finger)
    // Offset: 0x47BDBA8
    bool IsFingerLocked(::Oculus::Interaction::Input::HandFinger finger);
    // public UnityEngine.Pose[] GetFingerJoints(Oculus.Interaction.Input.HandFinger finger)
    // Offset: 0x47BDC68
    ::ArrayW<::UnityEngine::Pose> GetFingerJoints(::Oculus::Interaction::Input::HandFinger finger);
    // private System.Boolean MeetsGrabPrerequisite()
    // Offset: 0x47BEA5C
    bool MeetsGrabPrerequisite();
    // private System.Boolean HandStatusSelecting()
    // Offset: 0x47BDF70
    bool HandStatusSelecting();
    // private System.Void ComputeNewTouching(System.Int32 idx, Oculus.Interaction.ColliderGroup colliderGroup, UnityEngine.Vector3 offset)
    // Offset: 0x47BE668
    void ComputeNewTouching(int idx, ::Oculus::Interaction::ColliderGroup* colliderGroup, ::UnityEngine::Vector3 offset);
    // private System.Void ComputeNewRelease(System.Int32 idx, Oculus.Interaction.ColliderGroup colliderGroup, UnityEngine.Vector3 offset)
    // Offset: 0x47BF0DC
    void ComputeNewRelease(int idx, ::Oculus::Interaction::ColliderGroup* colliderGroup, ::UnityEngine::Vector3 offset);
    // private System.Void ClearFingerLockStatuses()
    // Offset: 0x47BEA0C
    void ClearFingerLockStatuses();
    // protected Oculus.Interaction.TouchHandGrabInteractable ComputeCandidate()
    // Offset: 0x47BF988
    ::Oculus::Interaction::TouchHandGrabInteractable* ComputeCandidate();
    // public System.Void InjectAllTouchHandGrabInteractor(Oculus.Interaction.Input.IHand hand, Oculus.Interaction.Input.IHand openHand, Oculus.Interaction.IHandSphereMap handSphereMap, UnityEngine.Transform hoverLocation, UnityEngine.Transform grabLocation)
    // Offset: 0x47BFE5C
    void InjectAllTouchHandGrabInteractor(::Oculus::Interaction::Input::IHand* hand, ::Oculus::Interaction::Input::IHand* openHand, ::Oculus::Interaction::IHandSphereMap* handSphereMap, ::UnityEngine::Transform* hoverLocation, ::UnityEngine::Transform* grabLocation);
    // public System.Void InjectHand(Oculus.Interaction.Input.IHand hand)
    // Offset: 0x47BFEC4
    void InjectHand(::Oculus::Interaction::Input::IHand* hand);
    // public System.Void InjectOpenHand(Oculus.Interaction.Input.IHand openHand)
    // Offset: 0x47BFF94
    void InjectOpenHand(::Oculus::Interaction::Input::IHand* openHand);
    // public System.Void InjectHandSphereMap(Oculus.Interaction.IHandSphereMap handSphereMap)
    // Offset: 0x47C0064
    void InjectHandSphereMap(::Oculus::Interaction::IHandSphereMap* handSphereMap);
    // public System.Void InjectHoverLocation(UnityEngine.Transform hoverLocation)
    // Offset: 0x47C0134
    void InjectHoverLocation(::UnityEngine::Transform* hoverLocation);
    // public System.Void InjectGrabLocation(UnityEngine.Transform grabLocation)
    // Offset: 0x47C0144
    void InjectGrabLocation(::UnityEngine::Transform* grabLocation);
    // public System.Void InjectOptionalGrabPrerequisite(Oculus.Interaction.IActiveState grabPrerequisite)
    // Offset: 0x47C0154
    void InjectOptionalGrabPrerequisite(::Oculus::Interaction::IActiveState* grabPrerequisite);
    // public System.Void InjectOptionalMinHoverDistance(System.Single minHoverDistance)
    // Offset: 0x47C0224
    void InjectOptionalMinHoverDistance(float minHoverDistance);
    // public System.Void InjectOptionalCurlDeltaThreshold(System.Single threshold)
    // Offset: 0x47C022C
    void InjectOptionalCurlDeltaThreshold(float threshold);
    // public System.Void InjectOptionalCurlTimeThreshold(System.Single seconds)
    // Offset: 0x47C0234
    void InjectOptionalCurlTimeThreshold(float seconds);
    // public System.Void InjectOptionalIterations(System.Int32 iterations)
    // Offset: 0x47C023C
    void InjectOptionalIterations(int iterations);
    // public System.Void InjectOptionalTimeProvider(System.Func`1<System.Single> timeProvider)
    // Offset: 0x47C0244
    void InjectOptionalTimeProvider(::System::Func_1<float>* timeProvider);
    // protected override System.Void Awake()
    // Offset: 0x47BD45C
    // Implemented from: Oculus.Interaction.Interactor`2
    // Base method: System.Void Interactor_2::Awake()
    void Awake();
    // protected override System.Void Start()
    // Offset: 0x47BD854
    // Implemented from: Oculus.Interaction.Interactor`2
    // Base method: System.Void Interactor_2::Start()
    void Start();
    // protected override System.Void DoPreprocess()
    // Offset: 0x47BDCA0
    // Implemented from: Oculus.Interaction.Interactor`2
    // Base method: System.Void Interactor_2::DoPreprocess()
    void DoPreprocess();
    // protected override System.Void DoPostprocess()
    // Offset: 0x47BDD50
    // Implemented from: Oculus.Interaction.PointerInteractor`2
    // Base method: System.Void PointerInteractor_2::DoPostprocess()
    void DoPostprocess();
    // protected override System.Boolean ComputeShouldSelect()
    // Offset: 0x47BDF6C
    // Implemented from: Oculus.Interaction.Interactor`2
    // Base method: System.Boolean Interactor_2::ComputeShouldSelect()
    bool ComputeShouldSelect();
    // protected override System.Boolean ComputeShouldUnselect()
    // Offset: 0x47BE024
    // Implemented from: Oculus.Interaction.Interactor`2
    // Base method: System.Boolean Interactor_2::ComputeShouldUnselect()
    bool ComputeShouldUnselect();
    // protected override System.Void DoHoverUpdate()
    // Offset: 0x47BE03C
    // Implemented from: Oculus.Interaction.Interactor`2
    // Base method: System.Void Interactor_2::DoHoverUpdate()
    void DoHoverUpdate();
    // protected override System.Void DoSelectUpdate()
    // Offset: 0x47BF3C0
    // Implemented from: Oculus.Interaction.Interactor`2
    // Base method: System.Void Interactor_2::DoSelectUpdate()
    void DoSelectUpdate();
    // public override System.Void Unselect()
    // Offset: 0x47BF8B4
    // Implemented from: Oculus.Interaction.Interactor`2
    // Base method: System.Void Interactor_2::Unselect()
    void Unselect();
    // protected override UnityEngine.Pose ComputePointerPose()
    // Offset: 0x47BFDA0
    // Implemented from: Oculus.Interaction.PointerInteractor`2
    // Base method: UnityEngine.Pose PointerInteractor_2::ComputePointerPose()
    ::UnityEngine::Pose ComputePointerPose();
    // public System.Void .ctor()
    // Offset: 0x47C0254
    // Implemented from: Oculus.Interaction.PointerInteractor`2
    // Base method: System.Void PointerInteractor_2::.ctor()
    // Base method: System.Void Interactor_2::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TouchHandGrabInteractor* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::TouchHandGrabInteractor::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TouchHandGrabInteractor*, creationType>()));
    }
  }; // Oculus.Interaction.TouchHandGrabInteractor
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::TouchHandGrabInteractor::get_Hand
// Il2CppName: get_Hand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Input::IHand* (Oculus::Interaction::TouchHandGrabInteractor::*)()>(&Oculus::Interaction::TouchHandGrabInteractor::get_Hand)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TouchHandGrabInteractor*), "get_Hand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TouchHandGrabInteractor::set_Hand
// Il2CppName: set_Hand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TouchHandGrabInteractor::*)(::Oculus::Interaction::Input::IHand*)>(&Oculus::Interaction::TouchHandGrabInteractor::set_Hand)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TouchHandGrabInteractor*), "set_Hand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TouchHandGrabInteractor::get_OpenHand
// Il2CppName: get_OpenHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Input::IHand* (Oculus::Interaction::TouchHandGrabInteractor::*)()>(&Oculus::Interaction::TouchHandGrabInteractor::get_OpenHand)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TouchHandGrabInteractor*), "get_OpenHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TouchHandGrabInteractor::set_OpenHand
// Il2CppName: set_OpenHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TouchHandGrabInteractor::*)(::Oculus::Interaction::Input::IHand*)>(&Oculus::Interaction::TouchHandGrabInteractor::set_OpenHand)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TouchHandGrabInteractor*), "set_OpenHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TouchHandGrabInteractor::add_WhenFingerLocked
// Il2CppName: add_WhenFingerLocked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TouchHandGrabInteractor::*)(::System::Action*)>(&Oculus::Interaction::TouchHandGrabInteractor::add_WhenFingerLocked)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TouchHandGrabInteractor*), "add_WhenFingerLocked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TouchHandGrabInteractor::remove_WhenFingerLocked
// Il2CppName: remove_WhenFingerLocked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TouchHandGrabInteractor::*)(::System::Action*)>(&Oculus::Interaction::TouchHandGrabInteractor::remove_WhenFingerLocked)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TouchHandGrabInteractor*), "remove_WhenFingerLocked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TouchHandGrabInteractor::get_GrabPosition
// Il2CppName: get_GrabPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Oculus::Interaction::TouchHandGrabInteractor::*)()>(&Oculus::Interaction::TouchHandGrabInteractor::get_GrabPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TouchHandGrabInteractor*), "get_GrabPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TouchHandGrabInteractor::get_GrabRotation
// Il2CppName: get_GrabRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (Oculus::Interaction::TouchHandGrabInteractor::*)()>(&Oculus::Interaction::TouchHandGrabInteractor::get_GrabRotation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TouchHandGrabInteractor*), "get_GrabRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TouchHandGrabInteractor::IsFingerLocked
// Il2CppName: IsFingerLocked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::TouchHandGrabInteractor::*)(::Oculus::Interaction::Input::HandFinger)>(&Oculus::Interaction::TouchHandGrabInteractor::IsFingerLocked)> {
  static const MethodInfo* get() {
    static auto* finger = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "HandFinger")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TouchHandGrabInteractor*), "IsFingerLocked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{finger});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TouchHandGrabInteractor::GetFingerJoints
// Il2CppName: GetFingerJoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Pose> (Oculus::Interaction::TouchHandGrabInteractor::*)(::Oculus::Interaction::Input::HandFinger)>(&Oculus::Interaction::TouchHandGrabInteractor::GetFingerJoints)> {
  static const MethodInfo* get() {
    static auto* finger = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "HandFinger")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TouchHandGrabInteractor*), "GetFingerJoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{finger});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TouchHandGrabInteractor::MeetsGrabPrerequisite
// Il2CppName: MeetsGrabPrerequisite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::TouchHandGrabInteractor::*)()>(&Oculus::Interaction::TouchHandGrabInteractor::MeetsGrabPrerequisite)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TouchHandGrabInteractor*), "MeetsGrabPrerequisite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TouchHandGrabInteractor::HandStatusSelecting
// Il2CppName: HandStatusSelecting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::TouchHandGrabInteractor::*)()>(&Oculus::Interaction::TouchHandGrabInteractor::HandStatusSelecting)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TouchHandGrabInteractor*), "HandStatusSelecting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TouchHandGrabInteractor::ComputeNewTouching
// Il2CppName: ComputeNewTouching
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TouchHandGrabInteractor::*)(int, ::Oculus::Interaction::ColliderGroup*, ::UnityEngine::Vector3)>(&Oculus::Interaction::TouchHandGrabInteractor::ComputeNewTouching)> {
  static const MethodInfo* get() {
    static auto* idx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* colliderGroup = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "ColliderGroup")->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TouchHandGrabInteractor*), "ComputeNewTouching", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{idx, colliderGroup, offset});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TouchHandGrabInteractor::ComputeNewRelease
// Il2CppName: ComputeNewRelease
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TouchHandGrabInteractor::*)(int, ::Oculus::Interaction::ColliderGroup*, ::UnityEngine::Vector3)>(&Oculus::Interaction::TouchHandGrabInteractor::ComputeNewRelease)> {
  static const MethodInfo* get() {
    static auto* idx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* colliderGroup = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "ColliderGroup")->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TouchHandGrabInteractor*), "ComputeNewRelease", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{idx, colliderGroup, offset});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TouchHandGrabInteractor::ClearFingerLockStatuses
// Il2CppName: ClearFingerLockStatuses
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TouchHandGrabInteractor::*)()>(&Oculus::Interaction::TouchHandGrabInteractor::ClearFingerLockStatuses)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TouchHandGrabInteractor*), "ClearFingerLockStatuses", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TouchHandGrabInteractor::ComputeCandidate
// Il2CppName: ComputeCandidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::TouchHandGrabInteractable* (Oculus::Interaction::TouchHandGrabInteractor::*)()>(&Oculus::Interaction::TouchHandGrabInteractor::ComputeCandidate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TouchHandGrabInteractor*), "ComputeCandidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TouchHandGrabInteractor::InjectAllTouchHandGrabInteractor
// Il2CppName: InjectAllTouchHandGrabInteractor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TouchHandGrabInteractor::*)(::Oculus::Interaction::Input::IHand*, ::Oculus::Interaction::Input::IHand*, ::Oculus::Interaction::IHandSphereMap*, ::UnityEngine::Transform*, ::UnityEngine::Transform*)>(&Oculus::Interaction::TouchHandGrabInteractor::InjectAllTouchHandGrabInteractor)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHand")->byval_arg;
    static auto* openHand = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHand")->byval_arg;
    static auto* handSphereMap = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IHandSphereMap")->byval_arg;
    static auto* hoverLocation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* grabLocation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TouchHandGrabInteractor*), "InjectAllTouchHandGrabInteractor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand, openHand, handSphereMap, hoverLocation, grabLocation});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TouchHandGrabInteractor::InjectHand
// Il2CppName: InjectHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TouchHandGrabInteractor::*)(::Oculus::Interaction::Input::IHand*)>(&Oculus::Interaction::TouchHandGrabInteractor::InjectHand)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TouchHandGrabInteractor*), "InjectHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TouchHandGrabInteractor::InjectOpenHand
// Il2CppName: InjectOpenHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TouchHandGrabInteractor::*)(::Oculus::Interaction::Input::IHand*)>(&Oculus::Interaction::TouchHandGrabInteractor::InjectOpenHand)> {
  static const MethodInfo* get() {
    static auto* openHand = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TouchHandGrabInteractor*), "InjectOpenHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{openHand});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TouchHandGrabInteractor::InjectHandSphereMap
// Il2CppName: InjectHandSphereMap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TouchHandGrabInteractor::*)(::Oculus::Interaction::IHandSphereMap*)>(&Oculus::Interaction::TouchHandGrabInteractor::InjectHandSphereMap)> {
  static const MethodInfo* get() {
    static auto* handSphereMap = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IHandSphereMap")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TouchHandGrabInteractor*), "InjectHandSphereMap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handSphereMap});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TouchHandGrabInteractor::InjectHoverLocation
// Il2CppName: InjectHoverLocation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TouchHandGrabInteractor::*)(::UnityEngine::Transform*)>(&Oculus::Interaction::TouchHandGrabInteractor::InjectHoverLocation)> {
  static const MethodInfo* get() {
    static auto* hoverLocation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TouchHandGrabInteractor*), "InjectHoverLocation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hoverLocation});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TouchHandGrabInteractor::InjectGrabLocation
// Il2CppName: InjectGrabLocation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TouchHandGrabInteractor::*)(::UnityEngine::Transform*)>(&Oculus::Interaction::TouchHandGrabInteractor::InjectGrabLocation)> {
  static const MethodInfo* get() {
    static auto* grabLocation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TouchHandGrabInteractor*), "InjectGrabLocation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{grabLocation});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TouchHandGrabInteractor::InjectOptionalGrabPrerequisite
// Il2CppName: InjectOptionalGrabPrerequisite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TouchHandGrabInteractor::*)(::Oculus::Interaction::IActiveState*)>(&Oculus::Interaction::TouchHandGrabInteractor::InjectOptionalGrabPrerequisite)> {
  static const MethodInfo* get() {
    static auto* grabPrerequisite = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IActiveState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TouchHandGrabInteractor*), "InjectOptionalGrabPrerequisite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{grabPrerequisite});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TouchHandGrabInteractor::InjectOptionalMinHoverDistance
// Il2CppName: InjectOptionalMinHoverDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TouchHandGrabInteractor::*)(float)>(&Oculus::Interaction::TouchHandGrabInteractor::InjectOptionalMinHoverDistance)> {
  static const MethodInfo* get() {
    static auto* minHoverDistance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TouchHandGrabInteractor*), "InjectOptionalMinHoverDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{minHoverDistance});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TouchHandGrabInteractor::InjectOptionalCurlDeltaThreshold
// Il2CppName: InjectOptionalCurlDeltaThreshold
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TouchHandGrabInteractor::*)(float)>(&Oculus::Interaction::TouchHandGrabInteractor::InjectOptionalCurlDeltaThreshold)> {
  static const MethodInfo* get() {
    static auto* threshold = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TouchHandGrabInteractor*), "InjectOptionalCurlDeltaThreshold", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{threshold});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TouchHandGrabInteractor::InjectOptionalCurlTimeThreshold
// Il2CppName: InjectOptionalCurlTimeThreshold
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TouchHandGrabInteractor::*)(float)>(&Oculus::Interaction::TouchHandGrabInteractor::InjectOptionalCurlTimeThreshold)> {
  static const MethodInfo* get() {
    static auto* seconds = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TouchHandGrabInteractor*), "InjectOptionalCurlTimeThreshold", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{seconds});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TouchHandGrabInteractor::InjectOptionalIterations
// Il2CppName: InjectOptionalIterations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TouchHandGrabInteractor::*)(int)>(&Oculus::Interaction::TouchHandGrabInteractor::InjectOptionalIterations)> {
  static const MethodInfo* get() {
    static auto* iterations = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TouchHandGrabInteractor*), "InjectOptionalIterations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{iterations});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TouchHandGrabInteractor::InjectOptionalTimeProvider
// Il2CppName: InjectOptionalTimeProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TouchHandGrabInteractor::*)(::System::Func_1<float>*)>(&Oculus::Interaction::TouchHandGrabInteractor::InjectOptionalTimeProvider)> {
  static const MethodInfo* get() {
    static auto* timeProvider = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Func`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TouchHandGrabInteractor*), "InjectOptionalTimeProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{timeProvider});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TouchHandGrabInteractor::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TouchHandGrabInteractor::*)()>(&Oculus::Interaction::TouchHandGrabInteractor::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TouchHandGrabInteractor*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TouchHandGrabInteractor::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TouchHandGrabInteractor::*)()>(&Oculus::Interaction::TouchHandGrabInteractor::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TouchHandGrabInteractor*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TouchHandGrabInteractor::DoPreprocess
// Il2CppName: DoPreprocess
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TouchHandGrabInteractor::*)()>(&Oculus::Interaction::TouchHandGrabInteractor::DoPreprocess)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TouchHandGrabInteractor*), "DoPreprocess", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TouchHandGrabInteractor::DoPostprocess
// Il2CppName: DoPostprocess
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TouchHandGrabInteractor::*)()>(&Oculus::Interaction::TouchHandGrabInteractor::DoPostprocess)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TouchHandGrabInteractor*), "DoPostprocess", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TouchHandGrabInteractor::ComputeShouldSelect
// Il2CppName: ComputeShouldSelect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::TouchHandGrabInteractor::*)()>(&Oculus::Interaction::TouchHandGrabInteractor::ComputeShouldSelect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TouchHandGrabInteractor*), "ComputeShouldSelect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TouchHandGrabInteractor::ComputeShouldUnselect
// Il2CppName: ComputeShouldUnselect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::TouchHandGrabInteractor::*)()>(&Oculus::Interaction::TouchHandGrabInteractor::ComputeShouldUnselect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TouchHandGrabInteractor*), "ComputeShouldUnselect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TouchHandGrabInteractor::DoHoverUpdate
// Il2CppName: DoHoverUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TouchHandGrabInteractor::*)()>(&Oculus::Interaction::TouchHandGrabInteractor::DoHoverUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TouchHandGrabInteractor*), "DoHoverUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TouchHandGrabInteractor::DoSelectUpdate
// Il2CppName: DoSelectUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TouchHandGrabInteractor::*)()>(&Oculus::Interaction::TouchHandGrabInteractor::DoSelectUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TouchHandGrabInteractor*), "DoSelectUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TouchHandGrabInteractor::Unselect
// Il2CppName: Unselect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TouchHandGrabInteractor::*)()>(&Oculus::Interaction::TouchHandGrabInteractor::Unselect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TouchHandGrabInteractor*), "Unselect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TouchHandGrabInteractor::ComputePointerPose
// Il2CppName: ComputePointerPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Pose (Oculus::Interaction::TouchHandGrabInteractor::*)()>(&Oculus::Interaction::TouchHandGrabInteractor::ComputePointerPose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TouchHandGrabInteractor*), "ComputePointerPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TouchHandGrabInteractor::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
