// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Oculus.Interaction.ITransformer
#include "Oculus/Interaction/ITransformer.hpp"
// Including type: UnityEngine.Pose
#include "UnityEngine/Pose.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction
namespace Oculus::Interaction {
  // Forward declaring type: IGrabbable
  class IGrabbable;
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: TwoGrabFreeTransformer
  class TwoGrabFreeTransformer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::TwoGrabFreeTransformer);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::TwoGrabFreeTransformer*, "Oculus.Interaction", "TwoGrabFreeTransformer");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x90
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.TwoGrabFreeTransformer
  // [TokenAttribute] Offset: FFFFFFFF
  class TwoGrabFreeTransformer : public ::UnityEngine::MonoBehaviour/*, public ::Oculus::Interaction::ITransformer*/ {
    public:
    // Nested type: ::Oculus::Interaction::TwoGrabFreeTransformer::TwoGrabFreeConstraints
    class TwoGrabFreeConstraints;
    public:
    // private UnityEngine.Quaternion _activeRotation
    // Size: 0x10
    // Offset: 0x20
    ::UnityEngine::Quaternion activeRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private UnityEngine.Vector3 _initialLocalScale
    // Size: 0xC
    // Offset: 0x30
    ::UnityEngine::Vector3 initialLocalScale;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Single _initialDistance
    // Size: 0x4
    // Offset: 0x3C
    float initialDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _initialScale
    // Size: 0x4
    // Offset: 0x40
    float initialScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _activeScale
    // Size: 0x4
    // Offset: 0x44
    float activeScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Pose _previousGrabPointA
    // Size: 0x1C
    // Offset: 0x48
    ::UnityEngine::Pose previousGrabPointA;
    // Field size check
    static_assert(sizeof(::UnityEngine::Pose) == 0x1C);
    // private UnityEngine.Pose _previousGrabPointB
    // Size: 0x1C
    // Offset: 0x64
    ::UnityEngine::Pose previousGrabPointB;
    // Field size check
    static_assert(sizeof(::UnityEngine::Pose) == 0x1C);
    // private Oculus.Interaction.TwoGrabFreeTransformer/TwoGrabFreeConstraints _constraints
    // Size: 0x8
    // Offset: 0x80
    ::Oculus::Interaction::TwoGrabFreeTransformer::TwoGrabFreeConstraints* constraints;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::TwoGrabFreeTransformer::TwoGrabFreeConstraints*) == 0x8);
    // private Oculus.Interaction.IGrabbable _grabbable
    // Size: 0x8
    // Offset: 0x88
    ::Oculus::Interaction::IGrabbable* grabbable;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::IGrabbable*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::ITransformer
    operator ::Oculus::Interaction::ITransformer() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::ITransformer*>(this);
    }
    // Get instance field reference: private UnityEngine.Quaternion _activeRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn__activeRotation();
    // Get instance field reference: private UnityEngine.Vector3 _initialLocalScale
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__initialLocalScale();
    // Get instance field reference: private System.Single _initialDistance
    [[deprecated("Use field access instead!")]] float& dyn__initialDistance();
    // Get instance field reference: private System.Single _initialScale
    [[deprecated("Use field access instead!")]] float& dyn__initialScale();
    // Get instance field reference: private System.Single _activeScale
    [[deprecated("Use field access instead!")]] float& dyn__activeScale();
    // Get instance field reference: private UnityEngine.Pose _previousGrabPointA
    [[deprecated("Use field access instead!")]] ::UnityEngine::Pose& dyn__previousGrabPointA();
    // Get instance field reference: private UnityEngine.Pose _previousGrabPointB
    [[deprecated("Use field access instead!")]] ::UnityEngine::Pose& dyn__previousGrabPointB();
    // Get instance field reference: private Oculus.Interaction.TwoGrabFreeTransformer/TwoGrabFreeConstraints _constraints
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::TwoGrabFreeTransformer::TwoGrabFreeConstraints*& dyn__constraints();
    // Get instance field reference: private Oculus.Interaction.IGrabbable _grabbable
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::IGrabbable*& dyn__grabbable();
    // public Oculus.Interaction.TwoGrabFreeTransformer/TwoGrabFreeConstraints get_Constraints()
    // Offset: 0x47A5B20
    ::Oculus::Interaction::TwoGrabFreeTransformer::TwoGrabFreeConstraints* get_Constraints();
    // public System.Void set_Constraints(Oculus.Interaction.TwoGrabFreeTransformer/TwoGrabFreeConstraints value)
    // Offset: 0x47A5B28
    void set_Constraints(::Oculus::Interaction::TwoGrabFreeTransformer::TwoGrabFreeConstraints* value);
    // public System.Void Initialize(Oculus.Interaction.IGrabbable grabbable)
    // Offset: 0x47A5B30
    void Initialize(::Oculus::Interaction::IGrabbable* grabbable);
    // public System.Void BeginTransform()
    // Offset: 0x47A5B38
    void BeginTransform();
    // public System.Void UpdateTransform()
    // Offset: 0x47A5FE4
    void UpdateTransform();
    // public System.Void MarkAsBaseScale()
    // Offset: 0x47A6A80
    void MarkAsBaseScale();
    // public System.Void EndTransform()
    // Offset: 0x47A6A8C
    void EndTransform();
    // public System.Void InjectOptionalConstraints(Oculus.Interaction.TwoGrabFreeTransformer/TwoGrabFreeConstraints constraints)
    // Offset: 0x47A6A90
    void InjectOptionalConstraints(::Oculus::Interaction::TwoGrabFreeTransformer::TwoGrabFreeConstraints* constraints);
    // public System.Void .ctor()
    // Offset: 0x47A6A98
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TwoGrabFreeTransformer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::TwoGrabFreeTransformer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TwoGrabFreeTransformer*, creationType>()));
    }
  }; // Oculus.Interaction.TwoGrabFreeTransformer
  #pragma pack(pop)
  static check_size<sizeof(TwoGrabFreeTransformer), 136 + sizeof(::Oculus::Interaction::IGrabbable*)> __Oculus_Interaction_TwoGrabFreeTransformerSizeCheck;
  static_assert(sizeof(TwoGrabFreeTransformer) == 0x90);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::TwoGrabFreeTransformer::get_Constraints
// Il2CppName: get_Constraints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::TwoGrabFreeTransformer::TwoGrabFreeConstraints* (Oculus::Interaction::TwoGrabFreeTransformer::*)()>(&Oculus::Interaction::TwoGrabFreeTransformer::get_Constraints)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TwoGrabFreeTransformer*), "get_Constraints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TwoGrabFreeTransformer::set_Constraints
// Il2CppName: set_Constraints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TwoGrabFreeTransformer::*)(::Oculus::Interaction::TwoGrabFreeTransformer::TwoGrabFreeConstraints*)>(&Oculus::Interaction::TwoGrabFreeTransformer::set_Constraints)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "TwoGrabFreeTransformer/TwoGrabFreeConstraints")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TwoGrabFreeTransformer*), "set_Constraints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TwoGrabFreeTransformer::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TwoGrabFreeTransformer::*)(::Oculus::Interaction::IGrabbable*)>(&Oculus::Interaction::TwoGrabFreeTransformer::Initialize)> {
  static const MethodInfo* get() {
    static auto* grabbable = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IGrabbable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TwoGrabFreeTransformer*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{grabbable});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TwoGrabFreeTransformer::BeginTransform
// Il2CppName: BeginTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TwoGrabFreeTransformer::*)()>(&Oculus::Interaction::TwoGrabFreeTransformer::BeginTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TwoGrabFreeTransformer*), "BeginTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TwoGrabFreeTransformer::UpdateTransform
// Il2CppName: UpdateTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TwoGrabFreeTransformer::*)()>(&Oculus::Interaction::TwoGrabFreeTransformer::UpdateTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TwoGrabFreeTransformer*), "UpdateTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TwoGrabFreeTransformer::MarkAsBaseScale
// Il2CppName: MarkAsBaseScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TwoGrabFreeTransformer::*)()>(&Oculus::Interaction::TwoGrabFreeTransformer::MarkAsBaseScale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TwoGrabFreeTransformer*), "MarkAsBaseScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TwoGrabFreeTransformer::EndTransform
// Il2CppName: EndTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TwoGrabFreeTransformer::*)()>(&Oculus::Interaction::TwoGrabFreeTransformer::EndTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TwoGrabFreeTransformer*), "EndTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TwoGrabFreeTransformer::InjectOptionalConstraints
// Il2CppName: InjectOptionalConstraints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TwoGrabFreeTransformer::*)(::Oculus::Interaction::TwoGrabFreeTransformer::TwoGrabFreeConstraints*)>(&Oculus::Interaction::TwoGrabFreeTransformer::InjectOptionalConstraints)> {
  static const MethodInfo* get() {
    static auto* constraints = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "TwoGrabFreeTransformer/TwoGrabFreeConstraints")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TwoGrabFreeTransformer*), "InjectOptionalConstraints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{constraints});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TwoGrabFreeTransformer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
