// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Oculus.Interaction.DistantPointDetectorFrustums
#include "Oculus/Interaction/DistantPointDetectorFrustums.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Collider
  class Collider;
  // Forward declaring type: Vector3
  struct Vector3;
}
// Forward declaring namespace: Oculus::Interaction
namespace Oculus::Interaction {
  // Forward declaring type: ConicalFrustum
  class ConicalFrustum;
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: DistantPointDetector
  class DistantPointDetector;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::DistantPointDetector);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::DistantPointDetector*, "Oculus.Interaction", "DistantPointDetector");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x2C
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.DistantPointDetector
  // [TokenAttribute] Offset: FFFFFFFF
  class DistantPointDetector : public ::Il2CppObject {
    public:
    public:
    // private Oculus.Interaction.DistantPointDetectorFrustums _frustums
    // Size: 0x1C
    // Offset: 0x10
    ::Oculus::Interaction::DistantPointDetectorFrustums frustums;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::DistantPointDetectorFrustums) == 0x1C);
    public:
    // Creating conversion operator: operator ::Oculus::Interaction::DistantPointDetectorFrustums
    constexpr operator ::Oculus::Interaction::DistantPointDetectorFrustums() const noexcept {
      return frustums;
    }
    // Get instance field reference: private Oculus.Interaction.DistantPointDetectorFrustums _frustums
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::DistantPointDetectorFrustums& dyn__frustums();
    // public System.Void .ctor(Oculus.Interaction.DistantPointDetectorFrustums frustums)
    // Offset: 0x4770D68
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DistantPointDetector* New_ctor(::Oculus::Interaction::DistantPointDetectorFrustums frustums) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::DistantPointDetector::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DistantPointDetector*, creationType>(frustums)));
    }
    // public System.Boolean ComputeIsPointing(UnityEngine.Collider[] colliders, System.Boolean isSelecting, out System.Single bestScore, out UnityEngine.Vector3 bestHitPoint)
    // Offset: 0x4770D9C
    bool ComputeIsPointing(::ArrayW<::UnityEngine::Collider*> colliders, bool isSelecting, ByRef<float> bestScore, ByRef<::UnityEngine::Vector3> bestHitPoint);
    // public System.Boolean IsPointingWithoutAid(UnityEngine.Collider[] colliders, out UnityEngine.Vector3 bestHitPoint)
    // Offset: 0x4770FB8
    bool IsPointingWithoutAid(::ArrayW<::UnityEngine::Collider*> colliders, ByRef<::UnityEngine::Vector3> bestHitPoint);
    // public System.Boolean IsWithinDeselectionRange(UnityEngine.Collider[] colliders)
    // Offset: 0x4771214
    bool IsWithinDeselectionRange(::ArrayW<::UnityEngine::Collider*> colliders);
    // private System.Boolean IsPointingAtColliders(UnityEngine.Collider[] colliders, Oculus.Interaction.ConicalFrustum frustum)
    // Offset: 0x4771254
    bool IsPointingAtColliders(::ArrayW<::UnityEngine::Collider*> colliders, ::Oculus::Interaction::ConicalFrustum* frustum);
    // private System.Boolean IsPointingAtColliders(UnityEngine.Collider[] colliders, Oculus.Interaction.ConicalFrustum frustum, out UnityEngine.Vector3 bestHitPoint)
    // Offset: 0x47710A4
    bool IsPointingAtColliders(::ArrayW<::UnityEngine::Collider*> colliders, ::Oculus::Interaction::ConicalFrustum* frustum, ByRef<::UnityEngine::Vector3> bestHitPoint);
  }; // Oculus.Interaction.DistantPointDetector
  #pragma pack(pop)
  static check_size<sizeof(DistantPointDetector), 16 + sizeof(::Oculus::Interaction::DistantPointDetectorFrustums)> __Oculus_Interaction_DistantPointDetectorSizeCheck;
  static_assert(sizeof(DistantPointDetector) == 0x2C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::DistantPointDetector::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Interaction::DistantPointDetector::ComputeIsPointing
// Il2CppName: ComputeIsPointing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::DistantPointDetector::*)(::ArrayW<::UnityEngine::Collider*>, bool, ByRef<float>, ByRef<::UnityEngine::Vector3>)>(&Oculus::Interaction::DistantPointDetector::ComputeIsPointing)> {
  static const MethodInfo* get() {
    static auto* colliders = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Collider"), 1)->byval_arg;
    static auto* isSelecting = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* bestScore = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* bestHitPoint = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::DistantPointDetector*), "ComputeIsPointing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colliders, isSelecting, bestScore, bestHitPoint});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::DistantPointDetector::IsPointingWithoutAid
// Il2CppName: IsPointingWithoutAid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::DistantPointDetector::*)(::ArrayW<::UnityEngine::Collider*>, ByRef<::UnityEngine::Vector3>)>(&Oculus::Interaction::DistantPointDetector::IsPointingWithoutAid)> {
  static const MethodInfo* get() {
    static auto* colliders = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Collider"), 1)->byval_arg;
    static auto* bestHitPoint = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::DistantPointDetector*), "IsPointingWithoutAid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colliders, bestHitPoint});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::DistantPointDetector::IsWithinDeselectionRange
// Il2CppName: IsWithinDeselectionRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::DistantPointDetector::*)(::ArrayW<::UnityEngine::Collider*>)>(&Oculus::Interaction::DistantPointDetector::IsWithinDeselectionRange)> {
  static const MethodInfo* get() {
    static auto* colliders = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Collider"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::DistantPointDetector*), "IsWithinDeselectionRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colliders});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::DistantPointDetector::IsPointingAtColliders
// Il2CppName: IsPointingAtColliders
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::DistantPointDetector::*)(::ArrayW<::UnityEngine::Collider*>, ::Oculus::Interaction::ConicalFrustum*)>(&Oculus::Interaction::DistantPointDetector::IsPointingAtColliders)> {
  static const MethodInfo* get() {
    static auto* colliders = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Collider"), 1)->byval_arg;
    static auto* frustum = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "ConicalFrustum")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::DistantPointDetector*), "IsPointingAtColliders", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colliders, frustum});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::DistantPointDetector::IsPointingAtColliders
// Il2CppName: IsPointingAtColliders
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::DistantPointDetector::*)(::ArrayW<::UnityEngine::Collider*>, ::Oculus::Interaction::ConicalFrustum*, ByRef<::UnityEngine::Vector3>)>(&Oculus::Interaction::DistantPointDetector::IsPointingAtColliders)> {
  static const MethodInfo* get() {
    static auto* colliders = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Collider"), 1)->byval_arg;
    static auto* frustum = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "ConicalFrustum")->byval_arg;
    static auto* bestHitPoint = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::DistantPointDetector*), "IsPointingAtColliders", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colliders, frustum, bestHitPoint});
  }
};
