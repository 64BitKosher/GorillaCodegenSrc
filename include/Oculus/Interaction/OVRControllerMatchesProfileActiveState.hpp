// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Oculus.Interaction.IActiveState
#include "Oculus/Interaction/IActiveState.hpp"
// Including type: OVRInput/Controller
#include "GlobalNamespace/OVRInput.hpp"
// Including type: OVRInput/InteractionProfile
#include "GlobalNamespace/OVRInput_InteractionProfile.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: OVRControllerMatchesProfileActiveState
  class OVRControllerMatchesProfileActiveState;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::OVRControllerMatchesProfileActiveState);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::OVRControllerMatchesProfileActiveState*, "Oculus.Interaction", "OVRControllerMatchesProfileActiveState");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.OVRControllerMatchesProfileActiveState
  // [TokenAttribute] Offset: FFFFFFFF
  class OVRControllerMatchesProfileActiveState : public ::UnityEngine::MonoBehaviour/*, public ::Oculus::Interaction::IActiveState*/ {
    public:
    public:
    // private OVRInput/Controller _controller
    // Size: 0x4
    // Offset: 0x20
    ::GlobalNamespace::OVRInput::Controller controller;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRInput::Controller) == 0x4);
    // private OVRInput/InteractionProfile _profile
    // Size: 0x4
    // Offset: 0x24
    ::GlobalNamespace::OVRInput::InteractionProfile profile;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRInput::InteractionProfile) == 0x4);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::IActiveState
    operator ::Oculus::Interaction::IActiveState() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::IActiveState*>(this);
    }
    // Get instance field reference: private OVRInput/Controller _controller
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRInput::Controller& dyn__controller();
    // Get instance field reference: private OVRInput/InteractionProfile _profile
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRInput::InteractionProfile& dyn__profile();
    // public System.Boolean get_Active()
    // Offset: 0x478DB24
    bool get_Active();
    // public System.Void InjectAllOVRControllerSupportsPressure(OVRInput/Controller controller)
    // Offset: 0x478DB98
    void InjectAllOVRControllerSupportsPressure(::GlobalNamespace::OVRInput::Controller controller);
    // public System.Void .ctor()
    // Offset: 0x478DBA0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OVRControllerMatchesProfileActiveState* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::OVRControllerMatchesProfileActiveState::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OVRControllerMatchesProfileActiveState*, creationType>()));
    }
  }; // Oculus.Interaction.OVRControllerMatchesProfileActiveState
  #pragma pack(pop)
  static check_size<sizeof(OVRControllerMatchesProfileActiveState), 36 + sizeof(::GlobalNamespace::OVRInput::InteractionProfile)> __Oculus_Interaction_OVRControllerMatchesProfileActiveStateSizeCheck;
  static_assert(sizeof(OVRControllerMatchesProfileActiveState) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::OVRControllerMatchesProfileActiveState::get_Active
// Il2CppName: get_Active
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::OVRControllerMatchesProfileActiveState::*)()>(&Oculus::Interaction::OVRControllerMatchesProfileActiveState::get_Active)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::OVRControllerMatchesProfileActiveState*), "get_Active", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::OVRControllerMatchesProfileActiveState::InjectAllOVRControllerSupportsPressure
// Il2CppName: InjectAllOVRControllerSupportsPressure
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::OVRControllerMatchesProfileActiveState::*)(::GlobalNamespace::OVRInput::Controller)>(&Oculus::Interaction::OVRControllerMatchesProfileActiveState::InjectAllOVRControllerSupportsPressure)> {
  static const MethodInfo* get() {
    static auto* controller = &::il2cpp_utils::GetClassFromName("", "OVRInput/Controller")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::OVRControllerMatchesProfileActiveState*), "InjectAllOVRControllerSupportsPressure", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controller});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::OVRControllerMatchesProfileActiveState::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
