// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Oculus.Interaction.Interactor`2
#include "Oculus/Interaction/Interactor_2.hpp"
// Including type: Oculus.Interaction.IRigidbodyRef
#include "Oculus/Interaction/IRigidbodyRef.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction
namespace Oculus::Interaction {
  // Forward declaring type: SnapInteractable
  class SnapInteractable;
  // Forward declaring type: PointableElement
  class PointableElement;
  // Forward declaring type: IMovement
  class IMovement;
  // Forward declaring type: IPointableElement
  class IPointableElement;
  // Forward declaring type: PointerEvent
  struct PointerEvent;
  // Forward declaring type: PointerEventType
  struct PointerEventType;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Rigidbody
  class Rigidbody;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Pose
  struct Pose;
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: SnapInteractor
  class SnapInteractor;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::SnapInteractor);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::SnapInteractor*, "Oculus.Interaction", "SnapInteractor");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // WARNING Size may be invalid!
  // Autogenerated type: Oculus.Interaction.SnapInteractor
  // [TokenAttribute] Offset: FFFFFFFF
  class SnapInteractor : public ::Oculus::Interaction::Interactor_2<::Oculus::Interaction::SnapInteractor*, ::Oculus::Interaction::SnapInteractable*>/*, public ::Oculus::Interaction::IRigidbodyRef*/ {
    public:
    // Nested type: ::Oculus::Interaction::SnapInteractor::$$c
    class $$c;
    public:
    // private Oculus.Interaction.PointableElement _pointableElement
    // Size: 0x8
    // Offset: 0x118
    ::Oculus::Interaction::PointableElement* pointableElement;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::PointableElement*) == 0x8);
    // private UnityEngine.Rigidbody _rigidbody
    // Size: 0x8
    // Offset: 0x120
    ::UnityEngine::Rigidbody* rigidbody;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rigidbody*) == 0x8);
    // private System.Single _distanceThreshold
    // Size: 0x4
    // Offset: 0x128
    float distanceThreshold;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Transform _snapPoseTransform
    // Size: 0x8
    // Offset: 0x130
    ::UnityEngine::Transform* snapPoseTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private Oculus.Interaction.SnapInteractable _defaultInteractable
    // Size: 0x8
    // Offset: 0x138
    ::Oculus::Interaction::SnapInteractable* defaultInteractable;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::SnapInteractable*) == 0x8);
    // private Oculus.Interaction.SnapInteractable _timeOutInteractable
    // Size: 0x8
    // Offset: 0x140
    ::Oculus::Interaction::SnapInteractable* timeOutInteractable;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::SnapInteractable*) == 0x8);
    // private System.Single _timeOut
    // Size: 0x4
    // Offset: 0x148
    float timeOut;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _idleStarted
    // Size: 0x4
    // Offset: 0x14C
    float idleStarted;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private Oculus.Interaction.IMovement _movement
    // Size: 0x8
    // Offset: 0x150
    ::Oculus::Interaction::IMovement* movement;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::IMovement*) == 0x8);
    // private System.Boolean _shouldSelect
    // Size: 0x1
    // Offset: 0x158
    bool shouldSelect;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _shouldUnselect
    // Size: 0x1
    // Offset: 0x159
    bool shouldUnselect;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::IRigidbodyRef
    operator ::Oculus::Interaction::IRigidbodyRef() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::IRigidbodyRef*>(this);
    }
    // Get instance field reference: private Oculus.Interaction.PointableElement _pointableElement
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::PointableElement*& dyn__pointableElement();
    // Get instance field reference: private UnityEngine.Rigidbody _rigidbody
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rigidbody*& dyn__rigidbody();
    // Get instance field reference: private System.Single _distanceThreshold
    [[deprecated("Use field access instead!")]] float& dyn__distanceThreshold();
    // Get instance field reference: private UnityEngine.Transform _snapPoseTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__snapPoseTransform();
    // Get instance field reference: private Oculus.Interaction.SnapInteractable _defaultInteractable
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::SnapInteractable*& dyn__defaultInteractable();
    // Get instance field reference: private Oculus.Interaction.SnapInteractable _timeOutInteractable
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::SnapInteractable*& dyn__timeOutInteractable();
    // Get instance field reference: private System.Single _timeOut
    [[deprecated("Use field access instead!")]] float& dyn__timeOut();
    // Get instance field reference: private System.Single _idleStarted
    [[deprecated("Use field access instead!")]] float& dyn__idleStarted();
    // Get instance field reference: private Oculus.Interaction.IMovement _movement
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::IMovement*& dyn__movement();
    // Get instance field reference: private System.Boolean _shouldSelect
    [[deprecated("Use field access instead!")]] bool& dyn__shouldSelect();
    // Get instance field reference: private System.Boolean _shouldUnselect
    [[deprecated("Use field access instead!")]] bool& dyn__shouldUnselect();
    // public Oculus.Interaction.IPointableElement get_PointableElement()
    // Offset: 0x47BA5C0
    ::Oculus::Interaction::IPointableElement* get_PointableElement();
    // public UnityEngine.Rigidbody get_Rigidbody()
    // Offset: 0x47BA5C8
    ::UnityEngine::Rigidbody* get_Rigidbody();
    // public UnityEngine.Pose get_SnapPose()
    // Offset: 0x47B9B00
    ::UnityEngine::Pose get_SnapPose();
    // private System.Void Reset()
    // Offset: 0x47BA5D0
    void Reset();
    // public System.Single get_DistanceThreshold()
    // Offset: 0x47BA660
    float get_DistanceThreshold();
    // public System.Void set_DistanceThreshold(System.Single value)
    // Offset: 0x47BA668
    void set_DistanceThreshold(float value);
    // protected System.Void InteractableSet(Oculus.Interaction.SnapInteractable interactable)
    // Offset: 0x47BADE8
    void InteractableSet(::Oculus::Interaction::SnapInteractable* interactable);
    // protected System.Void InteractableUnset(Oculus.Interaction.SnapInteractable interactable)
    // Offset: 0x47BAE94
    void InteractableUnset(::Oculus::Interaction::SnapInteractable* interactable);
    // protected System.Void InteractableSelected(Oculus.Interaction.SnapInteractable interactable)
    // Offset: 0x47BAF30
    void InteractableSelected(::Oculus::Interaction::SnapInteractable* interactable);
    // protected System.Void InteractableUnselected(Oculus.Interaction.SnapInteractable interactable)
    // Offset: 0x47BB030
    void InteractableUnselected(::Oculus::Interaction::SnapInteractable* interactable);
    // protected System.Void HandlePointerEventRaised(Oculus.Interaction.PointerEvent evt)
    // Offset: 0x47BB1E8
    void HandlePointerEventRaised(::Oculus::Interaction::PointerEvent evt);
    // private System.Void GeneratePointerEvent(Oculus.Interaction.PointerEventType pointerEventType)
    // Offset: 0x47BAAF8
    void GeneratePointerEvent(::Oculus::Interaction::PointerEventType pointerEventType);
    // protected UnityEngine.Pose ComputePointerPose()
    // Offset: 0x47BB358
    ::UnityEngine::Pose ComputePointerPose();
    // private System.Boolean TimedOut()
    // Offset: 0x47BB4A0
    bool TimedOut();
    // protected Oculus.Interaction.SnapInteractable ComputeCandidate()
    // Offset: 0x47BB544
    ::Oculus::Interaction::SnapInteractable* ComputeCandidate();
    // public System.Void InjectAllSnapInteractor(Oculus.Interaction.PointableElement pointableElement, UnityEngine.Rigidbody rigidbody)
    // Offset: 0x47BB91C
    void InjectAllSnapInteractor(::Oculus::Interaction::PointableElement* pointableElement, ::UnityEngine::Rigidbody* rigidbody);
    // public System.Void InjectPointableElement(Oculus.Interaction.PointableElement pointableElement)
    // Offset: 0x47BB950
    void InjectPointableElement(::Oculus::Interaction::PointableElement* pointableElement);
    // public System.Void InjectRigidbody(UnityEngine.Rigidbody rigidbody)
    // Offset: 0x47BB960
    void InjectRigidbody(::UnityEngine::Rigidbody* rigidbody);
    // public System.Void InjectOptionalSnapPoseTransform(UnityEngine.Transform snapPoint)
    // Offset: 0x47BB970
    void InjectOptionalSnapPoseTransform(::UnityEngine::Transform* snapPoint);
    // public System.Void InjectOptionalTimeOutInteractable(Oculus.Interaction.SnapInteractable interactable)
    // Offset: 0x47BB980
    void InjectOptionalTimeOutInteractable(::Oculus::Interaction::SnapInteractable* interactable);
    // public System.Void InjectOptionaTimeOut(System.Single timeOut)
    // Offset: 0x47BB990
    void InjectOptionaTimeOut(float timeOut);
    // private System.Void <Start>b__19_0()
    // Offset: 0x47BB9F4
    void $Start$b__19_0();
    // private Oculus.Interaction.SnapInteractable <OnEnable>b__20_0()
    // Offset: 0x47BBA3C
    ::Oculus::Interaction::SnapInteractable* $OnEnable$b__20_0();
    // protected override System.Void Start()
    // Offset: 0x47BA670
    // Implemented from: Oculus.Interaction.Interactor`2
    // Base method: System.Void Interactor_2::Start()
    void Start();
    // protected override System.Void OnEnable()
    // Offset: 0x47BA768
    // Implemented from: Oculus.Interaction.Interactor`2
    // Base method: System.Void Interactor_2::OnEnable()
    void OnEnable();
    // protected override System.Void OnDisable()
    // Offset: 0x47BA97C
    // Implemented from: Oculus.Interaction.Interactor`2
    // Base method: System.Void Interactor_2::OnDisable()
    void OnDisable();
    // protected override System.Boolean ComputeShouldSelect()
    // Offset: 0x47BAA1C
    // Implemented from: Oculus.Interaction.Interactor`2
    // Base method: System.Boolean Interactor_2::ComputeShouldSelect()
    bool ComputeShouldSelect();
    // protected override System.Boolean ComputeShouldUnselect()
    // Offset: 0x47BAA24
    // Implemented from: Oculus.Interaction.Interactor`2
    // Base method: System.Boolean Interactor_2::ComputeShouldUnselect()
    bool ComputeShouldUnselect();
    // protected override System.Void DoHoverUpdate()
    // Offset: 0x47BAA2C
    // Implemented from: Oculus.Interaction.Interactor`2
    // Base method: System.Void Interactor_2::DoHoverUpdate()
    void DoHoverUpdate();
    // protected override System.Void DoSelectUpdate()
    // Offset: 0x47BABF0
    // Implemented from: Oculus.Interaction.Interactor`2
    // Base method: System.Void Interactor_2::DoSelectUpdate()
    void DoSelectUpdate();
    // protected override System.Void DoPreprocess()
    // Offset: 0x47BB430
    // Implemented from: Oculus.Interaction.Interactor`2
    // Base method: System.Void Interactor_2::DoPreprocess()
    void DoPreprocess();
    // public System.Void .ctor()
    // Offset: 0x47BB998
    // Implemented from: Oculus.Interaction.Interactor`2
    // Base method: System.Void Interactor_2::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SnapInteractor* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::SnapInteractor::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SnapInteractor*, creationType>()));
    }
  }; // Oculus.Interaction.SnapInteractor
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::SnapInteractor::get_PointableElement
// Il2CppName: get_PointableElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::IPointableElement* (Oculus::Interaction::SnapInteractor::*)()>(&Oculus::Interaction::SnapInteractor::get_PointableElement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SnapInteractor*), "get_PointableElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SnapInteractor::get_Rigidbody
// Il2CppName: get_Rigidbody
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rigidbody* (Oculus::Interaction::SnapInteractor::*)()>(&Oculus::Interaction::SnapInteractor::get_Rigidbody)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SnapInteractor*), "get_Rigidbody", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SnapInteractor::get_SnapPose
// Il2CppName: get_SnapPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Pose (Oculus::Interaction::SnapInteractor::*)()>(&Oculus::Interaction::SnapInteractor::get_SnapPose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SnapInteractor*), "get_SnapPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SnapInteractor::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SnapInteractor::*)()>(&Oculus::Interaction::SnapInteractor::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SnapInteractor*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SnapInteractor::get_DistanceThreshold
// Il2CppName: get_DistanceThreshold
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::SnapInteractor::*)()>(&Oculus::Interaction::SnapInteractor::get_DistanceThreshold)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SnapInteractor*), "get_DistanceThreshold", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SnapInteractor::set_DistanceThreshold
// Il2CppName: set_DistanceThreshold
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SnapInteractor::*)(float)>(&Oculus::Interaction::SnapInteractor::set_DistanceThreshold)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SnapInteractor*), "set_DistanceThreshold", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SnapInteractor::InteractableSet
// Il2CppName: InteractableSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SnapInteractor::*)(::Oculus::Interaction::SnapInteractable*)>(&Oculus::Interaction::SnapInteractor::InteractableSet)> {
  static const MethodInfo* get() {
    static auto* interactable = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "SnapInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SnapInteractor*), "InteractableSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactable});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SnapInteractor::InteractableUnset
// Il2CppName: InteractableUnset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SnapInteractor::*)(::Oculus::Interaction::SnapInteractable*)>(&Oculus::Interaction::SnapInteractor::InteractableUnset)> {
  static const MethodInfo* get() {
    static auto* interactable = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "SnapInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SnapInteractor*), "InteractableUnset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactable});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SnapInteractor::InteractableSelected
// Il2CppName: InteractableSelected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SnapInteractor::*)(::Oculus::Interaction::SnapInteractable*)>(&Oculus::Interaction::SnapInteractor::InteractableSelected)> {
  static const MethodInfo* get() {
    static auto* interactable = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "SnapInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SnapInteractor*), "InteractableSelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactable});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SnapInteractor::InteractableUnselected
// Il2CppName: InteractableUnselected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SnapInteractor::*)(::Oculus::Interaction::SnapInteractable*)>(&Oculus::Interaction::SnapInteractor::InteractableUnselected)> {
  static const MethodInfo* get() {
    static auto* interactable = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "SnapInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SnapInteractor*), "InteractableUnselected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactable});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SnapInteractor::HandlePointerEventRaised
// Il2CppName: HandlePointerEventRaised
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SnapInteractor::*)(::Oculus::Interaction::PointerEvent)>(&Oculus::Interaction::SnapInteractor::HandlePointerEventRaised)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "PointerEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SnapInteractor*), "HandlePointerEventRaised", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SnapInteractor::GeneratePointerEvent
// Il2CppName: GeneratePointerEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SnapInteractor::*)(::Oculus::Interaction::PointerEventType)>(&Oculus::Interaction::SnapInteractor::GeneratePointerEvent)> {
  static const MethodInfo* get() {
    static auto* pointerEventType = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "PointerEventType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SnapInteractor*), "GeneratePointerEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pointerEventType});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SnapInteractor::ComputePointerPose
// Il2CppName: ComputePointerPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Pose (Oculus::Interaction::SnapInteractor::*)()>(&Oculus::Interaction::SnapInteractor::ComputePointerPose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SnapInteractor*), "ComputePointerPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SnapInteractor::TimedOut
// Il2CppName: TimedOut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::SnapInteractor::*)()>(&Oculus::Interaction::SnapInteractor::TimedOut)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SnapInteractor*), "TimedOut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SnapInteractor::ComputeCandidate
// Il2CppName: ComputeCandidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::SnapInteractable* (Oculus::Interaction::SnapInteractor::*)()>(&Oculus::Interaction::SnapInteractor::ComputeCandidate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SnapInteractor*), "ComputeCandidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SnapInteractor::InjectAllSnapInteractor
// Il2CppName: InjectAllSnapInteractor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SnapInteractor::*)(::Oculus::Interaction::PointableElement*, ::UnityEngine::Rigidbody*)>(&Oculus::Interaction::SnapInteractor::InjectAllSnapInteractor)> {
  static const MethodInfo* get() {
    static auto* pointableElement = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "PointableElement")->byval_arg;
    static auto* rigidbody = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rigidbody")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SnapInteractor*), "InjectAllSnapInteractor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pointableElement, rigidbody});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SnapInteractor::InjectPointableElement
// Il2CppName: InjectPointableElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SnapInteractor::*)(::Oculus::Interaction::PointableElement*)>(&Oculus::Interaction::SnapInteractor::InjectPointableElement)> {
  static const MethodInfo* get() {
    static auto* pointableElement = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "PointableElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SnapInteractor*), "InjectPointableElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pointableElement});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SnapInteractor::InjectRigidbody
// Il2CppName: InjectRigidbody
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SnapInteractor::*)(::UnityEngine::Rigidbody*)>(&Oculus::Interaction::SnapInteractor::InjectRigidbody)> {
  static const MethodInfo* get() {
    static auto* rigidbody = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rigidbody")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SnapInteractor*), "InjectRigidbody", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rigidbody});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SnapInteractor::InjectOptionalSnapPoseTransform
// Il2CppName: InjectOptionalSnapPoseTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SnapInteractor::*)(::UnityEngine::Transform*)>(&Oculus::Interaction::SnapInteractor::InjectOptionalSnapPoseTransform)> {
  static const MethodInfo* get() {
    static auto* snapPoint = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SnapInteractor*), "InjectOptionalSnapPoseTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{snapPoint});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SnapInteractor::InjectOptionalTimeOutInteractable
// Il2CppName: InjectOptionalTimeOutInteractable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SnapInteractor::*)(::Oculus::Interaction::SnapInteractable*)>(&Oculus::Interaction::SnapInteractor::InjectOptionalTimeOutInteractable)> {
  static const MethodInfo* get() {
    static auto* interactable = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "SnapInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SnapInteractor*), "InjectOptionalTimeOutInteractable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactable});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SnapInteractor::InjectOptionaTimeOut
// Il2CppName: InjectOptionaTimeOut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SnapInteractor::*)(float)>(&Oculus::Interaction::SnapInteractor::InjectOptionaTimeOut)> {
  static const MethodInfo* get() {
    static auto* timeOut = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SnapInteractor*), "InjectOptionaTimeOut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{timeOut});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SnapInteractor::$Start$b__19_0
// Il2CppName: <Start>b__19_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SnapInteractor::*)()>(&Oculus::Interaction::SnapInteractor::$Start$b__19_0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SnapInteractor*), "<Start>b__19_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SnapInteractor::$OnEnable$b__20_0
// Il2CppName: <OnEnable>b__20_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::SnapInteractable* (Oculus::Interaction::SnapInteractor::*)()>(&Oculus::Interaction::SnapInteractor::$OnEnable$b__20_0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SnapInteractor*), "<OnEnable>b__20_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SnapInteractor::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SnapInteractor::*)()>(&Oculus::Interaction::SnapInteractor::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SnapInteractor*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SnapInteractor::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SnapInteractor::*)()>(&Oculus::Interaction::SnapInteractor::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SnapInteractor*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SnapInteractor::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SnapInteractor::*)()>(&Oculus::Interaction::SnapInteractor::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SnapInteractor*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SnapInteractor::ComputeShouldSelect
// Il2CppName: ComputeShouldSelect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::SnapInteractor::*)()>(&Oculus::Interaction::SnapInteractor::ComputeShouldSelect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SnapInteractor*), "ComputeShouldSelect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SnapInteractor::ComputeShouldUnselect
// Il2CppName: ComputeShouldUnselect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::SnapInteractor::*)()>(&Oculus::Interaction::SnapInteractor::ComputeShouldUnselect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SnapInteractor*), "ComputeShouldUnselect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SnapInteractor::DoHoverUpdate
// Il2CppName: DoHoverUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SnapInteractor::*)()>(&Oculus::Interaction::SnapInteractor::DoHoverUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SnapInteractor*), "DoHoverUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SnapInteractor::DoSelectUpdate
// Il2CppName: DoSelectUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SnapInteractor::*)()>(&Oculus::Interaction::SnapInteractor::DoSelectUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SnapInteractor*), "DoSelectUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SnapInteractor::DoPreprocess
// Il2CppName: DoPreprocess
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SnapInteractor::*)()>(&Oculus::Interaction::SnapInteractor::DoPreprocess)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SnapInteractor*), "DoPreprocess", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SnapInteractor::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
