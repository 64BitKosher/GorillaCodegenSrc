// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.PropertyAttribute
#include "UnityEngine/PropertyAttribute.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction
namespace Oculus::Interaction {
  // Skipping declaration: Flag because it is already included!
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: OptionalAttribute
  class OptionalAttribute;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::OptionalAttribute);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::OptionalAttribute*, "Oculus.Interaction", "OptionalAttribute");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.OptionalAttribute
  // [TokenAttribute] Offset: FFFFFFFF
  class OptionalAttribute : public ::UnityEngine::PropertyAttribute {
    public:
    // Nested type: ::Oculus::Interaction::OptionalAttribute::Flag
    struct Flag;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Oculus.Interaction.OptionalAttribute/Flag
    // [TokenAttribute] Offset: FFFFFFFF
    // [FlagsAttribute] Offset: FFFFFFFF
    struct Flag/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: Flag
      constexpr Flag(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Oculus.Interaction.OptionalAttribute/Flag None
      static constexpr const int None = 0;
      // Get static field: static public Oculus.Interaction.OptionalAttribute/Flag None
      static ::Oculus::Interaction::OptionalAttribute::Flag _get_None();
      // Set static field: static public Oculus.Interaction.OptionalAttribute/Flag None
      static void _set_None(::Oculus::Interaction::OptionalAttribute::Flag value);
      // static field const value: static public Oculus.Interaction.OptionalAttribute/Flag AutoGenerated
      static constexpr const int AutoGenerated = 1;
      // Get static field: static public Oculus.Interaction.OptionalAttribute/Flag AutoGenerated
      static ::Oculus::Interaction::OptionalAttribute::Flag _get_AutoGenerated();
      // Set static field: static public Oculus.Interaction.OptionalAttribute/Flag AutoGenerated
      static void _set_AutoGenerated(::Oculus::Interaction::OptionalAttribute::Flag value);
      // static field const value: static public Oculus.Interaction.OptionalAttribute/Flag DontHide
      static constexpr const int DontHide = 2;
      // Get static field: static public Oculus.Interaction.OptionalAttribute/Flag DontHide
      static ::Oculus::Interaction::OptionalAttribute::Flag _get_DontHide();
      // Set static field: static public Oculus.Interaction.OptionalAttribute/Flag DontHide
      static void _set_DontHide(::Oculus::Interaction::OptionalAttribute::Flag value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Oculus.Interaction.OptionalAttribute/Flag
    #pragma pack(pop)
    static check_size<sizeof(OptionalAttribute::Flag), 0 + sizeof(int)> __Oculus_Interaction_OptionalAttribute_FlagSizeCheck;
    static_assert(sizeof(OptionalAttribute::Flag) == 0x4);
    public:
    // private Oculus.Interaction.OptionalAttribute/Flag <Flags>k__BackingField
    // Size: 0x4
    // Offset: 0x14
    ::Oculus::Interaction::OptionalAttribute::Flag Flags;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::OptionalAttribute::Flag) == 0x4);
    public:
    // Deleting conversion operator: operator int
    constexpr operator int() const noexcept = delete;
    // Get instance field reference: private Oculus.Interaction.OptionalAttribute/Flag <Flags>k__BackingField
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::OptionalAttribute::Flag& dyn_$Flags$k__BackingField();
    // public Oculus.Interaction.OptionalAttribute/Flag get_Flags()
    // Offset: 0x4770664
    ::Oculus::Interaction::OptionalAttribute::Flag get_Flags();
    // private System.Void set_Flags(Oculus.Interaction.OptionalAttribute/Flag value)
    // Offset: 0x477066C
    void set_Flags(::Oculus::Interaction::OptionalAttribute::Flag value);
    // public System.Void .ctor()
    // Offset: 0x4770674
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OptionalAttribute* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::OptionalAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OptionalAttribute*, creationType>()));
    }
    // public System.Void .ctor(Oculus.Interaction.OptionalAttribute/Flag flags)
    // Offset: 0x477067C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OptionalAttribute* New_ctor(::Oculus::Interaction::OptionalAttribute::Flag flags) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::OptionalAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OptionalAttribute*, creationType>(flags)));
    }
  }; // Oculus.Interaction.OptionalAttribute
  #pragma pack(pop)
  static check_size<sizeof(OptionalAttribute), 20 + sizeof(::Oculus::Interaction::OptionalAttribute::Flag)> __Oculus_Interaction_OptionalAttributeSizeCheck;
  static_assert(sizeof(OptionalAttribute) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::OptionalAttribute::Flag, "Oculus.Interaction", "OptionalAttribute/Flag");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::OptionalAttribute::get_Flags
// Il2CppName: get_Flags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::OptionalAttribute::Flag (Oculus::Interaction::OptionalAttribute::*)()>(&Oculus::Interaction::OptionalAttribute::get_Flags)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::OptionalAttribute*), "get_Flags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::OptionalAttribute::set_Flags
// Il2CppName: set_Flags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::OptionalAttribute::*)(::Oculus::Interaction::OptionalAttribute::Flag)>(&Oculus::Interaction::OptionalAttribute::set_Flags)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "OptionalAttribute/Flag")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::OptionalAttribute*), "set_Flags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::OptionalAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Interaction::OptionalAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
