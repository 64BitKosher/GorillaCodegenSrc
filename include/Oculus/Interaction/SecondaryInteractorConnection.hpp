// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Object because it is already included!
}
// Forward declaring namespace: Oculus::Interaction
namespace Oculus::Interaction {
  // Forward declaring type: IInteractorView
  class IInteractorView;
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: SecondaryInteractorConnection
  class SecondaryInteractorConnection;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::SecondaryInteractorConnection);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::SecondaryInteractorConnection*, "Oculus.Interaction", "SecondaryInteractorConnection");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.SecondaryInteractorConnection
  // [TokenAttribute] Offset: FFFFFFFF
  class SecondaryInteractorConnection : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.Object _primaryInteractor
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Object* primaryInteractor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private UnityEngine.Object _secondaryInteractor
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Object* secondaryInteractor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.IInteractorView <PrimaryInteractor>k__BackingField
    // Size: 0x8
    // Offset: 0x30
    ::Oculus::Interaction::IInteractorView* PrimaryInteractor;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::IInteractorView*) == 0x8);
    // private Oculus.Interaction.IInteractorView <SecondaryInteractor>k__BackingField
    // Size: 0x8
    // Offset: 0x38
    ::Oculus::Interaction::IInteractorView* SecondaryInteractor;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::IInteractorView*) == 0x8);
    public:
    // Get instance field reference: private UnityEngine.Object _primaryInteractor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__primaryInteractor();
    // Get instance field reference: private UnityEngine.Object _secondaryInteractor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__secondaryInteractor();
    // Get instance field reference: private Oculus.Interaction.IInteractorView <PrimaryInteractor>k__BackingField
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::IInteractorView*& dyn_$PrimaryInteractor$k__BackingField();
    // Get instance field reference: private Oculus.Interaction.IInteractorView <SecondaryInteractor>k__BackingField
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::IInteractorView*& dyn_$SecondaryInteractor$k__BackingField();
    // public Oculus.Interaction.IInteractorView get_PrimaryInteractor()
    // Offset: 0x478808C
    ::Oculus::Interaction::IInteractorView* get_PrimaryInteractor();
    // private System.Void set_PrimaryInteractor(Oculus.Interaction.IInteractorView value)
    // Offset: 0x4788094
    void set_PrimaryInteractor(::Oculus::Interaction::IInteractorView* value);
    // public Oculus.Interaction.IInteractorView get_SecondaryInteractor()
    // Offset: 0x478809C
    ::Oculus::Interaction::IInteractorView* get_SecondaryInteractor();
    // private System.Void set_SecondaryInteractor(Oculus.Interaction.IInteractorView value)
    // Offset: 0x47880A4
    void set_SecondaryInteractor(::Oculus::Interaction::IInteractorView* value);
    // protected System.Void Awake()
    // Offset: 0x47880AC
    void Awake();
    // protected System.Void Start()
    // Offset: 0x4788120
    void Start();
    // public System.Void InjectAllSecondaryInteractorConnection(Oculus.Interaction.IInteractorView primaryInteractor, Oculus.Interaction.IInteractorView secondaryInteractor)
    // Offset: 0x4788124
    void InjectAllSecondaryInteractorConnection(::Oculus::Interaction::IInteractorView* primaryInteractor, ::Oculus::Interaction::IInteractorView* secondaryInteractor);
    // public System.Void InjectPrimaryInteractor(Oculus.Interaction.IInteractorView interactorView)
    // Offset: 0x478814C
    void InjectPrimaryInteractor(::Oculus::Interaction::IInteractorView* interactorView);
    // public System.Void InjectSecondaryInteractorConnection(Oculus.Interaction.IInteractorView interactorView)
    // Offset: 0x4788218
    void InjectSecondaryInteractorConnection(::Oculus::Interaction::IInteractorView* interactorView);
    // public System.Void .ctor()
    // Offset: 0x47882E4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SecondaryInteractorConnection* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::SecondaryInteractorConnection::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SecondaryInteractorConnection*, creationType>()));
    }
  }; // Oculus.Interaction.SecondaryInteractorConnection
  #pragma pack(pop)
  static check_size<sizeof(SecondaryInteractorConnection), 56 + sizeof(::Oculus::Interaction::IInteractorView*)> __Oculus_Interaction_SecondaryInteractorConnectionSizeCheck;
  static_assert(sizeof(SecondaryInteractorConnection) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::SecondaryInteractorConnection::get_PrimaryInteractor
// Il2CppName: get_PrimaryInteractor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::IInteractorView* (Oculus::Interaction::SecondaryInteractorConnection::*)()>(&Oculus::Interaction::SecondaryInteractorConnection::get_PrimaryInteractor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SecondaryInteractorConnection*), "get_PrimaryInteractor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SecondaryInteractorConnection::set_PrimaryInteractor
// Il2CppName: set_PrimaryInteractor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SecondaryInteractorConnection::*)(::Oculus::Interaction::IInteractorView*)>(&Oculus::Interaction::SecondaryInteractorConnection::set_PrimaryInteractor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IInteractorView")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SecondaryInteractorConnection*), "set_PrimaryInteractor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SecondaryInteractorConnection::get_SecondaryInteractor
// Il2CppName: get_SecondaryInteractor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::IInteractorView* (Oculus::Interaction::SecondaryInteractorConnection::*)()>(&Oculus::Interaction::SecondaryInteractorConnection::get_SecondaryInteractor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SecondaryInteractorConnection*), "get_SecondaryInteractor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SecondaryInteractorConnection::set_SecondaryInteractor
// Il2CppName: set_SecondaryInteractor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SecondaryInteractorConnection::*)(::Oculus::Interaction::IInteractorView*)>(&Oculus::Interaction::SecondaryInteractorConnection::set_SecondaryInteractor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IInteractorView")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SecondaryInteractorConnection*), "set_SecondaryInteractor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SecondaryInteractorConnection::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SecondaryInteractorConnection::*)()>(&Oculus::Interaction::SecondaryInteractorConnection::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SecondaryInteractorConnection*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SecondaryInteractorConnection::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SecondaryInteractorConnection::*)()>(&Oculus::Interaction::SecondaryInteractorConnection::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SecondaryInteractorConnection*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SecondaryInteractorConnection::InjectAllSecondaryInteractorConnection
// Il2CppName: InjectAllSecondaryInteractorConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SecondaryInteractorConnection::*)(::Oculus::Interaction::IInteractorView*, ::Oculus::Interaction::IInteractorView*)>(&Oculus::Interaction::SecondaryInteractorConnection::InjectAllSecondaryInteractorConnection)> {
  static const MethodInfo* get() {
    static auto* primaryInteractor = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IInteractorView")->byval_arg;
    static auto* secondaryInteractor = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IInteractorView")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SecondaryInteractorConnection*), "InjectAllSecondaryInteractorConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{primaryInteractor, secondaryInteractor});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SecondaryInteractorConnection::InjectPrimaryInteractor
// Il2CppName: InjectPrimaryInteractor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SecondaryInteractorConnection::*)(::Oculus::Interaction::IInteractorView*)>(&Oculus::Interaction::SecondaryInteractorConnection::InjectPrimaryInteractor)> {
  static const MethodInfo* get() {
    static auto* interactorView = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IInteractorView")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SecondaryInteractorConnection*), "InjectPrimaryInteractor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactorView});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SecondaryInteractorConnection::InjectSecondaryInteractorConnection
// Il2CppName: InjectSecondaryInteractorConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SecondaryInteractorConnection::*)(::Oculus::Interaction::IInteractorView*)>(&Oculus::Interaction::SecondaryInteractorConnection::InjectSecondaryInteractorConnection)> {
  static const MethodInfo* get() {
    static auto* interactorView = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IInteractorView")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SecondaryInteractorConnection*), "InjectSecondaryInteractorConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactorView});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SecondaryInteractorConnection::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
