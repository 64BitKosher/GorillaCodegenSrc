// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Oculus.Interaction.IActiveState
#include "Oculus/Interaction/IActiveState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction
namespace Oculus::Interaction {
  // Skipping declaration: StatePrecedence because it is already included!
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Object because it is already included!
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: ActiveStateToggle
  class ActiveStateToggle;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::ActiveStateToggle);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::ActiveStateToggle*, "Oculus.Interaction", "ActiveStateToggle");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x45
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.ActiveStateToggle
  // [TokenAttribute] Offset: FFFFFFFF
  class ActiveStateToggle : public ::UnityEngine::MonoBehaviour/*, public ::Oculus::Interaction::IActiveState*/ {
    public:
    // Nested type: ::Oculus::Interaction::ActiveStateToggle::StatePrecedence
    struct StatePrecedence;
    // Nested type: ::Oculus::Interaction::ActiveStateToggle::DebugModel
    class DebugModel;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Oculus.Interaction.ActiveStateToggle/StatePrecedence
    // [TokenAttribute] Offset: FFFFFFFF
    struct StatePrecedence/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: StatePrecedence
      constexpr StatePrecedence(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Oculus.Interaction.ActiveStateToggle/StatePrecedence On
      static constexpr const int On = 0;
      // Get static field: static public Oculus.Interaction.ActiveStateToggle/StatePrecedence On
      static ::Oculus::Interaction::ActiveStateToggle::StatePrecedence _get_On();
      // Set static field: static public Oculus.Interaction.ActiveStateToggle/StatePrecedence On
      static void _set_On(::Oculus::Interaction::ActiveStateToggle::StatePrecedence value);
      // static field const value: static public Oculus.Interaction.ActiveStateToggle/StatePrecedence Off
      static constexpr const int Off = 1;
      // Get static field: static public Oculus.Interaction.ActiveStateToggle/StatePrecedence Off
      static ::Oculus::Interaction::ActiveStateToggle::StatePrecedence _get_Off();
      // Set static field: static public Oculus.Interaction.ActiveStateToggle/StatePrecedence Off
      static void _set_Off(::Oculus::Interaction::ActiveStateToggle::StatePrecedence value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Oculus.Interaction.ActiveStateToggle/StatePrecedence
    #pragma pack(pop)
    static check_size<sizeof(ActiveStateToggle::StatePrecedence), 0 + sizeof(int)> __Oculus_Interaction_ActiveStateToggle_StatePrecedenceSizeCheck;
    static_assert(sizeof(ActiveStateToggle::StatePrecedence) == 0x4);
    public:
    // private UnityEngine.Object _on
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Object* on;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.IActiveState On
    // Size: 0x8
    // Offset: 0x28
    ::Oculus::Interaction::IActiveState* On;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::IActiveState*) == 0x8);
    // private UnityEngine.Object _off
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Object* off;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.IActiveState Off
    // Size: 0x8
    // Offset: 0x38
    ::Oculus::Interaction::IActiveState* Off;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::IActiveState*) == 0x8);
    // private Oculus.Interaction.ActiveStateToggle/StatePrecedence _precedence
    // Size: 0x4
    // Offset: 0x40
    ::Oculus::Interaction::ActiveStateToggle::StatePrecedence precedence;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::ActiveStateToggle::StatePrecedence) == 0x4);
    // private System.Boolean _internalActive
    // Size: 0x1
    // Offset: 0x44
    bool internalActive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::IActiveState
    operator ::Oculus::Interaction::IActiveState() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::IActiveState*>(this);
    }
    // Get instance field reference: private UnityEngine.Object _on
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__on();
    // Get instance field reference: private Oculus.Interaction.IActiveState On
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::IActiveState*& dyn_On();
    // Get instance field reference: private UnityEngine.Object _off
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__off();
    // Get instance field reference: private Oculus.Interaction.IActiveState Off
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::IActiveState*& dyn_Off();
    // Get instance field reference: private Oculus.Interaction.ActiveStateToggle/StatePrecedence _precedence
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::ActiveStateToggle::StatePrecedence& dyn__precedence();
    // Get instance field reference: private System.Boolean _internalActive
    [[deprecated("Use field access instead!")]] bool& dyn__internalActive();
    // public Oculus.Interaction.ActiveStateToggle/StatePrecedence get_Precedence()
    // Offset: 0x477A0F0
    ::Oculus::Interaction::ActiveStateToggle::StatePrecedence get_Precedence();
    // public System.Void set_Precedence(Oculus.Interaction.ActiveStateToggle/StatePrecedence value)
    // Offset: 0x477A0F8
    void set_Precedence(::Oculus::Interaction::ActiveStateToggle::StatePrecedence value);
    // protected System.Void Awake()
    // Offset: 0x477A100
    void Awake();
    // protected System.Void Start()
    // Offset: 0x477A1A0
    void Start();
    // public System.Boolean get_Active()
    // Offset: 0x477A1A4
    bool get_Active();
    // static private System.Void .cctor()
    // Offset: 0x477A3C0
    static void _cctor();
    // public System.Void InjectAllActiveStateToggle(Oculus.Interaction.IActiveState on, Oculus.Interaction.IActiveState off)
    // Offset: 0x477A494
    void InjectAllActiveStateToggle(::Oculus::Interaction::IActiveState* on, ::Oculus::Interaction::IActiveState* off);
    // public System.Void InjectOn(Oculus.Interaction.IActiveState activeState)
    // Offset: 0x477A4BC
    void InjectOn(::Oculus::Interaction::IActiveState* activeState);
    // public System.Void InjectOff(Oculus.Interaction.IActiveState activeState)
    // Offset: 0x477A58C
    void InjectOff(::Oculus::Interaction::IActiveState* activeState);
    // public System.Void .ctor()
    // Offset: 0x477A65C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ActiveStateToggle* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::ActiveStateToggle::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ActiveStateToggle*, creationType>()));
    }
  }; // Oculus.Interaction.ActiveStateToggle
  #pragma pack(pop)
  static check_size<sizeof(ActiveStateToggle), 68 + sizeof(bool)> __Oculus_Interaction_ActiveStateToggleSizeCheck;
  static_assert(sizeof(ActiveStateToggle) == 0x45);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::ActiveStateToggle::StatePrecedence, "Oculus.Interaction", "ActiveStateToggle/StatePrecedence");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::ActiveStateToggle::get_Precedence
// Il2CppName: get_Precedence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::ActiveStateToggle::StatePrecedence (Oculus::Interaction::ActiveStateToggle::*)()>(&Oculus::Interaction::ActiveStateToggle::get_Precedence)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ActiveStateToggle*), "get_Precedence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ActiveStateToggle::set_Precedence
// Il2CppName: set_Precedence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ActiveStateToggle::*)(::Oculus::Interaction::ActiveStateToggle::StatePrecedence)>(&Oculus::Interaction::ActiveStateToggle::set_Precedence)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "ActiveStateToggle/StatePrecedence")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ActiveStateToggle*), "set_Precedence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ActiveStateToggle::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ActiveStateToggle::*)()>(&Oculus::Interaction::ActiveStateToggle::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ActiveStateToggle*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ActiveStateToggle::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ActiveStateToggle::*)()>(&Oculus::Interaction::ActiveStateToggle::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ActiveStateToggle*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ActiveStateToggle::get_Active
// Il2CppName: get_Active
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::ActiveStateToggle::*)()>(&Oculus::Interaction::ActiveStateToggle::get_Active)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ActiveStateToggle*), "get_Active", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ActiveStateToggle::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Oculus::Interaction::ActiveStateToggle::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ActiveStateToggle*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ActiveStateToggle::InjectAllActiveStateToggle
// Il2CppName: InjectAllActiveStateToggle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ActiveStateToggle::*)(::Oculus::Interaction::IActiveState*, ::Oculus::Interaction::IActiveState*)>(&Oculus::Interaction::ActiveStateToggle::InjectAllActiveStateToggle)> {
  static const MethodInfo* get() {
    static auto* on = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IActiveState")->byval_arg;
    static auto* off = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IActiveState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ActiveStateToggle*), "InjectAllActiveStateToggle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{on, off});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ActiveStateToggle::InjectOn
// Il2CppName: InjectOn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ActiveStateToggle::*)(::Oculus::Interaction::IActiveState*)>(&Oculus::Interaction::ActiveStateToggle::InjectOn)> {
  static const MethodInfo* get() {
    static auto* activeState = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IActiveState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ActiveStateToggle*), "InjectOn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{activeState});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ActiveStateToggle::InjectOff
// Il2CppName: InjectOff
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ActiveStateToggle::*)(::Oculus::Interaction::IActiveState*)>(&Oculus::Interaction::ActiveStateToggle::InjectOff)> {
  static const MethodInfo* get() {
    static auto* activeState = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IActiveState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ActiveStateToggle*), "InjectOff", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{activeState});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ActiveStateToggle::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
