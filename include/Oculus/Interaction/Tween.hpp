// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Oculus.Interaction.IMovement
#include "Oculus/Interaction/IMovement.hpp"
// Including type: UnityEngine.Pose
#include "UnityEngine/Pose.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction
namespace Oculus::Interaction {
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: Tween
  class Tween;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Tween);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Tween*, "Oculus.Interaction", "Tween");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.Tween
  // [TokenAttribute] Offset: FFFFFFFF
  class Tween : public ::Il2CppObject/*, public ::Oculus::Interaction::IMovement*/ {
    public:
    // Nested type: ::Oculus::Interaction::Tween::TweenCurve
    class TweenCurve;
    // Nested type: ::Oculus::Interaction::Tween::$$c
    class $$c;
    public:
    // private System.Collections.Generic.List`1<Oculus.Interaction.Tween/TweenCurve> _tweenCurves
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::List_1<::Oculus::Interaction::Tween::TweenCurve*>* tweenCurves;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Oculus::Interaction::Tween::TweenCurve*>*) == 0x8);
    // private UnityEngine.Pose _pose
    // Size: 0x1C
    // Offset: 0x18
    ::UnityEngine::Pose pose;
    // Field size check
    static_assert(sizeof(::UnityEngine::Pose) == 0x1C);
    // private UnityEngine.Pose _startPose
    // Size: 0x1C
    // Offset: 0x34
    ::UnityEngine::Pose startPose;
    // Field size check
    static_assert(sizeof(::UnityEngine::Pose) == 0x1C);
    // private System.Single _maxOverlapTime
    // Size: 0x4
    // Offset: 0x50
    float maxOverlapTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _tweenTime
    // Size: 0x4
    // Offset: 0x54
    float tweenTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.AnimationCurve _animationCurve
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::AnimationCurve* animationCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::IMovement
    operator ::Oculus::Interaction::IMovement() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::IMovement*>(this);
    }
    // Get instance field reference: private System.Collections.Generic.List`1<Oculus.Interaction.Tween/TweenCurve> _tweenCurves
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Oculus::Interaction::Tween::TweenCurve*>*& dyn__tweenCurves();
    // Get instance field reference: private UnityEngine.Pose _pose
    [[deprecated("Use field access instead!")]] ::UnityEngine::Pose& dyn__pose();
    // Get instance field reference: private UnityEngine.Pose _startPose
    [[deprecated("Use field access instead!")]] ::UnityEngine::Pose& dyn__startPose();
    // Get instance field reference: private System.Single _maxOverlapTime
    [[deprecated("Use field access instead!")]] float& dyn__maxOverlapTime();
    // Get instance field reference: private System.Single _tweenTime
    [[deprecated("Use field access instead!")]] float& dyn__tweenTime();
    // Get instance field reference: private UnityEngine.AnimationCurve _animationCurve
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn__animationCurve();
    // public UnityEngine.Pose get_Pose()
    // Offset: 0x47AB9A4
    ::UnityEngine::Pose get_Pose();
    // public UnityEngine.Pose get_StartPose()
    // Offset: 0x47AB9B8
    ::UnityEngine::Pose get_StartPose();
    // public System.Boolean get_Stopped()
    // Offset: 0x47AB9CC
    bool get_Stopped();
    // public System.Void .ctor(UnityEngine.Pose start, System.Single tweenTime, System.Single maxOverlapTime, UnityEngine.AnimationCurve curve)
    // Offset: 0x47A9F0C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Tween* New_ctor(::UnityEngine::Pose start, float tweenTime, float maxOverlapTime, ::UnityEngine::AnimationCurve* curve) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Tween::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Tween*, creationType>(start, tweenTime, maxOverlapTime, curve)));
    }
    // private System.Void TweenToInTime(UnityEngine.Pose target, System.Single time)
    // Offset: 0x47ABAD0
    void TweenToInTime(::UnityEngine::Pose target, float time);
    // public System.Void MoveTo(UnityEngine.Pose target)
    // Offset: 0x47AA9D8
    void MoveTo(::UnityEngine::Pose target);
    // public System.Void UpdateTarget(UnityEngine.Pose target)
    // Offset: 0x47AB298
    void UpdateTarget(::UnityEngine::Pose target);
    // public System.Void StopAndSetPose(UnityEngine.Pose source)
    // Offset: 0x47AA92C
    void StopAndSetPose(::UnityEngine::Pose source);
    // public System.Void Tick()
    // Offset: 0x47AB330
    void Tick();
  }; // Oculus.Interaction.Tween
  #pragma pack(pop)
  static check_size<sizeof(Tween), 88 + sizeof(::UnityEngine::AnimationCurve*)> __Oculus_Interaction_TweenSizeCheck;
  static_assert(sizeof(Tween) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Tween::get_Pose
// Il2CppName: get_Pose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Pose (Oculus::Interaction::Tween::*)()>(&Oculus::Interaction::Tween::get_Pose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Tween*), "get_Pose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Tween::get_StartPose
// Il2CppName: get_StartPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Pose (Oculus::Interaction::Tween::*)()>(&Oculus::Interaction::Tween::get_StartPose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Tween*), "get_StartPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Tween::get_Stopped
// Il2CppName: get_Stopped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Tween::*)()>(&Oculus::Interaction::Tween::get_Stopped)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Tween*), "get_Stopped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Tween::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Interaction::Tween::TweenToInTime
// Il2CppName: TweenToInTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Tween::*)(::UnityEngine::Pose, float)>(&Oculus::Interaction::Tween::TweenToInTime)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Tween*), "TweenToInTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target, time});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Tween::MoveTo
// Il2CppName: MoveTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Tween::*)(::UnityEngine::Pose)>(&Oculus::Interaction::Tween::MoveTo)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Tween*), "MoveTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Tween::UpdateTarget
// Il2CppName: UpdateTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Tween::*)(::UnityEngine::Pose)>(&Oculus::Interaction::Tween::UpdateTarget)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Tween*), "UpdateTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Tween::StopAndSetPose
// Il2CppName: StopAndSetPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Tween::*)(::UnityEngine::Pose)>(&Oculus::Interaction::Tween::StopAndSetPose)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Tween*), "StopAndSetPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Tween::Tick
// Il2CppName: Tick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Tween::*)()>(&Oculus::Interaction::Tween::Tick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Tween*), "Tick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
