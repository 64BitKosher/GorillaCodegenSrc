// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Oculus.Interaction.DistanceReticles.DistantInteractionLineVisual
#include "Oculus/Interaction/DistanceReticles/DistantInteractionLineVisual.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
}
// Forward declaring namespace: Oculus::Interaction
namespace Oculus::Interaction {
  // Forward declaring type: PolylineRenderer
  class PolylineRenderer;
  // Forward declaring type: IDistanceInteractor
  class IDistanceInteractor;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.DistanceReticles
namespace Oculus::Interaction::DistanceReticles {
  // Forward declaring type: DistantInteractionPolylineVisual
  class DistantInteractionPolylineVisual;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::DistanceReticles::DistantInteractionPolylineVisual);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::DistanceReticles::DistantInteractionPolylineVisual*, "Oculus.Interaction.DistanceReticles", "DistantInteractionPolylineVisual");
// Type namespace: Oculus.Interaction.DistanceReticles
namespace Oculus::Interaction::DistanceReticles {
  // Size: 0x98
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.DistanceReticles.DistantInteractionPolylineVisual
  // [TokenAttribute] Offset: FFFFFFFF
  class DistantInteractionPolylineVisual : public ::Oculus::Interaction::DistanceReticles::DistantInteractionLineVisual {
    public:
    public:
    // private UnityEngine.Color _color
    // Size: 0x10
    // Offset: 0x68
    ::UnityEngine::Color color;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private System.Single _lineWidth
    // Size: 0x4
    // Offset: 0x78
    float lineWidth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: lineWidth and: linePointsVec4
    char __padding1[0x4] = {};
    // private System.Collections.Generic.List`1<UnityEngine.Vector4> _linePointsVec4
    // Size: 0x8
    // Offset: 0x80
    ::System::Collections::Generic::List_1<::UnityEngine::Vector4>* linePointsVec4;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Vector4>*) == 0x8);
    // private UnityEngine.Material _lineMaterial
    // Size: 0x8
    // Offset: 0x88
    ::UnityEngine::Material* lineMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private Oculus.Interaction.PolylineRenderer _polylineRenderer
    // Size: 0x8
    // Offset: 0x90
    ::Oculus::Interaction::PolylineRenderer* polylineRenderer;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::PolylineRenderer*) == 0x8);
    public:
    // Get instance field reference: private UnityEngine.Color _color
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__color();
    // Get instance field reference: private System.Single _lineWidth
    [[deprecated("Use field access instead!")]] float& dyn__lineWidth();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Vector4> _linePointsVec4
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Vector4>*& dyn__linePointsVec4();
    // Get instance field reference: private UnityEngine.Material _lineMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn__lineMaterial();
    // Get instance field reference: private Oculus.Interaction.PolylineRenderer _polylineRenderer
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::PolylineRenderer*& dyn__polylineRenderer();
    // public UnityEngine.Color get_Color()
    // Offset: 0x483DBB4
    ::UnityEngine::Color get_Color();
    // public System.Void set_Color(UnityEngine.Color value)
    // Offset: 0x483DBC0
    void set_Color(::UnityEngine::Color value);
    // public System.Single get_LineWidth()
    // Offset: 0x483DBCC
    float get_LineWidth();
    // public System.Void set_LineWidth(System.Single value)
    // Offset: 0x483DBD4
    void set_LineWidth(float value);
    // private System.Void OnDestroy()
    // Offset: 0x483DCD8
    void OnDestroy();
    // public System.Void InjectAllDistantInteractionPolylineVisual(Oculus.Interaction.IDistanceInteractor interactor, UnityEngine.Color color, UnityEngine.Material material)
    // Offset: 0x483DDCC
    void InjectAllDistantInteractionPolylineVisual(::Oculus::Interaction::IDistanceInteractor* interactor, ::UnityEngine::Color color, ::UnityEngine::Material* material);
    // public System.Void InjectLineColor(UnityEngine.Color color)
    // Offset: 0x483DE20
    void InjectLineColor(::UnityEngine::Color color);
    // public System.Void InjectLineMaterial(UnityEngine.Material material)
    // Offset: 0x483DE2C
    void InjectLineMaterial(::UnityEngine::Material* material);
    // protected override System.Void Start()
    // Offset: 0x483DBDC
    // Implemented from: Oculus.Interaction.DistanceReticles.DistantInteractionLineVisual
    // Base method: System.Void DistantInteractionLineVisual::Start()
    void Start();
    // protected override System.Void RenderLine(UnityEngine.Vector3[] linePoints)
    // Offset: 0x483DCF4
    // Implemented from: Oculus.Interaction.DistanceReticles.DistantInteractionLineVisual
    // Base method: System.Void DistantInteractionLineVisual::RenderLine(UnityEngine.Vector3[] linePoints)
    void RenderLine(::ArrayW<::UnityEngine::Vector3> linePoints);
    // protected override System.Void HideLine()
    // Offset: 0x483DDC8
    // Implemented from: Oculus.Interaction.DistanceReticles.DistantInteractionLineVisual
    // Base method: System.Void DistantInteractionLineVisual::HideLine()
    void HideLine();
    // public System.Void .ctor()
    // Offset: 0x483DE34
    // Implemented from: Oculus.Interaction.DistanceReticles.DistantInteractionLineVisual
    // Base method: System.Void DistantInteractionLineVisual::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DistantInteractionPolylineVisual* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::DistanceReticles::DistantInteractionPolylineVisual::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DistantInteractionPolylineVisual*, creationType>()));
    }
  }; // Oculus.Interaction.DistanceReticles.DistantInteractionPolylineVisual
  #pragma pack(pop)
  static check_size<sizeof(DistantInteractionPolylineVisual), 144 + sizeof(::Oculus::Interaction::PolylineRenderer*)> __Oculus_Interaction_DistanceReticles_DistantInteractionPolylineVisualSizeCheck;
  static_assert(sizeof(DistantInteractionPolylineVisual) == 0x98);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::DistanceReticles::DistantInteractionPolylineVisual::get_Color
// Il2CppName: get_Color
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (Oculus::Interaction::DistanceReticles::DistantInteractionPolylineVisual::*)()>(&Oculus::Interaction::DistanceReticles::DistantInteractionPolylineVisual::get_Color)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::DistanceReticles::DistantInteractionPolylineVisual*), "get_Color", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::DistanceReticles::DistantInteractionPolylineVisual::set_Color
// Il2CppName: set_Color
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::DistanceReticles::DistantInteractionPolylineVisual::*)(::UnityEngine::Color)>(&Oculus::Interaction::DistanceReticles::DistantInteractionPolylineVisual::set_Color)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::DistanceReticles::DistantInteractionPolylineVisual*), "set_Color", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::DistanceReticles::DistantInteractionPolylineVisual::get_LineWidth
// Il2CppName: get_LineWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::DistanceReticles::DistantInteractionPolylineVisual::*)()>(&Oculus::Interaction::DistanceReticles::DistantInteractionPolylineVisual::get_LineWidth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::DistanceReticles::DistantInteractionPolylineVisual*), "get_LineWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::DistanceReticles::DistantInteractionPolylineVisual::set_LineWidth
// Il2CppName: set_LineWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::DistanceReticles::DistantInteractionPolylineVisual::*)(float)>(&Oculus::Interaction::DistanceReticles::DistantInteractionPolylineVisual::set_LineWidth)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::DistanceReticles::DistantInteractionPolylineVisual*), "set_LineWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::DistanceReticles::DistantInteractionPolylineVisual::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::DistanceReticles::DistantInteractionPolylineVisual::*)()>(&Oculus::Interaction::DistanceReticles::DistantInteractionPolylineVisual::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::DistanceReticles::DistantInteractionPolylineVisual*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::DistanceReticles::DistantInteractionPolylineVisual::InjectAllDistantInteractionPolylineVisual
// Il2CppName: InjectAllDistantInteractionPolylineVisual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::DistanceReticles::DistantInteractionPolylineVisual::*)(::Oculus::Interaction::IDistanceInteractor*, ::UnityEngine::Color, ::UnityEngine::Material*)>(&Oculus::Interaction::DistanceReticles::DistantInteractionPolylineVisual::InjectAllDistantInteractionPolylineVisual)> {
  static const MethodInfo* get() {
    static auto* interactor = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IDistanceInteractor")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* material = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::DistanceReticles::DistantInteractionPolylineVisual*), "InjectAllDistantInteractionPolylineVisual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactor, color, material});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::DistanceReticles::DistantInteractionPolylineVisual::InjectLineColor
// Il2CppName: InjectLineColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::DistanceReticles::DistantInteractionPolylineVisual::*)(::UnityEngine::Color)>(&Oculus::Interaction::DistanceReticles::DistantInteractionPolylineVisual::InjectLineColor)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::DistanceReticles::DistantInteractionPolylineVisual*), "InjectLineColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::DistanceReticles::DistantInteractionPolylineVisual::InjectLineMaterial
// Il2CppName: InjectLineMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::DistanceReticles::DistantInteractionPolylineVisual::*)(::UnityEngine::Material*)>(&Oculus::Interaction::DistanceReticles::DistantInteractionPolylineVisual::InjectLineMaterial)> {
  static const MethodInfo* get() {
    static auto* material = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::DistanceReticles::DistantInteractionPolylineVisual*), "InjectLineMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{material});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::DistanceReticles::DistantInteractionPolylineVisual::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::DistanceReticles::DistantInteractionPolylineVisual::*)()>(&Oculus::Interaction::DistanceReticles::DistantInteractionPolylineVisual::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::DistanceReticles::DistantInteractionPolylineVisual*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::DistanceReticles::DistantInteractionPolylineVisual::RenderLine
// Il2CppName: RenderLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::DistanceReticles::DistantInteractionPolylineVisual::*)(::ArrayW<::UnityEngine::Vector3>)>(&Oculus::Interaction::DistanceReticles::DistantInteractionPolylineVisual::RenderLine)> {
  static const MethodInfo* get() {
    static auto* linePoints = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::DistanceReticles::DistantInteractionPolylineVisual*), "RenderLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{linePoints});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::DistanceReticles::DistantInteractionPolylineVisual::HideLine
// Il2CppName: HideLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::DistanceReticles::DistantInteractionPolylineVisual::*)()>(&Oculus::Interaction::DistanceReticles::DistantInteractionPolylineVisual::HideLine)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::DistanceReticles::DistantInteractionPolylineVisual*), "HideLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::DistanceReticles::DistantInteractionPolylineVisual::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
