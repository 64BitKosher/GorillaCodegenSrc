// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Oculus.Interaction.DistanceReticles.IReticleData
#include "Oculus/Interaction/DistanceReticles/IReticleData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: MeshFilter
  class MeshFilter;
  // Forward declaring type: Transform
  class Transform;
  // Skipping declaration: Vector3 because it is already included!
}
// Completed forward declares
// Type namespace: Oculus.Interaction.DistanceReticles
namespace Oculus::Interaction::DistanceReticles {
  // Forward declaring type: ReticleDataMesh
  class ReticleDataMesh;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::DistanceReticles::ReticleDataMesh);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::DistanceReticles::ReticleDataMesh*, "Oculus.Interaction.DistanceReticles", "ReticleDataMesh");
// Type namespace: Oculus.Interaction.DistanceReticles
namespace Oculus::Interaction::DistanceReticles {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.DistanceReticles.ReticleDataMesh
  // [TokenAttribute] Offset: FFFFFFFF
  class ReticleDataMesh : public ::UnityEngine::MonoBehaviour/*, public ::Oculus::Interaction::DistanceReticles::IReticleData*/ {
    public:
    public:
    // private UnityEngine.MeshFilter _filter
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::MeshFilter* filter;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshFilter*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::DistanceReticles::IReticleData
    operator ::Oculus::Interaction::DistanceReticles::IReticleData() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::DistanceReticles::IReticleData*>(this);
    }
    // Get instance field reference: private UnityEngine.MeshFilter _filter
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshFilter*& dyn__filter();
    // public UnityEngine.MeshFilter get_Filter()
    // Offset: 0x483E388
    ::UnityEngine::MeshFilter* get_Filter();
    // public System.Void set_Filter(UnityEngine.MeshFilter value)
    // Offset: 0x483E390
    void set_Filter(::UnityEngine::MeshFilter* value);
    // public UnityEngine.Transform get_Target()
    // Offset: 0x483E398
    ::UnityEngine::Transform* get_Target();
    // public UnityEngine.Vector3 ProcessHitPoint(UnityEngine.Vector3 hitPoint)
    // Offset: 0x483E3B4
    ::UnityEngine::Vector3 ProcessHitPoint(::UnityEngine::Vector3 hitPoint);
    // public System.Void .ctor()
    // Offset: 0x483E3DC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ReticleDataMesh* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::DistanceReticles::ReticleDataMesh::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ReticleDataMesh*, creationType>()));
    }
  }; // Oculus.Interaction.DistanceReticles.ReticleDataMesh
  #pragma pack(pop)
  static check_size<sizeof(ReticleDataMesh), 32 + sizeof(::UnityEngine::MeshFilter*)> __Oculus_Interaction_DistanceReticles_ReticleDataMeshSizeCheck;
  static_assert(sizeof(ReticleDataMesh) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::DistanceReticles::ReticleDataMesh::get_Filter
// Il2CppName: get_Filter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::MeshFilter* (Oculus::Interaction::DistanceReticles::ReticleDataMesh::*)()>(&Oculus::Interaction::DistanceReticles::ReticleDataMesh::get_Filter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::DistanceReticles::ReticleDataMesh*), "get_Filter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::DistanceReticles::ReticleDataMesh::set_Filter
// Il2CppName: set_Filter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::DistanceReticles::ReticleDataMesh::*)(::UnityEngine::MeshFilter*)>(&Oculus::Interaction::DistanceReticles::ReticleDataMesh::set_Filter)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "MeshFilter")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::DistanceReticles::ReticleDataMesh*), "set_Filter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::DistanceReticles::ReticleDataMesh::get_Target
// Il2CppName: get_Target
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (Oculus::Interaction::DistanceReticles::ReticleDataMesh::*)()>(&Oculus::Interaction::DistanceReticles::ReticleDataMesh::get_Target)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::DistanceReticles::ReticleDataMesh*), "get_Target", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::DistanceReticles::ReticleDataMesh::ProcessHitPoint
// Il2CppName: ProcessHitPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Oculus::Interaction::DistanceReticles::ReticleDataMesh::*)(::UnityEngine::Vector3)>(&Oculus::Interaction::DistanceReticles::ReticleDataMesh::ProcessHitPoint)> {
  static const MethodInfo* get() {
    static auto* hitPoint = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::DistanceReticles::ReticleDataMesh*), "ProcessHitPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hitPoint});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::DistanceReticles::ReticleDataMesh::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
