// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Object because it is already included!
}
// Forward declaring namespace: Oculus::Interaction::Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: IHand
  class IHand;
  // Forward declaring type: SyntheticHand
  class SyntheticHand;
}
// Forward declaring namespace: Oculus::Interaction
namespace Oculus::Interaction {
  // Forward declaring type: PokeInteractor
  class PokeInteractor;
  // Forward declaring type: InteractorStateChangeArgs
  struct InteractorStateChangeArgs;
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: HandPokeLimiterVisual
  class HandPokeLimiterVisual;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::HandPokeLimiterVisual);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::HandPokeLimiterVisual*, "Oculus.Interaction", "HandPokeLimiterVisual");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x42
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.HandPokeLimiterVisual
  // [TokenAttribute] Offset: FFFFFFFF
  class HandPokeLimiterVisual : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.Object _hand
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Object* hand;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.Input.IHand Hand
    // Size: 0x8
    // Offset: 0x28
    ::Oculus::Interaction::Input::IHand* Hand;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::IHand*) == 0x8);
    // private Oculus.Interaction.PokeInteractor _pokeInteractor
    // Size: 0x8
    // Offset: 0x30
    ::Oculus::Interaction::PokeInteractor* pokeInteractor;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::PokeInteractor*) == 0x8);
    // private Oculus.Interaction.Input.SyntheticHand _syntheticHand
    // Size: 0x8
    // Offset: 0x38
    ::Oculus::Interaction::Input::SyntheticHand* syntheticHand;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::SyntheticHand*) == 0x8);
    // private System.Boolean _isTouching
    // Size: 0x1
    // Offset: 0x40
    bool isTouching;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean _started
    // Size: 0x1
    // Offset: 0x41
    bool started;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private UnityEngine.Object _hand
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__hand();
    // Get instance field reference: private Oculus.Interaction.Input.IHand Hand
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::IHand*& dyn_Hand();
    // Get instance field reference: private Oculus.Interaction.PokeInteractor _pokeInteractor
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::PokeInteractor*& dyn__pokeInteractor();
    // Get instance field reference: private Oculus.Interaction.Input.SyntheticHand _syntheticHand
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::SyntheticHand*& dyn__syntheticHand();
    // Get instance field reference: private System.Boolean _isTouching
    [[deprecated("Use field access instead!")]] bool& dyn__isTouching();
    // Get instance field reference: protected System.Boolean _started
    [[deprecated("Use field access instead!")]] bool& dyn__started();
    // protected System.Void Awake()
    // Offset: 0x47B1FC0
    void Awake();
    // protected System.Void Start()
    // Offset: 0x47B2028
    void Start();
    // protected System.Void OnEnable()
    // Offset: 0x47B2060
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x47B21D0
    void OnDisable();
    // private System.Void HandlePassedSurfaceChanged(System.Boolean passed)
    // Offset: 0x47B237C
    void HandlePassedSurfaceChanged(bool passed);
    // private System.Void HandleStateChanged(Oculus.Interaction.InteractorStateChangeArgs args)
    // Offset: 0x47B23D4
    void HandleStateChanged(::Oculus::Interaction::InteractorStateChangeArgs args);
    // private System.Void CheckPassedSurface()
    // Offset: 0x47B2380
    void CheckPassedSurface();
    // protected System.Void LateUpdate()
    // Offset: 0x47B2404
    void LateUpdate();
    // private System.Void LockWrist()
    // Offset: 0x47B23D8
    void LockWrist();
    // private System.Void UnlockWrist()
    // Offset: 0x47B2350
    void UnlockWrist();
    // private System.Void UpdateWrist()
    // Offset: 0x47B2408
    void UpdateWrist();
    // public System.Void InjectAllHandPokeLimiterVisual(Oculus.Interaction.Input.IHand hand, Oculus.Interaction.PokeInteractor pokeInteractor, Oculus.Interaction.Input.SyntheticHand syntheticHand)
    // Offset: 0x47B25A4
    void InjectAllHandPokeLimiterVisual(::Oculus::Interaction::Input::IHand* hand, ::Oculus::Interaction::PokeInteractor* pokeInteractor, ::Oculus::Interaction::Input::SyntheticHand* syntheticHand);
    // public System.Void InjectHand(Oculus.Interaction.Input.IHand hand)
    // Offset: 0x47B25E4
    void InjectHand(::Oculus::Interaction::Input::IHand* hand);
    // public System.Void InjectPokeInteractor(Oculus.Interaction.PokeInteractor pokeInteractor)
    // Offset: 0x47B26B4
    void InjectPokeInteractor(::Oculus::Interaction::PokeInteractor* pokeInteractor);
    // public System.Void InjectSyntheticHand(Oculus.Interaction.Input.SyntheticHand syntheticHand)
    // Offset: 0x47B26BC
    void InjectSyntheticHand(::Oculus::Interaction::Input::SyntheticHand* syntheticHand);
    // public System.Void .ctor()
    // Offset: 0x47B26C4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HandPokeLimiterVisual* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::HandPokeLimiterVisual::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HandPokeLimiterVisual*, creationType>()));
    }
  }; // Oculus.Interaction.HandPokeLimiterVisual
  #pragma pack(pop)
  static check_size<sizeof(HandPokeLimiterVisual), 65 + sizeof(bool)> __Oculus_Interaction_HandPokeLimiterVisualSizeCheck;
  static_assert(sizeof(HandPokeLimiterVisual) == 0x42);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::HandPokeLimiterVisual::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandPokeLimiterVisual::*)()>(&Oculus::Interaction::HandPokeLimiterVisual::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandPokeLimiterVisual*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandPokeLimiterVisual::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandPokeLimiterVisual::*)()>(&Oculus::Interaction::HandPokeLimiterVisual::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandPokeLimiterVisual*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandPokeLimiterVisual::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandPokeLimiterVisual::*)()>(&Oculus::Interaction::HandPokeLimiterVisual::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandPokeLimiterVisual*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandPokeLimiterVisual::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandPokeLimiterVisual::*)()>(&Oculus::Interaction::HandPokeLimiterVisual::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandPokeLimiterVisual*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandPokeLimiterVisual::HandlePassedSurfaceChanged
// Il2CppName: HandlePassedSurfaceChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandPokeLimiterVisual::*)(bool)>(&Oculus::Interaction::HandPokeLimiterVisual::HandlePassedSurfaceChanged)> {
  static const MethodInfo* get() {
    static auto* passed = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandPokeLimiterVisual*), "HandlePassedSurfaceChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{passed});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandPokeLimiterVisual::HandleStateChanged
// Il2CppName: HandleStateChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandPokeLimiterVisual::*)(::Oculus::Interaction::InteractorStateChangeArgs)>(&Oculus::Interaction::HandPokeLimiterVisual::HandleStateChanged)> {
  static const MethodInfo* get() {
    static auto* args = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "InteractorStateChangeArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandPokeLimiterVisual*), "HandleStateChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{args});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandPokeLimiterVisual::CheckPassedSurface
// Il2CppName: CheckPassedSurface
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandPokeLimiterVisual::*)()>(&Oculus::Interaction::HandPokeLimiterVisual::CheckPassedSurface)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandPokeLimiterVisual*), "CheckPassedSurface", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandPokeLimiterVisual::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandPokeLimiterVisual::*)()>(&Oculus::Interaction::HandPokeLimiterVisual::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandPokeLimiterVisual*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandPokeLimiterVisual::LockWrist
// Il2CppName: LockWrist
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandPokeLimiterVisual::*)()>(&Oculus::Interaction::HandPokeLimiterVisual::LockWrist)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandPokeLimiterVisual*), "LockWrist", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandPokeLimiterVisual::UnlockWrist
// Il2CppName: UnlockWrist
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandPokeLimiterVisual::*)()>(&Oculus::Interaction::HandPokeLimiterVisual::UnlockWrist)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandPokeLimiterVisual*), "UnlockWrist", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandPokeLimiterVisual::UpdateWrist
// Il2CppName: UpdateWrist
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandPokeLimiterVisual::*)()>(&Oculus::Interaction::HandPokeLimiterVisual::UpdateWrist)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandPokeLimiterVisual*), "UpdateWrist", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandPokeLimiterVisual::InjectAllHandPokeLimiterVisual
// Il2CppName: InjectAllHandPokeLimiterVisual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandPokeLimiterVisual::*)(::Oculus::Interaction::Input::IHand*, ::Oculus::Interaction::PokeInteractor*, ::Oculus::Interaction::Input::SyntheticHand*)>(&Oculus::Interaction::HandPokeLimiterVisual::InjectAllHandPokeLimiterVisual)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHand")->byval_arg;
    static auto* pokeInteractor = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "PokeInteractor")->byval_arg;
    static auto* syntheticHand = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "SyntheticHand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandPokeLimiterVisual*), "InjectAllHandPokeLimiterVisual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand, pokeInteractor, syntheticHand});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandPokeLimiterVisual::InjectHand
// Il2CppName: InjectHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandPokeLimiterVisual::*)(::Oculus::Interaction::Input::IHand*)>(&Oculus::Interaction::HandPokeLimiterVisual::InjectHand)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandPokeLimiterVisual*), "InjectHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandPokeLimiterVisual::InjectPokeInteractor
// Il2CppName: InjectPokeInteractor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandPokeLimiterVisual::*)(::Oculus::Interaction::PokeInteractor*)>(&Oculus::Interaction::HandPokeLimiterVisual::InjectPokeInteractor)> {
  static const MethodInfo* get() {
    static auto* pokeInteractor = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "PokeInteractor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandPokeLimiterVisual*), "InjectPokeInteractor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pokeInteractor});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandPokeLimiterVisual::InjectSyntheticHand
// Il2CppName: InjectSyntheticHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::HandPokeLimiterVisual::*)(::Oculus::Interaction::Input::SyntheticHand*)>(&Oculus::Interaction::HandPokeLimiterVisual::InjectSyntheticHand)> {
  static const MethodInfo* get() {
    static auto* syntheticHand = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "SyntheticHand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::HandPokeLimiterVisual*), "InjectSyntheticHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{syntheticHand});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::HandPokeLimiterVisual::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
