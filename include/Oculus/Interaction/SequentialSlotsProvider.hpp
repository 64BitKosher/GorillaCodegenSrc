// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Oculus.Interaction.ISnapPoseDelegate
#include "Oculus/Interaction/ISnapPoseDelegate.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction
namespace Oculus::Interaction {
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Pose
  struct Pose;
  // Skipping declaration: Vector3 because it is already included!
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: SequentialSlotsProvider
  class SequentialSlotsProvider;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::SequentialSlotsProvider);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::SequentialSlotsProvider*, "Oculus.Interaction", "SequentialSlotsProvider");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x31
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.SequentialSlotsProvider
  // [TokenAttribute] Offset: FFFFFFFF
  class SequentialSlotsProvider : public ::UnityEngine::MonoBehaviour/*, public ::Oculus::Interaction::ISnapPoseDelegate*/ {
    public:
    // Nested type: ::Oculus::Interaction::SequentialSlotsProvider::$$c__DisplayClass14_0
    struct $$c__DisplayClass14_0;
    // Nested type: ::Oculus::Interaction::SequentialSlotsProvider::$$c__DisplayClass9_0
    class $$c__DisplayClass9_0;
    public:
    // private System.Collections.Generic.List`1<UnityEngine.Transform> _slots
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::UnityEngine::Transform*>* slots;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Transform*>*) == 0x8);
    // private System.Int32[] _slotInteractors
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<int> slotInteractors;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // protected System.Boolean _started
    // Size: 0x1
    // Offset: 0x30
    bool started;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::ISnapPoseDelegate
    operator ::Oculus::Interaction::ISnapPoseDelegate() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::ISnapPoseDelegate*>(this);
    }
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Transform> _slots
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Transform*>*& dyn__slots();
    // Get instance field reference: private System.Int32[] _slotInteractors
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn__slotInteractors();
    // Get instance field reference: protected System.Boolean _started
    [[deprecated("Use field access instead!")]] bool& dyn__started();
    // protected System.Void Start()
    // Offset: 0x47B8F7C
    void Start();
    // public System.Void TrackElement(System.Int32 id, UnityEngine.Pose pose)
    // Offset: 0x47B9014
    void TrackElement(int id, ::UnityEngine::Pose pose);
    // public System.Void UntrackElement(System.Int32 id)
    // Offset: 0x47B926C
    void UntrackElement(int id);
    // public System.Void SnapElement(System.Int32 id, UnityEngine.Pose pose)
    // Offset: 0x47B93A8
    void SnapElement(int id, ::UnityEngine::Pose pose);
    // public System.Void UnsnapElement(System.Int32 id)
    // Offset: 0x47B93AC
    void UnsnapElement(int id);
    // public System.Void MoveTrackedElement(System.Int32 id, UnityEngine.Pose pose)
    // Offset: 0x47B93B0
    void MoveTrackedElement(int id, ::UnityEngine::Pose pose);
    // private System.Boolean TryFindIndexForInteractor(System.Int32 id, out System.Int32 index)
    // Offset: 0x47B92BC
    bool TryFindIndexForInteractor(int id, ByRef<int> index);
    // public System.Boolean SnapPoseForElement(System.Int32 id, UnityEngine.Pose pose, out UnityEngine.Pose result)
    // Offset: 0x47B9460
    bool SnapPoseForElement(int id, ::UnityEngine::Pose pose, ByRef<::UnityEngine::Pose> result);
    // private System.Boolean TryOccupySlot(System.Int32 index)
    // Offset: 0x47B918C
    bool TryOccupySlot(int index);
    // private System.Boolean IsSlotFree(System.Int32 index)
    // Offset: 0x47B9554
    bool IsSlotFree(int index);
    // private System.Int32 FindBestSlotIndex(in UnityEngine.Vector3 target, System.Boolean freeOnly)
    // Offset: 0x47B9074
    int FindBestSlotIndex(ByRef<::UnityEngine::Vector3> target, bool freeOnly);
    // private System.Void PushSlots(System.Int32 index, System.Int32 freeSlot)
    // Offset: 0x47B958C
    void PushSlots(int index, int freeSlot);
    // private System.Void SwapSlot(System.Int32 index, System.Int32 freeSlot)
    // Offset: 0x47B95FC
    void SwapSlot(int index, int freeSlot);
    // public System.Void InjectAllSequentialSlotsProvider(System.Collections.Generic.List`1<UnityEngine.Transform> slots)
    // Offset: 0x47B9644
    void InjectAllSequentialSlotsProvider(::System::Collections::Generic::List_1<::UnityEngine::Transform*>* slots);
    // public System.Void InjectSlots(System.Collections.Generic.List`1<UnityEngine.Transform> slots)
    // Offset: 0x47B964C
    void InjectSlots(::System::Collections::Generic::List_1<::UnityEngine::Transform*>* slots);
    // public System.Void .ctor()
    // Offset: 0x47B9654
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SequentialSlotsProvider* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::SequentialSlotsProvider::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SequentialSlotsProvider*, creationType>()));
    }
    // static System.Int32 <PushSlots>g__Next|14_0(System.Int32 value, ref Oculus.Interaction.SequentialSlotsProvider/<>c__DisplayClass14_0 )
    // Offset: 0x47B95E4
    static int $PushSlots$g__Next_14_0(int value, ByRef<::Oculus::Interaction::SequentialSlotsProvider::$$c__DisplayClass14_0> param_1);
  }; // Oculus.Interaction.SequentialSlotsProvider
  #pragma pack(pop)
  static check_size<sizeof(SequentialSlotsProvider), 48 + sizeof(bool)> __Oculus_Interaction_SequentialSlotsProviderSizeCheck;
  static_assert(sizeof(SequentialSlotsProvider) == 0x31);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::SequentialSlotsProvider::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SequentialSlotsProvider::*)()>(&Oculus::Interaction::SequentialSlotsProvider::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SequentialSlotsProvider*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SequentialSlotsProvider::TrackElement
// Il2CppName: TrackElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SequentialSlotsProvider::*)(int, ::UnityEngine::Pose)>(&Oculus::Interaction::SequentialSlotsProvider::TrackElement)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* pose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SequentialSlotsProvider*), "TrackElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, pose});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SequentialSlotsProvider::UntrackElement
// Il2CppName: UntrackElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SequentialSlotsProvider::*)(int)>(&Oculus::Interaction::SequentialSlotsProvider::UntrackElement)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SequentialSlotsProvider*), "UntrackElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SequentialSlotsProvider::SnapElement
// Il2CppName: SnapElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SequentialSlotsProvider::*)(int, ::UnityEngine::Pose)>(&Oculus::Interaction::SequentialSlotsProvider::SnapElement)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* pose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SequentialSlotsProvider*), "SnapElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, pose});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SequentialSlotsProvider::UnsnapElement
// Il2CppName: UnsnapElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SequentialSlotsProvider::*)(int)>(&Oculus::Interaction::SequentialSlotsProvider::UnsnapElement)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SequentialSlotsProvider*), "UnsnapElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SequentialSlotsProvider::MoveTrackedElement
// Il2CppName: MoveTrackedElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SequentialSlotsProvider::*)(int, ::UnityEngine::Pose)>(&Oculus::Interaction::SequentialSlotsProvider::MoveTrackedElement)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* pose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SequentialSlotsProvider*), "MoveTrackedElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, pose});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SequentialSlotsProvider::TryFindIndexForInteractor
// Il2CppName: TryFindIndexForInteractor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::SequentialSlotsProvider::*)(int, ByRef<int>)>(&Oculus::Interaction::SequentialSlotsProvider::TryFindIndexForInteractor)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SequentialSlotsProvider*), "TryFindIndexForInteractor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, index});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SequentialSlotsProvider::SnapPoseForElement
// Il2CppName: SnapPoseForElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::SequentialSlotsProvider::*)(int, ::UnityEngine::Pose, ByRef<::UnityEngine::Pose>)>(&Oculus::Interaction::SequentialSlotsProvider::SnapPoseForElement)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* pose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SequentialSlotsProvider*), "SnapPoseForElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, pose, result});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SequentialSlotsProvider::TryOccupySlot
// Il2CppName: TryOccupySlot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::SequentialSlotsProvider::*)(int)>(&Oculus::Interaction::SequentialSlotsProvider::TryOccupySlot)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SequentialSlotsProvider*), "TryOccupySlot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SequentialSlotsProvider::IsSlotFree
// Il2CppName: IsSlotFree
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::SequentialSlotsProvider::*)(int)>(&Oculus::Interaction::SequentialSlotsProvider::IsSlotFree)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SequentialSlotsProvider*), "IsSlotFree", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SequentialSlotsProvider::FindBestSlotIndex
// Il2CppName: FindBestSlotIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Oculus::Interaction::SequentialSlotsProvider::*)(ByRef<::UnityEngine::Vector3>, bool)>(&Oculus::Interaction::SequentialSlotsProvider::FindBestSlotIndex)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* freeOnly = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SequentialSlotsProvider*), "FindBestSlotIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target, freeOnly});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SequentialSlotsProvider::PushSlots
// Il2CppName: PushSlots
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SequentialSlotsProvider::*)(int, int)>(&Oculus::Interaction::SequentialSlotsProvider::PushSlots)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* freeSlot = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SequentialSlotsProvider*), "PushSlots", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, freeSlot});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SequentialSlotsProvider::SwapSlot
// Il2CppName: SwapSlot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SequentialSlotsProvider::*)(int, int)>(&Oculus::Interaction::SequentialSlotsProvider::SwapSlot)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* freeSlot = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SequentialSlotsProvider*), "SwapSlot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, freeSlot});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SequentialSlotsProvider::InjectAllSequentialSlotsProvider
// Il2CppName: InjectAllSequentialSlotsProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SequentialSlotsProvider::*)(::System::Collections::Generic::List_1<::UnityEngine::Transform*>*)>(&Oculus::Interaction::SequentialSlotsProvider::InjectAllSequentialSlotsProvider)> {
  static const MethodInfo* get() {
    static auto* slots = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SequentialSlotsProvider*), "InjectAllSequentialSlotsProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{slots});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SequentialSlotsProvider::InjectSlots
// Il2CppName: InjectSlots
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SequentialSlotsProvider::*)(::System::Collections::Generic::List_1<::UnityEngine::Transform*>*)>(&Oculus::Interaction::SequentialSlotsProvider::InjectSlots)> {
  static const MethodInfo* get() {
    static auto* slots = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SequentialSlotsProvider*), "InjectSlots", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{slots});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SequentialSlotsProvider::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Interaction::SequentialSlotsProvider::$PushSlots$g__Next_14_0
// Il2CppName: <PushSlots>g__Next|14_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, ByRef<::Oculus::Interaction::SequentialSlotsProvider::$$c__DisplayClass14_0>)>(&Oculus::Interaction::SequentialSlotsProvider::$PushSlots$g__Next_14_0)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* param_1 = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "SequentialSlotsProvider/<>c__DisplayClass14_0")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SequentialSlotsProvider*), "<PushSlots>g__Next|14_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, param_1});
  }
};
