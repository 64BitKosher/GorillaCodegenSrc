// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Oculus.Interaction.Input.IAxis1D
#include "Oculus/Interaction/Input/IAxis1D.hpp"
// Including type: OVRInput/Controller
#include "GlobalNamespace/OVRInput.hpp"
// Including type: OVRInput/Button
#include "GlobalNamespace/OVRInput_Button.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction
namespace Oculus::Interaction {
  // Forward declaring type: ProgressCurve
  class ProgressCurve;
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: OVRButtonAxis1D
  class OVRButtonAxis1D;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::OVRButtonAxis1D);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::OVRButtonAxis1D*, "Oculus.Interaction", "OVRButtonAxis1D");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x54
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.OVRButtonAxis1D
  // [TokenAttribute] Offset: FFFFFFFF
  class OVRButtonAxis1D : public ::UnityEngine::MonoBehaviour/*, public ::Oculus::Interaction::Input::IAxis1D*/ {
    public:
    public:
    // private OVRInput/Controller _controller
    // Size: 0x4
    // Offset: 0x20
    ::GlobalNamespace::OVRInput::Controller controller;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRInput::Controller) == 0x4);
    // private OVRInput/Button _near
    // Size: 0x4
    // Offset: 0x24
    ::GlobalNamespace::OVRInput::Button near;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRInput::Button) == 0x4);
    // private OVRInput/Button _touch
    // Size: 0x4
    // Offset: 0x28
    ::GlobalNamespace::OVRInput::Button touch;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRInput::Button) == 0x4);
    // private OVRInput/Button _button
    // Size: 0x4
    // Offset: 0x2C
    ::GlobalNamespace::OVRInput::Button button;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRInput::Button) == 0x4);
    // private System.Single _nearValue
    // Size: 0x4
    // Offset: 0x30
    float nearValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _touchValue
    // Size: 0x4
    // Offset: 0x34
    float touchValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _buttonValue
    // Size: 0x4
    // Offset: 0x38
    float buttonValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: buttonValue and: curve
    char __padding6[0x4] = {};
    // private Oculus.Interaction.ProgressCurve _curve
    // Size: 0x8
    // Offset: 0x40
    ::Oculus::Interaction::ProgressCurve* curve;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::ProgressCurve*) == 0x8);
    // private System.Single _baseValue
    // Size: 0x4
    // Offset: 0x48
    float baseValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _value
    // Size: 0x4
    // Offset: 0x4C
    float value;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _currentTarget
    // Size: 0x4
    // Offset: 0x50
    float currentTarget;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::Input::IAxis1D
    operator ::Oculus::Interaction::Input::IAxis1D() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::Input::IAxis1D*>(this);
    }
    // Get instance field reference: private OVRInput/Controller _controller
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRInput::Controller& dyn__controller();
    // Get instance field reference: private OVRInput/Button _near
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRInput::Button& dyn__near();
    // Get instance field reference: private OVRInput/Button _touch
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRInput::Button& dyn__touch();
    // Get instance field reference: private OVRInput/Button _button
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRInput::Button& dyn__button();
    // Get instance field reference: private System.Single _nearValue
    [[deprecated("Use field access instead!")]] float& dyn__nearValue();
    // Get instance field reference: private System.Single _touchValue
    [[deprecated("Use field access instead!")]] float& dyn__touchValue();
    // Get instance field reference: private System.Single _buttonValue
    [[deprecated("Use field access instead!")]] float& dyn__buttonValue();
    // Get instance field reference: private Oculus.Interaction.ProgressCurve _curve
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::ProgressCurve*& dyn__curve();
    // Get instance field reference: private System.Single _baseValue
    [[deprecated("Use field access instead!")]] float& dyn__baseValue();
    // Get instance field reference: private System.Single _value
    [[deprecated("Use field access instead!")]] float& dyn__value();
    // Get instance field reference: private System.Single _currentTarget
    [[deprecated("Use field access instead!")]] float& dyn__currentTarget();
    // public System.Single get_NearValue()
    // Offset: 0x478D8E8
    float get_NearValue();
    // public System.Void set_NearValue(System.Single value)
    // Offset: 0x478D8F0
    void set_NearValue(float value);
    // public System.Single get_TouchValue()
    // Offset: 0x478D8F8
    float get_TouchValue();
    // public System.Void set_TouchValue(System.Single value)
    // Offset: 0x478D900
    void set_TouchValue(float value);
    // public System.Single get_ButtonValue()
    // Offset: 0x478D908
    float get_ButtonValue();
    // public System.Void set_ButtonValue(System.Single value)
    // Offset: 0x478D910
    void set_ButtonValue(float value);
    // public System.Single Value()
    // Offset: 0x478D918
    float Value();
    // private System.Single get_Target()
    // Offset: 0x478D920
    float get_Target();
    // protected System.Void Update()
    // Offset: 0x478DA00
    void Update();
    // public System.Void InjectAllOVRButtonAxis1D(OVRInput/Controller controller, OVRInput/Button near, OVRInput/Button touch, OVRInput/Button button)
    // Offset: 0x478DA64
    void InjectAllOVRButtonAxis1D(::GlobalNamespace::OVRInput::Controller controller, ::GlobalNamespace::OVRInput::Button near, ::GlobalNamespace::OVRInput::Button touch, ::GlobalNamespace::OVRInput::Button button);
    // public System.Void InjectOptionalCurve(Oculus.Interaction.ProgressCurve progressCurve)
    // Offset: 0x478DA70
    void InjectOptionalCurve(::Oculus::Interaction::ProgressCurve* progressCurve);
    // public System.Void .ctor()
    // Offset: 0x478DA78
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OVRButtonAxis1D* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::OVRButtonAxis1D::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OVRButtonAxis1D*, creationType>()));
    }
  }; // Oculus.Interaction.OVRButtonAxis1D
  #pragma pack(pop)
  static check_size<sizeof(OVRButtonAxis1D), 80 + sizeof(float)> __Oculus_Interaction_OVRButtonAxis1DSizeCheck;
  static_assert(sizeof(OVRButtonAxis1D) == 0x54);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::OVRButtonAxis1D::get_NearValue
// Il2CppName: get_NearValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::OVRButtonAxis1D::*)()>(&Oculus::Interaction::OVRButtonAxis1D::get_NearValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::OVRButtonAxis1D*), "get_NearValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::OVRButtonAxis1D::set_NearValue
// Il2CppName: set_NearValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::OVRButtonAxis1D::*)(float)>(&Oculus::Interaction::OVRButtonAxis1D::set_NearValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::OVRButtonAxis1D*), "set_NearValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::OVRButtonAxis1D::get_TouchValue
// Il2CppName: get_TouchValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::OVRButtonAxis1D::*)()>(&Oculus::Interaction::OVRButtonAxis1D::get_TouchValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::OVRButtonAxis1D*), "get_TouchValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::OVRButtonAxis1D::set_TouchValue
// Il2CppName: set_TouchValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::OVRButtonAxis1D::*)(float)>(&Oculus::Interaction::OVRButtonAxis1D::set_TouchValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::OVRButtonAxis1D*), "set_TouchValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::OVRButtonAxis1D::get_ButtonValue
// Il2CppName: get_ButtonValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::OVRButtonAxis1D::*)()>(&Oculus::Interaction::OVRButtonAxis1D::get_ButtonValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::OVRButtonAxis1D*), "get_ButtonValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::OVRButtonAxis1D::set_ButtonValue
// Il2CppName: set_ButtonValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::OVRButtonAxis1D::*)(float)>(&Oculus::Interaction::OVRButtonAxis1D::set_ButtonValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::OVRButtonAxis1D*), "set_ButtonValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::OVRButtonAxis1D::Value
// Il2CppName: Value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::OVRButtonAxis1D::*)()>(&Oculus::Interaction::OVRButtonAxis1D::Value)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::OVRButtonAxis1D*), "Value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::OVRButtonAxis1D::get_Target
// Il2CppName: get_Target
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::OVRButtonAxis1D::*)()>(&Oculus::Interaction::OVRButtonAxis1D::get_Target)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::OVRButtonAxis1D*), "get_Target", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::OVRButtonAxis1D::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::OVRButtonAxis1D::*)()>(&Oculus::Interaction::OVRButtonAxis1D::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::OVRButtonAxis1D*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::OVRButtonAxis1D::InjectAllOVRButtonAxis1D
// Il2CppName: InjectAllOVRButtonAxis1D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::OVRButtonAxis1D::*)(::GlobalNamespace::OVRInput::Controller, ::GlobalNamespace::OVRInput::Button, ::GlobalNamespace::OVRInput::Button, ::GlobalNamespace::OVRInput::Button)>(&Oculus::Interaction::OVRButtonAxis1D::InjectAllOVRButtonAxis1D)> {
  static const MethodInfo* get() {
    static auto* controller = &::il2cpp_utils::GetClassFromName("", "OVRInput/Controller")->byval_arg;
    static auto* near = &::il2cpp_utils::GetClassFromName("", "OVRInput/Button")->byval_arg;
    static auto* touch = &::il2cpp_utils::GetClassFromName("", "OVRInput/Button")->byval_arg;
    static auto* button = &::il2cpp_utils::GetClassFromName("", "OVRInput/Button")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::OVRButtonAxis1D*), "InjectAllOVRButtonAxis1D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controller, near, touch, button});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::OVRButtonAxis1D::InjectOptionalCurve
// Il2CppName: InjectOptionalCurve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::OVRButtonAxis1D::*)(::Oculus::Interaction::ProgressCurve*)>(&Oculus::Interaction::OVRButtonAxis1D::InjectOptionalCurve)> {
  static const MethodInfo* get() {
    static auto* progressCurve = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "ProgressCurve")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::OVRButtonAxis1D*), "InjectOptionalCurve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{progressCurve});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::OVRButtonAxis1D::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
