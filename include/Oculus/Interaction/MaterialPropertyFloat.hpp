// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: MaterialPropertyFloat
  struct MaterialPropertyFloat;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::MaterialPropertyFloat, "Oculus.Interaction", "MaterialPropertyFloat");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0xC
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Oculus.Interaction.MaterialPropertyFloat
  // [TokenAttribute] Offset: FFFFFFFF
  struct MaterialPropertyFloat/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.String name
    // Size: 0x8
    // Offset: 0x0
    ::StringW name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Single value
    // Size: 0x4
    // Offset: 0x8
    float value;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating value type constructor for type: MaterialPropertyFloat
    constexpr MaterialPropertyFloat(::StringW name_ = {}, float value_ = {}) noexcept : name{name_}, value{value_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.String name
    [[deprecated("Use field access instead!")]] ::StringW& dyn_name();
    // Get instance field reference: public System.Single value
    [[deprecated("Use field access instead!")]] float& dyn_value();
  }; // Oculus.Interaction.MaterialPropertyFloat
  #pragma pack(pop)
  static check_size<sizeof(MaterialPropertyFloat), 8 + sizeof(float)> __Oculus_Interaction_MaterialPropertyFloatSizeCheck;
  static_assert(sizeof(MaterialPropertyFloat) == 0xC);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
