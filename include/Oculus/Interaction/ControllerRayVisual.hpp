// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction
namespace Oculus::Interaction {
  // Forward declaring type: RayInteractor
  class RayInteractor;
  // Forward declaring type: MaterialPropertyBlockEditor
  class MaterialPropertyBlockEditor;
  // Forward declaring type: InteractorStateChangeArgs
  struct InteractorStateChangeArgs;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Renderer
  class Renderer;
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: ControllerRayVisual
  class ControllerRayVisual;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::ControllerRayVisual);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::ControllerRayVisual*, "Oculus.Interaction", "ControllerRayVisual");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x89
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.ControllerRayVisual
  // [TokenAttribute] Offset: FFFFFFFF
  class ControllerRayVisual : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private Oculus.Interaction.RayInteractor _rayInteractor
    // Size: 0x8
    // Offset: 0x20
    ::Oculus::Interaction::RayInteractor* rayInteractor;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::RayInteractor*) == 0x8);
    // private UnityEngine.Renderer _renderer
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Renderer* renderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::Renderer*) == 0x8);
    // private Oculus.Interaction.MaterialPropertyBlockEditor _materialPropertyBlockEditor
    // Size: 0x8
    // Offset: 0x30
    ::Oculus::Interaction::MaterialPropertyBlockEditor* materialPropertyBlockEditor;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::MaterialPropertyBlockEditor*) == 0x8);
    // private System.Single _maxRayVisualLength
    // Size: 0x4
    // Offset: 0x38
    float maxRayVisualLength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Color _hoverColor0
    // Size: 0x10
    // Offset: 0x3C
    ::UnityEngine::Color hoverColor0;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color _hoverColor1
    // Size: 0x10
    // Offset: 0x4C
    ::UnityEngine::Color hoverColor1;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color _selectColor0
    // Size: 0x10
    // Offset: 0x5C
    ::UnityEngine::Color selectColor0;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color _selectColor1
    // Size: 0x10
    // Offset: 0x6C
    ::UnityEngine::Color selectColor1;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private System.Boolean _hideWhenNoInteractable
    // Size: 0x1
    // Offset: 0x7C
    bool hideWhenNoInteractable;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: hideWhenNoInteractable and: shaderColor0
    char __padding8[0x3] = {};
    // private System.Int32 _shaderColor0
    // Size: 0x4
    // Offset: 0x80
    int shaderColor0;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _shaderColor1
    // Size: 0x4
    // Offset: 0x84
    int shaderColor1;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean _started
    // Size: 0x1
    // Offset: 0x88
    bool started;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private Oculus.Interaction.RayInteractor _rayInteractor
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::RayInteractor*& dyn__rayInteractor();
    // Get instance field reference: private UnityEngine.Renderer _renderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& dyn__renderer();
    // Get instance field reference: private Oculus.Interaction.MaterialPropertyBlockEditor _materialPropertyBlockEditor
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::MaterialPropertyBlockEditor*& dyn__materialPropertyBlockEditor();
    // Get instance field reference: private System.Single _maxRayVisualLength
    [[deprecated("Use field access instead!")]] float& dyn__maxRayVisualLength();
    // Get instance field reference: private UnityEngine.Color _hoverColor0
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__hoverColor0();
    // Get instance field reference: private UnityEngine.Color _hoverColor1
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__hoverColor1();
    // Get instance field reference: private UnityEngine.Color _selectColor0
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__selectColor0();
    // Get instance field reference: private UnityEngine.Color _selectColor1
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__selectColor1();
    // Get instance field reference: private System.Boolean _hideWhenNoInteractable
    [[deprecated("Use field access instead!")]] bool& dyn__hideWhenNoInteractable();
    // Get instance field reference: private System.Int32 _shaderColor0
    [[deprecated("Use field access instead!")]] int& dyn__shaderColor0();
    // Get instance field reference: private System.Int32 _shaderColor1
    [[deprecated("Use field access instead!")]] int& dyn__shaderColor1();
    // Get instance field reference: private System.Boolean _started
    [[deprecated("Use field access instead!")]] bool& dyn__started();
    // public System.Single get_MaxRayVisualLength()
    // Offset: 0x47B52C8
    float get_MaxRayVisualLength();
    // public System.Void set_MaxRayVisualLength(System.Single value)
    // Offset: 0x47B52D0
    void set_MaxRayVisualLength(float value);
    // public UnityEngine.Color get_HoverColor0()
    // Offset: 0x47B52D8
    ::UnityEngine::Color get_HoverColor0();
    // public System.Void set_HoverColor0(UnityEngine.Color value)
    // Offset: 0x47B52E4
    void set_HoverColor0(::UnityEngine::Color value);
    // public UnityEngine.Color get_HoverColor1()
    // Offset: 0x47B52F0
    ::UnityEngine::Color get_HoverColor1();
    // public System.Void set_HoverColor1(UnityEngine.Color value)
    // Offset: 0x47B52FC
    void set_HoverColor1(::UnityEngine::Color value);
    // public UnityEngine.Color get_SelectColor0()
    // Offset: 0x47B5308
    ::UnityEngine::Color get_SelectColor0();
    // public System.Void set_SelectColor0(UnityEngine.Color value)
    // Offset: 0x47B5314
    void set_SelectColor0(::UnityEngine::Color value);
    // public UnityEngine.Color get_SelectColor1()
    // Offset: 0x47B5320
    ::UnityEngine::Color get_SelectColor1();
    // public System.Void set_SelectColor1(UnityEngine.Color value)
    // Offset: 0x47B532C
    void set_SelectColor1(::UnityEngine::Color value);
    // protected System.Void Start()
    // Offset: 0x47B5338
    void Start();
    // protected System.Void OnEnable()
    // Offset: 0x47B5370
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x47B549C
    void OnDisable();
    // private System.Void HandleStateChanged(Oculus.Interaction.InteractorStateChangeArgs args)
    // Offset: 0x47B55C8
    void HandleStateChanged(::Oculus::Interaction::InteractorStateChangeArgs args);
    // private System.Void UpdateVisual()
    // Offset: 0x47B55CC
    void UpdateVisual();
    // public System.Void InjectAllControllerRayVisual(Oculus.Interaction.RayInteractor rayInteractor, UnityEngine.Renderer renderer, Oculus.Interaction.MaterialPropertyBlockEditor materialPropertyBlockEditor)
    // Offset: 0x47B58E0
    void InjectAllControllerRayVisual(::Oculus::Interaction::RayInteractor* rayInteractor, ::UnityEngine::Renderer* renderer, ::Oculus::Interaction::MaterialPropertyBlockEditor* materialPropertyBlockEditor);
    // public System.Void InjectRayInteractor(Oculus.Interaction.RayInteractor rayInteractor)
    // Offset: 0x47B5924
    void InjectRayInteractor(::Oculus::Interaction::RayInteractor* rayInteractor);
    // public System.Void InjectRenderer(UnityEngine.Renderer renderer)
    // Offset: 0x47B592C
    void InjectRenderer(::UnityEngine::Renderer* renderer);
    // public System.Void InjectMaterialPropertyBlockEditor(Oculus.Interaction.MaterialPropertyBlockEditor materialPropertyBlockEditor)
    // Offset: 0x47B5934
    void InjectMaterialPropertyBlockEditor(::Oculus::Interaction::MaterialPropertyBlockEditor* materialPropertyBlockEditor);
    // public System.Void .ctor()
    // Offset: 0x47B593C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ControllerRayVisual* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::ControllerRayVisual::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ControllerRayVisual*, creationType>()));
    }
  }; // Oculus.Interaction.ControllerRayVisual
  #pragma pack(pop)
  static check_size<sizeof(ControllerRayVisual), 136 + sizeof(bool)> __Oculus_Interaction_ControllerRayVisualSizeCheck;
  static_assert(sizeof(ControllerRayVisual) == 0x89);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::ControllerRayVisual::get_MaxRayVisualLength
// Il2CppName: get_MaxRayVisualLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::ControllerRayVisual::*)()>(&Oculus::Interaction::ControllerRayVisual::get_MaxRayVisualLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ControllerRayVisual*), "get_MaxRayVisualLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ControllerRayVisual::set_MaxRayVisualLength
// Il2CppName: set_MaxRayVisualLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ControllerRayVisual::*)(float)>(&Oculus::Interaction::ControllerRayVisual::set_MaxRayVisualLength)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ControllerRayVisual*), "set_MaxRayVisualLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ControllerRayVisual::get_HoverColor0
// Il2CppName: get_HoverColor0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (Oculus::Interaction::ControllerRayVisual::*)()>(&Oculus::Interaction::ControllerRayVisual::get_HoverColor0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ControllerRayVisual*), "get_HoverColor0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ControllerRayVisual::set_HoverColor0
// Il2CppName: set_HoverColor0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ControllerRayVisual::*)(::UnityEngine::Color)>(&Oculus::Interaction::ControllerRayVisual::set_HoverColor0)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ControllerRayVisual*), "set_HoverColor0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ControllerRayVisual::get_HoverColor1
// Il2CppName: get_HoverColor1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (Oculus::Interaction::ControllerRayVisual::*)()>(&Oculus::Interaction::ControllerRayVisual::get_HoverColor1)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ControllerRayVisual*), "get_HoverColor1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ControllerRayVisual::set_HoverColor1
// Il2CppName: set_HoverColor1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ControllerRayVisual::*)(::UnityEngine::Color)>(&Oculus::Interaction::ControllerRayVisual::set_HoverColor1)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ControllerRayVisual*), "set_HoverColor1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ControllerRayVisual::get_SelectColor0
// Il2CppName: get_SelectColor0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (Oculus::Interaction::ControllerRayVisual::*)()>(&Oculus::Interaction::ControllerRayVisual::get_SelectColor0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ControllerRayVisual*), "get_SelectColor0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ControllerRayVisual::set_SelectColor0
// Il2CppName: set_SelectColor0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ControllerRayVisual::*)(::UnityEngine::Color)>(&Oculus::Interaction::ControllerRayVisual::set_SelectColor0)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ControllerRayVisual*), "set_SelectColor0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ControllerRayVisual::get_SelectColor1
// Il2CppName: get_SelectColor1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (Oculus::Interaction::ControllerRayVisual::*)()>(&Oculus::Interaction::ControllerRayVisual::get_SelectColor1)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ControllerRayVisual*), "get_SelectColor1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ControllerRayVisual::set_SelectColor1
// Il2CppName: set_SelectColor1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ControllerRayVisual::*)(::UnityEngine::Color)>(&Oculus::Interaction::ControllerRayVisual::set_SelectColor1)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ControllerRayVisual*), "set_SelectColor1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ControllerRayVisual::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ControllerRayVisual::*)()>(&Oculus::Interaction::ControllerRayVisual::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ControllerRayVisual*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ControllerRayVisual::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ControllerRayVisual::*)()>(&Oculus::Interaction::ControllerRayVisual::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ControllerRayVisual*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ControllerRayVisual::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ControllerRayVisual::*)()>(&Oculus::Interaction::ControllerRayVisual::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ControllerRayVisual*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ControllerRayVisual::HandleStateChanged
// Il2CppName: HandleStateChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ControllerRayVisual::*)(::Oculus::Interaction::InteractorStateChangeArgs)>(&Oculus::Interaction::ControllerRayVisual::HandleStateChanged)> {
  static const MethodInfo* get() {
    static auto* args = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "InteractorStateChangeArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ControllerRayVisual*), "HandleStateChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{args});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ControllerRayVisual::UpdateVisual
// Il2CppName: UpdateVisual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ControllerRayVisual::*)()>(&Oculus::Interaction::ControllerRayVisual::UpdateVisual)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ControllerRayVisual*), "UpdateVisual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ControllerRayVisual::InjectAllControllerRayVisual
// Il2CppName: InjectAllControllerRayVisual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ControllerRayVisual::*)(::Oculus::Interaction::RayInteractor*, ::UnityEngine::Renderer*, ::Oculus::Interaction::MaterialPropertyBlockEditor*)>(&Oculus::Interaction::ControllerRayVisual::InjectAllControllerRayVisual)> {
  static const MethodInfo* get() {
    static auto* rayInteractor = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "RayInteractor")->byval_arg;
    static auto* renderer = &::il2cpp_utils::GetClassFromName("UnityEngine", "Renderer")->byval_arg;
    static auto* materialPropertyBlockEditor = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "MaterialPropertyBlockEditor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ControllerRayVisual*), "InjectAllControllerRayVisual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rayInteractor, renderer, materialPropertyBlockEditor});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ControllerRayVisual::InjectRayInteractor
// Il2CppName: InjectRayInteractor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ControllerRayVisual::*)(::Oculus::Interaction::RayInteractor*)>(&Oculus::Interaction::ControllerRayVisual::InjectRayInteractor)> {
  static const MethodInfo* get() {
    static auto* rayInteractor = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "RayInteractor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ControllerRayVisual*), "InjectRayInteractor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rayInteractor});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ControllerRayVisual::InjectRenderer
// Il2CppName: InjectRenderer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ControllerRayVisual::*)(::UnityEngine::Renderer*)>(&Oculus::Interaction::ControllerRayVisual::InjectRenderer)> {
  static const MethodInfo* get() {
    static auto* renderer = &::il2cpp_utils::GetClassFromName("UnityEngine", "Renderer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ControllerRayVisual*), "InjectRenderer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderer});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ControllerRayVisual::InjectMaterialPropertyBlockEditor
// Il2CppName: InjectMaterialPropertyBlockEditor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ControllerRayVisual::*)(::Oculus::Interaction::MaterialPropertyBlockEditor*)>(&Oculus::Interaction::ControllerRayVisual::InjectMaterialPropertyBlockEditor)> {
  static const MethodInfo* get() {
    static auto* materialPropertyBlockEditor = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "MaterialPropertyBlockEditor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ControllerRayVisual*), "InjectMaterialPropertyBlockEditor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{materialPropertyBlockEditor});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ControllerRayVisual::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
