// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.PropertyAttribute
#include "UnityEngine/PropertyAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: SectionAttribute
  class SectionAttribute;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::SectionAttribute);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::SectionAttribute*, "Oculus.Interaction", "SectionAttribute");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.SectionAttribute
  // [TokenAttribute] Offset: FFFFFFFF
  class SectionAttribute : public ::UnityEngine::PropertyAttribute {
    public:
    // Writing base type padding for base size: 0x14 to desired offset: 0x18
    char ___base_padding[0x4] = {};
    public:
    // private System.String <SectionName>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::StringW SectionName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Deleting conversion operator: operator int
    constexpr operator int() const noexcept = delete;
    // Get instance field reference: private System.String <SectionName>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$SectionName$k__BackingField();
    // public System.String get_SectionName()
    // Offset: 0x47706A4
    ::StringW get_SectionName();
    // private System.Void set_SectionName(System.String value)
    // Offset: 0x47706AC
    void set_SectionName(::StringW value);
    // public System.Void .ctor(System.String sectionName)
    // Offset: 0x47706B4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SectionAttribute* New_ctor(::StringW sectionName) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::SectionAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SectionAttribute*, creationType>(sectionName)));
    }
  }; // Oculus.Interaction.SectionAttribute
  #pragma pack(pop)
  static check_size<sizeof(SectionAttribute), 24 + sizeof(::StringW)> __Oculus_Interaction_SectionAttributeSizeCheck;
  static_assert(sizeof(SectionAttribute) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::SectionAttribute::get_SectionName
// Il2CppName: get_SectionName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Oculus::Interaction::SectionAttribute::*)()>(&Oculus::Interaction::SectionAttribute::get_SectionName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SectionAttribute*), "get_SectionName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SectionAttribute::set_SectionName
// Il2CppName: set_SectionName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::SectionAttribute::*)(::StringW)>(&Oculus::Interaction::SectionAttribute::set_SectionName)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::SectionAttribute*), "set_SectionName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::SectionAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
