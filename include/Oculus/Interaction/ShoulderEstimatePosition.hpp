// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Object because it is already included!
}
// Forward declaring namespace: Oculus::Interaction::Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: IHmd
  class IHmd;
  // Forward declaring type: IHand
  class IHand;
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: ShoulderEstimatePosition
  class ShoulderEstimatePosition;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::ShoulderEstimatePosition);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::ShoulderEstimatePosition*, "Oculus.Interaction", "ShoulderEstimatePosition");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x41
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.ShoulderEstimatePosition
  // [TokenAttribute] Offset: FFFFFFFF
  class ShoulderEstimatePosition : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.Object _hmd
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Object* hmd;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.Input.IHmd <Hmd>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    ::Oculus::Interaction::Input::IHmd* Hmd;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::IHmd*) == 0x8);
    // private UnityEngine.Object _hand
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Object* hand;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.Input.IHand <Hand>k__BackingField
    // Size: 0x8
    // Offset: 0x38
    ::Oculus::Interaction::Input::IHand* Hand;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::IHand*) == 0x8);
    // protected System.Boolean _started
    // Size: 0x1
    // Offset: 0x40
    bool started;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get static field: static private readonly UnityEngine.Vector3 ShoulderOffset
    static ::UnityEngine::Vector3 _get_ShoulderOffset();
    // Set static field: static private readonly UnityEngine.Vector3 ShoulderOffset
    static void _set_ShoulderOffset(::UnityEngine::Vector3 value);
    // Get instance field reference: private UnityEngine.Object _hmd
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__hmd();
    // Get instance field reference: private Oculus.Interaction.Input.IHmd <Hmd>k__BackingField
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::IHmd*& dyn_$Hmd$k__BackingField();
    // Get instance field reference: private UnityEngine.Object _hand
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__hand();
    // Get instance field reference: private Oculus.Interaction.Input.IHand <Hand>k__BackingField
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::IHand*& dyn_$Hand$k__BackingField();
    // Get instance field reference: protected System.Boolean _started
    [[deprecated("Use field access instead!")]] bool& dyn__started();
    // private Oculus.Interaction.Input.IHmd get_Hmd()
    // Offset: 0x47D4428
    ::Oculus::Interaction::Input::IHmd* get_Hmd();
    // private System.Void set_Hmd(Oculus.Interaction.Input.IHmd value)
    // Offset: 0x47D4430
    void set_Hmd(::Oculus::Interaction::Input::IHmd* value);
    // private Oculus.Interaction.Input.IHand get_Hand()
    // Offset: 0x47D4438
    ::Oculus::Interaction::Input::IHand* get_Hand();
    // private System.Void set_Hand(Oculus.Interaction.Input.IHand value)
    // Offset: 0x47D4440
    void set_Hand(::Oculus::Interaction::Input::IHand* value);
    // protected System.Void Awake()
    // Offset: 0x47D4448
    void Awake();
    // protected System.Void Start()
    // Offset: 0x47D44D8
    void Start();
    // protected System.Void OnEnable()
    // Offset: 0x47D4510
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x47D4600
    void OnDisable();
    // protected System.Void HandleHmdUpdated()
    // Offset: 0x47D46F0
    void HandleHmdUpdated();
    // public System.Void InjectAllShoulderPosition(Oculus.Interaction.Input.IHmd hmd, Oculus.Interaction.Input.IHand hand)
    // Offset: 0x47D49D4
    void InjectAllShoulderPosition(::Oculus::Interaction::Input::IHmd* hmd, ::Oculus::Interaction::Input::IHand* hand);
    // public System.Void InjectHmd(Oculus.Interaction.Input.IHmd hmd)
    // Offset: 0x47D49FC
    void InjectHmd(::Oculus::Interaction::Input::IHmd* hmd);
    // public System.Void InjectHand(Oculus.Interaction.Input.IHand hand)
    // Offset: 0x47D4ACC
    void InjectHand(::Oculus::Interaction::Input::IHand* hand);
    // public System.Void .ctor()
    // Offset: 0x47D4B9C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ShoulderEstimatePosition* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::ShoulderEstimatePosition::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ShoulderEstimatePosition*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x47D4BA4
    static void _cctor();
  }; // Oculus.Interaction.ShoulderEstimatePosition
  #pragma pack(pop)
  static check_size<sizeof(ShoulderEstimatePosition), 64 + sizeof(bool)> __Oculus_Interaction_ShoulderEstimatePositionSizeCheck;
  static_assert(sizeof(ShoulderEstimatePosition) == 0x41);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::ShoulderEstimatePosition::get_Hmd
// Il2CppName: get_Hmd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Input::IHmd* (Oculus::Interaction::ShoulderEstimatePosition::*)()>(&Oculus::Interaction::ShoulderEstimatePosition::get_Hmd)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ShoulderEstimatePosition*), "get_Hmd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ShoulderEstimatePosition::set_Hmd
// Il2CppName: set_Hmd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ShoulderEstimatePosition::*)(::Oculus::Interaction::Input::IHmd*)>(&Oculus::Interaction::ShoulderEstimatePosition::set_Hmd)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHmd")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ShoulderEstimatePosition*), "set_Hmd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ShoulderEstimatePosition::get_Hand
// Il2CppName: get_Hand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Input::IHand* (Oculus::Interaction::ShoulderEstimatePosition::*)()>(&Oculus::Interaction::ShoulderEstimatePosition::get_Hand)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ShoulderEstimatePosition*), "get_Hand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ShoulderEstimatePosition::set_Hand
// Il2CppName: set_Hand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ShoulderEstimatePosition::*)(::Oculus::Interaction::Input::IHand*)>(&Oculus::Interaction::ShoulderEstimatePosition::set_Hand)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ShoulderEstimatePosition*), "set_Hand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ShoulderEstimatePosition::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ShoulderEstimatePosition::*)()>(&Oculus::Interaction::ShoulderEstimatePosition::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ShoulderEstimatePosition*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ShoulderEstimatePosition::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ShoulderEstimatePosition::*)()>(&Oculus::Interaction::ShoulderEstimatePosition::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ShoulderEstimatePosition*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ShoulderEstimatePosition::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ShoulderEstimatePosition::*)()>(&Oculus::Interaction::ShoulderEstimatePosition::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ShoulderEstimatePosition*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ShoulderEstimatePosition::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ShoulderEstimatePosition::*)()>(&Oculus::Interaction::ShoulderEstimatePosition::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ShoulderEstimatePosition*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ShoulderEstimatePosition::HandleHmdUpdated
// Il2CppName: HandleHmdUpdated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ShoulderEstimatePosition::*)()>(&Oculus::Interaction::ShoulderEstimatePosition::HandleHmdUpdated)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ShoulderEstimatePosition*), "HandleHmdUpdated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ShoulderEstimatePosition::InjectAllShoulderPosition
// Il2CppName: InjectAllShoulderPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ShoulderEstimatePosition::*)(::Oculus::Interaction::Input::IHmd*, ::Oculus::Interaction::Input::IHand*)>(&Oculus::Interaction::ShoulderEstimatePosition::InjectAllShoulderPosition)> {
  static const MethodInfo* get() {
    static auto* hmd = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHmd")->byval_arg;
    static auto* hand = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ShoulderEstimatePosition*), "InjectAllShoulderPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hmd, hand});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ShoulderEstimatePosition::InjectHmd
// Il2CppName: InjectHmd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ShoulderEstimatePosition::*)(::Oculus::Interaction::Input::IHmd*)>(&Oculus::Interaction::ShoulderEstimatePosition::InjectHmd)> {
  static const MethodInfo* get() {
    static auto* hmd = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHmd")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ShoulderEstimatePosition*), "InjectHmd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hmd});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ShoulderEstimatePosition::InjectHand
// Il2CppName: InjectHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::ShoulderEstimatePosition::*)(::Oculus::Interaction::Input::IHand*)>(&Oculus::Interaction::ShoulderEstimatePosition::InjectHand)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ShoulderEstimatePosition*), "InjectHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::ShoulderEstimatePosition::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Interaction::ShoulderEstimatePosition::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Oculus::Interaction::ShoulderEstimatePosition::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::ShoulderEstimatePosition*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
