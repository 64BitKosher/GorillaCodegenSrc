// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Oculus.Interaction.HandGrab.IHandGrabUseDelegate
#include "Oculus/Interaction/HandGrab/IHandGrabUseDelegate.hpp"
// Including type: UnityEngine.Pose
#include "UnityEngine/Pose.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction
namespace Oculus::Interaction {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Rigidbody
  class Rigidbody;
}
// Forward declaring namespace: Oculus::Interaction::HandGrab
namespace Oculus::Interaction::HandGrab {
  // Forward declaring type: HandGrabInteractable
  class HandGrabInteractable;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: PressureBreakable
  class PressureBreakable;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::PressureBreakable);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::PressureBreakable*, "Oculus.Interaction", "PressureBreakable");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.PressureBreakable
  // [TokenAttribute] Offset: FFFFFFFF
  class PressureBreakable : public ::UnityEngine::MonoBehaviour/*, public ::Oculus::Interaction::HandGrab::IHandGrabUseDelegate*/ {
    public:
    // Nested type: ::Oculus::Interaction::PressureBreakable::$Unbreak$d__18
    class $Unbreak$d__18;
    public:
    // private System.Single _breakThreshold
    // Size: 0x4
    // Offset: 0x20
    float breakThreshold;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: breakThreshold and: unbrokenObject
    char __padding0[0x4] = {};
    // private UnityEngine.GameObject _unbrokenObject
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::GameObject* unbrokenObject;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject _brokenObject
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::GameObject* brokenObject;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.Rigidbody[] _brokenBodies
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<::UnityEngine::Rigidbody*> brokenBodies;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Rigidbody*>) == 0x8);
    // private Oculus.Interaction.HandGrab.HandGrabInteractable[] _grabInteractables
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<::Oculus::Interaction::HandGrab::HandGrabInteractable*> grabInteractables;
    // Field size check
    static_assert(sizeof(::ArrayW<::Oculus::Interaction::HandGrab::HandGrabInteractable*>) == 0x8);
    // private System.Single _explosionForce
    // Size: 0x4
    // Offset: 0x48
    float explosionForce;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _explosionRadius
    // Size: 0x4
    // Offset: 0x4C
    float explosionRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _unbreakDelay
    // Size: 0x4
    // Offset: 0x50
    float unbreakDelay;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _useStrength
    // Size: 0x4
    // Offset: 0x54
    float useStrength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _isBroken
    // Size: 0x1
    // Offset: 0x58
    bool isBroken;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isBroken and: brokenBodiesInitialPoses
    char __padding9[0x7] = {};
    // private UnityEngine.Pose[] _brokenBodiesInitialPoses
    // Size: 0x8
    // Offset: 0x60
    ::ArrayW<::UnityEngine::Pose> brokenBodiesInitialPoses;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Pose>) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::HandGrab::IHandGrabUseDelegate
    operator ::Oculus::Interaction::HandGrab::IHandGrabUseDelegate() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::HandGrab::IHandGrabUseDelegate*>(this);
    }
    // Get instance field reference: private System.Single _breakThreshold
    [[deprecated("Use field access instead!")]] float& dyn__breakThreshold();
    // Get instance field reference: private UnityEngine.GameObject _unbrokenObject
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn__unbrokenObject();
    // Get instance field reference: private UnityEngine.GameObject _brokenObject
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn__brokenObject();
    // Get instance field reference: private UnityEngine.Rigidbody[] _brokenBodies
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Rigidbody*>& dyn__brokenBodies();
    // Get instance field reference: private Oculus.Interaction.HandGrab.HandGrabInteractable[] _grabInteractables
    [[deprecated("Use field access instead!")]] ::ArrayW<::Oculus::Interaction::HandGrab::HandGrabInteractable*>& dyn__grabInteractables();
    // Get instance field reference: private System.Single _explosionForce
    [[deprecated("Use field access instead!")]] float& dyn__explosionForce();
    // Get instance field reference: private System.Single _explosionRadius
    [[deprecated("Use field access instead!")]] float& dyn__explosionRadius();
    // Get instance field reference: private System.Single _unbreakDelay
    [[deprecated("Use field access instead!")]] float& dyn__unbreakDelay();
    // Get instance field reference: private System.Single _useStrength
    [[deprecated("Use field access instead!")]] float& dyn__useStrength();
    // Get instance field reference: private System.Boolean _isBroken
    [[deprecated("Use field access instead!")]] bool& dyn__isBroken();
    // Get instance field reference: private UnityEngine.Pose[] _brokenBodiesInitialPoses
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Pose>& dyn__brokenBodiesInitialPoses();
    // protected System.Void Awake()
    // Offset: 0x47988CC
    void Awake();
    // protected System.Void Start()
    // Offset: 0x479890C
    void Start();
    // protected System.Void Update()
    // Offset: 0x4798AA0
    void Update();
    // public System.Void BeginUse()
    // Offset: 0x4798C5C
    void BeginUse();
    // public System.Void EndUse()
    // Offset: 0x4798C60
    void EndUse();
    // public System.Single ComputeUseStrength(System.Single strength)
    // Offset: 0x4798C68
    float ComputeUseStrength(float strength);
    // private System.Void Break()
    // Offset: 0x4798AB8
    void Break();
    // private System.Collections.IEnumerator Unbreak()
    // Offset: 0x4798C70
    ::System::Collections::IEnumerator* Unbreak();
    // public System.Void .ctor()
    // Offset: 0x4798D04
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PressureBreakable* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::PressureBreakable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PressureBreakable*, creationType>()));
    }
  }; // Oculus.Interaction.PressureBreakable
  #pragma pack(pop)
  static check_size<sizeof(PressureBreakable), 96 + sizeof(::ArrayW<::UnityEngine::Pose>)> __Oculus_Interaction_PressureBreakableSizeCheck;
  static_assert(sizeof(PressureBreakable) == 0x68);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::PressureBreakable::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PressureBreakable::*)()>(&Oculus::Interaction::PressureBreakable::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PressureBreakable*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PressureBreakable::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PressureBreakable::*)()>(&Oculus::Interaction::PressureBreakable::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PressureBreakable*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PressureBreakable::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PressureBreakable::*)()>(&Oculus::Interaction::PressureBreakable::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PressureBreakable*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PressureBreakable::BeginUse
// Il2CppName: BeginUse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PressureBreakable::*)()>(&Oculus::Interaction::PressureBreakable::BeginUse)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PressureBreakable*), "BeginUse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PressureBreakable::EndUse
// Il2CppName: EndUse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PressureBreakable::*)()>(&Oculus::Interaction::PressureBreakable::EndUse)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PressureBreakable*), "EndUse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PressureBreakable::ComputeUseStrength
// Il2CppName: ComputeUseStrength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::PressureBreakable::*)(float)>(&Oculus::Interaction::PressureBreakable::ComputeUseStrength)> {
  static const MethodInfo* get() {
    static auto* strength = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PressureBreakable*), "ComputeUseStrength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{strength});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PressureBreakable::Break
// Il2CppName: Break
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::PressureBreakable::*)()>(&Oculus::Interaction::PressureBreakable::Break)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PressureBreakable*), "Break", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PressureBreakable::Unbreak
// Il2CppName: Unbreak
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (Oculus::Interaction::PressureBreakable::*)()>(&Oculus::Interaction::PressureBreakable::Unbreak)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::PressureBreakable*), "Unbreak", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::PressureBreakable::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
