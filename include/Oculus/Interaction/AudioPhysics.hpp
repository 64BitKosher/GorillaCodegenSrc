// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Oculus.Interaction.ImpactAudio
#include "Oculus/Interaction/ImpactAudio.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction
namespace Oculus::Interaction {
  // Forward declaring type: AudioTrigger
  class AudioTrigger;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Rigidbody
  class Rigidbody;
  // Forward declaring type: Collision
  class Collision;
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: AudioPhysics
  class AudioPhysics;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::AudioPhysics);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::AudioPhysics*, "Oculus.Interaction", "AudioPhysics");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.AudioPhysics
  // [TokenAttribute] Offset: FFFFFFFF
  class AudioPhysics : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::Oculus::Interaction::AudioPhysics::CollisionEvents
    class CollisionEvents;
    public:
    // private UnityEngine.Rigidbody _rigidbody
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Rigidbody* rigidbody;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rigidbody*) == 0x8);
    // private Oculus.Interaction.ImpactAudio _impactAudioEvents
    // Size: 0x10
    // Offset: 0x28
    ::Oculus::Interaction::ImpactAudio impactAudioEvents;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::ImpactAudio) == 0x10);
    // private System.Single _velocitySplit
    // Size: 0x4
    // Offset: 0x38
    float velocitySplit;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _minimumVelocity
    // Size: 0x4
    // Offset: 0x3C
    float minimumVelocity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _timeBetweenCollisions
    // Size: 0x4
    // Offset: 0x40
    float timeBetweenCollisions;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _allowMultipleCollisions
    // Size: 0x1
    // Offset: 0x44
    bool allowMultipleCollisions;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: allowMultipleCollisions and: timeAtLastCollision
    char __padding5[0x3] = {};
    // private System.Single _timeAtLastCollision
    // Size: 0x4
    // Offset: 0x48
    float timeAtLastCollision;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Boolean _started
    // Size: 0x1
    // Offset: 0x4C
    bool started;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: started and: collisionEvents
    char __padding7[0x3] = {};
    // private Oculus.Interaction.AudioPhysics/CollisionEvents _collisionEvents
    // Size: 0x8
    // Offset: 0x50
    ::Oculus::Interaction::AudioPhysics::CollisionEvents* collisionEvents;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::AudioPhysics::CollisionEvents*) == 0x8);
    public:
    // Get instance field reference: private UnityEngine.Rigidbody _rigidbody
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rigidbody*& dyn__rigidbody();
    // Get instance field reference: private Oculus.Interaction.ImpactAudio _impactAudioEvents
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::ImpactAudio& dyn__impactAudioEvents();
    // Get instance field reference: private System.Single _velocitySplit
    [[deprecated("Use field access instead!")]] float& dyn__velocitySplit();
    // Get instance field reference: private System.Single _minimumVelocity
    [[deprecated("Use field access instead!")]] float& dyn__minimumVelocity();
    // Get instance field reference: private System.Single _timeBetweenCollisions
    [[deprecated("Use field access instead!")]] float& dyn__timeBetweenCollisions();
    // Get instance field reference: private System.Boolean _allowMultipleCollisions
    [[deprecated("Use field access instead!")]] bool& dyn__allowMultipleCollisions();
    // Get instance field reference: private System.Single _timeAtLastCollision
    [[deprecated("Use field access instead!")]] float& dyn__timeAtLastCollision();
    // Get instance field reference: protected System.Boolean _started
    [[deprecated("Use field access instead!")]] bool& dyn__started();
    // Get instance field reference: private Oculus.Interaction.AudioPhysics/CollisionEvents _collisionEvents
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::AudioPhysics::CollisionEvents*& dyn__collisionEvents();
    // protected System.Void Start()
    // Offset: 0x4797CB4
    void Start();
    // protected System.Void OnEnable()
    // Offset: 0x4797D48
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x4797E90
    void OnDisable();
    // protected System.Void OnDestroy()
    // Offset: 0x4797FD8
    void OnDestroy();
    // private System.Void HandleCollisionEnter(UnityEngine.Collision collision)
    // Offset: 0x4798068
    void HandleCollisionEnter(::UnityEngine::Collision* collision);
    // private System.Void TryPlayCollisionAudio(UnityEngine.Collision collision, UnityEngine.Rigidbody rigidbody)
    // Offset: 0x479806C
    void TryPlayCollisionAudio(::UnityEngine::Collision* collision, ::UnityEngine::Rigidbody* rigidbody);
    // private System.Void PlayCollisionAudio(Oculus.Interaction.ImpactAudio impactAudio, System.Single magnitude)
    // Offset: 0x4798218
    void PlayCollisionAudio(::Oculus::Interaction::ImpactAudio impactAudio, float magnitude);
    // static private System.Single GetObjectVelocity(Oculus.Interaction.AudioPhysics target)
    // Offset: 0x47981E0
    static float GetObjectVelocity(::Oculus::Interaction::AudioPhysics* target);
    // private System.Void PlaySoundOnAudioTrigger(Oculus.Interaction.AudioTrigger audioTrigger)
    // Offset: 0x4798318
    void PlaySoundOnAudioTrigger(::Oculus::Interaction::AudioTrigger* audioTrigger);
    // public System.Void .ctor()
    // Offset: 0x47984B0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AudioPhysics* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::AudioPhysics::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AudioPhysics*, creationType>()));
    }
  }; // Oculus.Interaction.AudioPhysics
  #pragma pack(pop)
  static check_size<sizeof(AudioPhysics), 80 + sizeof(::Oculus::Interaction::AudioPhysics::CollisionEvents*)> __Oculus_Interaction_AudioPhysicsSizeCheck;
  static_assert(sizeof(AudioPhysics) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::AudioPhysics::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::AudioPhysics::*)()>(&Oculus::Interaction::AudioPhysics::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::AudioPhysics*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::AudioPhysics::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::AudioPhysics::*)()>(&Oculus::Interaction::AudioPhysics::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::AudioPhysics*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::AudioPhysics::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::AudioPhysics::*)()>(&Oculus::Interaction::AudioPhysics::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::AudioPhysics*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::AudioPhysics::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::AudioPhysics::*)()>(&Oculus::Interaction::AudioPhysics::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::AudioPhysics*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::AudioPhysics::HandleCollisionEnter
// Il2CppName: HandleCollisionEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::AudioPhysics::*)(::UnityEngine::Collision*)>(&Oculus::Interaction::AudioPhysics::HandleCollisionEnter)> {
  static const MethodInfo* get() {
    static auto* collision = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collision")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::AudioPhysics*), "HandleCollisionEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{collision});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::AudioPhysics::TryPlayCollisionAudio
// Il2CppName: TryPlayCollisionAudio
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::AudioPhysics::*)(::UnityEngine::Collision*, ::UnityEngine::Rigidbody*)>(&Oculus::Interaction::AudioPhysics::TryPlayCollisionAudio)> {
  static const MethodInfo* get() {
    static auto* collision = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collision")->byval_arg;
    static auto* rigidbody = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rigidbody")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::AudioPhysics*), "TryPlayCollisionAudio", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{collision, rigidbody});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::AudioPhysics::PlayCollisionAudio
// Il2CppName: PlayCollisionAudio
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::AudioPhysics::*)(::Oculus::Interaction::ImpactAudio, float)>(&Oculus::Interaction::AudioPhysics::PlayCollisionAudio)> {
  static const MethodInfo* get() {
    static auto* impactAudio = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "ImpactAudio")->byval_arg;
    static auto* magnitude = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::AudioPhysics*), "PlayCollisionAudio", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{impactAudio, magnitude});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::AudioPhysics::GetObjectVelocity
// Il2CppName: GetObjectVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::Oculus::Interaction::AudioPhysics*)>(&Oculus::Interaction::AudioPhysics::GetObjectVelocity)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "AudioPhysics")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::AudioPhysics*), "GetObjectVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::AudioPhysics::PlaySoundOnAudioTrigger
// Il2CppName: PlaySoundOnAudioTrigger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::AudioPhysics::*)(::Oculus::Interaction::AudioTrigger*)>(&Oculus::Interaction::AudioPhysics::PlaySoundOnAudioTrigger)> {
  static const MethodInfo* get() {
    static auto* audioTrigger = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "AudioTrigger")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::AudioPhysics*), "PlaySoundOnAudioTrigger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{audioTrigger});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::AudioPhysics::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
