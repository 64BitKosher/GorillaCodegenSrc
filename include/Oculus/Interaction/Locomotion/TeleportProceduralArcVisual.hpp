// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: Oculus.Interaction.TubePoint
#include "Oculus/Interaction/TubePoint.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction::Locomotion
namespace Oculus::Interaction::Locomotion {
  // Forward declaring type: TeleportInteractor
  class TeleportInteractor;
  // Forward declaring type: TeleportInteractable
  class TeleportInteractable;
}
// Forward declaring namespace: Oculus::Interaction
namespace Oculus::Interaction {
  // Forward declaring type: TubeRenderer
  class TubeRenderer;
  // Forward declaring type: PinchPointerVisual
  class PinchPointerVisual;
  // Forward declaring type: InteractorStateChangeArgs
  struct InteractorStateChangeArgs;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Skipping declaration: Object because it is already included!
  // Forward declaring type: Pose
  struct Pose;
  // Skipping declaration: Vector3 because it is already included!
}
// Forward declaring namespace: Oculus::Interaction::Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: IAxis1D
  class IAxis1D;
}
// Forward declaring namespace: Oculus::Interaction::DistanceReticles
namespace Oculus::Interaction::DistanceReticles {
  // Forward declaring type: IReticleData
  class IReticleData;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.Locomotion
namespace Oculus::Interaction::Locomotion {
  // Forward declaring type: TeleportProceduralArcVisual
  class TeleportProceduralArcVisual;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Locomotion::TeleportProceduralArcVisual);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Locomotion::TeleportProceduralArcVisual*, "Oculus.Interaction.Locomotion", "TeleportProceduralArcVisual");
// Type namespace: Oculus.Interaction.Locomotion
namespace Oculus::Interaction::Locomotion {
  // Size: 0x79
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.Locomotion.TeleportProceduralArcVisual
  // [TokenAttribute] Offset: FFFFFFFF
  class TeleportProceduralArcVisual : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private Oculus.Interaction.Locomotion.TeleportInteractor _interactor
    // Size: 0x8
    // Offset: 0x20
    ::Oculus::Interaction::Locomotion::TeleportInteractor* interactor;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Locomotion::TeleportInteractor*) == 0x8);
    // private Oculus.Interaction.TubeRenderer _tubeRenderer
    // Size: 0x8
    // Offset: 0x28
    ::Oculus::Interaction::TubeRenderer* tubeRenderer;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::TubeRenderer*) == 0x8);
    // private Oculus.Interaction.PinchPointerVisual _pointer
    // Size: 0x8
    // Offset: 0x30
    ::Oculus::Interaction::PinchPointerVisual* pointer;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::PinchPointerVisual*) == 0x8);
    // private UnityEngine.Transform _pointerAnchor
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Transform* pointerAnchor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Object _progress
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Object* progress;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.Input.IAxis1D Progress
    // Size: 0x8
    // Offset: 0x48
    ::Oculus::Interaction::Input::IAxis1D* Progress;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::IAxis1D*) == 0x8);
    // private System.Int32 _arcPointsCount
    // Size: 0x4
    // Offset: 0x50
    int arcPointsCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Color _noDestinationTint
    // Size: 0x10
    // Offset: 0x54
    ::UnityEngine::Color noDestinationTint;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // Padding between fields: noDestinationTint and: arcPoints
    char __padding7[0x4] = {};
    // private Oculus.Interaction.TubePoint[] _arcPoints
    // Size: 0x8
    // Offset: 0x68
    ::ArrayW<::Oculus::Interaction::TubePoint> arcPoints;
    // Field size check
    static_assert(sizeof(::ArrayW<::Oculus::Interaction::TubePoint>) == 0x8);
    // private Oculus.Interaction.DistanceReticles.IReticleData _reticleData
    // Size: 0x8
    // Offset: 0x70
    ::Oculus::Interaction::DistanceReticles::IReticleData* reticleData;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::DistanceReticles::IReticleData*) == 0x8);
    // protected System.Boolean _started
    // Size: 0x1
    // Offset: 0x78
    bool started;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get static field: static private System.Single[,] MIDPOINT_FACTOR
    static ::ArrayW<float> _get_MIDPOINT_FACTOR();
    // Set static field: static private System.Single[,] MIDPOINT_FACTOR
    static void _set_MIDPOINT_FACTOR(::ArrayW<float> value);
    // Get instance field reference: private Oculus.Interaction.Locomotion.TeleportInteractor _interactor
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Locomotion::TeleportInteractor*& dyn__interactor();
    // Get instance field reference: private Oculus.Interaction.TubeRenderer _tubeRenderer
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::TubeRenderer*& dyn__tubeRenderer();
    // Get instance field reference: private Oculus.Interaction.PinchPointerVisual _pointer
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::PinchPointerVisual*& dyn__pointer();
    // Get instance field reference: private UnityEngine.Transform _pointerAnchor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__pointerAnchor();
    // Get instance field reference: private UnityEngine.Object _progress
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__progress();
    // Get instance field reference: private Oculus.Interaction.Input.IAxis1D Progress
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::IAxis1D*& dyn_Progress();
    // Get instance field reference: private System.Int32 _arcPointsCount
    [[deprecated("Use field access instead!")]] int& dyn__arcPointsCount();
    // Get instance field reference: private UnityEngine.Color _noDestinationTint
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__noDestinationTint();
    // Get instance field reference: private Oculus.Interaction.TubePoint[] _arcPoints
    [[deprecated("Use field access instead!")]] ::ArrayW<::Oculus::Interaction::TubePoint>& dyn__arcPoints();
    // Get instance field reference: private Oculus.Interaction.DistanceReticles.IReticleData _reticleData
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::DistanceReticles::IReticleData*& dyn__reticleData();
    // Get instance field reference: protected System.Boolean _started
    [[deprecated("Use field access instead!")]] bool& dyn__started();
    // public System.Int32 get_ArcPointsCount()
    // Offset: 0x480C0B4
    int get_ArcPointsCount();
    // public System.Void set_ArcPointsCount(System.Int32 value)
    // Offset: 0x480C0BC
    void set_ArcPointsCount(int value);
    // public UnityEngine.Color get_NoDestinationTint()
    // Offset: 0x480C0C4
    ::UnityEngine::Color get_NoDestinationTint();
    // public System.Void set_NoDestinationTint(UnityEngine.Color value)
    // Offset: 0x480C0D0
    void set_NoDestinationTint(::UnityEngine::Color value);
    // protected System.Void Awake()
    // Offset: 0x480C0DC
    void Awake();
    // protected System.Void Start()
    // Offset: 0x480C144
    void Start();
    // protected System.Void OnEnable()
    // Offset: 0x480C1CC
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x480C470
    void OnDisable();
    // private System.Void HandleInteractableSet(Oculus.Interaction.Locomotion.TeleportInteractable interactable)
    // Offset: 0x480C71C
    void HandleInteractableSet(::Oculus::Interaction::Locomotion::TeleportInteractable* interactable);
    // private System.Void HandleInteractableUnset(Oculus.Interaction.Locomotion.TeleportInteractable obj)
    // Offset: 0x480C7D0
    void HandleInteractableUnset(::Oculus::Interaction::Locomotion::TeleportInteractable* obj);
    // private System.Void HandleInteractorStateChanged(Oculus.Interaction.InteractorStateChangeArgs stateChange)
    // Offset: 0x480C7DC
    void HandleInteractorStateChanged(::Oculus::Interaction::InteractorStateChangeArgs stateChange);
    // private System.Void HandleInteractorPostProcessed()
    // Offset: 0x480C80C
    void HandleInteractorPostProcessed();
    // private System.Void UpdatePointer(UnityEngine.Color tint)
    // Offset: 0x480D13C
    void UpdatePointer(::UnityEngine::Color tint);
    // private System.Void UpdateVisualArcPoints(UnityEngine.Pose origin, UnityEngine.Vector3 target)
    // Offset: 0x480CAF0
    void UpdateVisualArcPoints(::UnityEngine::Pose origin, ::UnityEngine::Vector3 target);
    // static private UnityEngine.Vector3 EvaluateBezierArc(UnityEngine.Vector3 start, UnityEngine.Vector3 middle, UnityEngine.Vector3 end, System.Single t)
    // Offset: 0x480D4D8
    static ::UnityEngine::Vector3 EvaluateBezierArc(::UnityEngine::Vector3 start, ::UnityEngine::Vector3 middle, ::UnityEngine::Vector3 end, float t);
    // static private System.Single CalculateMidpointFactor(System.Single pitchDot)
    // Offset: 0x480D2C8
    static float CalculateMidpointFactor(float pitchDot);
    // public System.Void InjectAllTeleportProceduralArcVisual(Oculus.Interaction.Locomotion.TeleportInteractor interactor)
    // Offset: 0x480D65C
    void InjectAllTeleportProceduralArcVisual(::Oculus::Interaction::Locomotion::TeleportInteractor* interactor);
    // public System.Void InjectTeleportInteractor(Oculus.Interaction.Locomotion.TeleportInteractor interactor)
    // Offset: 0x480D664
    void InjectTeleportInteractor(::Oculus::Interaction::Locomotion::TeleportInteractor* interactor);
    // public System.Void InjectOptionalProgress(Oculus.Interaction.Input.IAxis1D progress)
    // Offset: 0x480D66C
    void InjectOptionalProgress(::Oculus::Interaction::Input::IAxis1D* progress);
    // public System.Void InjectOptionalPointer(Oculus.Interaction.PinchPointerVisual pointer)
    // Offset: 0x480D73C
    void InjectOptionalPointer(::Oculus::Interaction::PinchPointerVisual* pointer);
    // public System.Void InjectOptionalPointerAnchor(UnityEngine.Transform pointerAnchor)
    // Offset: 0x480D744
    void InjectOptionalPointerAnchor(::UnityEngine::Transform* pointerAnchor);
    // public System.Void .ctor()
    // Offset: 0x480D74C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TeleportProceduralArcVisual* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Locomotion::TeleportProceduralArcVisual::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TeleportProceduralArcVisual*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x480D768
    static void _cctor();
    // static System.Single <CalculateMidpointFactor>g__Interpolate|29_0(System.Single angle, System.Int32 fromIndex, System.Int32 toIndex)
    // Offset: 0x480D54C
    static float $CalculateMidpointFactor$g__Interpolate_29_0(float angle, int fromIndex, int toIndex);
  }; // Oculus.Interaction.Locomotion.TeleportProceduralArcVisual
  #pragma pack(pop)
  static check_size<sizeof(TeleportProceduralArcVisual), 120 + sizeof(bool)> __Oculus_Interaction_Locomotion_TeleportProceduralArcVisualSizeCheck;
  static_assert(sizeof(TeleportProceduralArcVisual) == 0x79);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportProceduralArcVisual::get_ArcPointsCount
// Il2CppName: get_ArcPointsCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Oculus::Interaction::Locomotion::TeleportProceduralArcVisual::*)()>(&Oculus::Interaction::Locomotion::TeleportProceduralArcVisual::get_ArcPointsCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportProceduralArcVisual*), "get_ArcPointsCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportProceduralArcVisual::set_ArcPointsCount
// Il2CppName: set_ArcPointsCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::TeleportProceduralArcVisual::*)(int)>(&Oculus::Interaction::Locomotion::TeleportProceduralArcVisual::set_ArcPointsCount)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportProceduralArcVisual*), "set_ArcPointsCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportProceduralArcVisual::get_NoDestinationTint
// Il2CppName: get_NoDestinationTint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (Oculus::Interaction::Locomotion::TeleportProceduralArcVisual::*)()>(&Oculus::Interaction::Locomotion::TeleportProceduralArcVisual::get_NoDestinationTint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportProceduralArcVisual*), "get_NoDestinationTint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportProceduralArcVisual::set_NoDestinationTint
// Il2CppName: set_NoDestinationTint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::TeleportProceduralArcVisual::*)(::UnityEngine::Color)>(&Oculus::Interaction::Locomotion::TeleportProceduralArcVisual::set_NoDestinationTint)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportProceduralArcVisual*), "set_NoDestinationTint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportProceduralArcVisual::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::TeleportProceduralArcVisual::*)()>(&Oculus::Interaction::Locomotion::TeleportProceduralArcVisual::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportProceduralArcVisual*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportProceduralArcVisual::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::TeleportProceduralArcVisual::*)()>(&Oculus::Interaction::Locomotion::TeleportProceduralArcVisual::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportProceduralArcVisual*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportProceduralArcVisual::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::TeleportProceduralArcVisual::*)()>(&Oculus::Interaction::Locomotion::TeleportProceduralArcVisual::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportProceduralArcVisual*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportProceduralArcVisual::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::TeleportProceduralArcVisual::*)()>(&Oculus::Interaction::Locomotion::TeleportProceduralArcVisual::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportProceduralArcVisual*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportProceduralArcVisual::HandleInteractableSet
// Il2CppName: HandleInteractableSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::TeleportProceduralArcVisual::*)(::Oculus::Interaction::Locomotion::TeleportInteractable*)>(&Oculus::Interaction::Locomotion::TeleportProceduralArcVisual::HandleInteractableSet)> {
  static const MethodInfo* get() {
    static auto* interactable = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Locomotion", "TeleportInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportProceduralArcVisual*), "HandleInteractableSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactable});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportProceduralArcVisual::HandleInteractableUnset
// Il2CppName: HandleInteractableUnset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::TeleportProceduralArcVisual::*)(::Oculus::Interaction::Locomotion::TeleportInteractable*)>(&Oculus::Interaction::Locomotion::TeleportProceduralArcVisual::HandleInteractableUnset)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Locomotion", "TeleportInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportProceduralArcVisual*), "HandleInteractableUnset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportProceduralArcVisual::HandleInteractorStateChanged
// Il2CppName: HandleInteractorStateChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::TeleportProceduralArcVisual::*)(::Oculus::Interaction::InteractorStateChangeArgs)>(&Oculus::Interaction::Locomotion::TeleportProceduralArcVisual::HandleInteractorStateChanged)> {
  static const MethodInfo* get() {
    static auto* stateChange = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "InteractorStateChangeArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportProceduralArcVisual*), "HandleInteractorStateChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stateChange});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportProceduralArcVisual::HandleInteractorPostProcessed
// Il2CppName: HandleInteractorPostProcessed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::TeleportProceduralArcVisual::*)()>(&Oculus::Interaction::Locomotion::TeleportProceduralArcVisual::HandleInteractorPostProcessed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportProceduralArcVisual*), "HandleInteractorPostProcessed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportProceduralArcVisual::UpdatePointer
// Il2CppName: UpdatePointer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::TeleportProceduralArcVisual::*)(::UnityEngine::Color)>(&Oculus::Interaction::Locomotion::TeleportProceduralArcVisual::UpdatePointer)> {
  static const MethodInfo* get() {
    static auto* tint = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportProceduralArcVisual*), "UpdatePointer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tint});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportProceduralArcVisual::UpdateVisualArcPoints
// Il2CppName: UpdateVisualArcPoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::TeleportProceduralArcVisual::*)(::UnityEngine::Pose, ::UnityEngine::Vector3)>(&Oculus::Interaction::Locomotion::TeleportProceduralArcVisual::UpdateVisualArcPoints)> {
  static const MethodInfo* get() {
    static auto* origin = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->byval_arg;
    static auto* target = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportProceduralArcVisual*), "UpdateVisualArcPoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{origin, target});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportProceduralArcVisual::EvaluateBezierArc
// Il2CppName: EvaluateBezierArc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, float)>(&Oculus::Interaction::Locomotion::TeleportProceduralArcVisual::EvaluateBezierArc)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* middle = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportProceduralArcVisual*), "EvaluateBezierArc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, middle, end, t});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportProceduralArcVisual::CalculateMidpointFactor
// Il2CppName: CalculateMidpointFactor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&Oculus::Interaction::Locomotion::TeleportProceduralArcVisual::CalculateMidpointFactor)> {
  static const MethodInfo* get() {
    static auto* pitchDot = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportProceduralArcVisual*), "CalculateMidpointFactor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pitchDot});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportProceduralArcVisual::InjectAllTeleportProceduralArcVisual
// Il2CppName: InjectAllTeleportProceduralArcVisual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::TeleportProceduralArcVisual::*)(::Oculus::Interaction::Locomotion::TeleportInteractor*)>(&Oculus::Interaction::Locomotion::TeleportProceduralArcVisual::InjectAllTeleportProceduralArcVisual)> {
  static const MethodInfo* get() {
    static auto* interactor = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Locomotion", "TeleportInteractor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportProceduralArcVisual*), "InjectAllTeleportProceduralArcVisual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactor});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportProceduralArcVisual::InjectTeleportInteractor
// Il2CppName: InjectTeleportInteractor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::TeleportProceduralArcVisual::*)(::Oculus::Interaction::Locomotion::TeleportInteractor*)>(&Oculus::Interaction::Locomotion::TeleportProceduralArcVisual::InjectTeleportInteractor)> {
  static const MethodInfo* get() {
    static auto* interactor = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Locomotion", "TeleportInteractor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportProceduralArcVisual*), "InjectTeleportInteractor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactor});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportProceduralArcVisual::InjectOptionalProgress
// Il2CppName: InjectOptionalProgress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::TeleportProceduralArcVisual::*)(::Oculus::Interaction::Input::IAxis1D*)>(&Oculus::Interaction::Locomotion::TeleportProceduralArcVisual::InjectOptionalProgress)> {
  static const MethodInfo* get() {
    static auto* progress = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IAxis1D")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportProceduralArcVisual*), "InjectOptionalProgress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{progress});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportProceduralArcVisual::InjectOptionalPointer
// Il2CppName: InjectOptionalPointer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::TeleportProceduralArcVisual::*)(::Oculus::Interaction::PinchPointerVisual*)>(&Oculus::Interaction::Locomotion::TeleportProceduralArcVisual::InjectOptionalPointer)> {
  static const MethodInfo* get() {
    static auto* pointer = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "PinchPointerVisual")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportProceduralArcVisual*), "InjectOptionalPointer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pointer});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportProceduralArcVisual::InjectOptionalPointerAnchor
// Il2CppName: InjectOptionalPointerAnchor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::TeleportProceduralArcVisual::*)(::UnityEngine::Transform*)>(&Oculus::Interaction::Locomotion::TeleportProceduralArcVisual::InjectOptionalPointerAnchor)> {
  static const MethodInfo* get() {
    static auto* pointerAnchor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportProceduralArcVisual*), "InjectOptionalPointerAnchor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pointerAnchor});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportProceduralArcVisual::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportProceduralArcVisual::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Oculus::Interaction::Locomotion::TeleportProceduralArcVisual::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportProceduralArcVisual*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportProceduralArcVisual::$CalculateMidpointFactor$g__Interpolate_29_0
// Il2CppName: <CalculateMidpointFactor>g__Interpolate|29_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, int, int)>(&Oculus::Interaction::Locomotion::TeleportProceduralArcVisual::$CalculateMidpointFactor$g__Interpolate_29_0)> {
  static const MethodInfo* get() {
    static auto* angle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* fromIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* toIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportProceduralArcVisual*), "<CalculateMidpointFactor>g__Interpolate|29_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{angle, fromIndex, toIndex});
  }
};
