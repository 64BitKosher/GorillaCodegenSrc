// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: Oculus.Interaction.TubePoint
#include "Oculus/Interaction/TubePoint.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction::Locomotion
namespace Oculus::Interaction::Locomotion {
  // Forward declaring type: LocomotionTurnerInteractor
  class LocomotionTurnerInteractor;
  // Forward declaring type: TurnerEventBroadcaster
  class TurnerEventBroadcaster;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Skipping declaration: Object because it is already included!
  // Forward declaring type: Renderer
  class Renderer;
  // Forward declaring type: Vector2
  struct Vector2;
}
// Forward declaring namespace: Oculus::Interaction::Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: IAxis1D
  class IAxis1D;
}
// Forward declaring namespace: Oculus::Interaction
namespace Oculus::Interaction {
  // Forward declaring type: TubeRenderer
  class TubeRenderer;
  // Forward declaring type: MaterialPropertyBlockEditor
  class MaterialPropertyBlockEditor;
  // Forward declaring type: InteractorStateChangeArgs
  struct InteractorStateChangeArgs;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.Locomotion
namespace Oculus::Interaction::Locomotion {
  // Forward declaring type: LocomotionTurnerInteractorVisual
  class LocomotionTurnerInteractorVisual;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual*, "Oculus.Interaction.Locomotion", "LocomotionTurnerInteractorVisual");
// Type namespace: Oculus.Interaction.Locomotion
namespace Oculus::Interaction::Locomotion {
  // Size: 0xDD
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.Locomotion.LocomotionTurnerInteractorVisual
  // [TokenAttribute] Offset: FFFFFFFF
  class LocomotionTurnerInteractorVisual : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private Oculus.Interaction.Locomotion.LocomotionTurnerInteractor _turner
    // Size: 0x8
    // Offset: 0x20
    ::Oculus::Interaction::Locomotion::LocomotionTurnerInteractor* turner;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Locomotion::LocomotionTurnerInteractor*) == 0x8);
    // private Oculus.Interaction.Locomotion.TurnerEventBroadcaster _broadcaster
    // Size: 0x8
    // Offset: 0x28
    ::Oculus::Interaction::Locomotion::TurnerEventBroadcaster* broadcaster;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Locomotion::TurnerEventBroadcaster*) == 0x8);
    // private UnityEngine.Transform _lookAt
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Transform* lookAt;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Object _progress
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Object* progress;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.Input.IAxis1D <Progress>k__BackingField
    // Size: 0x8
    // Offset: 0x40
    ::Oculus::Interaction::Input::IAxis1D* Progress;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::IAxis1D*) == 0x8);
    // private UnityEngine.Transform _root
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Transform* root;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Renderer _leftArrow
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::Renderer* leftArrow;
    // Field size check
    static_assert(sizeof(::UnityEngine::Renderer*) == 0x8);
    // private UnityEngine.Renderer _rightArrow
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::Renderer* rightArrow;
    // Field size check
    static_assert(sizeof(::UnityEngine::Renderer*) == 0x8);
    // private Oculus.Interaction.TubeRenderer _leftRail
    // Size: 0x8
    // Offset: 0x60
    ::Oculus::Interaction::TubeRenderer* leftRail;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::TubeRenderer*) == 0x8);
    // private Oculus.Interaction.TubeRenderer _rightRail
    // Size: 0x8
    // Offset: 0x68
    ::Oculus::Interaction::TubeRenderer* rightRail;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::TubeRenderer*) == 0x8);
    // private Oculus.Interaction.TubeRenderer _leftTrail
    // Size: 0x8
    // Offset: 0x70
    ::Oculus::Interaction::TubeRenderer* leftTrail;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::TubeRenderer*) == 0x8);
    // private Oculus.Interaction.TubeRenderer _rightTrail
    // Size: 0x8
    // Offset: 0x78
    ::Oculus::Interaction::TubeRenderer* rightTrail;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::TubeRenderer*) == 0x8);
    // private Oculus.Interaction.MaterialPropertyBlockEditor _leftMaterialBlock
    // Size: 0x8
    // Offset: 0x80
    ::Oculus::Interaction::MaterialPropertyBlockEditor* leftMaterialBlock;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::MaterialPropertyBlockEditor*) == 0x8);
    // private Oculus.Interaction.MaterialPropertyBlockEditor _rightMaterialBlock
    // Size: 0x8
    // Offset: 0x88
    ::Oculus::Interaction::MaterialPropertyBlockEditor* rightMaterialBlock;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::MaterialPropertyBlockEditor*) == 0x8);
    // private System.Single _verticalOffset
    // Size: 0x4
    // Offset: 0x90
    float verticalOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _radius
    // Size: 0x4
    // Offset: 0x94
    float radius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _margin
    // Size: 0x4
    // Offset: 0x98
    float margin;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _trailLength
    // Size: 0x4
    // Offset: 0x9C
    float trailLength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _maxAngle
    // Size: 0x4
    // Offset: 0xA0
    float maxAngle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _railGap
    // Size: 0x4
    // Offset: 0xA4
    float railGap;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _squeezeLength
    // Size: 0x4
    // Offset: 0xA8
    float squeezeLength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Color _disabledColor
    // Size: 0x10
    // Offset: 0xAC
    ::UnityEngine::Color disabledColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color _enabledColor
    // Size: 0x10
    // Offset: 0xBC
    ::UnityEngine::Color enabledColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color _highligtedColor
    // Size: 0x10
    // Offset: 0xCC
    ::UnityEngine::Color highligtedColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // protected System.Boolean _started
    // Size: 0x1
    // Offset: 0xDC
    bool started;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // static field const value: static private System.Single _degreesPerSegment
    static constexpr const float _degreesPerSegment = 1;
    // Get static field: static private System.Single _degreesPerSegment
    static float _get__degreesPerSegment();
    // Set static field: static private System.Single _degreesPerSegment
    static void _set__degreesPerSegment(float value);
    // Get static field: static private readonly UnityEngine.Quaternion _rotationCorrectionLeft
    static ::UnityEngine::Quaternion _get__rotationCorrectionLeft();
    // Set static field: static private readonly UnityEngine.Quaternion _rotationCorrectionLeft
    static void _set__rotationCorrectionLeft(::UnityEngine::Quaternion value);
    // Get static field: static private readonly System.Int32 _colorShaderPropertyID
    static int _get__colorShaderPropertyID();
    // Set static field: static private readonly System.Int32 _colorShaderPropertyID
    static void _set__colorShaderPropertyID(int value);
    // Get instance field reference: private Oculus.Interaction.Locomotion.LocomotionTurnerInteractor _turner
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Locomotion::LocomotionTurnerInteractor*& dyn__turner();
    // Get instance field reference: private Oculus.Interaction.Locomotion.TurnerEventBroadcaster _broadcaster
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Locomotion::TurnerEventBroadcaster*& dyn__broadcaster();
    // Get instance field reference: private UnityEngine.Transform _lookAt
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__lookAt();
    // Get instance field reference: private UnityEngine.Object _progress
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__progress();
    // Get instance field reference: private Oculus.Interaction.Input.IAxis1D <Progress>k__BackingField
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::IAxis1D*& dyn_$Progress$k__BackingField();
    // Get instance field reference: private UnityEngine.Transform _root
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__root();
    // Get instance field reference: private UnityEngine.Renderer _leftArrow
    [[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& dyn__leftArrow();
    // Get instance field reference: private UnityEngine.Renderer _rightArrow
    [[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& dyn__rightArrow();
    // Get instance field reference: private Oculus.Interaction.TubeRenderer _leftRail
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::TubeRenderer*& dyn__leftRail();
    // Get instance field reference: private Oculus.Interaction.TubeRenderer _rightRail
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::TubeRenderer*& dyn__rightRail();
    // Get instance field reference: private Oculus.Interaction.TubeRenderer _leftTrail
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::TubeRenderer*& dyn__leftTrail();
    // Get instance field reference: private Oculus.Interaction.TubeRenderer _rightTrail
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::TubeRenderer*& dyn__rightTrail();
    // Get instance field reference: private Oculus.Interaction.MaterialPropertyBlockEditor _leftMaterialBlock
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::MaterialPropertyBlockEditor*& dyn__leftMaterialBlock();
    // Get instance field reference: private Oculus.Interaction.MaterialPropertyBlockEditor _rightMaterialBlock
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::MaterialPropertyBlockEditor*& dyn__rightMaterialBlock();
    // Get instance field reference: private System.Single _verticalOffset
    [[deprecated("Use field access instead!")]] float& dyn__verticalOffset();
    // Get instance field reference: private System.Single _radius
    [[deprecated("Use field access instead!")]] float& dyn__radius();
    // Get instance field reference: private System.Single _margin
    [[deprecated("Use field access instead!")]] float& dyn__margin();
    // Get instance field reference: private System.Single _trailLength
    [[deprecated("Use field access instead!")]] float& dyn__trailLength();
    // Get instance field reference: private System.Single _maxAngle
    [[deprecated("Use field access instead!")]] float& dyn__maxAngle();
    // Get instance field reference: private System.Single _railGap
    [[deprecated("Use field access instead!")]] float& dyn__railGap();
    // Get instance field reference: private System.Single _squeezeLength
    [[deprecated("Use field access instead!")]] float& dyn__squeezeLength();
    // Get instance field reference: private UnityEngine.Color _disabledColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__disabledColor();
    // Get instance field reference: private UnityEngine.Color _enabledColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__enabledColor();
    // Get instance field reference: private UnityEngine.Color _highligtedColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__highligtedColor();
    // Get instance field reference: protected System.Boolean _started
    [[deprecated("Use field access instead!")]] bool& dyn__started();
    // private Oculus.Interaction.Input.IAxis1D get_Progress()
    // Offset: 0x480F658
    ::Oculus::Interaction::Input::IAxis1D* get_Progress();
    // private System.Void set_Progress(Oculus.Interaction.Input.IAxis1D value)
    // Offset: 0x480F660
    void set_Progress(::Oculus::Interaction::Input::IAxis1D* value);
    // public System.Single get_VerticalOffset()
    // Offset: 0x480F668
    float get_VerticalOffset();
    // public System.Void set_VerticalOffset(System.Single value)
    // Offset: 0x480F670
    void set_VerticalOffset(float value);
    // public UnityEngine.Color get_DisabledColor()
    // Offset: 0x480F678
    ::UnityEngine::Color get_DisabledColor();
    // public System.Void set_DisabledColor(UnityEngine.Color value)
    // Offset: 0x480F684
    void set_DisabledColor(::UnityEngine::Color value);
    // public UnityEngine.Color get_EnabledColor()
    // Offset: 0x480F690
    ::UnityEngine::Color get_EnabledColor();
    // public System.Void set_EnabledColor(UnityEngine.Color value)
    // Offset: 0x480F69C
    void set_EnabledColor(::UnityEngine::Color value);
    // public UnityEngine.Color get_HighligtedColor()
    // Offset: 0x480F6A8
    ::UnityEngine::Color get_HighligtedColor();
    // public System.Void set_HighligtedColor(UnityEngine.Color value)
    // Offset: 0x480F6B4
    void set_HighligtedColor(::UnityEngine::Color value);
    // protected System.Void Awake()
    // Offset: 0x480F6C0
    void Awake();
    // protected System.Void Start()
    // Offset: 0x480F718
    void Start();
    // protected System.Void OnEnable()
    // Offset: 0x480F804
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x480F930
    void OnDisable();
    // private System.Void HandleTurnerStateChanged(Oculus.Interaction.InteractorStateChangeArgs stateArgs)
    // Offset: 0x480FA5C
    void HandleTurnerStateChanged(::Oculus::Interaction::InteractorStateChangeArgs stateArgs);
    // private System.Void InitializeVisuals()
    // Offset: 0x480F758
    void InitializeVisuals();
    // private System.Void HandleTurnerPostprocessed()
    // Offset: 0x480FED4
    void HandleTurnerPostprocessed();
    // private System.Void UpdatePose()
    // Offset: 0x480FF44
    void UpdatePose();
    // private System.Void UpdateArrows()
    // Offset: 0x4810268
    void UpdateArrows();
    // private System.Void UpdateArrowPosition(System.Single angle, UnityEngine.Transform arrow)
    // Offset: 0x4810778
    void UpdateArrowPosition(float angle, ::UnityEngine::Transform* arrow);
    // private System.Void RotateTrail(System.Single angle, Oculus.Interaction.TubeRenderer trail)
    // Offset: 0x4810930
    void RotateTrail(float angle, ::Oculus::Interaction::TubeRenderer* trail);
    // private System.Void UpdateTrail(System.Single angle, Oculus.Interaction.TubeRenderer trail)
    // Offset: 0x48109B8
    void UpdateTrail(float angle, ::Oculus::Interaction::TubeRenderer* trail);
    // private System.Void UpdateRail(System.Single angle, System.Single extra, Oculus.Interaction.TubeRenderer rail)
    // Offset: 0x4810A0C
    void UpdateRail(float angle, float extra, ::Oculus::Interaction::TubeRenderer* rail);
    // private System.Void UpdateColors()
    // Offset: 0x4810514
    void UpdateColors();
    // private System.Boolean ShouldFollowArrow()
    // Offset: 0x48106F0
    bool ShouldFollowArrow();
    // private Oculus.Interaction.TubePoint[] InitializeSegment(UnityEngine.Vector2 minMax)
    // Offset: 0x480FB78
    ::ArrayW<::Oculus::Interaction::TubePoint> InitializeSegment(::UnityEngine::Vector2 minMax);
    // public System.Void InjectAllLocomotionTurnerInteractorArrowsVisual(Oculus.Interaction.Locomotion.LocomotionTurnerInteractor turner, UnityEngine.Transform root, UnityEngine.Renderer leftArrow, UnityEngine.Renderer rightArrow, Oculus.Interaction.TubeRenderer leftRail, Oculus.Interaction.TubeRenderer rightRail, Oculus.Interaction.TubeRenderer leftTrail, Oculus.Interaction.TubeRenderer rightTrail, Oculus.Interaction.MaterialPropertyBlockEditor leftMaterialBlock, Oculus.Interaction.MaterialPropertyBlockEditor rightMaterialBlock, System.Single radius, System.Single margin, System.Single trailLength, System.Single maxAngle, System.Single railGap, System.Single squeezeLength)
    // Offset: 0x4810A78
    void InjectAllLocomotionTurnerInteractorArrowsVisual(::Oculus::Interaction::Locomotion::LocomotionTurnerInteractor* turner, ::UnityEngine::Transform* root, ::UnityEngine::Renderer* leftArrow, ::UnityEngine::Renderer* rightArrow, ::Oculus::Interaction::TubeRenderer* leftRail, ::Oculus::Interaction::TubeRenderer* rightRail, ::Oculus::Interaction::TubeRenderer* leftTrail, ::Oculus::Interaction::TubeRenderer* rightTrail, ::Oculus::Interaction::MaterialPropertyBlockEditor* leftMaterialBlock, ::Oculus::Interaction::MaterialPropertyBlockEditor* rightMaterialBlock, float radius, float margin, float trailLength, float maxAngle, float railGap, float squeezeLength);
    // public System.Void InjectTurner(Oculus.Interaction.Locomotion.LocomotionTurnerInteractor turner)
    // Offset: 0x4810BA4
    void InjectTurner(::Oculus::Interaction::Locomotion::LocomotionTurnerInteractor* turner);
    // public System.Void InjectRoot(UnityEngine.Transform root)
    // Offset: 0x4810BAC
    void InjectRoot(::UnityEngine::Transform* root);
    // public System.Void InjectLeftArrow(UnityEngine.Renderer leftArrow)
    // Offset: 0x4810BB4
    void InjectLeftArrow(::UnityEngine::Renderer* leftArrow);
    // public System.Void InjectRightArrow(UnityEngine.Renderer rightArrow)
    // Offset: 0x4810BBC
    void InjectRightArrow(::UnityEngine::Renderer* rightArrow);
    // public System.Void InjectLeftRail(Oculus.Interaction.TubeRenderer leftRail)
    // Offset: 0x4810BC4
    void InjectLeftRail(::Oculus::Interaction::TubeRenderer* leftRail);
    // public System.Void InjectRightRail(Oculus.Interaction.TubeRenderer rightRail)
    // Offset: 0x4810BCC
    void InjectRightRail(::Oculus::Interaction::TubeRenderer* rightRail);
    // public System.Void InjectLeftTrail(Oculus.Interaction.TubeRenderer leftTrail)
    // Offset: 0x4810BD4
    void InjectLeftTrail(::Oculus::Interaction::TubeRenderer* leftTrail);
    // public System.Void InjectRightTrail(Oculus.Interaction.TubeRenderer rightTrail)
    // Offset: 0x4810BDC
    void InjectRightTrail(::Oculus::Interaction::TubeRenderer* rightTrail);
    // public System.Void InjectLeftMaterialBlock(Oculus.Interaction.MaterialPropertyBlockEditor leftMaterialBlock)
    // Offset: 0x4810BE4
    void InjectLeftMaterialBlock(::Oculus::Interaction::MaterialPropertyBlockEditor* leftMaterialBlock);
    // public System.Void InjectRightMaterialBlock(Oculus.Interaction.MaterialPropertyBlockEditor rightMaterialBlock)
    // Offset: 0x4810BEC
    void InjectRightMaterialBlock(::Oculus::Interaction::MaterialPropertyBlockEditor* rightMaterialBlock);
    // public System.Void InjectRadius(System.Single radius)
    // Offset: 0x4810BF4
    void InjectRadius(float radius);
    // public System.Void InjectMargin(System.Single margin)
    // Offset: 0x4810BFC
    void InjectMargin(float margin);
    // public System.Void InjectTrailLength(System.Single trailLength)
    // Offset: 0x4810C04
    void InjectTrailLength(float trailLength);
    // public System.Void InjectMaxAngle(System.Single maxAngle)
    // Offset: 0x4810C0C
    void InjectMaxAngle(float maxAngle);
    // public System.Void InjectRailGap(System.Single railGap)
    // Offset: 0x4810C14
    void InjectRailGap(float railGap);
    // public System.Void InjectSqueezeLength(System.Single squeezeLength)
    // Offset: 0x4810C1C
    void InjectSqueezeLength(float squeezeLength);
    // public System.Void InjectOptionalBroadcaster(Oculus.Interaction.Locomotion.TurnerEventBroadcaster broadcaster)
    // Offset: 0x4810C24
    void InjectOptionalBroadcaster(::Oculus::Interaction::Locomotion::TurnerEventBroadcaster* broadcaster);
    // public System.Void InjectOptionalLookAt(UnityEngine.Transform lookAt)
    // Offset: 0x4810C2C
    void InjectOptionalLookAt(::UnityEngine::Transform* lookAt);
    // public System.Void InjectOptionalProgress(Oculus.Interaction.Input.IAxis1D progress)
    // Offset: 0x4810C34
    void InjectOptionalProgress(::Oculus::Interaction::Input::IAxis1D* progress);
    // public System.Void .ctor()
    // Offset: 0x4810D04
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LocomotionTurnerInteractorVisual* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LocomotionTurnerInteractorVisual*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x4810D44
    static void _cctor();
  }; // Oculus.Interaction.Locomotion.LocomotionTurnerInteractorVisual
  #pragma pack(pop)
  static check_size<sizeof(LocomotionTurnerInteractorVisual), 220 + sizeof(bool)> __Oculus_Interaction_Locomotion_LocomotionTurnerInteractorVisualSizeCheck;
  static_assert(sizeof(LocomotionTurnerInteractorVisual) == 0xDD);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::get_Progress
// Il2CppName: get_Progress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Input::IAxis1D* (Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::*)()>(&Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::get_Progress)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual*), "get_Progress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::set_Progress
// Il2CppName: set_Progress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::*)(::Oculus::Interaction::Input::IAxis1D*)>(&Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::set_Progress)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IAxis1D")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual*), "set_Progress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::get_VerticalOffset
// Il2CppName: get_VerticalOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::*)()>(&Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::get_VerticalOffset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual*), "get_VerticalOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::set_VerticalOffset
// Il2CppName: set_VerticalOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::*)(float)>(&Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::set_VerticalOffset)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual*), "set_VerticalOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::get_DisabledColor
// Il2CppName: get_DisabledColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::*)()>(&Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::get_DisabledColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual*), "get_DisabledColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::set_DisabledColor
// Il2CppName: set_DisabledColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::*)(::UnityEngine::Color)>(&Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::set_DisabledColor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual*), "set_DisabledColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::get_EnabledColor
// Il2CppName: get_EnabledColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::*)()>(&Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::get_EnabledColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual*), "get_EnabledColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::set_EnabledColor
// Il2CppName: set_EnabledColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::*)(::UnityEngine::Color)>(&Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::set_EnabledColor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual*), "set_EnabledColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::get_HighligtedColor
// Il2CppName: get_HighligtedColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::*)()>(&Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::get_HighligtedColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual*), "get_HighligtedColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::set_HighligtedColor
// Il2CppName: set_HighligtedColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::*)(::UnityEngine::Color)>(&Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::set_HighligtedColor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual*), "set_HighligtedColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::*)()>(&Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::*)()>(&Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::*)()>(&Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::*)()>(&Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::HandleTurnerStateChanged
// Il2CppName: HandleTurnerStateChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::*)(::Oculus::Interaction::InteractorStateChangeArgs)>(&Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::HandleTurnerStateChanged)> {
  static const MethodInfo* get() {
    static auto* stateArgs = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "InteractorStateChangeArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual*), "HandleTurnerStateChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stateArgs});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::InitializeVisuals
// Il2CppName: InitializeVisuals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::*)()>(&Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::InitializeVisuals)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual*), "InitializeVisuals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::HandleTurnerPostprocessed
// Il2CppName: HandleTurnerPostprocessed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::*)()>(&Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::HandleTurnerPostprocessed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual*), "HandleTurnerPostprocessed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::UpdatePose
// Il2CppName: UpdatePose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::*)()>(&Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::UpdatePose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual*), "UpdatePose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::UpdateArrows
// Il2CppName: UpdateArrows
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::*)()>(&Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::UpdateArrows)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual*), "UpdateArrows", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::UpdateArrowPosition
// Il2CppName: UpdateArrowPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::*)(float, ::UnityEngine::Transform*)>(&Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::UpdateArrowPosition)> {
  static const MethodInfo* get() {
    static auto* angle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* arrow = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual*), "UpdateArrowPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{angle, arrow});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::RotateTrail
// Il2CppName: RotateTrail
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::*)(float, ::Oculus::Interaction::TubeRenderer*)>(&Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::RotateTrail)> {
  static const MethodInfo* get() {
    static auto* angle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* trail = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "TubeRenderer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual*), "RotateTrail", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{angle, trail});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::UpdateTrail
// Il2CppName: UpdateTrail
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::*)(float, ::Oculus::Interaction::TubeRenderer*)>(&Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::UpdateTrail)> {
  static const MethodInfo* get() {
    static auto* angle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* trail = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "TubeRenderer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual*), "UpdateTrail", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{angle, trail});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::UpdateRail
// Il2CppName: UpdateRail
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::*)(float, float, ::Oculus::Interaction::TubeRenderer*)>(&Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::UpdateRail)> {
  static const MethodInfo* get() {
    static auto* angle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* extra = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* rail = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "TubeRenderer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual*), "UpdateRail", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{angle, extra, rail});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::UpdateColors
// Il2CppName: UpdateColors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::*)()>(&Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::UpdateColors)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual*), "UpdateColors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::ShouldFollowArrow
// Il2CppName: ShouldFollowArrow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::*)()>(&Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::ShouldFollowArrow)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual*), "ShouldFollowArrow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::InitializeSegment
// Il2CppName: InitializeSegment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Oculus::Interaction::TubePoint> (Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::*)(::UnityEngine::Vector2)>(&Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::InitializeSegment)> {
  static const MethodInfo* get() {
    static auto* minMax = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual*), "InitializeSegment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{minMax});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::InjectAllLocomotionTurnerInteractorArrowsVisual
// Il2CppName: InjectAllLocomotionTurnerInteractorArrowsVisual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::*)(::Oculus::Interaction::Locomotion::LocomotionTurnerInteractor*, ::UnityEngine::Transform*, ::UnityEngine::Renderer*, ::UnityEngine::Renderer*, ::Oculus::Interaction::TubeRenderer*, ::Oculus::Interaction::TubeRenderer*, ::Oculus::Interaction::TubeRenderer*, ::Oculus::Interaction::TubeRenderer*, ::Oculus::Interaction::MaterialPropertyBlockEditor*, ::Oculus::Interaction::MaterialPropertyBlockEditor*, float, float, float, float, float, float)>(&Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::InjectAllLocomotionTurnerInteractorArrowsVisual)> {
  static const MethodInfo* get() {
    static auto* turner = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Locomotion", "LocomotionTurnerInteractor")->byval_arg;
    static auto* root = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* leftArrow = &::il2cpp_utils::GetClassFromName("UnityEngine", "Renderer")->byval_arg;
    static auto* rightArrow = &::il2cpp_utils::GetClassFromName("UnityEngine", "Renderer")->byval_arg;
    static auto* leftRail = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "TubeRenderer")->byval_arg;
    static auto* rightRail = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "TubeRenderer")->byval_arg;
    static auto* leftTrail = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "TubeRenderer")->byval_arg;
    static auto* rightTrail = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "TubeRenderer")->byval_arg;
    static auto* leftMaterialBlock = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "MaterialPropertyBlockEditor")->byval_arg;
    static auto* rightMaterialBlock = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "MaterialPropertyBlockEditor")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* margin = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* trailLength = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* maxAngle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* railGap = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* squeezeLength = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual*), "InjectAllLocomotionTurnerInteractorArrowsVisual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{turner, root, leftArrow, rightArrow, leftRail, rightRail, leftTrail, rightTrail, leftMaterialBlock, rightMaterialBlock, radius, margin, trailLength, maxAngle, railGap, squeezeLength});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::InjectTurner
// Il2CppName: InjectTurner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::*)(::Oculus::Interaction::Locomotion::LocomotionTurnerInteractor*)>(&Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::InjectTurner)> {
  static const MethodInfo* get() {
    static auto* turner = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Locomotion", "LocomotionTurnerInteractor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual*), "InjectTurner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{turner});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::InjectRoot
// Il2CppName: InjectRoot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::*)(::UnityEngine::Transform*)>(&Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::InjectRoot)> {
  static const MethodInfo* get() {
    static auto* root = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual*), "InjectRoot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{root});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::InjectLeftArrow
// Il2CppName: InjectLeftArrow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::*)(::UnityEngine::Renderer*)>(&Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::InjectLeftArrow)> {
  static const MethodInfo* get() {
    static auto* leftArrow = &::il2cpp_utils::GetClassFromName("UnityEngine", "Renderer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual*), "InjectLeftArrow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{leftArrow});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::InjectRightArrow
// Il2CppName: InjectRightArrow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::*)(::UnityEngine::Renderer*)>(&Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::InjectRightArrow)> {
  static const MethodInfo* get() {
    static auto* rightArrow = &::il2cpp_utils::GetClassFromName("UnityEngine", "Renderer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual*), "InjectRightArrow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rightArrow});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::InjectLeftRail
// Il2CppName: InjectLeftRail
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::*)(::Oculus::Interaction::TubeRenderer*)>(&Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::InjectLeftRail)> {
  static const MethodInfo* get() {
    static auto* leftRail = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "TubeRenderer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual*), "InjectLeftRail", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{leftRail});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::InjectRightRail
// Il2CppName: InjectRightRail
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::*)(::Oculus::Interaction::TubeRenderer*)>(&Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::InjectRightRail)> {
  static const MethodInfo* get() {
    static auto* rightRail = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "TubeRenderer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual*), "InjectRightRail", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rightRail});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::InjectLeftTrail
// Il2CppName: InjectLeftTrail
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::*)(::Oculus::Interaction::TubeRenderer*)>(&Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::InjectLeftTrail)> {
  static const MethodInfo* get() {
    static auto* leftTrail = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "TubeRenderer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual*), "InjectLeftTrail", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{leftTrail});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::InjectRightTrail
// Il2CppName: InjectRightTrail
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::*)(::Oculus::Interaction::TubeRenderer*)>(&Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::InjectRightTrail)> {
  static const MethodInfo* get() {
    static auto* rightTrail = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "TubeRenderer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual*), "InjectRightTrail", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rightTrail});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::InjectLeftMaterialBlock
// Il2CppName: InjectLeftMaterialBlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::*)(::Oculus::Interaction::MaterialPropertyBlockEditor*)>(&Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::InjectLeftMaterialBlock)> {
  static const MethodInfo* get() {
    static auto* leftMaterialBlock = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "MaterialPropertyBlockEditor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual*), "InjectLeftMaterialBlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{leftMaterialBlock});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::InjectRightMaterialBlock
// Il2CppName: InjectRightMaterialBlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::*)(::Oculus::Interaction::MaterialPropertyBlockEditor*)>(&Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::InjectRightMaterialBlock)> {
  static const MethodInfo* get() {
    static auto* rightMaterialBlock = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "MaterialPropertyBlockEditor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual*), "InjectRightMaterialBlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rightMaterialBlock});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::InjectRadius
// Il2CppName: InjectRadius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::*)(float)>(&Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::InjectRadius)> {
  static const MethodInfo* get() {
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual*), "InjectRadius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{radius});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::InjectMargin
// Il2CppName: InjectMargin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::*)(float)>(&Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::InjectMargin)> {
  static const MethodInfo* get() {
    static auto* margin = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual*), "InjectMargin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{margin});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::InjectTrailLength
// Il2CppName: InjectTrailLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::*)(float)>(&Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::InjectTrailLength)> {
  static const MethodInfo* get() {
    static auto* trailLength = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual*), "InjectTrailLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trailLength});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::InjectMaxAngle
// Il2CppName: InjectMaxAngle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::*)(float)>(&Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::InjectMaxAngle)> {
  static const MethodInfo* get() {
    static auto* maxAngle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual*), "InjectMaxAngle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{maxAngle});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::InjectRailGap
// Il2CppName: InjectRailGap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::*)(float)>(&Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::InjectRailGap)> {
  static const MethodInfo* get() {
    static auto* railGap = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual*), "InjectRailGap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{railGap});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::InjectSqueezeLength
// Il2CppName: InjectSqueezeLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::*)(float)>(&Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::InjectSqueezeLength)> {
  static const MethodInfo* get() {
    static auto* squeezeLength = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual*), "InjectSqueezeLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{squeezeLength});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::InjectOptionalBroadcaster
// Il2CppName: InjectOptionalBroadcaster
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::*)(::Oculus::Interaction::Locomotion::TurnerEventBroadcaster*)>(&Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::InjectOptionalBroadcaster)> {
  static const MethodInfo* get() {
    static auto* broadcaster = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Locomotion", "TurnerEventBroadcaster")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual*), "InjectOptionalBroadcaster", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{broadcaster});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::InjectOptionalLookAt
// Il2CppName: InjectOptionalLookAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::*)(::UnityEngine::Transform*)>(&Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::InjectOptionalLookAt)> {
  static const MethodInfo* get() {
    static auto* lookAt = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual*), "InjectOptionalLookAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lookAt});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::InjectOptionalProgress
// Il2CppName: InjectOptionalProgress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::*)(::Oculus::Interaction::Input::IAxis1D*)>(&Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::InjectOptionalProgress)> {
  static const MethodInfo* get() {
    static auto* progress = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IAxis1D")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual*), "InjectOptionalProgress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{progress});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionTurnerInteractorVisual*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
