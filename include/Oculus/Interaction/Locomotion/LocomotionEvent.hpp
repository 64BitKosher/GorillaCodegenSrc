// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Pose
#include "UnityEngine/Pose.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction::Locomotion
namespace Oculus::Interaction::Locomotion {
  // Skipping declaration: TranslationType because it is already included!
  // Skipping declaration: RotationType because it is already included!
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Vector3 because it is already included!
  // Skipping declaration: Quaternion because it is already included!
}
// Completed forward declares
// Type namespace: Oculus.Interaction.Locomotion
namespace Oculus::Interaction::Locomotion {
  // Forward declaring type: LocomotionEvent
  struct LocomotionEvent;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Locomotion::LocomotionEvent, "Oculus.Interaction.Locomotion", "LocomotionEvent");
// Type namespace: Oculus.Interaction.Locomotion
namespace Oculus::Interaction::Locomotion {
  // Size: 0x28
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Oculus.Interaction.Locomotion.LocomotionEvent
  // [TokenAttribute] Offset: FFFFFFFF
  struct LocomotionEvent/*, public ::System::ValueType*/ {
    public:
    // Nested type: ::Oculus::Interaction::Locomotion::LocomotionEvent::TranslationType
    struct TranslationType;
    // Nested type: ::Oculus::Interaction::Locomotion::LocomotionEvent::RotationType
    struct RotationType;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Oculus.Interaction.Locomotion.LocomotionEvent/TranslationType
    // [TokenAttribute] Offset: FFFFFFFF
    struct TranslationType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: TranslationType
      constexpr TranslationType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Oculus.Interaction.Locomotion.LocomotionEvent/TranslationType None
      static constexpr const int None = 0;
      // Get static field: static public Oculus.Interaction.Locomotion.LocomotionEvent/TranslationType None
      static ::Oculus::Interaction::Locomotion::LocomotionEvent::TranslationType _get_None();
      // Set static field: static public Oculus.Interaction.Locomotion.LocomotionEvent/TranslationType None
      static void _set_None(::Oculus::Interaction::Locomotion::LocomotionEvent::TranslationType value);
      // static field const value: static public Oculus.Interaction.Locomotion.LocomotionEvent/TranslationType Velocity
      static constexpr const int Velocity = 1;
      // Get static field: static public Oculus.Interaction.Locomotion.LocomotionEvent/TranslationType Velocity
      static ::Oculus::Interaction::Locomotion::LocomotionEvent::TranslationType _get_Velocity();
      // Set static field: static public Oculus.Interaction.Locomotion.LocomotionEvent/TranslationType Velocity
      static void _set_Velocity(::Oculus::Interaction::Locomotion::LocomotionEvent::TranslationType value);
      // static field const value: static public Oculus.Interaction.Locomotion.LocomotionEvent/TranslationType Absolute
      static constexpr const int Absolute = 2;
      // Get static field: static public Oculus.Interaction.Locomotion.LocomotionEvent/TranslationType Absolute
      static ::Oculus::Interaction::Locomotion::LocomotionEvent::TranslationType _get_Absolute();
      // Set static field: static public Oculus.Interaction.Locomotion.LocomotionEvent/TranslationType Absolute
      static void _set_Absolute(::Oculus::Interaction::Locomotion::LocomotionEvent::TranslationType value);
      // static field const value: static public Oculus.Interaction.Locomotion.LocomotionEvent/TranslationType AbsoluteEyeLevel
      static constexpr const int AbsoluteEyeLevel = 3;
      // Get static field: static public Oculus.Interaction.Locomotion.LocomotionEvent/TranslationType AbsoluteEyeLevel
      static ::Oculus::Interaction::Locomotion::LocomotionEvent::TranslationType _get_AbsoluteEyeLevel();
      // Set static field: static public Oculus.Interaction.Locomotion.LocomotionEvent/TranslationType AbsoluteEyeLevel
      static void _set_AbsoluteEyeLevel(::Oculus::Interaction::Locomotion::LocomotionEvent::TranslationType value);
      // static field const value: static public Oculus.Interaction.Locomotion.LocomotionEvent/TranslationType Relative
      static constexpr const int Relative = 4;
      // Get static field: static public Oculus.Interaction.Locomotion.LocomotionEvent/TranslationType Relative
      static ::Oculus::Interaction::Locomotion::LocomotionEvent::TranslationType _get_Relative();
      // Set static field: static public Oculus.Interaction.Locomotion.LocomotionEvent/TranslationType Relative
      static void _set_Relative(::Oculus::Interaction::Locomotion::LocomotionEvent::TranslationType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Oculus.Interaction.Locomotion.LocomotionEvent/TranslationType
    #pragma pack(pop)
    static check_size<sizeof(LocomotionEvent::TranslationType), 0 + sizeof(int)> __Oculus_Interaction_Locomotion_LocomotionEvent_TranslationTypeSizeCheck;
    static_assert(sizeof(LocomotionEvent::TranslationType) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Oculus.Interaction.Locomotion.LocomotionEvent/RotationType
    // [TokenAttribute] Offset: FFFFFFFF
    struct RotationType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: RotationType
      constexpr RotationType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Oculus.Interaction.Locomotion.LocomotionEvent/RotationType None
      static constexpr const int None = 0;
      // Get static field: static public Oculus.Interaction.Locomotion.LocomotionEvent/RotationType None
      static ::Oculus::Interaction::Locomotion::LocomotionEvent::RotationType _get_None();
      // Set static field: static public Oculus.Interaction.Locomotion.LocomotionEvent/RotationType None
      static void _set_None(::Oculus::Interaction::Locomotion::LocomotionEvent::RotationType value);
      // static field const value: static public Oculus.Interaction.Locomotion.LocomotionEvent/RotationType Velocity
      static constexpr const int Velocity = 1;
      // Get static field: static public Oculus.Interaction.Locomotion.LocomotionEvent/RotationType Velocity
      static ::Oculus::Interaction::Locomotion::LocomotionEvent::RotationType _get_Velocity();
      // Set static field: static public Oculus.Interaction.Locomotion.LocomotionEvent/RotationType Velocity
      static void _set_Velocity(::Oculus::Interaction::Locomotion::LocomotionEvent::RotationType value);
      // static field const value: static public Oculus.Interaction.Locomotion.LocomotionEvent/RotationType Absolute
      static constexpr const int Absolute = 2;
      // Get static field: static public Oculus.Interaction.Locomotion.LocomotionEvent/RotationType Absolute
      static ::Oculus::Interaction::Locomotion::LocomotionEvent::RotationType _get_Absolute();
      // Set static field: static public Oculus.Interaction.Locomotion.LocomotionEvent/RotationType Absolute
      static void _set_Absolute(::Oculus::Interaction::Locomotion::LocomotionEvent::RotationType value);
      // static field const value: static public Oculus.Interaction.Locomotion.LocomotionEvent/RotationType Relative
      static constexpr const int Relative = 3;
      // Get static field: static public Oculus.Interaction.Locomotion.LocomotionEvent/RotationType Relative
      static ::Oculus::Interaction::Locomotion::LocomotionEvent::RotationType _get_Relative();
      // Set static field: static public Oculus.Interaction.Locomotion.LocomotionEvent/RotationType Relative
      static void _set_Relative(::Oculus::Interaction::Locomotion::LocomotionEvent::RotationType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Oculus.Interaction.Locomotion.LocomotionEvent/RotationType
    #pragma pack(pop)
    static check_size<sizeof(LocomotionEvent::RotationType), 0 + sizeof(int)> __Oculus_Interaction_Locomotion_LocomotionEvent_RotationTypeSizeCheck;
    static_assert(sizeof(LocomotionEvent::RotationType) == 0x4);
    public:
    // private readonly System.Int32 <Identifier>k__BackingField
    // Size: 0x4
    // Offset: 0x0
    int Identifier;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly UnityEngine.Pose <Pose>k__BackingField
    // Size: 0x1C
    // Offset: 0x4
    ::UnityEngine::Pose Pose;
    // Field size check
    static_assert(sizeof(::UnityEngine::Pose) == 0x1C);
    // private readonly Oculus.Interaction.Locomotion.LocomotionEvent/TranslationType <Translation>k__BackingField
    // Size: 0x4
    // Offset: 0x20
    ::Oculus::Interaction::Locomotion::LocomotionEvent::TranslationType Translation;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Locomotion::LocomotionEvent::TranslationType) == 0x4);
    // private readonly Oculus.Interaction.Locomotion.LocomotionEvent/RotationType <Rotation>k__BackingField
    // Size: 0x4
    // Offset: 0x24
    ::Oculus::Interaction::Locomotion::LocomotionEvent::RotationType Rotation;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Locomotion::LocomotionEvent::RotationType) == 0x4);
    public:
    // Creating value type constructor for type: LocomotionEvent
    constexpr LocomotionEvent(int Identifier_ = {}, ::UnityEngine::Pose Pose_ = {}, ::Oculus::Interaction::Locomotion::LocomotionEvent::TranslationType Translation_ = {}, ::Oculus::Interaction::Locomotion::LocomotionEvent::RotationType Rotation_ = {}) noexcept : Identifier{Identifier_}, Pose{Pose_}, Translation{Translation_}, Rotation{Rotation_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private readonly System.Int32 <Identifier>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$Identifier$k__BackingField();
    // Get instance field reference: private readonly UnityEngine.Pose <Pose>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Pose& dyn_$Pose$k__BackingField();
    // Get instance field reference: private readonly Oculus.Interaction.Locomotion.LocomotionEvent/TranslationType <Translation>k__BackingField
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Locomotion::LocomotionEvent::TranslationType& dyn_$Translation$k__BackingField();
    // Get instance field reference: private readonly Oculus.Interaction.Locomotion.LocomotionEvent/RotationType <Rotation>k__BackingField
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Locomotion::LocomotionEvent::RotationType& dyn_$Rotation$k__BackingField();
    // public System.Int32 get_Identifier()
    // Offset: 0x4805058
    int get_Identifier();
    // public UnityEngine.Pose get_Pose()
    // Offset: 0x4805060
    ::UnityEngine::Pose get_Pose();
    // public Oculus.Interaction.Locomotion.LocomotionEvent/TranslationType get_Translation()
    // Offset: 0x4805074
    ::Oculus::Interaction::Locomotion::LocomotionEvent::TranslationType get_Translation();
    // public Oculus.Interaction.Locomotion.LocomotionEvent/RotationType get_Rotation()
    // Offset: 0x480507C
    ::Oculus::Interaction::Locomotion::LocomotionEvent::RotationType get_Rotation();
    // public System.Void .ctor(System.Int32 identifier, UnityEngine.Pose pose, Oculus.Interaction.Locomotion.LocomotionEvent/TranslationType translationType, Oculus.Interaction.Locomotion.LocomotionEvent/RotationType rotationType)
    // Offset: 0x4805084
    // ABORTED: conflicts with another method.  LocomotionEvent(int identifier, ::UnityEngine::Pose pose, ::Oculus::Interaction::Locomotion::LocomotionEvent::TranslationType translationType, ::Oculus::Interaction::Locomotion::LocomotionEvent::RotationType rotationType);
    // public System.Void .ctor(System.Int32 identifier, UnityEngine.Vector3 position, Oculus.Interaction.Locomotion.LocomotionEvent/TranslationType translationType)
    // Offset: 0x48050A8
    LocomotionEvent(int identifier, ::UnityEngine::Vector3 position, ::Oculus::Interaction::Locomotion::LocomotionEvent::TranslationType translationType);
    // public System.Void .ctor(System.Int32 identifier, UnityEngine.Quaternion rotation, Oculus.Interaction.Locomotion.LocomotionEvent/RotationType rotationType)
    // Offset: 0x4805168
    LocomotionEvent(int identifier, ::UnityEngine::Quaternion rotation, ::Oculus::Interaction::Locomotion::LocomotionEvent::RotationType rotationType);
  }; // Oculus.Interaction.Locomotion.LocomotionEvent
  #pragma pack(pop)
  static check_size<sizeof(LocomotionEvent), 36 + sizeof(::Oculus::Interaction::Locomotion::LocomotionEvent::RotationType)> __Oculus_Interaction_Locomotion_LocomotionEventSizeCheck;
  static_assert(sizeof(LocomotionEvent) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Locomotion::LocomotionEvent::RotationType, "Oculus.Interaction.Locomotion", "LocomotionEvent/RotationType");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Locomotion::LocomotionEvent::TranslationType, "Oculus.Interaction.Locomotion", "LocomotionEvent/TranslationType");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionEvent::get_Identifier
// Il2CppName: get_Identifier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Oculus::Interaction::Locomotion::LocomotionEvent::*)()>(&Oculus::Interaction::Locomotion::LocomotionEvent::get_Identifier)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionEvent), "get_Identifier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionEvent::get_Pose
// Il2CppName: get_Pose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Pose (Oculus::Interaction::Locomotion::LocomotionEvent::*)()>(&Oculus::Interaction::Locomotion::LocomotionEvent::get_Pose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionEvent), "get_Pose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionEvent::get_Translation
// Il2CppName: get_Translation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Locomotion::LocomotionEvent::TranslationType (Oculus::Interaction::Locomotion::LocomotionEvent::*)()>(&Oculus::Interaction::Locomotion::LocomotionEvent::get_Translation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionEvent), "get_Translation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionEvent::get_Rotation
// Il2CppName: get_Rotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Locomotion::LocomotionEvent::RotationType (Oculus::Interaction::Locomotion::LocomotionEvent::*)()>(&Oculus::Interaction::Locomotion::LocomotionEvent::get_Rotation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionEvent), "get_Rotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionEvent::LocomotionEvent
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionEvent::LocomotionEvent
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionEvent::LocomotionEvent
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
