// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Oculus.Interaction.IPolyline
#include "Oculus/Interaction/IPolyline.hpp"
// Including type: UnityEngine.Pose
#include "UnityEngine/Pose.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.Locomotion
namespace Oculus::Interaction::Locomotion {
  // Forward declaring type: TeleportArcGravity
  class TeleportArcGravity;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Locomotion::TeleportArcGravity);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Locomotion::TeleportArcGravity*, "Oculus.Interaction.Locomotion", "TeleportArcGravity");
// Type namespace: Oculus.Interaction.Locomotion
namespace Oculus::Interaction::Locomotion {
  // Size: 0x71
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.Locomotion.TeleportArcGravity
  // [TokenAttribute] Offset: FFFFFFFF
  class TeleportArcGravity : public ::UnityEngine::MonoBehaviour/*, public ::Oculus::Interaction::IPolyline*/ {
    public:
    public:
    // private UnityEngine.Transform _origin
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Transform* origin;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform _stabilizationPoint
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Transform* stabilizationPoint;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.AnimationCurve _rangeCurve
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::AnimationCurve* rangeCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // private UnityEngine.AnimationCurve _stabilizationMixCurve
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::AnimationCurve* stabilizationMixCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // private UnityEngine.AnimationCurve _pitchCurve
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::AnimationCurve* pitchCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // private System.Single _gravityModifier
    // Size: 0x4
    // Offset: 0x48
    float gravityModifier;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 _arcPointsCount
    // Size: 0x4
    // Offset: 0x4C
    int arcPointsCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Pose _pose
    // Size: 0x1C
    // Offset: 0x50
    ::UnityEngine::Pose pose;
    // Field size check
    static_assert(sizeof(::UnityEngine::Pose) == 0x1C);
    // private System.Single _speed
    // Size: 0x4
    // Offset: 0x6C
    float speed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Boolean _started
    // Size: 0x1
    // Offset: 0x70
    bool started;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::IPolyline
    operator ::Oculus::Interaction::IPolyline() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::IPolyline*>(this);
    }
    // Get static field: static private readonly UnityEngine.Vector3 GRAVITY
    static ::UnityEngine::Vector3 _get_GRAVITY();
    // Set static field: static private readonly UnityEngine.Vector3 GRAVITY
    static void _set_GRAVITY(::UnityEngine::Vector3 value);
    // Get static field: static private readonly System.Single GROUND_MARGIN
    static float _get_GROUND_MARGIN();
    // Set static field: static private readonly System.Single GROUND_MARGIN
    static void _set_GROUND_MARGIN(float value);
    // Get instance field reference: private UnityEngine.Transform _origin
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__origin();
    // Get instance field reference: private UnityEngine.Transform _stabilizationPoint
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__stabilizationPoint();
    // Get instance field reference: private UnityEngine.AnimationCurve _rangeCurve
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn__rangeCurve();
    // Get instance field reference: private UnityEngine.AnimationCurve _stabilizationMixCurve
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn__stabilizationMixCurve();
    // Get instance field reference: private UnityEngine.AnimationCurve _pitchCurve
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn__pitchCurve();
    // Get instance field reference: private System.Single _gravityModifier
    [[deprecated("Use field access instead!")]] float& dyn__gravityModifier();
    // Get instance field reference: private System.Int32 _arcPointsCount
    [[deprecated("Use field access instead!")]] int& dyn__arcPointsCount();
    // Get instance field reference: private UnityEngine.Pose _pose
    [[deprecated("Use field access instead!")]] ::UnityEngine::Pose& dyn__pose();
    // Get instance field reference: private System.Single _speed
    [[deprecated("Use field access instead!")]] float& dyn__speed();
    // Get instance field reference: protected System.Boolean _started
    [[deprecated("Use field access instead!")]] bool& dyn__started();
    // public UnityEngine.AnimationCurve get_RangeCurve()
    // Offset: 0x48085C8
    ::UnityEngine::AnimationCurve* get_RangeCurve();
    // public System.Void set_RangeCurve(UnityEngine.AnimationCurve value)
    // Offset: 0x48085D0
    void set_RangeCurve(::UnityEngine::AnimationCurve* value);
    // public UnityEngine.AnimationCurve get_StabilizationMixCurve()
    // Offset: 0x48085D8
    ::UnityEngine::AnimationCurve* get_StabilizationMixCurve();
    // public System.Void set_StabilizationMixCurve(UnityEngine.AnimationCurve value)
    // Offset: 0x48085E0
    void set_StabilizationMixCurve(::UnityEngine::AnimationCurve* value);
    // public UnityEngine.AnimationCurve get_PitchCurve()
    // Offset: 0x48085E8
    ::UnityEngine::AnimationCurve* get_PitchCurve();
    // public System.Void set_PitchCurve(UnityEngine.AnimationCurve value)
    // Offset: 0x48085F0
    void set_PitchCurve(::UnityEngine::AnimationCurve* value);
    // public System.Single get_GravityModifier()
    // Offset: 0x48085F8
    float get_GravityModifier();
    // public System.Void set_GravityModifier(System.Single value)
    // Offset: 0x4808600
    void set_GravityModifier(float value);
    // public System.Int32 get_PointsCount()
    // Offset: 0x4808608
    int get_PointsCount();
    // public System.Void set_PointsCount(System.Int32 value)
    // Offset: 0x4808610
    void set_PointsCount(int value);
    // protected System.Void Start()
    // Offset: 0x4808618
    void Start();
    // protected System.Void Update()
    // Offset: 0x48086A8
    void Update();
    // public UnityEngine.Vector3 PointAtIndex(System.Int32 index)
    // Offset: 0x48086AC
    ::UnityEngine::Vector3 PointAtIndex(int index);
    // private UnityEngine.Vector3 EvaluateGravityArc(UnityEngine.Pose origin, System.Single speed, System.Single t)
    // Offset: 0x48086F4
    ::UnityEngine::Vector3 EvaluateGravityArc(::UnityEngine::Pose origin, float speed, float t);
    // private System.Void UpdateArcParameters()
    // Offset: 0x4808658
    void UpdateArcParameters();
    // private UnityEngine.Pose CalculatePose()
    // Offset: 0x4808890
    ::UnityEngine::Pose CalculatePose();
    // private System.Single CalculateSpeed(UnityEngine.Pose pose)
    // Offset: 0x480890C
    float CalculateSpeed(::UnityEngine::Pose pose);
    // private System.Void StabilizeDirection(ref UnityEngine.Pose pose)
    // Offset: 0x48089BC
    void StabilizeDirection(ByRef<::UnityEngine::Pose> pose);
    // private System.Void RemapPitch(ref UnityEngine.Pose pose)
    // Offset: 0x4808BB8
    void RemapPitch(ByRef<::UnityEngine::Pose> pose);
    // public System.Void InjectAllTeleportArcGravity(UnityEngine.Transform origin, UnityEngine.Transform stabilizationPoint)
    // Offset: 0x4808F30
    void InjectAllTeleportArcGravity(::UnityEngine::Transform* origin, ::UnityEngine::Transform* stabilizationPoint);
    // public System.Void InjectOrigin(UnityEngine.Transform origin)
    // Offset: 0x4808F60
    void InjectOrigin(::UnityEngine::Transform* origin);
    // public System.Void InjectStabilizationPoint(UnityEngine.Transform stabilizationPoint)
    // Offset: 0x4808F68
    void InjectStabilizationPoint(::UnityEngine::Transform* stabilizationPoint);
    // public System.Void .ctor()
    // Offset: 0x4808F70
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TeleportArcGravity* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Locomotion::TeleportArcGravity::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TeleportArcGravity*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x4809224
    static void _cctor();
  }; // Oculus.Interaction.Locomotion.TeleportArcGravity
  #pragma pack(pop)
  static check_size<sizeof(TeleportArcGravity), 112 + sizeof(bool)> __Oculus_Interaction_Locomotion_TeleportArcGravitySizeCheck;
  static_assert(sizeof(TeleportArcGravity) == 0x71);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportArcGravity::get_RangeCurve
// Il2CppName: get_RangeCurve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AnimationCurve* (Oculus::Interaction::Locomotion::TeleportArcGravity::*)()>(&Oculus::Interaction::Locomotion::TeleportArcGravity::get_RangeCurve)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportArcGravity*), "get_RangeCurve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportArcGravity::set_RangeCurve
// Il2CppName: set_RangeCurve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::TeleportArcGravity::*)(::UnityEngine::AnimationCurve*)>(&Oculus::Interaction::Locomotion::TeleportArcGravity::set_RangeCurve)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "AnimationCurve")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportArcGravity*), "set_RangeCurve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportArcGravity::get_StabilizationMixCurve
// Il2CppName: get_StabilizationMixCurve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AnimationCurve* (Oculus::Interaction::Locomotion::TeleportArcGravity::*)()>(&Oculus::Interaction::Locomotion::TeleportArcGravity::get_StabilizationMixCurve)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportArcGravity*), "get_StabilizationMixCurve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportArcGravity::set_StabilizationMixCurve
// Il2CppName: set_StabilizationMixCurve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::TeleportArcGravity::*)(::UnityEngine::AnimationCurve*)>(&Oculus::Interaction::Locomotion::TeleportArcGravity::set_StabilizationMixCurve)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "AnimationCurve")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportArcGravity*), "set_StabilizationMixCurve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportArcGravity::get_PitchCurve
// Il2CppName: get_PitchCurve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AnimationCurve* (Oculus::Interaction::Locomotion::TeleportArcGravity::*)()>(&Oculus::Interaction::Locomotion::TeleportArcGravity::get_PitchCurve)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportArcGravity*), "get_PitchCurve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportArcGravity::set_PitchCurve
// Il2CppName: set_PitchCurve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::TeleportArcGravity::*)(::UnityEngine::AnimationCurve*)>(&Oculus::Interaction::Locomotion::TeleportArcGravity::set_PitchCurve)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "AnimationCurve")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportArcGravity*), "set_PitchCurve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportArcGravity::get_GravityModifier
// Il2CppName: get_GravityModifier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::Locomotion::TeleportArcGravity::*)()>(&Oculus::Interaction::Locomotion::TeleportArcGravity::get_GravityModifier)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportArcGravity*), "get_GravityModifier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportArcGravity::set_GravityModifier
// Il2CppName: set_GravityModifier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::TeleportArcGravity::*)(float)>(&Oculus::Interaction::Locomotion::TeleportArcGravity::set_GravityModifier)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportArcGravity*), "set_GravityModifier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportArcGravity::get_PointsCount
// Il2CppName: get_PointsCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Oculus::Interaction::Locomotion::TeleportArcGravity::*)()>(&Oculus::Interaction::Locomotion::TeleportArcGravity::get_PointsCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportArcGravity*), "get_PointsCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportArcGravity::set_PointsCount
// Il2CppName: set_PointsCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::TeleportArcGravity::*)(int)>(&Oculus::Interaction::Locomotion::TeleportArcGravity::set_PointsCount)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportArcGravity*), "set_PointsCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportArcGravity::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::TeleportArcGravity::*)()>(&Oculus::Interaction::Locomotion::TeleportArcGravity::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportArcGravity*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportArcGravity::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::TeleportArcGravity::*)()>(&Oculus::Interaction::Locomotion::TeleportArcGravity::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportArcGravity*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportArcGravity::PointAtIndex
// Il2CppName: PointAtIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Oculus::Interaction::Locomotion::TeleportArcGravity::*)(int)>(&Oculus::Interaction::Locomotion::TeleportArcGravity::PointAtIndex)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportArcGravity*), "PointAtIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportArcGravity::EvaluateGravityArc
// Il2CppName: EvaluateGravityArc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Oculus::Interaction::Locomotion::TeleportArcGravity::*)(::UnityEngine::Pose, float, float)>(&Oculus::Interaction::Locomotion::TeleportArcGravity::EvaluateGravityArc)> {
  static const MethodInfo* get() {
    static auto* origin = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->byval_arg;
    static auto* speed = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportArcGravity*), "EvaluateGravityArc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{origin, speed, t});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportArcGravity::UpdateArcParameters
// Il2CppName: UpdateArcParameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::TeleportArcGravity::*)()>(&Oculus::Interaction::Locomotion::TeleportArcGravity::UpdateArcParameters)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportArcGravity*), "UpdateArcParameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportArcGravity::CalculatePose
// Il2CppName: CalculatePose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Pose (Oculus::Interaction::Locomotion::TeleportArcGravity::*)()>(&Oculus::Interaction::Locomotion::TeleportArcGravity::CalculatePose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportArcGravity*), "CalculatePose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportArcGravity::CalculateSpeed
// Il2CppName: CalculateSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::Locomotion::TeleportArcGravity::*)(::UnityEngine::Pose)>(&Oculus::Interaction::Locomotion::TeleportArcGravity::CalculateSpeed)> {
  static const MethodInfo* get() {
    static auto* pose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportArcGravity*), "CalculateSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pose});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportArcGravity::StabilizeDirection
// Il2CppName: StabilizeDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::TeleportArcGravity::*)(ByRef<::UnityEngine::Pose>)>(&Oculus::Interaction::Locomotion::TeleportArcGravity::StabilizeDirection)> {
  static const MethodInfo* get() {
    static auto* pose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportArcGravity*), "StabilizeDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pose});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportArcGravity::RemapPitch
// Il2CppName: RemapPitch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::TeleportArcGravity::*)(ByRef<::UnityEngine::Pose>)>(&Oculus::Interaction::Locomotion::TeleportArcGravity::RemapPitch)> {
  static const MethodInfo* get() {
    static auto* pose = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportArcGravity*), "RemapPitch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pose});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportArcGravity::InjectAllTeleportArcGravity
// Il2CppName: InjectAllTeleportArcGravity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::TeleportArcGravity::*)(::UnityEngine::Transform*, ::UnityEngine::Transform*)>(&Oculus::Interaction::Locomotion::TeleportArcGravity::InjectAllTeleportArcGravity)> {
  static const MethodInfo* get() {
    static auto* origin = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* stabilizationPoint = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportArcGravity*), "InjectAllTeleportArcGravity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{origin, stabilizationPoint});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportArcGravity::InjectOrigin
// Il2CppName: InjectOrigin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::TeleportArcGravity::*)(::UnityEngine::Transform*)>(&Oculus::Interaction::Locomotion::TeleportArcGravity::InjectOrigin)> {
  static const MethodInfo* get() {
    static auto* origin = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportArcGravity*), "InjectOrigin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{origin});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportArcGravity::InjectStabilizationPoint
// Il2CppName: InjectStabilizationPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::TeleportArcGravity::*)(::UnityEngine::Transform*)>(&Oculus::Interaction::Locomotion::TeleportArcGravity::InjectStabilizationPoint)> {
  static const MethodInfo* get() {
    static auto* stabilizationPoint = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportArcGravity*), "InjectStabilizationPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stabilizationPoint});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportArcGravity::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportArcGravity::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Oculus::Interaction::Locomotion::TeleportArcGravity::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportArcGravity*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
