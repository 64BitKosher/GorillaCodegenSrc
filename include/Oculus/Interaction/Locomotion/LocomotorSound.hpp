// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction::Locomotion
namespace Oculus::Interaction::Locomotion {
  // Forward declaring type: PlayerLocomotor
  class PlayerLocomotor;
  // Forward declaring type: AdjustableAudio
  class AdjustableAudio;
  // Forward declaring type: LocomotionEvent
  struct LocomotionEvent;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
  // Forward declaring type: Pose
  struct Pose;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.Locomotion
namespace Oculus::Interaction::Locomotion {
  // Forward declaring type: LocomotorSound
  class LocomotorSound;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Locomotion::LocomotorSound);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Locomotion::LocomotorSound*, "Oculus.Interaction.Locomotion", "LocomotorSound");
// Type namespace: Oculus.Interaction.Locomotion
namespace Oculus::Interaction::Locomotion {
  // Size: 0x55
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.Locomotion.LocomotorSound
  // [TokenAttribute] Offset: FFFFFFFF
  class LocomotorSound : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private Oculus.Interaction.Locomotion.PlayerLocomotor _locomotor
    // Size: 0x8
    // Offset: 0x20
    ::Oculus::Interaction::Locomotion::PlayerLocomotor* locomotor;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Locomotion::PlayerLocomotor*) == 0x8);
    // private Oculus.Interaction.Locomotion.AdjustableAudio _translationSound
    // Size: 0x8
    // Offset: 0x28
    ::Oculus::Interaction::Locomotion::AdjustableAudio* translationSound;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Locomotion::AdjustableAudio*) == 0x8);
    // private Oculus.Interaction.Locomotion.AdjustableAudio _translationDeniedSound
    // Size: 0x8
    // Offset: 0x30
    ::Oculus::Interaction::Locomotion::AdjustableAudio* translationDeniedSound;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Locomotion::AdjustableAudio*) == 0x8);
    // private Oculus.Interaction.Locomotion.AdjustableAudio _snapTurnSound
    // Size: 0x8
    // Offset: 0x38
    ::Oculus::Interaction::Locomotion::AdjustableAudio* snapTurnSound;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Locomotion::AdjustableAudio*) == 0x8);
    // private UnityEngine.AnimationCurve _translationCurve
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::AnimationCurve* translationCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // private UnityEngine.AnimationCurve _rotationCurve
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::AnimationCurve* rotationCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // private System.Single _pitchVariance
    // Size: 0x4
    // Offset: 0x50
    float pitchVariance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Boolean _started
    // Size: 0x1
    // Offset: 0x54
    bool started;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private Oculus.Interaction.Locomotion.PlayerLocomotor _locomotor
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Locomotion::PlayerLocomotor*& dyn__locomotor();
    // Get instance field reference: private Oculus.Interaction.Locomotion.AdjustableAudio _translationSound
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Locomotion::AdjustableAudio*& dyn__translationSound();
    // Get instance field reference: private Oculus.Interaction.Locomotion.AdjustableAudio _translationDeniedSound
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Locomotion::AdjustableAudio*& dyn__translationDeniedSound();
    // Get instance field reference: private Oculus.Interaction.Locomotion.AdjustableAudio _snapTurnSound
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Locomotion::AdjustableAudio*& dyn__snapTurnSound();
    // Get instance field reference: private UnityEngine.AnimationCurve _translationCurve
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn__translationCurve();
    // Get instance field reference: private UnityEngine.AnimationCurve _rotationCurve
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn__rotationCurve();
    // Get instance field reference: private System.Single _pitchVariance
    [[deprecated("Use field access instead!")]] float& dyn__pitchVariance();
    // Get instance field reference: protected System.Boolean _started
    [[deprecated("Use field access instead!")]] bool& dyn__started();
    // protected System.Void Start()
    // Offset: 0x47993A8
    void Start();
    // protected System.Void OnEnable()
    // Offset: 0x47993E0
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x479947C
    void OnDisable();
    // private System.Void HandleLocomotionEvent(Oculus.Interaction.Locomotion.LocomotionEvent locomotionEvent, UnityEngine.Pose delta)
    // Offset: 0x4799518
    void HandleLocomotionEvent(::Oculus::Interaction::Locomotion::LocomotionEvent locomotionEvent, ::UnityEngine::Pose delta);
    // private System.Void PlayTranslationSound(System.Single translationDistance)
    // Offset: 0x4799660
    void PlayTranslationSound(float translationDistance);
    // private System.Void PlayDenialSound(System.Single translationDistance)
    // Offset: 0x4799710
    void PlayDenialSound(float translationDistance);
    // private System.Void PlayRotationSound(System.Single rotationLength)
    // Offset: 0x47996B4
    void PlayRotationSound(float rotationLength);
    // public System.Void InjectAllLocomotorSound(Oculus.Interaction.Locomotion.PlayerLocomotor locomotor)
    // Offset: 0x4799764
    void InjectAllLocomotorSound(::Oculus::Interaction::Locomotion::PlayerLocomotor* locomotor);
    // public System.Void InjectPlayerLocomotor(Oculus.Interaction.Locomotion.PlayerLocomotor locomotor)
    // Offset: 0x479976C
    void InjectPlayerLocomotor(::Oculus::Interaction::Locomotion::PlayerLocomotor* locomotor);
    // public System.Void .ctor()
    // Offset: 0x4799774
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LocomotorSound* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Locomotion::LocomotorSound::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LocomotorSound*, creationType>()));
    }
  }; // Oculus.Interaction.Locomotion.LocomotorSound
  #pragma pack(pop)
  static check_size<sizeof(LocomotorSound), 84 + sizeof(bool)> __Oculus_Interaction_Locomotion_LocomotorSoundSizeCheck;
  static_assert(sizeof(LocomotorSound) == 0x55);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotorSound::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotorSound::*)()>(&Oculus::Interaction::Locomotion::LocomotorSound::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotorSound*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotorSound::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotorSound::*)()>(&Oculus::Interaction::Locomotion::LocomotorSound::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotorSound*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotorSound::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotorSound::*)()>(&Oculus::Interaction::Locomotion::LocomotorSound::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotorSound*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotorSound::HandleLocomotionEvent
// Il2CppName: HandleLocomotionEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotorSound::*)(::Oculus::Interaction::Locomotion::LocomotionEvent, ::UnityEngine::Pose)>(&Oculus::Interaction::Locomotion::LocomotorSound::HandleLocomotionEvent)> {
  static const MethodInfo* get() {
    static auto* locomotionEvent = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Locomotion", "LocomotionEvent")->byval_arg;
    static auto* delta = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotorSound*), "HandleLocomotionEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{locomotionEvent, delta});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotorSound::PlayTranslationSound
// Il2CppName: PlayTranslationSound
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotorSound::*)(float)>(&Oculus::Interaction::Locomotion::LocomotorSound::PlayTranslationSound)> {
  static const MethodInfo* get() {
    static auto* translationDistance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotorSound*), "PlayTranslationSound", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{translationDistance});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotorSound::PlayDenialSound
// Il2CppName: PlayDenialSound
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotorSound::*)(float)>(&Oculus::Interaction::Locomotion::LocomotorSound::PlayDenialSound)> {
  static const MethodInfo* get() {
    static auto* translationDistance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotorSound*), "PlayDenialSound", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{translationDistance});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotorSound::PlayRotationSound
// Il2CppName: PlayRotationSound
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotorSound::*)(float)>(&Oculus::Interaction::Locomotion::LocomotorSound::PlayRotationSound)> {
  static const MethodInfo* get() {
    static auto* rotationLength = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotorSound*), "PlayRotationSound", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rotationLength});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotorSound::InjectAllLocomotorSound
// Il2CppName: InjectAllLocomotorSound
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotorSound::*)(::Oculus::Interaction::Locomotion::PlayerLocomotor*)>(&Oculus::Interaction::Locomotion::LocomotorSound::InjectAllLocomotorSound)> {
  static const MethodInfo* get() {
    static auto* locomotor = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Locomotion", "PlayerLocomotor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotorSound*), "InjectAllLocomotorSound", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{locomotor});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotorSound::InjectPlayerLocomotor
// Il2CppName: InjectPlayerLocomotor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotorSound::*)(::Oculus::Interaction::Locomotion::PlayerLocomotor*)>(&Oculus::Interaction::Locomotion::LocomotorSound::InjectPlayerLocomotor)> {
  static const MethodInfo* get() {
    static auto* locomotor = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Locomotion", "PlayerLocomotor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotorSound*), "InjectPlayerLocomotor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{locomotor});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotorSound::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
