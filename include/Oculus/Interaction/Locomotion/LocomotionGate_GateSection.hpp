// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Oculus.Interaction.Locomotion.LocomotionGate
#include "Oculus/Interaction/Locomotion/LocomotionGate.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Locomotion::LocomotionGate::GateSection);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Locomotion::LocomotionGate::GateSection*, "Oculus.Interaction.Locomotion", "LocomotionGate/GateSection");
// Type namespace: Oculus.Interaction.Locomotion
namespace Oculus::Interaction::Locomotion {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.Locomotion.LocomotionGate/GateSection
  // [TokenAttribute] Offset: FFFFFFFF
  class LocomotionGate::GateSection : public ::Il2CppObject {
    public:
    public:
    // public System.Single minAngle
    // Size: 0x4
    // Offset: 0x10
    float minAngle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single maxAngle
    // Size: 0x4
    // Offset: 0x14
    float maxAngle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean canEnterDirectly
    // Size: 0x1
    // Offset: 0x18
    bool canEnterDirectly;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: canEnterDirectly and: locomotionMode
    char __padding2[0x3] = {};
    // public Oculus.Interaction.Locomotion.LocomotionGate/LocomotionMode locomotionMode
    // Size: 0x4
    // Offset: 0x1C
    ::Oculus::Interaction::Locomotion::LocomotionGate::LocomotionMode locomotionMode;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Locomotion::LocomotionGate::LocomotionMode) == 0x4);
    public:
    // Get instance field reference: public System.Single minAngle
    [[deprecated("Use field access instead!")]] float& dyn_minAngle();
    // Get instance field reference: public System.Single maxAngle
    [[deprecated("Use field access instead!")]] float& dyn_maxAngle();
    // Get instance field reference: public System.Boolean canEnterDirectly
    [[deprecated("Use field access instead!")]] bool& dyn_canEnterDirectly();
    // Get instance field reference: public Oculus.Interaction.Locomotion.LocomotionGate/LocomotionMode locomotionMode
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Locomotion::LocomotionGate::LocomotionMode& dyn_locomotionMode();
    // public System.Single ScoreToAngle(System.Single angle)
    // Offset: 0x4806FB4
    float ScoreToAngle(float angle);
    // public System.Void .ctor()
    // Offset: 0x4807698
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LocomotionGate::GateSection* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Locomotion::LocomotionGate::GateSection::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LocomotionGate::GateSection*, creationType>()));
    }
  }; // Oculus.Interaction.Locomotion.LocomotionGate/GateSection
  #pragma pack(pop)
  static check_size<sizeof(LocomotionGate::GateSection), 28 + sizeof(::Oculus::Interaction::Locomotion::LocomotionGate::LocomotionMode)> __Oculus_Interaction_Locomotion_LocomotionGate_GateSectionSizeCheck;
  static_assert(sizeof(LocomotionGate::GateSection) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionGate::GateSection::ScoreToAngle
// Il2CppName: ScoreToAngle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::Locomotion::LocomotionGate::GateSection::*)(float)>(&Oculus::Interaction::Locomotion::LocomotionGate::GateSection::ScoreToAngle)> {
  static const MethodInfo* get() {
    static auto* angle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionGate::GateSection*), "ScoreToAngle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{angle});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionGate::GateSection::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
