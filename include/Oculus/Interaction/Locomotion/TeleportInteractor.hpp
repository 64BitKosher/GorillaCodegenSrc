// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Oculus.Interaction.Interactor`2
#include "Oculus/Interaction/Interactor_2.hpp"
// Including type: Oculus.Interaction.Locomotion.ILocomotionEventBroadcaster
#include "Oculus/Interaction/Locomotion/ILocomotionEventBroadcaster.hpp"
// Including type: Oculus.Interaction.Locomotion.TeleportHit
#include "Oculus/Interaction/Locomotion/TeleportHit.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction::Locomotion
namespace Oculus::Interaction::Locomotion {
  // Forward declaring type: TeleportInteractable
  class TeleportInteractable;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Object because it is already included!
  // Skipping declaration: Pose because it is already included!
  // Skipping declaration: Vector3 because it is already included!
}
// Forward declaring namespace: Oculus::Interaction::Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: IHmd
  class IHmd;
}
// Forward declaring namespace: Oculus::Interaction
namespace Oculus::Interaction {
  // Forward declaring type: IPolyline
  class IPolyline;
  // Forward declaring type: ISelector
  class ISelector;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.Locomotion
namespace Oculus::Interaction::Locomotion {
  // Forward declaring type: TeleportInteractor
  class TeleportInteractor;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Locomotion::TeleportInteractor);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Locomotion::TeleportInteractor*, "Oculus.Interaction.Locomotion", "TeleportInteractor");
// Type namespace: Oculus.Interaction.Locomotion
namespace Oculus::Interaction::Locomotion {
  // WARNING Size may be invalid!
  // Autogenerated type: Oculus.Interaction.Locomotion.TeleportInteractor
  // [TokenAttribute] Offset: FFFFFFFF
  class TeleportInteractor : public ::Oculus::Interaction::Interactor_2<::Oculus::Interaction::Locomotion::TeleportInteractor*, ::Oculus::Interaction::Locomotion::TeleportInteractable*>/*, public ::Oculus::Interaction::Locomotion::ILocomotionEventBroadcaster*/ {
    public:
    // Nested type: ::Oculus::Interaction::Locomotion::TeleportInteractor::$$c
    class $$c;
    // Nested type: ::Oculus::Interaction::Locomotion::TeleportInteractor::$$c__DisplayClass30_0
    struct $$c__DisplayClass30_0;
    public:
    // private UnityEngine.Object _selector
    // Size: 0x8
    // Offset: 0x118
    ::UnityEngine::Object* selector;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private UnityEngine.Object _hmd
    // Size: 0x8
    // Offset: 0x120
    ::UnityEngine::Object* hmd;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.Input.IHmd <Hmd>k__BackingField
    // Size: 0x8
    // Offset: 0x128
    ::Oculus::Interaction::Input::IHmd* Hmd;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::IHmd*) == 0x8);
    // private UnityEngine.Object _teleportArc
    // Size: 0x8
    // Offset: 0x130
    ::UnityEngine::Object* teleportArc;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.IPolyline <TeleportArc>k__BackingField
    // Size: 0x8
    // Offset: 0x138
    ::Oculus::Interaction::IPolyline* TeleportArc;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::IPolyline*) == 0x8);
    // private System.Single _equalDistanceThreshold
    // Size: 0x4
    // Offset: 0x140
    float equalDistanceThreshold;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private Oculus.Interaction.Locomotion.TeleportHit _arcEnd
    // Size: 0x28
    // Offset: 0x148
    ::Oculus::Interaction::Locomotion::TeleportHit arcEnd;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Locomotion::TeleportHit) == 0x28);
    // private System.Action`1<Oculus.Interaction.Locomotion.LocomotionEvent> _whenLocomotionPerformed
    // Size: 0x8
    // Offset: 0x170
    ::System::Action_1<::Oculus::Interaction::Locomotion::LocomotionEvent>* whenLocomotionPerformed;
    // Field size check
    static_assert(sizeof(::System::Action_1<::Oculus::Interaction::Locomotion::LocomotionEvent>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::Locomotion::ILocomotionEventBroadcaster
    operator ::Oculus::Interaction::Locomotion::ILocomotionEventBroadcaster() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::Locomotion::ILocomotionEventBroadcaster*>(this);
    }
    // Get instance field reference: private UnityEngine.Object _selector
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__selector();
    // Get instance field reference: private UnityEngine.Object _hmd
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__hmd();
    // Get instance field reference: private Oculus.Interaction.Input.IHmd <Hmd>k__BackingField
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::IHmd*& dyn_$Hmd$k__BackingField();
    // Get instance field reference: private UnityEngine.Object _teleportArc
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__teleportArc();
    // Get instance field reference: private Oculus.Interaction.IPolyline <TeleportArc>k__BackingField
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::IPolyline*& dyn_$TeleportArc$k__BackingField();
    // Get instance field reference: private System.Single _equalDistanceThreshold
    [[deprecated("Use field access instead!")]] float& dyn__equalDistanceThreshold();
    // Get instance field reference: private Oculus.Interaction.Locomotion.TeleportHit _arcEnd
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Locomotion::TeleportHit& dyn__arcEnd();
    // Get instance field reference: private System.Action`1<Oculus.Interaction.Locomotion.LocomotionEvent> _whenLocomotionPerformed
    [[deprecated("Use field access instead!")]] ::System::Action_1<::Oculus::Interaction::Locomotion::LocomotionEvent>*& dyn__whenLocomotionPerformed();
    // private Oculus.Interaction.Input.IHmd get_Hmd()
    // Offset: 0x480A128
    ::Oculus::Interaction::Input::IHmd* get_Hmd();
    // private System.Void set_Hmd(Oculus.Interaction.Input.IHmd value)
    // Offset: 0x480A130
    void set_Hmd(::Oculus::Interaction::Input::IHmd* value);
    // public Oculus.Interaction.IPolyline get_TeleportArc()
    // Offset: 0x480A140
    ::Oculus::Interaction::IPolyline* get_TeleportArc();
    // private System.Void set_TeleportArc(Oculus.Interaction.IPolyline value)
    // Offset: 0x480A148
    void set_TeleportArc(::Oculus::Interaction::IPolyline* value);
    // public System.Single get_EqualDistanceThreshold()
    // Offset: 0x480A158
    float get_EqualDistanceThreshold();
    // public System.Void set_EqualDistanceThreshold(System.Single value)
    // Offset: 0x480A160
    void set_EqualDistanceThreshold(float value);
    // public UnityEngine.Pose get_ArcOrigin()
    // Offset: 0x480A168
    ::UnityEngine::Pose get_ArcOrigin();
    // public Oculus.Interaction.Locomotion.TeleportHit get_ArcEnd()
    // Offset: 0x480A2F4
    ::Oculus::Interaction::Locomotion::TeleportHit get_ArcEnd();
    // public UnityEngine.Pose get_TeleportTarget()
    // Offset: 0x480A30C
    ::UnityEngine::Pose get_TeleportTarget();
    // public System.Void add_WhenLocomotionPerformed(System.Action`1<Oculus.Interaction.Locomotion.LocomotionEvent> value)
    // Offset: 0x480A53C
    void add_WhenLocomotionPerformed(::System::Action_1<::Oculus::Interaction::Locomotion::LocomotionEvent>* value);
    // public System.Void remove_WhenLocomotionPerformed(System.Action`1<Oculus.Interaction.Locomotion.LocomotionEvent> value)
    // Offset: 0x480A5E8
    void remove_WhenLocomotionPerformed(::System::Action_1<::Oculus::Interaction::Locomotion::LocomotionEvent>* value);
    // public System.Boolean CanSelect(Oculus.Interaction.Locomotion.TeleportInteractable interactable)
    // Offset: 0x480A8F8
    bool CanSelect(::Oculus::Interaction::Locomotion::TeleportInteractable* interactable);
    // protected System.Void InteractableSelected(Oculus.Interaction.Locomotion.TeleportInteractable interactable)
    // Offset: 0x480AB38
    void InteractableSelected(::Oculus::Interaction::Locomotion::TeleportInteractable* interactable);
    // protected Oculus.Interaction.Locomotion.TeleportInteractable ComputeCandidate()
    // Offset: 0x480AD44
    ::Oculus::Interaction::Locomotion::TeleportInteractable* ComputeCandidate();
    // protected System.Int32 ComputeCandidateTiebreaker(Oculus.Interaction.Locomotion.TeleportInteractable a, Oculus.Interaction.Locomotion.TeleportInteractable b)
    // Offset: 0x480B93C
    int ComputeCandidateTiebreaker(::Oculus::Interaction::Locomotion::TeleportInteractable* a, ::Oculus::Interaction::Locomotion::TeleportInteractable* b);
    // public System.Void InjectAllTeleportInteractor(Oculus.Interaction.ISelector selector)
    // Offset: 0x480B9D0
    void InjectAllTeleportInteractor(::Oculus::Interaction::ISelector* selector);
    // public System.Void InjectSelector(Oculus.Interaction.ISelector selector)
    // Offset: 0x480B9D4
    void InjectSelector(::Oculus::Interaction::ISelector* selector);
    // public System.Void InjectOptionalHmd(Oculus.Interaction.Input.IHmd hmd)
    // Offset: 0x480BAB8
    void InjectOptionalHmd(::Oculus::Interaction::Input::IHmd* hmd);
    // public System.Void InjectOptionalTeleportArc(Oculus.Interaction.IPolyline teleportArc)
    // Offset: 0x480A828
    void InjectOptionalTeleportArc(::Oculus::Interaction::IPolyline* teleportArc);
    // private System.Void <ComputeCandidate>g__CheckViewToOriginBlockers|30_0(UnityEngine.Vector3 viewPosition, Oculus.Interaction.Locomotion.TeleportInteractable candidate, ref Oculus.Interaction.Locomotion.TeleportInteractor/<>c__DisplayClass30_0 )
    // Offset: 0x480B33C
    void $ComputeCandidate$g__CheckViewToOriginBlockers_30_0(::UnityEngine::Vector3 viewPosition, ::Oculus::Interaction::Locomotion::TeleportInteractable* candidate, ByRef<::Oculus::Interaction::Locomotion::TeleportInteractor::$$c__DisplayClass30_0> param_2);
    // private System.Void <ComputeCandidate>g__CheckCandidate|30_1(Oculus.Interaction.Locomotion.TeleportInteractable candidate, ref Oculus.Interaction.Locomotion.TeleportInteractor/<>c__DisplayClass30_0 )
    // Offset: 0x480B514
    void $ComputeCandidate$g__CheckCandidate_30_1(::Oculus::Interaction::Locomotion::TeleportInteractable* candidate, ByRef<::Oculus::Interaction::Locomotion::TeleportInteractor::$$c__DisplayClass30_0> param_1);
    // protected override System.Void Awake()
    // Offset: 0x480A694
    // Implemented from: Oculus.Interaction.Interactor`2
    // Base method: System.Void Interactor_2::Awake()
    void Awake();
    // protected override System.Void Start()
    // Offset: 0x480A790
    // Implemented from: Oculus.Interaction.Interactor`2
    // Base method: System.Void Interactor_2::Start()
    void Start();
    // public System.Void .ctor()
    // Offset: 0x480BB88
    // Implemented from: Oculus.Interaction.Interactor`2
    // Base method: System.Void Interactor_2::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TeleportInteractor* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Locomotion::TeleportInteractor::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TeleportInteractor*, creationType>()));
    }
  }; // Oculus.Interaction.Locomotion.TeleportInteractor
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportInteractor::get_Hmd
// Il2CppName: get_Hmd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Input::IHmd* (Oculus::Interaction::Locomotion::TeleportInteractor::*)()>(&Oculus::Interaction::Locomotion::TeleportInteractor::get_Hmd)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportInteractor*), "get_Hmd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportInteractor::set_Hmd
// Il2CppName: set_Hmd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::TeleportInteractor::*)(::Oculus::Interaction::Input::IHmd*)>(&Oculus::Interaction::Locomotion::TeleportInteractor::set_Hmd)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHmd")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportInteractor*), "set_Hmd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportInteractor::get_TeleportArc
// Il2CppName: get_TeleportArc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::IPolyline* (Oculus::Interaction::Locomotion::TeleportInteractor::*)()>(&Oculus::Interaction::Locomotion::TeleportInteractor::get_TeleportArc)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportInteractor*), "get_TeleportArc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportInteractor::set_TeleportArc
// Il2CppName: set_TeleportArc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::TeleportInteractor::*)(::Oculus::Interaction::IPolyline*)>(&Oculus::Interaction::Locomotion::TeleportInteractor::set_TeleportArc)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IPolyline")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportInteractor*), "set_TeleportArc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportInteractor::get_EqualDistanceThreshold
// Il2CppName: get_EqualDistanceThreshold
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::Locomotion::TeleportInteractor::*)()>(&Oculus::Interaction::Locomotion::TeleportInteractor::get_EqualDistanceThreshold)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportInteractor*), "get_EqualDistanceThreshold", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportInteractor::set_EqualDistanceThreshold
// Il2CppName: set_EqualDistanceThreshold
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::TeleportInteractor::*)(float)>(&Oculus::Interaction::Locomotion::TeleportInteractor::set_EqualDistanceThreshold)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportInteractor*), "set_EqualDistanceThreshold", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportInteractor::get_ArcOrigin
// Il2CppName: get_ArcOrigin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Pose (Oculus::Interaction::Locomotion::TeleportInteractor::*)()>(&Oculus::Interaction::Locomotion::TeleportInteractor::get_ArcOrigin)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportInteractor*), "get_ArcOrigin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportInteractor::get_ArcEnd
// Il2CppName: get_ArcEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Locomotion::TeleportHit (Oculus::Interaction::Locomotion::TeleportInteractor::*)()>(&Oculus::Interaction::Locomotion::TeleportInteractor::get_ArcEnd)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportInteractor*), "get_ArcEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportInteractor::get_TeleportTarget
// Il2CppName: get_TeleportTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Pose (Oculus::Interaction::Locomotion::TeleportInteractor::*)()>(&Oculus::Interaction::Locomotion::TeleportInteractor::get_TeleportTarget)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportInteractor*), "get_TeleportTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportInteractor::add_WhenLocomotionPerformed
// Il2CppName: add_WhenLocomotionPerformed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::TeleportInteractor::*)(::System::Action_1<::Oculus::Interaction::Locomotion::LocomotionEvent>*)>(&Oculus::Interaction::Locomotion::TeleportInteractor::add_WhenLocomotionPerformed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Interaction.Locomotion", "LocomotionEvent")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportInteractor*), "add_WhenLocomotionPerformed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportInteractor::remove_WhenLocomotionPerformed
// Il2CppName: remove_WhenLocomotionPerformed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::TeleportInteractor::*)(::System::Action_1<::Oculus::Interaction::Locomotion::LocomotionEvent>*)>(&Oculus::Interaction::Locomotion::TeleportInteractor::remove_WhenLocomotionPerformed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Interaction.Locomotion", "LocomotionEvent")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportInteractor*), "remove_WhenLocomotionPerformed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportInteractor::CanSelect
// Il2CppName: CanSelect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::Locomotion::TeleportInteractor::*)(::Oculus::Interaction::Locomotion::TeleportInteractable*)>(&Oculus::Interaction::Locomotion::TeleportInteractor::CanSelect)> {
  static const MethodInfo* get() {
    static auto* interactable = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Locomotion", "TeleportInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportInteractor*), "CanSelect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactable});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportInteractor::InteractableSelected
// Il2CppName: InteractableSelected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::TeleportInteractor::*)(::Oculus::Interaction::Locomotion::TeleportInteractable*)>(&Oculus::Interaction::Locomotion::TeleportInteractor::InteractableSelected)> {
  static const MethodInfo* get() {
    static auto* interactable = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Locomotion", "TeleportInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportInteractor*), "InteractableSelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactable});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportInteractor::ComputeCandidate
// Il2CppName: ComputeCandidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Locomotion::TeleportInteractable* (Oculus::Interaction::Locomotion::TeleportInteractor::*)()>(&Oculus::Interaction::Locomotion::TeleportInteractor::ComputeCandidate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportInteractor*), "ComputeCandidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportInteractor::ComputeCandidateTiebreaker
// Il2CppName: ComputeCandidateTiebreaker
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Oculus::Interaction::Locomotion::TeleportInteractor::*)(::Oculus::Interaction::Locomotion::TeleportInteractable*, ::Oculus::Interaction::Locomotion::TeleportInteractable*)>(&Oculus::Interaction::Locomotion::TeleportInteractor::ComputeCandidateTiebreaker)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Locomotion", "TeleportInteractable")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Locomotion", "TeleportInteractable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportInteractor*), "ComputeCandidateTiebreaker", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportInteractor::InjectAllTeleportInteractor
// Il2CppName: InjectAllTeleportInteractor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::TeleportInteractor::*)(::Oculus::Interaction::ISelector*)>(&Oculus::Interaction::Locomotion::TeleportInteractor::InjectAllTeleportInteractor)> {
  static const MethodInfo* get() {
    static auto* selector = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "ISelector")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportInteractor*), "InjectAllTeleportInteractor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{selector});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportInteractor::InjectSelector
// Il2CppName: InjectSelector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::TeleportInteractor::*)(::Oculus::Interaction::ISelector*)>(&Oculus::Interaction::Locomotion::TeleportInteractor::InjectSelector)> {
  static const MethodInfo* get() {
    static auto* selector = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "ISelector")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportInteractor*), "InjectSelector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{selector});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportInteractor::InjectOptionalHmd
// Il2CppName: InjectOptionalHmd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::TeleportInteractor::*)(::Oculus::Interaction::Input::IHmd*)>(&Oculus::Interaction::Locomotion::TeleportInteractor::InjectOptionalHmd)> {
  static const MethodInfo* get() {
    static auto* hmd = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHmd")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportInteractor*), "InjectOptionalHmd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hmd});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportInteractor::InjectOptionalTeleportArc
// Il2CppName: InjectOptionalTeleportArc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::TeleportInteractor::*)(::Oculus::Interaction::IPolyline*)>(&Oculus::Interaction::Locomotion::TeleportInteractor::InjectOptionalTeleportArc)> {
  static const MethodInfo* get() {
    static auto* teleportArc = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IPolyline")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportInteractor*), "InjectOptionalTeleportArc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{teleportArc});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportInteractor::$ComputeCandidate$g__CheckViewToOriginBlockers_30_0
// Il2CppName: <ComputeCandidate>g__CheckViewToOriginBlockers|30_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::TeleportInteractor::*)(::UnityEngine::Vector3, ::Oculus::Interaction::Locomotion::TeleportInteractable*, ByRef<::Oculus::Interaction::Locomotion::TeleportInteractor::$$c__DisplayClass30_0>)>(&Oculus::Interaction::Locomotion::TeleportInteractor::$ComputeCandidate$g__CheckViewToOriginBlockers_30_0)> {
  static const MethodInfo* get() {
    static auto* viewPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* candidate = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Locomotion", "TeleportInteractable")->byval_arg;
    static auto* param_2 = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Locomotion", "TeleportInteractor/<>c__DisplayClass30_0")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportInteractor*), "<ComputeCandidate>g__CheckViewToOriginBlockers|30_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{viewPosition, candidate, param_2});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportInteractor::$ComputeCandidate$g__CheckCandidate_30_1
// Il2CppName: <ComputeCandidate>g__CheckCandidate|30_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::TeleportInteractor::*)(::Oculus::Interaction::Locomotion::TeleportInteractable*, ByRef<::Oculus::Interaction::Locomotion::TeleportInteractor::$$c__DisplayClass30_0>)>(&Oculus::Interaction::Locomotion::TeleportInteractor::$ComputeCandidate$g__CheckCandidate_30_1)> {
  static const MethodInfo* get() {
    static auto* candidate = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Locomotion", "TeleportInteractable")->byval_arg;
    static auto* param_1 = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Locomotion", "TeleportInteractor/<>c__DisplayClass30_0")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportInteractor*), "<ComputeCandidate>g__CheckCandidate|30_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{candidate, param_1});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportInteractor::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::TeleportInteractor::*)()>(&Oculus::Interaction::Locomotion::TeleportInteractor::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportInteractor*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportInteractor::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::TeleportInteractor::*)()>(&Oculus::Interaction::Locomotion::TeleportInteractor::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportInteractor*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportInteractor::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
