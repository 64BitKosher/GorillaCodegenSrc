// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Interaction::Locomotion
namespace Oculus::Interaction::Locomotion {
  // Forward declaring type: TeleportInteractor
  class TeleportInteractor;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: LineRenderer
  class LineRenderer;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.Locomotion
namespace Oculus::Interaction::Locomotion {
  // Forward declaring type: TeleportArcVisual
  class TeleportArcVisual;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Locomotion::TeleportArcVisual);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Locomotion::TeleportArcVisual*, "Oculus.Interaction.Locomotion", "TeleportArcVisual");
// Type namespace: Oculus.Interaction.Locomotion
namespace Oculus::Interaction::Locomotion {
  // Size: 0x39
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.Locomotion.TeleportArcVisual
  // [TokenAttribute] Offset: FFFFFFFF
  class TeleportArcVisual : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private Oculus.Interaction.Locomotion.TeleportInteractor _interactor
    // Size: 0x8
    // Offset: 0x20
    ::Oculus::Interaction::Locomotion::TeleportInteractor* interactor;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Locomotion::TeleportInteractor*) == 0x8);
    // private UnityEngine.LineRenderer _arcRenderer
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::LineRenderer* arcRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::LineRenderer*) == 0x8);
    // private UnityEngine.Vector3[] _positions
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::UnityEngine::Vector3> positions;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // protected System.Boolean _started
    // Size: 0x1
    // Offset: 0x38
    bool started;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private Oculus.Interaction.Locomotion.TeleportInteractor _interactor
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Locomotion::TeleportInteractor*& dyn__interactor();
    // Get instance field reference: private UnityEngine.LineRenderer _arcRenderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::LineRenderer*& dyn__arcRenderer();
    // Get instance field reference: private UnityEngine.Vector3[] _positions
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn__positions();
    // Get instance field reference: protected System.Boolean _started
    [[deprecated("Use field access instead!")]] bool& dyn__started();
    // protected System.Void Start()
    // Offset: 0x480BD0C
    void Start();
    // protected System.Void OnEnable()
    // Offset: 0x480BD44
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x480BDE4
    void OnDisable();
    // protected System.Void HandleInteractorPostProcessed()
    // Offset: 0x480BE84
    void HandleInteractorPostProcessed();
    // public System.Void InjectAllTeleportArcVisual(Oculus.Interaction.Locomotion.TeleportInteractor interactor, UnityEngine.LineRenderer arcRenderer)
    // Offset: 0x480C06C
    void InjectAllTeleportArcVisual(::Oculus::Interaction::Locomotion::TeleportInteractor* interactor, ::UnityEngine::LineRenderer* arcRenderer);
    // public System.Void InjectInteractor(Oculus.Interaction.Locomotion.TeleportInteractor interactor)
    // Offset: 0x480C09C
    void InjectInteractor(::Oculus::Interaction::Locomotion::TeleportInteractor* interactor);
    // public System.Void InjectArcRenderer(UnityEngine.LineRenderer arcRenderer)
    // Offset: 0x480C0A4
    void InjectArcRenderer(::UnityEngine::LineRenderer* arcRenderer);
    // public System.Void .ctor()
    // Offset: 0x480C0AC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TeleportArcVisual* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Locomotion::TeleportArcVisual::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TeleportArcVisual*, creationType>()));
    }
  }; // Oculus.Interaction.Locomotion.TeleportArcVisual
  #pragma pack(pop)
  static check_size<sizeof(TeleportArcVisual), 56 + sizeof(bool)> __Oculus_Interaction_Locomotion_TeleportArcVisualSizeCheck;
  static_assert(sizeof(TeleportArcVisual) == 0x39);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportArcVisual::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::TeleportArcVisual::*)()>(&Oculus::Interaction::Locomotion::TeleportArcVisual::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportArcVisual*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportArcVisual::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::TeleportArcVisual::*)()>(&Oculus::Interaction::Locomotion::TeleportArcVisual::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportArcVisual*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportArcVisual::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::TeleportArcVisual::*)()>(&Oculus::Interaction::Locomotion::TeleportArcVisual::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportArcVisual*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportArcVisual::HandleInteractorPostProcessed
// Il2CppName: HandleInteractorPostProcessed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::TeleportArcVisual::*)()>(&Oculus::Interaction::Locomotion::TeleportArcVisual::HandleInteractorPostProcessed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportArcVisual*), "HandleInteractorPostProcessed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportArcVisual::InjectAllTeleportArcVisual
// Il2CppName: InjectAllTeleportArcVisual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::TeleportArcVisual::*)(::Oculus::Interaction::Locomotion::TeleportInteractor*, ::UnityEngine::LineRenderer*)>(&Oculus::Interaction::Locomotion::TeleportArcVisual::InjectAllTeleportArcVisual)> {
  static const MethodInfo* get() {
    static auto* interactor = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Locomotion", "TeleportInteractor")->byval_arg;
    static auto* arcRenderer = &::il2cpp_utils::GetClassFromName("UnityEngine", "LineRenderer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportArcVisual*), "InjectAllTeleportArcVisual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactor, arcRenderer});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportArcVisual::InjectInteractor
// Il2CppName: InjectInteractor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::TeleportArcVisual::*)(::Oculus::Interaction::Locomotion::TeleportInteractor*)>(&Oculus::Interaction::Locomotion::TeleportArcVisual::InjectInteractor)> {
  static const MethodInfo* get() {
    static auto* interactor = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Locomotion", "TeleportInteractor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportArcVisual*), "InjectInteractor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{interactor});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportArcVisual::InjectArcRenderer
// Il2CppName: InjectArcRenderer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::TeleportArcVisual::*)(::UnityEngine::LineRenderer*)>(&Oculus::Interaction::Locomotion::TeleportArcVisual::InjectArcRenderer)> {
  static const MethodInfo* get() {
    static auto* arcRenderer = &::il2cpp_utils::GetClassFromName("UnityEngine", "LineRenderer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportArcVisual*), "InjectArcRenderer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{arcRenderer});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportArcVisual::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
