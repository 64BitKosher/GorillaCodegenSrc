// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Oculus.Interaction.Locomotion.LocomotionEvent
#include "Oculus/Interaction/Locomotion/LocomotionEvent.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.Locomotion
namespace Oculus::Interaction::Locomotion {
  // Forward declaring type: ILocomotionEventBroadcaster
  class ILocomotionEventBroadcaster;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Locomotion::ILocomotionEventBroadcaster);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Locomotion::ILocomotionEventBroadcaster*, "Oculus.Interaction.Locomotion", "ILocomotionEventBroadcaster");
// Type namespace: Oculus.Interaction.Locomotion
namespace Oculus::Interaction::Locomotion {
  // Size: 0x0
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.Locomotion.ILocomotionEventBroadcaster
  // [TokenAttribute] Offset: FFFFFFFF
  class ILocomotionEventBroadcaster {
    public:
    // public System.Void add_WhenLocomotionPerformed(System.Action`1<Oculus.Interaction.Locomotion.LocomotionEvent> value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void add_WhenLocomotionPerformed(::System::Action_1<::Oculus::Interaction::Locomotion::LocomotionEvent>* value);
    // public System.Void remove_WhenLocomotionPerformed(System.Action`1<Oculus.Interaction.Locomotion.LocomotionEvent> value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void remove_WhenLocomotionPerformed(::System::Action_1<::Oculus::Interaction::Locomotion::LocomotionEvent>* value);
  }; // Oculus.Interaction.Locomotion.ILocomotionEventBroadcaster
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::ILocomotionEventBroadcaster::add_WhenLocomotionPerformed
// Il2CppName: add_WhenLocomotionPerformed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::ILocomotionEventBroadcaster::*)(::System::Action_1<::Oculus::Interaction::Locomotion::LocomotionEvent>*)>(&Oculus::Interaction::Locomotion::ILocomotionEventBroadcaster::add_WhenLocomotionPerformed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Interaction.Locomotion", "LocomotionEvent")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::ILocomotionEventBroadcaster*), "add_WhenLocomotionPerformed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::ILocomotionEventBroadcaster::remove_WhenLocomotionPerformed
// Il2CppName: remove_WhenLocomotionPerformed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::ILocomotionEventBroadcaster::*)(::System::Action_1<::Oculus::Interaction::Locomotion::LocomotionEvent>*)>(&Oculus::Interaction::Locomotion::ILocomotionEventBroadcaster::remove_WhenLocomotionPerformed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Interaction.Locomotion", "LocomotionEvent")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::ILocomotionEventBroadcaster*), "remove_WhenLocomotionPerformed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
