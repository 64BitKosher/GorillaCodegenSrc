// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: AudioClip
  class AudioClip;
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.Locomotion
namespace Oculus::Interaction::Locomotion {
  // Forward declaring type: AdjustableAudio
  class AdjustableAudio;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Locomotion::AdjustableAudio);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Locomotion::AdjustableAudio*, "Oculus.Interaction.Locomotion", "AdjustableAudio");
// Type namespace: Oculus.Interaction.Locomotion
namespace Oculus::Interaction::Locomotion {
  // Size: 0x49
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.Locomotion.AdjustableAudio
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: FFFFFFFF
  class AdjustableAudio : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.AudioSource _audioSource
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::AudioSource* audioSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // private UnityEngine.AudioClip _audioClip
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::AudioClip* audioClip;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // private System.Single _volumeFactor
    // Size: 0x4
    // Offset: 0x30
    float volumeFactor;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: volumeFactor and: volumeCurve
    char __padding2[0x4] = {};
    // private UnityEngine.AnimationCurve _volumeCurve
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::AnimationCurve* volumeCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // private UnityEngine.AnimationCurve _pitchCurve
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::AnimationCurve* pitchCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // protected System.Boolean _started
    // Size: 0x1
    // Offset: 0x48
    bool started;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private UnityEngine.AudioSource _audioSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn__audioSource();
    // Get instance field reference: private UnityEngine.AudioClip _audioClip
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn__audioClip();
    // Get instance field reference: private System.Single _volumeFactor
    [[deprecated("Use field access instead!")]] float& dyn__volumeFactor();
    // Get instance field reference: private UnityEngine.AnimationCurve _volumeCurve
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn__volumeCurve();
    // Get instance field reference: private UnityEngine.AnimationCurve _pitchCurve
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn__pitchCurve();
    // Get instance field reference: protected System.Boolean _started
    [[deprecated("Use field access instead!")]] bool& dyn__started();
    // public UnityEngine.AudioClip get_AudioClip()
    // Offset: 0x4799148
    ::UnityEngine::AudioClip* get_AudioClip();
    // public System.Void set_AudioClip(UnityEngine.AudioClip value)
    // Offset: 0x4799150
    void set_AudioClip(::UnityEngine::AudioClip* value);
    // public System.Single get_VolumeFactor()
    // Offset: 0x4799158
    float get_VolumeFactor();
    // public System.Void set_VolumeFactor(System.Single value)
    // Offset: 0x4799160
    void set_VolumeFactor(float value);
    // public UnityEngine.AnimationCurve get_VolumeCurve()
    // Offset: 0x4799168
    ::UnityEngine::AnimationCurve* get_VolumeCurve();
    // public System.Void set_VolumeCurve(UnityEngine.AnimationCurve value)
    // Offset: 0x4799170
    void set_VolumeCurve(::UnityEngine::AnimationCurve* value);
    // public UnityEngine.AnimationCurve get_PitchCurve()
    // Offset: 0x4799178
    ::UnityEngine::AnimationCurve* get_PitchCurve();
    // public System.Void set_PitchCurve(UnityEngine.AnimationCurve value)
    // Offset: 0x4799180
    void set_PitchCurve(::UnityEngine::AnimationCurve* value);
    // protected System.Void Reset()
    // Offset: 0x4799188
    void Reset();
    // protected System.Void Start()
    // Offset: 0x4799214
    void Start();
    // public System.Void PlayAudio(System.Single volumeT, System.Single pitchT, System.Single pan)
    // Offset: 0x479924C
    void PlayAudio(float volumeT, float pitchT, float pan);
    // public System.Void InjectAllAdjustableAudio(UnityEngine.AudioSource audioSource)
    // Offset: 0x4799328
    void InjectAllAdjustableAudio(::UnityEngine::AudioSource* audioSource);
    // public System.Void InjectAudioSource(UnityEngine.AudioSource audioSource)
    // Offset: 0x4799330
    void InjectAudioSource(::UnityEngine::AudioSource* audioSource);
    // public System.Void .ctor()
    // Offset: 0x4799338
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AdjustableAudio* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Locomotion::AdjustableAudio::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AdjustableAudio*, creationType>()));
    }
  }; // Oculus.Interaction.Locomotion.AdjustableAudio
  #pragma pack(pop)
  static check_size<sizeof(AdjustableAudio), 72 + sizeof(bool)> __Oculus_Interaction_Locomotion_AdjustableAudioSizeCheck;
  static_assert(sizeof(AdjustableAudio) == 0x49);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::AdjustableAudio::get_AudioClip
// Il2CppName: get_AudioClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AudioClip* (Oculus::Interaction::Locomotion::AdjustableAudio::*)()>(&Oculus::Interaction::Locomotion::AdjustableAudio::get_AudioClip)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::AdjustableAudio*), "get_AudioClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::AdjustableAudio::set_AudioClip
// Il2CppName: set_AudioClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::AdjustableAudio::*)(::UnityEngine::AudioClip*)>(&Oculus::Interaction::Locomotion::AdjustableAudio::set_AudioClip)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioClip")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::AdjustableAudio*), "set_AudioClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::AdjustableAudio::get_VolumeFactor
// Il2CppName: get_VolumeFactor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::Locomotion::AdjustableAudio::*)()>(&Oculus::Interaction::Locomotion::AdjustableAudio::get_VolumeFactor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::AdjustableAudio*), "get_VolumeFactor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::AdjustableAudio::set_VolumeFactor
// Il2CppName: set_VolumeFactor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::AdjustableAudio::*)(float)>(&Oculus::Interaction::Locomotion::AdjustableAudio::set_VolumeFactor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::AdjustableAudio*), "set_VolumeFactor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::AdjustableAudio::get_VolumeCurve
// Il2CppName: get_VolumeCurve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AnimationCurve* (Oculus::Interaction::Locomotion::AdjustableAudio::*)()>(&Oculus::Interaction::Locomotion::AdjustableAudio::get_VolumeCurve)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::AdjustableAudio*), "get_VolumeCurve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::AdjustableAudio::set_VolumeCurve
// Il2CppName: set_VolumeCurve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::AdjustableAudio::*)(::UnityEngine::AnimationCurve*)>(&Oculus::Interaction::Locomotion::AdjustableAudio::set_VolumeCurve)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "AnimationCurve")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::AdjustableAudio*), "set_VolumeCurve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::AdjustableAudio::get_PitchCurve
// Il2CppName: get_PitchCurve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AnimationCurve* (Oculus::Interaction::Locomotion::AdjustableAudio::*)()>(&Oculus::Interaction::Locomotion::AdjustableAudio::get_PitchCurve)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::AdjustableAudio*), "get_PitchCurve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::AdjustableAudio::set_PitchCurve
// Il2CppName: set_PitchCurve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::AdjustableAudio::*)(::UnityEngine::AnimationCurve*)>(&Oculus::Interaction::Locomotion::AdjustableAudio::set_PitchCurve)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "AnimationCurve")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::AdjustableAudio*), "set_PitchCurve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::AdjustableAudio::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::AdjustableAudio::*)()>(&Oculus::Interaction::Locomotion::AdjustableAudio::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::AdjustableAudio*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::AdjustableAudio::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::AdjustableAudio::*)()>(&Oculus::Interaction::Locomotion::AdjustableAudio::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::AdjustableAudio*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::AdjustableAudio::PlayAudio
// Il2CppName: PlayAudio
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::AdjustableAudio::*)(float, float, float)>(&Oculus::Interaction::Locomotion::AdjustableAudio::PlayAudio)> {
  static const MethodInfo* get() {
    static auto* volumeT = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* pitchT = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* pan = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::AdjustableAudio*), "PlayAudio", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{volumeT, pitchT, pan});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::AdjustableAudio::InjectAllAdjustableAudio
// Il2CppName: InjectAllAdjustableAudio
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::AdjustableAudio::*)(::UnityEngine::AudioSource*)>(&Oculus::Interaction::Locomotion::AdjustableAudio::InjectAllAdjustableAudio)> {
  static const MethodInfo* get() {
    static auto* audioSource = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioSource")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::AdjustableAudio*), "InjectAllAdjustableAudio", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{audioSource});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::AdjustableAudio::InjectAudioSource
// Il2CppName: InjectAudioSource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::AdjustableAudio::*)(::UnityEngine::AudioSource*)>(&Oculus::Interaction::Locomotion::AdjustableAudio::InjectAudioSource)> {
  static const MethodInfo* get() {
    static auto* audioSource = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioSource")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::AdjustableAudio*), "InjectAudioSource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{audioSource});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::AdjustableAudio::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
