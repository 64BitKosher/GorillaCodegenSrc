// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Pose
#include "UnityEngine/Pose.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Skipping declaration: Vector3 because it is already included!
}
// Completed forward declares
// Type namespace: Oculus.Interaction.Locomotion
namespace Oculus::Interaction::Locomotion {
  // Forward declaring type: TeleportHit
  struct TeleportHit;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Locomotion::TeleportHit, "Oculus.Interaction.Locomotion", "TeleportHit");
// Type namespace: Oculus.Interaction.Locomotion
namespace Oculus::Interaction::Locomotion {
  // Size: 0x28
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Oculus.Interaction.Locomotion.TeleportHit
  // [TokenAttribute] Offset: FFFFFFFF
  struct TeleportHit/*, public ::System::ValueType*/ {
    public:
    public:
    // public UnityEngine.Transform relativeTo
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::Transform* relativeTo;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private System.Single <SnapRadius>k__BackingField
    // Size: 0x4
    // Offset: 0x8
    float SnapRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Pose _localPose
    // Size: 0x1C
    // Offset: 0xC
    ::UnityEngine::Pose localPose;
    // Field size check
    static_assert(sizeof(::UnityEngine::Pose) == 0x1C);
    public:
    // Creating value type constructor for type: TeleportHit
    constexpr TeleportHit(::UnityEngine::Transform* relativeTo_ = {}, float SnapRadius_ = {}, ::UnityEngine::Pose localPose_ = {}) noexcept : relativeTo{relativeTo_}, SnapRadius{SnapRadius_}, localPose{localPose_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get static field: static public readonly Oculus.Interaction.Locomotion.TeleportHit DEFAULT
    static ::Oculus::Interaction::Locomotion::TeleportHit _get_DEFAULT();
    // Set static field: static public readonly Oculus.Interaction.Locomotion.TeleportHit DEFAULT
    static void _set_DEFAULT(::Oculus::Interaction::Locomotion::TeleportHit value);
    // Get instance field reference: public UnityEngine.Transform relativeTo
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_relativeTo();
    // Get instance field reference: private System.Single <SnapRadius>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$SnapRadius$k__BackingField();
    // Get instance field reference: private UnityEngine.Pose _localPose
    [[deprecated("Use field access instead!")]] ::UnityEngine::Pose& dyn__localPose();
    // public System.Single get_SnapRadius()
    // Offset: 0x4809288
    float get_SnapRadius();
    // public System.Void set_SnapRadius(System.Single value)
    // Offset: 0x4809290
    void set_SnapRadius(float value);
    // public UnityEngine.Vector3 get_Point()
    // Offset: 0x4809298
    ::UnityEngine::Vector3 get_Point();
    // public UnityEngine.Vector3 get_Normal()
    // Offset: 0x4809360
    ::UnityEngine::Vector3 get_Normal();
    // public System.Void .ctor(UnityEngine.Transform relativeTo, UnityEngine.Vector3 position, UnityEngine.Vector3 normal, System.Single snapRadius)
    // Offset: 0x48094A8
    TeleportHit(::UnityEngine::Transform* relativeTo, ::UnityEngine::Vector3 position, ::UnityEngine::Vector3 normal, float snapRadius);
    // static private System.Void .cctor()
    // Offset: 0x4809640
    static void _cctor();
  }; // Oculus.Interaction.Locomotion.TeleportHit
  #pragma pack(pop)
  static check_size<sizeof(TeleportHit), 12 + sizeof(::UnityEngine::Pose)> __Oculus_Interaction_Locomotion_TeleportHitSizeCheck;
  static_assert(sizeof(TeleportHit) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportHit::get_SnapRadius
// Il2CppName: get_SnapRadius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::Locomotion::TeleportHit::*)()>(&Oculus::Interaction::Locomotion::TeleportHit::get_SnapRadius)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportHit), "get_SnapRadius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportHit::set_SnapRadius
// Il2CppName: set_SnapRadius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::TeleportHit::*)(float)>(&Oculus::Interaction::Locomotion::TeleportHit::set_SnapRadius)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportHit), "set_SnapRadius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportHit::get_Point
// Il2CppName: get_Point
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Oculus::Interaction::Locomotion::TeleportHit::*)()>(&Oculus::Interaction::Locomotion::TeleportHit::get_Point)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportHit), "get_Point", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportHit::get_Normal
// Il2CppName: get_Normal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Oculus::Interaction::Locomotion::TeleportHit::*)()>(&Oculus::Interaction::Locomotion::TeleportHit::get_Normal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportHit), "get_Normal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportHit::TeleportHit
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::TeleportHit::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Oculus::Interaction::Locomotion::TeleportHit::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::TeleportHit), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
