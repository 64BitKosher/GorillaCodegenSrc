// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Oculus.Interaction.Locomotion.LocomotionGate
#include "Oculus/Interaction/Locomotion/LocomotionGate.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Events
namespace UnityEngine::Events {
  // Forward declaring type: UnityEvent
  class UnityEvent;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.Locomotion
namespace Oculus::Interaction::Locomotion {
  // Forward declaring type: LocomotionGateUnityEventWrapper
  class LocomotionGateUnityEventWrapper;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Locomotion::LocomotionGateUnityEventWrapper);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Locomotion::LocomotionGateUnityEventWrapper*, "Oculus.Interaction.Locomotion", "LocomotionGateUnityEventWrapper");
// Type namespace: Oculus.Interaction.Locomotion
namespace Oculus::Interaction::Locomotion {
  // Size: 0x49
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.Locomotion.LocomotionGateUnityEventWrapper
  // [TokenAttribute] Offset: FFFFFFFF
  class LocomotionGateUnityEventWrapper : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private Oculus.Interaction.Locomotion.LocomotionGate _locomotionGate
    // Size: 0x8
    // Offset: 0x20
    ::Oculus::Interaction::Locomotion::LocomotionGate* locomotionGate;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Locomotion::LocomotionGate*) == 0x8);
    // public UnityEngine.Events.UnityEvent WhenEnterLocomotion
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Events::UnityEvent* WhenEnterLocomotion;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    // public UnityEngine.Events.UnityEvent WhenExitLocomotion
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Events::UnityEvent* WhenExitLocomotion;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    // public UnityEngine.Events.UnityEvent WhenChangedToTurn
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Events::UnityEvent* WhenChangedToTurn;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    // public UnityEngine.Events.UnityEvent WhenChangedToTeleport
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Events::UnityEvent* WhenChangedToTeleport;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    // protected System.Boolean _started
    // Size: 0x1
    // Offset: 0x48
    bool started;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private Oculus.Interaction.Locomotion.LocomotionGate _locomotionGate
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Locomotion::LocomotionGate*& dyn__locomotionGate();
    // Get instance field reference: public UnityEngine.Events.UnityEvent WhenEnterLocomotion
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn_WhenEnterLocomotion();
    // Get instance field reference: public UnityEngine.Events.UnityEvent WhenExitLocomotion
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn_WhenExitLocomotion();
    // Get instance field reference: public UnityEngine.Events.UnityEvent WhenChangedToTurn
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn_WhenChangedToTurn();
    // Get instance field reference: public UnityEngine.Events.UnityEvent WhenChangedToTeleport
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn_WhenChangedToTeleport();
    // Get instance field reference: protected System.Boolean _started
    [[deprecated("Use field access instead!")]] bool& dyn__started();
    // protected System.Void Start()
    // Offset: 0x4811C44
    void Start();
    // protected System.Void OnEnable()
    // Offset: 0x4811C7C
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x4811D18
    void OnDisable();
    // private System.Void HandleActiveModeChanged(Oculus.Interaction.Locomotion.LocomotionGate/LocomotionModeEventArgs locomotionModeArgs)
    // Offset: 0x4811DB4
    void HandleActiveModeChanged(::Oculus::Interaction::Locomotion::LocomotionGate::LocomotionModeEventArgs locomotionModeArgs);
    // public System.Void InjectAllLocomotionGateUnityEventWrapper(Oculus.Interaction.Locomotion.LocomotionGate locomotionGate)
    // Offset: 0x4811E14
    void InjectAllLocomotionGateUnityEventWrapper(::Oculus::Interaction::Locomotion::LocomotionGate* locomotionGate);
    // public System.Void InjectLocomotionGate(Oculus.Interaction.Locomotion.LocomotionGate locomotionGate)
    // Offset: 0x4811E1C
    void InjectLocomotionGate(::Oculus::Interaction::Locomotion::LocomotionGate* locomotionGate);
    // public System.Void .ctor()
    // Offset: 0x4811E24
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LocomotionGateUnityEventWrapper* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Locomotion::LocomotionGateUnityEventWrapper::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LocomotionGateUnityEventWrapper*, creationType>()));
    }
  }; // Oculus.Interaction.Locomotion.LocomotionGateUnityEventWrapper
  #pragma pack(pop)
  static check_size<sizeof(LocomotionGateUnityEventWrapper), 72 + sizeof(bool)> __Oculus_Interaction_Locomotion_LocomotionGateUnityEventWrapperSizeCheck;
  static_assert(sizeof(LocomotionGateUnityEventWrapper) == 0x49);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionGateUnityEventWrapper::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotionGateUnityEventWrapper::*)()>(&Oculus::Interaction::Locomotion::LocomotionGateUnityEventWrapper::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionGateUnityEventWrapper*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionGateUnityEventWrapper::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotionGateUnityEventWrapper::*)()>(&Oculus::Interaction::Locomotion::LocomotionGateUnityEventWrapper::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionGateUnityEventWrapper*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionGateUnityEventWrapper::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotionGateUnityEventWrapper::*)()>(&Oculus::Interaction::Locomotion::LocomotionGateUnityEventWrapper::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionGateUnityEventWrapper*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionGateUnityEventWrapper::HandleActiveModeChanged
// Il2CppName: HandleActiveModeChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotionGateUnityEventWrapper::*)(::Oculus::Interaction::Locomotion::LocomotionGate::LocomotionModeEventArgs)>(&Oculus::Interaction::Locomotion::LocomotionGateUnityEventWrapper::HandleActiveModeChanged)> {
  static const MethodInfo* get() {
    static auto* locomotionModeArgs = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Locomotion", "LocomotionGate/LocomotionModeEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionGateUnityEventWrapper*), "HandleActiveModeChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{locomotionModeArgs});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionGateUnityEventWrapper::InjectAllLocomotionGateUnityEventWrapper
// Il2CppName: InjectAllLocomotionGateUnityEventWrapper
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotionGateUnityEventWrapper::*)(::Oculus::Interaction::Locomotion::LocomotionGate*)>(&Oculus::Interaction::Locomotion::LocomotionGateUnityEventWrapper::InjectAllLocomotionGateUnityEventWrapper)> {
  static const MethodInfo* get() {
    static auto* locomotionGate = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Locomotion", "LocomotionGate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionGateUnityEventWrapper*), "InjectAllLocomotionGateUnityEventWrapper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{locomotionGate});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionGateUnityEventWrapper::InjectLocomotionGate
// Il2CppName: InjectLocomotionGate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotionGateUnityEventWrapper::*)(::Oculus::Interaction::Locomotion::LocomotionGate*)>(&Oculus::Interaction::Locomotion::LocomotionGateUnityEventWrapper::InjectLocomotionGate)> {
  static const MethodInfo* get() {
    static auto* locomotionGate = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Locomotion", "LocomotionGate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionGateUnityEventWrapper*), "InjectLocomotionGate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{locomotionGate});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionGateUnityEventWrapper::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
