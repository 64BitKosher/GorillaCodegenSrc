// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Pose
#include "UnityEngine/Pose.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: Oculus::Interaction::Locomotion
namespace Oculus::Interaction::Locomotion {
  // Skipping declaration: LocomotionMode because it is already included!
  // Forward declaring type: VirtualActiveState
  class VirtualActiveState;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Object because it is already included!
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: Oculus::Interaction::Input
namespace Oculus::Interaction::Input {
  // Forward declaring type: IHand
  class IHand;
}
// Forward declaring namespace: Oculus::Interaction
namespace Oculus::Interaction {
  // Forward declaring type: IActiveState
  class IActiveState;
}
// Completed forward declares
// Type namespace: Oculus.Interaction.Locomotion
namespace Oculus::Interaction::Locomotion {
  // Forward declaring type: LocomotionGate
  class LocomotionGate;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::Locomotion::LocomotionGate);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Locomotion::LocomotionGate*, "Oculus.Interaction.Locomotion", "LocomotionGate");
// Type namespace: Oculus.Interaction.Locomotion
namespace Oculus::Interaction::Locomotion {
  // Size: 0xB1
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.Locomotion.LocomotionGate
  // [TokenAttribute] Offset: FFFFFFFF
  class LocomotionGate : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::Oculus::Interaction::Locomotion::LocomotionGate::LocomotionMode
    struct LocomotionMode;
    // Nested type: ::Oculus::Interaction::Locomotion::LocomotionGate::GateSection
    class GateSection;
    // Nested type: ::Oculus::Interaction::Locomotion::LocomotionGate::LocomotionModeEventArgs
    struct LocomotionModeEventArgs;
    // Nested type: ::Oculus::Interaction::Locomotion::LocomotionGate::$$c
    class $$c;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Oculus.Interaction.Locomotion.LocomotionGate/LocomotionMode
    // [TokenAttribute] Offset: FFFFFFFF
    struct LocomotionMode/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: LocomotionMode
      constexpr LocomotionMode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Oculus.Interaction.Locomotion.LocomotionGate/LocomotionMode None
      static constexpr const int None = 0;
      // Get static field: static public Oculus.Interaction.Locomotion.LocomotionGate/LocomotionMode None
      static ::Oculus::Interaction::Locomotion::LocomotionGate::LocomotionMode _get_None();
      // Set static field: static public Oculus.Interaction.Locomotion.LocomotionGate/LocomotionMode None
      static void _set_None(::Oculus::Interaction::Locomotion::LocomotionGate::LocomotionMode value);
      // static field const value: static public Oculus.Interaction.Locomotion.LocomotionGate/LocomotionMode Teleport
      static constexpr const int Teleport = 1;
      // Get static field: static public Oculus.Interaction.Locomotion.LocomotionGate/LocomotionMode Teleport
      static ::Oculus::Interaction::Locomotion::LocomotionGate::LocomotionMode _get_Teleport();
      // Set static field: static public Oculus.Interaction.Locomotion.LocomotionGate/LocomotionMode Teleport
      static void _set_Teleport(::Oculus::Interaction::Locomotion::LocomotionGate::LocomotionMode value);
      // static field const value: static public Oculus.Interaction.Locomotion.LocomotionGate/LocomotionMode Turn
      static constexpr const int Turn = 2;
      // Get static field: static public Oculus.Interaction.Locomotion.LocomotionGate/LocomotionMode Turn
      static ::Oculus::Interaction::Locomotion::LocomotionGate::LocomotionMode _get_Turn();
      // Set static field: static public Oculus.Interaction.Locomotion.LocomotionGate/LocomotionMode Turn
      static void _set_Turn(::Oculus::Interaction::Locomotion::LocomotionGate::LocomotionMode value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Oculus.Interaction.Locomotion.LocomotionGate/LocomotionMode
    #pragma pack(pop)
    static check_size<sizeof(LocomotionGate::LocomotionMode), 0 + sizeof(int)> __Oculus_Interaction_Locomotion_LocomotionGate_LocomotionModeSizeCheck;
    static_assert(sizeof(LocomotionGate::LocomotionMode) == 0x4);
    // Size: 0x8
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Oculus.Interaction.Locomotion.LocomotionGate/LocomotionModeEventArgs
    // [TokenAttribute] Offset: FFFFFFFF
    struct LocomotionModeEventArgs/*, public ::System::ValueType*/ {
      public:
      public:
      // private readonly Oculus.Interaction.Locomotion.LocomotionGate/LocomotionMode <PreviousMode>k__BackingField
      // Size: 0x4
      // Offset: 0x0
      ::Oculus::Interaction::Locomotion::LocomotionGate::LocomotionMode PreviousMode;
      // Field size check
      static_assert(sizeof(::Oculus::Interaction::Locomotion::LocomotionGate::LocomotionMode) == 0x4);
      // private readonly Oculus.Interaction.Locomotion.LocomotionGate/LocomotionMode <NewMode>k__BackingField
      // Size: 0x4
      // Offset: 0x4
      ::Oculus::Interaction::Locomotion::LocomotionGate::LocomotionMode NewMode;
      // Field size check
      static_assert(sizeof(::Oculus::Interaction::Locomotion::LocomotionGate::LocomotionMode) == 0x4);
      public:
      // Creating value type constructor for type: LocomotionModeEventArgs
      constexpr LocomotionModeEventArgs(::Oculus::Interaction::Locomotion::LocomotionGate::LocomotionMode PreviousMode_ = {}, ::Oculus::Interaction::Locomotion::LocomotionGate::LocomotionMode NewMode_ = {}) noexcept : PreviousMode{PreviousMode_}, NewMode{NewMode_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: private readonly Oculus.Interaction.Locomotion.LocomotionGate/LocomotionMode <PreviousMode>k__BackingField
      [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Locomotion::LocomotionGate::LocomotionMode& dyn_$PreviousMode$k__BackingField();
      // Get instance field reference: private readonly Oculus.Interaction.Locomotion.LocomotionGate/LocomotionMode <NewMode>k__BackingField
      [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Locomotion::LocomotionGate::LocomotionMode& dyn_$NewMode$k__BackingField();
      // public Oculus.Interaction.Locomotion.LocomotionGate/LocomotionMode get_PreviousMode()
      // Offset: 0x4807748
      ::Oculus::Interaction::Locomotion::LocomotionGate::LocomotionMode get_PreviousMode();
      // public Oculus.Interaction.Locomotion.LocomotionGate/LocomotionMode get_NewMode()
      // Offset: 0x4807750
      ::Oculus::Interaction::Locomotion::LocomotionGate::LocomotionMode get_NewMode();
      // public System.Void .ctor(Oculus.Interaction.Locomotion.LocomotionGate/LocomotionMode previousMode, Oculus.Interaction.Locomotion.LocomotionGate/LocomotionMode newMode)
      // Offset: 0x4805FB0
      // ABORTED: conflicts with another method.  LocomotionModeEventArgs(::Oculus::Interaction::Locomotion::LocomotionGate::LocomotionMode previousMode, ::Oculus::Interaction::Locomotion::LocomotionGate::LocomotionMode newMode);
    }; // Oculus.Interaction.Locomotion.LocomotionGate/LocomotionModeEventArgs
    #pragma pack(pop)
    static check_size<sizeof(LocomotionGate::LocomotionModeEventArgs), 4 + sizeof(::Oculus::Interaction::Locomotion::LocomotionGate::LocomotionMode)> __Oculus_Interaction_Locomotion_LocomotionGate_LocomotionModeEventArgsSizeCheck;
    static_assert(sizeof(LocomotionGate::LocomotionModeEventArgs) == 0x8);
    public:
    // private UnityEngine.Object _hand
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Object* hand;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.Input.IHand <Hand>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    ::Oculus::Interaction::Input::IHand* Hand;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Input::IHand*) == 0x8);
    // private UnityEngine.Transform _shoulder
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Transform* shoulder;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private Oculus.Interaction.Locomotion.LocomotionGate/GateSection[] _gateSections
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<::Oculus::Interaction::Locomotion::LocomotionGate::GateSection*> gateSections;
    // Field size check
    static_assert(sizeof(::ArrayW<::Oculus::Interaction::Locomotion::LocomotionGate::GateSection*>) == 0x8);
    // private UnityEngine.Object _enableShape
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Object* enableShape;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.IActiveState <EnableShape>k__BackingField
    // Size: 0x8
    // Offset: 0x48
    ::Oculus::Interaction::IActiveState* EnableShape;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::IActiveState*) == 0x8);
    // private UnityEngine.Object _disableShape
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::Object* disableShape;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // private Oculus.Interaction.IActiveState <DisableShape>k__BackingField
    // Size: 0x8
    // Offset: 0x58
    ::Oculus::Interaction::IActiveState* DisableShape;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::IActiveState*) == 0x8);
    // private Oculus.Interaction.Locomotion.VirtualActiveState _turningState
    // Size: 0x8
    // Offset: 0x60
    ::Oculus::Interaction::Locomotion::VirtualActiveState* turningState;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Locomotion::VirtualActiveState*) == 0x8);
    // private Oculus.Interaction.Locomotion.VirtualActiveState _teleportState
    // Size: 0x8
    // Offset: 0x68
    ::Oculus::Interaction::Locomotion::VirtualActiveState* teleportState;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Locomotion::VirtualActiveState*) == 0x8);
    // protected System.Boolean _started
    // Size: 0x1
    // Offset: 0x70
    bool started;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _previousShapeEnabled
    // Size: 0x1
    // Offset: 0x71
    bool previousShapeEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: previousShapeEnabled and: currentGateIndex
    char __padding11[0x2] = {};
    // private System.Int32 _currentGateIndex
    // Size: 0x4
    // Offset: 0x74
    int currentGateIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private Oculus.Interaction.Locomotion.LocomotionGate/LocomotionMode _activeMode
    // Size: 0x4
    // Offset: 0x78
    ::Oculus::Interaction::Locomotion::LocomotionGate::LocomotionMode activeMode;
    // Field size check
    static_assert(sizeof(::Oculus::Interaction::Locomotion::LocomotionGate::LocomotionMode) == 0x4);
    // private System.Single <CurrentAngle>k__BackingField
    // Size: 0x4
    // Offset: 0x7C
    float CurrentAngle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector3 <WristDirection>k__BackingField
    // Size: 0xC
    // Offset: 0x80
    ::UnityEngine::Vector3 WristDirection;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Pose <StabilizationPose>k__BackingField
    // Size: 0x1C
    // Offset: 0x8C
    ::UnityEngine::Pose StabilizationPose;
    // Field size check
    static_assert(sizeof(::UnityEngine::Pose) == 0x1C);
    // private System.Action`1<Oculus.Interaction.Locomotion.LocomotionGate/LocomotionModeEventArgs> _whenActiveModeChanged
    // Size: 0x8
    // Offset: 0xA8
    ::System::Action_1<::Oculus::Interaction::Locomotion::LocomotionGate::LocomotionModeEventArgs>* whenActiveModeChanged;
    // Field size check
    static_assert(sizeof(::System::Action_1<::Oculus::Interaction::Locomotion::LocomotionGate::LocomotionModeEventArgs>*) == 0x8);
    // private System.Boolean _cancelled
    // Size: 0x1
    // Offset: 0xB0
    bool cancelled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get static field: static private readonly Oculus.Interaction.Locomotion.LocomotionGate/GateSection DefaultSection
    static ::Oculus::Interaction::Locomotion::LocomotionGate::GateSection* _get_DefaultSection();
    // Set static field: static private readonly Oculus.Interaction.Locomotion.LocomotionGate/GateSection DefaultSection
    static void _set_DefaultSection(::Oculus::Interaction::Locomotion::LocomotionGate::GateSection* value);
    // static field const value: static private System.Single _enterPoseThreshold
    static constexpr const float _enterPoseThreshold = 0.5;
    // Get static field: static private System.Single _enterPoseThreshold
    static float _get__enterPoseThreshold();
    // Set static field: static private System.Single _enterPoseThreshold
    static void _set__enterPoseThreshold(float value);
    // static field const value: static private System.Single _wristLimit
    static constexpr const float _wristLimit = -70;
    // Get static field: static private System.Single _wristLimit
    static float _get__wristLimit();
    // Set static field: static private System.Single _wristLimit
    static void _set__wristLimit(float value);
    // Get instance field reference: private UnityEngine.Object _hand
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__hand();
    // Get instance field reference: private Oculus.Interaction.Input.IHand <Hand>k__BackingField
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Input::IHand*& dyn_$Hand$k__BackingField();
    // Get instance field reference: private UnityEngine.Transform _shoulder
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__shoulder();
    // Get instance field reference: private Oculus.Interaction.Locomotion.LocomotionGate/GateSection[] _gateSections
    [[deprecated("Use field access instead!")]] ::ArrayW<::Oculus::Interaction::Locomotion::LocomotionGate::GateSection*>& dyn__gateSections();
    // Get instance field reference: private UnityEngine.Object _enableShape
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__enableShape();
    // Get instance field reference: private Oculus.Interaction.IActiveState <EnableShape>k__BackingField
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::IActiveState*& dyn_$EnableShape$k__BackingField();
    // Get instance field reference: private UnityEngine.Object _disableShape
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn__disableShape();
    // Get instance field reference: private Oculus.Interaction.IActiveState <DisableShape>k__BackingField
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::IActiveState*& dyn_$DisableShape$k__BackingField();
    // Get instance field reference: private Oculus.Interaction.Locomotion.VirtualActiveState _turningState
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Locomotion::VirtualActiveState*& dyn__turningState();
    // Get instance field reference: private Oculus.Interaction.Locomotion.VirtualActiveState _teleportState
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Locomotion::VirtualActiveState*& dyn__teleportState();
    // Get instance field reference: protected System.Boolean _started
    [[deprecated("Use field access instead!")]] bool& dyn__started();
    // Get instance field reference: private System.Boolean _previousShapeEnabled
    [[deprecated("Use field access instead!")]] bool& dyn__previousShapeEnabled();
    // Get instance field reference: private System.Int32 _currentGateIndex
    [[deprecated("Use field access instead!")]] int& dyn__currentGateIndex();
    // Get instance field reference: private Oculus.Interaction.Locomotion.LocomotionGate/LocomotionMode _activeMode
    [[deprecated("Use field access instead!")]] ::Oculus::Interaction::Locomotion::LocomotionGate::LocomotionMode& dyn__activeMode();
    // Get instance field reference: private System.Single <CurrentAngle>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$CurrentAngle$k__BackingField();
    // Get instance field reference: private UnityEngine.Vector3 <WristDirection>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_$WristDirection$k__BackingField();
    // Get instance field reference: private UnityEngine.Pose <StabilizationPose>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Pose& dyn_$StabilizationPose$k__BackingField();
    // Get instance field reference: private System.Action`1<Oculus.Interaction.Locomotion.LocomotionGate/LocomotionModeEventArgs> _whenActiveModeChanged
    [[deprecated("Use field access instead!")]] ::System::Action_1<::Oculus::Interaction::Locomotion::LocomotionGate::LocomotionModeEventArgs>*& dyn__whenActiveModeChanged();
    // Get instance field reference: private System.Boolean _cancelled
    [[deprecated("Use field access instead!")]] bool& dyn__cancelled();
    // public Oculus.Interaction.Input.IHand get_Hand()
    // Offset: 0x4805F0C
    ::Oculus::Interaction::Input::IHand* get_Hand();
    // private System.Void set_Hand(Oculus.Interaction.Input.IHand value)
    // Offset: 0x4805F14
    void set_Hand(::Oculus::Interaction::Input::IHand* value);
    // private Oculus.Interaction.IActiveState get_EnableShape()
    // Offset: 0x4805F1C
    ::Oculus::Interaction::IActiveState* get_EnableShape();
    // private System.Void set_EnableShape(Oculus.Interaction.IActiveState value)
    // Offset: 0x4805F24
    void set_EnableShape(::Oculus::Interaction::IActiveState* value);
    // private Oculus.Interaction.IActiveState get_DisableShape()
    // Offset: 0x4805F2C
    ::Oculus::Interaction::IActiveState* get_DisableShape();
    // private System.Void set_DisableShape(Oculus.Interaction.IActiveState value)
    // Offset: 0x4805F34
    void set_DisableShape(::Oculus::Interaction::IActiveState* value);
    // public Oculus.Interaction.Locomotion.LocomotionGate/LocomotionMode get_ActiveMode()
    // Offset: 0x4805F3C
    ::Oculus::Interaction::Locomotion::LocomotionGate::LocomotionMode get_ActiveMode();
    // private System.Void set_ActiveMode(Oculus.Interaction.Locomotion.LocomotionGate/LocomotionMode value)
    // Offset: 0x4805F44
    void set_ActiveMode(::Oculus::Interaction::Locomotion::LocomotionGate::LocomotionMode value);
    // public System.Single get_CurrentAngle()
    // Offset: 0x4805FB8
    float get_CurrentAngle();
    // private System.Void set_CurrentAngle(System.Single value)
    // Offset: 0x4805FC0
    void set_CurrentAngle(float value);
    // public UnityEngine.Vector3 get_WristDirection()
    // Offset: 0x4805FC8
    ::UnityEngine::Vector3 get_WristDirection();
    // private System.Void set_WristDirection(UnityEngine.Vector3 value)
    // Offset: 0x4805FD4
    void set_WristDirection(::UnityEngine::Vector3 value);
    // public UnityEngine.Pose get_StabilizationPose()
    // Offset: 0x4805FE0
    ::UnityEngine::Pose get_StabilizationPose();
    // private System.Void set_StabilizationPose(UnityEngine.Pose value)
    // Offset: 0x4805FF4
    void set_StabilizationPose(::UnityEngine::Pose value);
    // public System.Void add_WhenActiveModeChanged(System.Action`1<Oculus.Interaction.Locomotion.LocomotionGate/LocomotionModeEventArgs> value)
    // Offset: 0x4806010
    void add_WhenActiveModeChanged(::System::Action_1<::Oculus::Interaction::Locomotion::LocomotionGate::LocomotionModeEventArgs>* value);
    // public System.Void remove_WhenActiveModeChanged(System.Action`1<Oculus.Interaction.Locomotion.LocomotionGate/LocomotionModeEventArgs> value)
    // Offset: 0x48060B8
    void remove_WhenActiveModeChanged(::System::Action_1<::Oculus::Interaction::Locomotion::LocomotionGate::LocomotionModeEventArgs>* value);
    // protected System.Void Awake()
    // Offset: 0x4806160
    void Awake();
    // protected System.Void Start()
    // Offset: 0x480620C
    void Start();
    // protected System.Void OnEnable()
    // Offset: 0x4806244
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x4806378
    void OnDisable();
    // public System.Void Disable()
    // Offset: 0x4806354
    void Disable();
    // public System.Void Cancel()
    // Offset: 0x4806488
    void Cancel();
    // private System.Void HandleHandupdated()
    // Offset: 0x48064B0
    void HandleHandupdated();
    // private Oculus.Interaction.Locomotion.LocomotionGate/GateSection GetBestGateSection(System.Single angle, out System.Int32 index)
    // Offset: 0x4806EAC
    ::Oculus::Interaction::Locomotion::LocomotionGate::GateSection* GetBestGateSection(float angle, ByRef<int> index);
    // public System.Void InjectAllLocomotionGate(Oculus.Interaction.Input.IHand hand, UnityEngine.Transform shoulder, Oculus.Interaction.IActiveState enableShape, Oculus.Interaction.IActiveState disableShape, Oculus.Interaction.Locomotion.VirtualActiveState turningState, Oculus.Interaction.Locomotion.VirtualActiveState teleportState, Oculus.Interaction.Locomotion.LocomotionGate/GateSection[] gateSections)
    // Offset: 0x4807088
    void InjectAllLocomotionGate(::Oculus::Interaction::Input::IHand* hand, ::UnityEngine::Transform* shoulder, ::Oculus::Interaction::IActiveState* enableShape, ::Oculus::Interaction::IActiveState* disableShape, ::Oculus::Interaction::Locomotion::VirtualActiveState* turningState, ::Oculus::Interaction::Locomotion::VirtualActiveState* teleportState, ::ArrayW<::Oculus::Interaction::Locomotion::LocomotionGate::GateSection*> gateSections);
    // public System.Void InjectHand(Oculus.Interaction.Input.IHand hand)
    // Offset: 0x4807120
    void InjectHand(::Oculus::Interaction::Input::IHand* hand);
    // public System.Void InjectShoulder(UnityEngine.Transform shoulder)
    // Offset: 0x4807390
    void InjectShoulder(::UnityEngine::Transform* shoulder);
    // public System.Void InjectEnableShape(Oculus.Interaction.IActiveState enableShape)
    // Offset: 0x48071F0
    void InjectEnableShape(::Oculus::Interaction::IActiveState* enableShape);
    // public System.Void InjectDisableShape(Oculus.Interaction.IActiveState disableShape)
    // Offset: 0x48072C0
    void InjectDisableShape(::Oculus::Interaction::IActiveState* disableShape);
    // public System.Void InjectTurningState(Oculus.Interaction.Locomotion.VirtualActiveState turningState)
    // Offset: 0x4807398
    void InjectTurningState(::Oculus::Interaction::Locomotion::VirtualActiveState* turningState);
    // public System.Void InjectTeleportState(Oculus.Interaction.Locomotion.VirtualActiveState teleportState)
    // Offset: 0x48073A0
    void InjectTeleportState(::Oculus::Interaction::Locomotion::VirtualActiveState* teleportState);
    // public System.Void InjectGateSections(Oculus.Interaction.Locomotion.LocomotionGate/GateSection[] gateSections)
    // Offset: 0x48073A8
    void InjectGateSections(::ArrayW<::Oculus::Interaction::Locomotion::LocomotionGate::GateSection*> gateSections);
    // public System.Void .ctor()
    // Offset: 0x48073B0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LocomotionGate* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::Locomotion::LocomotionGate::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LocomotionGate*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x48076B4
    static void _cctor();
  }; // Oculus.Interaction.Locomotion.LocomotionGate
  #pragma pack(pop)
  static check_size<sizeof(LocomotionGate), 176 + sizeof(bool)> __Oculus_Interaction_Locomotion_LocomotionGateSizeCheck;
  static_assert(sizeof(LocomotionGate) == 0xB1);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Locomotion::LocomotionGate::LocomotionModeEventArgs, "Oculus.Interaction.Locomotion", "LocomotionGate/LocomotionModeEventArgs");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::Locomotion::LocomotionGate::LocomotionMode, "Oculus.Interaction.Locomotion", "LocomotionGate/LocomotionMode");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionGate::get_Hand
// Il2CppName: get_Hand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Input::IHand* (Oculus::Interaction::Locomotion::LocomotionGate::*)()>(&Oculus::Interaction::Locomotion::LocomotionGate::get_Hand)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionGate*), "get_Hand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionGate::set_Hand
// Il2CppName: set_Hand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotionGate::*)(::Oculus::Interaction::Input::IHand*)>(&Oculus::Interaction::Locomotion::LocomotionGate::set_Hand)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionGate*), "set_Hand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionGate::get_EnableShape
// Il2CppName: get_EnableShape
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::IActiveState* (Oculus::Interaction::Locomotion::LocomotionGate::*)()>(&Oculus::Interaction::Locomotion::LocomotionGate::get_EnableShape)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionGate*), "get_EnableShape", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionGate::set_EnableShape
// Il2CppName: set_EnableShape
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotionGate::*)(::Oculus::Interaction::IActiveState*)>(&Oculus::Interaction::Locomotion::LocomotionGate::set_EnableShape)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IActiveState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionGate*), "set_EnableShape", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionGate::get_DisableShape
// Il2CppName: get_DisableShape
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::IActiveState* (Oculus::Interaction::Locomotion::LocomotionGate::*)()>(&Oculus::Interaction::Locomotion::LocomotionGate::get_DisableShape)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionGate*), "get_DisableShape", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionGate::set_DisableShape
// Il2CppName: set_DisableShape
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotionGate::*)(::Oculus::Interaction::IActiveState*)>(&Oculus::Interaction::Locomotion::LocomotionGate::set_DisableShape)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IActiveState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionGate*), "set_DisableShape", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionGate::get_ActiveMode
// Il2CppName: get_ActiveMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Locomotion::LocomotionGate::LocomotionMode (Oculus::Interaction::Locomotion::LocomotionGate::*)()>(&Oculus::Interaction::Locomotion::LocomotionGate::get_ActiveMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionGate*), "get_ActiveMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionGate::set_ActiveMode
// Il2CppName: set_ActiveMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotionGate::*)(::Oculus::Interaction::Locomotion::LocomotionGate::LocomotionMode)>(&Oculus::Interaction::Locomotion::LocomotionGate::set_ActiveMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Locomotion", "LocomotionGate/LocomotionMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionGate*), "set_ActiveMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionGate::get_CurrentAngle
// Il2CppName: get_CurrentAngle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Oculus::Interaction::Locomotion::LocomotionGate::*)()>(&Oculus::Interaction::Locomotion::LocomotionGate::get_CurrentAngle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionGate*), "get_CurrentAngle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionGate::set_CurrentAngle
// Il2CppName: set_CurrentAngle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotionGate::*)(float)>(&Oculus::Interaction::Locomotion::LocomotionGate::set_CurrentAngle)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionGate*), "set_CurrentAngle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionGate::get_WristDirection
// Il2CppName: get_WristDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Oculus::Interaction::Locomotion::LocomotionGate::*)()>(&Oculus::Interaction::Locomotion::LocomotionGate::get_WristDirection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionGate*), "get_WristDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionGate::set_WristDirection
// Il2CppName: set_WristDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotionGate::*)(::UnityEngine::Vector3)>(&Oculus::Interaction::Locomotion::LocomotionGate::set_WristDirection)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionGate*), "set_WristDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionGate::get_StabilizationPose
// Il2CppName: get_StabilizationPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Pose (Oculus::Interaction::Locomotion::LocomotionGate::*)()>(&Oculus::Interaction::Locomotion::LocomotionGate::get_StabilizationPose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionGate*), "get_StabilizationPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionGate::set_StabilizationPose
// Il2CppName: set_StabilizationPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotionGate::*)(::UnityEngine::Pose)>(&Oculus::Interaction::Locomotion::LocomotionGate::set_StabilizationPose)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Pose")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionGate*), "set_StabilizationPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionGate::add_WhenActiveModeChanged
// Il2CppName: add_WhenActiveModeChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotionGate::*)(::System::Action_1<::Oculus::Interaction::Locomotion::LocomotionGate::LocomotionModeEventArgs>*)>(&Oculus::Interaction::Locomotion::LocomotionGate::add_WhenActiveModeChanged)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Interaction.Locomotion", "LocomotionGate/LocomotionModeEventArgs")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionGate*), "add_WhenActiveModeChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionGate::remove_WhenActiveModeChanged
// Il2CppName: remove_WhenActiveModeChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotionGate::*)(::System::Action_1<::Oculus::Interaction::Locomotion::LocomotionGate::LocomotionModeEventArgs>*)>(&Oculus::Interaction::Locomotion::LocomotionGate::remove_WhenActiveModeChanged)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Interaction.Locomotion", "LocomotionGate/LocomotionModeEventArgs")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionGate*), "remove_WhenActiveModeChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionGate::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotionGate::*)()>(&Oculus::Interaction::Locomotion::LocomotionGate::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionGate*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionGate::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotionGate::*)()>(&Oculus::Interaction::Locomotion::LocomotionGate::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionGate*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionGate::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotionGate::*)()>(&Oculus::Interaction::Locomotion::LocomotionGate::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionGate*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionGate::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotionGate::*)()>(&Oculus::Interaction::Locomotion::LocomotionGate::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionGate*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionGate::Disable
// Il2CppName: Disable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotionGate::*)()>(&Oculus::Interaction::Locomotion::LocomotionGate::Disable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionGate*), "Disable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionGate::Cancel
// Il2CppName: Cancel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotionGate::*)()>(&Oculus::Interaction::Locomotion::LocomotionGate::Cancel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionGate*), "Cancel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionGate::HandleHandupdated
// Il2CppName: HandleHandupdated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotionGate::*)()>(&Oculus::Interaction::Locomotion::LocomotionGate::HandleHandupdated)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionGate*), "HandleHandupdated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionGate::GetBestGateSection
// Il2CppName: GetBestGateSection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Oculus::Interaction::Locomotion::LocomotionGate::GateSection* (Oculus::Interaction::Locomotion::LocomotionGate::*)(float, ByRef<int>)>(&Oculus::Interaction::Locomotion::LocomotionGate::GetBestGateSection)> {
  static const MethodInfo* get() {
    static auto* angle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionGate*), "GetBestGateSection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{angle, index});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionGate::InjectAllLocomotionGate
// Il2CppName: InjectAllLocomotionGate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotionGate::*)(::Oculus::Interaction::Input::IHand*, ::UnityEngine::Transform*, ::Oculus::Interaction::IActiveState*, ::Oculus::Interaction::IActiveState*, ::Oculus::Interaction::Locomotion::VirtualActiveState*, ::Oculus::Interaction::Locomotion::VirtualActiveState*, ::ArrayW<::Oculus::Interaction::Locomotion::LocomotionGate::GateSection*>)>(&Oculus::Interaction::Locomotion::LocomotionGate::InjectAllLocomotionGate)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHand")->byval_arg;
    static auto* shoulder = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* enableShape = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IActiveState")->byval_arg;
    static auto* disableShape = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IActiveState")->byval_arg;
    static auto* turningState = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Locomotion", "VirtualActiveState")->byval_arg;
    static auto* teleportState = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Locomotion", "VirtualActiveState")->byval_arg;
    static auto* gateSections = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Oculus.Interaction.Locomotion", "LocomotionGate/GateSection"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionGate*), "InjectAllLocomotionGate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand, shoulder, enableShape, disableShape, turningState, teleportState, gateSections});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionGate::InjectHand
// Il2CppName: InjectHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotionGate::*)(::Oculus::Interaction::Input::IHand*)>(&Oculus::Interaction::Locomotion::LocomotionGate::InjectHand)> {
  static const MethodInfo* get() {
    static auto* hand = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Input", "IHand")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionGate*), "InjectHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hand});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionGate::InjectShoulder
// Il2CppName: InjectShoulder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotionGate::*)(::UnityEngine::Transform*)>(&Oculus::Interaction::Locomotion::LocomotionGate::InjectShoulder)> {
  static const MethodInfo* get() {
    static auto* shoulder = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionGate*), "InjectShoulder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shoulder});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionGate::InjectEnableShape
// Il2CppName: InjectEnableShape
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotionGate::*)(::Oculus::Interaction::IActiveState*)>(&Oculus::Interaction::Locomotion::LocomotionGate::InjectEnableShape)> {
  static const MethodInfo* get() {
    static auto* enableShape = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IActiveState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionGate*), "InjectEnableShape", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enableShape});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionGate::InjectDisableShape
// Il2CppName: InjectDisableShape
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotionGate::*)(::Oculus::Interaction::IActiveState*)>(&Oculus::Interaction::Locomotion::LocomotionGate::InjectDisableShape)> {
  static const MethodInfo* get() {
    static auto* disableShape = &::il2cpp_utils::GetClassFromName("Oculus.Interaction", "IActiveState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionGate*), "InjectDisableShape", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disableShape});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionGate::InjectTurningState
// Il2CppName: InjectTurningState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotionGate::*)(::Oculus::Interaction::Locomotion::VirtualActiveState*)>(&Oculus::Interaction::Locomotion::LocomotionGate::InjectTurningState)> {
  static const MethodInfo* get() {
    static auto* turningState = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Locomotion", "VirtualActiveState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionGate*), "InjectTurningState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{turningState});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionGate::InjectTeleportState
// Il2CppName: InjectTeleportState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotionGate::*)(::Oculus::Interaction::Locomotion::VirtualActiveState*)>(&Oculus::Interaction::Locomotion::LocomotionGate::InjectTeleportState)> {
  static const MethodInfo* get() {
    static auto* teleportState = &::il2cpp_utils::GetClassFromName("Oculus.Interaction.Locomotion", "VirtualActiveState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionGate*), "InjectTeleportState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{teleportState});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionGate::InjectGateSections
// Il2CppName: InjectGateSections
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::Locomotion::LocomotionGate::*)(::ArrayW<::Oculus::Interaction::Locomotion::LocomotionGate::GateSection*>)>(&Oculus::Interaction::Locomotion::LocomotionGate::InjectGateSections)> {
  static const MethodInfo* get() {
    static auto* gateSections = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Oculus.Interaction.Locomotion", "LocomotionGate/GateSection"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionGate*), "InjectGateSections", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gateSections});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionGate::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Oculus::Interaction::Locomotion::LocomotionGate::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Oculus::Interaction::Locomotion::LocomotionGate::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::Locomotion::LocomotionGate*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
