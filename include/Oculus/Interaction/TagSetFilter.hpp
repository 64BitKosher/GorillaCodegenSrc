// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Oculus.Interaction.IGameObjectFilter
#include "Oculus/Interaction/IGameObjectFilter.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Forward declaring type: TagSetFilter
  class TagSetFilter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Oculus::Interaction::TagSetFilter);
DEFINE_IL2CPP_ARG_TYPE(::Oculus::Interaction::TagSetFilter*, "Oculus.Interaction", "TagSetFilter");
// Type namespace: Oculus.Interaction
namespace Oculus::Interaction {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Interaction.TagSetFilter
  // [TokenAttribute] Offset: FFFFFFFF
  class TagSetFilter : public ::UnityEngine::MonoBehaviour/*, public ::Oculus::Interaction::IGameObjectFilter*/ {
    public:
    public:
    // private System.String[] _requireTags
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::StringW> requireTags;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // private System.String[] _excludeTags
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::StringW> excludeTags;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // private readonly System.Collections.Generic.HashSet`1<System.String> _requireTagSet
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::HashSet_1<::StringW>* requireTagSet;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<::StringW>*) == 0x8);
    // private readonly System.Collections.Generic.HashSet`1<System.String> _excludeTagSet
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::HashSet_1<::StringW>* excludeTagSet;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<::StringW>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Oculus::Interaction::IGameObjectFilter
    operator ::Oculus::Interaction::IGameObjectFilter() noexcept {
      return *reinterpret_cast<::Oculus::Interaction::IGameObjectFilter*>(this);
    }
    // Get instance field reference: private System.String[] _requireTags
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn__requireTags();
    // Get instance field reference: private System.String[] _excludeTags
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn__excludeTags();
    // Get instance field reference: private readonly System.Collections.Generic.HashSet`1<System.String> _requireTagSet
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::StringW>*& dyn__requireTagSet();
    // Get instance field reference: private readonly System.Collections.Generic.HashSet`1<System.String> _excludeTagSet
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::StringW>*& dyn__excludeTagSet();
    // protected System.Void Start()
    // Offset: 0x47894A0
    void Start();
    // public System.Boolean Filter(UnityEngine.GameObject gameObject)
    // Offset: 0x4789588
    bool Filter(::UnityEngine::GameObject* gameObject);
    // public System.Void InjectOptionalRequireTags(System.String[] requireTags)
    // Offset: 0x4789848
    void InjectOptionalRequireTags(::ArrayW<::StringW> requireTags);
    // public System.Void InjectOptionalExcludeTags(System.String[] excludeTags)
    // Offset: 0x4789850
    void InjectOptionalExcludeTags(::ArrayW<::StringW> excludeTags);
    // public System.Void .ctor()
    // Offset: 0x4789858
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TagSetFilter* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Oculus::Interaction::TagSetFilter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TagSetFilter*, creationType>()));
    }
  }; // Oculus.Interaction.TagSetFilter
  #pragma pack(pop)
  static check_size<sizeof(TagSetFilter), 56 + sizeof(::System::Collections::Generic::HashSet_1<::StringW>*)> __Oculus_Interaction_TagSetFilterSizeCheck;
  static_assert(sizeof(TagSetFilter) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Oculus::Interaction::TagSetFilter::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TagSetFilter::*)()>(&Oculus::Interaction::TagSetFilter::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TagSetFilter*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TagSetFilter::Filter
// Il2CppName: Filter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Oculus::Interaction::TagSetFilter::*)(::UnityEngine::GameObject*)>(&Oculus::Interaction::TagSetFilter::Filter)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TagSetFilter*), "Filter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TagSetFilter::InjectOptionalRequireTags
// Il2CppName: InjectOptionalRequireTags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TagSetFilter::*)(::ArrayW<::StringW>)>(&Oculus::Interaction::TagSetFilter::InjectOptionalRequireTags)> {
  static const MethodInfo* get() {
    static auto* requireTags = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TagSetFilter*), "InjectOptionalRequireTags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{requireTags});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TagSetFilter::InjectOptionalExcludeTags
// Il2CppName: InjectOptionalExcludeTags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Oculus::Interaction::TagSetFilter::*)(::ArrayW<::StringW>)>(&Oculus::Interaction::TagSetFilter::InjectOptionalExcludeTags)> {
  static const MethodInfo* get() {
    static auto* excludeTags = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Oculus::Interaction::TagSetFilter*), "InjectOptionalExcludeTags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{excludeTags});
  }
};
// Writing MetadataGetter for method: Oculus::Interaction::TagSetFilter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
