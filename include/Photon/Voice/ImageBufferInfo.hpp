// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Photon.Voice.ImageFormat
#include "Photon/Voice/ImageFormat.hpp"
// Including type: Photon.Voice.Rotation
#include "Photon/Voice/Rotation.hpp"
// Including type: Photon.Voice.Flip
#include "Photon/Voice/Flip.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Voice
namespace Photon::Voice {
  // Skipping declaration: StrideSet because it is already included!
}
// Completed forward declares
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // Forward declaring type: ImageBufferInfo
  struct ImageBufferInfo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Photon::Voice::ImageBufferInfo, "Photon.Voice", "ImageBufferInfo");
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // Size: 0x26
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Photon.Voice.ImageBufferInfo
  // [TokenAttribute] Offset: FFFFFFFF
  struct ImageBufferInfo/*, public ::System::ValueType*/ {
    public:
    // Nested type: ::Photon::Voice::ImageBufferInfo::StrideSet
    struct StrideSet;
    // Size: 0x14
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Photon.Voice.ImageBufferInfo/StrideSet
    // [TokenAttribute] Offset: FFFFFFFF
    // [DefaultMemberAttribute] Offset: FFFFFFFF
    struct StrideSet/*, public ::System::ValueType*/ {
      public:
      public:
      // private System.Int32 stride0
      // Size: 0x4
      // Offset: 0x0
      int stride0;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // private System.Int32 stride1
      // Size: 0x4
      // Offset: 0x4
      int stride1;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // private System.Int32 stride2
      // Size: 0x4
      // Offset: 0x8
      int stride2;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // private System.Int32 stride3
      // Size: 0x4
      // Offset: 0xC
      int stride3;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // private System.Int32 <Length>k__BackingField
      // Size: 0x4
      // Offset: 0x10
      int Length;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: StrideSet
      constexpr StrideSet(int stride0_ = {}, int stride1_ = {}, int stride2_ = {}, int stride3_ = {}, int Length_ = {}) noexcept : stride0{stride0_}, stride1{stride1_}, stride2{stride2_}, stride3{stride3_}, Length{Length_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: private System.Int32 stride0
      [[deprecated("Use field access instead!")]] int& dyn_stride0();
      // Get instance field reference: private System.Int32 stride1
      [[deprecated("Use field access instead!")]] int& dyn_stride1();
      // Get instance field reference: private System.Int32 stride2
      [[deprecated("Use field access instead!")]] int& dyn_stride2();
      // Get instance field reference: private System.Int32 stride3
      [[deprecated("Use field access instead!")]] int& dyn_stride3();
      // Get instance field reference: private System.Int32 <Length>k__BackingField
      [[deprecated("Use field access instead!")]] int& dyn_$Length$k__BackingField();
      // public System.Void .ctor(System.Int32 length, System.Int32 s0, System.Int32 s1, System.Int32 s2, System.Int32 s3)
      // Offset: 0x4A70314
      // ABORTED: conflicts with another method.  StrideSet(int length, int s0, int s1, int s2, int s3);
      // public System.Int32 get_Item(System.Int32 key)
      // Offset: 0x4A70324
      int get_Item(int key);
      // public System.Void set_Item(System.Int32 key, System.Int32 value)
      // Offset: 0x4A7036C
      void set_Item(int key, int value);
      // public System.Int32 get_Length()
      // Offset: 0x4A703AC
      int get_Length();
      // private System.Void set_Length(System.Int32 value)
      // Offset: 0x4A703B4
      void set_Length(int value);
    }; // Photon.Voice.ImageBufferInfo/StrideSet
    #pragma pack(pop)
    static check_size<sizeof(ImageBufferInfo::StrideSet), 16 + sizeof(int)> __Photon_Voice_ImageBufferInfo_StrideSetSizeCheck;
    static_assert(sizeof(ImageBufferInfo::StrideSet) == 0x14);
    public:
    // private readonly System.Int32 <Width>k__BackingField
    // Size: 0x4
    // Offset: 0x0
    int Width;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Int32 <Height>k__BackingField
    // Size: 0x4
    // Offset: 0x4
    int Height;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly Photon.Voice.ImageBufferInfo/StrideSet <Stride>k__BackingField
    // Size: 0x14
    // Offset: 0x8
    ::Photon::Voice::ImageBufferInfo::StrideSet Stride;
    // Field size check
    static_assert(sizeof(::Photon::Voice::ImageBufferInfo::StrideSet) == 0x14);
    // private readonly Photon.Voice.ImageFormat <Format>k__BackingField
    // Size: 0x4
    // Offset: 0x1C
    ::Photon::Voice::ImageFormat Format;
    // Field size check
    static_assert(sizeof(::Photon::Voice::ImageFormat) == 0x4);
    // private Photon.Voice.Rotation <Rotation>k__BackingField
    // Size: 0x4
    // Offset: 0x20
    ::Photon::Voice::Rotation Rotation;
    // Field size check
    static_assert(sizeof(::Photon::Voice::Rotation) == 0x4);
    // private Photon.Voice.Flip <Flip>k__BackingField
    // Size: 0x2
    // Offset: 0x24
    ::Photon::Voice::Flip Flip;
    // Field size check
    static_assert(sizeof(::Photon::Voice::Flip) == 0x2);
    public:
    // Creating value type constructor for type: ImageBufferInfo
    constexpr ImageBufferInfo(int Width_ = {}, int Height_ = {}, ::Photon::Voice::ImageBufferInfo::StrideSet Stride_ = {}, ::Photon::Voice::ImageFormat Format_ = {}, ::Photon::Voice::Rotation Rotation_ = {}, ::Photon::Voice::Flip Flip_ = {}) noexcept : Width{Width_}, Height{Height_}, Stride{Stride_}, Format{Format_}, Rotation{Rotation_}, Flip{Flip_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private readonly System.Int32 <Width>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$Width$k__BackingField();
    // Get instance field reference: private readonly System.Int32 <Height>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$Height$k__BackingField();
    // Get instance field reference: private readonly Photon.Voice.ImageBufferInfo/StrideSet <Stride>k__BackingField
    [[deprecated("Use field access instead!")]] ::Photon::Voice::ImageBufferInfo::StrideSet& dyn_$Stride$k__BackingField();
    // Get instance field reference: private readonly Photon.Voice.ImageFormat <Format>k__BackingField
    [[deprecated("Use field access instead!")]] ::Photon::Voice::ImageFormat& dyn_$Format$k__BackingField();
    // Get instance field reference: private Photon.Voice.Rotation <Rotation>k__BackingField
    [[deprecated("Use field access instead!")]] ::Photon::Voice::Rotation& dyn_$Rotation$k__BackingField();
    // Get instance field reference: private Photon.Voice.Flip <Flip>k__BackingField
    [[deprecated("Use field access instead!")]] ::Photon::Voice::Flip& dyn_$Flip$k__BackingField();
    // public System.Int32 get_Width()
    // Offset: 0x4A70230
    int get_Width();
    // public System.Int32 get_Height()
    // Offset: 0x4A70238
    int get_Height();
    // public Photon.Voice.ImageBufferInfo/StrideSet get_Stride()
    // Offset: 0x4A70240
    ::Photon::Voice::ImageBufferInfo::StrideSet get_Stride();
    // public Photon.Voice.ImageFormat get_Format()
    // Offset: 0x4A70254
    ::Photon::Voice::ImageFormat get_Format();
    // public Photon.Voice.Rotation get_Rotation()
    // Offset: 0x4A7025C
    ::Photon::Voice::Rotation get_Rotation();
    // public System.Void set_Rotation(Photon.Voice.Rotation value)
    // Offset: 0x4A70264
    void set_Rotation(::Photon::Voice::Rotation value);
    // public Photon.Voice.Flip get_Flip()
    // Offset: 0x4A7026C
    ::Photon::Voice::Flip get_Flip();
    // public System.Void set_Flip(Photon.Voice.Flip value)
    // Offset: 0x4A70274
    void set_Flip(::Photon::Voice::Flip value);
    // public System.Void .ctor(System.Int32 width, System.Int32 height, Photon.Voice.ImageBufferInfo/StrideSet stride, Photon.Voice.ImageFormat format)
    // Offset: 0x4A7027C
    ImageBufferInfo(int width, int height, ::Photon::Voice::ImageBufferInfo::StrideSet stride, ::Photon::Voice::ImageFormat format);
  }; // Photon.Voice.ImageBufferInfo
  #pragma pack(pop)
  static check_size<sizeof(ImageBufferInfo), 36 + sizeof(::Photon::Voice::Flip)> __Photon_Voice_ImageBufferInfoSizeCheck;
  static_assert(sizeof(ImageBufferInfo) == 0x26);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Photon::Voice::ImageBufferInfo::StrideSet, "Photon.Voice", "ImageBufferInfo/StrideSet");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Voice::ImageBufferInfo::get_Width
// Il2CppName: get_Width
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Photon::Voice::ImageBufferInfo::*)()>(&Photon::Voice::ImageBufferInfo::get_Width)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::ImageBufferInfo), "get_Width", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::ImageBufferInfo::get_Height
// Il2CppName: get_Height
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Photon::Voice::ImageBufferInfo::*)()>(&Photon::Voice::ImageBufferInfo::get_Height)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::ImageBufferInfo), "get_Height", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::ImageBufferInfo::get_Stride
// Il2CppName: get_Stride
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Voice::ImageBufferInfo::StrideSet (Photon::Voice::ImageBufferInfo::*)()>(&Photon::Voice::ImageBufferInfo::get_Stride)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::ImageBufferInfo), "get_Stride", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::ImageBufferInfo::get_Format
// Il2CppName: get_Format
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Voice::ImageFormat (Photon::Voice::ImageBufferInfo::*)()>(&Photon::Voice::ImageBufferInfo::get_Format)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::ImageBufferInfo), "get_Format", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::ImageBufferInfo::get_Rotation
// Il2CppName: get_Rotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Voice::Rotation (Photon::Voice::ImageBufferInfo::*)()>(&Photon::Voice::ImageBufferInfo::get_Rotation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::ImageBufferInfo), "get_Rotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::ImageBufferInfo::set_Rotation
// Il2CppName: set_Rotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::ImageBufferInfo::*)(::Photon::Voice::Rotation)>(&Photon::Voice::ImageBufferInfo::set_Rotation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Photon.Voice", "Rotation")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::ImageBufferInfo), "set_Rotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::ImageBufferInfo::get_Flip
// Il2CppName: get_Flip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Voice::Flip (Photon::Voice::ImageBufferInfo::*)()>(&Photon::Voice::ImageBufferInfo::get_Flip)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::ImageBufferInfo), "get_Flip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::ImageBufferInfo::set_Flip
// Il2CppName: set_Flip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::ImageBufferInfo::*)(::Photon::Voice::Flip)>(&Photon::Voice::ImageBufferInfo::set_Flip)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Photon.Voice", "Flip")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::ImageBufferInfo), "set_Flip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::ImageBufferInfo::ImageBufferInfo
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
