// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Voice.Unity.VoiceComponent
#include "Photon/Voice/Unity/VoiceComponent.hpp"
// Including type: Fusion.INetworkRunnerCallbacks
#include "Fusion/INetworkRunnerCallbacks.hpp"
// Including type: System.Byte
#include "System/Byte.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Fusion
namespace Fusion {
  // Forward declaring type: NetworkRunner
  class NetworkRunner;
  // Forward declaring type: PlayerRef
  struct PlayerRef;
  // Forward declaring type: NetworkInput
  struct NetworkInput;
  // Forward declaring type: ShutdownReason
  struct ShutdownReason;
  // Forward declaring type: SimulationMessagePtr
  struct SimulationMessagePtr;
  // Forward declaring type: SessionInfo
  class SessionInfo;
  // Forward declaring type: HostMigrationToken
  class HostMigrationToken;
}
// Forward declaring namespace: Photon::Voice::Unity
namespace Photon::Voice::Unity {
  // Forward declaring type: VoiceConnection
  class VoiceConnection;
  // Forward declaring type: Speaker
  class Speaker;
}
// Forward declaring namespace: Photon::Realtime
namespace Photon::Realtime {
  // Forward declaring type: EnterRoomParams
  class EnterRoomParams;
  // Forward declaring type: ClientState
  struct ClientState;
}
// Forward declaring namespace: ExitGames::Client::Photon
namespace ExitGames::Client::Photon {
  // Forward declaring type: StreamBuffer
  class StreamBuffer;
}
// Forward declaring namespace: Fusion::Sockets
namespace Fusion::Sockets {
  // Forward declaring type: NetAddress
  struct NetAddress;
  // Forward declaring type: NetConnectFailedReason
  struct NetConnectFailedReason;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: ArraySegment`1<T>
  template<typename T>
  struct ArraySegment_1;
}
// Completed forward declares
// Type namespace: Photon.Voice.Fusion
namespace Photon::Voice::Fusion {
  // Forward declaring type: FusionVoiceBridge
  class FusionVoiceBridge;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Voice::Fusion::FusionVoiceBridge);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Voice::Fusion::FusionVoiceBridge*, "Photon.Voice.Fusion", "FusionVoiceBridge");
// Type namespace: Photon.Voice.Fusion
namespace Photon::Voice::Fusion {
  // Size: 0x4A
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Voice.Fusion.FusionVoiceBridge
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: FFFFFFFF
  // [RequireComponent] Offset: FFFFFFFF
  class FusionVoiceBridge : public ::Photon::Voice::Unity::VoiceComponent/*, public ::Fusion::INetworkRunnerCallbacks*/ {
    public:
    // Writing base type padding for base size: 0x2A to desired offset: 0x30
    char ___base_padding[0x6] = {};
    public:
    // private Fusion.NetworkRunner networkRunner
    // Size: 0x8
    // Offset: 0x30
    ::Fusion::NetworkRunner* networkRunner;
    // Field size check
    static_assert(sizeof(::Fusion::NetworkRunner*) == 0x8);
    // private Photon.Voice.Unity.VoiceConnection voiceConnection
    // Size: 0x8
    // Offset: 0x38
    ::Photon::Voice::Unity::VoiceConnection* voiceConnection;
    // Field size check
    static_assert(sizeof(::Photon::Voice::Unity::VoiceConnection*) == 0x8);
    // private Photon.Realtime.EnterRoomParams voiceRoomParams
    // Size: 0x8
    // Offset: 0x40
    ::Photon::Realtime::EnterRoomParams* voiceRoomParams;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::EnterRoomParams*) == 0x8);
    // private System.Boolean <UseFusionAppSettings>k__BackingField
    // Size: 0x1
    // Offset: 0x48
    bool UseFusionAppSettings;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <UseFusionAuthValues>k__BackingField
    // Size: 0x1
    // Offset: 0x49
    bool UseFusionAuthValues;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::Fusion::INetworkRunnerCallbacks
    operator ::Fusion::INetworkRunnerCallbacks() noexcept {
      return *reinterpret_cast<::Fusion::INetworkRunnerCallbacks*>(this);
    }
    // static field const value: static private System.Byte FusionNetworkIdTypeCode
    static constexpr const uint8_t FusionNetworkIdTypeCode = 0u;
    // Get static field: static private System.Byte FusionNetworkIdTypeCode
    static uint8_t _get_FusionNetworkIdTypeCode();
    // Set static field: static private System.Byte FusionNetworkIdTypeCode
    static void _set_FusionNetworkIdTypeCode(uint8_t value);
    // Get static field: static private System.Byte[] memCompressedUInt64
    static ::ArrayW<uint8_t> _get_memCompressedUInt64();
    // Set static field: static private System.Byte[] memCompressedUInt64
    static void _set_memCompressedUInt64(::ArrayW<uint8_t> value);
    // Get instance field reference: private Fusion.NetworkRunner networkRunner
    [[deprecated("Use field access instead!")]] ::Fusion::NetworkRunner*& dyn_networkRunner();
    // Get instance field reference: private Photon.Voice.Unity.VoiceConnection voiceConnection
    [[deprecated("Use field access instead!")]] ::Photon::Voice::Unity::VoiceConnection*& dyn_voiceConnection();
    // Get instance field reference: private Photon.Realtime.EnterRoomParams voiceRoomParams
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::EnterRoomParams*& dyn_voiceRoomParams();
    // Get instance field reference: private System.Boolean <UseFusionAppSettings>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$UseFusionAppSettings$k__BackingField();
    // Get instance field reference: private System.Boolean <UseFusionAuthValues>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$UseFusionAuthValues$k__BackingField();
    // public System.Boolean get_UseFusionAppSettings()
    // Offset: 0x4A94EDC
    bool get_UseFusionAppSettings();
    // public System.Void set_UseFusionAppSettings(System.Boolean value)
    // Offset: 0x4A94EE4
    void set_UseFusionAppSettings(bool value);
    // public System.Boolean get_UseFusionAuthValues()
    // Offset: 0x4A94EF0
    bool get_UseFusionAuthValues();
    // public System.Void set_UseFusionAuthValues(System.Boolean value)
    // Offset: 0x4A94EF8
    void set_UseFusionAuthValues(bool value);
    // private System.Void OnEnable()
    // Offset: 0x4A9517C
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0x4A95280
    void OnDisable();
    // private System.Void OnVoiceClientStateChanged(Photon.Realtime.ClientState previous, Photon.Realtime.ClientState current)
    // Offset: 0x4A9531C
    void OnVoiceClientStateChanged(::Photon::Realtime::ClientState previous, ::Photon::Realtime::ClientState current);
    // private Photon.Voice.Unity.Speaker FusionSpeakerFactory(System.Int32 playerId, System.Byte voiceId, System.Object userData)
    // Offset: 0x4A95730
    ::Photon::Voice::Unity::Speaker* FusionSpeakerFactory(int playerId, uint8_t voiceId, ::Il2CppObject* userData);
    // private System.String VoiceGetMirroringRoomName()
    // Offset: 0x4A95F78
    ::StringW VoiceGetMirroringRoomName();
    // private System.Void VoiceConnectOrJoinRoom()
    // Offset: 0x4A95254
    void VoiceConnectOrJoinRoom();
    // private System.Void VoiceConnectOrJoinRoom(Photon.Realtime.ClientState state)
    // Offset: 0x4A95324
    void VoiceConnectOrJoinRoom(::Photon::Realtime::ClientState state);
    // private System.Boolean VoiceConnectAndFollowFusion()
    // Offset: 0x4A95FD8
    bool VoiceConnectAndFollowFusion();
    // private System.Void VoiceDisconnect()
    // Offset: 0x4A967B4
    void VoiceDisconnect();
    // private System.Boolean VoiceJoinRoom(System.String voiceRoomName)
    // Offset: 0x4A967E0
    bool VoiceJoinRoom(::StringW voiceRoomName);
    // private System.Boolean VoiceJoinMirroringRoom()
    // Offset: 0x4A96798
    bool VoiceJoinMirroringRoom();
    // static private System.Void VoiceRegisterCustomTypes()
    // Offset: 0x4A95034
    static void VoiceRegisterCustomTypes();
    // static private System.Object DeserializeFusionNetworkId(ExitGames.Client.Photon.StreamBuffer instream, System.Int16 length)
    // Offset: 0x4A9691C
    static ::Il2CppObject* DeserializeFusionNetworkId(::ExitGames::Client::Photon::StreamBuffer* instream, int16_t length);
    // static private System.UInt64 ReadCompressedUInt64(ExitGames.Client.Photon.StreamBuffer stream)
    // Offset: 0x4A96A5C
    static uint64_t ReadCompressedUInt64(::ExitGames::Client::Photon::StreamBuffer* stream);
    // static private System.Int32 WriteCompressedUInt64(ExitGames.Client.Photon.StreamBuffer stream, System.UInt64 value)
    // Offset: 0x4A96B44
    static int WriteCompressedUInt64(::ExitGames::Client::Photon::StreamBuffer* stream, uint64_t value);
    // static private System.Int16 SerializeFusionNetworkId(ExitGames.Client.Photon.StreamBuffer outstream, System.Object customobject)
    // Offset: 0x4A96D80
    static int16_t SerializeFusionNetworkId(::ExitGames::Client::Photon::StreamBuffer* outstream, ::Il2CppObject* customobject);
    // private System.Void Fusion.INetworkRunnerCallbacks.OnPlayerJoined(Fusion.NetworkRunner runner, Fusion.PlayerRef player)
    // Offset: 0x4A96E2C
    void Fusion_INetworkRunnerCallbacks_OnPlayerJoined(::Fusion::NetworkRunner* runner, ::Fusion::PlayerRef player);
    // private System.Void Fusion.INetworkRunnerCallbacks.OnPlayerLeft(Fusion.NetworkRunner runner, Fusion.PlayerRef player)
    // Offset: 0x4A97038
    void Fusion_INetworkRunnerCallbacks_OnPlayerLeft(::Fusion::NetworkRunner* runner, ::Fusion::PlayerRef player);
    // private System.Void Fusion.INetworkRunnerCallbacks.OnInput(Fusion.NetworkRunner runner, Fusion.NetworkInput input)
    // Offset: 0x4A97244
    void Fusion_INetworkRunnerCallbacks_OnInput(::Fusion::NetworkRunner* runner, ::Fusion::NetworkInput input);
    // private System.Void Fusion.INetworkRunnerCallbacks.OnInputMissing(Fusion.NetworkRunner runner, Fusion.PlayerRef player, Fusion.NetworkInput input)
    // Offset: 0x4A97248
    void Fusion_INetworkRunnerCallbacks_OnInputMissing(::Fusion::NetworkRunner* runner, ::Fusion::PlayerRef player, ::Fusion::NetworkInput input);
    // private System.Void Fusion.INetworkRunnerCallbacks.OnShutdown(Fusion.NetworkRunner runner, Fusion.ShutdownReason shutdownReason)
    // Offset: 0x4A9724C
    void Fusion_INetworkRunnerCallbacks_OnShutdown(::Fusion::NetworkRunner* runner, ::Fusion::ShutdownReason shutdownReason);
    // private System.Void Fusion.INetworkRunnerCallbacks.OnConnectedToServer(Fusion.NetworkRunner runner)
    // Offset: 0x4A97250
    void Fusion_INetworkRunnerCallbacks_OnConnectedToServer(::Fusion::NetworkRunner* runner);
    // private System.Void Fusion.INetworkRunnerCallbacks.OnDisconnectedFromServer(Fusion.NetworkRunner runner)
    // Offset: 0x4A97254
    void Fusion_INetworkRunnerCallbacks_OnDisconnectedFromServer(::Fusion::NetworkRunner* runner);
    // private System.Void Fusion.INetworkRunnerCallbacks.OnConnectRequest(Fusion.NetworkRunner runner, Fusion.NetworkRunnerCallbackArgs/ConnectRequest request, System.Byte[] token)
    // Offset: 0x4A97340
    void Fusion_INetworkRunnerCallbacks_OnConnectRequest(::Fusion::NetworkRunner* runner, ::Fusion::NetworkRunnerCallbackArgs::ConnectRequest* request, ::ArrayW<uint8_t> token);
    // private System.Void Fusion.INetworkRunnerCallbacks.OnConnectFailed(Fusion.NetworkRunner runner, Fusion.Sockets.NetAddress remoteAddress, Fusion.Sockets.NetConnectFailedReason reason)
    // Offset: 0x4A97344
    void Fusion_INetworkRunnerCallbacks_OnConnectFailed(::Fusion::NetworkRunner* runner, ::Fusion::Sockets::NetAddress remoteAddress, ::Fusion::Sockets::NetConnectFailedReason reason);
    // private System.Void Fusion.INetworkRunnerCallbacks.OnUserSimulationMessage(Fusion.NetworkRunner runner, Fusion.SimulationMessagePtr message)
    // Offset: 0x4A97348
    void Fusion_INetworkRunnerCallbacks_OnUserSimulationMessage(::Fusion::NetworkRunner* runner, ::Fusion::SimulationMessagePtr message);
    // private System.Void Fusion.INetworkRunnerCallbacks.OnSessionListUpdated(Fusion.NetworkRunner runner, System.Collections.Generic.List`1<Fusion.SessionInfo> sessionList)
    // Offset: 0x4A9734C
    void Fusion_INetworkRunnerCallbacks_OnSessionListUpdated(::Fusion::NetworkRunner* runner, ::System::Collections::Generic::List_1<::Fusion::SessionInfo*>* sessionList);
    // private System.Void Fusion.INetworkRunnerCallbacks.OnCustomAuthenticationResponse(Fusion.NetworkRunner runner, System.Collections.Generic.Dictionary`2<System.String,System.Object> data)
    // Offset: 0x4A97350
    void Fusion_INetworkRunnerCallbacks_OnCustomAuthenticationResponse(::Fusion::NetworkRunner* runner, ::System::Collections::Generic::Dictionary_2<::StringW, ::Il2CppObject*>* data);
    // private System.Void Fusion.INetworkRunnerCallbacks.OnHostMigration(Fusion.NetworkRunner runner, Fusion.HostMigrationToken hostMigrationToken)
    // Offset: 0x4A97354
    void Fusion_INetworkRunnerCallbacks_OnHostMigration(::Fusion::NetworkRunner* runner, ::Fusion::HostMigrationToken* hostMigrationToken);
    // private System.Void Fusion.INetworkRunnerCallbacks.OnReliableDataReceived(Fusion.NetworkRunner runner, Fusion.PlayerRef player, System.ArraySegment`1<System.Byte> data)
    // Offset: 0x4A97358
    void Fusion_INetworkRunnerCallbacks_OnReliableDataReceived(::Fusion::NetworkRunner* runner, ::Fusion::PlayerRef player, ::System::ArraySegment_1<uint8_t> data);
    // private System.Void Fusion.INetworkRunnerCallbacks.OnSceneLoadDone(Fusion.NetworkRunner runner)
    // Offset: 0x4A9735C
    void Fusion_INetworkRunnerCallbacks_OnSceneLoadDone(::Fusion::NetworkRunner* runner);
    // private System.Void Fusion.INetworkRunnerCallbacks.OnSceneLoadStart(Fusion.NetworkRunner runner)
    // Offset: 0x4A97360
    void Fusion_INetworkRunnerCallbacks_OnSceneLoadStart(::Fusion::NetworkRunner* runner);
    // public System.Void .ctor()
    // Offset: 0x4A97364
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FusionVoiceBridge* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::Fusion::FusionVoiceBridge::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FusionVoiceBridge*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x4A97428
    static void _cctor();
    // protected override System.Void Awake()
    // Offset: 0x4A94F04
    // Implemented from: Photon.Voice.Unity.VoiceComponent
    // Base method: System.Void VoiceComponent::Awake()
    void Awake();
  }; // Photon.Voice.Fusion.FusionVoiceBridge
  #pragma pack(pop)
  static check_size<sizeof(FusionVoiceBridge), 73 + sizeof(bool)> __Photon_Voice_Fusion_FusionVoiceBridgeSizeCheck;
  static_assert(sizeof(FusionVoiceBridge) == 0x4A);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Voice::Fusion::FusionVoiceBridge::get_UseFusionAppSettings
// Il2CppName: get_UseFusionAppSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Fusion::FusionVoiceBridge::*)()>(&Photon::Voice::Fusion::FusionVoiceBridge::get_UseFusionAppSettings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Fusion::FusionVoiceBridge*), "get_UseFusionAppSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Fusion::FusionVoiceBridge::set_UseFusionAppSettings
// Il2CppName: set_UseFusionAppSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Fusion::FusionVoiceBridge::*)(bool)>(&Photon::Voice::Fusion::FusionVoiceBridge::set_UseFusionAppSettings)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Fusion::FusionVoiceBridge*), "set_UseFusionAppSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Fusion::FusionVoiceBridge::get_UseFusionAuthValues
// Il2CppName: get_UseFusionAuthValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Fusion::FusionVoiceBridge::*)()>(&Photon::Voice::Fusion::FusionVoiceBridge::get_UseFusionAuthValues)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Fusion::FusionVoiceBridge*), "get_UseFusionAuthValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Fusion::FusionVoiceBridge::set_UseFusionAuthValues
// Il2CppName: set_UseFusionAuthValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Fusion::FusionVoiceBridge::*)(bool)>(&Photon::Voice::Fusion::FusionVoiceBridge::set_UseFusionAuthValues)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Fusion::FusionVoiceBridge*), "set_UseFusionAuthValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Fusion::FusionVoiceBridge::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Fusion::FusionVoiceBridge::*)()>(&Photon::Voice::Fusion::FusionVoiceBridge::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Fusion::FusionVoiceBridge*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Fusion::FusionVoiceBridge::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Fusion::FusionVoiceBridge::*)()>(&Photon::Voice::Fusion::FusionVoiceBridge::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Fusion::FusionVoiceBridge*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Fusion::FusionVoiceBridge::OnVoiceClientStateChanged
// Il2CppName: OnVoiceClientStateChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Fusion::FusionVoiceBridge::*)(::Photon::Realtime::ClientState, ::Photon::Realtime::ClientState)>(&Photon::Voice::Fusion::FusionVoiceBridge::OnVoiceClientStateChanged)> {
  static const MethodInfo* get() {
    static auto* previous = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "ClientState")->byval_arg;
    static auto* current = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "ClientState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Fusion::FusionVoiceBridge*), "OnVoiceClientStateChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{previous, current});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Fusion::FusionVoiceBridge::FusionSpeakerFactory
// Il2CppName: FusionSpeakerFactory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Voice::Unity::Speaker* (Photon::Voice::Fusion::FusionVoiceBridge::*)(int, uint8_t, ::Il2CppObject*)>(&Photon::Voice::Fusion::FusionVoiceBridge::FusionSpeakerFactory)> {
  static const MethodInfo* get() {
    static auto* playerId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* voiceId = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* userData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Fusion::FusionVoiceBridge*), "FusionSpeakerFactory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playerId, voiceId, userData});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Fusion::FusionVoiceBridge::VoiceGetMirroringRoomName
// Il2CppName: VoiceGetMirroringRoomName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Photon::Voice::Fusion::FusionVoiceBridge::*)()>(&Photon::Voice::Fusion::FusionVoiceBridge::VoiceGetMirroringRoomName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Fusion::FusionVoiceBridge*), "VoiceGetMirroringRoomName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Fusion::FusionVoiceBridge::VoiceConnectOrJoinRoom
// Il2CppName: VoiceConnectOrJoinRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Fusion::FusionVoiceBridge::*)()>(&Photon::Voice::Fusion::FusionVoiceBridge::VoiceConnectOrJoinRoom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Fusion::FusionVoiceBridge*), "VoiceConnectOrJoinRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Fusion::FusionVoiceBridge::VoiceConnectOrJoinRoom
// Il2CppName: VoiceConnectOrJoinRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Fusion::FusionVoiceBridge::*)(::Photon::Realtime::ClientState)>(&Photon::Voice::Fusion::FusionVoiceBridge::VoiceConnectOrJoinRoom)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "ClientState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Fusion::FusionVoiceBridge*), "VoiceConnectOrJoinRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Fusion::FusionVoiceBridge::VoiceConnectAndFollowFusion
// Il2CppName: VoiceConnectAndFollowFusion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Fusion::FusionVoiceBridge::*)()>(&Photon::Voice::Fusion::FusionVoiceBridge::VoiceConnectAndFollowFusion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Fusion::FusionVoiceBridge*), "VoiceConnectAndFollowFusion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Fusion::FusionVoiceBridge::VoiceDisconnect
// Il2CppName: VoiceDisconnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Fusion::FusionVoiceBridge::*)()>(&Photon::Voice::Fusion::FusionVoiceBridge::VoiceDisconnect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Fusion::FusionVoiceBridge*), "VoiceDisconnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Fusion::FusionVoiceBridge::VoiceJoinRoom
// Il2CppName: VoiceJoinRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Fusion::FusionVoiceBridge::*)(::StringW)>(&Photon::Voice::Fusion::FusionVoiceBridge::VoiceJoinRoom)> {
  static const MethodInfo* get() {
    static auto* voiceRoomName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Fusion::FusionVoiceBridge*), "VoiceJoinRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{voiceRoomName});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Fusion::FusionVoiceBridge::VoiceJoinMirroringRoom
// Il2CppName: VoiceJoinMirroringRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Fusion::FusionVoiceBridge::*)()>(&Photon::Voice::Fusion::FusionVoiceBridge::VoiceJoinMirroringRoom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Fusion::FusionVoiceBridge*), "VoiceJoinMirroringRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Fusion::FusionVoiceBridge::VoiceRegisterCustomTypes
// Il2CppName: VoiceRegisterCustomTypes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Photon::Voice::Fusion::FusionVoiceBridge::VoiceRegisterCustomTypes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Fusion::FusionVoiceBridge*), "VoiceRegisterCustomTypes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Fusion::FusionVoiceBridge::DeserializeFusionNetworkId
// Il2CppName: DeserializeFusionNetworkId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (*)(::ExitGames::Client::Photon::StreamBuffer*, int16_t)>(&Photon::Voice::Fusion::FusionVoiceBridge::DeserializeFusionNetworkId)> {
  static const MethodInfo* get() {
    static auto* instream = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "StreamBuffer")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int16")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Fusion::FusionVoiceBridge*), "DeserializeFusionNetworkId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instream, length});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Fusion::FusionVoiceBridge::ReadCompressedUInt64
// Il2CppName: ReadCompressedUInt64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (*)(::ExitGames::Client::Photon::StreamBuffer*)>(&Photon::Voice::Fusion::FusionVoiceBridge::ReadCompressedUInt64)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "StreamBuffer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Fusion::FusionVoiceBridge*), "ReadCompressedUInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Fusion::FusionVoiceBridge::WriteCompressedUInt64
// Il2CppName: WriteCompressedUInt64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::ExitGames::Client::Photon::StreamBuffer*, uint64_t)>(&Photon::Voice::Fusion::FusionVoiceBridge::WriteCompressedUInt64)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "StreamBuffer")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Fusion::FusionVoiceBridge*), "WriteCompressedUInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Fusion::FusionVoiceBridge::SerializeFusionNetworkId
// Il2CppName: SerializeFusionNetworkId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int16_t (*)(::ExitGames::Client::Photon::StreamBuffer*, ::Il2CppObject*)>(&Photon::Voice::Fusion::FusionVoiceBridge::SerializeFusionNetworkId)> {
  static const MethodInfo* get() {
    static auto* outstream = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "StreamBuffer")->byval_arg;
    static auto* customobject = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Fusion::FusionVoiceBridge*), "SerializeFusionNetworkId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{outstream, customobject});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Fusion::FusionVoiceBridge::Fusion_INetworkRunnerCallbacks_OnPlayerJoined
// Il2CppName: Fusion.INetworkRunnerCallbacks.OnPlayerJoined
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Fusion::FusionVoiceBridge::*)(::Fusion::NetworkRunner*, ::Fusion::PlayerRef)>(&Photon::Voice::Fusion::FusionVoiceBridge::Fusion_INetworkRunnerCallbacks_OnPlayerJoined)> {
  static const MethodInfo* get() {
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Fusion::FusionVoiceBridge*), "Fusion.INetworkRunnerCallbacks.OnPlayerJoined", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runner, player});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Fusion::FusionVoiceBridge::Fusion_INetworkRunnerCallbacks_OnPlayerLeft
// Il2CppName: Fusion.INetworkRunnerCallbacks.OnPlayerLeft
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Fusion::FusionVoiceBridge::*)(::Fusion::NetworkRunner*, ::Fusion::PlayerRef)>(&Photon::Voice::Fusion::FusionVoiceBridge::Fusion_INetworkRunnerCallbacks_OnPlayerLeft)> {
  static const MethodInfo* get() {
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Fusion::FusionVoiceBridge*), "Fusion.INetworkRunnerCallbacks.OnPlayerLeft", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runner, player});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Fusion::FusionVoiceBridge::Fusion_INetworkRunnerCallbacks_OnInput
// Il2CppName: Fusion.INetworkRunnerCallbacks.OnInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Fusion::FusionVoiceBridge::*)(::Fusion::NetworkRunner*, ::Fusion::NetworkInput)>(&Photon::Voice::Fusion::FusionVoiceBridge::Fusion_INetworkRunnerCallbacks_OnInput)> {
  static const MethodInfo* get() {
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    static auto* input = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkInput")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Fusion::FusionVoiceBridge*), "Fusion.INetworkRunnerCallbacks.OnInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runner, input});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Fusion::FusionVoiceBridge::Fusion_INetworkRunnerCallbacks_OnInputMissing
// Il2CppName: Fusion.INetworkRunnerCallbacks.OnInputMissing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Fusion::FusionVoiceBridge::*)(::Fusion::NetworkRunner*, ::Fusion::PlayerRef, ::Fusion::NetworkInput)>(&Photon::Voice::Fusion::FusionVoiceBridge::Fusion_INetworkRunnerCallbacks_OnInputMissing)> {
  static const MethodInfo* get() {
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    static auto* input = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkInput")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Fusion::FusionVoiceBridge*), "Fusion.INetworkRunnerCallbacks.OnInputMissing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runner, player, input});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Fusion::FusionVoiceBridge::Fusion_INetworkRunnerCallbacks_OnShutdown
// Il2CppName: Fusion.INetworkRunnerCallbacks.OnShutdown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Fusion::FusionVoiceBridge::*)(::Fusion::NetworkRunner*, ::Fusion::ShutdownReason)>(&Photon::Voice::Fusion::FusionVoiceBridge::Fusion_INetworkRunnerCallbacks_OnShutdown)> {
  static const MethodInfo* get() {
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    static auto* shutdownReason = &::il2cpp_utils::GetClassFromName("Fusion", "ShutdownReason")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Fusion::FusionVoiceBridge*), "Fusion.INetworkRunnerCallbacks.OnShutdown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runner, shutdownReason});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Fusion::FusionVoiceBridge::Fusion_INetworkRunnerCallbacks_OnConnectedToServer
// Il2CppName: Fusion.INetworkRunnerCallbacks.OnConnectedToServer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Fusion::FusionVoiceBridge::*)(::Fusion::NetworkRunner*)>(&Photon::Voice::Fusion::FusionVoiceBridge::Fusion_INetworkRunnerCallbacks_OnConnectedToServer)> {
  static const MethodInfo* get() {
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Fusion::FusionVoiceBridge*), "Fusion.INetworkRunnerCallbacks.OnConnectedToServer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runner});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Fusion::FusionVoiceBridge::Fusion_INetworkRunnerCallbacks_OnDisconnectedFromServer
// Il2CppName: Fusion.INetworkRunnerCallbacks.OnDisconnectedFromServer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Fusion::FusionVoiceBridge::*)(::Fusion::NetworkRunner*)>(&Photon::Voice::Fusion::FusionVoiceBridge::Fusion_INetworkRunnerCallbacks_OnDisconnectedFromServer)> {
  static const MethodInfo* get() {
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Fusion::FusionVoiceBridge*), "Fusion.INetworkRunnerCallbacks.OnDisconnectedFromServer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runner});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Fusion::FusionVoiceBridge::Fusion_INetworkRunnerCallbacks_OnConnectRequest
// Il2CppName: Fusion.INetworkRunnerCallbacks.OnConnectRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Fusion::FusionVoiceBridge::*)(::Fusion::NetworkRunner*, ::Fusion::NetworkRunnerCallbackArgs::ConnectRequest*, ::ArrayW<uint8_t>)>(&Photon::Voice::Fusion::FusionVoiceBridge::Fusion_INetworkRunnerCallbacks_OnConnectRequest)> {
  static const MethodInfo* get() {
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    static auto* request = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunnerCallbackArgs/ConnectRequest")->byval_arg;
    static auto* token = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Fusion::FusionVoiceBridge*), "Fusion.INetworkRunnerCallbacks.OnConnectRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runner, request, token});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Fusion::FusionVoiceBridge::Fusion_INetworkRunnerCallbacks_OnConnectFailed
// Il2CppName: Fusion.INetworkRunnerCallbacks.OnConnectFailed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Fusion::FusionVoiceBridge::*)(::Fusion::NetworkRunner*, ::Fusion::Sockets::NetAddress, ::Fusion::Sockets::NetConnectFailedReason)>(&Photon::Voice::Fusion::FusionVoiceBridge::Fusion_INetworkRunnerCallbacks_OnConnectFailed)> {
  static const MethodInfo* get() {
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    static auto* remoteAddress = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetAddress")->byval_arg;
    static auto* reason = &::il2cpp_utils::GetClassFromName("Fusion.Sockets", "NetConnectFailedReason")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Fusion::FusionVoiceBridge*), "Fusion.INetworkRunnerCallbacks.OnConnectFailed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runner, remoteAddress, reason});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Fusion::FusionVoiceBridge::Fusion_INetworkRunnerCallbacks_OnUserSimulationMessage
// Il2CppName: Fusion.INetworkRunnerCallbacks.OnUserSimulationMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Fusion::FusionVoiceBridge::*)(::Fusion::NetworkRunner*, ::Fusion::SimulationMessagePtr)>(&Photon::Voice::Fusion::FusionVoiceBridge::Fusion_INetworkRunnerCallbacks_OnUserSimulationMessage)> {
  static const MethodInfo* get() {
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("Fusion", "SimulationMessagePtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Fusion::FusionVoiceBridge*), "Fusion.INetworkRunnerCallbacks.OnUserSimulationMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runner, message});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Fusion::FusionVoiceBridge::Fusion_INetworkRunnerCallbacks_OnSessionListUpdated
// Il2CppName: Fusion.INetworkRunnerCallbacks.OnSessionListUpdated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Fusion::FusionVoiceBridge::*)(::Fusion::NetworkRunner*, ::System::Collections::Generic::List_1<::Fusion::SessionInfo*>*)>(&Photon::Voice::Fusion::FusionVoiceBridge::Fusion_INetworkRunnerCallbacks_OnSessionListUpdated)> {
  static const MethodInfo* get() {
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    static auto* sessionList = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Fusion", "SessionInfo")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Fusion::FusionVoiceBridge*), "Fusion.INetworkRunnerCallbacks.OnSessionListUpdated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runner, sessionList});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Fusion::FusionVoiceBridge::Fusion_INetworkRunnerCallbacks_OnCustomAuthenticationResponse
// Il2CppName: Fusion.INetworkRunnerCallbacks.OnCustomAuthenticationResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Fusion::FusionVoiceBridge::*)(::Fusion::NetworkRunner*, ::System::Collections::Generic::Dictionary_2<::StringW, ::Il2CppObject*>*)>(&Photon::Voice::Fusion::FusionVoiceBridge::Fusion_INetworkRunnerCallbacks_OnCustomAuthenticationResponse)> {
  static const MethodInfo* get() {
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    static auto* data = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "Object")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Fusion::FusionVoiceBridge*), "Fusion.INetworkRunnerCallbacks.OnCustomAuthenticationResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runner, data});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Fusion::FusionVoiceBridge::Fusion_INetworkRunnerCallbacks_OnHostMigration
// Il2CppName: Fusion.INetworkRunnerCallbacks.OnHostMigration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Fusion::FusionVoiceBridge::*)(::Fusion::NetworkRunner*, ::Fusion::HostMigrationToken*)>(&Photon::Voice::Fusion::FusionVoiceBridge::Fusion_INetworkRunnerCallbacks_OnHostMigration)> {
  static const MethodInfo* get() {
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    static auto* hostMigrationToken = &::il2cpp_utils::GetClassFromName("Fusion", "HostMigrationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Fusion::FusionVoiceBridge*), "Fusion.INetworkRunnerCallbacks.OnHostMigration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runner, hostMigrationToken});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Fusion::FusionVoiceBridge::Fusion_INetworkRunnerCallbacks_OnReliableDataReceived
// Il2CppName: Fusion.INetworkRunnerCallbacks.OnReliableDataReceived
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Fusion::FusionVoiceBridge::*)(::Fusion::NetworkRunner*, ::Fusion::PlayerRef, ::System::ArraySegment_1<uint8_t>)>(&Photon::Voice::Fusion::FusionVoiceBridge::Fusion_INetworkRunnerCallbacks_OnReliableDataReceived)> {
  static const MethodInfo* get() {
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    static auto* player = &::il2cpp_utils::GetClassFromName("Fusion", "PlayerRef")->byval_arg;
    static auto* data = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ArraySegment`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Fusion::FusionVoiceBridge*), "Fusion.INetworkRunnerCallbacks.OnReliableDataReceived", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runner, player, data});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Fusion::FusionVoiceBridge::Fusion_INetworkRunnerCallbacks_OnSceneLoadDone
// Il2CppName: Fusion.INetworkRunnerCallbacks.OnSceneLoadDone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Fusion::FusionVoiceBridge::*)(::Fusion::NetworkRunner*)>(&Photon::Voice::Fusion::FusionVoiceBridge::Fusion_INetworkRunnerCallbacks_OnSceneLoadDone)> {
  static const MethodInfo* get() {
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Fusion::FusionVoiceBridge*), "Fusion.INetworkRunnerCallbacks.OnSceneLoadDone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runner});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Fusion::FusionVoiceBridge::Fusion_INetworkRunnerCallbacks_OnSceneLoadStart
// Il2CppName: Fusion.INetworkRunnerCallbacks.OnSceneLoadStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Fusion::FusionVoiceBridge::*)(::Fusion::NetworkRunner*)>(&Photon::Voice::Fusion::FusionVoiceBridge::Fusion_INetworkRunnerCallbacks_OnSceneLoadStart)> {
  static const MethodInfo* get() {
    static auto* runner = &::il2cpp_utils::GetClassFromName("Fusion", "NetworkRunner")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Fusion::FusionVoiceBridge*), "Fusion.INetworkRunnerCallbacks.OnSceneLoadStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runner});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Fusion::FusionVoiceBridge::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Photon::Voice::Fusion::FusionVoiceBridge::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Photon::Voice::Fusion::FusionVoiceBridge::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Fusion::FusionVoiceBridge*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Fusion::FusionVoiceBridge::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Fusion::FusionVoiceBridge::*)()>(&Photon::Voice::Fusion::FusionVoiceBridge::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Fusion::FusionVoiceBridge*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
