// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Voice.ImageBufferInfo
#include "Photon/Voice/ImageBufferInfo.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // Forward declaring type: ImageBufferNative
  class ImageBufferNative;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Voice::ImageBufferNative);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Voice::ImageBufferNative*, "Photon.Voice", "ImageBufferNative");
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // Size: 0x5C
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Voice.ImageBufferNative
  // [TokenAttribute] Offset: FFFFFFFF
  class ImageBufferNative : public ::Il2CppObject {
    public:
    // Nested type: ::Photon::Voice::ImageBufferNative::PlaneSet
    struct PlaneSet;
    // Size: 0x24
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Photon.Voice.ImageBufferNative/PlaneSet
    // [TokenAttribute] Offset: FFFFFFFF
    // [DefaultMemberAttribute] Offset: FFFFFFFF
    struct PlaneSet/*, public ::System::ValueType*/ {
      public:
      public:
      // private System.IntPtr plane0
      // Size: 0x8
      // Offset: 0x0
      ::System::IntPtr plane0;
      // Field size check
      static_assert(sizeof(::System::IntPtr) == 0x8);
      // private System.IntPtr plane1
      // Size: 0x8
      // Offset: 0x8
      ::System::IntPtr plane1;
      // Field size check
      static_assert(sizeof(::System::IntPtr) == 0x8);
      // private System.IntPtr plane2
      // Size: 0x8
      // Offset: 0x10
      ::System::IntPtr plane2;
      // Field size check
      static_assert(sizeof(::System::IntPtr) == 0x8);
      // private System.IntPtr plane3
      // Size: 0x8
      // Offset: 0x18
      ::System::IntPtr plane3;
      // Field size check
      static_assert(sizeof(::System::IntPtr) == 0x8);
      // private System.Int32 <Length>k__BackingField
      // Size: 0x4
      // Offset: 0x20
      int Length;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: PlaneSet
      constexpr PlaneSet(::System::IntPtr plane0_ = {}, ::System::IntPtr plane1_ = {}, ::System::IntPtr plane2_ = {}, ::System::IntPtr plane3_ = {}, int Length_ = {}) noexcept : plane0{plane0_}, plane1{plane1_}, plane2{plane2_}, plane3{plane3_}, Length{Length_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: private System.IntPtr plane0
      [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_plane0();
      // Get instance field reference: private System.IntPtr plane1
      [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_plane1();
      // Get instance field reference: private System.IntPtr plane2
      [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_plane2();
      // Get instance field reference: private System.IntPtr plane3
      [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_plane3();
      // Get instance field reference: private System.Int32 <Length>k__BackingField
      [[deprecated("Use field access instead!")]] int& dyn_$Length$k__BackingField();
      // public System.Void .ctor(System.Int32 length, System.IntPtr p0, System.IntPtr p1, System.IntPtr p2, System.IntPtr p3)
      // Offset: 0x4A70404
      PlaneSet(int length, ::System::IntPtr p0, ::System::IntPtr p1, ::System::IntPtr p2, ::System::IntPtr p3);
      // public System.IntPtr get_Item(System.Int32 key)
      // Offset: 0x4A704C0
      ::System::IntPtr get_Item(int key);
      // public System.Void set_Item(System.Int32 key, System.IntPtr value)
      // Offset: 0x4A70508
      void set_Item(int key, ::System::IntPtr value);
      // public System.Int32 get_Length()
      // Offset: 0x4A70548
      int get_Length();
      // private System.Void set_Length(System.Int32 value)
      // Offset: 0x4A70550
      void set_Length(int value);
    }; // Photon.Voice.ImageBufferNative/PlaneSet
    #pragma pack(pop)
    static check_size<sizeof(ImageBufferNative::PlaneSet), 32 + sizeof(int)> __Photon_Voice_ImageBufferNative_PlaneSetSizeCheck;
    static_assert(sizeof(ImageBufferNative::PlaneSet) == 0x24);
    public:
    // public Photon.Voice.ImageBufferInfo Info
    // Size: 0x26
    // Offset: 0x10
    ::Photon::Voice::ImageBufferInfo Info;
    // Field size check
    static_assert(sizeof(::Photon::Voice::ImageBufferInfo) == 0x26);
    // Padding between fields: Info and: Planes
    char __padding0[0x2] = {};
    // public Photon.Voice.ImageBufferNative/PlaneSet Planes
    // Size: 0x24
    // Offset: 0x38
    ::Photon::Voice::ImageBufferNative::PlaneSet Planes;
    // Field size check
    static_assert(sizeof(::Photon::Voice::ImageBufferNative::PlaneSet) == 0x24);
    public:
    // Get instance field reference: public Photon.Voice.ImageBufferInfo Info
    [[deprecated("Use field access instead!")]] ::Photon::Voice::ImageBufferInfo& dyn_Info();
    // Get instance field reference: public Photon.Voice.ImageBufferNative/PlaneSet Planes
    [[deprecated("Use field access instead!")]] ::Photon::Voice::ImageBufferNative::PlaneSet& dyn_Planes();
    // public System.Void .ctor(Photon.Voice.ImageBufferInfo info)
    // Offset: 0x4A703BC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ImageBufferNative* New_ctor(::Photon::Voice::ImageBufferInfo info) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::ImageBufferNative::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ImageBufferNative*, creationType>(info)));
    }
    // public System.Void .ctor(System.IntPtr buf, System.Int32 width, System.Int32 height, System.Int32 stride, Photon.Voice.ImageFormat imageFormat)
    // Offset: 0x4A70414
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ImageBufferNative* New_ctor(::System::IntPtr buf, int width, int height, int stride, ::Photon::Voice::ImageFormat imageFormat) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::ImageBufferNative::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ImageBufferNative*, creationType>(buf, width, height, stride, imageFormat)));
    }
    // public System.Void Release()
    // Offset: 0x4A704B8
    void Release();
    // public System.Void Dispose()
    // Offset: 0x4A704BC
    void Dispose();
  }; // Photon.Voice.ImageBufferNative
  #pragma pack(pop)
  static check_size<sizeof(ImageBufferNative), 56 + sizeof(::Photon::Voice::ImageBufferNative::PlaneSet)> __Photon_Voice_ImageBufferNativeSizeCheck;
  static_assert(sizeof(ImageBufferNative) == 0x5C);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Photon::Voice::ImageBufferNative::PlaneSet, "Photon.Voice", "ImageBufferNative/PlaneSet");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Voice::ImageBufferNative::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Photon::Voice::ImageBufferNative::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Photon::Voice::ImageBufferNative::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::ImageBufferNative::*)()>(&Photon::Voice::ImageBufferNative::Release)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::ImageBufferNative*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::ImageBufferNative::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::ImageBufferNative::*)()>(&Photon::Voice::ImageBufferNative::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::ImageBufferNative*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
