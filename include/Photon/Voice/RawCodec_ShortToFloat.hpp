// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Voice.RawCodec
#include "Photon/Voice/RawCodec.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: Photon::Voice
namespace Photon::Voice {
  // Forward declaring type: FrameOut`1<T>
  template<typename T>
  class FrameOut_1;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Voice::RawCodec::ShortToFloat);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Voice::RawCodec::ShortToFloat*, "Photon.Voice", "RawCodec/ShortToFloat");
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Voice.RawCodec/ShortToFloat
  // [TokenAttribute] Offset: FFFFFFFF
  class RawCodec::ShortToFloat : public ::Il2CppObject {
    public:
    public:
    // private System.Action`1<Photon.Voice.FrameOut`1<System.Single>> output
    // Size: 0x8
    // Offset: 0x10
    ::System::Action_1<::Photon::Voice::FrameOut_1<float>*>* output;
    // Field size check
    static_assert(sizeof(::System::Action_1<::Photon::Voice::FrameOut_1<float>*>*) == 0x8);
    // private System.Single[] buf
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<float> buf;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    public:
    // Get instance field reference: private System.Action`1<Photon.Voice.FrameOut`1<System.Single>> output
    [[deprecated("Use field access instead!")]] ::System::Action_1<::Photon::Voice::FrameOut_1<float>*>*& dyn_output();
    // Get instance field reference: private System.Single[] buf
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_buf();
    // public System.Void .ctor(System.Action`1<Photon.Voice.FrameOut`1<System.Single>> output)
    // Offset: 0x4A64988
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RawCodec::ShortToFloat* New_ctor(::System::Action_1<::Photon::Voice::FrameOut_1<float>*>* output) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::RawCodec::ShortToFloat::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RawCodec::ShortToFloat*, creationType>(output)));
    }
    // public System.Void Output(Photon.Voice.FrameOut`1<System.Int16> shortBuf)
    // Offset: 0x4A64A08
    void Output(::Photon::Voice::FrameOut_1<int16_t>* shortBuf);
  }; // Photon.Voice.RawCodec/ShortToFloat
  #pragma pack(pop)
  static check_size<sizeof(RawCodec::ShortToFloat), 24 + sizeof(::ArrayW<float>)> __Photon_Voice_RawCodec_ShortToFloatSizeCheck;
  static_assert(sizeof(RawCodec::ShortToFloat) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Voice::RawCodec::ShortToFloat::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Photon::Voice::RawCodec::ShortToFloat::Output
// Il2CppName: Output
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::RawCodec::ShortToFloat::*)(::Photon::Voice::FrameOut_1<int16_t>*)>(&Photon::Voice::RawCodec::ShortToFloat::Output)> {
  static const MethodInfo* get() {
    static auto* shortBuf = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Photon.Voice", "FrameOut`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int16")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::RawCodec::ShortToFloat*), "Output", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shortBuf});
  }
};
