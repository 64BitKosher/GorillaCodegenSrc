// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Photon.Voice.VoiceInfo
#include "Photon/Voice/VoiceInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: Photon::Voice
namespace Photon::Voice {
  // Forward declaring type: IDecoder
  class IDecoder;
  // Forward declaring type: ILogger
  class ILogger;
  // Forward declaring type: FrameOut`1<T>
  template<typename T>
  class FrameOut_1;
}
// Completed forward declares
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // Forward declaring type: RemoteVoiceOptions
  struct RemoteVoiceOptions;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Photon::Voice::RemoteVoiceOptions, "Photon.Voice", "RemoteVoiceOptions");
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // Size: 0x50
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Photon.Voice.RemoteVoiceOptions
  // [TokenAttribute] Offset: FFFFFFFF
  struct RemoteVoiceOptions/*, public ::System::ValueType*/ {
    public:
    public:
    // private System.Action <OnRemoteVoiceRemoveAction>k__BackingField
    // Size: 0x8
    // Offset: 0x0
    ::System::Action* OnRemoteVoiceRemoveAction;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private Photon.Voice.IDecoder <Decoder>k__BackingField
    // Size: 0x8
    // Offset: 0x8
    ::Photon::Voice::IDecoder* Decoder;
    // Field size check
    static_assert(sizeof(::Photon::Voice::IDecoder*) == 0x8);
    // private readonly Photon.Voice.ILogger logger
    // Size: 0x8
    // Offset: 0x10
    ::Photon::Voice::ILogger* logger;
    // Field size check
    static_assert(sizeof(::Photon::Voice::ILogger*) == 0x8);
    // private readonly Photon.Voice.VoiceInfo voiceInfo
    // Size: 0x30
    // Offset: 0x18
    ::Photon::Voice::VoiceInfo voiceInfo;
    // Field size check
    static_assert(sizeof(::Photon::Voice::VoiceInfo) == 0x30);
    // private readonly System.String <logPrefix>k__BackingField
    // Size: 0x8
    // Offset: 0x48
    ::StringW logPrefix;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Creating value type constructor for type: RemoteVoiceOptions
    constexpr RemoteVoiceOptions(::System::Action* OnRemoteVoiceRemoveAction_ = {}, ::Photon::Voice::IDecoder* Decoder_ = {}, ::Photon::Voice::ILogger* logger_ = {}, ::Photon::Voice::VoiceInfo voiceInfo_ = {}, ::StringW logPrefix_ = {}) noexcept : OnRemoteVoiceRemoveAction{OnRemoteVoiceRemoveAction_}, Decoder{Decoder_}, logger{logger_}, voiceInfo{voiceInfo_}, logPrefix{logPrefix_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private System.Action <OnRemoteVoiceRemoveAction>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_$OnRemoteVoiceRemoveAction$k__BackingField();
    // Get instance field reference: private Photon.Voice.IDecoder <Decoder>k__BackingField
    [[deprecated("Use field access instead!")]] ::Photon::Voice::IDecoder*& dyn_$Decoder$k__BackingField();
    // Get instance field reference: private readonly Photon.Voice.ILogger logger
    [[deprecated("Use field access instead!")]] ::Photon::Voice::ILogger*& dyn_logger();
    // Get instance field reference: private readonly Photon.Voice.VoiceInfo voiceInfo
    [[deprecated("Use field access instead!")]] ::Photon::Voice::VoiceInfo& dyn_voiceInfo();
    // Get instance field reference: private readonly System.String <logPrefix>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$logPrefix$k__BackingField();
    // public System.Void .ctor(Photon.Voice.ILogger logger, System.String logPrefix, Photon.Voice.VoiceInfo voiceInfo)
    // Offset: 0x4A66FF4
    RemoteVoiceOptions(::Photon::Voice::ILogger* logger, ::StringW logPrefix, ::Photon::Voice::VoiceInfo voiceInfo);
    // public System.Void SetOutput(System.Action`1<Photon.Voice.FrameOut`1<System.Single>> output)
    // Offset: 0x4A67068
    void SetOutput(::System::Action_1<::Photon::Voice::FrameOut_1<float>*>* output);
    // public System.Void SetOutput(System.Action`1<Photon.Voice.FrameOut`1<System.Int16>> output)
    // Offset: 0x4A671A0
    void SetOutput(::System::Action_1<::Photon::Voice::FrameOut_1<int16_t>*>* output);
    // private System.Void setOutput(System.Action`1<Photon.Voice.FrameOut`1<T>> output)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void setOutput(::System::Action_1<::Photon::Voice::FrameOut_1<T>*>* output) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::RemoteVoiceOptions::setOutput");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "setOutput", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(output)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, output);
    }
    // public System.Action get_OnRemoteVoiceRemoveAction()
    // Offset: 0x4A67254
    ::System::Action* get_OnRemoteVoiceRemoveAction();
    // public System.Void set_OnRemoteVoiceRemoveAction(System.Action value)
    // Offset: 0x4A6725C
    void set_OnRemoteVoiceRemoveAction(::System::Action* value);
    // public Photon.Voice.IDecoder get_Decoder()
    // Offset: 0x4A67264
    ::Photon::Voice::IDecoder* get_Decoder();
    // public System.Void set_Decoder(Photon.Voice.IDecoder value)
    // Offset: 0x4A6726C
    void set_Decoder(::Photon::Voice::IDecoder* value);
    // System.String get_logPrefix()
    // Offset: 0x4A67274
    ::StringW get_logPrefix();
  }; // Photon.Voice.RemoteVoiceOptions
  #pragma pack(pop)
  static check_size<sizeof(RemoteVoiceOptions), 72 + sizeof(::StringW)> __Photon_Voice_RemoteVoiceOptionsSizeCheck;
  static_assert(sizeof(RemoteVoiceOptions) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Voice::RemoteVoiceOptions::RemoteVoiceOptions
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Photon::Voice::RemoteVoiceOptions::SetOutput
// Il2CppName: SetOutput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::RemoteVoiceOptions::*)(::System::Action_1<::Photon::Voice::FrameOut_1<float>*>*)>(&Photon::Voice::RemoteVoiceOptions::SetOutput)> {
  static const MethodInfo* get() {
    static auto* output = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Photon.Voice", "FrameOut`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::RemoteVoiceOptions), "SetOutput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{output});
  }
};
// Writing MetadataGetter for method: Photon::Voice::RemoteVoiceOptions::SetOutput
// Il2CppName: SetOutput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::RemoteVoiceOptions::*)(::System::Action_1<::Photon::Voice::FrameOut_1<int16_t>*>*)>(&Photon::Voice::RemoteVoiceOptions::SetOutput)> {
  static const MethodInfo* get() {
    static auto* output = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Photon.Voice", "FrameOut`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int16")})})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::RemoteVoiceOptions), "SetOutput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{output});
  }
};
// Writing MetadataGetter for method: Photon::Voice::RemoteVoiceOptions::setOutput
// Il2CppName: setOutput
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Photon::Voice::RemoteVoiceOptions::get_OnRemoteVoiceRemoveAction
// Il2CppName: get_OnRemoteVoiceRemoveAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Action* (Photon::Voice::RemoteVoiceOptions::*)()>(&Photon::Voice::RemoteVoiceOptions::get_OnRemoteVoiceRemoveAction)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::RemoteVoiceOptions), "get_OnRemoteVoiceRemoveAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::RemoteVoiceOptions::set_OnRemoteVoiceRemoveAction
// Il2CppName: set_OnRemoteVoiceRemoveAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::RemoteVoiceOptions::*)(::System::Action*)>(&Photon::Voice::RemoteVoiceOptions::set_OnRemoteVoiceRemoveAction)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::RemoteVoiceOptions), "set_OnRemoteVoiceRemoveAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::RemoteVoiceOptions::get_Decoder
// Il2CppName: get_Decoder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Voice::IDecoder* (Photon::Voice::RemoteVoiceOptions::*)()>(&Photon::Voice::RemoteVoiceOptions::get_Decoder)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::RemoteVoiceOptions), "get_Decoder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::RemoteVoiceOptions::set_Decoder
// Il2CppName: set_Decoder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::RemoteVoiceOptions::*)(::Photon::Voice::IDecoder*)>(&Photon::Voice::RemoteVoiceOptions::set_Decoder)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Photon.Voice", "IDecoder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::RemoteVoiceOptions), "set_Decoder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::RemoteVoiceOptions::get_logPrefix
// Il2CppName: get_logPrefix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Photon::Voice::RemoteVoiceOptions::*)()>(&Photon::Voice::RemoteVoiceOptions::get_logPrefix)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::RemoteVoiceOptions), "get_logPrefix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
