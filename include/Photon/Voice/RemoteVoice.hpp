// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: Photon.Voice.VoiceInfo
#include "Photon/Voice/VoiceInfo.hpp"
// Including type: Photon.Voice.RemoteVoiceOptions
#include "Photon/Voice/RemoteVoiceOptions.hpp"
// Including type: Photon.Voice.FrameBuffer
#include "Photon/Voice/FrameBuffer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Voice
namespace Photon::Voice {
  // Forward declaring type: SpacingProfile
  class SpacingProfile;
  // Forward declaring type: VoiceClient
  class VoiceClient;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Queue`1<T>
  template<typename T>
  class Queue_1;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: AutoResetEvent
  class AutoResetEvent;
}
// Completed forward declares
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // Forward declaring type: RemoteVoice
  class RemoteVoice;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Voice::RemoteVoice);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Voice::RemoteVoice*, "Photon.Voice", "RemoteVoice");
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // Size: 0x112
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Voice.RemoteVoice
  // [TokenAttribute] Offset: FFFFFFFF
  class RemoteVoice : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    public:
    // private Photon.Voice.VoiceInfo <Info>k__BackingField
    // Size: 0x30
    // Offset: 0x10
    ::Photon::Voice::VoiceInfo Info;
    // Field size check
    static_assert(sizeof(::Photon::Voice::VoiceInfo) == 0x30);
    // Photon.Voice.RemoteVoiceOptions options
    // Size: 0x50
    // Offset: 0x40
    ::Photon::Voice::RemoteVoiceOptions options;
    // Field size check
    static_assert(sizeof(::Photon::Voice::RemoteVoiceOptions) == 0x50);
    // System.Int32 channelId
    // Size: 0x4
    // Offset: 0x90
    int channelId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 <DelayFrames>k__BackingField
    // Size: 0x4
    // Offset: 0x94
    int DelayFrames;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 playerId
    // Size: 0x4
    // Offset: 0x98
    int playerId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Byte voiceId
    // Size: 0x1
    // Offset: 0x9C
    uint8_t voiceId;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Boolean disposed
    // Size: 0x1
    // Offset: 0x9D
    bool disposed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: disposed and: disposeLock
    char __padding6[0x2] = {};
    // private System.Object disposeLock
    // Size: 0x8
    // Offset: 0xA0
    ::Il2CppObject* disposeLock;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.String <LogPrefix>k__BackingField
    // Size: 0x8
    // Offset: 0xA8
    ::StringW LogPrefix;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private Photon.Voice.SpacingProfile receiveSpacingProfile
    // Size: 0x8
    // Offset: 0xB0
    ::Photon::Voice::SpacingProfile* receiveSpacingProfile;
    // Field size check
    static_assert(sizeof(::Photon::Voice::SpacingProfile*) == 0x8);
    // System.Byte lastEvNumber
    // Size: 0x1
    // Offset: 0xB8
    uint8_t lastEvNumber;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // Padding between fields: lastEvNumber and: voiceClient
    char __padding10[0x7] = {};
    // private Photon.Voice.VoiceClient voiceClient
    // Size: 0x8
    // Offset: 0xC0
    ::Photon::Voice::VoiceClient* voiceClient;
    // Field size check
    static_assert(sizeof(::Photon::Voice::VoiceClient*) == 0x8);
    // private System.Collections.Generic.Queue`1<Photon.Voice.FrameBuffer> frameQueue
    // Size: 0x8
    // Offset: 0xC8
    ::System::Collections::Generic::Queue_1<::Photon::Voice::FrameBuffer>* frameQueue;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Queue_1<::Photon::Voice::FrameBuffer>*) == 0x8);
    // private System.Threading.AutoResetEvent frameQueueReady
    // Size: 0x8
    // Offset: 0xD0
    ::System::Threading::AutoResetEvent* frameQueueReady;
    // Field size check
    static_assert(sizeof(::System::Threading::AutoResetEvent*) == 0x8);
    // private System.Int32 flushingFramePosInQueue
    // Size: 0x4
    // Offset: 0xD8
    int flushingFramePosInQueue;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: flushingFramePosInQueue and: nullFrame
    char __padding14[0x4] = {};
    // private Photon.Voice.FrameBuffer nullFrame
    // Size: 0x32
    // Offset: 0xE0
    ::Photon::Voice::FrameBuffer nullFrame;
    // Field size check
    static_assert(sizeof(::Photon::Voice::FrameBuffer) == 0x32);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get instance field reference: private Photon.Voice.VoiceInfo <Info>k__BackingField
    [[deprecated("Use field access instead!")]] ::Photon::Voice::VoiceInfo& dyn_$Info$k__BackingField();
    // Get instance field reference: Photon.Voice.RemoteVoiceOptions options
    [[deprecated("Use field access instead!")]] ::Photon::Voice::RemoteVoiceOptions& dyn_options();
    // Get instance field reference: System.Int32 channelId
    [[deprecated("Use field access instead!")]] int& dyn_channelId();
    // Get instance field reference: private System.Int32 <DelayFrames>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$DelayFrames$k__BackingField();
    // Get instance field reference: private System.Int32 playerId
    [[deprecated("Use field access instead!")]] int& dyn_playerId();
    // Get instance field reference: private System.Byte voiceId
    [[deprecated("Use field access instead!")]] uint8_t& dyn_voiceId();
    // Get instance field reference: private System.Boolean disposed
    [[deprecated("Use field access instead!")]] bool& dyn_disposed();
    // Get instance field reference: private System.Object disposeLock
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_disposeLock();
    // Get instance field reference: private System.String <LogPrefix>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$LogPrefix$k__BackingField();
    // Get instance field reference: private Photon.Voice.SpacingProfile receiveSpacingProfile
    [[deprecated("Use field access instead!")]] ::Photon::Voice::SpacingProfile*& dyn_receiveSpacingProfile();
    // Get instance field reference: System.Byte lastEvNumber
    [[deprecated("Use field access instead!")]] uint8_t& dyn_lastEvNumber();
    // Get instance field reference: private Photon.Voice.VoiceClient voiceClient
    [[deprecated("Use field access instead!")]] ::Photon::Voice::VoiceClient*& dyn_voiceClient();
    // Get instance field reference: private System.Collections.Generic.Queue`1<Photon.Voice.FrameBuffer> frameQueue
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Queue_1<::Photon::Voice::FrameBuffer>*& dyn_frameQueue();
    // Get instance field reference: private System.Threading.AutoResetEvent frameQueueReady
    [[deprecated("Use field access instead!")]] ::System::Threading::AutoResetEvent*& dyn_frameQueueReady();
    // Get instance field reference: private System.Int32 flushingFramePosInQueue
    [[deprecated("Use field access instead!")]] int& dyn_flushingFramePosInQueue();
    // Get instance field reference: private Photon.Voice.FrameBuffer nullFrame
    [[deprecated("Use field access instead!")]] ::Photon::Voice::FrameBuffer& dyn_nullFrame();
    // Photon.Voice.VoiceInfo get_Info()
    // Offset: 0x4A6727C
    ::Photon::Voice::VoiceInfo get_Info();
    // private System.Void set_Info(Photon.Voice.VoiceInfo value)
    // Offset: 0x4A67290
    void set_Info(::Photon::Voice::VoiceInfo value);
    // System.Int32 get_DelayFrames()
    // Offset: 0x4A672B0
    int get_DelayFrames();
    // System.Void set_DelayFrames(System.Int32 value)
    // Offset: 0x4A672B8
    void set_DelayFrames(int value);
    // System.Void .ctor(Photon.Voice.VoiceClient client, Photon.Voice.RemoteVoiceOptions options, System.Int32 channelId, System.Int32 playerId, System.Byte voiceId, Photon.Voice.VoiceInfo info, System.Byte lastEventNumber)
    // Offset: 0x4A672C0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RemoteVoice* New_ctor(::Photon::Voice::VoiceClient* client, ::Photon::Voice::RemoteVoiceOptions options, int channelId, int playerId, uint8_t voiceId, ::Photon::Voice::VoiceInfo info, uint8_t lastEventNumber) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::RemoteVoice::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RemoteVoice*, creationType>(client, options, channelId, playerId, voiceId, info, lastEventNumber)));
    }
    // private System.String get_shortName()
    // Offset: 0x4A676AC
    ::StringW get_shortName();
    // public System.String get_LogPrefix()
    // Offset: 0x4A67828
    ::StringW get_LogPrefix();
    // private System.Void set_LogPrefix(System.String value)
    // Offset: 0x4A67830
    void set_LogPrefix(::StringW value);
    // public System.Void ReceiveSpacingProfileStart()
    // Offset: 0x4A67838
    void ReceiveSpacingProfileStart();
    // public System.String get_ReceiveSpacingProfileDump()
    // Offset: 0x4A67850
    ::StringW get_ReceiveSpacingProfileDump();
    // public System.Int32 get_ReceiveSpacingProfileMax()
    // Offset: 0x4A67868
    int get_ReceiveSpacingProfileMax();
    // static private System.Byte byteDiff(System.Byte latest, System.Byte last)
    // Offset: 0x4A67880
    static uint8_t byteDiff(uint8_t latest, uint8_t last);
    // System.Void receiveBytes(ref Photon.Voice.FrameBuffer receivedBytes, System.Byte evNumber)
    // Offset: 0x4A6788C
    void receiveBytes(ByRef<::Photon::Voice::FrameBuffer> receivedBytes, uint8_t evNumber);
    // private System.Void receiveFrame(ref Photon.Voice.FrameBuffer frame)
    // Offset: 0x4A68020
    void receiveFrame(ByRef<::Photon::Voice::FrameBuffer> frame);
    // private System.Void receiveNullFrames(System.Int32 count)
    // Offset: 0x4A67DB8
    void receiveNullFrames(int count);
    // private System.Void decodeThread()
    // Offset: 0x4A682AC
    void decodeThread();
    // System.Void removeAndDispose()
    // Offset: 0x4A689C0
    void removeAndDispose();
    // public System.Void Dispose()
    // Offset: 0x4A689EC
    void Dispose();
    // private System.Void <.ctor>b__14_0()
    // Offset: 0x4A68AE4
    void $_ctor$b__14_0();
  }; // Photon.Voice.RemoteVoice
  #pragma pack(pop)
  static check_size<sizeof(RemoteVoice), 224 + sizeof(::Photon::Voice::FrameBuffer)> __Photon_Voice_RemoteVoiceSizeCheck;
  static_assert(sizeof(RemoteVoice) == 0x112);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Voice::RemoteVoice::get_Info
// Il2CppName: get_Info
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Voice::VoiceInfo (Photon::Voice::RemoteVoice::*)()>(&Photon::Voice::RemoteVoice::get_Info)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::RemoteVoice*), "get_Info", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::RemoteVoice::set_Info
// Il2CppName: set_Info
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::RemoteVoice::*)(::Photon::Voice::VoiceInfo)>(&Photon::Voice::RemoteVoice::set_Info)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Photon.Voice", "VoiceInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::RemoteVoice*), "set_Info", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::RemoteVoice::get_DelayFrames
// Il2CppName: get_DelayFrames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Photon::Voice::RemoteVoice::*)()>(&Photon::Voice::RemoteVoice::get_DelayFrames)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::RemoteVoice*), "get_DelayFrames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::RemoteVoice::set_DelayFrames
// Il2CppName: set_DelayFrames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::RemoteVoice::*)(int)>(&Photon::Voice::RemoteVoice::set_DelayFrames)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::RemoteVoice*), "set_DelayFrames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::RemoteVoice::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Photon::Voice::RemoteVoice::get_shortName
// Il2CppName: get_shortName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Photon::Voice::RemoteVoice::*)()>(&Photon::Voice::RemoteVoice::get_shortName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::RemoteVoice*), "get_shortName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::RemoteVoice::get_LogPrefix
// Il2CppName: get_LogPrefix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Photon::Voice::RemoteVoice::*)()>(&Photon::Voice::RemoteVoice::get_LogPrefix)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::RemoteVoice*), "get_LogPrefix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::RemoteVoice::set_LogPrefix
// Il2CppName: set_LogPrefix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::RemoteVoice::*)(::StringW)>(&Photon::Voice::RemoteVoice::set_LogPrefix)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::RemoteVoice*), "set_LogPrefix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::RemoteVoice::ReceiveSpacingProfileStart
// Il2CppName: ReceiveSpacingProfileStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::RemoteVoice::*)()>(&Photon::Voice::RemoteVoice::ReceiveSpacingProfileStart)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::RemoteVoice*), "ReceiveSpacingProfileStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::RemoteVoice::get_ReceiveSpacingProfileDump
// Il2CppName: get_ReceiveSpacingProfileDump
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Photon::Voice::RemoteVoice::*)()>(&Photon::Voice::RemoteVoice::get_ReceiveSpacingProfileDump)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::RemoteVoice*), "get_ReceiveSpacingProfileDump", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::RemoteVoice::get_ReceiveSpacingProfileMax
// Il2CppName: get_ReceiveSpacingProfileMax
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Photon::Voice::RemoteVoice::*)()>(&Photon::Voice::RemoteVoice::get_ReceiveSpacingProfileMax)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::RemoteVoice*), "get_ReceiveSpacingProfileMax", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::RemoteVoice::byteDiff
// Il2CppName: byteDiff
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (*)(uint8_t, uint8_t)>(&Photon::Voice::RemoteVoice::byteDiff)> {
  static const MethodInfo* get() {
    static auto* latest = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* last = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::RemoteVoice*), "byteDiff", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{latest, last});
  }
};
// Writing MetadataGetter for method: Photon::Voice::RemoteVoice::receiveBytes
// Il2CppName: receiveBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::RemoteVoice::*)(ByRef<::Photon::Voice::FrameBuffer>, uint8_t)>(&Photon::Voice::RemoteVoice::receiveBytes)> {
  static const MethodInfo* get() {
    static auto* receivedBytes = &::il2cpp_utils::GetClassFromName("Photon.Voice", "FrameBuffer")->this_arg;
    static auto* evNumber = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::RemoteVoice*), "receiveBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{receivedBytes, evNumber});
  }
};
// Writing MetadataGetter for method: Photon::Voice::RemoteVoice::receiveFrame
// Il2CppName: receiveFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::RemoteVoice::*)(ByRef<::Photon::Voice::FrameBuffer>)>(&Photon::Voice::RemoteVoice::receiveFrame)> {
  static const MethodInfo* get() {
    static auto* frame = &::il2cpp_utils::GetClassFromName("Photon.Voice", "FrameBuffer")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::RemoteVoice*), "receiveFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{frame});
  }
};
// Writing MetadataGetter for method: Photon::Voice::RemoteVoice::receiveNullFrames
// Il2CppName: receiveNullFrames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::RemoteVoice::*)(int)>(&Photon::Voice::RemoteVoice::receiveNullFrames)> {
  static const MethodInfo* get() {
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::RemoteVoice*), "receiveNullFrames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{count});
  }
};
// Writing MetadataGetter for method: Photon::Voice::RemoteVoice::decodeThread
// Il2CppName: decodeThread
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::RemoteVoice::*)()>(&Photon::Voice::RemoteVoice::decodeThread)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::RemoteVoice*), "decodeThread", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::RemoteVoice::removeAndDispose
// Il2CppName: removeAndDispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::RemoteVoice::*)()>(&Photon::Voice::RemoteVoice::removeAndDispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::RemoteVoice*), "removeAndDispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::RemoteVoice::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::RemoteVoice::*)()>(&Photon::Voice::RemoteVoice::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::RemoteVoice*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::RemoteVoice::$_ctor$b__14_0
// Il2CppName: <.ctor>b__14_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::RemoteVoice::*)()>(&Photon::Voice::RemoteVoice::$_ctor$b__14_0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::RemoteVoice*), "<.ctor>b__14_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
