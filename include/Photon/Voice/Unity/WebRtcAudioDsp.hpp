// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Voice.Unity.VoiceComponent
#include "Photon/Voice/Unity/VoiceComponent.hpp"
// Including type: UnityEngine.AudioSpeakerMode
#include "UnityEngine/AudioSpeakerMode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Voice
namespace Photon::Voice {
  // Forward declaring type: WebRTCAudioProcessor
  class WebRTCAudioProcessor;
  // Forward declaring type: LocalVoiceAudioShort
  class LocalVoiceAudioShort;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioListener
  class AudioListener;
}
// Forward declaring namespace: Photon::Voice::Unity
namespace Photon::Voice::Unity {
  // Forward declaring type: AudioOutCapture
  class AudioOutCapture;
  // Forward declaring type: Recorder
  class Recorder;
  // Forward declaring type: PhotonVoiceCreatedParams
  class PhotonVoiceCreatedParams;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Completed forward declares
// Type namespace: Photon.Voice.Unity
namespace Photon::Voice::Unity {
  // Forward declaring type: WebRtcAudioDsp
  class WebRtcAudioDsp;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Voice::Unity::WebRtcAudioDsp);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Voice::Unity::WebRtcAudioDsp*, "Photon.Voice.Unity", "WebRtcAudioDsp");
// Type namespace: Photon.Voice.Unity
namespace Photon::Voice::Unity {
  // Size: 0x89
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Voice.Unity.WebRtcAudioDsp
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: FFFFFFFF
  // [DisallowMultipleComponent] Offset: FFFFFFFF
  class WebRtcAudioDsp : public ::Photon::Voice::Unity::VoiceComponent {
    public:
    public:
    // private System.Boolean aec
    // Size: 0x1
    // Offset: 0x2A
    bool aec;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean aecHighPass
    // Size: 0x1
    // Offset: 0x2B
    bool aecHighPass;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean agc
    // Size: 0x1
    // Offset: 0x2C
    bool agc;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: agc and: agcCompressionGain
    char __padding2[0x3] = {};
    // private System.Int32 agcCompressionGain
    // Size: 0x4
    // Offset: 0x30
    int agcCompressionGain;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean vad
    // Size: 0x1
    // Offset: 0x34
    bool vad;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean highPass
    // Size: 0x1
    // Offset: 0x35
    bool highPass;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean bypass
    // Size: 0x1
    // Offset: 0x36
    bool bypass;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean noiseSuppression
    // Size: 0x1
    // Offset: 0x37
    bool noiseSuppression;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Int32 reverseStreamDelayMs
    // Size: 0x4
    // Offset: 0x38
    int reverseStreamDelayMs;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 reverseChannels
    // Size: 0x4
    // Offset: 0x3C
    int reverseChannels;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private Photon.Voice.WebRTCAudioProcessor proc
    // Size: 0x8
    // Offset: 0x40
    ::Photon::Voice::WebRTCAudioProcessor* proc;
    // Field size check
    static_assert(sizeof(::Photon::Voice::WebRTCAudioProcessor*) == 0x8);
    // private UnityEngine.AudioListener audioListener
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::AudioListener* audioListener;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioListener*) == 0x8);
    // private Photon.Voice.Unity.AudioOutCapture audioOutCapture
    // Size: 0x8
    // Offset: 0x50
    ::Photon::Voice::Unity::AudioOutCapture* audioOutCapture;
    // Field size check
    static_assert(sizeof(::Photon::Voice::Unity::AudioOutCapture*) == 0x8);
    // private System.Boolean aecStarted
    // Size: 0x1
    // Offset: 0x58
    bool aecStarted;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean autoDestroyAudioOutCapture
    // Size: 0x1
    // Offset: 0x59
    bool autoDestroyAudioOutCapture;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: autoDestroyAudioOutCapture and: localVoice
    char __padding14[0x6] = {};
    // private Photon.Voice.LocalVoiceAudioShort localVoice
    // Size: 0x8
    // Offset: 0x60
    ::Photon::Voice::LocalVoiceAudioShort* localVoice;
    // Field size check
    static_assert(sizeof(::Photon::Voice::LocalVoiceAudioShort*) == 0x8);
    // private System.Int32 outputSampleRate
    // Size: 0x4
    // Offset: 0x68
    int outputSampleRate;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: outputSampleRate and: recorder
    char __padding16[0x4] = {};
    // private Photon.Voice.Unity.Recorder recorder
    // Size: 0x8
    // Offset: 0x70
    ::Photon::Voice::Unity::Recorder* recorder;
    // Field size check
    static_assert(sizeof(::Photon::Voice::Unity::Recorder*) == 0x8);
    // public System.Boolean ForceNormalAecInMobile
    // Size: 0x1
    // Offset: 0x78
    bool ForceNormalAecInMobile;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean aecOnlyWhenEnabled
    // Size: 0x1
    // Offset: 0x79
    bool aecOnlyWhenEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean AutoRestartOnAudioChannelsMismatch
    // Size: 0x1
    // Offset: 0x7A
    bool AutoRestartOnAudioChannelsMismatch;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: AutoRestartOnAudioChannelsMismatch and: threadSafety
    char __padding20[0x5] = {};
    // private System.Object threadSafety
    // Size: 0x8
    // Offset: 0x80
    ::Il2CppObject* threadSafety;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // public System.Boolean AECMobileComfortNoise
    // Size: 0x1
    // Offset: 0x88
    bool AECMobileComfortNoise;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get static field: static private readonly System.Collections.Generic.Dictionary`2<UnityEngine.AudioSpeakerMode,System.Int32> channelsMap
    static ::System::Collections::Generic::Dictionary_2<::UnityEngine::AudioSpeakerMode, int>* _get_channelsMap();
    // Set static field: static private readonly System.Collections.Generic.Dictionary`2<UnityEngine.AudioSpeakerMode,System.Int32> channelsMap
    static void _set_channelsMap(::System::Collections::Generic::Dictionary_2<::UnityEngine::AudioSpeakerMode, int>* value);
    // Get instance field reference: private System.Boolean aec
    [[deprecated("Use field access instead!")]] bool& dyn_aec();
    // Get instance field reference: private System.Boolean aecHighPass
    [[deprecated("Use field access instead!")]] bool& dyn_aecHighPass();
    // Get instance field reference: private System.Boolean agc
    [[deprecated("Use field access instead!")]] bool& dyn_agc();
    // Get instance field reference: private System.Int32 agcCompressionGain
    [[deprecated("Use field access instead!")]] int& dyn_agcCompressionGain();
    // Get instance field reference: private System.Boolean vad
    [[deprecated("Use field access instead!")]] bool& dyn_vad();
    // Get instance field reference: private System.Boolean highPass
    [[deprecated("Use field access instead!")]] bool& dyn_highPass();
    // Get instance field reference: private System.Boolean bypass
    [[deprecated("Use field access instead!")]] bool& dyn_bypass();
    // Get instance field reference: private System.Boolean noiseSuppression
    [[deprecated("Use field access instead!")]] bool& dyn_noiseSuppression();
    // Get instance field reference: private System.Int32 reverseStreamDelayMs
    [[deprecated("Use field access instead!")]] int& dyn_reverseStreamDelayMs();
    // Get instance field reference: private System.Int32 reverseChannels
    [[deprecated("Use field access instead!")]] int& dyn_reverseChannels();
    // Get instance field reference: private Photon.Voice.WebRTCAudioProcessor proc
    [[deprecated("Use field access instead!")]] ::Photon::Voice::WebRTCAudioProcessor*& dyn_proc();
    // Get instance field reference: private UnityEngine.AudioListener audioListener
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioListener*& dyn_audioListener();
    // Get instance field reference: private Photon.Voice.Unity.AudioOutCapture audioOutCapture
    [[deprecated("Use field access instead!")]] ::Photon::Voice::Unity::AudioOutCapture*& dyn_audioOutCapture();
    // Get instance field reference: private System.Boolean aecStarted
    [[deprecated("Use field access instead!")]] bool& dyn_aecStarted();
    // Get instance field reference: private System.Boolean autoDestroyAudioOutCapture
    [[deprecated("Use field access instead!")]] bool& dyn_autoDestroyAudioOutCapture();
    // Get instance field reference: private Photon.Voice.LocalVoiceAudioShort localVoice
    [[deprecated("Use field access instead!")]] ::Photon::Voice::LocalVoiceAudioShort*& dyn_localVoice();
    // Get instance field reference: private System.Int32 outputSampleRate
    [[deprecated("Use field access instead!")]] int& dyn_outputSampleRate();
    // Get instance field reference: private Photon.Voice.Unity.Recorder recorder
    [[deprecated("Use field access instead!")]] ::Photon::Voice::Unity::Recorder*& dyn_recorder();
    // Get instance field reference: public System.Boolean ForceNormalAecInMobile
    [[deprecated("Use field access instead!")]] bool& dyn_ForceNormalAecInMobile();
    // Get instance field reference: private System.Boolean aecOnlyWhenEnabled
    [[deprecated("Use field access instead!")]] bool& dyn_aecOnlyWhenEnabled();
    // Get instance field reference: public System.Boolean AutoRestartOnAudioChannelsMismatch
    [[deprecated("Use field access instead!")]] bool& dyn_AutoRestartOnAudioChannelsMismatch();
    // Get instance field reference: private System.Object threadSafety
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_threadSafety();
    // Get instance field reference: public System.Boolean AECMobileComfortNoise
    [[deprecated("Use field access instead!")]] bool& dyn_AECMobileComfortNoise();
    // public System.Boolean get_AEC()
    // Offset: 0x4AA0798
    bool get_AEC();
    // public System.Void set_AEC(System.Boolean value)
    // Offset: 0x4AA08CC
    void set_AEC(bool value);
    // public System.Boolean get_AECMobile()
    // Offset: 0x4AA0C98
    bool get_AECMobile();
    // public System.Void set_AECMobile(System.Boolean value)
    // Offset: 0x4AA0C9C
    void set_AECMobile(bool value);
    // public System.Boolean get_AecHighPass()
    // Offset: 0x4AA0CA4
    bool get_AecHighPass();
    // public System.Void set_AecHighPass(System.Boolean value)
    // Offset: 0x4AA0CAC
    void set_AecHighPass(bool value);
    // public System.Int32 get_ReverseStreamDelayMs()
    // Offset: 0x4AA0D94
    int get_ReverseStreamDelayMs();
    // public System.Void set_ReverseStreamDelayMs(System.Int32 value)
    // Offset: 0x4AA0D9C
    void set_ReverseStreamDelayMs(int value);
    // public System.Boolean get_NoiseSuppression()
    // Offset: 0x4AA0E80
    bool get_NoiseSuppression();
    // public System.Void set_NoiseSuppression(System.Boolean value)
    // Offset: 0x4AA0E88
    void set_NoiseSuppression(bool value);
    // public System.Boolean get_HighPass()
    // Offset: 0x4AA0F70
    bool get_HighPass();
    // public System.Void set_HighPass(System.Boolean value)
    // Offset: 0x4AA0F78
    void set_HighPass(bool value);
    // public System.Boolean get_Bypass()
    // Offset: 0x4AA1060
    bool get_Bypass();
    // public System.Void set_Bypass(System.Boolean value)
    // Offset: 0x4AA1068
    void set_Bypass(bool value);
    // public System.Boolean get_AGC()
    // Offset: 0x4AA1098
    bool get_AGC();
    // public System.Void set_AGC(System.Boolean value)
    // Offset: 0x4AA10A0
    void set_AGC(bool value);
    // public System.Int32 get_AgcCompressionGain()
    // Offset: 0x4AA1188
    int get_AgcCompressionGain();
    // public System.Void set_AgcCompressionGain(System.Int32 value)
    // Offset: 0x4AA1190
    void set_AgcCompressionGain(int value);
    // public System.Boolean get_VAD()
    // Offset: 0x4AA1384
    bool get_VAD();
    // public System.Void set_VAD(System.Boolean value)
    // Offset: 0x4AA138C
    void set_VAD(bool value);
    // public System.Boolean get_IsInitialized()
    // Offset: 0x4AA08BC
    bool get_IsInitialized();
    // public System.Boolean get_AecOnlyWhenEnabled()
    // Offset: 0x4AA1474
    bool get_AecOnlyWhenEnabled();
    // public System.Void set_AecOnlyWhenEnabled(System.Boolean value)
    // Offset: 0x4AA147C
    void set_AecOnlyWhenEnabled(bool value);
    // private System.Void OnEnable()
    // Offset: 0x4AA1758
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0x4AA1938
    void OnDisable();
    // private System.Boolean SupportedPlatformCheck()
    // Offset: 0x4AA1750
    bool SupportedPlatformCheck();
    // private System.Void ToggleAec()
    // Offset: 0x4AA099C
    void ToggleAec();
    // private System.Boolean ToggleAecOutputListener(System.Boolean on)
    // Offset: 0x4AA1A0C
    bool ToggleAecOutputListener(bool on);
    // private System.Void StartAec()
    // Offset: 0x4AA2934
    void StartAec();
    // private System.Void OnAudioConfigurationChanged(System.Boolean deviceWasChanged)
    // Offset: 0x4AA2E10
    void OnAudioConfigurationChanged(bool deviceWasChanged);
    // private System.Void OnAudioOutFrameFloat(System.Single[] data, System.Int32 outChannels)
    // Offset: 0x4AA3848
    void OnAudioOutFrameFloat(::ArrayW<float> data, int outChannels);
    // private System.Void PhotonVoiceCreated(Photon.Voice.Unity.PhotonVoiceCreatedParams p)
    // Offset: 0x4AA3C5C
    void PhotonVoiceCreated(::Photon::Voice::Unity::PhotonVoiceCreatedParams* p);
    // private System.Void PhotonVoiceRemoved()
    // Offset: 0x4AA4580
    void PhotonVoiceRemoved();
    // private System.Void OnDestroy()
    // Offset: 0x4AA4684
    void OnDestroy();
    // private System.Void StopAllProcessing()
    // Offset: 0x4AA4584
    void StopAllProcessing();
    // private System.Void Restart()
    // Offset: 0x4AA3304
    void Restart();
    // private System.Boolean Init()
    // Offset: 0x4AA4288
    bool Init();
    // private System.Boolean SetOrSwitchAudioListener(UnityEngine.AudioListener listener, System.Boolean extraChecks, System.Boolean log)
    // Offset: 0x4AA470C
    bool SetOrSwitchAudioListener(::UnityEngine::AudioListener* listener, bool extraChecks, bool log);
    // private System.Boolean SetOrSwitchAudioOutCapture(Photon.Voice.Unity.AudioOutCapture capture, System.Boolean extraChecks, System.Boolean log)
    // Offset: 0x4AA4D78
    bool SetOrSwitchAudioOutCapture(::Photon::Voice::Unity::AudioOutCapture* capture, bool extraChecks, bool log);
    // private System.Boolean InitAudioOutCapture()
    // Offset: 0x4AA2024
    bool InitAudioOutCapture();
    // private System.Boolean UnsubscribeFromAudioOutCapture(System.Boolean destroy)
    // Offset: 0x4AA2AF4
    bool UnsubscribeFromAudioOutCapture(bool destroy);
    // private System.Boolean AudioListenerChecks(UnityEngine.AudioListener listener, System.Boolean log)
    // Offset: 0x4AA4A44
    bool AudioListenerChecks(::UnityEngine::AudioListener* listener, bool log);
    // private System.Boolean AudioOutCaptureChecks(Photon.Voice.Unity.AudioOutCapture capture, System.Boolean listenerChecks, System.Boolean log)
    // Offset: 0x4AA25AC
    bool AudioOutCaptureChecks(::Photon::Voice::Unity::AudioOutCapture* capture, bool listenerChecks, bool log);
    // public System.Boolean SetOrSwitchAudioListener(UnityEngine.AudioListener listener)
    // Offset: 0x4AA5070
    bool SetOrSwitchAudioListener(::UnityEngine::AudioListener* listener);
    // public System.Boolean SetOrSwitchAudioOutCapture(Photon.Voice.Unity.AudioOutCapture capture)
    // Offset: 0x4AA514C
    bool SetOrSwitchAudioOutCapture(::Photon::Voice::Unity::AudioOutCapture* capture);
    // static private System.Void .cctor()
    // Offset: 0x4AA52C4
    static void _cctor();
    // protected override System.Void Awake()
    // Offset: 0x4AA154C
    // Implemented from: Photon.Voice.Unity.VoiceComponent
    // Base method: System.Void VoiceComponent::Awake()
    void Awake();
    // public System.Void .ctor()
    // Offset: 0x4AA5230
    // Implemented from: Photon.Voice.Unity.VoiceComponent
    // Base method: System.Void VoiceComponent::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WebRtcAudioDsp* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::Unity::WebRtcAudioDsp::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WebRtcAudioDsp*, creationType>()));
    }
  }; // Photon.Voice.Unity.WebRtcAudioDsp
  #pragma pack(pop)
  static check_size<sizeof(WebRtcAudioDsp), 136 + sizeof(bool)> __Photon_Voice_Unity_WebRtcAudioDspSizeCheck;
  static_assert(sizeof(WebRtcAudioDsp) == 0x89);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Voice::Unity::WebRtcAudioDsp::get_AEC
// Il2CppName: get_AEC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Unity::WebRtcAudioDsp::*)()>(&Photon::Voice::Unity::WebRtcAudioDsp::get_AEC)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::WebRtcAudioDsp*), "get_AEC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::WebRtcAudioDsp::set_AEC
// Il2CppName: set_AEC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::WebRtcAudioDsp::*)(bool)>(&Photon::Voice::Unity::WebRtcAudioDsp::set_AEC)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::WebRtcAudioDsp*), "set_AEC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::WebRtcAudioDsp::get_AECMobile
// Il2CppName: get_AECMobile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Unity::WebRtcAudioDsp::*)()>(&Photon::Voice::Unity::WebRtcAudioDsp::get_AECMobile)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::WebRtcAudioDsp*), "get_AECMobile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::WebRtcAudioDsp::set_AECMobile
// Il2CppName: set_AECMobile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::WebRtcAudioDsp::*)(bool)>(&Photon::Voice::Unity::WebRtcAudioDsp::set_AECMobile)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::WebRtcAudioDsp*), "set_AECMobile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::WebRtcAudioDsp::get_AecHighPass
// Il2CppName: get_AecHighPass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Unity::WebRtcAudioDsp::*)()>(&Photon::Voice::Unity::WebRtcAudioDsp::get_AecHighPass)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::WebRtcAudioDsp*), "get_AecHighPass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::WebRtcAudioDsp::set_AecHighPass
// Il2CppName: set_AecHighPass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::WebRtcAudioDsp::*)(bool)>(&Photon::Voice::Unity::WebRtcAudioDsp::set_AecHighPass)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::WebRtcAudioDsp*), "set_AecHighPass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::WebRtcAudioDsp::get_ReverseStreamDelayMs
// Il2CppName: get_ReverseStreamDelayMs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Photon::Voice::Unity::WebRtcAudioDsp::*)()>(&Photon::Voice::Unity::WebRtcAudioDsp::get_ReverseStreamDelayMs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::WebRtcAudioDsp*), "get_ReverseStreamDelayMs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::WebRtcAudioDsp::set_ReverseStreamDelayMs
// Il2CppName: set_ReverseStreamDelayMs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::WebRtcAudioDsp::*)(int)>(&Photon::Voice::Unity::WebRtcAudioDsp::set_ReverseStreamDelayMs)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::WebRtcAudioDsp*), "set_ReverseStreamDelayMs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::WebRtcAudioDsp::get_NoiseSuppression
// Il2CppName: get_NoiseSuppression
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Unity::WebRtcAudioDsp::*)()>(&Photon::Voice::Unity::WebRtcAudioDsp::get_NoiseSuppression)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::WebRtcAudioDsp*), "get_NoiseSuppression", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::WebRtcAudioDsp::set_NoiseSuppression
// Il2CppName: set_NoiseSuppression
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::WebRtcAudioDsp::*)(bool)>(&Photon::Voice::Unity::WebRtcAudioDsp::set_NoiseSuppression)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::WebRtcAudioDsp*), "set_NoiseSuppression", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::WebRtcAudioDsp::get_HighPass
// Il2CppName: get_HighPass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Unity::WebRtcAudioDsp::*)()>(&Photon::Voice::Unity::WebRtcAudioDsp::get_HighPass)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::WebRtcAudioDsp*), "get_HighPass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::WebRtcAudioDsp::set_HighPass
// Il2CppName: set_HighPass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::WebRtcAudioDsp::*)(bool)>(&Photon::Voice::Unity::WebRtcAudioDsp::set_HighPass)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::WebRtcAudioDsp*), "set_HighPass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::WebRtcAudioDsp::get_Bypass
// Il2CppName: get_Bypass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Unity::WebRtcAudioDsp::*)()>(&Photon::Voice::Unity::WebRtcAudioDsp::get_Bypass)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::WebRtcAudioDsp*), "get_Bypass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::WebRtcAudioDsp::set_Bypass
// Il2CppName: set_Bypass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::WebRtcAudioDsp::*)(bool)>(&Photon::Voice::Unity::WebRtcAudioDsp::set_Bypass)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::WebRtcAudioDsp*), "set_Bypass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::WebRtcAudioDsp::get_AGC
// Il2CppName: get_AGC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Unity::WebRtcAudioDsp::*)()>(&Photon::Voice::Unity::WebRtcAudioDsp::get_AGC)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::WebRtcAudioDsp*), "get_AGC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::WebRtcAudioDsp::set_AGC
// Il2CppName: set_AGC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::WebRtcAudioDsp::*)(bool)>(&Photon::Voice::Unity::WebRtcAudioDsp::set_AGC)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::WebRtcAudioDsp*), "set_AGC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::WebRtcAudioDsp::get_AgcCompressionGain
// Il2CppName: get_AgcCompressionGain
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Photon::Voice::Unity::WebRtcAudioDsp::*)()>(&Photon::Voice::Unity::WebRtcAudioDsp::get_AgcCompressionGain)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::WebRtcAudioDsp*), "get_AgcCompressionGain", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::WebRtcAudioDsp::set_AgcCompressionGain
// Il2CppName: set_AgcCompressionGain
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::WebRtcAudioDsp::*)(int)>(&Photon::Voice::Unity::WebRtcAudioDsp::set_AgcCompressionGain)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::WebRtcAudioDsp*), "set_AgcCompressionGain", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::WebRtcAudioDsp::get_VAD
// Il2CppName: get_VAD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Unity::WebRtcAudioDsp::*)()>(&Photon::Voice::Unity::WebRtcAudioDsp::get_VAD)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::WebRtcAudioDsp*), "get_VAD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::WebRtcAudioDsp::set_VAD
// Il2CppName: set_VAD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::WebRtcAudioDsp::*)(bool)>(&Photon::Voice::Unity::WebRtcAudioDsp::set_VAD)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::WebRtcAudioDsp*), "set_VAD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::WebRtcAudioDsp::get_IsInitialized
// Il2CppName: get_IsInitialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Unity::WebRtcAudioDsp::*)()>(&Photon::Voice::Unity::WebRtcAudioDsp::get_IsInitialized)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::WebRtcAudioDsp*), "get_IsInitialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::WebRtcAudioDsp::get_AecOnlyWhenEnabled
// Il2CppName: get_AecOnlyWhenEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Unity::WebRtcAudioDsp::*)()>(&Photon::Voice::Unity::WebRtcAudioDsp::get_AecOnlyWhenEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::WebRtcAudioDsp*), "get_AecOnlyWhenEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::WebRtcAudioDsp::set_AecOnlyWhenEnabled
// Il2CppName: set_AecOnlyWhenEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::WebRtcAudioDsp::*)(bool)>(&Photon::Voice::Unity::WebRtcAudioDsp::set_AecOnlyWhenEnabled)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::WebRtcAudioDsp*), "set_AecOnlyWhenEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::WebRtcAudioDsp::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::WebRtcAudioDsp::*)()>(&Photon::Voice::Unity::WebRtcAudioDsp::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::WebRtcAudioDsp*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::WebRtcAudioDsp::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::WebRtcAudioDsp::*)()>(&Photon::Voice::Unity::WebRtcAudioDsp::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::WebRtcAudioDsp*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::WebRtcAudioDsp::SupportedPlatformCheck
// Il2CppName: SupportedPlatformCheck
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Unity::WebRtcAudioDsp::*)()>(&Photon::Voice::Unity::WebRtcAudioDsp::SupportedPlatformCheck)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::WebRtcAudioDsp*), "SupportedPlatformCheck", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::WebRtcAudioDsp::ToggleAec
// Il2CppName: ToggleAec
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::WebRtcAudioDsp::*)()>(&Photon::Voice::Unity::WebRtcAudioDsp::ToggleAec)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::WebRtcAudioDsp*), "ToggleAec", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::WebRtcAudioDsp::ToggleAecOutputListener
// Il2CppName: ToggleAecOutputListener
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Unity::WebRtcAudioDsp::*)(bool)>(&Photon::Voice::Unity::WebRtcAudioDsp::ToggleAecOutputListener)> {
  static const MethodInfo* get() {
    static auto* on = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::WebRtcAudioDsp*), "ToggleAecOutputListener", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{on});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::WebRtcAudioDsp::StartAec
// Il2CppName: StartAec
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::WebRtcAudioDsp::*)()>(&Photon::Voice::Unity::WebRtcAudioDsp::StartAec)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::WebRtcAudioDsp*), "StartAec", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::WebRtcAudioDsp::OnAudioConfigurationChanged
// Il2CppName: OnAudioConfigurationChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::WebRtcAudioDsp::*)(bool)>(&Photon::Voice::Unity::WebRtcAudioDsp::OnAudioConfigurationChanged)> {
  static const MethodInfo* get() {
    static auto* deviceWasChanged = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::WebRtcAudioDsp*), "OnAudioConfigurationChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{deviceWasChanged});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::WebRtcAudioDsp::OnAudioOutFrameFloat
// Il2CppName: OnAudioOutFrameFloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::WebRtcAudioDsp::*)(::ArrayW<float>, int)>(&Photon::Voice::Unity::WebRtcAudioDsp::OnAudioOutFrameFloat)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* outChannels = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::WebRtcAudioDsp*), "OnAudioOutFrameFloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, outChannels});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::WebRtcAudioDsp::PhotonVoiceCreated
// Il2CppName: PhotonVoiceCreated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::WebRtcAudioDsp::*)(::Photon::Voice::Unity::PhotonVoiceCreatedParams*)>(&Photon::Voice::Unity::WebRtcAudioDsp::PhotonVoiceCreated)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("Photon.Voice.Unity", "PhotonVoiceCreatedParams")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::WebRtcAudioDsp*), "PhotonVoiceCreated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::WebRtcAudioDsp::PhotonVoiceRemoved
// Il2CppName: PhotonVoiceRemoved
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::WebRtcAudioDsp::*)()>(&Photon::Voice::Unity::WebRtcAudioDsp::PhotonVoiceRemoved)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::WebRtcAudioDsp*), "PhotonVoiceRemoved", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::WebRtcAudioDsp::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::WebRtcAudioDsp::*)()>(&Photon::Voice::Unity::WebRtcAudioDsp::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::WebRtcAudioDsp*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::WebRtcAudioDsp::StopAllProcessing
// Il2CppName: StopAllProcessing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::WebRtcAudioDsp::*)()>(&Photon::Voice::Unity::WebRtcAudioDsp::StopAllProcessing)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::WebRtcAudioDsp*), "StopAllProcessing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::WebRtcAudioDsp::Restart
// Il2CppName: Restart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::WebRtcAudioDsp::*)()>(&Photon::Voice::Unity::WebRtcAudioDsp::Restart)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::WebRtcAudioDsp*), "Restart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::WebRtcAudioDsp::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Unity::WebRtcAudioDsp::*)()>(&Photon::Voice::Unity::WebRtcAudioDsp::Init)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::WebRtcAudioDsp*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::WebRtcAudioDsp::SetOrSwitchAudioListener
// Il2CppName: SetOrSwitchAudioListener
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Unity::WebRtcAudioDsp::*)(::UnityEngine::AudioListener*, bool, bool)>(&Photon::Voice::Unity::WebRtcAudioDsp::SetOrSwitchAudioListener)> {
  static const MethodInfo* get() {
    static auto* listener = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioListener")->byval_arg;
    static auto* extraChecks = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* log = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::WebRtcAudioDsp*), "SetOrSwitchAudioListener", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{listener, extraChecks, log});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::WebRtcAudioDsp::SetOrSwitchAudioOutCapture
// Il2CppName: SetOrSwitchAudioOutCapture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Unity::WebRtcAudioDsp::*)(::Photon::Voice::Unity::AudioOutCapture*, bool, bool)>(&Photon::Voice::Unity::WebRtcAudioDsp::SetOrSwitchAudioOutCapture)> {
  static const MethodInfo* get() {
    static auto* capture = &::il2cpp_utils::GetClassFromName("Photon.Voice.Unity", "AudioOutCapture")->byval_arg;
    static auto* extraChecks = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* log = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::WebRtcAudioDsp*), "SetOrSwitchAudioOutCapture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{capture, extraChecks, log});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::WebRtcAudioDsp::InitAudioOutCapture
// Il2CppName: InitAudioOutCapture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Unity::WebRtcAudioDsp::*)()>(&Photon::Voice::Unity::WebRtcAudioDsp::InitAudioOutCapture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::WebRtcAudioDsp*), "InitAudioOutCapture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::WebRtcAudioDsp::UnsubscribeFromAudioOutCapture
// Il2CppName: UnsubscribeFromAudioOutCapture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Unity::WebRtcAudioDsp::*)(bool)>(&Photon::Voice::Unity::WebRtcAudioDsp::UnsubscribeFromAudioOutCapture)> {
  static const MethodInfo* get() {
    static auto* destroy = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::WebRtcAudioDsp*), "UnsubscribeFromAudioOutCapture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{destroy});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::WebRtcAudioDsp::AudioListenerChecks
// Il2CppName: AudioListenerChecks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Unity::WebRtcAudioDsp::*)(::UnityEngine::AudioListener*, bool)>(&Photon::Voice::Unity::WebRtcAudioDsp::AudioListenerChecks)> {
  static const MethodInfo* get() {
    static auto* listener = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioListener")->byval_arg;
    static auto* log = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::WebRtcAudioDsp*), "AudioListenerChecks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{listener, log});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::WebRtcAudioDsp::AudioOutCaptureChecks
// Il2CppName: AudioOutCaptureChecks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Unity::WebRtcAudioDsp::*)(::Photon::Voice::Unity::AudioOutCapture*, bool, bool)>(&Photon::Voice::Unity::WebRtcAudioDsp::AudioOutCaptureChecks)> {
  static const MethodInfo* get() {
    static auto* capture = &::il2cpp_utils::GetClassFromName("Photon.Voice.Unity", "AudioOutCapture")->byval_arg;
    static auto* listenerChecks = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* log = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::WebRtcAudioDsp*), "AudioOutCaptureChecks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{capture, listenerChecks, log});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::WebRtcAudioDsp::SetOrSwitchAudioListener
// Il2CppName: SetOrSwitchAudioListener
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Unity::WebRtcAudioDsp::*)(::UnityEngine::AudioListener*)>(&Photon::Voice::Unity::WebRtcAudioDsp::SetOrSwitchAudioListener)> {
  static const MethodInfo* get() {
    static auto* listener = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioListener")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::WebRtcAudioDsp*), "SetOrSwitchAudioListener", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{listener});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::WebRtcAudioDsp::SetOrSwitchAudioOutCapture
// Il2CppName: SetOrSwitchAudioOutCapture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Unity::WebRtcAudioDsp::*)(::Photon::Voice::Unity::AudioOutCapture*)>(&Photon::Voice::Unity::WebRtcAudioDsp::SetOrSwitchAudioOutCapture)> {
  static const MethodInfo* get() {
    static auto* capture = &::il2cpp_utils::GetClassFromName("Photon.Voice.Unity", "AudioOutCapture")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::WebRtcAudioDsp*), "SetOrSwitchAudioOutCapture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{capture});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::WebRtcAudioDsp::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Photon::Voice::Unity::WebRtcAudioDsp::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::WebRtcAudioDsp*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::WebRtcAudioDsp::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::WebRtcAudioDsp::*)()>(&Photon::Voice::Unity::WebRtcAudioDsp::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::WebRtcAudioDsp*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::WebRtcAudioDsp::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
