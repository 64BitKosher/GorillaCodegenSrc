// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Voice.Unity.VoiceComponent
#include "Photon/Voice/Unity/VoiceComponent.hpp"
// Including type: UnityEngine.AudioConfiguration
#include "UnityEngine/AudioConfiguration.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Voice
namespace Photon::Voice {
  // Forward declaring type: IAudioInChangeNotifier
  class IAudioInChangeNotifier;
}
// Forward declaring namespace: Photon::Voice::Unity
namespace Photon::Voice::Unity {
  // Forward declaring type: Recorder
  class Recorder;
}
// Completed forward declares
// Type namespace: Photon.Voice.Unity
namespace Photon::Voice::Unity {
  // Forward declaring type: AudioChangesHandler
  class AudioChangesHandler;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Voice::Unity::AudioChangesHandler);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Voice::Unity::AudioChangesHandler*, "Photon.Voice.Unity", "AudioChangesHandler");
// Type namespace: Photon.Voice.Unity
namespace Photon::Voice::Unity {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Voice.Unity.AudioChangesHandler
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: FFFFFFFF
  class AudioChangesHandler : public ::Photon::Voice::Unity::VoiceComponent {
    public:
    // Writing base type padding for base size: 0x2A to desired offset: 0x30
    char ___base_padding[0x6] = {};
    public:
    // private Photon.Voice.IAudioInChangeNotifier photonMicChangeNotifier
    // Size: 0x8
    // Offset: 0x30
    ::Photon::Voice::IAudioInChangeNotifier* photonMicChangeNotifier;
    // Field size check
    static_assert(sizeof(::Photon::Voice::IAudioInChangeNotifier*) == 0x8);
    // private UnityEngine.AudioConfiguration audioConfiguration
    // Size: 0x14
    // Offset: 0x38
    ::UnityEngine::AudioConfiguration audioConfiguration;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioConfiguration) == 0x14);
    // Padding between fields: audioConfiguration and: recorder
    char __padding1[0x4] = {};
    // private Photon.Voice.Unity.Recorder recorder
    // Size: 0x8
    // Offset: 0x50
    ::Photon::Voice::Unity::Recorder* recorder;
    // Field size check
    static_assert(sizeof(::Photon::Voice::Unity::Recorder*) == 0x8);
    // public System.Boolean StartWhenDeviceChange
    // Size: 0x1
    // Offset: 0x58
    bool StartWhenDeviceChange;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean HandleDeviceChange
    // Size: 0x1
    // Offset: 0x59
    bool HandleDeviceChange;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean HandleConfigChange
    // Size: 0x1
    // Offset: 0x5A
    bool HandleConfigChange;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean UseNativePluginChangeNotifier
    // Size: 0x1
    // Offset: 0x5B
    bool UseNativePluginChangeNotifier;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean UseOnAudioConfigurationChanged
    // Size: 0x1
    // Offset: 0x5C
    bool UseOnAudioConfigurationChanged;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean Android_AlwaysHandleDeviceChange
    // Size: 0x1
    // Offset: 0x5D
    bool Android_AlwaysHandleDeviceChange;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean subscribedToSystemChangesPhoton
    // Size: 0x1
    // Offset: 0x5E
    bool subscribedToSystemChangesPhoton;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean subscribedToSystemChangesUnity
    // Size: 0x1
    // Offset: 0x5F
    bool subscribedToSystemChangesUnity;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private Photon.Voice.IAudioInChangeNotifier photonMicChangeNotifier
    [[deprecated("Use field access instead!")]] ::Photon::Voice::IAudioInChangeNotifier*& dyn_photonMicChangeNotifier();
    // Get instance field reference: private UnityEngine.AudioConfiguration audioConfiguration
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioConfiguration& dyn_audioConfiguration();
    // Get instance field reference: private Photon.Voice.Unity.Recorder recorder
    [[deprecated("Use field access instead!")]] ::Photon::Voice::Unity::Recorder*& dyn_recorder();
    // Get instance field reference: public System.Boolean StartWhenDeviceChange
    [[deprecated("Use field access instead!")]] bool& dyn_StartWhenDeviceChange();
    // Get instance field reference: public System.Boolean HandleDeviceChange
    [[deprecated("Use field access instead!")]] bool& dyn_HandleDeviceChange();
    // Get instance field reference: public System.Boolean HandleConfigChange
    [[deprecated("Use field access instead!")]] bool& dyn_HandleConfigChange();
    // Get instance field reference: public System.Boolean UseNativePluginChangeNotifier
    [[deprecated("Use field access instead!")]] bool& dyn_UseNativePluginChangeNotifier();
    // Get instance field reference: public System.Boolean UseOnAudioConfigurationChanged
    [[deprecated("Use field access instead!")]] bool& dyn_UseOnAudioConfigurationChanged();
    // Get instance field reference: public System.Boolean Android_AlwaysHandleDeviceChange
    [[deprecated("Use field access instead!")]] bool& dyn_Android_AlwaysHandleDeviceChange();
    // Get instance field reference: private System.Boolean subscribedToSystemChangesPhoton
    [[deprecated("Use field access instead!")]] bool& dyn_subscribedToSystemChangesPhoton();
    // Get instance field reference: private System.Boolean subscribedToSystemChangesUnity
    [[deprecated("Use field access instead!")]] bool& dyn_subscribedToSystemChangesUnity();
    // private System.Void OnDestroy()
    // Offset: 0x4A830A0
    void OnDestroy();
    // private System.Void OnDeviceChange()
    // Offset: 0x4A833C8
    void OnDeviceChange();
    // private System.Void SubscribeToSystemChanges()
    // Offset: 0x4A82C88
    void SubscribeToSystemChanges();
    // private System.Void OnAudioConfigChanged(System.Boolean deviceWasChanged)
    // Offset: 0x4A83B04
    void OnAudioConfigChanged(bool deviceWasChanged);
    // private System.Void UnsubscribeFromSystemChanges()
    // Offset: 0x4A830A4
    void UnsubscribeFromSystemChanges();
    // protected override System.Void Awake()
    // Offset: 0x4A82A98
    // Implemented from: Photon.Voice.Unity.VoiceComponent
    // Base method: System.Void VoiceComponent::Awake()
    void Awake();
    // public System.Void .ctor()
    // Offset: 0x4A845A8
    // Implemented from: Photon.Voice.Unity.VoiceComponent
    // Base method: System.Void VoiceComponent::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AudioChangesHandler* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::Unity::AudioChangesHandler::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AudioChangesHandler*, creationType>()));
    }
  }; // Photon.Voice.Unity.AudioChangesHandler
  #pragma pack(pop)
  static check_size<sizeof(AudioChangesHandler), 95 + sizeof(bool)> __Photon_Voice_Unity_AudioChangesHandlerSizeCheck;
  static_assert(sizeof(AudioChangesHandler) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Voice::Unity::AudioChangesHandler::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::AudioChangesHandler::*)()>(&Photon::Voice::Unity::AudioChangesHandler::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::AudioChangesHandler*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::AudioChangesHandler::OnDeviceChange
// Il2CppName: OnDeviceChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::AudioChangesHandler::*)()>(&Photon::Voice::Unity::AudioChangesHandler::OnDeviceChange)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::AudioChangesHandler*), "OnDeviceChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::AudioChangesHandler::SubscribeToSystemChanges
// Il2CppName: SubscribeToSystemChanges
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::AudioChangesHandler::*)()>(&Photon::Voice::Unity::AudioChangesHandler::SubscribeToSystemChanges)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::AudioChangesHandler*), "SubscribeToSystemChanges", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::AudioChangesHandler::OnAudioConfigChanged
// Il2CppName: OnAudioConfigChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::AudioChangesHandler::*)(bool)>(&Photon::Voice::Unity::AudioChangesHandler::OnAudioConfigChanged)> {
  static const MethodInfo* get() {
    static auto* deviceWasChanged = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::AudioChangesHandler*), "OnAudioConfigChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{deviceWasChanged});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::AudioChangesHandler::UnsubscribeFromSystemChanges
// Il2CppName: UnsubscribeFromSystemChanges
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::AudioChangesHandler::*)()>(&Photon::Voice::Unity::AudioChangesHandler::UnsubscribeFromSystemChanges)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::AudioChangesHandler*), "UnsubscribeFromSystemChanges", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::AudioChangesHandler::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::AudioChangesHandler::*)()>(&Photon::Voice::Unity::AudioChangesHandler::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::AudioChangesHandler*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::AudioChangesHandler::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
