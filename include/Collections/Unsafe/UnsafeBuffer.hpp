// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Type namespace: Collections.Unsafe
namespace Collections::Unsafe {
  // Forward declaring type: UnsafeBuffer
  struct UnsafeBuffer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Collections::Unsafe::UnsafeBuffer, "Collections.Unsafe", "UnsafeBuffer");
// Type namespace: Collections.Unsafe
namespace Collections::Unsafe {
  // Size: 0x14
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Collections.Unsafe.UnsafeBuffer
  // [TokenAttribute] Offset: FFFFFFFF
  struct UnsafeBuffer/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Void* Ptr
    // Size: 0x8
    // Offset: 0x0
    void* Ptr;
    // Field size check
    static_assert(sizeof(void*) == 0x8);
    // public System.Int32 Length
    // Size: 0x4
    // Offset: 0x8
    int Length;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 Stride
    // Size: 0x4
    // Offset: 0xC
    int Stride;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 Dynamic
    // Size: 0x4
    // Offset: 0x10
    int Dynamic;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: UnsafeBuffer
    constexpr UnsafeBuffer(void* Ptr_ = {}, int Length_ = {}, int Stride_ = {}, int Dynamic_ = {}) noexcept : Ptr{Ptr_}, Length{Length_}, Stride{Stride_}, Dynamic{Dynamic_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Void* Ptr
    [[deprecated("Use field access instead!")]] void*& dyn_Ptr();
    // Get instance field reference: public System.Int32 Length
    [[deprecated("Use field access instead!")]] int& dyn_Length();
    // Get instance field reference: public System.Int32 Stride
    [[deprecated("Use field access instead!")]] int& dyn_Stride();
    // Get instance field reference: public System.Int32 Dynamic
    [[deprecated("Use field access instead!")]] int& dyn_Dynamic();
    // static public System.Void InitFixed(Collections.Unsafe.UnsafeBuffer* buffer, System.Void* ptr, System.Int32 length, System.Int32 stride)
    // Offset: 0x2AD2ED8
    static void InitFixed(::Collections::Unsafe::UnsafeBuffer* buffer, void* ptr, int length, int stride);
    // static public System.Void* Element(System.Void* bufferPtr, System.Int32 index, System.Int32 stride)
    // Offset: 0x2AD2EF8
    static void* Element(void* bufferPtr, int index, int stride);
  }; // Collections.Unsafe.UnsafeBuffer
  #pragma pack(pop)
  static check_size<sizeof(UnsafeBuffer), 16 + sizeof(int)> __Collections_Unsafe_UnsafeBufferSizeCheck;
  static_assert(sizeof(UnsafeBuffer) == 0x14);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Collections::Unsafe::UnsafeBuffer::InitFixed
// Il2CppName: InitFixed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Collections::Unsafe::UnsafeBuffer*, void*, int, int)>(&Collections::Unsafe::UnsafeBuffer::InitFixed)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Collections.Unsafe", "UnsafeBuffer"))->byval_arg;
    static auto* ptr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* stride = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Collections::Unsafe::UnsafeBuffer), "InitFixed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, ptr, length, stride});
  }
};
// Writing MetadataGetter for method: Collections::Unsafe::UnsafeBuffer::Element
// Il2CppName: Element
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void* (*)(void*, int, int)>(&Collections::Unsafe::UnsafeBuffer::Element)> {
  static const MethodInfo* get() {
    static auto* bufferPtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* stride = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Collections::Unsafe::UnsafeBuffer), "Element", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bufferPtr, index, stride});
  }
};
