// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Collections.Unsafe.UnsafeBuffer
#include "Collections/Unsafe/UnsafeBuffer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: Collections.Unsafe
namespace Collections::Unsafe {
  // Forward declaring type: UnsafeRingBuffer
  struct UnsafeRingBuffer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Collections::Unsafe::UnsafeRingBuffer, "Collections.Unsafe", "UnsafeRingBuffer");
// Type namespace: Collections.Unsafe
namespace Collections::Unsafe {
  // Size: 0x28
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Collections.Unsafe.UnsafeRingBuffer
  // [TokenAttribute] Offset: FFFFFFFF
  struct UnsafeRingBuffer/*, public ::System::ValueType*/ {
    public:
    public:
    // private Collections.Unsafe.UnsafeBuffer _items
    // Size: 0x14
    // Offset: 0x0
    ::Collections::Unsafe::UnsafeBuffer items;
    // Field size check
    static_assert(sizeof(::Collections::Unsafe::UnsafeBuffer) == 0x14);
    // Padding between fields: items and: head
    char __padding0[0x4] = {};
    // private System.Int32 _head
    // Size: 0x4
    // Offset: 0x18
    int head;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _tail
    // Size: 0x4
    // Offset: 0x1C
    int tail;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _count
    // Size: 0x4
    // Offset: 0x20
    int count;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _overwrite
    // Size: 0x4
    // Offset: 0x24
    int overwrite;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: UnsafeRingBuffer
    constexpr UnsafeRingBuffer(::Collections::Unsafe::UnsafeBuffer items_ = {}, int head_ = {}, int tail_ = {}, int count_ = {}, int overwrite_ = {}) noexcept : items{items_}, head{head_}, tail{tail_}, count{count_}, overwrite{overwrite_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private Collections.Unsafe.UnsafeBuffer _items
    [[deprecated("Use field access instead!")]] ::Collections::Unsafe::UnsafeBuffer& dyn__items();
    // Get instance field reference: private System.Int32 _head
    [[deprecated("Use field access instead!")]] int& dyn__head();
    // Get instance field reference: private System.Int32 _tail
    [[deprecated("Use field access instead!")]] int& dyn__tail();
    // Get instance field reference: private System.Int32 _count
    [[deprecated("Use field access instead!")]] int& dyn__count();
    // Get instance field reference: private System.Int32 _overwrite
    [[deprecated("Use field access instead!")]] int& dyn__overwrite();
    // static public Collections.Unsafe.UnsafeRingBuffer* Allocate(System.Int32 capacity, System.Boolean overwrite)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::Collections::Unsafe::UnsafeRingBuffer* Allocate(int capacity, bool overwrite) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Collections::Unsafe::UnsafeRingBuffer::Allocate");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Collections.Unsafe", "UnsafeRingBuffer", "Allocate", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(capacity), ::il2cpp_utils::ExtractType(overwrite)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::Collections::Unsafe::UnsafeRingBuffer*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, capacity, overwrite);
    }
    // static public Collections.Unsafe.UnsafeRingBuffer* Allocate(System.Int32 capacity, System.Int32 stride, System.Boolean overwrite)
    // Offset: 0x2AD2F04
    static ::Collections::Unsafe::UnsafeRingBuffer* Allocate(int capacity, int stride, bool overwrite);
    // static public System.Void Free(Collections.Unsafe.UnsafeRingBuffer* ring)
    // Offset: 0x2AD311C
    static void Free(::Collections::Unsafe::UnsafeRingBuffer* ring);
    // static public System.Int32 Capacity(Collections.Unsafe.UnsafeRingBuffer* ring)
    // Offset: 0x2AD3140
    static int Capacity(::Collections::Unsafe::UnsafeRingBuffer* ring);
    // static public System.Int32 Count(Collections.Unsafe.UnsafeRingBuffer* ring)
    // Offset: 0x2AD3158
    static int Count(::Collections::Unsafe::UnsafeRingBuffer* ring);
    // static public System.Void Clear(Collections.Unsafe.UnsafeRingBuffer* ring)
    // Offset: 0x2AD3170
    static void Clear(::Collections::Unsafe::UnsafeRingBuffer* ring);
    // static public T Get(Collections.Unsafe.UnsafeRingBuffer* ring, System.Int32 index)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T Get(::Collections::Unsafe::UnsafeRingBuffer* ring, int index) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Collections::Unsafe::UnsafeRingBuffer::Get");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Collections.Unsafe", "UnsafeRingBuffer", "Get", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ring), ::il2cpp_utils::ExtractType(index)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, ring, index);
    }
    // static public System.Boolean Push(Collections.Unsafe.UnsafeRingBuffer* ring, T item)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static bool Push(::Collections::Unsafe::UnsafeRingBuffer* ring, T item) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Collections::Unsafe::UnsafeRingBuffer::Push");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Collections.Unsafe", "UnsafeRingBuffer", "Push", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ring), ::il2cpp_utils::ExtractType(item)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, ring, item);
    }
  }; // Collections.Unsafe.UnsafeRingBuffer
  #pragma pack(pop)
  static check_size<sizeof(UnsafeRingBuffer), 36 + sizeof(int)> __Collections_Unsafe_UnsafeRingBufferSizeCheck;
  static_assert(sizeof(UnsafeRingBuffer) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Collections::Unsafe::UnsafeRingBuffer::Allocate
// Il2CppName: Allocate
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Collections::Unsafe::UnsafeRingBuffer::Allocate
// Il2CppName: Allocate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Collections::Unsafe::UnsafeRingBuffer* (*)(int, int, bool)>(&Collections::Unsafe::UnsafeRingBuffer::Allocate)> {
  static const MethodInfo* get() {
    static auto* capacity = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* stride = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* overwrite = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Collections::Unsafe::UnsafeRingBuffer), "Allocate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{capacity, stride, overwrite});
  }
};
// Writing MetadataGetter for method: Collections::Unsafe::UnsafeRingBuffer::Free
// Il2CppName: Free
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Collections::Unsafe::UnsafeRingBuffer*)>(&Collections::Unsafe::UnsafeRingBuffer::Free)> {
  static const MethodInfo* get() {
    static auto* ring = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Collections.Unsafe", "UnsafeRingBuffer"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Collections::Unsafe::UnsafeRingBuffer), "Free", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ring});
  }
};
// Writing MetadataGetter for method: Collections::Unsafe::UnsafeRingBuffer::Capacity
// Il2CppName: Capacity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Collections::Unsafe::UnsafeRingBuffer*)>(&Collections::Unsafe::UnsafeRingBuffer::Capacity)> {
  static const MethodInfo* get() {
    static auto* ring = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Collections.Unsafe", "UnsafeRingBuffer"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Collections::Unsafe::UnsafeRingBuffer), "Capacity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ring});
  }
};
// Writing MetadataGetter for method: Collections::Unsafe::UnsafeRingBuffer::Count
// Il2CppName: Count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Collections::Unsafe::UnsafeRingBuffer*)>(&Collections::Unsafe::UnsafeRingBuffer::Count)> {
  static const MethodInfo* get() {
    static auto* ring = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Collections.Unsafe", "UnsafeRingBuffer"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Collections::Unsafe::UnsafeRingBuffer), "Count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ring});
  }
};
// Writing MetadataGetter for method: Collections::Unsafe::UnsafeRingBuffer::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Collections::Unsafe::UnsafeRingBuffer*)>(&Collections::Unsafe::UnsafeRingBuffer::Clear)> {
  static const MethodInfo* get() {
    static auto* ring = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("Collections.Unsafe", "UnsafeRingBuffer"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Collections::Unsafe::UnsafeRingBuffer), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ring});
  }
};
// Writing MetadataGetter for method: Collections::Unsafe::UnsafeRingBuffer::Get
// Il2CppName: Get
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Collections::Unsafe::UnsafeRingBuffer::Push
// Il2CppName: Push
// Cannot write MetadataGetter for generic methods!
