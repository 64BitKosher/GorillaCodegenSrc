// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: CjLib.DebugUtil/Style
#include "CjLib/DebugUtil_Style.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: CjLib
namespace CjLib {
  // Forward declaring type: DrawBase
  class DrawBase;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::CjLib::DrawBase);
DEFINE_IL2CPP_ARG_TYPE(::CjLib::DrawBase*, "CjLib", "DrawBase");
// Type namespace: CjLib
namespace CjLib {
  // Size: 0x49
  #pragma pack(push, 1)
  // Autogenerated type: CjLib.DrawBase
  // [TokenAttribute] Offset: FFFFFFFF
  class DrawBase : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.Color WireframeColor
    // Size: 0x10
    // Offset: 0x20
    ::UnityEngine::Color WireframeColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public UnityEngine.Color ShadededColor
    // Size: 0x10
    // Offset: 0x30
    ::UnityEngine::Color ShadededColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public System.Boolean Wireframe
    // Size: 0x1
    // Offset: 0x40
    bool Wireframe;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: Wireframe and: Style
    char __padding2[0x3] = {};
    // public CjLib.DebugUtil/Style Style
    // Size: 0x4
    // Offset: 0x44
    ::CjLib::DebugUtil::Style Style;
    // Field size check
    static_assert(sizeof(::CjLib::DebugUtil::Style) == 0x4);
    // public System.Boolean DepthTest
    // Size: 0x1
    // Offset: 0x48
    bool DepthTest;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: public UnityEngine.Color WireframeColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_WireframeColor();
    // Get instance field reference: public UnityEngine.Color ShadededColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_ShadededColor();
    // Get instance field reference: public System.Boolean Wireframe
    [[deprecated("Use field access instead!")]] bool& dyn_Wireframe();
    // Get instance field reference: public CjLib.DebugUtil/Style Style
    [[deprecated("Use field access instead!")]] ::CjLib::DebugUtil::Style& dyn_Style();
    // Get instance field reference: public System.Boolean DepthTest
    [[deprecated("Use field access instead!")]] bool& dyn_DepthTest();
    // private System.Void Update()
    // Offset: 0x28CFEFC
    void Update();
    // protected System.Void Draw(UnityEngine.Color color, CjLib.DebugUtil/Style style, System.Boolean depthTest)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Draw(::UnityEngine::Color color, ::CjLib::DebugUtil::Style style, bool depthTest);
    // protected System.Void .ctor()
    // Offset: 0x28CF73C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DrawBase* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::CjLib::DrawBase::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DrawBase*, creationType>()));
    }
  }; // CjLib.DrawBase
  #pragma pack(pop)
  static check_size<sizeof(DrawBase), 72 + sizeof(bool)> __CjLib_DrawBaseSizeCheck;
  static_assert(sizeof(DrawBase) == 0x49);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: CjLib::DrawBase::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CjLib::DrawBase::*)()>(&CjLib::DrawBase::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CjLib::DrawBase*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CjLib::DrawBase::Draw
// Il2CppName: Draw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CjLib::DrawBase::*)(::UnityEngine::Color, ::CjLib::DebugUtil::Style, bool)>(&CjLib::DrawBase::Draw)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* style = &::il2cpp_utils::GetClassFromName("CjLib", "DebugUtil/Style")->byval_arg;
    static auto* depthTest = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CjLib::DrawBase*), "Draw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color, style, depthTest});
  }
};
// Writing MetadataGetter for method: CjLib::DrawBase::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
