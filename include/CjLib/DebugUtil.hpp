// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: CjLib
namespace CjLib {
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: MaterialPropertyBlock
  class MaterialPropertyBlock;
  // Forward declaring type: Quaternion
  struct Quaternion;
  // Forward declaring type: Color
  struct Color;
  // Forward declaring type: Vector2
  struct Vector2;
}
// Completed forward declares
// Type namespace: CjLib
namespace CjLib {
  // Forward declaring type: DebugUtil
  class DebugUtil;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::CjLib::DebugUtil);
DEFINE_IL2CPP_ARG_TYPE(::CjLib::DebugUtil*, "CjLib", "DebugUtil");
// Type namespace: CjLib
namespace CjLib {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: CjLib.DebugUtil
  // [TokenAttribute] Offset: FFFFFFFF
  class DebugUtil : public ::Il2CppObject {
    public:
    // Nested type: ::CjLib::DebugUtil::Style
    struct Style;
    // Get static field: static private System.Single s_wireframeZBias
    static float _get_s_wireframeZBias();
    // Set static field: static private System.Single s_wireframeZBias
    static void _set_s_wireframeZBias(float value);
    // static field const value: static private System.Int32 kNormalFlag
    static constexpr const int kNormalFlag = 1;
    // Get static field: static private System.Int32 kNormalFlag
    static int _get_kNormalFlag();
    // Set static field: static private System.Int32 kNormalFlag
    static void _set_kNormalFlag(int value);
    // static field const value: static private System.Int32 kCapShiftScaleFlag
    static constexpr const int kCapShiftScaleFlag = 2;
    // Get static field: static private System.Int32 kCapShiftScaleFlag
    static int _get_kCapShiftScaleFlag();
    // Set static field: static private System.Int32 kCapShiftScaleFlag
    static void _set_kCapShiftScaleFlag(int value);
    // static field const value: static private System.Int32 kDepthTestFlag
    static constexpr const int kDepthTestFlag = 4;
    // Get static field: static private System.Int32 kDepthTestFlag
    static int _get_kDepthTestFlag();
    // Set static field: static private System.Int32 kDepthTestFlag
    static void _set_kDepthTestFlag(int value);
    // Get static field: static private System.Collections.Generic.Dictionary`2<System.Int32,UnityEngine.Material> s_materialPool
    static ::System::Collections::Generic::Dictionary_2<int, ::UnityEngine::Material*>* _get_s_materialPool();
    // Set static field: static private System.Collections.Generic.Dictionary`2<System.Int32,UnityEngine.Material> s_materialPool
    static void _set_s_materialPool(::System::Collections::Generic::Dictionary_2<int, ::UnityEngine::Material*>* value);
    // Get static field: static private UnityEngine.MaterialPropertyBlock s_materialProperties
    static ::UnityEngine::MaterialPropertyBlock* _get_s_materialProperties();
    // Set static field: static private UnityEngine.MaterialPropertyBlock s_materialProperties
    static void _set_s_materialProperties(::UnityEngine::MaterialPropertyBlock* value);
    // static private UnityEngine.Material GetMaterial(CjLib.DebugUtil/Style style, System.Boolean depthTest, System.Boolean capShiftScale)
    // Offset: 0x28D0F3C
    static ::UnityEngine::Material* GetMaterial(::CjLib::DebugUtil::Style style, bool depthTest, bool capShiftScale);
    // static private UnityEngine.MaterialPropertyBlock GetMaterialPropertyBlock()
    // Offset: 0x28D126C
    static ::UnityEngine::MaterialPropertyBlock* GetMaterialPropertyBlock();
    // static public System.Void DrawLine(UnityEngine.Vector3 v0, UnityEngine.Vector3 v1, UnityEngine.Color color, System.Boolean depthTest)
    // Offset: 0x28D0890
    static void DrawLine(::UnityEngine::Vector3 v0, ::UnityEngine::Vector3 v1, ::UnityEngine::Color color, bool depthTest);
    // static public System.Void DrawLines(UnityEngine.Vector3[] aVert, UnityEngine.Color color, System.Boolean depthTest)
    // Offset: 0x28D14C4
    static void DrawLines(::ArrayW<::UnityEngine::Vector3> aVert, ::UnityEngine::Color color, bool depthTest);
    // static public System.Void DrawLineStrip(UnityEngine.Vector3[] aVert, UnityEngine.Color color, System.Boolean depthTest)
    // Offset: 0x28D18A0
    static void DrawLineStrip(::ArrayW<::UnityEngine::Vector3> aVert, ::UnityEngine::Color color, bool depthTest);
    // static public System.Void DrawArc(UnityEngine.Vector3 center, UnityEngine.Vector3 from, UnityEngine.Vector3 normal, System.Single angle, System.Single radius, System.Int32 numSegments, UnityEngine.Color color, System.Boolean depthTest)
    // Offset: 0x28CF430
    static void DrawArc(::UnityEngine::Vector3 center, ::UnityEngine::Vector3 from, ::UnityEngine::Vector3 normal, float angle, float radius, int numSegments, ::UnityEngine::Color color, bool depthTest);
    // static public System.Void DrawLocator(UnityEngine.Vector3 position, UnityEngine.Vector3 right, UnityEngine.Vector3 up, UnityEngine.Vector3 forward, UnityEngine.Color rightColor, UnityEngine.Color upColor, UnityEngine.Color forwardColor, System.Single size)
    // Offset: 0x28D1C7C
    static void DrawLocator(::UnityEngine::Vector3 position, ::UnityEngine::Vector3 right, ::UnityEngine::Vector3 up, ::UnityEngine::Vector3 forward, ::UnityEngine::Color rightColor, ::UnityEngine::Color upColor, ::UnityEngine::Color forwardColor, float size);
    // static public System.Void DrawLocator(UnityEngine.Vector3 position, UnityEngine.Vector3 right, UnityEngine.Vector3 up, UnityEngine.Vector3 forward, System.Single size)
    // Offset: 0x28D1E84
    static void DrawLocator(::UnityEngine::Vector3 position, ::UnityEngine::Vector3 right, ::UnityEngine::Vector3 up, ::UnityEngine::Vector3 forward, float size);
    // static public System.Void DrawLocator(UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Color rightColor, UnityEngine.Color upColor, UnityEngine.Color forwardColor, System.Single size)
    // Offset: 0x28D1F94
    static void DrawLocator(::UnityEngine::Vector3 position, ::UnityEngine::Quaternion rotation, ::UnityEngine::Color rightColor, ::UnityEngine::Color upColor, ::UnityEngine::Color forwardColor, float size);
    // static public System.Void DrawLocator(UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, System.Single size)
    // Offset: 0x28D21D8
    static void DrawLocator(::UnityEngine::Vector3 position, ::UnityEngine::Quaternion rotation, float size);
    // static public System.Void DrawBox(UnityEngine.Vector3 center, UnityEngine.Quaternion rotation, UnityEngine.Vector3 dimensions, UnityEngine.Color color, System.Boolean depthTest, CjLib.DebugUtil/Style style)
    // Offset: 0x28D22A8
    static void DrawBox(::UnityEngine::Vector3 center, ::UnityEngine::Quaternion rotation, ::UnityEngine::Vector3 dimensions, ::UnityEngine::Color color, bool depthTest, ::CjLib::DebugUtil::Style style);
    // static public System.Void DrawRect(UnityEngine.Vector3 center, UnityEngine.Quaternion rotation, UnityEngine.Vector2 dimensions, UnityEngine.Color color, System.Boolean depthTest, CjLib.DebugUtil/Style style)
    // Offset: 0x28D3874
    static void DrawRect(::UnityEngine::Vector3 center, ::UnityEngine::Quaternion rotation, ::UnityEngine::Vector2 dimensions, ::UnityEngine::Color color, bool depthTest, ::CjLib::DebugUtil::Style style);
    // static public System.Void DrawRect2D(UnityEngine.Vector3 center, System.Single rotationDeg, UnityEngine.Vector2 dimensions, UnityEngine.Color color, System.Boolean depthTest, CjLib.DebugUtil/Style style)
    // Offset: 0x28D42EC
    static void DrawRect2D(::UnityEngine::Vector3 center, float rotationDeg, ::UnityEngine::Vector2 dimensions, ::UnityEngine::Color color, bool depthTest, ::CjLib::DebugUtil::Style style);
    // static public System.Void DrawCircle(UnityEngine.Vector3 center, UnityEngine.Quaternion rotation, System.Single radius, System.Int32 numSegments, UnityEngine.Color color, System.Boolean depthTest, CjLib.DebugUtil/Style style)
    // Offset: 0x28D44E4
    static void DrawCircle(::UnityEngine::Vector3 center, ::UnityEngine::Quaternion rotation, float radius, int numSegments, ::UnityEngine::Color color, bool depthTest, ::CjLib::DebugUtil::Style style);
    // static public System.Void DrawCircle(UnityEngine.Vector3 center, UnityEngine.Vector3 normal, System.Single radius, System.Int32 numSegments, UnityEngine.Color color, System.Boolean depthTest, CjLib.DebugUtil/Style style)
    // Offset: 0x28D0478
    static void DrawCircle(::UnityEngine::Vector3 center, ::UnityEngine::Vector3 normal, float radius, int numSegments, ::UnityEngine::Color color, bool depthTest, ::CjLib::DebugUtil::Style style);
    // static public System.Void DrawCircle2D(UnityEngine.Vector3 center, System.Single radius, System.Int32 numSegments, UnityEngine.Color color, System.Boolean depthTest, CjLib.DebugUtil/Style style)
    // Offset: 0x28D5838
    static void DrawCircle2D(::UnityEngine::Vector3 center, float radius, int numSegments, ::UnityEngine::Color color, bool depthTest, ::CjLib::DebugUtil::Style style);
    // static public System.Void DrawCylinder(UnityEngine.Vector3 center, UnityEngine.Quaternion rotation, System.Single height, System.Single radius, System.Int32 numSegments, UnityEngine.Color color, System.Boolean depthTest, CjLib.DebugUtil/Style style)
    // Offset: 0x28D594C
    static void DrawCylinder(::UnityEngine::Vector3 center, ::UnityEngine::Quaternion rotation, float height, float radius, int numSegments, ::UnityEngine::Color color, bool depthTest, ::CjLib::DebugUtil::Style style);
    // static public System.Void DrawCylinder(UnityEngine.Vector3 point0, UnityEngine.Vector3 point1, System.Single radius, System.Int32 numSegments, UnityEngine.Color color, System.Boolean depthTest, CjLib.DebugUtil/Style style)
    // Offset: 0x28D7890
    static void DrawCylinder(::UnityEngine::Vector3 point0, ::UnityEngine::Vector3 point1, float radius, int numSegments, ::UnityEngine::Color color, bool depthTest, ::CjLib::DebugUtil::Style style);
    // static public System.Void DrawSphere(UnityEngine.Vector3 center, UnityEngine.Quaternion rotation, System.Single radius, System.Int32 latSegments, System.Int32 longSegments, UnityEngine.Color color, System.Boolean depthTest, CjLib.DebugUtil/Style style)
    // Offset: 0x28D7D34
    static void DrawSphere(::UnityEngine::Vector3 center, ::UnityEngine::Quaternion rotation, float radius, int latSegments, int longSegments, ::UnityEngine::Color color, bool depthTest, ::CjLib::DebugUtil::Style style);
    // static public System.Void DrawSphere(UnityEngine.Vector3 center, System.Single radius, System.Int32 latSegments, System.Int32 longSegments, UnityEngine.Color color, System.Boolean depthTest, CjLib.DebugUtil/Style style)
    // Offset: 0x28DA630
    static void DrawSphere(::UnityEngine::Vector3 center, float radius, int latSegments, int longSegments, ::UnityEngine::Color color, bool depthTest, ::CjLib::DebugUtil::Style style);
    // static public System.Void DrawSphereTripleCircles(UnityEngine.Vector3 center, UnityEngine.Quaternion rotation, System.Single radius, System.Int32 numSegments, UnityEngine.Color color, System.Boolean depthTest, CjLib.DebugUtil/Style style)
    // Offset: 0x28DA750
    static void DrawSphereTripleCircles(::UnityEngine::Vector3 center, ::UnityEngine::Quaternion rotation, float radius, int numSegments, ::UnityEngine::Color color, bool depthTest, ::CjLib::DebugUtil::Style style);
    // static public System.Void DrawSphereTripleCircles(UnityEngine.Vector3 center, System.Single radius, System.Int32 numSegments, UnityEngine.Color color, System.Boolean depthTest, CjLib.DebugUtil/Style style)
    // Offset: 0x28DA9A4
    static void DrawSphereTripleCircles(::UnityEngine::Vector3 center, float radius, int numSegments, ::UnityEngine::Color color, bool depthTest, ::CjLib::DebugUtil::Style style);
    // static public System.Void DrawCapsule(UnityEngine.Vector3 center, UnityEngine.Quaternion rotation, System.Single height, System.Single radius, System.Int32 latSegmentsPerCap, System.Int32 longSegmentsPerCap, UnityEngine.Color color, System.Boolean depthTest, CjLib.DebugUtil/Style style)
    // Offset: 0x28DAAB8
    static void DrawCapsule(::UnityEngine::Vector3 center, ::UnityEngine::Quaternion rotation, float height, float radius, int latSegmentsPerCap, int longSegmentsPerCap, ::UnityEngine::Color color, bool depthTest, ::CjLib::DebugUtil::Style style);
    // static public System.Void DrawCapsule(UnityEngine.Vector3 point0, UnityEngine.Vector3 point1, System.Single radius, System.Int32 latSegmentsPerCap, System.Int32 longSegmentsPerCap, UnityEngine.Color color, System.Boolean depthTest, CjLib.DebugUtil/Style style)
    // Offset: 0x28DDD10
    static void DrawCapsule(::UnityEngine::Vector3 point0, ::UnityEngine::Vector3 point1, float radius, int latSegmentsPerCap, int longSegmentsPerCap, ::UnityEngine::Color color, bool depthTest, ::CjLib::DebugUtil::Style style);
    // static public System.Void DrawCapsule2D(UnityEngine.Vector3 center, System.Single rotationDeg, System.Single height, System.Single radius, System.Int32 capSegments, UnityEngine.Color color, System.Boolean depthTest, CjLib.DebugUtil/Style style)
    // Offset: 0x28DE1BC
    static void DrawCapsule2D(::UnityEngine::Vector3 center, float rotationDeg, float height, float radius, int capSegments, ::UnityEngine::Color color, bool depthTest, ::CjLib::DebugUtil::Style style);
    // static public System.Void DrawCone(UnityEngine.Vector3 baseCenter, UnityEngine.Quaternion rotation, System.Single height, System.Single radius, System.Int32 numSegments, UnityEngine.Color color, System.Boolean depthTest, CjLib.DebugUtil/Style style)
    // Offset: 0x28DF4F4
    static void DrawCone(::UnityEngine::Vector3 baseCenter, ::UnityEngine::Quaternion rotation, float height, float radius, int numSegments, ::UnityEngine::Color color, bool depthTest, ::CjLib::DebugUtil::Style style);
    // static public System.Void DrawCone(UnityEngine.Vector3 baseCenter, UnityEngine.Vector3 top, System.Single radius, System.Int32 numSegments, UnityEngine.Color color, System.Boolean depthTest, CjLib.DebugUtil/Style style)
    // Offset: 0x28E0F0C
    static void DrawCone(::UnityEngine::Vector3 baseCenter, ::UnityEngine::Vector3 top, float radius, int numSegments, ::UnityEngine::Color color, bool depthTest, ::CjLib::DebugUtil::Style style);
    // static public System.Void DrawArrow(UnityEngine.Vector3 from, UnityEngine.Vector3 to, System.Single coneRadius, System.Single coneHeight, System.Int32 numSegments, System.Single stemThickness, UnityEngine.Color color, System.Boolean depthTest, CjLib.DebugUtil/Style style)
    // Offset: 0x28CF910
    static void DrawArrow(::UnityEngine::Vector3 from, ::UnityEngine::Vector3 to, float coneRadius, float coneHeight, int numSegments, float stemThickness, ::UnityEngine::Color color, bool depthTest, ::CjLib::DebugUtil::Style style);
    // static public System.Void DrawArrow(UnityEngine.Vector3 from, UnityEngine.Vector3 to, System.Single size, UnityEngine.Color color, System.Boolean depthTest, CjLib.DebugUtil/Style style)
    // Offset: 0x28E12C4
    static void DrawArrow(::UnityEngine::Vector3 from, ::UnityEngine::Vector3 to, float size, ::UnityEngine::Color color, bool depthTest, ::CjLib::DebugUtil::Style style);
    // public System.Void .ctor()
    // Offset: 0x28E13D4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DebugUtil* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::CjLib::DebugUtil::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DebugUtil*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x28E13DC
    static void _cctor();
  }; // CjLib.DebugUtil
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: CjLib::DebugUtil::GetMaterial
// Il2CppName: GetMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Material* (*)(::CjLib::DebugUtil::Style, bool, bool)>(&CjLib::DebugUtil::GetMaterial)> {
  static const MethodInfo* get() {
    static auto* style = &::il2cpp_utils::GetClassFromName("CjLib", "DebugUtil/Style")->byval_arg;
    static auto* depthTest = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* capShiftScale = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CjLib::DebugUtil*), "GetMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{style, depthTest, capShiftScale});
  }
};
// Writing MetadataGetter for method: CjLib::DebugUtil::GetMaterialPropertyBlock
// Il2CppName: GetMaterialPropertyBlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::MaterialPropertyBlock* (*)()>(&CjLib::DebugUtil::GetMaterialPropertyBlock)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CjLib::DebugUtil*), "GetMaterialPropertyBlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CjLib::DebugUtil::DrawLine
// Il2CppName: DrawLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Color, bool)>(&CjLib::DebugUtil::DrawLine)> {
  static const MethodInfo* get() {
    static auto* v0 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* v1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* depthTest = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CjLib::DebugUtil*), "DrawLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v0, v1, color, depthTest});
  }
};
// Writing MetadataGetter for method: CjLib::DebugUtil::DrawLines
// Il2CppName: DrawLines
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<::UnityEngine::Vector3>, ::UnityEngine::Color, bool)>(&CjLib::DebugUtil::DrawLines)> {
  static const MethodInfo* get() {
    static auto* aVert = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* depthTest = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CjLib::DebugUtil*), "DrawLines", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{aVert, color, depthTest});
  }
};
// Writing MetadataGetter for method: CjLib::DebugUtil::DrawLineStrip
// Il2CppName: DrawLineStrip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<::UnityEngine::Vector3>, ::UnityEngine::Color, bool)>(&CjLib::DebugUtil::DrawLineStrip)> {
  static const MethodInfo* get() {
    static auto* aVert = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* depthTest = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CjLib::DebugUtil*), "DrawLineStrip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{aVert, color, depthTest});
  }
};
// Writing MetadataGetter for method: CjLib::DebugUtil::DrawArc
// Il2CppName: DrawArc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, float, float, int, ::UnityEngine::Color, bool)>(&CjLib::DebugUtil::DrawArc)> {
  static const MethodInfo* get() {
    static auto* center = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* from = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* normal = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* angle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* numSegments = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* depthTest = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CjLib::DebugUtil*), "DrawArc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{center, from, normal, angle, radius, numSegments, color, depthTest});
  }
};
// Writing MetadataGetter for method: CjLib::DebugUtil::DrawLocator
// Il2CppName: DrawLocator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Color, ::UnityEngine::Color, ::UnityEngine::Color, float)>(&CjLib::DebugUtil::DrawLocator)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* right = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* up = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* forward = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rightColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* upColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* forwardColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CjLib::DebugUtil*), "DrawLocator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, right, up, forward, rightColor, upColor, forwardColor, size});
  }
};
// Writing MetadataGetter for method: CjLib::DebugUtil::DrawLocator
// Il2CppName: DrawLocator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, float)>(&CjLib::DebugUtil::DrawLocator)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* right = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* up = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* forward = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CjLib::DebugUtil*), "DrawLocator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, right, up, forward, size});
  }
};
// Writing MetadataGetter for method: CjLib::DebugUtil::DrawLocator
// Il2CppName: DrawLocator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion, ::UnityEngine::Color, ::UnityEngine::Color, ::UnityEngine::Color, float)>(&CjLib::DebugUtil::DrawLocator)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* rightColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* upColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* forwardColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CjLib::DebugUtil*), "DrawLocator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, rotation, rightColor, upColor, forwardColor, size});
  }
};
// Writing MetadataGetter for method: CjLib::DebugUtil::DrawLocator
// Il2CppName: DrawLocator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion, float)>(&CjLib::DebugUtil::DrawLocator)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CjLib::DebugUtil*), "DrawLocator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, rotation, size});
  }
};
// Writing MetadataGetter for method: CjLib::DebugUtil::DrawBox
// Il2CppName: DrawBox
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion, ::UnityEngine::Vector3, ::UnityEngine::Color, bool, ::CjLib::DebugUtil::Style)>(&CjLib::DebugUtil::DrawBox)> {
  static const MethodInfo* get() {
    static auto* center = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* dimensions = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* depthTest = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* style = &::il2cpp_utils::GetClassFromName("CjLib", "DebugUtil/Style")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CjLib::DebugUtil*), "DrawBox", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{center, rotation, dimensions, color, depthTest, style});
  }
};
// Writing MetadataGetter for method: CjLib::DebugUtil::DrawRect
// Il2CppName: DrawRect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion, ::UnityEngine::Vector2, ::UnityEngine::Color, bool, ::CjLib::DebugUtil::Style)>(&CjLib::DebugUtil::DrawRect)> {
  static const MethodInfo* get() {
    static auto* center = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* dimensions = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* depthTest = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* style = &::il2cpp_utils::GetClassFromName("CjLib", "DebugUtil/Style")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CjLib::DebugUtil*), "DrawRect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{center, rotation, dimensions, color, depthTest, style});
  }
};
// Writing MetadataGetter for method: CjLib::DebugUtil::DrawRect2D
// Il2CppName: DrawRect2D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, float, ::UnityEngine::Vector2, ::UnityEngine::Color, bool, ::CjLib::DebugUtil::Style)>(&CjLib::DebugUtil::DrawRect2D)> {
  static const MethodInfo* get() {
    static auto* center = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rotationDeg = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* dimensions = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* depthTest = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* style = &::il2cpp_utils::GetClassFromName("CjLib", "DebugUtil/Style")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CjLib::DebugUtil*), "DrawRect2D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{center, rotationDeg, dimensions, color, depthTest, style});
  }
};
// Writing MetadataGetter for method: CjLib::DebugUtil::DrawCircle
// Il2CppName: DrawCircle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion, float, int, ::UnityEngine::Color, bool, ::CjLib::DebugUtil::Style)>(&CjLib::DebugUtil::DrawCircle)> {
  static const MethodInfo* get() {
    static auto* center = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* numSegments = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* depthTest = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* style = &::il2cpp_utils::GetClassFromName("CjLib", "DebugUtil/Style")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CjLib::DebugUtil*), "DrawCircle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{center, rotation, radius, numSegments, color, depthTest, style});
  }
};
// Writing MetadataGetter for method: CjLib::DebugUtil::DrawCircle
// Il2CppName: DrawCircle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, float, int, ::UnityEngine::Color, bool, ::CjLib::DebugUtil::Style)>(&CjLib::DebugUtil::DrawCircle)> {
  static const MethodInfo* get() {
    static auto* center = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* normal = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* numSegments = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* depthTest = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* style = &::il2cpp_utils::GetClassFromName("CjLib", "DebugUtil/Style")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CjLib::DebugUtil*), "DrawCircle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{center, normal, radius, numSegments, color, depthTest, style});
  }
};
// Writing MetadataGetter for method: CjLib::DebugUtil::DrawCircle2D
// Il2CppName: DrawCircle2D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, float, int, ::UnityEngine::Color, bool, ::CjLib::DebugUtil::Style)>(&CjLib::DebugUtil::DrawCircle2D)> {
  static const MethodInfo* get() {
    static auto* center = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* numSegments = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* depthTest = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* style = &::il2cpp_utils::GetClassFromName("CjLib", "DebugUtil/Style")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CjLib::DebugUtil*), "DrawCircle2D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{center, radius, numSegments, color, depthTest, style});
  }
};
// Writing MetadataGetter for method: CjLib::DebugUtil::DrawCylinder
// Il2CppName: DrawCylinder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion, float, float, int, ::UnityEngine::Color, bool, ::CjLib::DebugUtil::Style)>(&CjLib::DebugUtil::DrawCylinder)> {
  static const MethodInfo* get() {
    static auto* center = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* height = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* numSegments = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* depthTest = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* style = &::il2cpp_utils::GetClassFromName("CjLib", "DebugUtil/Style")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CjLib::DebugUtil*), "DrawCylinder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{center, rotation, height, radius, numSegments, color, depthTest, style});
  }
};
// Writing MetadataGetter for method: CjLib::DebugUtil::DrawCylinder
// Il2CppName: DrawCylinder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, float, int, ::UnityEngine::Color, bool, ::CjLib::DebugUtil::Style)>(&CjLib::DebugUtil::DrawCylinder)> {
  static const MethodInfo* get() {
    static auto* point0 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* point1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* numSegments = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* depthTest = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* style = &::il2cpp_utils::GetClassFromName("CjLib", "DebugUtil/Style")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CjLib::DebugUtil*), "DrawCylinder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point0, point1, radius, numSegments, color, depthTest, style});
  }
};
// Writing MetadataGetter for method: CjLib::DebugUtil::DrawSphere
// Il2CppName: DrawSphere
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion, float, int, int, ::UnityEngine::Color, bool, ::CjLib::DebugUtil::Style)>(&CjLib::DebugUtil::DrawSphere)> {
  static const MethodInfo* get() {
    static auto* center = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* latSegments = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* longSegments = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* depthTest = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* style = &::il2cpp_utils::GetClassFromName("CjLib", "DebugUtil/Style")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CjLib::DebugUtil*), "DrawSphere", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{center, rotation, radius, latSegments, longSegments, color, depthTest, style});
  }
};
// Writing MetadataGetter for method: CjLib::DebugUtil::DrawSphere
// Il2CppName: DrawSphere
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, float, int, int, ::UnityEngine::Color, bool, ::CjLib::DebugUtil::Style)>(&CjLib::DebugUtil::DrawSphere)> {
  static const MethodInfo* get() {
    static auto* center = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* latSegments = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* longSegments = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* depthTest = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* style = &::il2cpp_utils::GetClassFromName("CjLib", "DebugUtil/Style")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CjLib::DebugUtil*), "DrawSphere", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{center, radius, latSegments, longSegments, color, depthTest, style});
  }
};
// Writing MetadataGetter for method: CjLib::DebugUtil::DrawSphereTripleCircles
// Il2CppName: DrawSphereTripleCircles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion, float, int, ::UnityEngine::Color, bool, ::CjLib::DebugUtil::Style)>(&CjLib::DebugUtil::DrawSphereTripleCircles)> {
  static const MethodInfo* get() {
    static auto* center = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* numSegments = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* depthTest = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* style = &::il2cpp_utils::GetClassFromName("CjLib", "DebugUtil/Style")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CjLib::DebugUtil*), "DrawSphereTripleCircles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{center, rotation, radius, numSegments, color, depthTest, style});
  }
};
// Writing MetadataGetter for method: CjLib::DebugUtil::DrawSphereTripleCircles
// Il2CppName: DrawSphereTripleCircles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, float, int, ::UnityEngine::Color, bool, ::CjLib::DebugUtil::Style)>(&CjLib::DebugUtil::DrawSphereTripleCircles)> {
  static const MethodInfo* get() {
    static auto* center = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* numSegments = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* depthTest = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* style = &::il2cpp_utils::GetClassFromName("CjLib", "DebugUtil/Style")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CjLib::DebugUtil*), "DrawSphereTripleCircles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{center, radius, numSegments, color, depthTest, style});
  }
};
// Writing MetadataGetter for method: CjLib::DebugUtil::DrawCapsule
// Il2CppName: DrawCapsule
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion, float, float, int, int, ::UnityEngine::Color, bool, ::CjLib::DebugUtil::Style)>(&CjLib::DebugUtil::DrawCapsule)> {
  static const MethodInfo* get() {
    static auto* center = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* height = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* latSegmentsPerCap = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* longSegmentsPerCap = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* depthTest = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* style = &::il2cpp_utils::GetClassFromName("CjLib", "DebugUtil/Style")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CjLib::DebugUtil*), "DrawCapsule", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{center, rotation, height, radius, latSegmentsPerCap, longSegmentsPerCap, color, depthTest, style});
  }
};
// Writing MetadataGetter for method: CjLib::DebugUtil::DrawCapsule
// Il2CppName: DrawCapsule
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, float, int, int, ::UnityEngine::Color, bool, ::CjLib::DebugUtil::Style)>(&CjLib::DebugUtil::DrawCapsule)> {
  static const MethodInfo* get() {
    static auto* point0 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* point1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* latSegmentsPerCap = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* longSegmentsPerCap = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* depthTest = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* style = &::il2cpp_utils::GetClassFromName("CjLib", "DebugUtil/Style")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CjLib::DebugUtil*), "DrawCapsule", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point0, point1, radius, latSegmentsPerCap, longSegmentsPerCap, color, depthTest, style});
  }
};
// Writing MetadataGetter for method: CjLib::DebugUtil::DrawCapsule2D
// Il2CppName: DrawCapsule2D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, float, float, float, int, ::UnityEngine::Color, bool, ::CjLib::DebugUtil::Style)>(&CjLib::DebugUtil::DrawCapsule2D)> {
  static const MethodInfo* get() {
    static auto* center = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rotationDeg = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* height = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* capSegments = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* depthTest = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* style = &::il2cpp_utils::GetClassFromName("CjLib", "DebugUtil/Style")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CjLib::DebugUtil*), "DrawCapsule2D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{center, rotationDeg, height, radius, capSegments, color, depthTest, style});
  }
};
// Writing MetadataGetter for method: CjLib::DebugUtil::DrawCone
// Il2CppName: DrawCone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion, float, float, int, ::UnityEngine::Color, bool, ::CjLib::DebugUtil::Style)>(&CjLib::DebugUtil::DrawCone)> {
  static const MethodInfo* get() {
    static auto* baseCenter = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* height = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* numSegments = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* depthTest = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* style = &::il2cpp_utils::GetClassFromName("CjLib", "DebugUtil/Style")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CjLib::DebugUtil*), "DrawCone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{baseCenter, rotation, height, radius, numSegments, color, depthTest, style});
  }
};
// Writing MetadataGetter for method: CjLib::DebugUtil::DrawCone
// Il2CppName: DrawCone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, float, int, ::UnityEngine::Color, bool, ::CjLib::DebugUtil::Style)>(&CjLib::DebugUtil::DrawCone)> {
  static const MethodInfo* get() {
    static auto* baseCenter = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* top = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* numSegments = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* depthTest = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* style = &::il2cpp_utils::GetClassFromName("CjLib", "DebugUtil/Style")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CjLib::DebugUtil*), "DrawCone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{baseCenter, top, radius, numSegments, color, depthTest, style});
  }
};
// Writing MetadataGetter for method: CjLib::DebugUtil::DrawArrow
// Il2CppName: DrawArrow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, float, float, int, float, ::UnityEngine::Color, bool, ::CjLib::DebugUtil::Style)>(&CjLib::DebugUtil::DrawArrow)> {
  static const MethodInfo* get() {
    static auto* from = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* coneRadius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* coneHeight = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* numSegments = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* stemThickness = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* depthTest = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* style = &::il2cpp_utils::GetClassFromName("CjLib", "DebugUtil/Style")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CjLib::DebugUtil*), "DrawArrow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{from, to, coneRadius, coneHeight, numSegments, stemThickness, color, depthTest, style});
  }
};
// Writing MetadataGetter for method: CjLib::DebugUtil::DrawArrow
// Il2CppName: DrawArrow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, float, ::UnityEngine::Color, bool, ::CjLib::DebugUtil::Style)>(&CjLib::DebugUtil::DrawArrow)> {
  static const MethodInfo* get() {
    static auto* from = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* depthTest = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* style = &::il2cpp_utils::GetClassFromName("CjLib", "DebugUtil/Style")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CjLib::DebugUtil*), "DrawArrow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{from, to, size, color, depthTest, style});
  }
};
// Writing MetadataGetter for method: CjLib::DebugUtil::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: CjLib::DebugUtil::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&CjLib::DebugUtil::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CjLib::DebugUtil*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
