// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Completed includes
// Type namespace: CjLib
namespace CjLib {
  // Forward declaring type: Vector3Spring
  struct Vector3Spring;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::CjLib::Vector3Spring, "CjLib", "Vector3Spring");
// Type namespace: CjLib
namespace CjLib {
  // Size: 0x20
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: CjLib.Vector3Spring
  // [TokenAttribute] Offset: FFFFFFFF
  struct Vector3Spring/*, public ::System::ValueType*/ {
    public:
    public:
    // public UnityEngine.Vector3 Value
    // Size: 0xC
    // Offset: 0x0
    ::UnityEngine::Vector3 Value;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Single m_padding0
    // Size: 0x4
    // Offset: 0xC
    float m_padding0;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Vector3 Velocity
    // Size: 0xC
    // Offset: 0x10
    ::UnityEngine::Vector3 Velocity;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Single m_padding1
    // Size: 0x4
    // Offset: 0x1C
    float m_padding1;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating value type constructor for type: Vector3Spring
    constexpr Vector3Spring(::UnityEngine::Vector3 Value_ = {}, float m_padding0_ = {}, ::UnityEngine::Vector3 Velocity_ = {}, float m_padding1_ = {}) noexcept : Value{Value_}, m_padding0{m_padding0_}, Velocity{Velocity_}, m_padding1{m_padding1_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get static field: static public readonly System.Int32 Stride
    static int _get_Stride();
    // Set static field: static public readonly System.Int32 Stride
    static void _set_Stride(int value);
    // Get instance field reference: public UnityEngine.Vector3 Value
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_Value();
    // Get instance field reference: private System.Single m_padding0
    [[deprecated("Use field access instead!")]] float& dyn_m_padding0();
    // Get instance field reference: public UnityEngine.Vector3 Velocity
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_Velocity();
    // Get instance field reference: private System.Single m_padding1
    [[deprecated("Use field access instead!")]] float& dyn_m_padding1();
    // public System.Void Reset()
    // Offset: 0x28E45E8
    void Reset();
    // public System.Void Reset(UnityEngine.Vector3 initValue)
    // Offset: 0x28E4658
    void Reset(::UnityEngine::Vector3 initValue);
    // public System.Void Reset(UnityEngine.Vector3 initValue, UnityEngine.Vector3 initVelocity)
    // Offset: 0x28E46B8
    void Reset(::UnityEngine::Vector3 initValue, ::UnityEngine::Vector3 initVelocity);
    // public UnityEngine.Vector3 TrackDampingRatio(UnityEngine.Vector3 targetValue, System.Single angularFrequency, System.Single dampingRatio, System.Single deltaTime)
    // Offset: 0x28E46CC
    ::UnityEngine::Vector3 TrackDampingRatio(::UnityEngine::Vector3 targetValue, float angularFrequency, float dampingRatio, float deltaTime);
    // public UnityEngine.Vector3 TrackHalfLife(UnityEngine.Vector3 targetValue, System.Single frequencyHz, System.Single halfLife, System.Single deltaTime)
    // Offset: 0x28E49B8
    ::UnityEngine::Vector3 TrackHalfLife(::UnityEngine::Vector3 targetValue, float frequencyHz, float halfLife, float deltaTime);
    // public UnityEngine.Vector3 TrackExponential(UnityEngine.Vector3 targetValue, System.Single halfLife, System.Single deltaTime)
    // Offset: 0x28E4AF4
    ::UnityEngine::Vector3 TrackExponential(::UnityEngine::Vector3 targetValue, float halfLife, float deltaTime);
    // static private System.Void .cctor()
    // Offset: 0x28E4C10
    static void _cctor();
  }; // CjLib.Vector3Spring
  #pragma pack(pop)
  static check_size<sizeof(Vector3Spring), 28 + sizeof(float)> __CjLib_Vector3SpringSizeCheck;
  static_assert(sizeof(Vector3Spring) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: CjLib::Vector3Spring::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CjLib::Vector3Spring::*)()>(&CjLib::Vector3Spring::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CjLib::Vector3Spring), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CjLib::Vector3Spring::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CjLib::Vector3Spring::*)(::UnityEngine::Vector3)>(&CjLib::Vector3Spring::Reset)> {
  static const MethodInfo* get() {
    static auto* initValue = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CjLib::Vector3Spring), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{initValue});
  }
};
// Writing MetadataGetter for method: CjLib::Vector3Spring::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CjLib::Vector3Spring::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&CjLib::Vector3Spring::Reset)> {
  static const MethodInfo* get() {
    static auto* initValue = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* initVelocity = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CjLib::Vector3Spring), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{initValue, initVelocity});
  }
};
// Writing MetadataGetter for method: CjLib::Vector3Spring::TrackDampingRatio
// Il2CppName: TrackDampingRatio
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (CjLib::Vector3Spring::*)(::UnityEngine::Vector3, float, float, float)>(&CjLib::Vector3Spring::TrackDampingRatio)> {
  static const MethodInfo* get() {
    static auto* targetValue = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* angularFrequency = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* dampingRatio = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CjLib::Vector3Spring), "TrackDampingRatio", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetValue, angularFrequency, dampingRatio, deltaTime});
  }
};
// Writing MetadataGetter for method: CjLib::Vector3Spring::TrackHalfLife
// Il2CppName: TrackHalfLife
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (CjLib::Vector3Spring::*)(::UnityEngine::Vector3, float, float, float)>(&CjLib::Vector3Spring::TrackHalfLife)> {
  static const MethodInfo* get() {
    static auto* targetValue = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* frequencyHz = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* halfLife = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CjLib::Vector3Spring), "TrackHalfLife", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetValue, frequencyHz, halfLife, deltaTime});
  }
};
// Writing MetadataGetter for method: CjLib::Vector3Spring::TrackExponential
// Il2CppName: TrackExponential
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (CjLib::Vector3Spring::*)(::UnityEngine::Vector3, float, float)>(&CjLib::Vector3Spring::TrackExponential)> {
  static const MethodInfo* get() {
    static auto* targetValue = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* halfLife = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CjLib::Vector3Spring), "TrackExponential", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetValue, halfLife, deltaTime});
  }
};
// Writing MetadataGetter for method: CjLib::Vector3Spring::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&CjLib::Vector3Spring::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CjLib::Vector3Spring), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
