// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: CjLib.DrawBase
#include "CjLib/DrawBase.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Color because it is already included!
}
// Completed forward declares
// Type namespace: CjLib
namespace CjLib {
  // Forward declaring type: DrawCircle
  class DrawCircle;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::CjLib::DrawCircle);
DEFINE_IL2CPP_ARG_TYPE(::CjLib::DrawCircle*, "CjLib", "DrawCircle");
// Type namespace: CjLib
namespace CjLib {
  // Size: 0x54
  #pragma pack(push, 1)
  // Autogenerated type: CjLib.DrawCircle
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExecuteInEditMode] Offset: FFFFFFFF
  class DrawCircle : public ::CjLib::DrawBase {
    public:
    // Writing base type padding for base size: 0x49 to desired offset: 0x4C
    char ___base_padding[0x3] = {};
    public:
    // public System.Single Radius
    // Size: 0x4
    // Offset: 0x4C
    float Radius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 NumSegments
    // Size: 0x4
    // Offset: 0x50
    int NumSegments;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: public System.Single Radius
    [[deprecated("Use field access instead!")]] float& dyn_Radius();
    // Get instance field reference: public System.Int32 NumSegments
    [[deprecated("Use field access instead!")]] int& dyn_NumSegments();
    // private System.Void OnValidate()
    // Offset: 0x28D02C4
    void OnValidate();
    // protected override System.Void Draw(UnityEngine.Color color, CjLib.DebugUtil/Style style, System.Boolean depthTest)
    // Offset: 0x28D02E4
    // Implemented from: CjLib.DrawBase
    // Base method: System.Void DrawBase::Draw(UnityEngine.Color color, CjLib.DebugUtil/Style style, System.Boolean depthTest)
    void Draw(::UnityEngine::Color color, ::CjLib::DebugUtil::Style style, bool depthTest);
    // public System.Void .ctor()
    // Offset: 0x28D0718
    // Implemented from: CjLib.DrawBase
    // Base method: System.Void DrawBase::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DrawCircle* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::CjLib::DrawCircle::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DrawCircle*, creationType>()));
    }
  }; // CjLib.DrawCircle
  #pragma pack(pop)
  static check_size<sizeof(DrawCircle), 80 + sizeof(int)> __CjLib_DrawCircleSizeCheck;
  static_assert(sizeof(DrawCircle) == 0x54);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: CjLib::DrawCircle::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CjLib::DrawCircle::*)()>(&CjLib::DrawCircle::OnValidate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CjLib::DrawCircle*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CjLib::DrawCircle::Draw
// Il2CppName: Draw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CjLib::DrawCircle::*)(::UnityEngine::Color, ::CjLib::DebugUtil::Style, bool)>(&CjLib::DrawCircle::Draw)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* style = &::il2cpp_utils::GetClassFromName("CjLib", "DebugUtil/Style")->byval_arg;
    static auto* depthTest = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CjLib::DrawCircle*), "Draw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color, style, depthTest});
  }
};
// Writing MetadataGetter for method: CjLib::DrawCircle::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
