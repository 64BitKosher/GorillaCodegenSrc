// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector3
  struct Vector3;
}
// Completed forward declares
// Type namespace: CjLib
namespace CjLib {
  // Forward declaring type: VectorUtil
  class VectorUtil;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::CjLib::VectorUtil);
DEFINE_IL2CPP_ARG_TYPE(::CjLib::VectorUtil*, "CjLib", "VectorUtil");
// Type namespace: CjLib
namespace CjLib {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: CjLib.VectorUtil
  // [TokenAttribute] Offset: FFFFFFFF
  class VectorUtil : public ::Il2CppObject {
    public:
    // static public UnityEngine.Vector3 Rotate2D(UnityEngine.Vector3 v, System.Single deg)
    // Offset: 0x28E680C
    static ::UnityEngine::Vector3 Rotate2D(::UnityEngine::Vector3 v, float deg);
    // static public UnityEngine.Vector3 NormalizeSafe(UnityEngine.Vector3 v, UnityEngine.Vector3 fallback)
    // Offset: 0x28E68B4
    static ::UnityEngine::Vector3 NormalizeSafe(::UnityEngine::Vector3 v, ::UnityEngine::Vector3 fallback);
    // static public UnityEngine.Vector3 FindOrthogonal(UnityEngine.Vector3 v)
    // Offset: 0x28E6A00
    static ::UnityEngine::Vector3 FindOrthogonal(::UnityEngine::Vector3 v);
    // static public System.Void FormOrthogonalBasis(UnityEngine.Vector3 v, out UnityEngine.Vector3 a, out UnityEngine.Vector3 b)
    // Offset: 0x28E6B9C
    static void FormOrthogonalBasis(::UnityEngine::Vector3 v, ByRef<::UnityEngine::Vector3> a, ByRef<::UnityEngine::Vector3> b);
    // static public UnityEngine.Vector3 Integrate(UnityEngine.Vector3 x, UnityEngine.Vector3 v, System.Single dt)
    // Offset: 0x28E6C0C
    static ::UnityEngine::Vector3 Integrate(::UnityEngine::Vector3 x, ::UnityEngine::Vector3 v, float dt);
    // static public UnityEngine.Vector3 Slerp(UnityEngine.Vector3 a, UnityEngine.Vector3 b, System.Single t)
    // Offset: 0x28E6C28
    static ::UnityEngine::Vector3 Slerp(::UnityEngine::Vector3 a, ::UnityEngine::Vector3 b, float t);
    // static public UnityEngine.Vector3 CatmullRom(UnityEngine.Vector3 p0, UnityEngine.Vector3 p1, UnityEngine.Vector3 p2, UnityEngine.Vector3 p3, System.Single t)
    // Offset: 0x28E6DDC
    static ::UnityEngine::Vector3 CatmullRom(::UnityEngine::Vector3 p0, ::UnityEngine::Vector3 p1, ::UnityEngine::Vector3 p2, ::UnityEngine::Vector3 p3, float t);
    // public System.Void .ctor()
    // Offset: 0x28E6EDC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VectorUtil* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::CjLib::VectorUtil::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VectorUtil*, creationType>()));
    }
  }; // CjLib.VectorUtil
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: CjLib::VectorUtil::Rotate2D
// Il2CppName: Rotate2D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3, float)>(&CjLib::VectorUtil::Rotate2D)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* deg = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CjLib::VectorUtil*), "Rotate2D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v, deg});
  }
};
// Writing MetadataGetter for method: CjLib::VectorUtil::NormalizeSafe
// Il2CppName: NormalizeSafe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&CjLib::VectorUtil::NormalizeSafe)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* fallback = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CjLib::VectorUtil*), "NormalizeSafe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v, fallback});
  }
};
// Writing MetadataGetter for method: CjLib::VectorUtil::FindOrthogonal
// Il2CppName: FindOrthogonal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3)>(&CjLib::VectorUtil::FindOrthogonal)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CjLib::VectorUtil*), "FindOrthogonal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: CjLib::VectorUtil::FormOrthogonalBasis
// Il2CppName: FormOrthogonalBasis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>)>(&CjLib::VectorUtil::FormOrthogonalBasis)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(CjLib::VectorUtil*), "FormOrthogonalBasis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v, a, b});
  }
};
// Writing MetadataGetter for method: CjLib::VectorUtil::Integrate
// Il2CppName: Integrate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, float)>(&CjLib::VectorUtil::Integrate)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* dt = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CjLib::VectorUtil*), "Integrate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, v, dt});
  }
};
// Writing MetadataGetter for method: CjLib::VectorUtil::Slerp
// Il2CppName: Slerp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, float)>(&CjLib::VectorUtil::Slerp)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CjLib::VectorUtil*), "Slerp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, t});
  }
};
// Writing MetadataGetter for method: CjLib::VectorUtil::CatmullRom
// Il2CppName: CatmullRom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, float)>(&CjLib::VectorUtil::CatmullRom)> {
  static const MethodInfo* get() {
    static auto* p0 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* p1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* p2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* p3 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CjLib::VectorUtil*), "CatmullRom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p0, p1, p2, p3, t});
  }
};
// Writing MetadataGetter for method: CjLib::VectorUtil::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
