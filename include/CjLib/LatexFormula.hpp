// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Texture
  class Texture;
}
// Completed forward declares
// Type namespace: CjLib
namespace CjLib {
  // Forward declaring type: LatexFormula
  class LatexFormula;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::CjLib::LatexFormula);
DEFINE_IL2CPP_ARG_TYPE(::CjLib::LatexFormula*, "CjLib", "LatexFormula");
// Type namespace: CjLib
namespace CjLib {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: CjLib.LatexFormula
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExecuteInEditMode] Offset: FFFFFFFF
  class LatexFormula : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private System.Int32 m_hash
    // Size: 0x4
    // Offset: 0x20
    int m_hash;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: m_hash and: m_formula
    char __padding0[0x4] = {};
    // private System.String m_formula
    // Size: 0x8
    // Offset: 0x28
    ::StringW m_formula;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private UnityEngine.Texture m_texture
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Texture* m_texture;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture*) == 0x8);
    public:
    // Get static field: static public readonly System.String BaseUrl
    static ::StringW _get_BaseUrl();
    // Set static field: static public readonly System.String BaseUrl
    static void _set_BaseUrl(::StringW value);
    // Get instance field reference: private System.Int32 m_hash
    [[deprecated("Use field access instead!")]] int& dyn_m_hash();
    // Get instance field reference: private System.String m_formula
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_formula();
    // Get instance field reference: private UnityEngine.Texture m_texture
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture*& dyn_m_texture();
    // public System.Void .ctor()
    // Offset: 0x28E3B00
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LatexFormula* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::CjLib::LatexFormula::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LatexFormula*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x28E3BA0
    static void _cctor();
  }; // CjLib.LatexFormula
  #pragma pack(pop)
  static check_size<sizeof(LatexFormula), 48 + sizeof(::UnityEngine::Texture*)> __CjLib_LatexFormulaSizeCheck;
  static_assert(sizeof(LatexFormula) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: CjLib::LatexFormula::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: CjLib::LatexFormula::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&CjLib::LatexFormula::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CjLib::LatexFormula*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
