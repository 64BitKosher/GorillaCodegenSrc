// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: CjLib
namespace CjLib {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Quaternion
  struct Quaternion;
  // Forward declaring type: Color
  struct Color;
}
// Completed forward declares
// Type namespace: CjLib
namespace CjLib {
  // Forward declaring type: GizmosUtil
  class GizmosUtil;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::CjLib::GizmosUtil);
DEFINE_IL2CPP_ARG_TYPE(::CjLib::GizmosUtil*, "CjLib", "GizmosUtil");
// Type namespace: CjLib
namespace CjLib {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: CjLib.GizmosUtil
  // [TokenAttribute] Offset: FFFFFFFF
  class GizmosUtil : public ::Il2CppObject {
    public:
    // Nested type: ::CjLib::GizmosUtil::Style
    struct Style;
    // static public System.Void DrawLine(UnityEngine.Vector3 v0, UnityEngine.Vector3 v1, UnityEngine.Color color)
    // Offset: 0x28E142C
    static void DrawLine(::UnityEngine::Vector3 v0, ::UnityEngine::Vector3 v1, ::UnityEngine::Color color);
    // static public System.Void DrawLines(UnityEngine.Vector3[] aVert, UnityEngine.Color color)
    // Offset: 0x28E1498
    static void DrawLines(::ArrayW<::UnityEngine::Vector3> aVert, ::UnityEngine::Color color);
    // static public System.Void DrawLineStrip(UnityEngine.Vector3[] aVert, UnityEngine.Color color)
    // Offset: 0x28E1538
    static void DrawLineStrip(::ArrayW<::UnityEngine::Vector3> aVert, ::UnityEngine::Color color);
    // static public System.Void DrawBox(UnityEngine.Vector3 center, UnityEngine.Quaternion rotation, UnityEngine.Vector3 dimensions, UnityEngine.Color color, CjLib.GizmosUtil/Style style)
    // Offset: 0x28E15B8
    static void DrawBox(::UnityEngine::Vector3 center, ::UnityEngine::Quaternion rotation, ::UnityEngine::Vector3 dimensions, ::UnityEngine::Color color, ::CjLib::GizmosUtil::Style style);
    // static public System.Void DrawCylinder(UnityEngine.Vector3 center, UnityEngine.Quaternion rotation, System.Single height, System.Single radius, System.Int32 numSegments, UnityEngine.Color color, CjLib.GizmosUtil/Style style)
    // Offset: 0x28E17DC
    static void DrawCylinder(::UnityEngine::Vector3 center, ::UnityEngine::Quaternion rotation, float height, float radius, int numSegments, ::UnityEngine::Color color, ::CjLib::GizmosUtil::Style style);
    // static public System.Void DrawCylinder(UnityEngine.Vector3 point0, UnityEngine.Vector3 point1, System.Single radius, System.Int32 numSegments, UnityEngine.Color color, CjLib.GizmosUtil/Style style)
    // Offset: 0x28E1A30
    static void DrawCylinder(::UnityEngine::Vector3 point0, ::UnityEngine::Vector3 point1, float radius, int numSegments, ::UnityEngine::Color color, ::CjLib::GizmosUtil::Style style);
    // static public System.Void DrawSphere(UnityEngine.Vector3 center, UnityEngine.Quaternion rotation, System.Single radius, System.Int32 latSegments, System.Int32 longSegments, UnityEngine.Color color, CjLib.GizmosUtil/Style style)
    // Offset: 0x28E1EB0
    static void DrawSphere(::UnityEngine::Vector3 center, ::UnityEngine::Quaternion rotation, float radius, int latSegments, int longSegments, ::UnityEngine::Color color, ::CjLib::GizmosUtil::Style style);
    // static public System.Void DrawSphere(UnityEngine.Vector3 center, System.Single radius, System.Int32 latSegments, System.Int32 longSegments, UnityEngine.Color color, CjLib.GizmosUtil/Style style)
    // Offset: 0x28E20F0
    static void DrawSphere(::UnityEngine::Vector3 center, float radius, int latSegments, int longSegments, ::UnityEngine::Color color, ::CjLib::GizmosUtil::Style style);
    // static public System.Void DrawCapsule(UnityEngine.Vector3 center, UnityEngine.Quaternion rotation, System.Single height, System.Single radius, System.Int32 latSegmentsPerCap, System.Int32 longSegmentsPerCap, UnityEngine.Color color, CjLib.GizmosUtil/Style style)
    // Offset: 0x28E21C0
    static void DrawCapsule(::UnityEngine::Vector3 center, ::UnityEngine::Quaternion rotation, float height, float radius, int latSegmentsPerCap, int longSegmentsPerCap, ::UnityEngine::Color color, ::CjLib::GizmosUtil::Style style);
    // static public System.Void DrawCapsule(UnityEngine.Vector3 point0, UnityEngine.Vector3 point1, System.Single radius, System.Int32 latSegmentsPerCap, System.Int32 longSegmentsPerCap, UnityEngine.Color color, CjLib.GizmosUtil/Style style)
    // Offset: 0x28E26E0
    static void DrawCapsule(::UnityEngine::Vector3 point0, ::UnityEngine::Vector3 point1, float radius, int latSegmentsPerCap, int longSegmentsPerCap, ::UnityEngine::Color color, ::CjLib::GizmosUtil::Style style);
    // static public System.Void DrawCone(UnityEngine.Vector3 baseCenter, UnityEngine.Quaternion rotation, System.Single height, System.Single radius, System.Int32 numSegments, UnityEngine.Color color, CjLib.GizmosUtil/Style style)
    // Offset: 0x28E2B70
    static void DrawCone(::UnityEngine::Vector3 baseCenter, ::UnityEngine::Quaternion rotation, float height, float radius, int numSegments, ::UnityEngine::Color color, ::CjLib::GizmosUtil::Style style);
    // static public System.Void DrawCone(UnityEngine.Vector3 baseCenter, UnityEngine.Vector3 top, System.Single radius, System.Int32 numSegments, UnityEngine.Color color, CjLib.GizmosUtil/Style style)
    // Offset: 0x28E2DC4
    static void DrawCone(::UnityEngine::Vector3 baseCenter, ::UnityEngine::Vector3 top, float radius, int numSegments, ::UnityEngine::Color color, ::CjLib::GizmosUtil::Style style);
    // static public System.Void DrawArrow(UnityEngine.Vector3 from, UnityEngine.Vector3 to, System.Single coneRadius, System.Single coneHeight, System.Int32 numSegments, System.Single stemThickness, UnityEngine.Color color, CjLib.GizmosUtil/Style style)
    // Offset: 0x28E315C
    static void DrawArrow(::UnityEngine::Vector3 from, ::UnityEngine::Vector3 to, float coneRadius, float coneHeight, int numSegments, float stemThickness, ::UnityEngine::Color color, ::CjLib::GizmosUtil::Style style);
    // static public System.Void DrawArrow(UnityEngine.Vector3 from, UnityEngine.Vector3 to, System.Single size, UnityEngine.Color color, CjLib.GizmosUtil/Style style)
    // Offset: 0x28E3618
    static void DrawArrow(::UnityEngine::Vector3 from, ::UnityEngine::Vector3 to, float size, ::UnityEngine::Color color, ::CjLib::GizmosUtil::Style style);
    // public System.Void .ctor()
    // Offset: 0x28E3650
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GizmosUtil* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::CjLib::GizmosUtil::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GizmosUtil*, creationType>()));
    }
  }; // CjLib.GizmosUtil
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: CjLib::GizmosUtil::DrawLine
// Il2CppName: DrawLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Color)>(&CjLib::GizmosUtil::DrawLine)> {
  static const MethodInfo* get() {
    static auto* v0 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* v1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CjLib::GizmosUtil*), "DrawLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v0, v1, color});
  }
};
// Writing MetadataGetter for method: CjLib::GizmosUtil::DrawLines
// Il2CppName: DrawLines
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<::UnityEngine::Vector3>, ::UnityEngine::Color)>(&CjLib::GizmosUtil::DrawLines)> {
  static const MethodInfo* get() {
    static auto* aVert = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CjLib::GizmosUtil*), "DrawLines", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{aVert, color});
  }
};
// Writing MetadataGetter for method: CjLib::GizmosUtil::DrawLineStrip
// Il2CppName: DrawLineStrip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<::UnityEngine::Vector3>, ::UnityEngine::Color)>(&CjLib::GizmosUtil::DrawLineStrip)> {
  static const MethodInfo* get() {
    static auto* aVert = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CjLib::GizmosUtil*), "DrawLineStrip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{aVert, color});
  }
};
// Writing MetadataGetter for method: CjLib::GizmosUtil::DrawBox
// Il2CppName: DrawBox
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion, ::UnityEngine::Vector3, ::UnityEngine::Color, ::CjLib::GizmosUtil::Style)>(&CjLib::GizmosUtil::DrawBox)> {
  static const MethodInfo* get() {
    static auto* center = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* dimensions = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* style = &::il2cpp_utils::GetClassFromName("CjLib", "GizmosUtil/Style")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CjLib::GizmosUtil*), "DrawBox", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{center, rotation, dimensions, color, style});
  }
};
// Writing MetadataGetter for method: CjLib::GizmosUtil::DrawCylinder
// Il2CppName: DrawCylinder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion, float, float, int, ::UnityEngine::Color, ::CjLib::GizmosUtil::Style)>(&CjLib::GizmosUtil::DrawCylinder)> {
  static const MethodInfo* get() {
    static auto* center = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* height = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* numSegments = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* style = &::il2cpp_utils::GetClassFromName("CjLib", "GizmosUtil/Style")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CjLib::GizmosUtil*), "DrawCylinder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{center, rotation, height, radius, numSegments, color, style});
  }
};
// Writing MetadataGetter for method: CjLib::GizmosUtil::DrawCylinder
// Il2CppName: DrawCylinder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, float, int, ::UnityEngine::Color, ::CjLib::GizmosUtil::Style)>(&CjLib::GizmosUtil::DrawCylinder)> {
  static const MethodInfo* get() {
    static auto* point0 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* point1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* numSegments = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* style = &::il2cpp_utils::GetClassFromName("CjLib", "GizmosUtil/Style")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CjLib::GizmosUtil*), "DrawCylinder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point0, point1, radius, numSegments, color, style});
  }
};
// Writing MetadataGetter for method: CjLib::GizmosUtil::DrawSphere
// Il2CppName: DrawSphere
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion, float, int, int, ::UnityEngine::Color, ::CjLib::GizmosUtil::Style)>(&CjLib::GizmosUtil::DrawSphere)> {
  static const MethodInfo* get() {
    static auto* center = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* latSegments = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* longSegments = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* style = &::il2cpp_utils::GetClassFromName("CjLib", "GizmosUtil/Style")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CjLib::GizmosUtil*), "DrawSphere", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{center, rotation, radius, latSegments, longSegments, color, style});
  }
};
// Writing MetadataGetter for method: CjLib::GizmosUtil::DrawSphere
// Il2CppName: DrawSphere
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, float, int, int, ::UnityEngine::Color, ::CjLib::GizmosUtil::Style)>(&CjLib::GizmosUtil::DrawSphere)> {
  static const MethodInfo* get() {
    static auto* center = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* latSegments = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* longSegments = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* style = &::il2cpp_utils::GetClassFromName("CjLib", "GizmosUtil/Style")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CjLib::GizmosUtil*), "DrawSphere", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{center, radius, latSegments, longSegments, color, style});
  }
};
// Writing MetadataGetter for method: CjLib::GizmosUtil::DrawCapsule
// Il2CppName: DrawCapsule
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion, float, float, int, int, ::UnityEngine::Color, ::CjLib::GizmosUtil::Style)>(&CjLib::GizmosUtil::DrawCapsule)> {
  static const MethodInfo* get() {
    static auto* center = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* height = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* latSegmentsPerCap = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* longSegmentsPerCap = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* style = &::il2cpp_utils::GetClassFromName("CjLib", "GizmosUtil/Style")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CjLib::GizmosUtil*), "DrawCapsule", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{center, rotation, height, radius, latSegmentsPerCap, longSegmentsPerCap, color, style});
  }
};
// Writing MetadataGetter for method: CjLib::GizmosUtil::DrawCapsule
// Il2CppName: DrawCapsule
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, float, int, int, ::UnityEngine::Color, ::CjLib::GizmosUtil::Style)>(&CjLib::GizmosUtil::DrawCapsule)> {
  static const MethodInfo* get() {
    static auto* point0 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* point1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* latSegmentsPerCap = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* longSegmentsPerCap = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* style = &::il2cpp_utils::GetClassFromName("CjLib", "GizmosUtil/Style")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CjLib::GizmosUtil*), "DrawCapsule", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point0, point1, radius, latSegmentsPerCap, longSegmentsPerCap, color, style});
  }
};
// Writing MetadataGetter for method: CjLib::GizmosUtil::DrawCone
// Il2CppName: DrawCone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion, float, float, int, ::UnityEngine::Color, ::CjLib::GizmosUtil::Style)>(&CjLib::GizmosUtil::DrawCone)> {
  static const MethodInfo* get() {
    static auto* baseCenter = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* height = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* numSegments = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* style = &::il2cpp_utils::GetClassFromName("CjLib", "GizmosUtil/Style")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CjLib::GizmosUtil*), "DrawCone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{baseCenter, rotation, height, radius, numSegments, color, style});
  }
};
// Writing MetadataGetter for method: CjLib::GizmosUtil::DrawCone
// Il2CppName: DrawCone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, float, int, ::UnityEngine::Color, ::CjLib::GizmosUtil::Style)>(&CjLib::GizmosUtil::DrawCone)> {
  static const MethodInfo* get() {
    static auto* baseCenter = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* top = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* radius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* numSegments = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* style = &::il2cpp_utils::GetClassFromName("CjLib", "GizmosUtil/Style")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CjLib::GizmosUtil*), "DrawCone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{baseCenter, top, radius, numSegments, color, style});
  }
};
// Writing MetadataGetter for method: CjLib::GizmosUtil::DrawArrow
// Il2CppName: DrawArrow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, float, float, int, float, ::UnityEngine::Color, ::CjLib::GizmosUtil::Style)>(&CjLib::GizmosUtil::DrawArrow)> {
  static const MethodInfo* get() {
    static auto* from = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* coneRadius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* coneHeight = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* numSegments = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* stemThickness = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* style = &::il2cpp_utils::GetClassFromName("CjLib", "GizmosUtil/Style")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CjLib::GizmosUtil*), "DrawArrow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{from, to, coneRadius, coneHeight, numSegments, stemThickness, color, style});
  }
};
// Writing MetadataGetter for method: CjLib::GizmosUtil::DrawArrow
// Il2CppName: DrawArrow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, float, ::UnityEngine::Color, ::CjLib::GizmosUtil::Style)>(&CjLib::GizmosUtil::DrawArrow)> {
  static const MethodInfo* get() {
    static auto* from = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* style = &::il2cpp_utils::GetClassFromName("CjLib", "GizmosUtil/Style")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CjLib::GizmosUtil*), "DrawArrow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{from, to, size, color, style});
  }
};
// Writing MetadataGetter for method: CjLib::GizmosUtil::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
