// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Quaternion
  struct Quaternion;
}
// Completed forward declares
// Type namespace: CjLib
namespace CjLib {
  // Forward declaring type: QuaternionSpring
  struct QuaternionSpring;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::CjLib::QuaternionSpring, "CjLib", "QuaternionSpring");
// Type namespace: CjLib
namespace CjLib {
  // Size: 0x20
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: CjLib.QuaternionSpring
  // [TokenAttribute] Offset: FFFFFFFF
  struct QuaternionSpring/*, public ::System::ValueType*/ {
    public:
    public:
    // public UnityEngine.Vector4 ValueVec
    // Size: 0x10
    // Offset: 0x0
    ::UnityEngine::Vector4 ValueVec;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector4) == 0x10);
    // public UnityEngine.Vector4 VelocityVec
    // Size: 0x10
    // Offset: 0x10
    ::UnityEngine::Vector4 VelocityVec;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector4) == 0x10);
    public:
    // Creating value type constructor for type: QuaternionSpring
    constexpr QuaternionSpring(::UnityEngine::Vector4 ValueVec_ = {}, ::UnityEngine::Vector4 VelocityVec_ = {}) noexcept : ValueVec{ValueVec_}, VelocityVec{VelocityVec_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get static field: static public readonly System.Int32 Stride
    static int _get_Stride();
    // Set static field: static public readonly System.Int32 Stride
    static void _set_Stride(int value);
    // Get instance field reference: public UnityEngine.Vector4 ValueVec
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector4& dyn_ValueVec();
    // Get instance field reference: public UnityEngine.Vector4 VelocityVec
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector4& dyn_VelocityVec();
    // public UnityEngine.Quaternion get_ValueQuat()
    // Offset: 0x28E52C4
    ::UnityEngine::Quaternion get_ValueQuat();
    // public System.Void set_ValueQuat(UnityEngine.Quaternion value)
    // Offset: 0x28E53E0
    void set_ValueQuat(::UnityEngine::Quaternion value);
    // public UnityEngine.Quaternion get_VelocityQuat()
    // Offset: 0x28E53F0
    ::UnityEngine::Quaternion get_VelocityQuat();
    // public System.Void set_VelocityQuat(UnityEngine.Quaternion value)
    // Offset: 0x28E5444
    void set_VelocityQuat(::UnityEngine::Quaternion value);
    // public System.Void Reset()
    // Offset: 0x28E5450
    void Reset();
    // public System.Void Reset(UnityEngine.Vector4 initValue)
    // Offset: 0x28E54D8
    void Reset(::UnityEngine::Vector4 initValue);
    // public System.Void Reset(UnityEngine.Vector4 initValue, UnityEngine.Vector4 initVelocity)
    // Offset: 0x28E5530
    void Reset(::UnityEngine::Vector4 initValue, ::UnityEngine::Vector4 initVelocity);
    // public System.Void Reset(UnityEngine.Quaternion initValue)
    // Offset: 0x28E5544
    void Reset(::UnityEngine::Quaternion initValue);
    // public System.Void Reset(UnityEngine.Quaternion initValue, UnityEngine.Quaternion initVelocity)
    // Offset: 0x28E559C
    void Reset(::UnityEngine::Quaternion initValue, ::UnityEngine::Quaternion initVelocity);
    // public UnityEngine.Quaternion TrackDampingRatio(UnityEngine.Quaternion targetValue, System.Single angularFrequency, System.Single dampingRatio, System.Single deltaTime)
    // Offset: 0x28E55B0
    ::UnityEngine::Quaternion TrackDampingRatio(::UnityEngine::Quaternion targetValue, float angularFrequency, float dampingRatio, float deltaTime);
    // public UnityEngine.Quaternion TrackHalfLife(UnityEngine.Quaternion targetValue, System.Single frequencyHz, System.Single halfLife, System.Single deltaTime)
    // Offset: 0x28E58B4
    ::UnityEngine::Quaternion TrackHalfLife(::UnityEngine::Quaternion targetValue, float frequencyHz, float halfLife, float deltaTime);
    // public UnityEngine.Quaternion TrackExponential(UnityEngine.Quaternion targetValue, System.Single halfLife, System.Single deltaTime)
    // Offset: 0x28E5A00
    ::UnityEngine::Quaternion TrackExponential(::UnityEngine::Quaternion targetValue, float halfLife, float deltaTime);
    // static private System.Void .cctor()
    // Offset: 0x28E5B24
    static void _cctor();
  }; // CjLib.QuaternionSpring
  #pragma pack(pop)
  static check_size<sizeof(QuaternionSpring), 16 + sizeof(::UnityEngine::Vector4)> __CjLib_QuaternionSpringSizeCheck;
  static_assert(sizeof(QuaternionSpring) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: CjLib::QuaternionSpring::get_ValueQuat
// Il2CppName: get_ValueQuat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (CjLib::QuaternionSpring::*)()>(&CjLib::QuaternionSpring::get_ValueQuat)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CjLib::QuaternionSpring), "get_ValueQuat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CjLib::QuaternionSpring::set_ValueQuat
// Il2CppName: set_ValueQuat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CjLib::QuaternionSpring::*)(::UnityEngine::Quaternion)>(&CjLib::QuaternionSpring::set_ValueQuat)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CjLib::QuaternionSpring), "set_ValueQuat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: CjLib::QuaternionSpring::get_VelocityQuat
// Il2CppName: get_VelocityQuat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (CjLib::QuaternionSpring::*)()>(&CjLib::QuaternionSpring::get_VelocityQuat)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CjLib::QuaternionSpring), "get_VelocityQuat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CjLib::QuaternionSpring::set_VelocityQuat
// Il2CppName: set_VelocityQuat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CjLib::QuaternionSpring::*)(::UnityEngine::Quaternion)>(&CjLib::QuaternionSpring::set_VelocityQuat)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CjLib::QuaternionSpring), "set_VelocityQuat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: CjLib::QuaternionSpring::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CjLib::QuaternionSpring::*)()>(&CjLib::QuaternionSpring::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CjLib::QuaternionSpring), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CjLib::QuaternionSpring::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CjLib::QuaternionSpring::*)(::UnityEngine::Vector4)>(&CjLib::QuaternionSpring::Reset)> {
  static const MethodInfo* get() {
    static auto* initValue = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CjLib::QuaternionSpring), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{initValue});
  }
};
// Writing MetadataGetter for method: CjLib::QuaternionSpring::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CjLib::QuaternionSpring::*)(::UnityEngine::Vector4, ::UnityEngine::Vector4)>(&CjLib::QuaternionSpring::Reset)> {
  static const MethodInfo* get() {
    static auto* initValue = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    static auto* initVelocity = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CjLib::QuaternionSpring), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{initValue, initVelocity});
  }
};
// Writing MetadataGetter for method: CjLib::QuaternionSpring::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CjLib::QuaternionSpring::*)(::UnityEngine::Quaternion)>(&CjLib::QuaternionSpring::Reset)> {
  static const MethodInfo* get() {
    static auto* initValue = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CjLib::QuaternionSpring), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{initValue});
  }
};
// Writing MetadataGetter for method: CjLib::QuaternionSpring::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CjLib::QuaternionSpring::*)(::UnityEngine::Quaternion, ::UnityEngine::Quaternion)>(&CjLib::QuaternionSpring::Reset)> {
  static const MethodInfo* get() {
    static auto* initValue = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* initVelocity = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CjLib::QuaternionSpring), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{initValue, initVelocity});
  }
};
// Writing MetadataGetter for method: CjLib::QuaternionSpring::TrackDampingRatio
// Il2CppName: TrackDampingRatio
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (CjLib::QuaternionSpring::*)(::UnityEngine::Quaternion, float, float, float)>(&CjLib::QuaternionSpring::TrackDampingRatio)> {
  static const MethodInfo* get() {
    static auto* targetValue = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* angularFrequency = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* dampingRatio = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CjLib::QuaternionSpring), "TrackDampingRatio", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetValue, angularFrequency, dampingRatio, deltaTime});
  }
};
// Writing MetadataGetter for method: CjLib::QuaternionSpring::TrackHalfLife
// Il2CppName: TrackHalfLife
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (CjLib::QuaternionSpring::*)(::UnityEngine::Quaternion, float, float, float)>(&CjLib::QuaternionSpring::TrackHalfLife)> {
  static const MethodInfo* get() {
    static auto* targetValue = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* frequencyHz = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* halfLife = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CjLib::QuaternionSpring), "TrackHalfLife", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetValue, frequencyHz, halfLife, deltaTime});
  }
};
// Writing MetadataGetter for method: CjLib::QuaternionSpring::TrackExponential
// Il2CppName: TrackExponential
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (CjLib::QuaternionSpring::*)(::UnityEngine::Quaternion, float, float)>(&CjLib::QuaternionSpring::TrackExponential)> {
  static const MethodInfo* get() {
    static auto* targetValue = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* halfLife = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CjLib::QuaternionSpring), "TrackExponential", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetValue, halfLife, deltaTime});
  }
};
// Writing MetadataGetter for method: CjLib::QuaternionSpring::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&CjLib::QuaternionSpring::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CjLib::QuaternionSpring), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
