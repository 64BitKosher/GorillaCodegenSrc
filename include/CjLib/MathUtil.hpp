// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: CjLib
namespace CjLib {
  // Forward declaring type: MathUtil
  class MathUtil;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::CjLib::MathUtil);
DEFINE_IL2CPP_ARG_TYPE(::CjLib::MathUtil*, "CjLib", "MathUtil");
// Type namespace: CjLib
namespace CjLib {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: CjLib.MathUtil
  // [TokenAttribute] Offset: FFFFFFFF
  class MathUtil : public ::Il2CppObject {
    public:
    // Get static field: static public readonly System.Single Pi
    static float _get_Pi();
    // Set static field: static public readonly System.Single Pi
    static void _set_Pi(float value);
    // Get static field: static public readonly System.Single TwoPi
    static float _get_TwoPi();
    // Set static field: static public readonly System.Single TwoPi
    static void _set_TwoPi(float value);
    // Get static field: static public readonly System.Single HalfPi
    static float _get_HalfPi();
    // Set static field: static public readonly System.Single HalfPi
    static void _set_HalfPi(float value);
    // Get static field: static public readonly System.Single ThirdPi
    static float _get_ThirdPi();
    // Set static field: static public readonly System.Single ThirdPi
    static void _set_ThirdPi(float value);
    // Get static field: static public readonly System.Single QuarterPi
    static float _get_QuarterPi();
    // Set static field: static public readonly System.Single QuarterPi
    static void _set_QuarterPi(float value);
    // Get static field: static public readonly System.Single FifthPi
    static float _get_FifthPi();
    // Set static field: static public readonly System.Single FifthPi
    static void _set_FifthPi(float value);
    // Get static field: static public readonly System.Single SixthPi
    static float _get_SixthPi();
    // Set static field: static public readonly System.Single SixthPi
    static void _set_SixthPi(float value);
    // Get static field: static public readonly System.Single Sqrt2
    static float _get_Sqrt2();
    // Set static field: static public readonly System.Single Sqrt2
    static void _set_Sqrt2(float value);
    // Get static field: static public readonly System.Single Sqrt2Inv
    static float _get_Sqrt2Inv();
    // Set static field: static public readonly System.Single Sqrt2Inv
    static void _set_Sqrt2Inv(float value);
    // Get static field: static public readonly System.Single Sqrt3
    static float _get_Sqrt3();
    // Set static field: static public readonly System.Single Sqrt3
    static void _set_Sqrt3(float value);
    // Get static field: static public readonly System.Single Sqrt3Inv
    static float _get_Sqrt3Inv();
    // Set static field: static public readonly System.Single Sqrt3Inv
    static void _set_Sqrt3Inv(float value);
    // Get static field: static public readonly System.Single Epsilon
    static float _get_Epsilon();
    // Set static field: static public readonly System.Single Epsilon
    static void _set_Epsilon(float value);
    // Get static field: static public readonly System.Single EpsilonComp
    static float _get_EpsilonComp();
    // Set static field: static public readonly System.Single EpsilonComp
    static void _set_EpsilonComp(float value);
    // Get static field: static public readonly System.Single Rad2Deg
    static float _get_Rad2Deg();
    // Set static field: static public readonly System.Single Rad2Deg
    static void _set_Rad2Deg(float value);
    // Get static field: static public readonly System.Single Deg2Rad
    static float _get_Deg2Rad();
    // Set static field: static public readonly System.Single Deg2Rad
    static void _set_Deg2Rad(float value);
    // static public System.Single AsinSafe(System.Single x)
    // Offset: 0x28E3C0C
    static float AsinSafe(float x);
    // static public System.Single AcosSafe(System.Single x)
    // Offset: 0x28E3C24
    static float AcosSafe(float x);
    // static public System.Single CatmullRom(System.Single p0, System.Single p1, System.Single p2, System.Single p3, System.Single t)
    // Offset: 0x28E3C3C
    static float CatmullRom(float p0, float p1, float p2, float p3, float t);
    // public System.Void .ctor()
    // Offset: 0x28E3CA8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MathUtil* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::CjLib::MathUtil::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MathUtil*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x28E3CB0
    static void _cctor();
  }; // CjLib.MathUtil
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: CjLib::MathUtil::AsinSafe
// Il2CppName: AsinSafe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&CjLib::MathUtil::AsinSafe)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CjLib::MathUtil*), "AsinSafe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: CjLib::MathUtil::AcosSafe
// Il2CppName: AcosSafe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&CjLib::MathUtil::AcosSafe)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CjLib::MathUtil*), "AcosSafe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: CjLib::MathUtil::CatmullRom
// Il2CppName: CatmullRom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float, float, float)>(&CjLib::MathUtil::CatmullRom)> {
  static const MethodInfo* get() {
    static auto* p0 = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* p1 = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* p2 = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* p3 = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* t = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CjLib::MathUtil*), "CatmullRom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p0, p1, p2, p3, t});
  }
};
// Writing MetadataGetter for method: CjLib::MathUtil::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: CjLib::MathUtil::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&CjLib::MathUtil::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CjLib::MathUtil*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
