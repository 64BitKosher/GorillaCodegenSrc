// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: GorillaTag
namespace GorillaTag {
  // Forward declaring type: XformOffset
  struct XformOffset;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GorillaTag::XformOffset, "GorillaTag", "XformOffset");
// Type namespace: GorillaTag
namespace GorillaTag {
  // Size: 0x28
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: GorillaTag.XformOffset
  // [TokenAttribute] Offset: FFFFFFFF
  struct XformOffset/*, public ::System::ValueType*/ {
    public:
    public:
    // public UnityEngine.Vector3 pos
    // Size: 0xC
    // Offset: 0x0
    ::UnityEngine::Vector3 pos;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Quaternion rot
    // Size: 0x10
    // Offset: 0xC
    ::UnityEngine::Quaternion rot;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // public UnityEngine.Vector3 scale
    // Size: 0xC
    // Offset: 0x1C
    ::UnityEngine::Vector3 scale;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    public:
    // Creating value type constructor for type: XformOffset
    constexpr XformOffset(::UnityEngine::Vector3 pos_ = {}, ::UnityEngine::Quaternion rot_ = {}, ::UnityEngine::Vector3 scale_ = {}) noexcept : pos{pos_}, rot{rot_}, scale{scale_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public UnityEngine.Vector3 pos
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_pos();
    // Get instance field reference: public UnityEngine.Quaternion rot
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_rot();
    // Get instance field reference: public UnityEngine.Vector3 scale
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_scale();
    // public System.Void .ctor(UnityEngine.Vector3 pos, UnityEngine.Quaternion rot, UnityEngine.Vector3 scale)
    // Offset: 0x2878884
    // ABORTED: conflicts with another method.  XformOffset(::UnityEngine::Vector3 pos, ::UnityEngine::Quaternion rot, ::UnityEngine::Vector3 scale);
    // public System.Void .ctor(UnityEngine.Transform boneXform, UnityEngine.Transform cosmeticXform)
    // Offset: 0x28788A8
    XformOffset(::UnityEngine::Transform* boneXform, ::UnityEngine::Transform* cosmeticXform);
  }; // GorillaTag.XformOffset
  #pragma pack(pop)
  static check_size<sizeof(XformOffset), 28 + sizeof(::UnityEngine::Vector3)> __GorillaTag_XformOffsetSizeCheck;
  static_assert(sizeof(XformOffset) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaTag::XformOffset::XformOffset
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GorillaTag::XformOffset::XformOffset
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
