// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Unity.Profiling.ProfilerRecorder
#include "Unity/Profiling/ProfilerRecorder.hpp"
// Including type: Unity.Profiling.ProfilerMarkerDataUnit
#include "Unity/Profiling/ProfilerMarkerDataUnit.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Forward declaring namespace: GorillaTag::Dev::Benchmarks
namespace GorillaTag::Dev::Benchmarks {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Camera
  class Camera;
}
// Completed forward declares
// Type namespace: GorillaTag.Dev.Benchmarks
namespace GorillaTag::Dev::Benchmarks {
  // Forward declaring type: VisualBenchmark
  class VisualBenchmark;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaTag::Dev::Benchmarks::VisualBenchmark);
DEFINE_IL2CPP_ARG_TYPE(::GorillaTag::Dev::Benchmarks::VisualBenchmark*, "GorillaTag.Dev.Benchmarks", "VisualBenchmark");
// Type namespace: GorillaTag.Dev.Benchmarks
namespace GorillaTag::Dev::Benchmarks {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: GorillaTag.Dev.Benchmarks.VisualBenchmark
  // [TokenAttribute] Offset: FFFFFFFF
  class VisualBenchmark : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GorillaTag::Dev::Benchmarks::VisualBenchmark::StatInfo
    struct StatInfo;
    // Nested type: ::GorillaTag::Dev::Benchmarks::VisualBenchmark::EState
    struct EState;
    // Nested type: ::GorillaTag::Dev::Benchmarks::VisualBenchmark::$$c
    class $$c;
    // Size: 0x9
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: GorillaTag.Dev.Benchmarks.VisualBenchmark/StatInfo
    // [TokenAttribute] Offset: FFFFFFFF
    struct StatInfo/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.String name
      // Size: 0x8
      // Offset: 0x0
      ::StringW name;
      // Field size check
      static_assert(sizeof(::StringW) == 0x8);
      // public Unity.Profiling.ProfilerMarkerDataUnit unit
      // Size: 0x1
      // Offset: 0x8
      ::Unity::Profiling::ProfilerMarkerDataUnit unit;
      // Field size check
      static_assert(sizeof(::Unity::Profiling::ProfilerMarkerDataUnit) == 0x1);
      public:
      // Creating value type constructor for type: StatInfo
      constexpr StatInfo(::StringW name_ = {}, ::Unity::Profiling::ProfilerMarkerDataUnit unit_ = {}) noexcept : name{name_}, unit{unit_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.String name
      [[deprecated("Use field access instead!")]] ::StringW& dyn_name();
      // Get instance field reference: public Unity.Profiling.ProfilerMarkerDataUnit unit
      [[deprecated("Use field access instead!")]] ::Unity::Profiling::ProfilerMarkerDataUnit& dyn_unit();
    }; // GorillaTag.Dev.Benchmarks.VisualBenchmark/StatInfo
    #pragma pack(pop)
    static check_size<sizeof(VisualBenchmark::StatInfo), 8 + sizeof(::Unity::Profiling::ProfilerMarkerDataUnit)> __GorillaTag_Dev_Benchmarks_VisualBenchmark_StatInfoSizeCheck;
    static_assert(sizeof(VisualBenchmark::StatInfo) == 0x9);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: GorillaTag.Dev.Benchmarks.VisualBenchmark/EState
    // [TokenAttribute] Offset: FFFFFFFF
    struct EState/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: EState
      constexpr EState(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public GorillaTag.Dev.Benchmarks.VisualBenchmark/EState Setup
      static constexpr const int Setup = 0;
      // Get static field: static public GorillaTag.Dev.Benchmarks.VisualBenchmark/EState Setup
      static ::GorillaTag::Dev::Benchmarks::VisualBenchmark::EState _get_Setup();
      // Set static field: static public GorillaTag.Dev.Benchmarks.VisualBenchmark/EState Setup
      static void _set_Setup(::GorillaTag::Dev::Benchmarks::VisualBenchmark::EState value);
      // static field const value: static public GorillaTag.Dev.Benchmarks.VisualBenchmark/EState WaitingBeforeCollectingGarbage
      static constexpr const int WaitingBeforeCollectingGarbage = 1;
      // Get static field: static public GorillaTag.Dev.Benchmarks.VisualBenchmark/EState WaitingBeforeCollectingGarbage
      static ::GorillaTag::Dev::Benchmarks::VisualBenchmark::EState _get_WaitingBeforeCollectingGarbage();
      // Set static field: static public GorillaTag.Dev.Benchmarks.VisualBenchmark/EState WaitingBeforeCollectingGarbage
      static void _set_WaitingBeforeCollectingGarbage(::GorillaTag::Dev::Benchmarks::VisualBenchmark::EState value);
      // static field const value: static public GorillaTag.Dev.Benchmarks.VisualBenchmark/EState WaitingBeforeRecordingStats
      static constexpr const int WaitingBeforeRecordingStats = 2;
      // Get static field: static public GorillaTag.Dev.Benchmarks.VisualBenchmark/EState WaitingBeforeRecordingStats
      static ::GorillaTag::Dev::Benchmarks::VisualBenchmark::EState _get_WaitingBeforeRecordingStats();
      // Set static field: static public GorillaTag.Dev.Benchmarks.VisualBenchmark/EState WaitingBeforeRecordingStats
      static void _set_WaitingBeforeRecordingStats(::GorillaTag::Dev::Benchmarks::VisualBenchmark::EState value);
      // static field const value: static public GorillaTag.Dev.Benchmarks.VisualBenchmark/EState TearDown
      static constexpr const int TearDown = 3;
      // Get static field: static public GorillaTag.Dev.Benchmarks.VisualBenchmark/EState TearDown
      static ::GorillaTag::Dev::Benchmarks::VisualBenchmark::EState _get_TearDown();
      // Set static field: static public GorillaTag.Dev.Benchmarks.VisualBenchmark/EState TearDown
      static void _set_TearDown(::GorillaTag::Dev::Benchmarks::VisualBenchmark::EState value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // GorillaTag.Dev.Benchmarks.VisualBenchmark/EState
    #pragma pack(pop)
    static check_size<sizeof(VisualBenchmark::EState), 0 + sizeof(int)> __GorillaTag_Dev_Benchmarks_VisualBenchmark_EStateSizeCheck;
    static_assert(sizeof(VisualBenchmark::EState) == 0x4);
    public:
    // public UnityEngine.Transform[] benchmarkLocations
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::UnityEngine::Transform*> benchmarkLocations;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Transform*>) == 0x8);
    // public System.Single collectGarbageDelay
    // Size: 0x4
    // Offset: 0x28
    float collectGarbageDelay;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single recordStatsDelay
    // Size: 0x4
    // Offset: 0x2C
    float recordStatsDelay;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Camera cam
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Camera* cam;
    // Field size check
    static_assert(sizeof(::UnityEngine::Camera*) == 0x8);
    // private GorillaTag.Dev.Benchmarks.VisualBenchmark/StatInfo[] availableRenderStats
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<::GorillaTag::Dev::Benchmarks::VisualBenchmark::StatInfo> availableRenderStats;
    // Field size check
    static_assert(sizeof(::ArrayW<::GorillaTag::Dev::Benchmarks::VisualBenchmark::StatInfo>) == 0x8);
    // private Unity.Profiling.ProfilerRecorder[] renderStatsRecorders
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<::Unity::Profiling::ProfilerRecorder> renderStatsRecorders;
    // Field size check
    static_assert(sizeof(::ArrayW<::Unity::Profiling::ProfilerRecorder>) == 0x8);
    // private System.Int32 currentLocationIndex
    // Size: 0x4
    // Offset: 0x48
    int currentLocationIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private GorillaTag.Dev.Benchmarks.VisualBenchmark/EState state
    // Size: 0x4
    // Offset: 0x4C
    ::GorillaTag::Dev::Benchmarks::VisualBenchmark::EState state;
    // Field size check
    static_assert(sizeof(::GorillaTag::Dev::Benchmarks::VisualBenchmark::EState) == 0x4);
    // private System.Single lastTime
    // Size: 0x4
    // Offset: 0x50
    float lastTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: lastTime and: sb
    char __padding8[0x4] = {};
    // private readonly System.Text.StringBuilder sb
    // Size: 0x8
    // Offset: 0x58
    ::System::Text::StringBuilder* sb;
    // Field size check
    static_assert(sizeof(::System::Text::StringBuilder*) == 0x8);
    public:
    // Get static field: static private System.Boolean isQuitting
    static bool _get_isQuitting();
    // Set static field: static private System.Boolean isQuitting
    static void _set_isQuitting(bool value);
    // Get instance field reference: public UnityEngine.Transform[] benchmarkLocations
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Transform*>& dyn_benchmarkLocations();
    // Get instance field reference: public System.Single collectGarbageDelay
    [[deprecated("Use field access instead!")]] float& dyn_collectGarbageDelay();
    // Get instance field reference: private System.Single recordStatsDelay
    [[deprecated("Use field access instead!")]] float& dyn_recordStatsDelay();
    // Get instance field reference: private UnityEngine.Camera cam
    [[deprecated("Use field access instead!")]] ::UnityEngine::Camera*& dyn_cam();
    // Get instance field reference: private GorillaTag.Dev.Benchmarks.VisualBenchmark/StatInfo[] availableRenderStats
    [[deprecated("Use field access instead!")]] ::ArrayW<::GorillaTag::Dev::Benchmarks::VisualBenchmark::StatInfo>& dyn_availableRenderStats();
    // Get instance field reference: private Unity.Profiling.ProfilerRecorder[] renderStatsRecorders
    [[deprecated("Use field access instead!")]] ::ArrayW<::Unity::Profiling::ProfilerRecorder>& dyn_renderStatsRecorders();
    // Get instance field reference: private System.Int32 currentLocationIndex
    [[deprecated("Use field access instead!")]] int& dyn_currentLocationIndex();
    // Get instance field reference: private GorillaTag.Dev.Benchmarks.VisualBenchmark/EState state
    [[deprecated("Use field access instead!")]] ::GorillaTag::Dev::Benchmarks::VisualBenchmark::EState& dyn_state();
    // Get instance field reference: private System.Single lastTime
    [[deprecated("Use field access instead!")]] float& dyn_lastTime();
    // Get instance field reference: private readonly System.Text.StringBuilder sb
    [[deprecated("Use field access instead!")]] ::System::Text::StringBuilder*& dyn_sb();
    // protected System.Void Awake()
    // Offset: 0x28A91DC
    void Awake();
    // protected System.Void OnEnable()
    // Offset: 0x28A9890
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x28A9988
    void OnDisable();
    // protected System.Void LateUpdate()
    // Offset: 0x28A99FC
    void LateUpdate();
    // private System.Void RecordLocationStats(UnityEngine.Transform xform)
    // Offset: 0x28A9DBC
    void RecordLocationStats(::UnityEngine::Transform* xform);
    // public System.Void .ctor()
    // Offset: 0x28AA248
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VisualBenchmark* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaTag::Dev::Benchmarks::VisualBenchmark::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VisualBenchmark*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x28AA2C8
    static void _cctor();
  }; // GorillaTag.Dev.Benchmarks.VisualBenchmark
  #pragma pack(pop)
  static check_size<sizeof(VisualBenchmark), 88 + sizeof(::System::Text::StringBuilder*)> __GorillaTag_Dev_Benchmarks_VisualBenchmarkSizeCheck;
  static_assert(sizeof(VisualBenchmark) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GorillaTag::Dev::Benchmarks::VisualBenchmark::EState, "GorillaTag.Dev.Benchmarks", "VisualBenchmark/EState");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GorillaTag::Dev::Benchmarks::VisualBenchmark::StatInfo, "GorillaTag.Dev.Benchmarks", "VisualBenchmark/StatInfo");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaTag::Dev::Benchmarks::VisualBenchmark::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Dev::Benchmarks::VisualBenchmark::*)()>(&GorillaTag::Dev::Benchmarks::VisualBenchmark::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Dev::Benchmarks::VisualBenchmark*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Dev::Benchmarks::VisualBenchmark::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Dev::Benchmarks::VisualBenchmark::*)()>(&GorillaTag::Dev::Benchmarks::VisualBenchmark::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Dev::Benchmarks::VisualBenchmark*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Dev::Benchmarks::VisualBenchmark::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Dev::Benchmarks::VisualBenchmark::*)()>(&GorillaTag::Dev::Benchmarks::VisualBenchmark::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Dev::Benchmarks::VisualBenchmark*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Dev::Benchmarks::VisualBenchmark::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Dev::Benchmarks::VisualBenchmark::*)()>(&GorillaTag::Dev::Benchmarks::VisualBenchmark::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Dev::Benchmarks::VisualBenchmark*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Dev::Benchmarks::VisualBenchmark::RecordLocationStats
// Il2CppName: RecordLocationStats
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Dev::Benchmarks::VisualBenchmark::*)(::UnityEngine::Transform*)>(&GorillaTag::Dev::Benchmarks::VisualBenchmark::RecordLocationStats)> {
  static const MethodInfo* get() {
    static auto* xform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Dev::Benchmarks::VisualBenchmark*), "RecordLocationStats", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{xform});
  }
};
// Writing MetadataGetter for method: GorillaTag::Dev::Benchmarks::VisualBenchmark::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GorillaTag::Dev::Benchmarks::VisualBenchmark::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GorillaTag::Dev::Benchmarks::VisualBenchmark::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Dev::Benchmarks::VisualBenchmark*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
