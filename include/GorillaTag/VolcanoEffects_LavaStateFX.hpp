// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: GorillaTag.VolcanoEffects
#include "GorillaTag/VolcanoEffects.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioClip
  class AudioClip;
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
  // Forward declaring type: Gradient
  class Gradient;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaTag::VolcanoEffects::LavaStateFX);
DEFINE_IL2CPP_ARG_TYPE(::GorillaTag::VolcanoEffects::LavaStateFX*, "GorillaTag", "VolcanoEffects/LavaStateFX");
// Type namespace: GorillaTag
namespace GorillaTag {
  // Size: 0xA4
  #pragma pack(push, 1)
  // Autogenerated type: GorillaTag.VolcanoEffects/LavaStateFX
  // [TokenAttribute] Offset: FFFFFFFF
  class VolcanoEffects::LavaStateFX : public ::Il2CppObject {
    public:
    public:
    // public UnityEngine.AudioClip startSound
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::AudioClip* startSound;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // public UnityEngine.AudioSource startSoundAudioSrc
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::AudioSource* startSoundAudioSrc;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // public System.Single startSoundVol
    // Size: 0x4
    // Offset: 0x20
    float startSoundVol;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single startSoundDelay
    // Size: 0x4
    // Offset: 0x24
    float startSoundDelay;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.AudioClip endSound
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::AudioClip* endSound;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // public UnityEngine.AudioSource endSoundAudioSrc
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::AudioSource* endSoundAudioSrc;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // public System.Single endSoundVol
    // Size: 0x4
    // Offset: 0x38
    float endSoundVol;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single endSoundPadTime
    // Size: 0x4
    // Offset: 0x3C
    float endSoundPadTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.AudioSource loop1AudioSrc
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::AudioSource* loop1AudioSrc;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // public UnityEngine.AnimationCurve loop1VolAnim
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::AnimationCurve* loop1VolAnim;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // public UnityEngine.AudioSource loop2AudioSrc
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::AudioSource* loop2AudioSrc;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // public UnityEngine.AnimationCurve loop2VolAnim
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::AnimationCurve* loop2VolAnim;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // public UnityEngine.AnimationCurve lavaSpewEmissionAnim
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::AnimationCurve* lavaSpewEmissionAnim;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // public UnityEngine.AnimationCurve smokeEmissionAnim
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::AnimationCurve* smokeEmissionAnim;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // public UnityEngine.Gradient smokeStartColorAnim
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::Gradient* smokeStartColorAnim;
    // Field size check
    static_assert(sizeof(::UnityEngine::Gradient*) == 0x8);
    // public UnityEngine.Gradient lavaLightColor
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::Gradient* lavaLightColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Gradient*) == 0x8);
    // public UnityEngine.AnimationCurve lavaLightIntensityAnim
    // Size: 0x8
    // Offset: 0x80
    ::UnityEngine::AnimationCurve* lavaLightIntensityAnim;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // public UnityEngine.AnimationCurve lavaLightAttenuationAnim
    // Size: 0x8
    // Offset: 0x88
    ::UnityEngine::AnimationCurve* lavaLightAttenuationAnim;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // public System.Boolean startSoundExists
    // Size: 0x1
    // Offset: 0x90
    bool startSoundExists;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean startSoundPlayed
    // Size: 0x1
    // Offset: 0x91
    bool startSoundPlayed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean endSoundExists
    // Size: 0x1
    // Offset: 0x92
    bool endSoundExists;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean endSoundPlayed
    // Size: 0x1
    // Offset: 0x93
    bool endSoundPlayed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean loop1Exists
    // Size: 0x1
    // Offset: 0x94
    bool loop1Exists;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: loop1Exists and: loop1DefaultVolume
    char __padding22[0x3] = {};
    // public System.Single loop1DefaultVolume
    // Size: 0x4
    // Offset: 0x98
    float loop1DefaultVolume;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean loop2Exists
    // Size: 0x1
    // Offset: 0x9C
    bool loop2Exists;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: loop2Exists and: loop2DefaultVolume
    char __padding24[0x3] = {};
    // public System.Single loop2DefaultVolume
    // Size: 0x4
    // Offset: 0xA0
    float loop2DefaultVolume;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: public UnityEngine.AudioClip startSound
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_startSound();
    // Get instance field reference: public UnityEngine.AudioSource startSoundAudioSrc
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_startSoundAudioSrc();
    // Get instance field reference: public System.Single startSoundVol
    [[deprecated("Use field access instead!")]] float& dyn_startSoundVol();
    // Get instance field reference: public System.Single startSoundDelay
    [[deprecated("Use field access instead!")]] float& dyn_startSoundDelay();
    // Get instance field reference: public UnityEngine.AudioClip endSound
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_endSound();
    // Get instance field reference: public UnityEngine.AudioSource endSoundAudioSrc
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_endSoundAudioSrc();
    // Get instance field reference: public System.Single endSoundVol
    [[deprecated("Use field access instead!")]] float& dyn_endSoundVol();
    // Get instance field reference: public System.Single endSoundPadTime
    [[deprecated("Use field access instead!")]] float& dyn_endSoundPadTime();
    // Get instance field reference: public UnityEngine.AudioSource loop1AudioSrc
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_loop1AudioSrc();
    // Get instance field reference: public UnityEngine.AnimationCurve loop1VolAnim
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_loop1VolAnim();
    // Get instance field reference: public UnityEngine.AudioSource loop2AudioSrc
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_loop2AudioSrc();
    // Get instance field reference: public UnityEngine.AnimationCurve loop2VolAnim
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_loop2VolAnim();
    // Get instance field reference: public UnityEngine.AnimationCurve lavaSpewEmissionAnim
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_lavaSpewEmissionAnim();
    // Get instance field reference: public UnityEngine.AnimationCurve smokeEmissionAnim
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_smokeEmissionAnim();
    // Get instance field reference: public UnityEngine.Gradient smokeStartColorAnim
    [[deprecated("Use field access instead!")]] ::UnityEngine::Gradient*& dyn_smokeStartColorAnim();
    // Get instance field reference: public UnityEngine.Gradient lavaLightColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Gradient*& dyn_lavaLightColor();
    // Get instance field reference: public UnityEngine.AnimationCurve lavaLightIntensityAnim
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_lavaLightIntensityAnim();
    // Get instance field reference: public UnityEngine.AnimationCurve lavaLightAttenuationAnim
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_lavaLightAttenuationAnim();
    // Get instance field reference: public System.Boolean startSoundExists
    [[deprecated("Use field access instead!")]] bool& dyn_startSoundExists();
    // Get instance field reference: public System.Boolean startSoundPlayed
    [[deprecated("Use field access instead!")]] bool& dyn_startSoundPlayed();
    // Get instance field reference: public System.Boolean endSoundExists
    [[deprecated("Use field access instead!")]] bool& dyn_endSoundExists();
    // Get instance field reference: public System.Boolean endSoundPlayed
    [[deprecated("Use field access instead!")]] bool& dyn_endSoundPlayed();
    // Get instance field reference: public System.Boolean loop1Exists
    [[deprecated("Use field access instead!")]] bool& dyn_loop1Exists();
    // Get instance field reference: public System.Single loop1DefaultVolume
    [[deprecated("Use field access instead!")]] float& dyn_loop1DefaultVolume();
    // Get instance field reference: public System.Boolean loop2Exists
    [[deprecated("Use field access instead!")]] bool& dyn_loop2Exists();
    // Get instance field reference: public System.Single loop2DefaultVolume
    [[deprecated("Use field access instead!")]] float& dyn_loop2DefaultVolume();
    // public System.Void .ctor()
    // Offset: 0x28A0578
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VolcanoEffects::LavaStateFX* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaTag::VolcanoEffects::LavaStateFX::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VolcanoEffects::LavaStateFX*, creationType>()));
    }
  }; // GorillaTag.VolcanoEffects/LavaStateFX
  #pragma pack(pop)
  static check_size<sizeof(VolcanoEffects::LavaStateFX), 160 + sizeof(float)> __GorillaTag_VolcanoEffects_LavaStateFXSizeCheck;
  static_assert(sizeof(VolcanoEffects::LavaStateFX) == 0xA4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaTag::VolcanoEffects::LavaStateFX::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
