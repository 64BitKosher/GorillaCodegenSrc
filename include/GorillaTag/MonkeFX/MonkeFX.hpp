// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: ITickSystemPost
#include "GlobalNamespace/ITickSystemPost.hpp"
// Including type: System.Single
#include "System/Single.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: VRRig
  class VRRig;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: GorillaTag::MonkeFX
namespace GorillaTag::MonkeFX {
  // Forward declaring type: MonkeFXSettingsSO
  class MonkeFXSettingsSO;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Mesh
  class Mesh;
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: GorillaTag
namespace GorillaTag {
  // Forward declaring type: GTLogErrorLimiter
  class GTLogErrorLimiter;
}
// Completed forward declares
// Type namespace: GorillaTag.MonkeFX
namespace GorillaTag::MonkeFX {
  // Forward declaring type: MonkeFX
  class MonkeFX;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaTag::MonkeFX::MonkeFX);
DEFINE_IL2CPP_ARG_TYPE(::GorillaTag::MonkeFX::MonkeFX*, "GorillaTag.MonkeFX", "MonkeFX");
// Type namespace: GorillaTag.MonkeFX
namespace GorillaTag::MonkeFX {
  // Size: 0x39
  #pragma pack(push, 1)
  // Autogenerated type: GorillaTag.MonkeFX.MonkeFX
  // [TokenAttribute] Offset: FFFFFFFF
  class MonkeFX : public ::Il2CppObject/*, public ::GlobalNamespace::ITickSystemPost*/ {
    public:
    // Nested type: ::GorillaTag::MonkeFX::MonkeFX::ElementsRange
    struct ElementsRange;
    // Size: 0x8
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: GorillaTag.MonkeFX.MonkeFX/ElementsRange
    // [TokenAttribute] Offset: FFFFFFFF
    struct ElementsRange/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Int32 min
      // Size: 0x4
      // Offset: 0x0
      int min;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 max
      // Size: 0x4
      // Offset: 0x4
      int max;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: ElementsRange
      constexpr ElementsRange(int min_ = {}, int max_ = {}) noexcept : min{min_}, max{max_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.Int32 min
      [[deprecated("Use field access instead!")]] int& dyn_min();
      // Get instance field reference: public System.Int32 max
      [[deprecated("Use field access instead!")]] int& dyn_max();
    }; // GorillaTag.MonkeFX.MonkeFX/ElementsRange
    #pragma pack(pop)
    static check_size<sizeof(MonkeFX::ElementsRange), 4 + sizeof(int)> __GorillaTag_MonkeFX_MonkeFX_ElementsRangeSizeCheck;
    static_assert(sizeof(MonkeFX::ElementsRange) == 0x8);
    public:
    // private readonly System.Collections.Generic.HashSet`1<GorillaTag.MonkeFX.MonkeFXSettingsSO> _settingsSOs
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::HashSet_1<::GorillaTag::MonkeFX::MonkeFXSettingsSO*>* settingsSOs;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<::GorillaTag::MonkeFX::MonkeFXSettingsSO*>*) == 0x8);
    // private readonly System.Collections.Generic.Dictionary`2<System.Int32,System.Int32> _srcMeshInst_to_meshId
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::Dictionary_2<int, int>* srcMeshInst_to_meshId;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<int, int>*) == 0x8);
    // private readonly System.Collections.Generic.List`1<UnityEngine.Mesh> _srcMeshId_to_sourceMesh
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::UnityEngine::Mesh*>* srcMeshId_to_sourceMesh;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Mesh*>*) == 0x8);
    // private readonly System.Collections.Generic.List`1<GorillaTag.MonkeFX.MonkeFX/ElementsRange> _srcMeshId_to_elemRange
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::List_1<::GorillaTag::MonkeFX::MonkeFX::ElementsRange>* srcMeshId_to_elemRange;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GorillaTag::MonkeFX::MonkeFX::ElementsRange>*) == 0x8);
    // private readonly System.Collections.Generic.Dictionary`2<System.Int32,System.Collections.Generic.List`1<GorillaTag.MonkeFX.MonkeFXSettingsSO>> _meshId_to_settingsUsers
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::Dictionary_2<int, ::System::Collections::Generic::List_1<::GorillaTag::MonkeFX::MonkeFXSettingsSO*>*>* meshId_to_settingsUsers;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<int, ::System::Collections::Generic::List_1<::GorillaTag::MonkeFX::MonkeFXSettingsSO*>*>*) == 0x8);
    // private System.Boolean <ITickSystemPost.PostTickRunning>k__BackingField
    // Size: 0x1
    // Offset: 0x38
    bool PostTickRunning;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::GlobalNamespace::ITickSystemPost
    operator ::GlobalNamespace::ITickSystemPost() noexcept {
      return *reinterpret_cast<::GlobalNamespace::ITickSystemPost*>(this);
    }
    // Get static field: static private readonly System.String[] _boneNames
    static ::ArrayW<::StringW> _get__boneNames();
    // Set static field: static private readonly System.String[] _boneNames
    static void _set__boneNames(::ArrayW<::StringW> value);
    // Get static field: static private VRRig[] _rigs
    static ::ArrayW<::GlobalNamespace::VRRig*> _get__rigs();
    // Set static field: static private VRRig[] _rigs
    static void _set__rigs(::ArrayW<::GlobalNamespace::VRRig*> value);
    // Get static field: static private UnityEngine.Transform[] _bones
    static ::ArrayW<::UnityEngine::Transform*> _get__bones();
    // Set static field: static private UnityEngine.Transform[] _bones
    static void _set__bones(::ArrayW<::UnityEngine::Transform*> value);
    // Get static field: static private System.Int32 _rigsHash
    static int _get__rigsHash();
    // Set static field: static private System.Int32 _rigsHash
    static void _set__rigsHash(int value);
    // Get static field: static private readonly GorillaTag.GTLogErrorLimiter _errorLog_nullVRRigFromVRRigCache
    static ::GorillaTag::GTLogErrorLimiter* _get__errorLog_nullVRRigFromVRRigCache();
    // Set static field: static private readonly GorillaTag.GTLogErrorLimiter _errorLog_nullVRRigFromVRRigCache
    static void _set__errorLog_nullVRRigFromVRRigCache(::GorillaTag::GTLogErrorLimiter* value);
    // Get static field: static private GorillaTag.GTLogErrorLimiter _errorLog_nullMainSkin
    static ::GorillaTag::GTLogErrorLimiter* _get__errorLog_nullMainSkin();
    // Set static field: static private GorillaTag.GTLogErrorLimiter _errorLog_nullMainSkin
    static void _set__errorLog_nullMainSkin(::GorillaTag::GTLogErrorLimiter* value);
    // Get static field: static private readonly GorillaTag.GTLogErrorLimiter _errorLog_nullBone
    static ::GorillaTag::GTLogErrorLimiter* _get__errorLog_nullBone();
    // Set static field: static private readonly GorillaTag.GTLogErrorLimiter _errorLog_nullBone
    static void _set__errorLog_nullBone(::GorillaTag::GTLogErrorLimiter* value);
    // static field const value: static private System.Single _k16BitFactor
    static constexpr const float _k16BitFactor = 65536;
    // Get static field: static private System.Single _k16BitFactor
    static float _get__k16BitFactor();
    // Set static field: static private System.Single _k16BitFactor
    static void _set__k16BitFactor(float value);
    // Get static field: static private GorillaTag.MonkeFX.MonkeFX <instance>k__BackingField
    static ::GorillaTag::MonkeFX::MonkeFX* _get_$instance$k__BackingField();
    // Set static field: static private GorillaTag.MonkeFX.MonkeFX <instance>k__BackingField
    static void _set_$instance$k__BackingField(::GorillaTag::MonkeFX::MonkeFX* value);
    // Get static field: static private System.Boolean <hasInstance>k__BackingField
    static bool _get_$hasInstance$k__BackingField();
    // Set static field: static private System.Boolean <hasInstance>k__BackingField
    static void _set_$hasInstance$k__BackingField(bool value);
    // Get static field: static private System.Boolean _gameStarted
    static bool _get__gameStarted();
    // Set static field: static private System.Boolean _gameStarted
    static void _set__gameStarted(bool value);
    // Get static field: static private System.Boolean _isUberMeshDirty
    static bool _get__isUberMeshDirty();
    // Set static field: static private System.Boolean _isUberMeshDirty
    static void _set__isUberMeshDirty(bool value);
    // Get instance field reference: private readonly System.Collections.Generic.HashSet`1<GorillaTag.MonkeFX.MonkeFXSettingsSO> _settingsSOs
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::GorillaTag::MonkeFX::MonkeFXSettingsSO*>*& dyn__settingsSOs();
    // Get instance field reference: private readonly System.Collections.Generic.Dictionary`2<System.Int32,System.Int32> _srcMeshInst_to_meshId
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<int, int>*& dyn__srcMeshInst_to_meshId();
    // Get instance field reference: private readonly System.Collections.Generic.List`1<UnityEngine.Mesh> _srcMeshId_to_sourceMesh
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Mesh*>*& dyn__srcMeshId_to_sourceMesh();
    // Get instance field reference: private readonly System.Collections.Generic.List`1<GorillaTag.MonkeFX.MonkeFX/ElementsRange> _srcMeshId_to_elemRange
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GorillaTag::MonkeFX::MonkeFX::ElementsRange>*& dyn__srcMeshId_to_elemRange();
    // Get instance field reference: private readonly System.Collections.Generic.Dictionary`2<System.Int32,System.Collections.Generic.List`1<GorillaTag.MonkeFX.MonkeFXSettingsSO>> _meshId_to_settingsUsers
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<int, ::System::Collections::Generic::List_1<::GorillaTag::MonkeFX::MonkeFXSettingsSO*>*>*& dyn__meshId_to_settingsUsers();
    // Get instance field reference: private System.Boolean <ITickSystemPost.PostTickRunning>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$ITickSystemPost_PostTickRunning$k__BackingField();
    // static private System.Void InitBonesArray()
    // Offset: 0x28A5F00
    static void InitBonesArray();
    // static private System.Void UpdateBones()
    // Offset: 0x28A65F8
    static void UpdateBones();
    // static private System.Void UpdateBone()
    // Offset: 0x28A65FC
    static void UpdateBone();
    // static public System.Void Register(GorillaTag.MonkeFX.MonkeFXSettingsSO settingsSO)
    // Offset: 0x28A6600
    static void Register(::GorillaTag::MonkeFX::MonkeFXSettingsSO* settingsSO);
    // static public System.Single GetScaleToFitInBounds(UnityEngine.Mesh mesh)
    // Offset: 0x28A6A80
    static float GetScaleToFitInBounds(::UnityEngine::Mesh* mesh);
    // static public System.Single Pack0To1Floats(System.Single x, System.Single y)
    // Offset: 0x28A6AE0
    static float Pack0To1Floats(float x, float y);
    // static public GorillaTag.MonkeFX.MonkeFX get_instance()
    // Offset: 0x28A6B14
    static ::GorillaTag::MonkeFX::MonkeFX* get_instance();
    // static private System.Void set_instance(GorillaTag.MonkeFX.MonkeFX value)
    // Offset: 0x28A6B6C
    static void set_instance(::GorillaTag::MonkeFX::MonkeFX* value);
    // static public System.Boolean get_hasInstance()
    // Offset: 0x28A6BCC
    static bool get_hasInstance();
    // static private System.Void set_hasInstance(System.Boolean value)
    // Offset: 0x28A6C24
    static void set_hasInstance(bool value);
    // static private System.Void EnsureInstance()
    // Offset: 0x28A6954
    static void EnsureInstance();
    // static private System.Void OnAfterFirstSceneLoaded()
    // Offset: 0x28A6E64
    static void OnAfterFirstSceneLoaded();
    // private System.Void ITickSystemPost.PostTick()
    // Offset: 0x28A6F34
    void ITickSystemPost_PostTick();
    // private System.Boolean ITickSystemPost.get_PostTickRunning()
    // Offset: 0x28A6FB4
    bool ITickSystemPost_get_PostTickRunning();
    // private System.Void ITickSystemPost.set_PostTickRunning(System.Boolean value)
    // Offset: 0x28A6FBC
    void ITickSystemPost_set_PostTickRunning(bool value);
    // static private System.Void PauseTick()
    // Offset: 0x28A6FC8
    static void PauseTick();
    // static private System.Void ResumeTick()
    // Offset: 0x28A7144
    static void ResumeTick();
    // public System.Void .ctor()
    // Offset: 0x28A6C84
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MonkeFX* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaTag::MonkeFX::MonkeFX::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MonkeFX*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x28A72C0
    static void _cctor();
  }; // GorillaTag.MonkeFX.MonkeFX
  #pragma pack(pop)
  static check_size<sizeof(MonkeFX), 56 + sizeof(bool)> __GorillaTag_MonkeFX_MonkeFXSizeCheck;
  static_assert(sizeof(MonkeFX) == 0x39);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GorillaTag::MonkeFX::MonkeFX::ElementsRange, "GorillaTag.MonkeFX", "MonkeFX/ElementsRange");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaTag::MonkeFX::MonkeFX::InitBonesArray
// Il2CppName: InitBonesArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GorillaTag::MonkeFX::MonkeFX::InitBonesArray)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::MonkeFX::MonkeFX*), "InitBonesArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::MonkeFX::MonkeFX::UpdateBones
// Il2CppName: UpdateBones
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GorillaTag::MonkeFX::MonkeFX::UpdateBones)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::MonkeFX::MonkeFX*), "UpdateBones", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::MonkeFX::MonkeFX::UpdateBone
// Il2CppName: UpdateBone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GorillaTag::MonkeFX::MonkeFX::UpdateBone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::MonkeFX::MonkeFX*), "UpdateBone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::MonkeFX::MonkeFX::Register
// Il2CppName: Register
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GorillaTag::MonkeFX::MonkeFXSettingsSO*)>(&GorillaTag::MonkeFX::MonkeFX::Register)> {
  static const MethodInfo* get() {
    static auto* settingsSO = &::il2cpp_utils::GetClassFromName("GorillaTag.MonkeFX", "MonkeFXSettingsSO")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::MonkeFX::MonkeFX*), "Register", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{settingsSO});
  }
};
// Writing MetadataGetter for method: GorillaTag::MonkeFX::MonkeFX::GetScaleToFitInBounds
// Il2CppName: GetScaleToFitInBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::UnityEngine::Mesh*)>(&GorillaTag::MonkeFX::MonkeFX::GetScaleToFitInBounds)> {
  static const MethodInfo* get() {
    static auto* mesh = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::MonkeFX::MonkeFX*), "GetScaleToFitInBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mesh});
  }
};
// Writing MetadataGetter for method: GorillaTag::MonkeFX::MonkeFX::Pack0To1Floats
// Il2CppName: Pack0To1Floats
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float)>(&GorillaTag::MonkeFX::MonkeFX::Pack0To1Floats)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::MonkeFX::MonkeFX*), "Pack0To1Floats", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: GorillaTag::MonkeFX::MonkeFX::get_instance
// Il2CppName: get_instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GorillaTag::MonkeFX::MonkeFX* (*)()>(&GorillaTag::MonkeFX::MonkeFX::get_instance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::MonkeFX::MonkeFX*), "get_instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::MonkeFX::MonkeFX::set_instance
// Il2CppName: set_instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GorillaTag::MonkeFX::MonkeFX*)>(&GorillaTag::MonkeFX::MonkeFX::set_instance)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("GorillaTag.MonkeFX", "MonkeFX")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::MonkeFX::MonkeFX*), "set_instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GorillaTag::MonkeFX::MonkeFX::get_hasInstance
// Il2CppName: get_hasInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GorillaTag::MonkeFX::MonkeFX::get_hasInstance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::MonkeFX::MonkeFX*), "get_hasInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::MonkeFX::MonkeFX::set_hasInstance
// Il2CppName: set_hasInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&GorillaTag::MonkeFX::MonkeFX::set_hasInstance)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::MonkeFX::MonkeFX*), "set_hasInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GorillaTag::MonkeFX::MonkeFX::EnsureInstance
// Il2CppName: EnsureInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GorillaTag::MonkeFX::MonkeFX::EnsureInstance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::MonkeFX::MonkeFX*), "EnsureInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::MonkeFX::MonkeFX::OnAfterFirstSceneLoaded
// Il2CppName: OnAfterFirstSceneLoaded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GorillaTag::MonkeFX::MonkeFX::OnAfterFirstSceneLoaded)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::MonkeFX::MonkeFX*), "OnAfterFirstSceneLoaded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::MonkeFX::MonkeFX::ITickSystemPost_PostTick
// Il2CppName: ITickSystemPost.PostTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::MonkeFX::MonkeFX::*)()>(&GorillaTag::MonkeFX::MonkeFX::ITickSystemPost_PostTick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::MonkeFX::MonkeFX*), "ITickSystemPost.PostTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::MonkeFX::MonkeFX::ITickSystemPost_get_PostTickRunning
// Il2CppName: ITickSystemPost.get_PostTickRunning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaTag::MonkeFX::MonkeFX::*)()>(&GorillaTag::MonkeFX::MonkeFX::ITickSystemPost_get_PostTickRunning)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::MonkeFX::MonkeFX*), "ITickSystemPost.get_PostTickRunning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::MonkeFX::MonkeFX::ITickSystemPost_set_PostTickRunning
// Il2CppName: ITickSystemPost.set_PostTickRunning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::MonkeFX::MonkeFX::*)(bool)>(&GorillaTag::MonkeFX::MonkeFX::ITickSystemPost_set_PostTickRunning)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::MonkeFX::MonkeFX*), "ITickSystemPost.set_PostTickRunning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GorillaTag::MonkeFX::MonkeFX::PauseTick
// Il2CppName: PauseTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GorillaTag::MonkeFX::MonkeFX::PauseTick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::MonkeFX::MonkeFX*), "PauseTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::MonkeFX::MonkeFX::ResumeTick
// Il2CppName: ResumeTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GorillaTag::MonkeFX::MonkeFX::ResumeTick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::MonkeFX::MonkeFX*), "ResumeTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::MonkeFX::MonkeFX::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GorillaTag::MonkeFX::MonkeFX::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GorillaTag::MonkeFX::MonkeFX::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::MonkeFX::MonkeFX*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
