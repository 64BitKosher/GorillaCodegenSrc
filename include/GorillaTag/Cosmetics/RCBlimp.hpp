// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: GorillaTag.Cosmetics.RCVehicle
#include "GorillaTag/Cosmetics/RCVehicle.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Collider
  class Collider;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: SkinnedMeshRenderer
  class SkinnedMeshRenderer;
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: AudioClip
  class AudioClip;
}
// Completed forward declares
// Type namespace: GorillaTag.Cosmetics
namespace GorillaTag::Cosmetics {
  // Forward declaring type: RCBlimp
  class RCBlimp;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaTag::Cosmetics::RCBlimp);
DEFINE_IL2CPP_ARG_TYPE(::GorillaTag::Cosmetics::RCBlimp*, "GorillaTag.Cosmetics", "RCBlimp");
// Type namespace: GorillaTag.Cosmetics
namespace GorillaTag::Cosmetics {
  // Size: 0x174
  #pragma pack(push, 1)
  // Autogenerated type: GorillaTag.Cosmetics.RCBlimp
  // [TokenAttribute] Offset: FFFFFFFF
  class RCBlimp : public ::GorillaTag::Cosmetics::RCVehicle {
    public:
    public:
    // private System.Single maxAscendSpeed
    // Size: 0x4
    // Offset: 0xC8
    float maxAscendSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single ascendAccelTime
    // Size: 0x4
    // Offset: 0xCC
    float ascendAccelTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single gravityCompensation
    // Size: 0x4
    // Offset: 0xD0
    float gravityCompensation;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single crashedGravityCompensation
    // Size: 0x4
    // Offset: 0xD4
    float crashedGravityCompensation;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single maxTurnRate
    // Size: 0x4
    // Offset: 0xD8
    float maxTurnRate;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single turnAccelTime
    // Size: 0x4
    // Offset: 0xDC
    float turnAccelTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single maxHorizontalSpeed
    // Size: 0x4
    // Offset: 0xE0
    float maxHorizontalSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single horizontalAccelTime
    // Size: 0x4
    // Offset: 0xE4
    float horizontalAccelTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single maxHorizontalTiltAngle
    // Size: 0x4
    // Offset: 0xE8
    float maxHorizontalTiltAngle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single horizontalTiltTime
    // Size: 0x4
    // Offset: 0xEC
    float horizontalTiltTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector2 motorSoundVolumeMinMax
    // Size: 0x8
    // Offset: 0xF0
    ::UnityEngine::Vector2 motorSoundVolumeMinMax;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private System.Single deflateSoundVolume
    // Size: 0x4
    // Offset: 0xF8
    float deflateSoundVolume;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: deflateSoundVolume and: crashCollider
    char __padding11[0x4] = {};
    // private UnityEngine.Collider crashCollider
    // Size: 0x8
    // Offset: 0x100
    ::UnityEngine::Collider* crashCollider;
    // Field size check
    static_assert(sizeof(::UnityEngine::Collider*) == 0x8);
    // private UnityEngine.Transform leftPropeller
    // Size: 0x8
    // Offset: 0x108
    ::UnityEngine::Transform* leftPropeller;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform rightPropeller
    // Size: 0x8
    // Offset: 0x110
    ::UnityEngine::Transform* rightPropeller;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.SkinnedMeshRenderer blimpMesh
    // Size: 0x8
    // Offset: 0x118
    ::UnityEngine::SkinnedMeshRenderer* blimpMesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::SkinnedMeshRenderer*) == 0x8);
    // private UnityEngine.AudioSource audioSource
    // Size: 0x8
    // Offset: 0x120
    ::UnityEngine::AudioSource* audioSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // private UnityEngine.AudioClip motorSound
    // Size: 0x8
    // Offset: 0x128
    ::UnityEngine::AudioClip* motorSound;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // private UnityEngine.AudioClip deflateSound
    // Size: 0x8
    // Offset: 0x130
    ::UnityEngine::AudioClip* deflateSound;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // private System.Single turnRate
    // Size: 0x4
    // Offset: 0x138
    float turnRate;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single turnAngle
    // Size: 0x4
    // Offset: 0x13C
    float turnAngle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single tiltAngle
    // Size: 0x4
    // Offset: 0x140
    float tiltAngle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single ascendAccel
    // Size: 0x4
    // Offset: 0x144
    float ascendAccel;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single turnAccel
    // Size: 0x4
    // Offset: 0x148
    float turnAccel;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single tiltAccel
    // Size: 0x4
    // Offset: 0x14C
    float tiltAccel;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single horizontalAccel
    // Size: 0x4
    // Offset: 0x150
    float horizontalAccel;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single leftPropellerAngle
    // Size: 0x4
    // Offset: 0x154
    float leftPropellerAngle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single rightPropellerAngle
    // Size: 0x4
    // Offset: 0x158
    float rightPropellerAngle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single leftPropellerSpinRate
    // Size: 0x4
    // Offset: 0x15C
    float leftPropellerSpinRate;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single rightPropellerSpinRate
    // Size: 0x4
    // Offset: 0x160
    float rightPropellerSpinRate;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single blimpDeflateBlendWeight
    // Size: 0x4
    // Offset: 0x164
    float blimpDeflateBlendWeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single deflateRate
    // Size: 0x4
    // Offset: 0x168
    float deflateRate;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single motorVolumeRampTime
    // Size: 0x4
    // Offset: 0x16C
    float motorVolumeRampTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single motorLevel
    // Size: 0x4
    // Offset: 0x170
    float motorLevel;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // static field const value: static private System.Single propellerIdleAcc
    static constexpr const float propellerIdleAcc = 1;
    // Get static field: static private System.Single propellerIdleAcc
    static float _get_propellerIdleAcc();
    // Set static field: static private System.Single propellerIdleAcc
    static void _set_propellerIdleAcc(float value);
    // static field const value: static private System.Single propellerIdleSpinRate
    static constexpr const float propellerIdleSpinRate = 0.6;
    // Get static field: static private System.Single propellerIdleSpinRate
    static float _get_propellerIdleSpinRate();
    // Set static field: static private System.Single propellerIdleSpinRate
    static void _set_propellerIdleSpinRate(float value);
    // static field const value: static private System.Single propellerMaxAcc
    static constexpr const float propellerMaxAcc = 6.6666665;
    // Get static field: static private System.Single propellerMaxAcc
    static float _get_propellerMaxAcc();
    // Set static field: static private System.Single propellerMaxAcc
    static void _set_propellerMaxAcc(float value);
    // static field const value: static private System.Single propellerMaxSpinRate
    static constexpr const float propellerMaxSpinRate = 5;
    // Get static field: static private System.Single propellerMaxSpinRate
    static float _get_propellerMaxSpinRate();
    // Set static field: static private System.Single propellerMaxSpinRate
    static void _set_propellerMaxSpinRate(float value);
    // Get instance field reference: private System.Single maxAscendSpeed
    [[deprecated("Use field access instead!")]] float& dyn_maxAscendSpeed();
    // Get instance field reference: private System.Single ascendAccelTime
    [[deprecated("Use field access instead!")]] float& dyn_ascendAccelTime();
    // Get instance field reference: private System.Single gravityCompensation
    [[deprecated("Use field access instead!")]] float& dyn_gravityCompensation();
    // Get instance field reference: private System.Single crashedGravityCompensation
    [[deprecated("Use field access instead!")]] float& dyn_crashedGravityCompensation();
    // Get instance field reference: private System.Single maxTurnRate
    [[deprecated("Use field access instead!")]] float& dyn_maxTurnRate();
    // Get instance field reference: private System.Single turnAccelTime
    [[deprecated("Use field access instead!")]] float& dyn_turnAccelTime();
    // Get instance field reference: private System.Single maxHorizontalSpeed
    [[deprecated("Use field access instead!")]] float& dyn_maxHorizontalSpeed();
    // Get instance field reference: private System.Single horizontalAccelTime
    [[deprecated("Use field access instead!")]] float& dyn_horizontalAccelTime();
    // Get instance field reference: private System.Single maxHorizontalTiltAngle
    [[deprecated("Use field access instead!")]] float& dyn_maxHorizontalTiltAngle();
    // Get instance field reference: private System.Single horizontalTiltTime
    [[deprecated("Use field access instead!")]] float& dyn_horizontalTiltTime();
    // Get instance field reference: private UnityEngine.Vector2 motorSoundVolumeMinMax
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_motorSoundVolumeMinMax();
    // Get instance field reference: private System.Single deflateSoundVolume
    [[deprecated("Use field access instead!")]] float& dyn_deflateSoundVolume();
    // Get instance field reference: private UnityEngine.Collider crashCollider
    [[deprecated("Use field access instead!")]] ::UnityEngine::Collider*& dyn_crashCollider();
    // Get instance field reference: private UnityEngine.Transform leftPropeller
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_leftPropeller();
    // Get instance field reference: private UnityEngine.Transform rightPropeller
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_rightPropeller();
    // Get instance field reference: private UnityEngine.SkinnedMeshRenderer blimpMesh
    [[deprecated("Use field access instead!")]] ::UnityEngine::SkinnedMeshRenderer*& dyn_blimpMesh();
    // Get instance field reference: private UnityEngine.AudioSource audioSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_audioSource();
    // Get instance field reference: private UnityEngine.AudioClip motorSound
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_motorSound();
    // Get instance field reference: private UnityEngine.AudioClip deflateSound
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_deflateSound();
    // Get instance field reference: private System.Single turnRate
    [[deprecated("Use field access instead!")]] float& dyn_turnRate();
    // Get instance field reference: private System.Single turnAngle
    [[deprecated("Use field access instead!")]] float& dyn_turnAngle();
    // Get instance field reference: private System.Single tiltAngle
    [[deprecated("Use field access instead!")]] float& dyn_tiltAngle();
    // Get instance field reference: private System.Single ascendAccel
    [[deprecated("Use field access instead!")]] float& dyn_ascendAccel();
    // Get instance field reference: private System.Single turnAccel
    [[deprecated("Use field access instead!")]] float& dyn_turnAccel();
    // Get instance field reference: private System.Single tiltAccel
    [[deprecated("Use field access instead!")]] float& dyn_tiltAccel();
    // Get instance field reference: private System.Single horizontalAccel
    [[deprecated("Use field access instead!")]] float& dyn_horizontalAccel();
    // Get instance field reference: private System.Single leftPropellerAngle
    [[deprecated("Use field access instead!")]] float& dyn_leftPropellerAngle();
    // Get instance field reference: private System.Single rightPropellerAngle
    [[deprecated("Use field access instead!")]] float& dyn_rightPropellerAngle();
    // Get instance field reference: private System.Single leftPropellerSpinRate
    [[deprecated("Use field access instead!")]] float& dyn_leftPropellerSpinRate();
    // Get instance field reference: private System.Single rightPropellerSpinRate
    [[deprecated("Use field access instead!")]] float& dyn_rightPropellerSpinRate();
    // Get instance field reference: private System.Single blimpDeflateBlendWeight
    [[deprecated("Use field access instead!")]] float& dyn_blimpDeflateBlendWeight();
    // Get instance field reference: private System.Single deflateRate
    [[deprecated("Use field access instead!")]] float& dyn_deflateRate();
    // Get instance field reference: private System.Single motorVolumeRampTime
    [[deprecated("Use field access instead!")]] float& dyn_motorVolumeRampTime();
    // Get instance field reference: private System.Single motorLevel
    [[deprecated("Use field access instead!")]] float& dyn_motorLevel();
    // private System.Void FixedUpdate()
    // Offset: 0x28B770C
    void FixedUpdate();
    // private System.Void OnTriggerEnter(UnityEngine.Collider other)
    // Offset: 0x28B7CA8
    void OnTriggerEnter(::UnityEngine::Collider* other);
    // protected override System.Void AuthorityBeginDocked()
    // Offset: 0x28B6CE4
    // Implemented from: GorillaTag.Cosmetics.RCVehicle
    // Base method: System.Void RCVehicle::AuthorityBeginDocked()
    void AuthorityBeginDocked();
    // protected override System.Void Awake()
    // Offset: 0x28B6F4C
    // Implemented from: GorillaTag.Cosmetics.RCVehicle
    // Base method: System.Void RCVehicle::Awake()
    void Awake();
    // protected override System.Void OnDisable()
    // Offset: 0x28B6F94
    // Implemented from: GorillaTag.Cosmetics.RCVehicle
    // Base method: System.Void RCVehicle::OnDisable()
    void OnDisable();
    // protected override System.Void AuthorityUpdate(System.Single dt)
    // Offset: 0x28B6FBC
    // Implemented from: GorillaTag.Cosmetics.RCVehicle
    // Base method: System.Void RCVehicle::AuthorityUpdate(System.Single dt)
    void AuthorityUpdate(float dt);
    // protected override System.Void RemoteUpdate(System.Single dt)
    // Offset: 0x28B70F8
    // Implemented from: GorillaTag.Cosmetics.RCVehicle
    // Base method: System.Void RCVehicle::RemoteUpdate(System.Single dt)
    void RemoteUpdate(float dt);
    // protected override System.Void SharedUpdate(System.Single dt)
    // Offset: 0x28B71B4
    // Implemented from: GorillaTag.Cosmetics.RCVehicle
    // Base method: System.Void RCVehicle::SharedUpdate(System.Single dt)
    void SharedUpdate(float dt);
    // public System.Void .ctor()
    // Offset: 0x28B80F8
    // Implemented from: GorillaTag.Cosmetics.RCVehicle
    // Base method: System.Void RCVehicle::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RCBlimp* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaTag::Cosmetics::RCBlimp::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RCBlimp*, creationType>()));
    }
  }; // GorillaTag.Cosmetics.RCBlimp
  #pragma pack(pop)
  static check_size<sizeof(RCBlimp), 368 + sizeof(float)> __GorillaTag_Cosmetics_RCBlimpSizeCheck;
  static_assert(sizeof(RCBlimp) == 0x174);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaTag::Cosmetics::RCBlimp::FixedUpdate
// Il2CppName: FixedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Cosmetics::RCBlimp::*)()>(&GorillaTag::Cosmetics::RCBlimp::FixedUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::RCBlimp*), "FixedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::RCBlimp::OnTriggerEnter
// Il2CppName: OnTriggerEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Cosmetics::RCBlimp::*)(::UnityEngine::Collider*)>(&GorillaTag::Cosmetics::RCBlimp::OnTriggerEnter)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::RCBlimp*), "OnTriggerEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::RCBlimp::AuthorityBeginDocked
// Il2CppName: AuthorityBeginDocked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Cosmetics::RCBlimp::*)()>(&GorillaTag::Cosmetics::RCBlimp::AuthorityBeginDocked)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::RCBlimp*), "AuthorityBeginDocked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::RCBlimp::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Cosmetics::RCBlimp::*)()>(&GorillaTag::Cosmetics::RCBlimp::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::RCBlimp*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::RCBlimp::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Cosmetics::RCBlimp::*)()>(&GorillaTag::Cosmetics::RCBlimp::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::RCBlimp*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::RCBlimp::AuthorityUpdate
// Il2CppName: AuthorityUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Cosmetics::RCBlimp::*)(float)>(&GorillaTag::Cosmetics::RCBlimp::AuthorityUpdate)> {
  static const MethodInfo* get() {
    static auto* dt = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::RCBlimp*), "AuthorityUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dt});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::RCBlimp::RemoteUpdate
// Il2CppName: RemoteUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Cosmetics::RCBlimp::*)(float)>(&GorillaTag::Cosmetics::RCBlimp::RemoteUpdate)> {
  static const MethodInfo* get() {
    static auto* dt = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::RCBlimp*), "RemoteUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dt});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::RCBlimp::SharedUpdate
// Il2CppName: SharedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Cosmetics::RCBlimp::*)(float)>(&GorillaTag::Cosmetics::RCBlimp::SharedUpdate)> {
  static const MethodInfo* get() {
    static auto* dt = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::RCBlimp*), "SharedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dt});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::RCBlimp::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
