// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: GorillaTag.Cosmetics
namespace GorillaTag::Cosmetics {
  // Forward declaring type: CompassNeedleRotator
  class CompassNeedleRotator;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaTag::Cosmetics::CompassNeedleRotator);
DEFINE_IL2CPP_ARG_TYPE(::GorillaTag::Cosmetics::CompassNeedleRotator*, "GorillaTag.Cosmetics", "CompassNeedleRotator");
// Type namespace: GorillaTag.Cosmetics
namespace GorillaTag::Cosmetics {
  // Size: 0x24
  #pragma pack(push, 1)
  // Autogenerated type: GorillaTag.Cosmetics.CompassNeedleRotator
  // [TokenAttribute] Offset: FFFFFFFF
  class CompassNeedleRotator : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private System.Single currentVelocity
    // Size: 0x4
    // Offset: 0x20
    float currentVelocity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // static field const value: static private System.Single smoothTime
    static constexpr const float smoothTime = 0.005;
    // Get static field: static private System.Single smoothTime
    static float _get_smoothTime();
    // Set static field: static private System.Single smoothTime
    static void _set_smoothTime(float value);
    // Get instance field reference: private System.Single currentVelocity
    [[deprecated("Use field access instead!")]] float& dyn_currentVelocity();
    // protected System.Void OnEnable()
    // Offset: 0x28B2920
    void OnEnable();
    // protected System.Void LateUpdate()
    // Offset: 0x28B298C
    void LateUpdate();
    // public System.Void .ctor()
    // Offset: 0x28B2B74
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CompassNeedleRotator* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaTag::Cosmetics::CompassNeedleRotator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CompassNeedleRotator*, creationType>()));
    }
  }; // GorillaTag.Cosmetics.CompassNeedleRotator
  #pragma pack(pop)
  static check_size<sizeof(CompassNeedleRotator), 32 + sizeof(float)> __GorillaTag_Cosmetics_CompassNeedleRotatorSizeCheck;
  static_assert(sizeof(CompassNeedleRotator) == 0x24);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaTag::Cosmetics::CompassNeedleRotator::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Cosmetics::CompassNeedleRotator::*)()>(&GorillaTag::Cosmetics::CompassNeedleRotator::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::CompassNeedleRotator*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::CompassNeedleRotator::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Cosmetics::CompassNeedleRotator::*)()>(&GorillaTag::Cosmetics::CompassNeedleRotator::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::CompassNeedleRotator*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::CompassNeedleRotator::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
