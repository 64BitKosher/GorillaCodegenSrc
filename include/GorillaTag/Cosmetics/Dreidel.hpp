// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
// Including type: CjLib.FloatSpring
#include "CjLib/FloatSpring.hpp"
// Including type: CjLib.Vector3Spring
#include "CjLib/Vector3Spring.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GorillaTag::Cosmetics
namespace GorillaTag::Cosmetics {
  // Skipping declaration: Variation because it is already included!
  // Skipping declaration: Side because it is already included!
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: MeshCollider
  class MeshCollider;
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: AudioClip
  class AudioClip;
  // Forward declaring type: ParticleSystem
  class ParticleSystem;
}
// Completed forward declares
// Type namespace: GorillaTag.Cosmetics
namespace GorillaTag::Cosmetics {
  // Forward declaring type: Dreidel
  class Dreidel;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaTag::Cosmetics::Dreidel);
DEFINE_IL2CPP_ARG_TYPE(::GorillaTag::Cosmetics::Dreidel*, "GorillaTag.Cosmetics", "Dreidel");
// Type namespace: GorillaTag.Cosmetics
namespace GorillaTag::Cosmetics {
  // Size: 0x1C2
  #pragma pack(push, 1)
  // Autogenerated type: GorillaTag.Cosmetics.Dreidel
  // [TokenAttribute] Offset: FFFFFFFF
  class Dreidel : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GorillaTag::Cosmetics::Dreidel::State
    struct State;
    // Nested type: ::GorillaTag::Cosmetics::Dreidel::Side
    struct Side;
    // Nested type: ::GorillaTag::Cosmetics::Dreidel::Variation
    struct Variation;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: GorillaTag.Cosmetics.Dreidel/State
    // [TokenAttribute] Offset: FFFFFFFF
    struct State/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: State
      constexpr State(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public GorillaTag.Cosmetics.Dreidel/State Idle
      static constexpr const int Idle = 0;
      // Get static field: static public GorillaTag.Cosmetics.Dreidel/State Idle
      static ::GorillaTag::Cosmetics::Dreidel::State _get_Idle();
      // Set static field: static public GorillaTag.Cosmetics.Dreidel/State Idle
      static void _set_Idle(::GorillaTag::Cosmetics::Dreidel::State value);
      // static field const value: static public GorillaTag.Cosmetics.Dreidel/State FindingSurface
      static constexpr const int FindingSurface = 1;
      // Get static field: static public GorillaTag.Cosmetics.Dreidel/State FindingSurface
      static ::GorillaTag::Cosmetics::Dreidel::State _get_FindingSurface();
      // Set static field: static public GorillaTag.Cosmetics.Dreidel/State FindingSurface
      static void _set_FindingSurface(::GorillaTag::Cosmetics::Dreidel::State value);
      // static field const value: static public GorillaTag.Cosmetics.Dreidel/State Spinning
      static constexpr const int Spinning = 2;
      // Get static field: static public GorillaTag.Cosmetics.Dreidel/State Spinning
      static ::GorillaTag::Cosmetics::Dreidel::State _get_Spinning();
      // Set static field: static public GorillaTag.Cosmetics.Dreidel/State Spinning
      static void _set_Spinning(::GorillaTag::Cosmetics::Dreidel::State value);
      // static field const value: static public GorillaTag.Cosmetics.Dreidel/State Falling
      static constexpr const int Falling = 3;
      // Get static field: static public GorillaTag.Cosmetics.Dreidel/State Falling
      static ::GorillaTag::Cosmetics::Dreidel::State _get_Falling();
      // Set static field: static public GorillaTag.Cosmetics.Dreidel/State Falling
      static void _set_Falling(::GorillaTag::Cosmetics::Dreidel::State value);
      // static field const value: static public GorillaTag.Cosmetics.Dreidel/State Fallen
      static constexpr const int Fallen = 4;
      // Get static field: static public GorillaTag.Cosmetics.Dreidel/State Fallen
      static ::GorillaTag::Cosmetics::Dreidel::State _get_Fallen();
      // Set static field: static public GorillaTag.Cosmetics.Dreidel/State Fallen
      static void _set_Fallen(::GorillaTag::Cosmetics::Dreidel::State value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // GorillaTag.Cosmetics.Dreidel/State
    #pragma pack(pop)
    static check_size<sizeof(Dreidel::State), 0 + sizeof(int)> __GorillaTag_Cosmetics_Dreidel_StateSizeCheck;
    static_assert(sizeof(Dreidel::State) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: GorillaTag.Cosmetics.Dreidel/Side
    // [TokenAttribute] Offset: FFFFFFFF
    struct Side/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: Side
      constexpr Side(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public GorillaTag.Cosmetics.Dreidel/Side Shin
      static constexpr const int Shin = 0;
      // Get static field: static public GorillaTag.Cosmetics.Dreidel/Side Shin
      static ::GorillaTag::Cosmetics::Dreidel::Side _get_Shin();
      // Set static field: static public GorillaTag.Cosmetics.Dreidel/Side Shin
      static void _set_Shin(::GorillaTag::Cosmetics::Dreidel::Side value);
      // static field const value: static public GorillaTag.Cosmetics.Dreidel/Side Hey
      static constexpr const int Hey = 1;
      // Get static field: static public GorillaTag.Cosmetics.Dreidel/Side Hey
      static ::GorillaTag::Cosmetics::Dreidel::Side _get_Hey();
      // Set static field: static public GorillaTag.Cosmetics.Dreidel/Side Hey
      static void _set_Hey(::GorillaTag::Cosmetics::Dreidel::Side value);
      // static field const value: static public GorillaTag.Cosmetics.Dreidel/Side Gimel
      static constexpr const int Gimel = 2;
      // Get static field: static public GorillaTag.Cosmetics.Dreidel/Side Gimel
      static ::GorillaTag::Cosmetics::Dreidel::Side _get_Gimel();
      // Set static field: static public GorillaTag.Cosmetics.Dreidel/Side Gimel
      static void _set_Gimel(::GorillaTag::Cosmetics::Dreidel::Side value);
      // static field const value: static public GorillaTag.Cosmetics.Dreidel/Side Nun
      static constexpr const int Nun = 3;
      // Get static field: static public GorillaTag.Cosmetics.Dreidel/Side Nun
      static ::GorillaTag::Cosmetics::Dreidel::Side _get_Nun();
      // Set static field: static public GorillaTag.Cosmetics.Dreidel/Side Nun
      static void _set_Nun(::GorillaTag::Cosmetics::Dreidel::Side value);
      // static field const value: static public GorillaTag.Cosmetics.Dreidel/Side Count
      static constexpr const int Count = 4;
      // Get static field: static public GorillaTag.Cosmetics.Dreidel/Side Count
      static ::GorillaTag::Cosmetics::Dreidel::Side _get_Count();
      // Set static field: static public GorillaTag.Cosmetics.Dreidel/Side Count
      static void _set_Count(::GorillaTag::Cosmetics::Dreidel::Side value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // GorillaTag.Cosmetics.Dreidel/Side
    #pragma pack(pop)
    static check_size<sizeof(Dreidel::Side), 0 + sizeof(int)> __GorillaTag_Cosmetics_Dreidel_SideSizeCheck;
    static_assert(sizeof(Dreidel::Side) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: GorillaTag.Cosmetics.Dreidel/Variation
    // [TokenAttribute] Offset: FFFFFFFF
    struct Variation/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: Variation
      constexpr Variation(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public GorillaTag.Cosmetics.Dreidel/Variation Tumble
      static constexpr const int Tumble = 0;
      // Get static field: static public GorillaTag.Cosmetics.Dreidel/Variation Tumble
      static ::GorillaTag::Cosmetics::Dreidel::Variation _get_Tumble();
      // Set static field: static public GorillaTag.Cosmetics.Dreidel/Variation Tumble
      static void _set_Tumble(::GorillaTag::Cosmetics::Dreidel::Variation value);
      // static field const value: static public GorillaTag.Cosmetics.Dreidel/Variation Smooth
      static constexpr const int Smooth = 1;
      // Get static field: static public GorillaTag.Cosmetics.Dreidel/Variation Smooth
      static ::GorillaTag::Cosmetics::Dreidel::Variation _get_Smooth();
      // Set static field: static public GorillaTag.Cosmetics.Dreidel/Variation Smooth
      static void _set_Smooth(::GorillaTag::Cosmetics::Dreidel::Variation value);
      // static field const value: static public GorillaTag.Cosmetics.Dreidel/Variation Bounce
      static constexpr const int Bounce = 2;
      // Get static field: static public GorillaTag.Cosmetics.Dreidel/Variation Bounce
      static ::GorillaTag::Cosmetics::Dreidel::Variation _get_Bounce();
      // Set static field: static public GorillaTag.Cosmetics.Dreidel/Variation Bounce
      static void _set_Bounce(::GorillaTag::Cosmetics::Dreidel::Variation value);
      // static field const value: static public GorillaTag.Cosmetics.Dreidel/Variation SlowTurn
      static constexpr const int SlowTurn = 3;
      // Get static field: static public GorillaTag.Cosmetics.Dreidel/Variation SlowTurn
      static ::GorillaTag::Cosmetics::Dreidel::Variation _get_SlowTurn();
      // Set static field: static public GorillaTag.Cosmetics.Dreidel/Variation SlowTurn
      static void _set_SlowTurn(::GorillaTag::Cosmetics::Dreidel::Variation value);
      // static field const value: static public GorillaTag.Cosmetics.Dreidel/Variation FalseSlowTurn
      static constexpr const int FalseSlowTurn = 4;
      // Get static field: static public GorillaTag.Cosmetics.Dreidel/Variation FalseSlowTurn
      static ::GorillaTag::Cosmetics::Dreidel::Variation _get_FalseSlowTurn();
      // Set static field: static public GorillaTag.Cosmetics.Dreidel/Variation FalseSlowTurn
      static void _set_FalseSlowTurn(::GorillaTag::Cosmetics::Dreidel::Variation value);
      // static field const value: static public GorillaTag.Cosmetics.Dreidel/Variation Count
      static constexpr const int Count = 5;
      // Get static field: static public GorillaTag.Cosmetics.Dreidel/Variation Count
      static ::GorillaTag::Cosmetics::Dreidel::Variation _get_Count();
      // Set static field: static public GorillaTag.Cosmetics.Dreidel/Variation Count
      static void _set_Count(::GorillaTag::Cosmetics::Dreidel::Variation value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // GorillaTag.Cosmetics.Dreidel/Variation
    #pragma pack(pop)
    static check_size<sizeof(Dreidel::Variation), 0 + sizeof(int)> __GorillaTag_Cosmetics_Dreidel_VariationSizeCheck;
    static_assert(sizeof(Dreidel::Variation) == 0x4);
    public:
    // private UnityEngine.Transform spinTransform
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Transform* spinTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.MeshCollider dreidelCollider
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::MeshCollider* dreidelCollider;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshCollider*) == 0x8);
    // private UnityEngine.AudioSource audioSource
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::AudioSource* audioSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // private UnityEngine.AudioClip spinLoopAudio
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::AudioClip* spinLoopAudio;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // private UnityEngine.AudioClip fallSound
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::AudioClip* fallSound;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // private UnityEngine.AudioClip gimelConfettiSound
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::AudioClip* gimelConfettiSound;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // private UnityEngine.ParticleSystem gimelConfetti
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::ParticleSystem* gimelConfetti;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystem*) == 0x8);
    // private UnityEngine.Vector3 centerOfMassOffset
    // Size: 0xC
    // Offset: 0x58
    ::UnityEngine::Vector3 centerOfMassOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 bottomPointOffset
    // Size: 0xC
    // Offset: 0x64
    ::UnityEngine::Vector3 bottomPointOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector2 bodyRect
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::Vector2 bodyRect;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private System.Single confettiHeight
    // Size: 0x4
    // Offset: 0x78
    float confettiHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single surfaceCheckDistance
    // Size: 0x4
    // Offset: 0x7C
    float surfaceCheckDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single surfaceUprightThreshold
    // Size: 0x4
    // Offset: 0x80
    float surfaceUprightThreshold;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single surfaceDreidelAngleThreshold
    // Size: 0x4
    // Offset: 0x84
    float surfaceDreidelAngleThreshold;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.LayerMask surfaceLayers
    // Size: 0x4
    // Offset: 0x88
    ::UnityEngine::LayerMask surfaceLayers;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // private System.Single spinSpeedStart
    // Size: 0x4
    // Offset: 0x8C
    float spinSpeedStart;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single spinSpeedEnd
    // Size: 0x4
    // Offset: 0x90
    float spinSpeedEnd;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single spinTime
    // Size: 0x4
    // Offset: 0x94
    float spinTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector2 spinTimeRange
    // Size: 0x8
    // Offset: 0x98
    ::UnityEngine::Vector2 spinTimeRange;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private System.Single spinWobbleFrequency
    // Size: 0x4
    // Offset: 0xA0
    float spinWobbleFrequency;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single spinWobbleAmplitude
    // Size: 0x4
    // Offset: 0xA4
    float spinWobbleAmplitude;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single spinWobbleAmplitudeEndMin
    // Size: 0x4
    // Offset: 0xA8
    float spinWobbleAmplitudeEndMin;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single tiltFrontBack
    // Size: 0x4
    // Offset: 0xAC
    float tiltFrontBack;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single tiltLeftRight
    // Size: 0x4
    // Offset: 0xB0
    float tiltLeftRight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single groundTrackingDampingRatio
    // Size: 0x4
    // Offset: 0xB4
    float groundTrackingDampingRatio;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single groundTrackingFrequency
    // Size: 0x4
    // Offset: 0xB8
    float groundTrackingFrequency;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single pathMoveSpeed
    // Size: 0x4
    // Offset: 0xBC
    float pathMoveSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single pathStartTurnRate
    // Size: 0x4
    // Offset: 0xC0
    float pathStartTurnRate;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single pathEndTurnRate
    // Size: 0x4
    // Offset: 0xC4
    float pathEndTurnRate;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single pathTurnRateSinOffset
    // Size: 0x4
    // Offset: 0xC8
    float pathTurnRateSinOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single spinSpeedStopRate
    // Size: 0x4
    // Offset: 0xCC
    float spinSpeedStopRate;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single tumbleFallDampingRatio
    // Size: 0x4
    // Offset: 0xD0
    float tumbleFallDampingRatio;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single tumbleFallFrequency
    // Size: 0x4
    // Offset: 0xD4
    float tumbleFallFrequency;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single tumbleFallFrontBackDampingRatio
    // Size: 0x4
    // Offset: 0xD8
    float tumbleFallFrontBackDampingRatio;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single tumbleFallFrontBackFrequency
    // Size: 0x4
    // Offset: 0xDC
    float tumbleFallFrontBackFrequency;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single smoothFallDampingRatio
    // Size: 0x4
    // Offset: 0xE0
    float smoothFallDampingRatio;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single smoothFallFrequency
    // Size: 0x4
    // Offset: 0xE4
    float smoothFallFrequency;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single slowTurnDampingRatio
    // Size: 0x4
    // Offset: 0xE8
    float slowTurnDampingRatio;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single slowTurnFrequency
    // Size: 0x4
    // Offset: 0xEC
    float slowTurnFrequency;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single bounceFallSwitchTime
    // Size: 0x4
    // Offset: 0xF0
    float bounceFallSwitchTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single slowTurnSwitchTime
    // Size: 0x4
    // Offset: 0xF4
    float slowTurnSwitchTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single respawnTimeAfterLanding
    // Size: 0x4
    // Offset: 0xF8
    float respawnTimeAfterLanding;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single fallTimeTumble
    // Size: 0x4
    // Offset: 0xFC
    float fallTimeTumble;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single fallTimeSlowTurn
    // Size: 0x4
    // Offset: 0x100
    float fallTimeSlowTurn;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private GorillaTag.Cosmetics.Dreidel/State state
    // Size: 0x4
    // Offset: 0x104
    ::GorillaTag::Cosmetics::Dreidel::State state;
    // Field size check
    static_assert(sizeof(::GorillaTag::Cosmetics::Dreidel::State) == 0x4);
    // private System.Double stateStartTime
    // Size: 0x8
    // Offset: 0x108
    double stateStartTime;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Single spinSpeed
    // Size: 0x4
    // Offset: 0x110
    float spinSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single spinAngle
    // Size: 0x4
    // Offset: 0x114
    float spinAngle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector3 spinAxis
    // Size: 0xC
    // Offset: 0x118
    ::UnityEngine::Vector3 spinAxis;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Boolean canStartSpin
    // Size: 0x1
    // Offset: 0x124
    bool canStartSpin;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: canStartSpin and: spinStartTime
    char __padding49[0x3] = {};
    // private System.Double spinStartTime
    // Size: 0x8
    // Offset: 0x128
    double spinStartTime;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Single tiltWobble
    // Size: 0x4
    // Offset: 0x130
    float tiltWobble;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean falseTargetReached
    // Size: 0x1
    // Offset: 0x134
    bool falseTargetReached;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean hasLanded
    // Size: 0x1
    // Offset: 0x135
    bool hasLanded;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: hasLanded and: pathOffset
    char __padding53[0x2] = {};
    // private UnityEngine.Vector3 pathOffset
    // Size: 0xC
    // Offset: 0x138
    ::UnityEngine::Vector3 pathOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 pathDir
    // Size: 0xC
    // Offset: 0x144
    ::UnityEngine::Vector3 pathDir;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 surfacePlanePoint
    // Size: 0xC
    // Offset: 0x150
    ::UnityEngine::Vector3 surfacePlanePoint;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 surfacePlaneNormal
    // Size: 0xC
    // Offset: 0x15C
    ::UnityEngine::Vector3 surfacePlaneNormal;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private CjLib.FloatSpring tiltFrontBackSpring
    // Size: 0x8
    // Offset: 0x168
    ::CjLib::FloatSpring tiltFrontBackSpring;
    // Field size check
    static_assert(sizeof(::CjLib::FloatSpring) == 0x8);
    // private CjLib.FloatSpring tiltLeftRightSpring
    // Size: 0x8
    // Offset: 0x170
    ::CjLib::FloatSpring tiltLeftRightSpring;
    // Field size check
    static_assert(sizeof(::CjLib::FloatSpring) == 0x8);
    // private CjLib.FloatSpring spinSpeedSpring
    // Size: 0x8
    // Offset: 0x178
    ::CjLib::FloatSpring spinSpeedSpring;
    // Field size check
    static_assert(sizeof(::CjLib::FloatSpring) == 0x8);
    // private CjLib.Vector3Spring groundPointSpring
    // Size: 0x20
    // Offset: 0x180
    ::CjLib::Vector3Spring groundPointSpring;
    // Field size check
    static_assert(sizeof(::CjLib::Vector3Spring) == 0x20);
    // private UnityEngine.Vector2[] landingTiltValues
    // Size: 0x8
    // Offset: 0x1A0
    ::ArrayW<::UnityEngine::Vector2> landingTiltValues;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector2>) == 0x8);
    // private UnityEngine.Vector2 landingTiltLeadingTarget
    // Size: 0x8
    // Offset: 0x1A8
    ::UnityEngine::Vector2 landingTiltLeadingTarget;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private UnityEngine.Vector2 landingTiltTarget
    // Size: 0x8
    // Offset: 0x1B0
    ::UnityEngine::Vector2 landingTiltTarget;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private GorillaTag.Cosmetics.Dreidel/Side landingSide
    // Size: 0x4
    // Offset: 0x1B8
    ::GorillaTag::Cosmetics::Dreidel::Side landingSide;
    // Field size check
    static_assert(sizeof(::GorillaTag::Cosmetics::Dreidel::Side) == 0x4);
    // private GorillaTag.Cosmetics.Dreidel/Variation landingVariation
    // Size: 0x4
    // Offset: 0x1BC
    ::GorillaTag::Cosmetics::Dreidel::Variation landingVariation;
    // Field size check
    static_assert(sizeof(::GorillaTag::Cosmetics::Dreidel::Variation) == 0x4);
    // private System.Boolean spinCounterClockwise
    // Size: 0x1
    // Offset: 0x1C0
    bool spinCounterClockwise;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean debugDraw
    // Size: 0x1
    // Offset: 0x1C1
    bool debugDraw;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private UnityEngine.Transform spinTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_spinTransform();
    // Get instance field reference: private UnityEngine.MeshCollider dreidelCollider
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshCollider*& dyn_dreidelCollider();
    // Get instance field reference: private UnityEngine.AudioSource audioSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_audioSource();
    // Get instance field reference: private UnityEngine.AudioClip spinLoopAudio
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_spinLoopAudio();
    // Get instance field reference: private UnityEngine.AudioClip fallSound
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_fallSound();
    // Get instance field reference: private UnityEngine.AudioClip gimelConfettiSound
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_gimelConfettiSound();
    // Get instance field reference: private UnityEngine.ParticleSystem gimelConfetti
    [[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& dyn_gimelConfetti();
    // Get instance field reference: private UnityEngine.Vector3 centerOfMassOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_centerOfMassOffset();
    // Get instance field reference: private UnityEngine.Vector3 bottomPointOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_bottomPointOffset();
    // Get instance field reference: private UnityEngine.Vector2 bodyRect
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_bodyRect();
    // Get instance field reference: private System.Single confettiHeight
    [[deprecated("Use field access instead!")]] float& dyn_confettiHeight();
    // Get instance field reference: private System.Single surfaceCheckDistance
    [[deprecated("Use field access instead!")]] float& dyn_surfaceCheckDistance();
    // Get instance field reference: private System.Single surfaceUprightThreshold
    [[deprecated("Use field access instead!")]] float& dyn_surfaceUprightThreshold();
    // Get instance field reference: private System.Single surfaceDreidelAngleThreshold
    [[deprecated("Use field access instead!")]] float& dyn_surfaceDreidelAngleThreshold();
    // Get instance field reference: private UnityEngine.LayerMask surfaceLayers
    [[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& dyn_surfaceLayers();
    // Get instance field reference: private System.Single spinSpeedStart
    [[deprecated("Use field access instead!")]] float& dyn_spinSpeedStart();
    // Get instance field reference: private System.Single spinSpeedEnd
    [[deprecated("Use field access instead!")]] float& dyn_spinSpeedEnd();
    // Get instance field reference: private System.Single spinTime
    [[deprecated("Use field access instead!")]] float& dyn_spinTime();
    // Get instance field reference: private UnityEngine.Vector2 spinTimeRange
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_spinTimeRange();
    // Get instance field reference: private System.Single spinWobbleFrequency
    [[deprecated("Use field access instead!")]] float& dyn_spinWobbleFrequency();
    // Get instance field reference: private System.Single spinWobbleAmplitude
    [[deprecated("Use field access instead!")]] float& dyn_spinWobbleAmplitude();
    // Get instance field reference: private System.Single spinWobbleAmplitudeEndMin
    [[deprecated("Use field access instead!")]] float& dyn_spinWobbleAmplitudeEndMin();
    // Get instance field reference: private System.Single tiltFrontBack
    [[deprecated("Use field access instead!")]] float& dyn_tiltFrontBack();
    // Get instance field reference: private System.Single tiltLeftRight
    [[deprecated("Use field access instead!")]] float& dyn_tiltLeftRight();
    // Get instance field reference: private System.Single groundTrackingDampingRatio
    [[deprecated("Use field access instead!")]] float& dyn_groundTrackingDampingRatio();
    // Get instance field reference: private System.Single groundTrackingFrequency
    [[deprecated("Use field access instead!")]] float& dyn_groundTrackingFrequency();
    // Get instance field reference: private System.Single pathMoveSpeed
    [[deprecated("Use field access instead!")]] float& dyn_pathMoveSpeed();
    // Get instance field reference: private System.Single pathStartTurnRate
    [[deprecated("Use field access instead!")]] float& dyn_pathStartTurnRate();
    // Get instance field reference: private System.Single pathEndTurnRate
    [[deprecated("Use field access instead!")]] float& dyn_pathEndTurnRate();
    // Get instance field reference: private System.Single pathTurnRateSinOffset
    [[deprecated("Use field access instead!")]] float& dyn_pathTurnRateSinOffset();
    // Get instance field reference: private System.Single spinSpeedStopRate
    [[deprecated("Use field access instead!")]] float& dyn_spinSpeedStopRate();
    // Get instance field reference: private System.Single tumbleFallDampingRatio
    [[deprecated("Use field access instead!")]] float& dyn_tumbleFallDampingRatio();
    // Get instance field reference: private System.Single tumbleFallFrequency
    [[deprecated("Use field access instead!")]] float& dyn_tumbleFallFrequency();
    // Get instance field reference: private System.Single tumbleFallFrontBackDampingRatio
    [[deprecated("Use field access instead!")]] float& dyn_tumbleFallFrontBackDampingRatio();
    // Get instance field reference: private System.Single tumbleFallFrontBackFrequency
    [[deprecated("Use field access instead!")]] float& dyn_tumbleFallFrontBackFrequency();
    // Get instance field reference: private System.Single smoothFallDampingRatio
    [[deprecated("Use field access instead!")]] float& dyn_smoothFallDampingRatio();
    // Get instance field reference: private System.Single smoothFallFrequency
    [[deprecated("Use field access instead!")]] float& dyn_smoothFallFrequency();
    // Get instance field reference: private System.Single slowTurnDampingRatio
    [[deprecated("Use field access instead!")]] float& dyn_slowTurnDampingRatio();
    // Get instance field reference: private System.Single slowTurnFrequency
    [[deprecated("Use field access instead!")]] float& dyn_slowTurnFrequency();
    // Get instance field reference: private System.Single bounceFallSwitchTime
    [[deprecated("Use field access instead!")]] float& dyn_bounceFallSwitchTime();
    // Get instance field reference: private System.Single slowTurnSwitchTime
    [[deprecated("Use field access instead!")]] float& dyn_slowTurnSwitchTime();
    // Get instance field reference: private System.Single respawnTimeAfterLanding
    [[deprecated("Use field access instead!")]] float& dyn_respawnTimeAfterLanding();
    // Get instance field reference: private System.Single fallTimeTumble
    [[deprecated("Use field access instead!")]] float& dyn_fallTimeTumble();
    // Get instance field reference: private System.Single fallTimeSlowTurn
    [[deprecated("Use field access instead!")]] float& dyn_fallTimeSlowTurn();
    // Get instance field reference: private GorillaTag.Cosmetics.Dreidel/State state
    [[deprecated("Use field access instead!")]] ::GorillaTag::Cosmetics::Dreidel::State& dyn_state();
    // Get instance field reference: private System.Double stateStartTime
    [[deprecated("Use field access instead!")]] double& dyn_stateStartTime();
    // Get instance field reference: private System.Single spinSpeed
    [[deprecated("Use field access instead!")]] float& dyn_spinSpeed();
    // Get instance field reference: private System.Single spinAngle
    [[deprecated("Use field access instead!")]] float& dyn_spinAngle();
    // Get instance field reference: private UnityEngine.Vector3 spinAxis
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_spinAxis();
    // Get instance field reference: private System.Boolean canStartSpin
    [[deprecated("Use field access instead!")]] bool& dyn_canStartSpin();
    // Get instance field reference: private System.Double spinStartTime
    [[deprecated("Use field access instead!")]] double& dyn_spinStartTime();
    // Get instance field reference: private System.Single tiltWobble
    [[deprecated("Use field access instead!")]] float& dyn_tiltWobble();
    // Get instance field reference: private System.Boolean falseTargetReached
    [[deprecated("Use field access instead!")]] bool& dyn_falseTargetReached();
    // Get instance field reference: private System.Boolean hasLanded
    [[deprecated("Use field access instead!")]] bool& dyn_hasLanded();
    // Get instance field reference: private UnityEngine.Vector3 pathOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_pathOffset();
    // Get instance field reference: private UnityEngine.Vector3 pathDir
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_pathDir();
    // Get instance field reference: private UnityEngine.Vector3 surfacePlanePoint
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_surfacePlanePoint();
    // Get instance field reference: private UnityEngine.Vector3 surfacePlaneNormal
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_surfacePlaneNormal();
    // Get instance field reference: private CjLib.FloatSpring tiltFrontBackSpring
    [[deprecated("Use field access instead!")]] ::CjLib::FloatSpring& dyn_tiltFrontBackSpring();
    // Get instance field reference: private CjLib.FloatSpring tiltLeftRightSpring
    [[deprecated("Use field access instead!")]] ::CjLib::FloatSpring& dyn_tiltLeftRightSpring();
    // Get instance field reference: private CjLib.FloatSpring spinSpeedSpring
    [[deprecated("Use field access instead!")]] ::CjLib::FloatSpring& dyn_spinSpeedSpring();
    // Get instance field reference: private CjLib.Vector3Spring groundPointSpring
    [[deprecated("Use field access instead!")]] ::CjLib::Vector3Spring& dyn_groundPointSpring();
    // Get instance field reference: private UnityEngine.Vector2[] landingTiltValues
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector2>& dyn_landingTiltValues();
    // Get instance field reference: private UnityEngine.Vector2 landingTiltLeadingTarget
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_landingTiltLeadingTarget();
    // Get instance field reference: private UnityEngine.Vector2 landingTiltTarget
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_landingTiltTarget();
    // Get instance field reference: private GorillaTag.Cosmetics.Dreidel/Side landingSide
    [[deprecated("Use field access instead!")]] ::GorillaTag::Cosmetics::Dreidel::Side& dyn_landingSide();
    // Get instance field reference: private GorillaTag.Cosmetics.Dreidel/Variation landingVariation
    [[deprecated("Use field access instead!")]] ::GorillaTag::Cosmetics::Dreidel::Variation& dyn_landingVariation();
    // Get instance field reference: private System.Boolean spinCounterClockwise
    [[deprecated("Use field access instead!")]] bool& dyn_spinCounterClockwise();
    // Get instance field reference: private System.Boolean debugDraw
    [[deprecated("Use field access instead!")]] bool& dyn_debugDraw();
    // public System.Boolean TrySetIdle()
    // Offset: 0x28BF5A0
    bool TrySetIdle();
    // public System.Boolean TryCheckForSurfaces()
    // Offset: 0x28BF4B4
    bool TryCheckForSurfaces();
    // public System.Void Spin()
    // Offset: 0x28BFC0C
    void Spin();
    // public System.Boolean TryGetSpinStartData(out UnityEngine.Vector3 surfacePoint, out UnityEngine.Vector3 surfaceNormal, out System.Single randomDuration, out GorillaTag.Cosmetics.Dreidel/Side randomSide, out GorillaTag.Cosmetics.Dreidel/Variation randomVariation, out System.Double startTime)
    // Offset: 0x28BFA54
    bool TryGetSpinStartData(ByRef<::UnityEngine::Vector3> surfacePoint, ByRef<::UnityEngine::Vector3> surfaceNormal, ByRef<float> randomDuration, ByRef<::GorillaTag::Cosmetics::Dreidel::Side> randomSide, ByRef<::GorillaTag::Cosmetics::Dreidel::Variation> randomVariation, ByRef<double> startTime);
    // public System.Void SetSpinStartData(UnityEngine.Vector3 surfacePoint, UnityEngine.Vector3 surfaceNormal, System.Single duration, System.Boolean counterClockwise, GorillaTag.Cosmetics.Dreidel/Side side, GorillaTag.Cosmetics.Dreidel/Variation variation, System.Double startTime)
    // Offset: 0x28BFBD8
    void SetSpinStartData(::UnityEngine::Vector3 surfacePoint, ::UnityEngine::Vector3 surfaceNormal, float duration, bool counterClockwise, ::GorillaTag::Cosmetics::Dreidel::Side side, ::GorillaTag::Cosmetics::Dreidel::Variation variation, double startTime);
    // private System.Void LateUpdate()
    // Offset: 0x28C1DC8
    void LateUpdate();
    // private System.Void StartIdle()
    // Offset: 0x28C1678
    void StartIdle();
    // private System.Void StartFindingSurfaces()
    // Offset: 0x28C194C
    void StartFindingSurfaces();
    // private System.Void StartSpin()
    // Offset: 0x28C1C24
    void StartSpin();
    // private System.Void StartFall()
    // Offset: 0x28C31A8
    void StartFall();
    // private UnityEngine.Vector3 GetGroundContactPoint()
    // Offset: 0x28C2CD4
    ::UnityEngine::Vector3 GetGroundContactPoint();
    // private System.Void GetTiltVectorsForSideWithPrev(GorillaTag.Cosmetics.Dreidel/Side side, out UnityEngine.Vector2 sideTilt, out UnityEngine.Vector2 prevSideTilt)
    // Offset: 0x28C337C
    void GetTiltVectorsForSideWithPrev(::GorillaTag::Cosmetics::Dreidel::Side side, ByRef<::UnityEngine::Vector2> sideTilt, ByRef<::UnityEngine::Vector2> prevSideTilt);
    // private System.Void GetTiltVectorsForSideWithNext(GorillaTag.Cosmetics.Dreidel/Side side, out UnityEngine.Vector2 sideTilt, out UnityEngine.Vector2 nextSideTilt)
    // Offset: 0x28C3454
    void GetTiltVectorsForSideWithNext(::GorillaTag::Cosmetics::Dreidel::Side side, ByRef<::UnityEngine::Vector2> sideTilt, ByRef<::UnityEngine::Vector2> nextSideTilt);
    // private System.Void AlignToSurfacePlane()
    // Offset: 0x28C2B48
    void AlignToSurfacePlane();
    // private System.Void UpdateSpinTransform()
    // Offset: 0x28C2E08
    void UpdateSpinTransform();
    // public System.Void .ctor()
    // Offset: 0x28C3538
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Dreidel* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaTag::Cosmetics::Dreidel::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Dreidel*, creationType>()));
    }
  }; // GorillaTag.Cosmetics.Dreidel
  #pragma pack(pop)
  static check_size<sizeof(Dreidel), 449 + sizeof(bool)> __GorillaTag_Cosmetics_DreidelSizeCheck;
  static_assert(sizeof(Dreidel) == 0x1C2);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GorillaTag::Cosmetics::Dreidel::Variation, "GorillaTag.Cosmetics", "Dreidel/Variation");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GorillaTag::Cosmetics::Dreidel::Side, "GorillaTag.Cosmetics", "Dreidel/Side");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GorillaTag::Cosmetics::Dreidel::State, "GorillaTag.Cosmetics", "Dreidel/State");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaTag::Cosmetics::Dreidel::TrySetIdle
// Il2CppName: TrySetIdle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaTag::Cosmetics::Dreidel::*)()>(&GorillaTag::Cosmetics::Dreidel::TrySetIdle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::Dreidel*), "TrySetIdle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::Dreidel::TryCheckForSurfaces
// Il2CppName: TryCheckForSurfaces
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaTag::Cosmetics::Dreidel::*)()>(&GorillaTag::Cosmetics::Dreidel::TryCheckForSurfaces)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::Dreidel*), "TryCheckForSurfaces", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::Dreidel::Spin
// Il2CppName: Spin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Cosmetics::Dreidel::*)()>(&GorillaTag::Cosmetics::Dreidel::Spin)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::Dreidel*), "Spin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::Dreidel::TryGetSpinStartData
// Il2CppName: TryGetSpinStartData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaTag::Cosmetics::Dreidel::*)(ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Vector3>, ByRef<float>, ByRef<::GorillaTag::Cosmetics::Dreidel::Side>, ByRef<::GorillaTag::Cosmetics::Dreidel::Variation>, ByRef<double>)>(&GorillaTag::Cosmetics::Dreidel::TryGetSpinStartData)> {
  static const MethodInfo* get() {
    static auto* surfacePoint = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* surfaceNormal = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* randomDuration = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* randomSide = &::il2cpp_utils::GetClassFromName("GorillaTag.Cosmetics", "Dreidel/Side")->this_arg;
    static auto* randomVariation = &::il2cpp_utils::GetClassFromName("GorillaTag.Cosmetics", "Dreidel/Variation")->this_arg;
    static auto* startTime = &::il2cpp_utils::GetClassFromName("System", "Double")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::Dreidel*), "TryGetSpinStartData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{surfacePoint, surfaceNormal, randomDuration, randomSide, randomVariation, startTime});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::Dreidel::SetSpinStartData
// Il2CppName: SetSpinStartData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Cosmetics::Dreidel::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, float, bool, ::GorillaTag::Cosmetics::Dreidel::Side, ::GorillaTag::Cosmetics::Dreidel::Variation, double)>(&GorillaTag::Cosmetics::Dreidel::SetSpinStartData)> {
  static const MethodInfo* get() {
    static auto* surfacePoint = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* surfaceNormal = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* counterClockwise = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* side = &::il2cpp_utils::GetClassFromName("GorillaTag.Cosmetics", "Dreidel/Side")->byval_arg;
    static auto* variation = &::il2cpp_utils::GetClassFromName("GorillaTag.Cosmetics", "Dreidel/Variation")->byval_arg;
    static auto* startTime = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::Dreidel*), "SetSpinStartData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{surfacePoint, surfaceNormal, duration, counterClockwise, side, variation, startTime});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::Dreidel::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Cosmetics::Dreidel::*)()>(&GorillaTag::Cosmetics::Dreidel::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::Dreidel*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::Dreidel::StartIdle
// Il2CppName: StartIdle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Cosmetics::Dreidel::*)()>(&GorillaTag::Cosmetics::Dreidel::StartIdle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::Dreidel*), "StartIdle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::Dreidel::StartFindingSurfaces
// Il2CppName: StartFindingSurfaces
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Cosmetics::Dreidel::*)()>(&GorillaTag::Cosmetics::Dreidel::StartFindingSurfaces)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::Dreidel*), "StartFindingSurfaces", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::Dreidel::StartSpin
// Il2CppName: StartSpin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Cosmetics::Dreidel::*)()>(&GorillaTag::Cosmetics::Dreidel::StartSpin)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::Dreidel*), "StartSpin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::Dreidel::StartFall
// Il2CppName: StartFall
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Cosmetics::Dreidel::*)()>(&GorillaTag::Cosmetics::Dreidel::StartFall)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::Dreidel*), "StartFall", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::Dreidel::GetGroundContactPoint
// Il2CppName: GetGroundContactPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GorillaTag::Cosmetics::Dreidel::*)()>(&GorillaTag::Cosmetics::Dreidel::GetGroundContactPoint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::Dreidel*), "GetGroundContactPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::Dreidel::GetTiltVectorsForSideWithPrev
// Il2CppName: GetTiltVectorsForSideWithPrev
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Cosmetics::Dreidel::*)(::GorillaTag::Cosmetics::Dreidel::Side, ByRef<::UnityEngine::Vector2>, ByRef<::UnityEngine::Vector2>)>(&GorillaTag::Cosmetics::Dreidel::GetTiltVectorsForSideWithPrev)> {
  static const MethodInfo* get() {
    static auto* side = &::il2cpp_utils::GetClassFromName("GorillaTag.Cosmetics", "Dreidel/Side")->byval_arg;
    static auto* sideTilt = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->this_arg;
    static auto* prevSideTilt = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::Dreidel*), "GetTiltVectorsForSideWithPrev", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{side, sideTilt, prevSideTilt});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::Dreidel::GetTiltVectorsForSideWithNext
// Il2CppName: GetTiltVectorsForSideWithNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Cosmetics::Dreidel::*)(::GorillaTag::Cosmetics::Dreidel::Side, ByRef<::UnityEngine::Vector2>, ByRef<::UnityEngine::Vector2>)>(&GorillaTag::Cosmetics::Dreidel::GetTiltVectorsForSideWithNext)> {
  static const MethodInfo* get() {
    static auto* side = &::il2cpp_utils::GetClassFromName("GorillaTag.Cosmetics", "Dreidel/Side")->byval_arg;
    static auto* sideTilt = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->this_arg;
    static auto* nextSideTilt = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::Dreidel*), "GetTiltVectorsForSideWithNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{side, sideTilt, nextSideTilt});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::Dreidel::AlignToSurfacePlane
// Il2CppName: AlignToSurfacePlane
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Cosmetics::Dreidel::*)()>(&GorillaTag::Cosmetics::Dreidel::AlignToSurfacePlane)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::Dreidel*), "AlignToSurfacePlane", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::Dreidel::UpdateSpinTransform
// Il2CppName: UpdateSpinTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Cosmetics::Dreidel::*)()>(&GorillaTag::Cosmetics::Dreidel::UpdateSpinTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::Dreidel*), "UpdateSpinTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::Dreidel::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
