// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: GorillaTag.Cosmetics.RCVehicle
#include "GorillaTag/Cosmetics/RCVehicle.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Collider
  class Collider;
}
// Completed forward declares
// Type namespace: GorillaTag.Cosmetics
namespace GorillaTag::Cosmetics {
  // Forward declaring type: RCHelicopter
  class RCHelicopter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaTag::Cosmetics::RCHelicopter);
DEFINE_IL2CPP_ARG_TYPE(::GorillaTag::Cosmetics::RCHelicopter*, "GorillaTag.Cosmetics", "RCHelicopter");
// Type namespace: GorillaTag.Cosmetics
namespace GorillaTag::Cosmetics {
  // Size: 0x144
  #pragma pack(push, 1)
  // Autogenerated type: GorillaTag.Cosmetics.RCHelicopter
  // [TokenAttribute] Offset: FFFFFFFF
  class RCHelicopter : public ::GorillaTag::Cosmetics::RCVehicle {
    public:
    public:
    // private System.Single maxAscendSpeed
    // Size: 0x4
    // Offset: 0xC8
    float maxAscendSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single ascendAccelTime
    // Size: 0x4
    // Offset: 0xCC
    float ascendAccelTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single gravityCompensation
    // Size: 0x4
    // Offset: 0xD0
    float gravityCompensation;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single maxTurnRate
    // Size: 0x4
    // Offset: 0xD4
    float maxTurnRate;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single turnAccelTime
    // Size: 0x4
    // Offset: 0xD8
    float turnAccelTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single maxHorizontalSpeed
    // Size: 0x4
    // Offset: 0xDC
    float maxHorizontalSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single horizontalAccelTime
    // Size: 0x4
    // Offset: 0xE0
    float horizontalAccelTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single maxHorizontalTiltAngle
    // Size: 0x4
    // Offset: 0xE4
    float maxHorizontalTiltAngle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector2 mainPropellerSpinRateRange
    // Size: 0x8
    // Offset: 0xE8
    ::UnityEngine::Vector2 mainPropellerSpinRateRange;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private System.Single backPropellerSpinRate
    // Size: 0x4
    // Offset: 0xF0
    float backPropellerSpinRate;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: backPropellerSpinRate and: verticalPropeller
    char __padding9[0x4] = {};
    // private UnityEngine.Transform verticalPropeller
    // Size: 0x8
    // Offset: 0xF8
    ::UnityEngine::Transform* verticalPropeller;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform turnPropeller
    // Size: 0x8
    // Offset: 0x100
    ::UnityEngine::Transform* turnPropeller;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Quaternion verticalPropellerBaseRotation
    // Size: 0x10
    // Offset: 0x108
    ::UnityEngine::Quaternion verticalPropellerBaseRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private UnityEngine.Quaternion turnPropellerBaseRotation
    // Size: 0x10
    // Offset: 0x118
    ::UnityEngine::Quaternion turnPropellerBaseRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private System.Single mainPropellerAngle
    // Size: 0x4
    // Offset: 0x128
    float mainPropellerAngle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single backPropellerAngle
    // Size: 0x4
    // Offset: 0x12C
    float backPropellerAngle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single turnRate
    // Size: 0x4
    // Offset: 0x130
    float turnRate;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single turnAngle
    // Size: 0x4
    // Offset: 0x134
    float turnAngle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single ascendAccel
    // Size: 0x4
    // Offset: 0x138
    float ascendAccel;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single turnAccel
    // Size: 0x4
    // Offset: 0x13C
    float turnAccel;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single horizontalAccel
    // Size: 0x4
    // Offset: 0x140
    float horizontalAccel;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: private System.Single maxAscendSpeed
    [[deprecated("Use field access instead!")]] float& dyn_maxAscendSpeed();
    // Get instance field reference: private System.Single ascendAccelTime
    [[deprecated("Use field access instead!")]] float& dyn_ascendAccelTime();
    // Get instance field reference: private System.Single gravityCompensation
    [[deprecated("Use field access instead!")]] float& dyn_gravityCompensation();
    // Get instance field reference: private System.Single maxTurnRate
    [[deprecated("Use field access instead!")]] float& dyn_maxTurnRate();
    // Get instance field reference: private System.Single turnAccelTime
    [[deprecated("Use field access instead!")]] float& dyn_turnAccelTime();
    // Get instance field reference: private System.Single maxHorizontalSpeed
    [[deprecated("Use field access instead!")]] float& dyn_maxHorizontalSpeed();
    // Get instance field reference: private System.Single horizontalAccelTime
    [[deprecated("Use field access instead!")]] float& dyn_horizontalAccelTime();
    // Get instance field reference: private System.Single maxHorizontalTiltAngle
    [[deprecated("Use field access instead!")]] float& dyn_maxHorizontalTiltAngle();
    // Get instance field reference: private UnityEngine.Vector2 mainPropellerSpinRateRange
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_mainPropellerSpinRateRange();
    // Get instance field reference: private System.Single backPropellerSpinRate
    [[deprecated("Use field access instead!")]] float& dyn_backPropellerSpinRate();
    // Get instance field reference: private UnityEngine.Transform verticalPropeller
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_verticalPropeller();
    // Get instance field reference: private UnityEngine.Transform turnPropeller
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_turnPropeller();
    // Get instance field reference: private UnityEngine.Quaternion verticalPropellerBaseRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_verticalPropellerBaseRotation();
    // Get instance field reference: private UnityEngine.Quaternion turnPropellerBaseRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_turnPropellerBaseRotation();
    // Get instance field reference: private System.Single mainPropellerAngle
    [[deprecated("Use field access instead!")]] float& dyn_mainPropellerAngle();
    // Get instance field reference: private System.Single backPropellerAngle
    [[deprecated("Use field access instead!")]] float& dyn_backPropellerAngle();
    // Get instance field reference: private System.Single turnRate
    [[deprecated("Use field access instead!")]] float& dyn_turnRate();
    // Get instance field reference: private System.Single turnAngle
    [[deprecated("Use field access instead!")]] float& dyn_turnAngle();
    // Get instance field reference: private System.Single ascendAccel
    [[deprecated("Use field access instead!")]] float& dyn_ascendAccel();
    // Get instance field reference: private System.Single turnAccel
    [[deprecated("Use field access instead!")]] float& dyn_turnAccel();
    // Get instance field reference: private System.Single horizontalAccel
    [[deprecated("Use field access instead!")]] float& dyn_horizontalAccel();
    // private System.Void FixedUpdate()
    // Offset: 0x28BA8A0
    void FixedUpdate();
    // private System.Void OnTriggerEnter(UnityEngine.Collider other)
    // Offset: 0x28BAE2C
    void OnTriggerEnter(::UnityEngine::Collider* other);
    // protected override System.Void AuthorityBeginDocked()
    // Offset: 0x28BA398
    // Implemented from: GorillaTag.Cosmetics.RCVehicle
    // Base method: System.Void RCVehicle::AuthorityBeginDocked()
    void AuthorityBeginDocked();
    // protected override System.Void Awake()
    // Offset: 0x28BA724
    // Implemented from: GorillaTag.Cosmetics.RCVehicle
    // Base method: System.Void RCVehicle::Awake()
    void Awake();
    // protected override System.Void SharedUpdate(System.Single dt)
    // Offset: 0x28BA7F8
    // Implemented from: GorillaTag.Cosmetics.RCVehicle
    // Base method: System.Void RCVehicle::SharedUpdate(System.Single dt)
    void SharedUpdate(float dt);
    // public System.Void .ctor()
    // Offset: 0x28BAE80
    // Implemented from: GorillaTag.Cosmetics.RCVehicle
    // Base method: System.Void RCVehicle::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RCHelicopter* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaTag::Cosmetics::RCHelicopter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RCHelicopter*, creationType>()));
    }
  }; // GorillaTag.Cosmetics.RCHelicopter
  #pragma pack(pop)
  static check_size<sizeof(RCHelicopter), 320 + sizeof(float)> __GorillaTag_Cosmetics_RCHelicopterSizeCheck;
  static_assert(sizeof(RCHelicopter) == 0x144);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaTag::Cosmetics::RCHelicopter::FixedUpdate
// Il2CppName: FixedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Cosmetics::RCHelicopter::*)()>(&GorillaTag::Cosmetics::RCHelicopter::FixedUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::RCHelicopter*), "FixedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::RCHelicopter::OnTriggerEnter
// Il2CppName: OnTriggerEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Cosmetics::RCHelicopter::*)(::UnityEngine::Collider*)>(&GorillaTag::Cosmetics::RCHelicopter::OnTriggerEnter)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::RCHelicopter*), "OnTriggerEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::RCHelicopter::AuthorityBeginDocked
// Il2CppName: AuthorityBeginDocked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Cosmetics::RCHelicopter::*)()>(&GorillaTag::Cosmetics::RCHelicopter::AuthorityBeginDocked)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::RCHelicopter*), "AuthorityBeginDocked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::RCHelicopter::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Cosmetics::RCHelicopter::*)()>(&GorillaTag::Cosmetics::RCHelicopter::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::RCHelicopter*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::RCHelicopter::SharedUpdate
// Il2CppName: SharedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Cosmetics::RCHelicopter::*)(float)>(&GorillaTag::Cosmetics::RCHelicopter::SharedUpdate)> {
  static const MethodInfo* get() {
    static auto* dt = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::RCHelicopter*), "SharedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dt});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::RCHelicopter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
