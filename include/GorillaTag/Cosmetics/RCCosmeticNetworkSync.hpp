// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Pun.MonoBehaviourPun
#include "Photon/Pun/MonoBehaviourPun.hpp"
// Including type: Photon.Pun.IPunObservable
#include "Photon/Pun/IPunObservable.hpp"
// Including type: Photon.Pun.IPunInstantiateMagicCallback
#include "Photon/Pun/IPunInstantiateMagicCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GorillaTag::Cosmetics
namespace GorillaTag::Cosmetics {
  // Forward declaring type: RCRemoteHoldable
  class RCRemoteHoldable;
}
// Forward declaring namespace: Photon::Pun
namespace Photon::Pun {
  // Forward declaring type: PhotonMessageInfo
  struct PhotonMessageInfo;
  // Forward declaring type: PhotonStream
  class PhotonStream;
}
// Completed forward declares
// Type namespace: GorillaTag.Cosmetics
namespace GorillaTag::Cosmetics {
  // Forward declaring type: RCCosmeticNetworkSync
  class RCCosmeticNetworkSync;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaTag::Cosmetics::RCCosmeticNetworkSync);
DEFINE_IL2CPP_ARG_TYPE(::GorillaTag::Cosmetics::RCCosmeticNetworkSync*, "GorillaTag.Cosmetics", "RCCosmeticNetworkSync");
// Type namespace: GorillaTag.Cosmetics
namespace GorillaTag::Cosmetics {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: GorillaTag.Cosmetics.RCCosmeticNetworkSync
  // [TokenAttribute] Offset: FFFFFFFF
  class RCCosmeticNetworkSync : public ::Photon::Pun::MonoBehaviourPun/*, public ::Photon::Pun::IPunObservable, public ::Photon::Pun::IPunInstantiateMagicCallback*/ {
    public:
    // Nested type: ::GorillaTag::Cosmetics::RCCosmeticNetworkSync::SyncedState
    struct SyncedState;
    // Size: 0x23
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: GorillaTag.Cosmetics.RCCosmeticNetworkSync/SyncedState
    // [TokenAttribute] Offset: FFFFFFFF
    struct SyncedState/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Byte state
      // Size: 0x1
      // Offset: 0x0
      uint8_t state;
      // Field size check
      static_assert(sizeof(uint8_t) == 0x1);
      // Padding between fields: state and: position
      char __padding0[0x3] = {};
      // public UnityEngine.Vector3 position
      // Size: 0xC
      // Offset: 0x4
      ::UnityEngine::Vector3 position;
      // Field size check
      static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
      // public UnityEngine.Quaternion rotation
      // Size: 0x10
      // Offset: 0x10
      ::UnityEngine::Quaternion rotation;
      // Field size check
      static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
      // public System.Byte dataA
      // Size: 0x1
      // Offset: 0x20
      uint8_t dataA;
      // Field size check
      static_assert(sizeof(uint8_t) == 0x1);
      // public System.Byte dataB
      // Size: 0x1
      // Offset: 0x21
      uint8_t dataB;
      // Field size check
      static_assert(sizeof(uint8_t) == 0x1);
      // public System.Byte dataC
      // Size: 0x1
      // Offset: 0x22
      uint8_t dataC;
      // Field size check
      static_assert(sizeof(uint8_t) == 0x1);
      public:
      // Creating value type constructor for type: SyncedState
      constexpr SyncedState(uint8_t state_ = {}, ::UnityEngine::Vector3 position_ = {}, ::UnityEngine::Quaternion rotation_ = {}, uint8_t dataA_ = {}, uint8_t dataB_ = {}, uint8_t dataC_ = {}) noexcept : state{state_}, position{position_}, rotation{rotation_}, dataA{dataA_}, dataB{dataB_}, dataC{dataC_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.Byte state
      [[deprecated("Use field access instead!")]] uint8_t& dyn_state();
      // Get instance field reference: public UnityEngine.Vector3 position
      [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_position();
      // Get instance field reference: public UnityEngine.Quaternion rotation
      [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_rotation();
      // Get instance field reference: public System.Byte dataA
      [[deprecated("Use field access instead!")]] uint8_t& dyn_dataA();
      // Get instance field reference: public System.Byte dataB
      [[deprecated("Use field access instead!")]] uint8_t& dyn_dataB();
      // Get instance field reference: public System.Byte dataC
      [[deprecated("Use field access instead!")]] uint8_t& dyn_dataC();
    }; // GorillaTag.Cosmetics.RCCosmeticNetworkSync/SyncedState
    #pragma pack(pop)
    static check_size<sizeof(RCCosmeticNetworkSync::SyncedState), 34 + sizeof(uint8_t)> __GorillaTag_Cosmetics_RCCosmeticNetworkSync_SyncedStateSizeCheck;
    static_assert(sizeof(RCCosmeticNetworkSync::SyncedState) == 0x23);
    public:
    // public GorillaTag.Cosmetics.RCCosmeticNetworkSync/SyncedState syncedState
    // Size: 0x23
    // Offset: 0x28
    ::GorillaTag::Cosmetics::RCCosmeticNetworkSync::SyncedState syncedState;
    // Field size check
    static_assert(sizeof(::GorillaTag::Cosmetics::RCCosmeticNetworkSync::SyncedState) == 0x23);
    // Padding between fields: syncedState and: rcRemote
    char __padding0[0x5] = {};
    // private GorillaTag.Cosmetics.RCRemoteHoldable rcRemote
    // Size: 0x8
    // Offset: 0x50
    ::GorillaTag::Cosmetics::RCRemoteHoldable* rcRemote;
    // Field size check
    static_assert(sizeof(::GorillaTag::Cosmetics::RCRemoteHoldable*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Photon::Pun::IPunObservable
    operator ::Photon::Pun::IPunObservable() noexcept {
      return *reinterpret_cast<::Photon::Pun::IPunObservable*>(this);
    }
    // Creating interface conversion operator: operator ::Photon::Pun::IPunInstantiateMagicCallback
    operator ::Photon::Pun::IPunInstantiateMagicCallback() noexcept {
      return *reinterpret_cast<::Photon::Pun::IPunInstantiateMagicCallback*>(this);
    }
    // Get instance field reference: public GorillaTag.Cosmetics.RCCosmeticNetworkSync/SyncedState syncedState
    [[deprecated("Use field access instead!")]] ::GorillaTag::Cosmetics::RCCosmeticNetworkSync::SyncedState& dyn_syncedState();
    // Get instance field reference: private GorillaTag.Cosmetics.RCRemoteHoldable rcRemote
    [[deprecated("Use field access instead!")]] ::GorillaTag::Cosmetics::RCRemoteHoldable*& dyn_rcRemote();
    // public System.Void OnPhotonInstantiate(Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x28B8144
    void OnPhotonInstantiate(::Photon::Pun::PhotonMessageInfo info);
    // public System.Void OnPhotonSerializeView(Photon.Pun.PhotonStream stream, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x28B8578
    void OnPhotonSerializeView(::Photon::Pun::PhotonStream* stream, ::Photon::Pun::PhotonMessageInfo info);
    // public System.Void HitRCVehicleRPC(UnityEngine.Vector3 hitVelocity, System.Boolean isProjectile, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x28B8A44
    void HitRCVehicleRPC(::UnityEngine::Vector3 hitVelocity, bool isProjectile, ::Photon::Pun::PhotonMessageInfo info);
    // private System.Void DestroyThis()
    // Offset: 0x28B84D8
    void DestroyThis();
    // public System.Void .ctor()
    // Offset: 0x28B8C88
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RCCosmeticNetworkSync* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaTag::Cosmetics::RCCosmeticNetworkSync::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RCCosmeticNetworkSync*, creationType>()));
    }
  }; // GorillaTag.Cosmetics.RCCosmeticNetworkSync
  #pragma pack(pop)
  static check_size<sizeof(RCCosmeticNetworkSync), 80 + sizeof(::GorillaTag::Cosmetics::RCRemoteHoldable*)> __GorillaTag_Cosmetics_RCCosmeticNetworkSyncSizeCheck;
  static_assert(sizeof(RCCosmeticNetworkSync) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GorillaTag::Cosmetics::RCCosmeticNetworkSync::SyncedState, "GorillaTag.Cosmetics", "RCCosmeticNetworkSync/SyncedState");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaTag::Cosmetics::RCCosmeticNetworkSync::OnPhotonInstantiate
// Il2CppName: OnPhotonInstantiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Cosmetics::RCCosmeticNetworkSync::*)(::Photon::Pun::PhotonMessageInfo)>(&GorillaTag::Cosmetics::RCCosmeticNetworkSync::OnPhotonInstantiate)> {
  static const MethodInfo* get() {
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::RCCosmeticNetworkSync*), "OnPhotonInstantiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{info});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::RCCosmeticNetworkSync::OnPhotonSerializeView
// Il2CppName: OnPhotonSerializeView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Cosmetics::RCCosmeticNetworkSync::*)(::Photon::Pun::PhotonStream*, ::Photon::Pun::PhotonMessageInfo)>(&GorillaTag::Cosmetics::RCCosmeticNetworkSync::OnPhotonSerializeView)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonStream")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::RCCosmeticNetworkSync*), "OnPhotonSerializeView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, info});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::RCCosmeticNetworkSync::HitRCVehicleRPC
// Il2CppName: HitRCVehicleRPC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Cosmetics::RCCosmeticNetworkSync::*)(::UnityEngine::Vector3, bool, ::Photon::Pun::PhotonMessageInfo)>(&GorillaTag::Cosmetics::RCCosmeticNetworkSync::HitRCVehicleRPC)> {
  static const MethodInfo* get() {
    static auto* hitVelocity = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* isProjectile = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::RCCosmeticNetworkSync*), "HitRCVehicleRPC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hitVelocity, isProjectile, info});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::RCCosmeticNetworkSync::DestroyThis
// Il2CppName: DestroyThis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Cosmetics::RCCosmeticNetworkSync::*)()>(&GorillaTag::Cosmetics::RCCosmeticNetworkSync::DestroyThis)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::RCCosmeticNetworkSync*), "DestroyThis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::RCCosmeticNetworkSync::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
