// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
// Including type: UnityEngine.ParticleSystem/EmissionModule
#include "UnityEngine/ParticleSystem_EmissionModule.hpp"
// Including type: UnityEngine.ParticleSystem/ShapeModule
#include "UnityEngine/ParticleSystem_ShapeModule.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: ParticleSystem because it is already included!
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
  // Forward declaring type: AudioSource
  class AudioSource;
}
// Completed forward declares
// Type namespace: GorillaTag.Cosmetics
namespace GorillaTag::Cosmetics {
  // Forward declaring type: DrillFX
  class DrillFX;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaTag::Cosmetics::DrillFX);
DEFINE_IL2CPP_ARG_TYPE(::GorillaTag::Cosmetics::DrillFX*, "GorillaTag.Cosmetics", "DrillFX");
// Type namespace: GorillaTag.Cosmetics
namespace GorillaTag::Cosmetics {
  // Size: 0x94
  #pragma pack(push, 1)
  // Autogenerated type: GorillaTag.Cosmetics.DrillFX
  // [TokenAttribute] Offset: FFFFFFFF
  class DrillFX : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.ParticleSystem fx
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::ParticleSystem* fx;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystem*) == 0x8);
    // private UnityEngine.AnimationCurve fxEmissionCurve
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::AnimationCurve* fxEmissionCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // private System.Single fxMinRadiusScale
    // Size: 0x4
    // Offset: 0x30
    float fxMinRadiusScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: fxMinRadiusScale and: loopAudio
    char __padding2[0x4] = {};
    // private UnityEngine.AudioSource loopAudio
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::AudioSource* loopAudio;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // private UnityEngine.AnimationCurve loopAudioVolumeCurve
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::AnimationCurve* loopAudioVolumeCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // private System.Single loopAudioVolumeTransitionSpeed
    // Size: 0x4
    // Offset: 0x48
    float loopAudioVolumeTransitionSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.LayerMask lineCastLayerMask
    // Size: 0x4
    // Offset: 0x4C
    ::UnityEngine::LayerMask lineCastLayerMask;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // private UnityEngine.Vector3 lineCastStart
    // Size: 0xC
    // Offset: 0x50
    ::UnityEngine::Vector3 lineCastStart;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 lineCastEnd
    // Size: 0xC
    // Offset: 0x5C
    ::UnityEngine::Vector3 lineCastEnd;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Single maxDepth
    // Size: 0x4
    // Offset: 0x68
    float maxDepth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean hasFX
    // Size: 0x1
    // Offset: 0x6C
    bool hasFX;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: hasFX and: fxEmissionModule
    char __padding10[0x3] = {};
    // private UnityEngine.ParticleSystem/EmissionModule fxEmissionModule
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::ParticleSystem::EmissionModule fxEmissionModule;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystem::EmissionModule) == 0x8);
    // private System.Single fxEmissionMaxRate
    // Size: 0x4
    // Offset: 0x78
    float fxEmissionMaxRate;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: fxEmissionMaxRate and: fxShapeModule
    char __padding12[0x4] = {};
    // private UnityEngine.ParticleSystem/ShapeModule fxShapeModule
    // Size: 0x8
    // Offset: 0x80
    ::UnityEngine::ParticleSystem::ShapeModule fxShapeModule;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystem::ShapeModule) == 0x8);
    // private System.Single fxShapeMaxRadius
    // Size: 0x4
    // Offset: 0x88
    float fxShapeMaxRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean hasAudio
    // Size: 0x1
    // Offset: 0x8C
    bool hasAudio;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: hasAudio and: audioMaxVolume
    char __padding15[0x3] = {};
    // private System.Single audioMaxVolume
    // Size: 0x4
    // Offset: 0x90
    float audioMaxVolume;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get static field: static private System.Boolean appIsQuitting
    static bool _get_appIsQuitting();
    // Set static field: static private System.Boolean appIsQuitting
    static void _set_appIsQuitting(bool value);
    // Get static field: static private System.Boolean appIsQuittingHandlerIsSubscribed
    static bool _get_appIsQuittingHandlerIsSubscribed();
    // Set static field: static private System.Boolean appIsQuittingHandlerIsSubscribed
    static void _set_appIsQuittingHandlerIsSubscribed(bool value);
    // Get instance field reference: private UnityEngine.ParticleSystem fx
    [[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& dyn_fx();
    // Get instance field reference: private UnityEngine.AnimationCurve fxEmissionCurve
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_fxEmissionCurve();
    // Get instance field reference: private System.Single fxMinRadiusScale
    [[deprecated("Use field access instead!")]] float& dyn_fxMinRadiusScale();
    // Get instance field reference: private UnityEngine.AudioSource loopAudio
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_loopAudio();
    // Get instance field reference: private UnityEngine.AnimationCurve loopAudioVolumeCurve
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_loopAudioVolumeCurve();
    // Get instance field reference: private System.Single loopAudioVolumeTransitionSpeed
    [[deprecated("Use field access instead!")]] float& dyn_loopAudioVolumeTransitionSpeed();
    // Get instance field reference: private UnityEngine.LayerMask lineCastLayerMask
    [[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& dyn_lineCastLayerMask();
    // Get instance field reference: private UnityEngine.Vector3 lineCastStart
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_lineCastStart();
    // Get instance field reference: private UnityEngine.Vector3 lineCastEnd
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_lineCastEnd();
    // Get instance field reference: private System.Single maxDepth
    [[deprecated("Use field access instead!")]] float& dyn_maxDepth();
    // Get instance field reference: private System.Boolean hasFX
    [[deprecated("Use field access instead!")]] bool& dyn_hasFX();
    // Get instance field reference: private UnityEngine.ParticleSystem/EmissionModule fxEmissionModule
    [[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem::EmissionModule& dyn_fxEmissionModule();
    // Get instance field reference: private System.Single fxEmissionMaxRate
    [[deprecated("Use field access instead!")]] float& dyn_fxEmissionMaxRate();
    // Get instance field reference: private UnityEngine.ParticleSystem/ShapeModule fxShapeModule
    [[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem::ShapeModule& dyn_fxShapeModule();
    // Get instance field reference: private System.Single fxShapeMaxRadius
    [[deprecated("Use field access instead!")]] float& dyn_fxShapeMaxRadius();
    // Get instance field reference: private System.Boolean hasAudio
    [[deprecated("Use field access instead!")]] bool& dyn_hasAudio();
    // Get instance field reference: private System.Single audioMaxVolume
    [[deprecated("Use field access instead!")]] float& dyn_audioMaxVolume();
    // protected System.Void Awake()
    // Offset: 0x28C0294
    void Awake();
    // protected System.Void OnEnable()
    // Offset: 0x28C0494
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x28C06A0
    void OnDisable();
    // protected System.Void LateUpdate()
    // Offset: 0x28C0740
    void LateUpdate();
    // static private System.Void HandleApplicationQuitting()
    // Offset: 0x28C0A2C
    static void HandleApplicationQuitting();
    // private System.Boolean ValidateLineCastPositions()
    // Offset: 0x28C0550
    bool ValidateLineCastPositions();
    // public System.Void .ctor()
    // Offset: 0x28C0A78
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DrillFX* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaTag::Cosmetics::DrillFX::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DrillFX*, creationType>()));
    }
  }; // GorillaTag.Cosmetics.DrillFX
  #pragma pack(pop)
  static check_size<sizeof(DrillFX), 144 + sizeof(float)> __GorillaTag_Cosmetics_DrillFXSizeCheck;
  static_assert(sizeof(DrillFX) == 0x94);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaTag::Cosmetics::DrillFX::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Cosmetics::DrillFX::*)()>(&GorillaTag::Cosmetics::DrillFX::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::DrillFX*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::DrillFX::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Cosmetics::DrillFX::*)()>(&GorillaTag::Cosmetics::DrillFX::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::DrillFX*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::DrillFX::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Cosmetics::DrillFX::*)()>(&GorillaTag::Cosmetics::DrillFX::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::DrillFX*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::DrillFX::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Cosmetics::DrillFX::*)()>(&GorillaTag::Cosmetics::DrillFX::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::DrillFX*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::DrillFX::HandleApplicationQuitting
// Il2CppName: HandleApplicationQuitting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GorillaTag::Cosmetics::DrillFX::HandleApplicationQuitting)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::DrillFX*), "HandleApplicationQuitting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::DrillFX::ValidateLineCastPositions
// Il2CppName: ValidateLineCastPositions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaTag::Cosmetics::DrillFX::*)()>(&GorillaTag::Cosmetics::DrillFX::ValidateLineCastPositions)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::DrillFX*), "ValidateLineCastPositions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::DrillFX::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
