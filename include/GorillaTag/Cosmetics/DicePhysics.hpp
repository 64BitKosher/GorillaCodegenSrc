// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
  // Forward declaring type: Rigidbody
  class Rigidbody;
  // Forward declaring type: Collision
  class Collision;
}
// Forward declaring namespace: UnityEngine::Events
namespace UnityEngine::Events {
  // Forward declaring type: UnityEvent
  class UnityEvent;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: InteractionPoint
  class InteractionPoint;
  // Forward declaring type: VRRig
  class VRRig;
}
// Forward declaring namespace: GorillaTag::Cosmetics
namespace GorillaTag::Cosmetics {
  // Forward declaring type: DiceHoldable
  class DiceHoldable;
}
// Completed forward declares
// Type namespace: GorillaTag.Cosmetics
namespace GorillaTag::Cosmetics {
  // Forward declaring type: DicePhysics
  class DicePhysics;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaTag::Cosmetics::DicePhysics);
DEFINE_IL2CPP_ARG_TYPE(::GorillaTag::Cosmetics::DicePhysics*, "GorillaTag.Cosmetics", "DicePhysics");
// Type namespace: GorillaTag.Cosmetics
namespace GorillaTag::Cosmetics {
  // Size: 0xE8
  #pragma pack(push, 1)
  // Autogenerated type: GorillaTag.Cosmetics.DicePhysics
  // [TokenAttribute] Offset: FFFFFFFF
  class DicePhysics : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GorillaTag::Cosmetics::DicePhysics::DiceType
    struct DiceType;
    // Nested type: ::GorillaTag::Cosmetics::DicePhysics::CosmeticRollOverride
    struct CosmeticRollOverride;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: GorillaTag.Cosmetics.DicePhysics/DiceType
    // [TokenAttribute] Offset: FFFFFFFF
    struct DiceType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: DiceType
      constexpr DiceType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public GorillaTag.Cosmetics.DicePhysics/DiceType D6
      static constexpr const int D6 = 0;
      // Get static field: static public GorillaTag.Cosmetics.DicePhysics/DiceType D6
      static ::GorillaTag::Cosmetics::DicePhysics::DiceType _get_D6();
      // Set static field: static public GorillaTag.Cosmetics.DicePhysics/DiceType D6
      static void _set_D6(::GorillaTag::Cosmetics::DicePhysics::DiceType value);
      // static field const value: static public GorillaTag.Cosmetics.DicePhysics/DiceType D20
      static constexpr const int D20 = 1;
      // Get static field: static public GorillaTag.Cosmetics.DicePhysics/DiceType D20
      static ::GorillaTag::Cosmetics::DicePhysics::DiceType _get_D20();
      // Set static field: static public GorillaTag.Cosmetics.DicePhysics/DiceType D20
      static void _set_D20(::GorillaTag::Cosmetics::DicePhysics::DiceType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // GorillaTag.Cosmetics.DicePhysics/DiceType
    #pragma pack(pop)
    static check_size<sizeof(DicePhysics::DiceType), 0 + sizeof(int)> __GorillaTag_Cosmetics_DicePhysics_DiceTypeSizeCheck;
    static_assert(sizeof(DicePhysics::DiceType) == 0x4);
    // Size: 0xD
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: GorillaTag.Cosmetics.DicePhysics/CosmeticRollOverride
    // [TokenAttribute] Offset: FFFFFFFF
    struct CosmeticRollOverride/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.String cosmeticName
      // Size: 0x8
      // Offset: 0x0
      ::StringW cosmeticName;
      // Field size check
      static_assert(sizeof(::StringW) == 0x8);
      // public System.Int32 landingSide
      // Size: 0x4
      // Offset: 0x8
      int landingSide;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Boolean requireHolding
      // Size: 0x1
      // Offset: 0xC
      bool requireHolding;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      public:
      // Creating value type constructor for type: CosmeticRollOverride
      constexpr CosmeticRollOverride(::StringW cosmeticName_ = {}, int landingSide_ = {}, bool requireHolding_ = {}) noexcept : cosmeticName{cosmeticName_}, landingSide{landingSide_}, requireHolding{requireHolding_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.String cosmeticName
      [[deprecated("Use field access instead!")]] ::StringW& dyn_cosmeticName();
      // Get instance field reference: public System.Int32 landingSide
      [[deprecated("Use field access instead!")]] int& dyn_landingSide();
      // Get instance field reference: public System.Boolean requireHolding
      [[deprecated("Use field access instead!")]] bool& dyn_requireHolding();
    }; // GorillaTag.Cosmetics.DicePhysics/CosmeticRollOverride
    #pragma pack(pop)
    static check_size<sizeof(DicePhysics::CosmeticRollOverride), 12 + sizeof(bool)> __GorillaTag_Cosmetics_DicePhysics_CosmeticRollOverrideSizeCheck;
    static_assert(sizeof(DicePhysics::CosmeticRollOverride) == 0xD);
    public:
    // private GorillaTag.Cosmetics.DicePhysics/DiceType diceType
    // Size: 0x4
    // Offset: 0x20
    ::GorillaTag::Cosmetics::DicePhysics::DiceType diceType;
    // Field size check
    static_assert(sizeof(::GorillaTag::Cosmetics::DicePhysics::DiceType) == 0x4);
    // private System.Single maxThrowDuration
    // Size: 0x4
    // Offset: 0x24
    float maxThrowDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single landingTime
    // Size: 0x4
    // Offset: 0x28
    float landingTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single postLandingTime
    // Size: 0x4
    // Offset: 0x2C
    float postLandingTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.LayerMask surfaceLayers
    // Size: 0x4
    // Offset: 0x30
    ::UnityEngine::LayerMask surfaceLayers;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // Padding between fields: surfaceLayers and: angleDeltaVsStrengthCurve
    char __padding4[0x4] = {};
    // private UnityEngine.AnimationCurve angleDeltaVsStrengthCurve
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::AnimationCurve* angleDeltaVsStrengthCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // private UnityEngine.AnimationCurve landingTimeVsStrengthCurve
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::AnimationCurve* landingTimeVsStrengthCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // private System.Single strengthIncreasingMaxSpeed
    // Size: 0x4
    // Offset: 0x48
    float strengthIncreasingMaxSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single strength
    // Size: 0x4
    // Offset: 0x4C
    float strength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single damping
    // Size: 0x4
    // Offset: 0x50
    float damping;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean forceLandingSide
    // Size: 0x1
    // Offset: 0x54
    bool forceLandingSide;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: forceLandingSide and: forcedLandingSide
    char __padding10[0x3] = {};
    // private System.Int32 forcedLandingSide
    // Size: 0x4
    // Offset: 0x58
    int forcedLandingSide;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean allowPickupFromGround
    // Size: 0x1
    // Offset: 0x5C
    bool allowPickupFromGround;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: allowPickupFromGround and: bounceAmplification
    char __padding12[0x3] = {};
    // private System.Single bounceAmplification
    // Size: 0x4
    // Offset: 0x60
    float bounceAmplification;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: bounceAmplification and: cosmeticRollOverrides
    char __padding13[0x4] = {};
    // private GorillaTag.Cosmetics.DicePhysics/CosmeticRollOverride[] cosmeticRollOverrides
    // Size: 0x8
    // Offset: 0x68
    ::ArrayW<::GorillaTag::Cosmetics::DicePhysics::CosmeticRollOverride> cosmeticRollOverrides;
    // Field size check
    static_assert(sizeof(::ArrayW<::GorillaTag::Cosmetics::DicePhysics::CosmeticRollOverride>) == 0x8);
    // private UnityEngine.Events.UnityEvent onBestRoll
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::Events::UnityEvent* onBestRoll;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    // private UnityEngine.Events.UnityEvent onWorstRoll
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::Events::UnityEvent* onWorstRoll;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    // private UnityEngine.Events.UnityEvent onRollFinished
    // Size: 0x8
    // Offset: 0x80
    ::UnityEngine::Events::UnityEvent* onRollFinished;
    // Field size check
    static_assert(sizeof(::UnityEngine::Events::UnityEvent*) == 0x8);
    // private UnityEngine.Rigidbody rb
    // Size: 0x8
    // Offset: 0x88
    ::UnityEngine::Rigidbody* rb;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rigidbody*) == 0x8);
    // private InteractionPoint interactionPoint
    // Size: 0x8
    // Offset: 0x90
    ::GlobalNamespace::InteractionPoint* interactionPoint;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::InteractionPoint*) == 0x8);
    // private VRRig cachedLocalRig
    // Size: 0x8
    // Offset: 0x98
    ::GlobalNamespace::VRRig* cachedLocalRig;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::VRRig*) == 0x8);
    // private GorillaTag.Cosmetics.DiceHoldable holdableParent
    // Size: 0x8
    // Offset: 0xA0
    ::GorillaTag::Cosmetics::DiceHoldable* holdableParent;
    // Field size check
    static_assert(sizeof(::GorillaTag::Cosmetics::DiceHoldable*) == 0x8);
    // private System.Double throwStartTime
    // Size: 0x8
    // Offset: 0xA8
    double throwStartTime;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Double throwSettledTime
    // Size: 0x8
    // Offset: 0xB0
    double throwSettledTime;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Int32 landingSide
    // Size: 0x4
    // Offset: 0xB8
    int landingSide;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single scale
    // Size: 0x4
    // Offset: 0xBC
    float scale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector3 prevVelocity
    // Size: 0xC
    // Offset: 0xC0
    ::UnityEngine::Vector3 prevVelocity;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 velocity
    // Size: 0xC
    // Offset: 0xCC
    ::UnityEngine::Vector3 velocity;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3[] d20SideDirections
    // Size: 0x8
    // Offset: 0xD8
    ::ArrayW<::UnityEngine::Vector3> d20SideDirections;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // private UnityEngine.Vector3[] d6SideDirections
    // Size: 0x8
    // Offset: 0xE0
    ::ArrayW<::UnityEngine::Vector3> d6SideDirections;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    public:
    // static field const value: static private System.Single a
    static constexpr const float a = 38.833332;
    // Get static field: static private System.Single a
    static float _get_a();
    // Set static field: static private System.Single a
    static void _set_a(float value);
    // static field const value: static private System.Single b
    static constexpr const float b = 77.66666;
    // Get static field: static private System.Single b
    static float _get_b();
    // Set static field: static private System.Single b
    static void _set_b(float value);
    // Get instance field reference: private GorillaTag.Cosmetics.DicePhysics/DiceType diceType
    [[deprecated("Use field access instead!")]] ::GorillaTag::Cosmetics::DicePhysics::DiceType& dyn_diceType();
    // Get instance field reference: private System.Single maxThrowDuration
    [[deprecated("Use field access instead!")]] float& dyn_maxThrowDuration();
    // Get instance field reference: private System.Single landingTime
    [[deprecated("Use field access instead!")]] float& dyn_landingTime();
    // Get instance field reference: private System.Single postLandingTime
    [[deprecated("Use field access instead!")]] float& dyn_postLandingTime();
    // Get instance field reference: private UnityEngine.LayerMask surfaceLayers
    [[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& dyn_surfaceLayers();
    // Get instance field reference: private UnityEngine.AnimationCurve angleDeltaVsStrengthCurve
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_angleDeltaVsStrengthCurve();
    // Get instance field reference: private UnityEngine.AnimationCurve landingTimeVsStrengthCurve
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_landingTimeVsStrengthCurve();
    // Get instance field reference: private System.Single strengthIncreasingMaxSpeed
    [[deprecated("Use field access instead!")]] float& dyn_strengthIncreasingMaxSpeed();
    // Get instance field reference: private System.Single strength
    [[deprecated("Use field access instead!")]] float& dyn_strength();
    // Get instance field reference: private System.Single damping
    [[deprecated("Use field access instead!")]] float& dyn_damping();
    // Get instance field reference: private System.Boolean forceLandingSide
    [[deprecated("Use field access instead!")]] bool& dyn_forceLandingSide();
    // Get instance field reference: private System.Int32 forcedLandingSide
    [[deprecated("Use field access instead!")]] int& dyn_forcedLandingSide();
    // Get instance field reference: private System.Boolean allowPickupFromGround
    [[deprecated("Use field access instead!")]] bool& dyn_allowPickupFromGround();
    // Get instance field reference: private System.Single bounceAmplification
    [[deprecated("Use field access instead!")]] float& dyn_bounceAmplification();
    // Get instance field reference: private GorillaTag.Cosmetics.DicePhysics/CosmeticRollOverride[] cosmeticRollOverrides
    [[deprecated("Use field access instead!")]] ::ArrayW<::GorillaTag::Cosmetics::DicePhysics::CosmeticRollOverride>& dyn_cosmeticRollOverrides();
    // Get instance field reference: private UnityEngine.Events.UnityEvent onBestRoll
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn_onBestRoll();
    // Get instance field reference: private UnityEngine.Events.UnityEvent onWorstRoll
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn_onWorstRoll();
    // Get instance field reference: private UnityEngine.Events.UnityEvent onRollFinished
    [[deprecated("Use field access instead!")]] ::UnityEngine::Events::UnityEvent*& dyn_onRollFinished();
    // Get instance field reference: private UnityEngine.Rigidbody rb
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rigidbody*& dyn_rb();
    // Get instance field reference: private InteractionPoint interactionPoint
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::InteractionPoint*& dyn_interactionPoint();
    // Get instance field reference: private VRRig cachedLocalRig
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig*& dyn_cachedLocalRig();
    // Get instance field reference: private GorillaTag.Cosmetics.DiceHoldable holdableParent
    [[deprecated("Use field access instead!")]] ::GorillaTag::Cosmetics::DiceHoldable*& dyn_holdableParent();
    // Get instance field reference: private System.Double throwStartTime
    [[deprecated("Use field access instead!")]] double& dyn_throwStartTime();
    // Get instance field reference: private System.Double throwSettledTime
    [[deprecated("Use field access instead!")]] double& dyn_throwSettledTime();
    // Get instance field reference: private System.Int32 landingSide
    [[deprecated("Use field access instead!")]] int& dyn_landingSide();
    // Get instance field reference: private System.Single scale
    [[deprecated("Use field access instead!")]] float& dyn_scale();
    // Get instance field reference: private UnityEngine.Vector3 prevVelocity
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_prevVelocity();
    // Get instance field reference: private UnityEngine.Vector3 velocity
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_velocity();
    // Get instance field reference: private UnityEngine.Vector3[] d20SideDirections
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_d20SideDirections();
    // Get instance field reference: private UnityEngine.Vector3[] d6SideDirections
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_d6SideDirections();
    // public System.Int32 GetRandomSide()
    // Offset: 0x28B3F78
    int GetRandomSide();
    // public UnityEngine.Vector3 GetSideDirection(System.Int32 side)
    // Offset: 0x28B4710
    ::UnityEngine::Vector3 GetSideDirection(int side);
    // public System.Void StartThrow(GorillaTag.Cosmetics.DiceHoldable holdable, UnityEngine.Vector3 startPosition, UnityEngine.Vector3 velocity, System.Single playerScale, System.Int32 side, System.Double startTime)
    // Offset: 0x28B401C
    void StartThrow(::GorillaTag::Cosmetics::DiceHoldable* holdable, ::UnityEngine::Vector3 startPosition, ::UnityEngine::Vector3 velocity, float playerScale, int side, double startTime);
    // public System.Void EndThrow()
    // Offset: 0x28B3458
    void EndThrow();
    // private System.Void FixedUpdate()
    // Offset: 0x28B4788
    void FixedUpdate();
    // private System.Void OnCollisionEnter(UnityEngine.Collision collision)
    // Offset: 0x28B4E1C
    void OnCollisionEnter(::UnityEngine::Collision* collision);
    // private System.Void InvokeLandingEffects(System.Int32 side)
    // Offset: 0x28B4DC8
    void InvokeLandingEffects(int side);
    // private System.Boolean CheckCosmeticRollOverride(out System.Int32 rollSide)
    // Offset: 0x28B42C4
    bool CheckCosmeticRollOverride(ByRef<int> rollSide);
    // public System.Void .ctor()
    // Offset: 0x28B4F4C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DicePhysics* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaTag::Cosmetics::DicePhysics::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DicePhysics*, creationType>()));
    }
  }; // GorillaTag.Cosmetics.DicePhysics
  #pragma pack(pop)
  static check_size<sizeof(DicePhysics), 224 + sizeof(::ArrayW<::UnityEngine::Vector3>)> __GorillaTag_Cosmetics_DicePhysicsSizeCheck;
  static_assert(sizeof(DicePhysics) == 0xE8);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GorillaTag::Cosmetics::DicePhysics::CosmeticRollOverride, "GorillaTag.Cosmetics", "DicePhysics/CosmeticRollOverride");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GorillaTag::Cosmetics::DicePhysics::DiceType, "GorillaTag.Cosmetics", "DicePhysics/DiceType");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaTag::Cosmetics::DicePhysics::GetRandomSide
// Il2CppName: GetRandomSide
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GorillaTag::Cosmetics::DicePhysics::*)()>(&GorillaTag::Cosmetics::DicePhysics::GetRandomSide)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::DicePhysics*), "GetRandomSide", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::DicePhysics::GetSideDirection
// Il2CppName: GetSideDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GorillaTag::Cosmetics::DicePhysics::*)(int)>(&GorillaTag::Cosmetics::DicePhysics::GetSideDirection)> {
  static const MethodInfo* get() {
    static auto* side = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::DicePhysics*), "GetSideDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{side});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::DicePhysics::StartThrow
// Il2CppName: StartThrow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Cosmetics::DicePhysics::*)(::GorillaTag::Cosmetics::DiceHoldable*, ::UnityEngine::Vector3, ::UnityEngine::Vector3, float, int, double)>(&GorillaTag::Cosmetics::DicePhysics::StartThrow)> {
  static const MethodInfo* get() {
    static auto* holdable = &::il2cpp_utils::GetClassFromName("GorillaTag.Cosmetics", "DiceHoldable")->byval_arg;
    static auto* startPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* velocity = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* playerScale = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* side = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* startTime = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::DicePhysics*), "StartThrow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{holdable, startPosition, velocity, playerScale, side, startTime});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::DicePhysics::EndThrow
// Il2CppName: EndThrow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Cosmetics::DicePhysics::*)()>(&GorillaTag::Cosmetics::DicePhysics::EndThrow)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::DicePhysics*), "EndThrow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::DicePhysics::FixedUpdate
// Il2CppName: FixedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Cosmetics::DicePhysics::*)()>(&GorillaTag::Cosmetics::DicePhysics::FixedUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::DicePhysics*), "FixedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::DicePhysics::OnCollisionEnter
// Il2CppName: OnCollisionEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Cosmetics::DicePhysics::*)(::UnityEngine::Collision*)>(&GorillaTag::Cosmetics::DicePhysics::OnCollisionEnter)> {
  static const MethodInfo* get() {
    static auto* collision = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collision")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::DicePhysics*), "OnCollisionEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{collision});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::DicePhysics::InvokeLandingEffects
// Il2CppName: InvokeLandingEffects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Cosmetics::DicePhysics::*)(int)>(&GorillaTag::Cosmetics::DicePhysics::InvokeLandingEffects)> {
  static const MethodInfo* get() {
    static auto* side = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::DicePhysics*), "InvokeLandingEffects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{side});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::DicePhysics::CheckCosmeticRollOverride
// Il2CppName: CheckCosmeticRollOverride
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaTag::Cosmetics::DicePhysics::*)(ByRef<int>)>(&GorillaTag::Cosmetics::DicePhysics::CheckCosmeticRollOverride)> {
  static const MethodInfo* get() {
    static auto* rollSide = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::DicePhysics*), "CheckCosmeticRollOverride", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rollSide});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::DicePhysics::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
