// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: VRRig/WearablePackedStateSlots
#include "GlobalNamespace/VRRig_WearablePackedStateSlots.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Skipping declaration: VRRig because it is already included!
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: AudioClip
  class AudioClip;
}
// Completed forward declares
// Type namespace: GorillaTag.Cosmetics
namespace GorillaTag::Cosmetics {
  // Forward declaring type: EdibleWearable
  class EdibleWearable;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaTag::Cosmetics::EdibleWearable);
DEFINE_IL2CPP_ARG_TYPE(::GorillaTag::Cosmetics::EdibleWearable*, "GorillaTag.Cosmetics", "EdibleWearable");
// Type namespace: GorillaTag.Cosmetics
namespace GorillaTag::Cosmetics {
  // Size: 0x91
  #pragma pack(push, 1)
  // Autogenerated type: GorillaTag.Cosmetics.EdibleWearable
  // [TokenAttribute] Offset: FFFFFFFF
  class EdibleWearable : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GorillaTag::Cosmetics::EdibleWearable::EdibleStateInfo
    struct EdibleStateInfo;
    // Size: 0x10
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: GorillaTag.Cosmetics.EdibleWearable/EdibleStateInfo
    // [TokenAttribute] Offset: FFFFFFFF
    struct EdibleStateInfo/*, public ::System::ValueType*/ {
      public:
      public:
      // public UnityEngine.GameObject gameObject
      // Size: 0x8
      // Offset: 0x0
      ::UnityEngine::GameObject* gameObject;
      // Field size check
      static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
      // public UnityEngine.AudioClip sound
      // Size: 0x8
      // Offset: 0x8
      ::UnityEngine::AudioClip* sound;
      // Field size check
      static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
      public:
      // Creating value type constructor for type: EdibleStateInfo
      constexpr EdibleStateInfo(::UnityEngine::GameObject* gameObject_ = {}, ::UnityEngine::AudioClip* sound_ = {}) noexcept : gameObject{gameObject_}, sound{sound_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public UnityEngine.GameObject gameObject
      [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_gameObject();
      // Get instance field reference: public UnityEngine.AudioClip sound
      [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_sound();
    }; // GorillaTag.Cosmetics.EdibleWearable/EdibleStateInfo
    #pragma pack(pop)
    static check_size<sizeof(EdibleWearable::EdibleStateInfo), 8 + sizeof(::UnityEngine::AudioClip*)> __GorillaTag_Cosmetics_EdibleWearable_EdibleStateInfoSizeCheck;
    static_assert(sizeof(EdibleWearable::EdibleStateInfo) == 0x10);
    public:
    // public System.Boolean isNonRespawnable
    // Size: 0x1
    // Offset: 0x20
    bool isNonRespawnable;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isNonRespawnable and: audioSource
    char __padding0[0x7] = {};
    // public UnityEngine.AudioSource audioSource
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::AudioSource* audioSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // public System.Single volume
    // Size: 0x4
    // Offset: 0x30
    float volume;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public VRRig/WearablePackedStateSlots wearablePackedStateSlot
    // Size: 0x4
    // Offset: 0x34
    ::GlobalNamespace::VRRig::WearablePackedStateSlots wearablePackedStateSlot;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::VRRig::WearablePackedStateSlots) == 0x4);
    // public System.Single biteCooldown
    // Size: 0x4
    // Offset: 0x38
    float biteCooldown;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single respawnTime
    // Size: 0x4
    // Offset: 0x3C
    float respawnTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single biteDistance
    // Size: 0x4
    // Offset: 0x40
    float biteDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Vector3 gorillaHeadMouthOffset
    // Size: 0xC
    // Offset: 0x44
    ::UnityEngine::Vector3 gorillaHeadMouthOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 edibleBiteOffset
    // Size: 0xC
    // Offset: 0x50
    ::UnityEngine::Vector3 edibleBiteOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // Padding between fields: edibleBiteOffset and: edibleStateInfos
    char __padding8[0x4] = {};
    // public GorillaTag.Cosmetics.EdibleWearable/EdibleStateInfo[] edibleStateInfos
    // Size: 0x8
    // Offset: 0x60
    ::ArrayW<::GorillaTag::Cosmetics::EdibleWearable::EdibleStateInfo> edibleStateInfos;
    // Field size check
    static_assert(sizeof(::ArrayW<::GorillaTag::Cosmetics::EdibleWearable::EdibleStateInfo>) == 0x8);
    // private VRRig ownerRig
    // Size: 0x8
    // Offset: 0x68
    ::GlobalNamespace::VRRig* ownerRig;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::VRRig*) == 0x8);
    // private System.Boolean isLocal
    // Size: 0x1
    // Offset: 0x70
    bool isLocal;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean isHandSlot
    // Size: 0x1
    // Offset: 0x71
    bool isHandSlot;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean isLeftHand
    // Size: 0x1
    // Offset: 0x72
    bool isLeftHand;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isLeftHand and: stateBitsWriteInfo
    char __padding13[0x1] = {};
    // private GTBitOps/BitWriteInfo stateBitsWriteInfo
    // Size: 0xC
    // Offset: 0x74
    ::GlobalNamespace::GTBitOps::BitWriteInfo stateBitsWriteInfo;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GTBitOps::BitWriteInfo) == 0xC);
    // private System.Int32 edibleState
    // Size: 0x4
    // Offset: 0x80
    int edibleState;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 previousEdibleState
    // Size: 0x4
    // Offset: 0x84
    int previousEdibleState;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single lastEatTime
    // Size: 0x4
    // Offset: 0x88
    float lastEatTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single lastFullyEatenTime
    // Size: 0x4
    // Offset: 0x8C
    float lastFullyEatenTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean wasInBiteZoneLastFrame
    // Size: 0x1
    // Offset: 0x90
    bool wasInBiteZoneLastFrame;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: public System.Boolean isNonRespawnable
    [[deprecated("Use field access instead!")]] bool& dyn_isNonRespawnable();
    // Get instance field reference: public UnityEngine.AudioSource audioSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_audioSource();
    // Get instance field reference: public System.Single volume
    [[deprecated("Use field access instead!")]] float& dyn_volume();
    // Get instance field reference: public VRRig/WearablePackedStateSlots wearablePackedStateSlot
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig::WearablePackedStateSlots& dyn_wearablePackedStateSlot();
    // Get instance field reference: public System.Single biteCooldown
    [[deprecated("Use field access instead!")]] float& dyn_biteCooldown();
    // Get instance field reference: public System.Single respawnTime
    [[deprecated("Use field access instead!")]] float& dyn_respawnTime();
    // Get instance field reference: public System.Single biteDistance
    [[deprecated("Use field access instead!")]] float& dyn_biteDistance();
    // Get instance field reference: public UnityEngine.Vector3 gorillaHeadMouthOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_gorillaHeadMouthOffset();
    // Get instance field reference: public UnityEngine.Vector3 edibleBiteOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_edibleBiteOffset();
    // Get instance field reference: public GorillaTag.Cosmetics.EdibleWearable/EdibleStateInfo[] edibleStateInfos
    [[deprecated("Use field access instead!")]] ::ArrayW<::GorillaTag::Cosmetics::EdibleWearable::EdibleStateInfo>& dyn_edibleStateInfos();
    // Get instance field reference: private VRRig ownerRig
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig*& dyn_ownerRig();
    // Get instance field reference: private System.Boolean isLocal
    [[deprecated("Use field access instead!")]] bool& dyn_isLocal();
    // Get instance field reference: private System.Boolean isHandSlot
    [[deprecated("Use field access instead!")]] bool& dyn_isHandSlot();
    // Get instance field reference: private System.Boolean isLeftHand
    [[deprecated("Use field access instead!")]] bool& dyn_isLeftHand();
    // Get instance field reference: private GTBitOps/BitWriteInfo stateBitsWriteInfo
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GTBitOps::BitWriteInfo& dyn_stateBitsWriteInfo();
    // Get instance field reference: private System.Int32 edibleState
    [[deprecated("Use field access instead!")]] int& dyn_edibleState();
    // Get instance field reference: private System.Int32 previousEdibleState
    [[deprecated("Use field access instead!")]] int& dyn_previousEdibleState();
    // Get instance field reference: private System.Single lastEatTime
    [[deprecated("Use field access instead!")]] float& dyn_lastEatTime();
    // Get instance field reference: private System.Single lastFullyEatenTime
    [[deprecated("Use field access instead!")]] float& dyn_lastFullyEatenTime();
    // Get instance field reference: private System.Boolean wasInBiteZoneLastFrame
    [[deprecated("Use field access instead!")]] bool& dyn_wasInBiteZoneLastFrame();
    // protected System.Void Awake()
    // Offset: 0x28C0B20
    void Awake();
    // protected System.Void OnEnable()
    // Offset: 0x28C0C6C
    void OnEnable();
    // protected System.Void LateUpdate()
    // Offset: 0x28C0DDC
    void LateUpdate();
    // protected System.Void LateUpdateLocal()
    // Offset: 0x28C0E18
    void LateUpdateLocal();
    // protected System.Void LateUpdateReplicated()
    // Offset: 0x28C1418
    void LateUpdateReplicated();
    // protected System.Void LateUpdateShared()
    // Offset: 0x28C144C
    void LateUpdateShared();
    // protected System.Void OnEdibleHoldableStateChange()
    // Offset: 0x28C1484
    void OnEdibleHoldableStateChange();
    // public System.Void .ctor()
    // Offset: 0x28C1644
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static EdibleWearable* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaTag::Cosmetics::EdibleWearable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<EdibleWearable*, creationType>()));
    }
  }; // GorillaTag.Cosmetics.EdibleWearable
  #pragma pack(pop)
  static check_size<sizeof(EdibleWearable), 144 + sizeof(bool)> __GorillaTag_Cosmetics_EdibleWearableSizeCheck;
  static_assert(sizeof(EdibleWearable) == 0x91);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GorillaTag::Cosmetics::EdibleWearable::EdibleStateInfo, "GorillaTag.Cosmetics", "EdibleWearable/EdibleStateInfo");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaTag::Cosmetics::EdibleWearable::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Cosmetics::EdibleWearable::*)()>(&GorillaTag::Cosmetics::EdibleWearable::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::EdibleWearable*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::EdibleWearable::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Cosmetics::EdibleWearable::*)()>(&GorillaTag::Cosmetics::EdibleWearable::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::EdibleWearable*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::EdibleWearable::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Cosmetics::EdibleWearable::*)()>(&GorillaTag::Cosmetics::EdibleWearable::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::EdibleWearable*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::EdibleWearable::LateUpdateLocal
// Il2CppName: LateUpdateLocal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Cosmetics::EdibleWearable::*)()>(&GorillaTag::Cosmetics::EdibleWearable::LateUpdateLocal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::EdibleWearable*), "LateUpdateLocal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::EdibleWearable::LateUpdateReplicated
// Il2CppName: LateUpdateReplicated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Cosmetics::EdibleWearable::*)()>(&GorillaTag::Cosmetics::EdibleWearable::LateUpdateReplicated)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::EdibleWearable*), "LateUpdateReplicated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::EdibleWearable::LateUpdateShared
// Il2CppName: LateUpdateShared
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Cosmetics::EdibleWearable::*)()>(&GorillaTag::Cosmetics::EdibleWearable::LateUpdateShared)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::EdibleWearable*), "LateUpdateShared", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::EdibleWearable::OnEdibleHoldableStateChange
// Il2CppName: OnEdibleHoldableStateChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Cosmetics::EdibleWearable::*)()>(&GorillaTag::Cosmetics::EdibleWearable::OnEdibleHoldableStateChange)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::EdibleWearable*), "OnEdibleHoldableStateChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::EdibleWearable::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
