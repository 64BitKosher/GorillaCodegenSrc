// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: GorillaTag.Cosmetics.RCRemoteHoldable/RCInput
#include "GorillaTag/Cosmetics/RCRemoteHoldable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GorillaTag::Cosmetics
namespace GorillaTag::Cosmetics {
  // Skipping declaration: RCRemoteHoldable because it is already included!
  // Forward declaring type: RCCosmeticNetworkSync
  class RCCosmeticNetworkSync;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Rigidbody
  class Rigidbody;
  // Skipping declaration: Vector3 because it is already included!
}
// Completed forward declares
// Type namespace: GorillaTag.Cosmetics
namespace GorillaTag::Cosmetics {
  // Forward declaring type: RCVehicle
  class RCVehicle;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaTag::Cosmetics::RCVehicle);
DEFINE_IL2CPP_ARG_TYPE(::GorillaTag::Cosmetics::RCVehicle*, "GorillaTag.Cosmetics", "RCVehicle");
// Type namespace: GorillaTag.Cosmetics
namespace GorillaTag::Cosmetics {
  // Size: 0xC8
  #pragma pack(push, 1)
  // Autogenerated type: GorillaTag.Cosmetics.RCVehicle
  // [TokenAttribute] Offset: FFFFFFFF
  class RCVehicle : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GorillaTag::Cosmetics::RCVehicle::State
    struct State;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: GorillaTag.Cosmetics.RCVehicle/State
    // [TokenAttribute] Offset: FFFFFFFF
    struct State/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: State
      constexpr State(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public GorillaTag.Cosmetics.RCVehicle/State Disabled
      static constexpr const int Disabled = 0;
      // Get static field: static public GorillaTag.Cosmetics.RCVehicle/State Disabled
      static ::GorillaTag::Cosmetics::RCVehicle::State _get_Disabled();
      // Set static field: static public GorillaTag.Cosmetics.RCVehicle/State Disabled
      static void _set_Disabled(::GorillaTag::Cosmetics::RCVehicle::State value);
      // static field const value: static public GorillaTag.Cosmetics.RCVehicle/State DockedLeft
      static constexpr const int DockedLeft = 1;
      // Get static field: static public GorillaTag.Cosmetics.RCVehicle/State DockedLeft
      static ::GorillaTag::Cosmetics::RCVehicle::State _get_DockedLeft();
      // Set static field: static public GorillaTag.Cosmetics.RCVehicle/State DockedLeft
      static void _set_DockedLeft(::GorillaTag::Cosmetics::RCVehicle::State value);
      // static field const value: static public GorillaTag.Cosmetics.RCVehicle/State DockedRight
      static constexpr const int DockedRight = 2;
      // Get static field: static public GorillaTag.Cosmetics.RCVehicle/State DockedRight
      static ::GorillaTag::Cosmetics::RCVehicle::State _get_DockedRight();
      // Set static field: static public GorillaTag.Cosmetics.RCVehicle/State DockedRight
      static void _set_DockedRight(::GorillaTag::Cosmetics::RCVehicle::State value);
      // static field const value: static public GorillaTag.Cosmetics.RCVehicle/State Mobilized
      static constexpr const int Mobilized = 3;
      // Get static field: static public GorillaTag.Cosmetics.RCVehicle/State Mobilized
      static ::GorillaTag::Cosmetics::RCVehicle::State _get_Mobilized();
      // Set static field: static public GorillaTag.Cosmetics.RCVehicle/State Mobilized
      static void _set_Mobilized(::GorillaTag::Cosmetics::RCVehicle::State value);
      // static field const value: static public GorillaTag.Cosmetics.RCVehicle/State Crashed
      static constexpr const int Crashed = 4;
      // Get static field: static public GorillaTag.Cosmetics.RCVehicle/State Crashed
      static ::GorillaTag::Cosmetics::RCVehicle::State _get_Crashed();
      // Set static field: static public GorillaTag.Cosmetics.RCVehicle/State Crashed
      static void _set_Crashed(::GorillaTag::Cosmetics::RCVehicle::State value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // GorillaTag.Cosmetics.RCVehicle/State
    #pragma pack(pop)
    static check_size<sizeof(RCVehicle::State), 0 + sizeof(int)> __GorillaTag_Cosmetics_RCVehicle_StateSizeCheck;
    static_assert(sizeof(RCVehicle::State) == 0x4);
    public:
    // private UnityEngine.Transform leftDockParent
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Transform* leftDockParent;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private System.String leftDockParent_path
    // Size: 0x8
    // Offset: 0x28
    ::StringW leftDockParent_path;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private UnityEngine.Transform rightDockParent
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Transform* rightDockParent;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private System.String rightDockParent_path
    // Size: 0x8
    // Offset: 0x38
    ::StringW rightDockParent_path;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Single maxRange
    // Size: 0x4
    // Offset: 0x40
    float maxRange;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single maxDisconnectionTime
    // Size: 0x4
    // Offset: 0x44
    float maxDisconnectionTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single crashRespawnDelay
    // Size: 0x4
    // Offset: 0x48
    float crashRespawnDelay;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean crashOnHit
    // Size: 0x1
    // Offset: 0x4C
    bool crashOnHit;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: crashOnHit and: crashOnHitSpeedThreshold
    char __padding7[0x3] = {};
    // private System.Single crashOnHitSpeedThreshold
    // Size: 0x4
    // Offset: 0x50
    float crashOnHitSpeedThreshold;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single hitVelocityTransfer
    // Size: 0x4
    // Offset: 0x54
    float hitVelocityTransfer;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single projectileVelocityTransfer
    // Size: 0x4
    // Offset: 0x58
    float projectileVelocityTransfer;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single hitMaxHitSpeed
    // Size: 0x4
    // Offset: 0x5C
    float hitMaxHitSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single joystickDeadzone
    // Size: 0x4
    // Offset: 0x60
    float joystickDeadzone;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected GorillaTag.Cosmetics.RCVehicle/State localState
    // Size: 0x4
    // Offset: 0x64
    ::GorillaTag::Cosmetics::RCVehicle::State localState;
    // Field size check
    static_assert(sizeof(::GorillaTag::Cosmetics::RCVehicle::State) == 0x4);
    // protected GorillaTag.Cosmetics.RCVehicle/State localStatePrev
    // Size: 0x4
    // Offset: 0x68
    ::GorillaTag::Cosmetics::RCVehicle::State localStatePrev;
    // Field size check
    static_assert(sizeof(::GorillaTag::Cosmetics::RCVehicle::State) == 0x4);
    // protected System.Single stateStartTime
    // Size: 0x4
    // Offset: 0x6C
    float stateStartTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected GorillaTag.Cosmetics.RCRemoteHoldable connectedRemote
    // Size: 0x8
    // Offset: 0x70
    ::GorillaTag::Cosmetics::RCRemoteHoldable* connectedRemote;
    // Field size check
    static_assert(sizeof(::GorillaTag::Cosmetics::RCRemoteHoldable*) == 0x8);
    // protected GorillaTag.Cosmetics.RCCosmeticNetworkSync networkSync
    // Size: 0x8
    // Offset: 0x78
    ::GorillaTag::Cosmetics::RCCosmeticNetworkSync* networkSync;
    // Field size check
    static_assert(sizeof(::GorillaTag::Cosmetics::RCCosmeticNetworkSync*) == 0x8);
    // protected GorillaTag.Cosmetics.RCRemoteHoldable/RCInput activeInput
    // Size: 0xC
    // Offset: 0x80
    ::GorillaTag::Cosmetics::RCRemoteHoldable::RCInput activeInput;
    // Field size check
    static_assert(sizeof(::GorillaTag::Cosmetics::RCRemoteHoldable::RCInput) == 0xC);
    // Padding between fields: activeInput and: rb
    char __padding18[0x4] = {};
    // protected UnityEngine.Rigidbody rb
    // Size: 0x8
    // Offset: 0x90
    ::UnityEngine::Rigidbody* rb;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rigidbody*) == 0x8);
    // private UnityEngine.Quaternion leftDockLocalRot
    // Size: 0x10
    // Offset: 0x98
    ::UnityEngine::Quaternion leftDockLocalRot;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private UnityEngine.Quaternion rightDockLocalRot
    // Size: 0x10
    // Offset: 0xA8
    ::UnityEngine::Quaternion rightDockLocalRot;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private System.Boolean waitingForTriggerRelease
    // Size: 0x1
    // Offset: 0xB8
    bool waitingForTriggerRelease;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: waitingForTriggerRelease and: disconnectionTime
    char __padding22[0x3] = {};
    // private System.Single disconnectionTime
    // Size: 0x4
    // Offset: 0xBC
    float disconnectionTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean useLeftDock
    // Size: 0x1
    // Offset: 0xC0
    bool useLeftDock;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: useLeftDock and: networkSyncFollowRateExp
    char __padding24[0x3] = {};
    // private System.Single networkSyncFollowRateExp
    // Size: 0x4
    // Offset: 0xC4
    float networkSyncFollowRateExp;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: private UnityEngine.Transform leftDockParent
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_leftDockParent();
    // Get instance field reference: private System.String leftDockParent_path
    [[deprecated("Use field access instead!")]] ::StringW& dyn_leftDockParent_path();
    // Get instance field reference: private UnityEngine.Transform rightDockParent
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_rightDockParent();
    // Get instance field reference: private System.String rightDockParent_path
    [[deprecated("Use field access instead!")]] ::StringW& dyn_rightDockParent_path();
    // Get instance field reference: private System.Single maxRange
    [[deprecated("Use field access instead!")]] float& dyn_maxRange();
    // Get instance field reference: private System.Single maxDisconnectionTime
    [[deprecated("Use field access instead!")]] float& dyn_maxDisconnectionTime();
    // Get instance field reference: private System.Single crashRespawnDelay
    [[deprecated("Use field access instead!")]] float& dyn_crashRespawnDelay();
    // Get instance field reference: private System.Boolean crashOnHit
    [[deprecated("Use field access instead!")]] bool& dyn_crashOnHit();
    // Get instance field reference: private System.Single crashOnHitSpeedThreshold
    [[deprecated("Use field access instead!")]] float& dyn_crashOnHitSpeedThreshold();
    // Get instance field reference: private System.Single hitVelocityTransfer
    [[deprecated("Use field access instead!")]] float& dyn_hitVelocityTransfer();
    // Get instance field reference: private System.Single projectileVelocityTransfer
    [[deprecated("Use field access instead!")]] float& dyn_projectileVelocityTransfer();
    // Get instance field reference: private System.Single hitMaxHitSpeed
    [[deprecated("Use field access instead!")]] float& dyn_hitMaxHitSpeed();
    // Get instance field reference: private System.Single joystickDeadzone
    [[deprecated("Use field access instead!")]] float& dyn_joystickDeadzone();
    // Get instance field reference: protected GorillaTag.Cosmetics.RCVehicle/State localState
    [[deprecated("Use field access instead!")]] ::GorillaTag::Cosmetics::RCVehicle::State& dyn_localState();
    // Get instance field reference: protected GorillaTag.Cosmetics.RCVehicle/State localStatePrev
    [[deprecated("Use field access instead!")]] ::GorillaTag::Cosmetics::RCVehicle::State& dyn_localStatePrev();
    // Get instance field reference: protected System.Single stateStartTime
    [[deprecated("Use field access instead!")]] float& dyn_stateStartTime();
    // Get instance field reference: protected GorillaTag.Cosmetics.RCRemoteHoldable connectedRemote
    [[deprecated("Use field access instead!")]] ::GorillaTag::Cosmetics::RCRemoteHoldable*& dyn_connectedRemote();
    // Get instance field reference: protected GorillaTag.Cosmetics.RCCosmeticNetworkSync networkSync
    [[deprecated("Use field access instead!")]] ::GorillaTag::Cosmetics::RCCosmeticNetworkSync*& dyn_networkSync();
    // Get instance field reference: protected GorillaTag.Cosmetics.RCRemoteHoldable/RCInput activeInput
    [[deprecated("Use field access instead!")]] ::GorillaTag::Cosmetics::RCRemoteHoldable::RCInput& dyn_activeInput();
    // Get instance field reference: protected UnityEngine.Rigidbody rb
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rigidbody*& dyn_rb();
    // Get instance field reference: private UnityEngine.Quaternion leftDockLocalRot
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_leftDockLocalRot();
    // Get instance field reference: private UnityEngine.Quaternion rightDockLocalRot
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_rightDockLocalRot();
    // Get instance field reference: private System.Boolean waitingForTriggerRelease
    [[deprecated("Use field access instead!")]] bool& dyn_waitingForTriggerRelease();
    // Get instance field reference: private System.Single disconnectionTime
    [[deprecated("Use field access instead!")]] float& dyn_disconnectionTime();
    // Get instance field reference: private System.Boolean useLeftDock
    [[deprecated("Use field access instead!")]] bool& dyn_useLeftDock();
    // Get instance field reference: private System.Single networkSyncFollowRateExp
    [[deprecated("Use field access instead!")]] float& dyn_networkSyncFollowRateExp();
    // public System.Boolean get_HasLocalAuthority()
    // Offset: 0x28BAD60
    bool get_HasLocalAuthority();
    // public System.Void WakeUpRemote(GorillaTag.Cosmetics.RCCosmeticNetworkSync sync)
    // Offset: 0x28BE1E0
    void WakeUpRemote(::GorillaTag::Cosmetics::RCCosmeticNetworkSync* sync);
    // public System.Void StartConnection(GorillaTag.Cosmetics.RCRemoteHoldable remote, GorillaTag.Cosmetics.RCCosmeticNetworkSync sync)
    // Offset: 0x28BE284
    void StartConnection(::GorillaTag::Cosmetics::RCRemoteHoldable* remote, ::GorillaTag::Cosmetics::RCCosmeticNetworkSync* sync);
    // public System.Void EndConnection()
    // Offset: 0x28BE330
    void EndConnection();
    // protected System.Void ResetToSpawnPosition()
    // Offset: 0x28BE364
    void ResetToSpawnPosition();
    // protected System.Void AuthorityBeginDocked()
    // Offset: 0x28BA62C
    void AuthorityBeginDocked();
    // protected System.Void AuthorityBeginMobilization()
    // Offset: 0x28BAFFC
    void AuthorityBeginMobilization();
    // protected System.Void AuthorityBeginCrash()
    // Offset: 0x28BE4C8
    void AuthorityBeginCrash();
    // protected System.Void SetDisabledState()
    // Offset: 0x28BE558
    void SetDisabledState();
    // protected System.Void Awake()
    // Offset: 0x28BA7A0
    void Awake();
    // protected System.Void OnEnable()
    // Offset: 0x28BE610
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x28BE840
    void OnDisable();
    // public System.Void ApplyRemoteControlInput(GorillaTag.Cosmetics.RCRemoteHoldable/RCInput rcInput)
    // Offset: 0x28BDF70
    void ApplyRemoteControlInput(::GorillaTag::Cosmetics::RCRemoteHoldable::RCInput rcInput);
    // private System.Void Update()
    // Offset: 0x28BE848
    void Update();
    // protected System.Void AuthorityUpdate(System.Single dt)
    // Offset: 0x28BB36C
    void AuthorityUpdate(float dt);
    // protected System.Void RemoteUpdate(System.Single dt)
    // Offset: 0x28BB6B4
    void RemoteUpdate(float dt);
    // protected System.Void SharedUpdate(System.Single dt)
    // Offset: 0x28BC114
    void SharedUpdate(float dt);
    // public System.Void AuthorityApplyImpact(UnityEngine.Vector3 hitVelocity, System.Boolean isProjectile)
    // Offset: 0x28BE8BC
    void AuthorityApplyImpact(::UnityEngine::Vector3 hitVelocity, bool isProjectile);
    // protected System.Single NormalizeAngle180(System.Single angle)
    // Offset: 0x28BC7EC
    float NormalizeAngle180(float angle);
    // public System.Void .ctor()
    // Offset: 0x28BAEB0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RCVehicle* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaTag::Cosmetics::RCVehicle::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RCVehicle*, creationType>()));
    }
  }; // GorillaTag.Cosmetics.RCVehicle
  #pragma pack(pop)
  static check_size<sizeof(RCVehicle), 196 + sizeof(float)> __GorillaTag_Cosmetics_RCVehicleSizeCheck;
  static_assert(sizeof(RCVehicle) == 0xC8);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GorillaTag::Cosmetics::RCVehicle::State, "GorillaTag.Cosmetics", "RCVehicle/State");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaTag::Cosmetics::RCVehicle::get_HasLocalAuthority
// Il2CppName: get_HasLocalAuthority
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaTag::Cosmetics::RCVehicle::*)()>(&GorillaTag::Cosmetics::RCVehicle::get_HasLocalAuthority)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::RCVehicle*), "get_HasLocalAuthority", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::RCVehicle::WakeUpRemote
// Il2CppName: WakeUpRemote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Cosmetics::RCVehicle::*)(::GorillaTag::Cosmetics::RCCosmeticNetworkSync*)>(&GorillaTag::Cosmetics::RCVehicle::WakeUpRemote)> {
  static const MethodInfo* get() {
    static auto* sync = &::il2cpp_utils::GetClassFromName("GorillaTag.Cosmetics", "RCCosmeticNetworkSync")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::RCVehicle*), "WakeUpRemote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sync});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::RCVehicle::StartConnection
// Il2CppName: StartConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Cosmetics::RCVehicle::*)(::GorillaTag::Cosmetics::RCRemoteHoldable*, ::GorillaTag::Cosmetics::RCCosmeticNetworkSync*)>(&GorillaTag::Cosmetics::RCVehicle::StartConnection)> {
  static const MethodInfo* get() {
    static auto* remote = &::il2cpp_utils::GetClassFromName("GorillaTag.Cosmetics", "RCRemoteHoldable")->byval_arg;
    static auto* sync = &::il2cpp_utils::GetClassFromName("GorillaTag.Cosmetics", "RCCosmeticNetworkSync")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::RCVehicle*), "StartConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{remote, sync});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::RCVehicle::EndConnection
// Il2CppName: EndConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Cosmetics::RCVehicle::*)()>(&GorillaTag::Cosmetics::RCVehicle::EndConnection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::RCVehicle*), "EndConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::RCVehicle::ResetToSpawnPosition
// Il2CppName: ResetToSpawnPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Cosmetics::RCVehicle::*)()>(&GorillaTag::Cosmetics::RCVehicle::ResetToSpawnPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::RCVehicle*), "ResetToSpawnPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::RCVehicle::AuthorityBeginDocked
// Il2CppName: AuthorityBeginDocked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Cosmetics::RCVehicle::*)()>(&GorillaTag::Cosmetics::RCVehicle::AuthorityBeginDocked)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::RCVehicle*), "AuthorityBeginDocked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::RCVehicle::AuthorityBeginMobilization
// Il2CppName: AuthorityBeginMobilization
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Cosmetics::RCVehicle::*)()>(&GorillaTag::Cosmetics::RCVehicle::AuthorityBeginMobilization)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::RCVehicle*), "AuthorityBeginMobilization", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::RCVehicle::AuthorityBeginCrash
// Il2CppName: AuthorityBeginCrash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Cosmetics::RCVehicle::*)()>(&GorillaTag::Cosmetics::RCVehicle::AuthorityBeginCrash)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::RCVehicle*), "AuthorityBeginCrash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::RCVehicle::SetDisabledState
// Il2CppName: SetDisabledState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Cosmetics::RCVehicle::*)()>(&GorillaTag::Cosmetics::RCVehicle::SetDisabledState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::RCVehicle*), "SetDisabledState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::RCVehicle::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Cosmetics::RCVehicle::*)()>(&GorillaTag::Cosmetics::RCVehicle::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::RCVehicle*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::RCVehicle::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Cosmetics::RCVehicle::*)()>(&GorillaTag::Cosmetics::RCVehicle::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::RCVehicle*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::RCVehicle::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Cosmetics::RCVehicle::*)()>(&GorillaTag::Cosmetics::RCVehicle::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::RCVehicle*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::RCVehicle::ApplyRemoteControlInput
// Il2CppName: ApplyRemoteControlInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Cosmetics::RCVehicle::*)(::GorillaTag::Cosmetics::RCRemoteHoldable::RCInput)>(&GorillaTag::Cosmetics::RCVehicle::ApplyRemoteControlInput)> {
  static const MethodInfo* get() {
    static auto* rcInput = &::il2cpp_utils::GetClassFromName("GorillaTag.Cosmetics", "RCRemoteHoldable/RCInput")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::RCVehicle*), "ApplyRemoteControlInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rcInput});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::RCVehicle::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Cosmetics::RCVehicle::*)()>(&GorillaTag::Cosmetics::RCVehicle::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::RCVehicle*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::RCVehicle::AuthorityUpdate
// Il2CppName: AuthorityUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Cosmetics::RCVehicle::*)(float)>(&GorillaTag::Cosmetics::RCVehicle::AuthorityUpdate)> {
  static const MethodInfo* get() {
    static auto* dt = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::RCVehicle*), "AuthorityUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dt});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::RCVehicle::RemoteUpdate
// Il2CppName: RemoteUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Cosmetics::RCVehicle::*)(float)>(&GorillaTag::Cosmetics::RCVehicle::RemoteUpdate)> {
  static const MethodInfo* get() {
    static auto* dt = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::RCVehicle*), "RemoteUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dt});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::RCVehicle::SharedUpdate
// Il2CppName: SharedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Cosmetics::RCVehicle::*)(float)>(&GorillaTag::Cosmetics::RCVehicle::SharedUpdate)> {
  static const MethodInfo* get() {
    static auto* dt = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::RCVehicle*), "SharedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dt});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::RCVehicle::AuthorityApplyImpact
// Il2CppName: AuthorityApplyImpact
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Cosmetics::RCVehicle::*)(::UnityEngine::Vector3, bool)>(&GorillaTag::Cosmetics::RCVehicle::AuthorityApplyImpact)> {
  static const MethodInfo* get() {
    static auto* hitVelocity = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* isProjectile = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::RCVehicle*), "AuthorityApplyImpact", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hitVelocity, isProjectile});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::RCVehicle::NormalizeAngle180
// Il2CppName: NormalizeAngle180
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GorillaTag::Cosmetics::RCVehicle::*)(float)>(&GorillaTag::Cosmetics::RCVehicle::NormalizeAngle180)> {
  static const MethodInfo* get() {
    static auto* angle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::RCVehicle*), "NormalizeAngle180", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{angle});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::RCVehicle::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
