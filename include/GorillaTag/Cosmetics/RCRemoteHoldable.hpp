// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: TransferrableObject
#include "GlobalNamespace/TransferrableObject.hpp"
// Including type: ISnapTurnOverride
#include "GlobalNamespace/ISnapTurnOverride.hpp"
// Including type: UnityEngine.XR.XRNode
#include "UnityEngine/XR/XRNode.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GorillaTag::Cosmetics
namespace GorillaTag::Cosmetics {
  // Forward declaring type: RCCosmeticNetworkSync
  class RCCosmeticNetworkSync;
  // Forward declaring type: RCVehicle
  class RCVehicle;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: RubberDuckEvents
  class RubberDuckEvents;
  // Forward declaring type: PhotonMessageInfoWrapped
  struct PhotonMessageInfoWrapped;
  // Forward declaring type: InteractionPoint
  class InteractionPoint;
  // Forward declaring type: DropZone
  class DropZone;
}
// Completed forward declares
// Type namespace: GorillaTag.Cosmetics
namespace GorillaTag::Cosmetics {
  // Forward declaring type: RCRemoteHoldable
  class RCRemoteHoldable;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaTag::Cosmetics::RCRemoteHoldable);
DEFINE_IL2CPP_ARG_TYPE(::GorillaTag::Cosmetics::RCRemoteHoldable*, "GorillaTag.Cosmetics", "RCRemoteHoldable");
// Type namespace: GorillaTag.Cosmetics
namespace GorillaTag::Cosmetics {
  // WARNING Size may be invalid!
  // Autogenerated type: GorillaTag.Cosmetics.RCRemoteHoldable
  // [TokenAttribute] Offset: FFFFFFFF
  class RCRemoteHoldable : public ::GlobalNamespace::TransferrableObject/*, public ::GlobalNamespace::ISnapTurnOverride*/ {
    public:
    // Nested type: ::GorillaTag::Cosmetics::RCRemoteHoldable::RCInput
    struct RCInput;
    // Size: 0xC
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: GorillaTag.Cosmetics.RCRemoteHoldable/RCInput
    // [TokenAttribute] Offset: FFFFFFFF
    struct RCInput/*, public ::System::ValueType*/ {
      public:
      public:
      // public UnityEngine.Vector2 joystick
      // Size: 0x8
      // Offset: 0x0
      ::UnityEngine::Vector2 joystick;
      // Field size check
      static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
      // public System.Single trigger
      // Size: 0x4
      // Offset: 0x8
      float trigger;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      public:
      // Creating value type constructor for type: RCInput
      constexpr RCInput(::UnityEngine::Vector2 joystick_ = {}, float trigger_ = {}) noexcept : joystick{joystick_}, trigger{trigger_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public UnityEngine.Vector2 joystick
      [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_joystick();
      // Get instance field reference: public System.Single trigger
      [[deprecated("Use field access instead!")]] float& dyn_trigger();
    }; // GorillaTag.Cosmetics.RCRemoteHoldable/RCInput
    #pragma pack(pop)
    static check_size<sizeof(RCRemoteHoldable::RCInput), 8 + sizeof(float)> __GorillaTag_Cosmetics_RCRemoteHoldable_RCInputSizeCheck;
    static_assert(sizeof(RCRemoteHoldable::RCInput) == 0xC);
    public:
    // private UnityEngine.Transform joystickTransform
    // Size: 0x8
    // Offset: 0x2D0
    ::UnityEngine::Transform* joystickTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform triggerTransform
    // Size: 0x8
    // Offset: 0x2D8
    ::UnityEngine::Transform* triggerTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private GorillaTag.Cosmetics.RCVehicle targetVehicle
    // Size: 0x8
    // Offset: 0x2E0
    ::GorillaTag::Cosmetics::RCVehicle* targetVehicle;
    // Field size check
    static_assert(sizeof(::GorillaTag::Cosmetics::RCVehicle*) == 0x8);
    // private System.String targetVehicle_path
    // Size: 0x8
    // Offset: 0x2E8
    ::StringW targetVehicle_path;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Single joystickLeanDegrees
    // Size: 0x4
    // Offset: 0x2F0
    float joystickLeanDegrees;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single triggerPullDegrees
    // Size: 0x4
    // Offset: 0x2F4
    float triggerPullDegrees;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Quaternion initialJoystickRotation
    // Size: 0x10
    // Offset: 0x2F8
    ::UnityEngine::Quaternion initialJoystickRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private UnityEngine.Quaternion initialTriggerRotation
    // Size: 0x10
    // Offset: 0x308
    ::UnityEngine::Quaternion initialTriggerRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private System.Boolean currentlyHeld
    // Size: 0x1
    // Offset: 0x318
    bool currentlyHeld;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private UnityEngine.XR.XRNode xrNode
    // Size: 0x4
    // Offset: 0x31C
    ::UnityEngine::XR::XRNode xrNode;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::XRNode) == 0x4);
    // private GorillaTag.Cosmetics.RCRemoteHoldable/RCInput currentInput
    // Size: 0xC
    // Offset: 0x320
    ::GorillaTag::Cosmetics::RCRemoteHoldable::RCInput currentInput;
    // Field size check
    static_assert(sizeof(::GorillaTag::Cosmetics::RCRemoteHoldable::RCInput) == 0xC);
    // public GorillaTag.Cosmetics.RCCosmeticNetworkSync networkSync
    // Size: 0x8
    // Offset: 0x330
    ::GorillaTag::Cosmetics::RCCosmeticNetworkSync* networkSync;
    // Field size check
    static_assert(sizeof(::GorillaTag::Cosmetics::RCCosmeticNetworkSync*) == 0x8);
    // private System.String networkSyncPrefabName
    // Size: 0x8
    // Offset: 0x338
    ::StringW networkSyncPrefabName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private RubberDuckEvents _events
    // Size: 0x8
    // Offset: 0x340
    ::GlobalNamespace::RubberDuckEvents* events;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::RubberDuckEvents*) == 0x8);
    // private System.Object[] emptyArgs
    // Size: 0x8
    // Offset: 0x348
    ::ArrayW<::Il2CppObject*> emptyArgs;
    // Field size check
    static_assert(sizeof(::ArrayW<::Il2CppObject*>) == 0x8);
    public:
    // Creating interface conversion operator: operator ::GlobalNamespace::ISnapTurnOverride
    operator ::GlobalNamespace::ISnapTurnOverride() noexcept {
      return *reinterpret_cast<::GlobalNamespace::ISnapTurnOverride*>(this);
    }
    // Get instance field reference: private UnityEngine.Transform joystickTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_joystickTransform();
    // Get instance field reference: private UnityEngine.Transform triggerTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_triggerTransform();
    // Get instance field reference: private GorillaTag.Cosmetics.RCVehicle targetVehicle
    [[deprecated("Use field access instead!")]] ::GorillaTag::Cosmetics::RCVehicle*& dyn_targetVehicle();
    // Get instance field reference: private System.String targetVehicle_path
    [[deprecated("Use field access instead!")]] ::StringW& dyn_targetVehicle_path();
    // Get instance field reference: private System.Single joystickLeanDegrees
    [[deprecated("Use field access instead!")]] float& dyn_joystickLeanDegrees();
    // Get instance field reference: private System.Single triggerPullDegrees
    [[deprecated("Use field access instead!")]] float& dyn_triggerPullDegrees();
    // Get instance field reference: private UnityEngine.Quaternion initialJoystickRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_initialJoystickRotation();
    // Get instance field reference: private UnityEngine.Quaternion initialTriggerRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_initialTriggerRotation();
    // Get instance field reference: private System.Boolean currentlyHeld
    [[deprecated("Use field access instead!")]] bool& dyn_currentlyHeld();
    // Get instance field reference: private UnityEngine.XR.XRNode xrNode
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::XRNode& dyn_xrNode();
    // Get instance field reference: private GorillaTag.Cosmetics.RCRemoteHoldable/RCInput currentInput
    [[deprecated("Use field access instead!")]] ::GorillaTag::Cosmetics::RCRemoteHoldable::RCInput& dyn_currentInput();
    // Get instance field reference: public GorillaTag.Cosmetics.RCCosmeticNetworkSync networkSync
    [[deprecated("Use field access instead!")]] ::GorillaTag::Cosmetics::RCCosmeticNetworkSync*& dyn_networkSync();
    // Get instance field reference: private System.String networkSyncPrefabName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_networkSyncPrefabName();
    // Get instance field reference: private RubberDuckEvents _events
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::RubberDuckEvents*& dyn__events();
    // Get instance field reference: private System.Object[] emptyArgs
    [[deprecated("Use field access instead!")]] ::ArrayW<::Il2CppObject*>& dyn_emptyArgs();
    // public UnityEngine.XR.XRNode get_XRNode()
    // Offset: 0x28BCE54
    ::UnityEngine::XR::XRNode get_XRNode();
    // public GorillaTag.Cosmetics.RCVehicle get_Vehicle()
    // Offset: 0x28BCE5C
    ::GorillaTag::Cosmetics::RCVehicle* get_Vehicle();
    // public System.Boolean TurnOverrideActive()
    // Offset: 0x28BCF68
    bool TurnOverrideActive();
    // private System.Void Update()
    // Offset: 0x28BDD18
    void Update();
    // public System.Void OnStartConnectionEvent(System.Int32 sender, System.Int32 target, System.Object[] args, PhotonMessageInfoWrapped info)
    // Offset: 0x28BE028
    void OnStartConnectionEvent(int sender, int target, ::ArrayW<::Il2CppObject*> args, ::GlobalNamespace::PhotonMessageInfoWrapped info);
    // public System.Void WakeUpRemoteVehicle()
    // Offset: 0x28BD244
    void WakeUpRemoteVehicle();
    // public override System.Void OnSpawn()
    // Offset: 0x28BCE64
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::OnSpawn()
    void OnSpawn();
    // protected override System.Void Awake()
    // Offset: 0x28BCFB0
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::Awake()
    void Awake();
    // public override System.Void OnEnable()
    // Offset: 0x28BD00C
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::OnEnable()
    void OnEnable();
    // public override System.Void OnDisable()
    // Offset: 0x28BD2E0
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::OnDisable()
    void OnDisable();
    // protected override System.Void OnDestroy()
    // Offset: 0x28BD568
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::OnDestroy()
    void OnDestroy();
    // public override System.Void OnGrab(InteractionPoint pointGrabbed, UnityEngine.GameObject grabbingHand)
    // Offset: 0x28BD6AC
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::OnGrab(InteractionPoint pointGrabbed, UnityEngine.GameObject grabbingHand)
    void OnGrab(::GlobalNamespace::InteractionPoint* pointGrabbed, ::UnityEngine::GameObject* grabbingHand);
    // public override System.Boolean OnRelease(DropZone zoneReleased, UnityEngine.GameObject releasingHand)
    // Offset: 0x28BDBB8
    // Implemented from: TransferrableObject
    // Base method: System.Boolean TransferrableObject::OnRelease(DropZone zoneReleased, UnityEngine.GameObject releasingHand)
    bool OnRelease(::GlobalNamespace::DropZone* zoneReleased, ::UnityEngine::GameObject* releasingHand);
    // public System.Void .ctor()
    // Offset: 0x28BE0F4
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::.ctor()
    // Base method: System.Void HoldableObject::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RCRemoteHoldable* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaTag::Cosmetics::RCRemoteHoldable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RCRemoteHoldable*, creationType>()));
    }
  }; // GorillaTag.Cosmetics.RCRemoteHoldable
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GorillaTag::Cosmetics::RCRemoteHoldable::RCInput, "GorillaTag.Cosmetics", "RCRemoteHoldable/RCInput");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaTag::Cosmetics::RCRemoteHoldable::get_XRNode
// Il2CppName: get_XRNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::XR::XRNode (GorillaTag::Cosmetics::RCRemoteHoldable::*)()>(&GorillaTag::Cosmetics::RCRemoteHoldable::get_XRNode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::RCRemoteHoldable*), "get_XRNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::RCRemoteHoldable::get_Vehicle
// Il2CppName: get_Vehicle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GorillaTag::Cosmetics::RCVehicle* (GorillaTag::Cosmetics::RCRemoteHoldable::*)()>(&GorillaTag::Cosmetics::RCRemoteHoldable::get_Vehicle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::RCRemoteHoldable*), "get_Vehicle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::RCRemoteHoldable::TurnOverrideActive
// Il2CppName: TurnOverrideActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaTag::Cosmetics::RCRemoteHoldable::*)()>(&GorillaTag::Cosmetics::RCRemoteHoldable::TurnOverrideActive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::RCRemoteHoldable*), "TurnOverrideActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::RCRemoteHoldable::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Cosmetics::RCRemoteHoldable::*)()>(&GorillaTag::Cosmetics::RCRemoteHoldable::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::RCRemoteHoldable*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::RCRemoteHoldable::OnStartConnectionEvent
// Il2CppName: OnStartConnectionEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Cosmetics::RCRemoteHoldable::*)(int, int, ::ArrayW<::Il2CppObject*>, ::GlobalNamespace::PhotonMessageInfoWrapped)>(&GorillaTag::Cosmetics::RCRemoteHoldable::OnStartConnectionEvent)> {
  static const MethodInfo* get() {
    static auto* sender = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* target = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* args = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("", "PhotonMessageInfoWrapped")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::RCRemoteHoldable*), "OnStartConnectionEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sender, target, args, info});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::RCRemoteHoldable::WakeUpRemoteVehicle
// Il2CppName: WakeUpRemoteVehicle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Cosmetics::RCRemoteHoldable::*)()>(&GorillaTag::Cosmetics::RCRemoteHoldable::WakeUpRemoteVehicle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::RCRemoteHoldable*), "WakeUpRemoteVehicle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::RCRemoteHoldable::OnSpawn
// Il2CppName: OnSpawn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Cosmetics::RCRemoteHoldable::*)()>(&GorillaTag::Cosmetics::RCRemoteHoldable::OnSpawn)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::RCRemoteHoldable*), "OnSpawn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::RCRemoteHoldable::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Cosmetics::RCRemoteHoldable::*)()>(&GorillaTag::Cosmetics::RCRemoteHoldable::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::RCRemoteHoldable*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::RCRemoteHoldable::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Cosmetics::RCRemoteHoldable::*)()>(&GorillaTag::Cosmetics::RCRemoteHoldable::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::RCRemoteHoldable*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::RCRemoteHoldable::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Cosmetics::RCRemoteHoldable::*)()>(&GorillaTag::Cosmetics::RCRemoteHoldable::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::RCRemoteHoldable*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::RCRemoteHoldable::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Cosmetics::RCRemoteHoldable::*)()>(&GorillaTag::Cosmetics::RCRemoteHoldable::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::RCRemoteHoldable*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::RCRemoteHoldable::OnGrab
// Il2CppName: OnGrab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Cosmetics::RCRemoteHoldable::*)(::GlobalNamespace::InteractionPoint*, ::UnityEngine::GameObject*)>(&GorillaTag::Cosmetics::RCRemoteHoldable::OnGrab)> {
  static const MethodInfo* get() {
    static auto* pointGrabbed = &::il2cpp_utils::GetClassFromName("", "InteractionPoint")->byval_arg;
    static auto* grabbingHand = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::RCRemoteHoldable*), "OnGrab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pointGrabbed, grabbingHand});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::RCRemoteHoldable::OnRelease
// Il2CppName: OnRelease
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaTag::Cosmetics::RCRemoteHoldable::*)(::GlobalNamespace::DropZone*, ::UnityEngine::GameObject*)>(&GorillaTag::Cosmetics::RCRemoteHoldable::OnRelease)> {
  static const MethodInfo* get() {
    static auto* zoneReleased = &::il2cpp_utils::GetClassFromName("", "DropZone")->byval_arg;
    static auto* releasingHand = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Cosmetics::RCRemoteHoldable*), "OnRelease", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{zoneReleased, releasingHand});
  }
};
// Writing MetadataGetter for method: GorillaTag::Cosmetics::RCRemoteHoldable::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
