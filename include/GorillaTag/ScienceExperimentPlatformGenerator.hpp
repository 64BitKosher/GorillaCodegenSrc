// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Pun.MonoBehaviourPun
#include "Photon/Pun/MonoBehaviourPun.hpp"
// Including type: ITickSystemPost
#include "GlobalNamespace/ITickSystemPost.hpp"
// Including type: GorillaTag.GuidedRefs.IGuidedRefReceiverMono
#include "GorillaTag/GuidedRefs/IGuidedRefReceiverMono.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: GorillaTag.GuidedRefs.GuidedRefReceiverFieldInfo
#include "GorillaTag/GuidedRefs/GuidedRefReceiverFieldInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GorillaTag
namespace GorillaTag {
  // Forward declaring type: ScienceExperimentManager
  class ScienceExperimentManager;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: Photon::Pun
namespace Photon::Pun {
  // Forward declaring type: PhotonMessageInfo
  struct PhotonMessageInfo;
}
// Forward declaring namespace: GorillaTag::GuidedRefs
namespace GorillaTag::GuidedRefs {
  // Forward declaring type: GuidedRefTryResolveInfo
  struct GuidedRefTryResolveInfo;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: SodaBubble
  class SodaBubble;
}
// Completed forward declares
// Type namespace: GorillaTag
namespace GorillaTag {
  // Forward declaring type: ScienceExperimentPlatformGenerator
  class ScienceExperimentPlatformGenerator;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaTag::ScienceExperimentPlatformGenerator);
DEFINE_IL2CPP_ARG_TYPE(::GorillaTag::ScienceExperimentPlatformGenerator*, "GorillaTag", "ScienceExperimentPlatformGenerator");
// Type namespace: GorillaTag
namespace GorillaTag {
  // Size: 0x120
  #pragma pack(push, 1)
  // Autogenerated type: GorillaTag.ScienceExperimentPlatformGenerator
  // [TokenAttribute] Offset: FFFFFFFF
  class ScienceExperimentPlatformGenerator : public ::Photon::Pun::MonoBehaviourPun/*, public ::GlobalNamespace::ITickSystemPost, public ::GorillaTag::GuidedRefs::IGuidedRefReceiverMono*/ {
    public:
    // Nested type: ::GorillaTag::ScienceExperimentPlatformGenerator::BubbleData
    struct BubbleData;
    // Nested type: ::GorillaTag::ScienceExperimentPlatformGenerator::BubbleSpawnDebug
    struct BubbleSpawnDebug;
    // Size: 0x38
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: GorillaTag.ScienceExperimentPlatformGenerator/BubbleData
    // [TokenAttribute] Offset: FFFFFFFF
    struct BubbleData/*, public ::System::ValueType*/ {
      public:
      public:
      // public UnityEngine.Vector3 position
      // Size: 0xC
      // Offset: 0x0
      ::UnityEngine::Vector3 position;
      // Field size check
      static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
      // public UnityEngine.Vector3 direction
      // Size: 0xC
      // Offset: 0xC
      ::UnityEngine::Vector3 direction;
      // Field size check
      static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
      // public System.Single spawnSize
      // Size: 0x4
      // Offset: 0x18
      float spawnSize;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single lifetime
      // Size: 0x4
      // Offset: 0x1C
      float lifetime;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Double spawnTime
      // Size: 0x8
      // Offset: 0x20
      double spawnTime;
      // Field size check
      static_assert(sizeof(double) == 0x8);
      // public System.Boolean isTrail
      // Size: 0x1
      // Offset: 0x28
      bool isTrail;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // Padding between fields: isTrail and: bubble
      char __padding5[0x7] = {};
      // public SodaBubble bubble
      // Size: 0x8
      // Offset: 0x30
      ::GlobalNamespace::SodaBubble* bubble;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::SodaBubble*) == 0x8);
      public:
      // Creating value type constructor for type: BubbleData
      constexpr BubbleData(::UnityEngine::Vector3 position_ = {}, ::UnityEngine::Vector3 direction_ = {}, float spawnSize_ = {}, float lifetime_ = {}, double spawnTime_ = {}, bool isTrail_ = {}, ::GlobalNamespace::SodaBubble* bubble_ = {}) noexcept : position{position_}, direction{direction_}, spawnSize{spawnSize_}, lifetime{lifetime_}, spawnTime{spawnTime_}, isTrail{isTrail_}, bubble{bubble_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public UnityEngine.Vector3 position
      [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_position();
      // Get instance field reference: public UnityEngine.Vector3 direction
      [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_direction();
      // Get instance field reference: public System.Single spawnSize
      [[deprecated("Use field access instead!")]] float& dyn_spawnSize();
      // Get instance field reference: public System.Single lifetime
      [[deprecated("Use field access instead!")]] float& dyn_lifetime();
      // Get instance field reference: public System.Double spawnTime
      [[deprecated("Use field access instead!")]] double& dyn_spawnTime();
      // Get instance field reference: public System.Boolean isTrail
      [[deprecated("Use field access instead!")]] bool& dyn_isTrail();
      // Get instance field reference: public SodaBubble bubble
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::SodaBubble*& dyn_bubble();
    }; // GorillaTag.ScienceExperimentPlatformGenerator/BubbleData
    #pragma pack(pop)
    static check_size<sizeof(ScienceExperimentPlatformGenerator::BubbleData), 48 + sizeof(::GlobalNamespace::SodaBubble*)> __GorillaTag_ScienceExperimentPlatformGenerator_BubbleDataSizeCheck;
    static_assert(sizeof(ScienceExperimentPlatformGenerator::BubbleData) == 0x38);
    // Size: 0x38
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: GorillaTag.ScienceExperimentPlatformGenerator/BubbleSpawnDebug
    // [TokenAttribute] Offset: FFFFFFFF
    struct BubbleSpawnDebug/*, public ::System::ValueType*/ {
      public:
      public:
      // public UnityEngine.Vector3 initialPosition
      // Size: 0xC
      // Offset: 0x0
      ::UnityEngine::Vector3 initialPosition;
      // Field size check
      static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
      // public UnityEngine.Vector3 initialDirection
      // Size: 0xC
      // Offset: 0xC
      ::UnityEngine::Vector3 initialDirection;
      // Field size check
      static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
      // public UnityEngine.Vector3 spawnPosition
      // Size: 0xC
      // Offset: 0x18
      ::UnityEngine::Vector3 spawnPosition;
      // Field size check
      static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
      // public System.Single minAngle
      // Size: 0x4
      // Offset: 0x24
      float minAngle;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single maxAngle
      // Size: 0x4
      // Offset: 0x28
      float maxAngle;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single edgeCorrectionAngle
      // Size: 0x4
      // Offset: 0x2C
      float edgeCorrectionAngle;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Double spawnTime
      // Size: 0x8
      // Offset: 0x30
      double spawnTime;
      // Field size check
      static_assert(sizeof(double) == 0x8);
      public:
      // Creating value type constructor for type: BubbleSpawnDebug
      constexpr BubbleSpawnDebug(::UnityEngine::Vector3 initialPosition_ = {}, ::UnityEngine::Vector3 initialDirection_ = {}, ::UnityEngine::Vector3 spawnPosition_ = {}, float minAngle_ = {}, float maxAngle_ = {}, float edgeCorrectionAngle_ = {}, double spawnTime_ = {}) noexcept : initialPosition{initialPosition_}, initialDirection{initialDirection_}, spawnPosition{spawnPosition_}, minAngle{minAngle_}, maxAngle{maxAngle_}, edgeCorrectionAngle{edgeCorrectionAngle_}, spawnTime{spawnTime_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public UnityEngine.Vector3 initialPosition
      [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_initialPosition();
      // Get instance field reference: public UnityEngine.Vector3 initialDirection
      [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_initialDirection();
      // Get instance field reference: public UnityEngine.Vector3 spawnPosition
      [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_spawnPosition();
      // Get instance field reference: public System.Single minAngle
      [[deprecated("Use field access instead!")]] float& dyn_minAngle();
      // Get instance field reference: public System.Single maxAngle
      [[deprecated("Use field access instead!")]] float& dyn_maxAngle();
      // Get instance field reference: public System.Single edgeCorrectionAngle
      [[deprecated("Use field access instead!")]] float& dyn_edgeCorrectionAngle();
      // Get instance field reference: public System.Double spawnTime
      [[deprecated("Use field access instead!")]] double& dyn_spawnTime();
    }; // GorillaTag.ScienceExperimentPlatformGenerator/BubbleSpawnDebug
    #pragma pack(pop)
    static check_size<sizeof(ScienceExperimentPlatformGenerator::BubbleSpawnDebug), 48 + sizeof(double)> __GorillaTag_ScienceExperimentPlatformGenerator_BubbleSpawnDebugSizeCheck;
    static_assert(sizeof(ScienceExperimentPlatformGenerator::BubbleSpawnDebug) == 0x38);
    public:
    // private UnityEngine.GameObject spawnedPrefab
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::GameObject* spawnedPrefab;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private System.Single scaleFactor
    // Size: 0x4
    // Offset: 0x30
    float scaleFactor;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector2 surfaceRadiusSpawnRange
    // Size: 0x8
    // Offset: 0x34
    ::UnityEngine::Vector2 surfaceRadiusSpawnRange;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private UnityEngine.Vector2 lifetimeRange
    // Size: 0x8
    // Offset: 0x3C
    ::UnityEngine::Vector2 lifetimeRange;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private UnityEngine.Vector2 sizeRange
    // Size: 0x8
    // Offset: 0x44
    ::UnityEngine::Vector2 sizeRange;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // Padding between fields: sizeRange and: rockCountVsLavaProgress
    char __padding4[0x4] = {};
    // private UnityEngine.AnimationCurve rockCountVsLavaProgress
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::AnimationCurve* rockCountVsLavaProgress;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // private System.Single bubbleCountMultiplier
    // Size: 0x4
    // Offset: 0x58
    float bubbleCountMultiplier;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 maxBubbleCount
    // Size: 0x4
    // Offset: 0x5C
    int maxBubbleCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.AnimationCurve rockLifetimeMultiplierVsLavaProgress
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::AnimationCurve* rockLifetimeMultiplierVsLavaProgress;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // private UnityEngine.AnimationCurve rockMaxSizeMultiplierVsLavaProgress
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::AnimationCurve* rockMaxSizeMultiplierVsLavaProgress;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // private UnityEngine.AnimationCurve spawnRadiusMultiplierVsLavaProgress
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::AnimationCurve* spawnRadiusMultiplierVsLavaProgress;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // private UnityEngine.AnimationCurve rockSizeVsLifetime
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::AnimationCurve* rockSizeVsLifetime;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // private UnityEngine.AnimationCurve trailSpawnRateVsProgress
    // Size: 0x8
    // Offset: 0x80
    ::UnityEngine::AnimationCurve* trailSpawnRateVsProgress;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // private System.Single trailSpawnRateMultiplier
    // Size: 0x4
    // Offset: 0x88
    float trailSpawnRateMultiplier;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: trailSpawnRateMultiplier and: trailBubbleLifetimeVsProgress
    char __padding13[0x4] = {};
    // private UnityEngine.AnimationCurve trailBubbleLifetimeVsProgress
    // Size: 0x8
    // Offset: 0x90
    ::UnityEngine::AnimationCurve* trailBubbleLifetimeVsProgress;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // private UnityEngine.AnimationCurve trailBubbleBoundaryRadiusVsProgress
    // Size: 0x8
    // Offset: 0x98
    ::UnityEngine::AnimationCurve* trailBubbleBoundaryRadiusVsProgress;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // private System.Single trailBubbleLifetimeMultiplier
    // Size: 0x4
    // Offset: 0xA0
    float trailBubbleLifetimeMultiplier;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single trailDistanceBetweenSpawns
    // Size: 0x4
    // Offset: 0xA4
    float trailDistanceBetweenSpawns;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single trailMaxTurnAngle
    // Size: 0x4
    // Offset: 0xA8
    float trailMaxTurnAngle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single trailBubbleSize
    // Size: 0x4
    // Offset: 0xAC
    float trailBubbleSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.AnimationCurve trailCountVsProgress
    // Size: 0x8
    // Offset: 0xB0
    ::UnityEngine::AnimationCurve* trailCountVsProgress;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // private System.Single trailCountMultiplier
    // Size: 0x4
    // Offset: 0xB8
    float trailCountMultiplier;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector2 trailEdgeAvoidanceSpawnsMinMax
    // Size: 0x8
    // Offset: 0xBC
    ::UnityEngine::Vector2 trailEdgeAvoidanceSpawnsMinMax;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private System.Single bubblePopAnticipationTime
    // Size: 0x4
    // Offset: 0xC4
    float bubblePopAnticipationTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single bubblePopWobbleFrequency
    // Size: 0x4
    // Offset: 0xC8
    float bubblePopWobbleFrequency;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single bubblePopWobbleAmplitude
    // Size: 0x4
    // Offset: 0xCC
    float bubblePopWobbleAmplitude;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Transform liquidSurfacePlane
    // Size: 0x8
    // Offset: 0xD0
    ::UnityEngine::Transform* liquidSurfacePlane;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private GorillaTag.GuidedRefs.GuidedRefReceiverFieldInfo liquidSurfacePlane_gRef
    // Size: 0x1C
    // Offset: 0xD8
    ::GorillaTag::GuidedRefs::GuidedRefReceiverFieldInfo liquidSurfacePlane_gRef;
    // Field size check
    static_assert(sizeof(::GorillaTag::GuidedRefs::GuidedRefReceiverFieldInfo) == 0x1C);
    // Padding between fields: liquidSurfacePlane_gRef and: activeBubbles
    char __padding27[0x4] = {};
    // private System.Collections.Generic.List`1<GorillaTag.ScienceExperimentPlatformGenerator/BubbleData> activeBubbles
    // Size: 0x8
    // Offset: 0xF8
    ::System::Collections::Generic::List_1<::GorillaTag::ScienceExperimentPlatformGenerator::BubbleData>* activeBubbles;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GorillaTag::ScienceExperimentPlatformGenerator::BubbleData>*) == 0x8);
    // private System.Collections.Generic.List`1<GorillaTag.ScienceExperimentPlatformGenerator/BubbleData> trailHeads
    // Size: 0x8
    // Offset: 0x100
    ::System::Collections::Generic::List_1<::GorillaTag::ScienceExperimentPlatformGenerator::BubbleData>* trailHeads;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GorillaTag::ScienceExperimentPlatformGenerator::BubbleData>*) == 0x8);
    // private System.Collections.Generic.List`1<GorillaTag.ScienceExperimentPlatformGenerator/BubbleSpawnDebug> bubbleSpawnDebug
    // Size: 0x8
    // Offset: 0x108
    ::System::Collections::Generic::List_1<::GorillaTag::ScienceExperimentPlatformGenerator::BubbleSpawnDebug>* bubbleSpawnDebug;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GorillaTag::ScienceExperimentPlatformGenerator::BubbleSpawnDebug>*) == 0x8);
    // private GorillaTag.ScienceExperimentManager scienceExperimentManager
    // Size: 0x8
    // Offset: 0x110
    ::GorillaTag::ScienceExperimentManager* scienceExperimentManager;
    // Field size check
    static_assert(sizeof(::GorillaTag::ScienceExperimentManager*) == 0x8);
    // private System.Boolean <ITickSystemPost.PostTickRunning>k__BackingField
    // Size: 0x1
    // Offset: 0x118
    bool PostTickRunning;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: PostTickRunning and: GuidedRefsWaitingToResolveCount
    char __padding32[0x3] = {};
    // private System.Int32 <GorillaTag.GuidedRefs.IGuidedRefReceiverMono.GuidedRefsWaitingToResolveCount>k__BackingField
    // Size: 0x4
    // Offset: 0x11C
    int GuidedRefsWaitingToResolveCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating interface conversion operator: operator ::GlobalNamespace::ITickSystemPost
    operator ::GlobalNamespace::ITickSystemPost() noexcept {
      return *reinterpret_cast<::GlobalNamespace::ITickSystemPost*>(this);
    }
    // Creating interface conversion operator: operator ::GorillaTag::GuidedRefs::IGuidedRefReceiverMono
    operator ::GorillaTag::GuidedRefs::IGuidedRefReceiverMono() noexcept {
      return *reinterpret_cast<::GorillaTag::GuidedRefs::IGuidedRefReceiverMono*>(this);
    }
    // Get instance field reference: private UnityEngine.GameObject spawnedPrefab
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_spawnedPrefab();
    // Get instance field reference: private System.Single scaleFactor
    [[deprecated("Use field access instead!")]] float& dyn_scaleFactor();
    // Get instance field reference: private UnityEngine.Vector2 surfaceRadiusSpawnRange
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_surfaceRadiusSpawnRange();
    // Get instance field reference: private UnityEngine.Vector2 lifetimeRange
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_lifetimeRange();
    // Get instance field reference: private UnityEngine.Vector2 sizeRange
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_sizeRange();
    // Get instance field reference: private UnityEngine.AnimationCurve rockCountVsLavaProgress
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_rockCountVsLavaProgress();
    // Get instance field reference: private System.Single bubbleCountMultiplier
    [[deprecated("Use field access instead!")]] float& dyn_bubbleCountMultiplier();
    // Get instance field reference: private System.Int32 maxBubbleCount
    [[deprecated("Use field access instead!")]] int& dyn_maxBubbleCount();
    // Get instance field reference: private UnityEngine.AnimationCurve rockLifetimeMultiplierVsLavaProgress
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_rockLifetimeMultiplierVsLavaProgress();
    // Get instance field reference: private UnityEngine.AnimationCurve rockMaxSizeMultiplierVsLavaProgress
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_rockMaxSizeMultiplierVsLavaProgress();
    // Get instance field reference: private UnityEngine.AnimationCurve spawnRadiusMultiplierVsLavaProgress
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_spawnRadiusMultiplierVsLavaProgress();
    // Get instance field reference: private UnityEngine.AnimationCurve rockSizeVsLifetime
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_rockSizeVsLifetime();
    // Get instance field reference: private UnityEngine.AnimationCurve trailSpawnRateVsProgress
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_trailSpawnRateVsProgress();
    // Get instance field reference: private System.Single trailSpawnRateMultiplier
    [[deprecated("Use field access instead!")]] float& dyn_trailSpawnRateMultiplier();
    // Get instance field reference: private UnityEngine.AnimationCurve trailBubbleLifetimeVsProgress
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_trailBubbleLifetimeVsProgress();
    // Get instance field reference: private UnityEngine.AnimationCurve trailBubbleBoundaryRadiusVsProgress
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_trailBubbleBoundaryRadiusVsProgress();
    // Get instance field reference: private System.Single trailBubbleLifetimeMultiplier
    [[deprecated("Use field access instead!")]] float& dyn_trailBubbleLifetimeMultiplier();
    // Get instance field reference: private System.Single trailDistanceBetweenSpawns
    [[deprecated("Use field access instead!")]] float& dyn_trailDistanceBetweenSpawns();
    // Get instance field reference: private System.Single trailMaxTurnAngle
    [[deprecated("Use field access instead!")]] float& dyn_trailMaxTurnAngle();
    // Get instance field reference: private System.Single trailBubbleSize
    [[deprecated("Use field access instead!")]] float& dyn_trailBubbleSize();
    // Get instance field reference: private UnityEngine.AnimationCurve trailCountVsProgress
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_trailCountVsProgress();
    // Get instance field reference: private System.Single trailCountMultiplier
    [[deprecated("Use field access instead!")]] float& dyn_trailCountMultiplier();
    // Get instance field reference: private UnityEngine.Vector2 trailEdgeAvoidanceSpawnsMinMax
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_trailEdgeAvoidanceSpawnsMinMax();
    // Get instance field reference: private System.Single bubblePopAnticipationTime
    [[deprecated("Use field access instead!")]] float& dyn_bubblePopAnticipationTime();
    // Get instance field reference: private System.Single bubblePopWobbleFrequency
    [[deprecated("Use field access instead!")]] float& dyn_bubblePopWobbleFrequency();
    // Get instance field reference: private System.Single bubblePopWobbleAmplitude
    [[deprecated("Use field access instead!")]] float& dyn_bubblePopWobbleAmplitude();
    // Get instance field reference: private UnityEngine.Transform liquidSurfacePlane
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_liquidSurfacePlane();
    // Get instance field reference: private GorillaTag.GuidedRefs.GuidedRefReceiverFieldInfo liquidSurfacePlane_gRef
    [[deprecated("Use field access instead!")]] ::GorillaTag::GuidedRefs::GuidedRefReceiverFieldInfo& dyn_liquidSurfacePlane_gRef();
    // Get instance field reference: private System.Collections.Generic.List`1<GorillaTag.ScienceExperimentPlatformGenerator/BubbleData> activeBubbles
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GorillaTag::ScienceExperimentPlatformGenerator::BubbleData>*& dyn_activeBubbles();
    // Get instance field reference: private System.Collections.Generic.List`1<GorillaTag.ScienceExperimentPlatformGenerator/BubbleData> trailHeads
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GorillaTag::ScienceExperimentPlatformGenerator::BubbleData>*& dyn_trailHeads();
    // Get instance field reference: private System.Collections.Generic.List`1<GorillaTag.ScienceExperimentPlatformGenerator/BubbleSpawnDebug> bubbleSpawnDebug
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GorillaTag::ScienceExperimentPlatformGenerator::BubbleSpawnDebug>*& dyn_bubbleSpawnDebug();
    // Get instance field reference: private GorillaTag.ScienceExperimentManager scienceExperimentManager
    [[deprecated("Use field access instead!")]] ::GorillaTag::ScienceExperimentManager*& dyn_scienceExperimentManager();
    // Get instance field reference: private System.Boolean <ITickSystemPost.PostTickRunning>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$ITickSystemPost_PostTickRunning$k__BackingField();
    // Get instance field reference: private System.Int32 <GorillaTag.GuidedRefs.IGuidedRefReceiverMono.GuidedRefsWaitingToResolveCount>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$GorillaTag_GuidedRefs_IGuidedRefReceiverMono_GuidedRefsWaitingToResolveCount$k__BackingField();
    // private System.Void Awake()
    // Offset: 0x28863DC
    void Awake();
    // private System.Void OnEnable()
    // Offset: 0x28864A4
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x2886594
    void OnDisable();
    // private System.Boolean ITickSystemPost.get_PostTickRunning()
    // Offset: 0x2886600
    bool ITickSystemPost_get_PostTickRunning();
    // private System.Void ITickSystemPost.set_PostTickRunning(System.Boolean value)
    // Offset: 0x2886608
    void ITickSystemPost_set_PostTickRunning(bool value);
    // private System.Void ITickSystemPost.PostTick()
    // Offset: 0x2886614
    void ITickSystemPost_PostTick();
    // private System.Void RemoveExpiredBubbles(System.Double currentTime)
    // Offset: 0x2886F08
    void RemoveExpiredBubbles(double currentTime);
    // private System.Void SpawnNewBubbles(System.Double currentTime)
    // Offset: 0x2887040
    void SpawnNewBubbles(double currentTime);
    // private System.Void UpdateActiveBubbles(System.Double currentTime)
    // Offset: 0x2887134
    void UpdateActiveBubbles(double currentTime);
    // private System.Void UpdateTrails(System.Double currentTime)
    // Offset: 0x28866C8
    void UpdateTrails(double currentTime);
    // private System.Void SpawnRockAuthority(System.Double currentTime, System.Single lavaProgress)
    // Offset: 0x2887494
    void SpawnRockAuthority(double currentTime, float lavaProgress);
    // private System.Void SpawnTrailAuthority(System.Double currentTime, System.Single lavaProgress)
    // Offset: 0x288789C
    void SpawnTrailAuthority(double currentTime, float lavaProgress);
    // private System.Void SpawnSodaBubbleLocal(UnityEngine.Vector2 surfacePosLocal, System.Single spawnSize, System.Single lifetime, System.Double spawnTime, System.Boolean addAsTrail, UnityEngine.Vector3 direction)
    // Offset: 0x2887D1C
    void SpawnSodaBubbleLocal(::UnityEngine::Vector2 surfacePosLocal, float spawnSize, float lifetime, double spawnTime, bool addAsTrail, ::UnityEngine::Vector3 direction);
    // public System.Void SpawnSodaBubbleRPC(UnityEngine.Vector2 surfacePosLocal, System.Single spawnSize, System.Single lifetime, System.Double spawnTime, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x288839C
    void SpawnSodaBubbleRPC(::UnityEngine::Vector2 surfacePosLocal, float spawnSize, float lifetime, double spawnTime, ::Photon::Pun::PhotonMessageInfo info);
    // private UnityEngine.Vector2 GetSpawnPositionWithClearance(UnityEngine.Vector2 inputPosition, System.Single inputSize, System.Single maxDistance, UnityEngine.Vector3 lavaSurfaceOrigin)
    // Offset: 0x28880A8
    ::UnityEngine::Vector2 GetSpawnPositionWithClearance(::UnityEngine::Vector2 inputPosition, float inputSize, float maxDistance, ::UnityEngine::Vector3 lavaSurfaceOrigin);
    // private System.Void GorillaTag.GuidedRefs.IGuidedRefObject.GuidedRefInitialize()
    // Offset: 0x288866C
    void GorillaTag_GuidedRefs_IGuidedRefObject_GuidedRefInitialize();
    // private System.Int32 GorillaTag.GuidedRefs.IGuidedRefReceiverMono.get_GuidedRefsWaitingToResolveCount()
    // Offset: 0x288871C
    int GorillaTag_GuidedRefs_IGuidedRefReceiverMono_get_GuidedRefsWaitingToResolveCount();
    // private System.Void GorillaTag.GuidedRefs.IGuidedRefReceiverMono.set_GuidedRefsWaitingToResolveCount(System.Int32 value)
    // Offset: 0x2888724
    void GorillaTag_GuidedRefs_IGuidedRefReceiverMono_set_GuidedRefsWaitingToResolveCount(int value);
    // private System.Boolean GorillaTag.GuidedRefs.IGuidedRefReceiverMono.GuidedRefTryResolveReference(GorillaTag.GuidedRefs.GuidedRefTryResolveInfo target)
    // Offset: 0x288872C
    bool GorillaTag_GuidedRefs_IGuidedRefReceiverMono_GuidedRefTryResolveReference(::GorillaTag::GuidedRefs::GuidedRefTryResolveInfo target);
    // private System.Void GorillaTag.GuidedRefs.IGuidedRefReceiverMono.OnAllGuidedRefsResolved()
    // Offset: 0x28887DC
    void GorillaTag_GuidedRefs_IGuidedRefReceiverMono_OnAllGuidedRefsResolved();
    // private System.Void GorillaTag.GuidedRefs.IGuidedRefReceiverMono.OnGuidedRefTargetDestroyed(System.Int32 fieldId)
    // Offset: 0x2888864
    void GorillaTag_GuidedRefs_IGuidedRefReceiverMono_OnGuidedRefTargetDestroyed(int fieldId);
    // public System.Void .ctor()
    // Offset: 0x28888D0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ScienceExperimentPlatformGenerator* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaTag::ScienceExperimentPlatformGenerator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ScienceExperimentPlatformGenerator*, creationType>()));
    }
    // private UnityEngine.Transform GorillaTag.GuidedRefs.IGuidedRefMonoBehaviour.get_transform()
    // Offset: 0x2888BE4
    ::UnityEngine::Transform* GorillaTag_GuidedRefs_IGuidedRefMonoBehaviour_get_transform();
    // private System.Int32 GorillaTag.GuidedRefs.IGuidedRefObject.GetInstanceID()
    // Offset: 0x2888BEC
    int GorillaTag_GuidedRefs_IGuidedRefObject_GetInstanceID();
  }; // GorillaTag.ScienceExperimentPlatformGenerator
  #pragma pack(pop)
  static check_size<sizeof(ScienceExperimentPlatformGenerator), 284 + sizeof(int)> __GorillaTag_ScienceExperimentPlatformGeneratorSizeCheck;
  static_assert(sizeof(ScienceExperimentPlatformGenerator) == 0x120);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GorillaTag::ScienceExperimentPlatformGenerator::BubbleSpawnDebug, "GorillaTag", "ScienceExperimentPlatformGenerator/BubbleSpawnDebug");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GorillaTag::ScienceExperimentPlatformGenerator::BubbleData, "GorillaTag", "ScienceExperimentPlatformGenerator/BubbleData");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentPlatformGenerator::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ScienceExperimentPlatformGenerator::*)()>(&GorillaTag::ScienceExperimentPlatformGenerator::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentPlatformGenerator*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentPlatformGenerator::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ScienceExperimentPlatformGenerator::*)()>(&GorillaTag::ScienceExperimentPlatformGenerator::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentPlatformGenerator*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentPlatformGenerator::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ScienceExperimentPlatformGenerator::*)()>(&GorillaTag::ScienceExperimentPlatformGenerator::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentPlatformGenerator*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentPlatformGenerator::ITickSystemPost_get_PostTickRunning
// Il2CppName: ITickSystemPost.get_PostTickRunning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaTag::ScienceExperimentPlatformGenerator::*)()>(&GorillaTag::ScienceExperimentPlatformGenerator::ITickSystemPost_get_PostTickRunning)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentPlatformGenerator*), "ITickSystemPost.get_PostTickRunning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentPlatformGenerator::ITickSystemPost_set_PostTickRunning
// Il2CppName: ITickSystemPost.set_PostTickRunning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ScienceExperimentPlatformGenerator::*)(bool)>(&GorillaTag::ScienceExperimentPlatformGenerator::ITickSystemPost_set_PostTickRunning)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentPlatformGenerator*), "ITickSystemPost.set_PostTickRunning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentPlatformGenerator::ITickSystemPost_PostTick
// Il2CppName: ITickSystemPost.PostTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ScienceExperimentPlatformGenerator::*)()>(&GorillaTag::ScienceExperimentPlatformGenerator::ITickSystemPost_PostTick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentPlatformGenerator*), "ITickSystemPost.PostTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentPlatformGenerator::RemoveExpiredBubbles
// Il2CppName: RemoveExpiredBubbles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ScienceExperimentPlatformGenerator::*)(double)>(&GorillaTag::ScienceExperimentPlatformGenerator::RemoveExpiredBubbles)> {
  static const MethodInfo* get() {
    static auto* currentTime = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentPlatformGenerator*), "RemoveExpiredBubbles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currentTime});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentPlatformGenerator::SpawnNewBubbles
// Il2CppName: SpawnNewBubbles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ScienceExperimentPlatformGenerator::*)(double)>(&GorillaTag::ScienceExperimentPlatformGenerator::SpawnNewBubbles)> {
  static const MethodInfo* get() {
    static auto* currentTime = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentPlatformGenerator*), "SpawnNewBubbles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currentTime});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentPlatformGenerator::UpdateActiveBubbles
// Il2CppName: UpdateActiveBubbles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ScienceExperimentPlatformGenerator::*)(double)>(&GorillaTag::ScienceExperimentPlatformGenerator::UpdateActiveBubbles)> {
  static const MethodInfo* get() {
    static auto* currentTime = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentPlatformGenerator*), "UpdateActiveBubbles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currentTime});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentPlatformGenerator::UpdateTrails
// Il2CppName: UpdateTrails
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ScienceExperimentPlatformGenerator::*)(double)>(&GorillaTag::ScienceExperimentPlatformGenerator::UpdateTrails)> {
  static const MethodInfo* get() {
    static auto* currentTime = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentPlatformGenerator*), "UpdateTrails", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currentTime});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentPlatformGenerator::SpawnRockAuthority
// Il2CppName: SpawnRockAuthority
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ScienceExperimentPlatformGenerator::*)(double, float)>(&GorillaTag::ScienceExperimentPlatformGenerator::SpawnRockAuthority)> {
  static const MethodInfo* get() {
    static auto* currentTime = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* lavaProgress = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentPlatformGenerator*), "SpawnRockAuthority", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currentTime, lavaProgress});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentPlatformGenerator::SpawnTrailAuthority
// Il2CppName: SpawnTrailAuthority
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ScienceExperimentPlatformGenerator::*)(double, float)>(&GorillaTag::ScienceExperimentPlatformGenerator::SpawnTrailAuthority)> {
  static const MethodInfo* get() {
    static auto* currentTime = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* lavaProgress = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentPlatformGenerator*), "SpawnTrailAuthority", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currentTime, lavaProgress});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentPlatformGenerator::SpawnSodaBubbleLocal
// Il2CppName: SpawnSodaBubbleLocal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ScienceExperimentPlatformGenerator::*)(::UnityEngine::Vector2, float, float, double, bool, ::UnityEngine::Vector3)>(&GorillaTag::ScienceExperimentPlatformGenerator::SpawnSodaBubbleLocal)> {
  static const MethodInfo* get() {
    static auto* surfacePosLocal = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* spawnSize = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* lifetime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* spawnTime = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* addAsTrail = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* direction = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentPlatformGenerator*), "SpawnSodaBubbleLocal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{surfacePosLocal, spawnSize, lifetime, spawnTime, addAsTrail, direction});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentPlatformGenerator::SpawnSodaBubbleRPC
// Il2CppName: SpawnSodaBubbleRPC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ScienceExperimentPlatformGenerator::*)(::UnityEngine::Vector2, float, float, double, ::Photon::Pun::PhotonMessageInfo)>(&GorillaTag::ScienceExperimentPlatformGenerator::SpawnSodaBubbleRPC)> {
  static const MethodInfo* get() {
    static auto* surfacePosLocal = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* spawnSize = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* lifetime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* spawnTime = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentPlatformGenerator*), "SpawnSodaBubbleRPC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{surfacePosLocal, spawnSize, lifetime, spawnTime, info});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentPlatformGenerator::GetSpawnPositionWithClearance
// Il2CppName: GetSpawnPositionWithClearance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (GorillaTag::ScienceExperimentPlatformGenerator::*)(::UnityEngine::Vector2, float, float, ::UnityEngine::Vector3)>(&GorillaTag::ScienceExperimentPlatformGenerator::GetSpawnPositionWithClearance)> {
  static const MethodInfo* get() {
    static auto* inputPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* inputSize = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* maxDistance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* lavaSurfaceOrigin = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentPlatformGenerator*), "GetSpawnPositionWithClearance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inputPosition, inputSize, maxDistance, lavaSurfaceOrigin});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentPlatformGenerator::GorillaTag_GuidedRefs_IGuidedRefObject_GuidedRefInitialize
// Il2CppName: GorillaTag.GuidedRefs.IGuidedRefObject.GuidedRefInitialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ScienceExperimentPlatformGenerator::*)()>(&GorillaTag::ScienceExperimentPlatformGenerator::GorillaTag_GuidedRefs_IGuidedRefObject_GuidedRefInitialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentPlatformGenerator*), "GorillaTag.GuidedRefs.IGuidedRefObject.GuidedRefInitialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentPlatformGenerator::GorillaTag_GuidedRefs_IGuidedRefReceiverMono_get_GuidedRefsWaitingToResolveCount
// Il2CppName: GorillaTag.GuidedRefs.IGuidedRefReceiverMono.get_GuidedRefsWaitingToResolveCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GorillaTag::ScienceExperimentPlatformGenerator::*)()>(&GorillaTag::ScienceExperimentPlatformGenerator::GorillaTag_GuidedRefs_IGuidedRefReceiverMono_get_GuidedRefsWaitingToResolveCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentPlatformGenerator*), "GorillaTag.GuidedRefs.IGuidedRefReceiverMono.get_GuidedRefsWaitingToResolveCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentPlatformGenerator::GorillaTag_GuidedRefs_IGuidedRefReceiverMono_set_GuidedRefsWaitingToResolveCount
// Il2CppName: GorillaTag.GuidedRefs.IGuidedRefReceiverMono.set_GuidedRefsWaitingToResolveCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ScienceExperimentPlatformGenerator::*)(int)>(&GorillaTag::ScienceExperimentPlatformGenerator::GorillaTag_GuidedRefs_IGuidedRefReceiverMono_set_GuidedRefsWaitingToResolveCount)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentPlatformGenerator*), "GorillaTag.GuidedRefs.IGuidedRefReceiverMono.set_GuidedRefsWaitingToResolveCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentPlatformGenerator::GorillaTag_GuidedRefs_IGuidedRefReceiverMono_GuidedRefTryResolveReference
// Il2CppName: GorillaTag.GuidedRefs.IGuidedRefReceiverMono.GuidedRefTryResolveReference
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaTag::ScienceExperimentPlatformGenerator::*)(::GorillaTag::GuidedRefs::GuidedRefTryResolveInfo)>(&GorillaTag::ScienceExperimentPlatformGenerator::GorillaTag_GuidedRefs_IGuidedRefReceiverMono_GuidedRefTryResolveReference)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("GorillaTag.GuidedRefs", "GuidedRefTryResolveInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentPlatformGenerator*), "GorillaTag.GuidedRefs.IGuidedRefReceiverMono.GuidedRefTryResolveReference", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentPlatformGenerator::GorillaTag_GuidedRefs_IGuidedRefReceiverMono_OnAllGuidedRefsResolved
// Il2CppName: GorillaTag.GuidedRefs.IGuidedRefReceiverMono.OnAllGuidedRefsResolved
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ScienceExperimentPlatformGenerator::*)()>(&GorillaTag::ScienceExperimentPlatformGenerator::GorillaTag_GuidedRefs_IGuidedRefReceiverMono_OnAllGuidedRefsResolved)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentPlatformGenerator*), "GorillaTag.GuidedRefs.IGuidedRefReceiverMono.OnAllGuidedRefsResolved", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentPlatformGenerator::GorillaTag_GuidedRefs_IGuidedRefReceiverMono_OnGuidedRefTargetDestroyed
// Il2CppName: GorillaTag.GuidedRefs.IGuidedRefReceiverMono.OnGuidedRefTargetDestroyed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ScienceExperimentPlatformGenerator::*)(int)>(&GorillaTag::ScienceExperimentPlatformGenerator::GorillaTag_GuidedRefs_IGuidedRefReceiverMono_OnGuidedRefTargetDestroyed)> {
  static const MethodInfo* get() {
    static auto* fieldId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentPlatformGenerator*), "GorillaTag.GuidedRefs.IGuidedRefReceiverMono.OnGuidedRefTargetDestroyed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fieldId});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentPlatformGenerator::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentPlatformGenerator::GorillaTag_GuidedRefs_IGuidedRefMonoBehaviour_get_transform
// Il2CppName: GorillaTag.GuidedRefs.IGuidedRefMonoBehaviour.get_transform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (GorillaTag::ScienceExperimentPlatformGenerator::*)()>(&GorillaTag::ScienceExperimentPlatformGenerator::GorillaTag_GuidedRefs_IGuidedRefMonoBehaviour_get_transform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentPlatformGenerator*), "GorillaTag.GuidedRefs.IGuidedRefMonoBehaviour.get_transform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentPlatformGenerator::GorillaTag_GuidedRefs_IGuidedRefObject_GetInstanceID
// Il2CppName: GorillaTag.GuidedRefs.IGuidedRefObject.GetInstanceID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GorillaTag::ScienceExperimentPlatformGenerator::*)()>(&GorillaTag::ScienceExperimentPlatformGenerator::GorillaTag_GuidedRefs_IGuidedRefObject_GetInstanceID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentPlatformGenerator*), "GorillaTag.GuidedRefs.IGuidedRefObject.GetInstanceID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
