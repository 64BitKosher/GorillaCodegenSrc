// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Type namespace: GorillaTag
namespace GorillaTag {
  // Forward declaring type: ISpawnable
  class ISpawnable;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaTag::ISpawnable);
DEFINE_IL2CPP_ARG_TYPE(::GorillaTag::ISpawnable*, "GorillaTag", "ISpawnable");
// Type namespace: GorillaTag
namespace GorillaTag {
  // Size: 0x0
  #pragma pack(push, 1)
  // Autogenerated type: GorillaTag.ISpawnable
  // [TokenAttribute] Offset: FFFFFFFF
  class ISpawnable {
    public:
    // public System.Boolean get_IsSpawned()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_IsSpawned();
    // public System.Void set_IsSpawned(System.Boolean value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_IsSpawned(bool value);
    // public System.Void OnSpawn()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnSpawn();
    // public System.Void OnDespawn()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnDespawn();
  }; // GorillaTag.ISpawnable
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaTag::ISpawnable::get_IsSpawned
// Il2CppName: get_IsSpawned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaTag::ISpawnable::*)()>(&GorillaTag::ISpawnable::get_IsSpawned)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ISpawnable*), "get_IsSpawned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::ISpawnable::set_IsSpawned
// Il2CppName: set_IsSpawned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ISpawnable::*)(bool)>(&GorillaTag::ISpawnable::set_IsSpawned)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ISpawnable*), "set_IsSpawned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GorillaTag::ISpawnable::OnSpawn
// Il2CppName: OnSpawn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ISpawnable::*)()>(&GorillaTag::ISpawnable::OnSpawn)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ISpawnable*), "OnSpawn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::ISpawnable::OnDespawn
// Il2CppName: OnDespawn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ISpawnable::*)()>(&GorillaTag::ISpawnable::OnDespawn)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ISpawnable*), "OnDespawn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
