// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: ITickSystemPost
#include "GlobalNamespace/ITickSystemPost.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
  // Forward declaring type: ParticleSystem
  class ParticleSystem;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: SoundBankPlayer
  class SoundBankPlayer;
}
// Completed forward declares
// Type namespace: GorillaTag.Reactions
namespace GorillaTag::Reactions {
  // Forward declaring type: ShakeReaction
  class ShakeReaction;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaTag::Reactions::ShakeReaction);
DEFINE_IL2CPP_ARG_TYPE(::GorillaTag::Reactions::ShakeReaction*, "GorillaTag.Reactions", "ShakeReaction");
// Type namespace: GorillaTag.Reactions
namespace GorillaTag::Reactions {
  // Size: 0xB8
  #pragma pack(push, 1)
  // Autogenerated type: GorillaTag.Reactions.ShakeReaction
  // [TokenAttribute] Offset: FFFFFFFF
  class ShakeReaction : public ::UnityEngine::MonoBehaviour/*, public ::GlobalNamespace::ITickSystemPost*/ {
    public:
    public:
    // private UnityEngine.Transform shakeXform
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Transform* shakeXform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private System.Single velocityThreshold
    // Size: 0x4
    // Offset: 0x28
    float velocityThreshold;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: velocityThreshold and: shakeSoundBankPlayer
    char __padding1[0x4] = {};
    // private SoundBankPlayer shakeSoundBankPlayer
    // Size: 0x8
    // Offset: 0x30
    ::GlobalNamespace::SoundBankPlayer* shakeSoundBankPlayer;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SoundBankPlayer*) == 0x8);
    // private System.Single shakeSoundCooldown
    // Size: 0x4
    // Offset: 0x38
    float shakeSoundCooldown;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: shakeSoundCooldown and: loopSoundAudioSource
    char __padding3[0x4] = {};
    // private UnityEngine.AudioSource loopSoundAudioSource
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::AudioSource* loopSoundAudioSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // private System.Single loopSoundBaseVolume
    // Size: 0x4
    // Offset: 0x48
    float loopSoundBaseVolume;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single loopSoundSustainDuration
    // Size: 0x4
    // Offset: 0x4C
    float loopSoundSustainDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single loopSoundFadeInDuration
    // Size: 0x4
    // Offset: 0x50
    float loopSoundFadeInDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: loopSoundFadeInDuration and: loopSoundFadeInCurve
    char __padding7[0x4] = {};
    // private UnityEngine.AnimationCurve loopSoundFadeInCurve
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::AnimationCurve* loopSoundFadeInCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // private System.Single loopSoundFadeOutDuration
    // Size: 0x4
    // Offset: 0x60
    float loopSoundFadeOutDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: loopSoundFadeOutDuration and: loopSoundFadeOutCurve
    char __padding9[0x4] = {};
    // private UnityEngine.AnimationCurve loopSoundFadeOutCurve
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::AnimationCurve* loopSoundFadeOutCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // private UnityEngine.ParticleSystem particles
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::ParticleSystem* particles;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystem*) == 0x8);
    // private UnityEngine.AnimationCurve emissionCurve
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::AnimationCurve* emissionCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // private System.Single particleDuration
    // Size: 0x4
    // Offset: 0x80
    float particleDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean <ITickSystemPost.PostTickRunning>k__BackingField
    // Size: 0x1
    // Offset: 0x84
    bool PostTickRunning;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: PostTickRunning and: sampleHistoryTime
    char __padding14[0x3] = {};
    // private System.Single[] sampleHistoryTime
    // Size: 0x8
    // Offset: 0x88
    ::ArrayW<float> sampleHistoryTime;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // private UnityEngine.Vector3[] sampleHistoryPos
    // Size: 0x8
    // Offset: 0x90
    ::ArrayW<::UnityEngine::Vector3> sampleHistoryPos;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // private UnityEngine.Vector3[] sampleHistoryVel
    // Size: 0x8
    // Offset: 0x98
    ::ArrayW<::UnityEngine::Vector3> sampleHistoryVel;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // private System.Int32 currentIndex
    // Size: 0x4
    // Offset: 0xA0
    int currentIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single lastShakeSoundTime
    // Size: 0x4
    // Offset: 0xA4
    float lastShakeSoundTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single lastShakeTime
    // Size: 0x4
    // Offset: 0xA8
    float lastShakeTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single maxEmissionRate
    // Size: 0x4
    // Offset: 0xAC
    float maxEmissionRate;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean hasLoopSound
    // Size: 0x1
    // Offset: 0xB0
    bool hasLoopSound;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean hasShakeSound
    // Size: 0x1
    // Offset: 0xB1
    bool hasShakeSound;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean hasParticleSystem
    // Size: 0x1
    // Offset: 0xB2
    bool hasParticleSystem;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: hasParticleSystem and: poopVelocity
    char __padding24[0x1] = {};
    // private System.Single poopVelocity
    // Size: 0x4
    // Offset: 0xB4
    float poopVelocity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating interface conversion operator: operator ::GlobalNamespace::ITickSystemPost
    operator ::GlobalNamespace::ITickSystemPost() noexcept {
      return *reinterpret_cast<::GlobalNamespace::ITickSystemPost*>(this);
    }
    // static field const value: static private System.Int32 sampleHistorySize
    static constexpr const int sampleHistorySize = 256;
    // Get static field: static private System.Int32 sampleHistorySize
    static int _get_sampleHistorySize();
    // Set static field: static private System.Int32 sampleHistorySize
    static void _set_sampleHistorySize(int value);
    // Get instance field reference: private UnityEngine.Transform shakeXform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_shakeXform();
    // Get instance field reference: private System.Single velocityThreshold
    [[deprecated("Use field access instead!")]] float& dyn_velocityThreshold();
    // Get instance field reference: private SoundBankPlayer shakeSoundBankPlayer
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SoundBankPlayer*& dyn_shakeSoundBankPlayer();
    // Get instance field reference: private System.Single shakeSoundCooldown
    [[deprecated("Use field access instead!")]] float& dyn_shakeSoundCooldown();
    // Get instance field reference: private UnityEngine.AudioSource loopSoundAudioSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_loopSoundAudioSource();
    // Get instance field reference: private System.Single loopSoundBaseVolume
    [[deprecated("Use field access instead!")]] float& dyn_loopSoundBaseVolume();
    // Get instance field reference: private System.Single loopSoundSustainDuration
    [[deprecated("Use field access instead!")]] float& dyn_loopSoundSustainDuration();
    // Get instance field reference: private System.Single loopSoundFadeInDuration
    [[deprecated("Use field access instead!")]] float& dyn_loopSoundFadeInDuration();
    // Get instance field reference: private UnityEngine.AnimationCurve loopSoundFadeInCurve
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_loopSoundFadeInCurve();
    // Get instance field reference: private System.Single loopSoundFadeOutDuration
    [[deprecated("Use field access instead!")]] float& dyn_loopSoundFadeOutDuration();
    // Get instance field reference: private UnityEngine.AnimationCurve loopSoundFadeOutCurve
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_loopSoundFadeOutCurve();
    // Get instance field reference: private UnityEngine.ParticleSystem particles
    [[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& dyn_particles();
    // Get instance field reference: private UnityEngine.AnimationCurve emissionCurve
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_emissionCurve();
    // Get instance field reference: private System.Single particleDuration
    [[deprecated("Use field access instead!")]] float& dyn_particleDuration();
    // Get instance field reference: private System.Boolean <ITickSystemPost.PostTickRunning>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$ITickSystemPost_PostTickRunning$k__BackingField();
    // Get instance field reference: private System.Single[] sampleHistoryTime
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_sampleHistoryTime();
    // Get instance field reference: private UnityEngine.Vector3[] sampleHistoryPos
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_sampleHistoryPos();
    // Get instance field reference: private UnityEngine.Vector3[] sampleHistoryVel
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_sampleHistoryVel();
    // Get instance field reference: private System.Int32 currentIndex
    [[deprecated("Use field access instead!")]] int& dyn_currentIndex();
    // Get instance field reference: private System.Single lastShakeSoundTime
    [[deprecated("Use field access instead!")]] float& dyn_lastShakeSoundTime();
    // Get instance field reference: private System.Single lastShakeTime
    [[deprecated("Use field access instead!")]] float& dyn_lastShakeTime();
    // Get instance field reference: private System.Single maxEmissionRate
    [[deprecated("Use field access instead!")]] float& dyn_maxEmissionRate();
    // Get instance field reference: private System.Boolean hasLoopSound
    [[deprecated("Use field access instead!")]] bool& dyn_hasLoopSound();
    // Get instance field reference: private System.Boolean hasShakeSound
    [[deprecated("Use field access instead!")]] bool& dyn_hasShakeSound();
    // Get instance field reference: private System.Boolean hasParticleSystem
    [[deprecated("Use field access instead!")]] bool& dyn_hasParticleSystem();
    // Get instance field reference: private System.Single poopVelocity
    [[deprecated("Use field access instead!")]] float& dyn_poopVelocity();
    // private System.Single get_loopSoundTotalDuration()
    // Offset: 0x28A50A4
    float get_loopSoundTotalDuration();
    // private System.Boolean ITickSystemPost.get_PostTickRunning()
    // Offset: 0x28A50B8
    bool ITickSystemPost_get_PostTickRunning();
    // private System.Void ITickSystemPost.set_PostTickRunning(System.Boolean value)
    // Offset: 0x28A50C0
    void ITickSystemPost_set_PostTickRunning(bool value);
    // protected System.Void Awake()
    // Offset: 0x28A50CC
    void Awake();
    // protected System.Void OnEnable()
    // Offset: 0x28A5284
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x28A54BC
    void OnDisable();
    // private System.Void HandleApplicationQuitting()
    // Offset: 0x28A5578
    void HandleApplicationQuitting();
    // private System.Void ITickSystemPost.PostTick()
    // Offset: 0x28A55E4
    void ITickSystemPost_PostTick();
    // public System.Void .ctor()
    // Offset: 0x28A5A28
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ShakeReaction* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaTag::Reactions::ShakeReaction::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ShakeReaction*, creationType>()));
    }
  }; // GorillaTag.Reactions.ShakeReaction
  #pragma pack(pop)
  static check_size<sizeof(ShakeReaction), 180 + sizeof(float)> __GorillaTag_Reactions_ShakeReactionSizeCheck;
  static_assert(sizeof(ShakeReaction) == 0xB8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaTag::Reactions::ShakeReaction::get_loopSoundTotalDuration
// Il2CppName: get_loopSoundTotalDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GorillaTag::Reactions::ShakeReaction::*)()>(&GorillaTag::Reactions::ShakeReaction::get_loopSoundTotalDuration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Reactions::ShakeReaction*), "get_loopSoundTotalDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Reactions::ShakeReaction::ITickSystemPost_get_PostTickRunning
// Il2CppName: ITickSystemPost.get_PostTickRunning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaTag::Reactions::ShakeReaction::*)()>(&GorillaTag::Reactions::ShakeReaction::ITickSystemPost_get_PostTickRunning)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Reactions::ShakeReaction*), "ITickSystemPost.get_PostTickRunning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Reactions::ShakeReaction::ITickSystemPost_set_PostTickRunning
// Il2CppName: ITickSystemPost.set_PostTickRunning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Reactions::ShakeReaction::*)(bool)>(&GorillaTag::Reactions::ShakeReaction::ITickSystemPost_set_PostTickRunning)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Reactions::ShakeReaction*), "ITickSystemPost.set_PostTickRunning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GorillaTag::Reactions::ShakeReaction::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Reactions::ShakeReaction::*)()>(&GorillaTag::Reactions::ShakeReaction::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Reactions::ShakeReaction*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Reactions::ShakeReaction::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Reactions::ShakeReaction::*)()>(&GorillaTag::Reactions::ShakeReaction::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Reactions::ShakeReaction*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Reactions::ShakeReaction::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Reactions::ShakeReaction::*)()>(&GorillaTag::Reactions::ShakeReaction::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Reactions::ShakeReaction*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Reactions::ShakeReaction::HandleApplicationQuitting
// Il2CppName: HandleApplicationQuitting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Reactions::ShakeReaction::*)()>(&GorillaTag::Reactions::ShakeReaction::HandleApplicationQuitting)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Reactions::ShakeReaction*), "HandleApplicationQuitting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Reactions::ShakeReaction::ITickSystemPost_PostTick
// Il2CppName: ITickSystemPost.PostTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Reactions::ShakeReaction::*)()>(&GorillaTag::Reactions::ShakeReaction::ITickSystemPost_PostTick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Reactions::ShakeReaction*), "ITickSystemPost.PostTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Reactions::ShakeReaction::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
