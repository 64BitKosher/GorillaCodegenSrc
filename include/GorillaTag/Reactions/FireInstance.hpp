// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: GorillaTag.SturdyAssetRef`1
#include "GorillaTag/SturdyAssetRef_1.hpp"
// Including type: UnityEngine.ParticleSystem/EmissionModule
#include "UnityEngine/ParticleSystem_EmissionModule.hpp"
// Including type: UnityEngine.Vector3Int
#include "UnityEngine/Vector3Int.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Collider
  class Collider;
  // Skipping declaration: ParticleSystem because it is already included!
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: Renderer
  class Renderer;
  // Forward declaring type: AudioClip
  class AudioClip;
  // Forward declaring type: MaterialPropertyBlock
  class MaterialPropertyBlock;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: ThermalSourceVolume
  class ThermalSourceVolume;
}
// Completed forward declares
// Type namespace: GorillaTag.Reactions
namespace GorillaTag::Reactions {
  // Forward declaring type: FireInstance
  class FireInstance;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaTag::Reactions::FireInstance);
DEFINE_IL2CPP_ARG_TYPE(::GorillaTag::Reactions::FireInstance*, "GorillaTag.Reactions", "FireInstance");
// Type namespace: GorillaTag.Reactions
namespace GorillaTag::Reactions {
  // WARNING Size may be invalid!
  // Autogenerated type: GorillaTag.Reactions.FireInstance
  // [TokenAttribute] Offset: FFFFFFFF
  class FireInstance : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // UnityEngine.Collider _collider
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Collider* collider;
    // Field size check
    static_assert(sizeof(::UnityEngine::Collider*) == 0x8);
    // ThermalSourceVolume _thermalVolume
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::ThermalSourceVolume* thermalVolume;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ThermalSourceVolume*) == 0x8);
    // UnityEngine.ParticleSystem _particleSystem
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::ParticleSystem* particleSystem;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystem*) == 0x8);
    // UnityEngine.AudioSource _loopingAudioSource
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::AudioSource* loopingAudioSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // UnityEngine.Renderer[] _emissiveRenderers
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<::UnityEngine::Renderer*> emissiveRenderers;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Renderer*>) == 0x8);
    // GorillaTag.SturdyAssetRef`1<UnityEngine.AudioClip> _extinguishSound
    // Size: 0xFFFFFFFF
    // Offset: 0x48
    ::GorillaTag::SturdyAssetRef_1<::UnityEngine::AudioClip*> extinguishSound;
    // System.Single _extinguishSoundVolume
    // Size: 0x4
    // Offset: 0x50
    float extinguishSoundVolume;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // GorillaTag.SturdyAssetRef`1<UnityEngine.AudioClip> _igniteSound
    // Size: 0xFFFFFFFF
    // Offset: 0x58
    ::GorillaTag::SturdyAssetRef_1<::UnityEngine::AudioClip*> igniteSound;
    // System.Single _igniteSoundVolume
    // Size: 0x4
    // Offset: 0x60
    float igniteSoundVolume;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // System.Boolean _despawnOnExtinguish
    // Size: 0x1
    // Offset: 0x64
    bool despawnOnExtinguish;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // System.Single _maxLifetime
    // Size: 0x4
    // Offset: 0x68
    float maxLifetime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // System.Single _reheatSpeed
    // Size: 0x4
    // Offset: 0x6C
    float reheatSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // System.Single _stayExtinguishedDuration
    // Size: 0x4
    // Offset: 0x70
    float stayExtinguishedDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // System.Single _defaultTemperature
    // Size: 0x4
    // Offset: 0x74
    float defaultTemperature;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // System.Single _timeSinceExtinguished
    // Size: 0x4
    // Offset: 0x78
    float timeSinceExtinguished;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // System.Single _timeSinceDyingStart
    // Size: 0x4
    // Offset: 0x7C
    float timeSinceDyingStart;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // System.Single _timeAlive
    // Size: 0x4
    // Offset: 0x80
    float timeAlive;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // System.Single _psDefaultEmissionRate
    // Size: 0x4
    // Offset: 0x84
    float psDefaultEmissionRate;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // UnityEngine.ParticleSystem/EmissionModule _psEmissionModule
    // Size: 0x8
    // Offset: 0x88
    ::UnityEngine::ParticleSystem::EmissionModule psEmissionModule;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystem::EmissionModule) == 0x8);
    // UnityEngine.Vector3Int _spatialGridPosition
    // Size: 0xC
    // Offset: 0x90
    ::UnityEngine::Vector3Int spatialGridPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3Int) == 0xC);
    // System.Boolean _isDespawning
    // Size: 0x1
    // Offset: 0x9C
    bool isDespawning;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // System.Single _deathStateDuration
    // Size: 0x4
    // Offset: 0xA0
    float deathStateDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // UnityEngine.MaterialPropertyBlock[] _emiRenderers_matPropBlocks
    // Size: 0x8
    // Offset: 0xA8
    ::ArrayW<::UnityEngine::MaterialPropertyBlock*> emiRenderers_matPropBlocks;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::MaterialPropertyBlock*>) == 0x8);
    // UnityEngine.Color[] _emiRenderers_defaultColors
    // Size: 0x8
    // Offset: 0xB0
    ::ArrayW<::UnityEngine::Color> emiRenderers_defaultColors;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Color>) == 0x8);
    public:
    // Get instance field reference: UnityEngine.Collider _collider
    [[deprecated("Use field access instead!")]] ::UnityEngine::Collider*& dyn__collider();
    // Get instance field reference: ThermalSourceVolume _thermalVolume
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ThermalSourceVolume*& dyn__thermalVolume();
    // Get instance field reference: UnityEngine.ParticleSystem _particleSystem
    [[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& dyn__particleSystem();
    // Get instance field reference: UnityEngine.AudioSource _loopingAudioSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn__loopingAudioSource();
    // Get instance field reference: UnityEngine.Renderer[] _emissiveRenderers
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Renderer*>& dyn__emissiveRenderers();
    // Get instance field reference: GorillaTag.SturdyAssetRef`1<UnityEngine.AudioClip> _extinguishSound
    [[deprecated("Use field access instead!")]] ::GorillaTag::SturdyAssetRef_1<::UnityEngine::AudioClip*>& dyn__extinguishSound();
    // Get instance field reference: System.Single _extinguishSoundVolume
    [[deprecated("Use field access instead!")]] float& dyn__extinguishSoundVolume();
    // Get instance field reference: GorillaTag.SturdyAssetRef`1<UnityEngine.AudioClip> _igniteSound
    [[deprecated("Use field access instead!")]] ::GorillaTag::SturdyAssetRef_1<::UnityEngine::AudioClip*>& dyn__igniteSound();
    // Get instance field reference: System.Single _igniteSoundVolume
    [[deprecated("Use field access instead!")]] float& dyn__igniteSoundVolume();
    // Get instance field reference: System.Boolean _despawnOnExtinguish
    [[deprecated("Use field access instead!")]] bool& dyn__despawnOnExtinguish();
    // Get instance field reference: System.Single _maxLifetime
    [[deprecated("Use field access instead!")]] float& dyn__maxLifetime();
    // Get instance field reference: System.Single _reheatSpeed
    [[deprecated("Use field access instead!")]] float& dyn__reheatSpeed();
    // Get instance field reference: System.Single _stayExtinguishedDuration
    [[deprecated("Use field access instead!")]] float& dyn__stayExtinguishedDuration();
    // Get instance field reference: System.Single _defaultTemperature
    [[deprecated("Use field access instead!")]] float& dyn__defaultTemperature();
    // Get instance field reference: System.Single _timeSinceExtinguished
    [[deprecated("Use field access instead!")]] float& dyn__timeSinceExtinguished();
    // Get instance field reference: System.Single _timeSinceDyingStart
    [[deprecated("Use field access instead!")]] float& dyn__timeSinceDyingStart();
    // Get instance field reference: System.Single _timeAlive
    [[deprecated("Use field access instead!")]] float& dyn__timeAlive();
    // Get instance field reference: System.Single _psDefaultEmissionRate
    [[deprecated("Use field access instead!")]] float& dyn__psDefaultEmissionRate();
    // Get instance field reference: UnityEngine.ParticleSystem/EmissionModule _psEmissionModule
    [[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem::EmissionModule& dyn__psEmissionModule();
    // Get instance field reference: UnityEngine.Vector3Int _spatialGridPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3Int& dyn__spatialGridPosition();
    // Get instance field reference: System.Boolean _isDespawning
    [[deprecated("Use field access instead!")]] bool& dyn__isDespawning();
    // Get instance field reference: System.Single _deathStateDuration
    [[deprecated("Use field access instead!")]] float& dyn__deathStateDuration();
    // Get instance field reference: UnityEngine.MaterialPropertyBlock[] _emiRenderers_matPropBlocks
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::MaterialPropertyBlock*>& dyn__emiRenderers_matPropBlocks();
    // Get instance field reference: UnityEngine.Color[] _emiRenderers_defaultColors
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Color>& dyn__emiRenderers_defaultColors();
    // protected System.Void Awake()
    // Offset: 0x28A1854
    void Awake();
    // protected System.Void OnDestroy()
    // Offset: 0x28A18AC
    void OnDestroy();
    // protected System.Void OnEnable()
    // Offset: 0x28A1904
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x28A195C
    void OnDisable();
    // protected System.Void OnTriggerEnter(UnityEngine.Collider other)
    // Offset: 0x28A19B4
    void OnTriggerEnter(::UnityEngine::Collider* other);
    // public System.Void .ctor()
    // Offset: 0x28A1A1C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FireInstance* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaTag::Reactions::FireInstance::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FireInstance*, creationType>()));
    }
  }; // GorillaTag.Reactions.FireInstance
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaTag::Reactions::FireInstance::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Reactions::FireInstance::*)()>(&GorillaTag::Reactions::FireInstance::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Reactions::FireInstance*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Reactions::FireInstance::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Reactions::FireInstance::*)()>(&GorillaTag::Reactions::FireInstance::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Reactions::FireInstance*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Reactions::FireInstance::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Reactions::FireInstance::*)()>(&GorillaTag::Reactions::FireInstance::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Reactions::FireInstance*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Reactions::FireInstance::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Reactions::FireInstance::*)()>(&GorillaTag::Reactions::FireInstance::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Reactions::FireInstance*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Reactions::FireInstance::OnTriggerEnter
// Il2CppName: OnTriggerEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Reactions::FireInstance::*)(::UnityEngine::Collider*)>(&GorillaTag::Reactions::FireInstance::OnTriggerEnter)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Reactions::FireInstance*), "OnTriggerEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: GorillaTag::Reactions::FireInstance::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
