// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: ITickSystemPost
#include "GlobalNamespace/ITickSystemPost.hpp"
// Including type: UnityEngine.Vector3Int
#include "UnityEngine/Vector3Int.hpp"
// Including type: System.Single
#include "System/Single.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: GorillaTag::Reactions
namespace GorillaTag::Reactions {
  // Forward declaring type: FireInstance
  class FireInstance;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector3
  struct Vector3;
  // Forward declaring type: Collider
  class Collider;
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: SinglePool
  class SinglePool;
}
// Completed forward declares
// Type namespace: GorillaTag.Reactions
namespace GorillaTag::Reactions {
  // Forward declaring type: FireManager
  class FireManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaTag::Reactions::FireManager);
DEFINE_IL2CPP_ARG_TYPE(::GorillaTag::Reactions::FireManager*, "GorillaTag.Reactions", "FireManager");
// Type namespace: GorillaTag.Reactions
namespace GorillaTag::Reactions {
  // Size: 0x11
  #pragma pack(push, 1)
  // Autogenerated type: GorillaTag.Reactions.FireManager
  // [TokenAttribute] Offset: FFFFFFFF
  class FireManager : public ::Il2CppObject/*, public ::GlobalNamespace::ITickSystemPost*/ {
    public:
    public:
    // private System.Boolean <ITickSystemPost.PostTickRunning>k__BackingField
    // Size: 0x1
    // Offset: 0x10
    bool PostTickRunning;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::GlobalNamespace::ITickSystemPost
    operator ::GlobalNamespace::ITickSystemPost() noexcept {
      return *reinterpret_cast<::GlobalNamespace::ITickSystemPost*>(this);
    }
    // Creating conversion operator: operator bool
    constexpr operator bool() const noexcept {
      return PostTickRunning;
    }
    // Get static field: static private GorillaTag.Reactions.FireManager <instance>k__BackingField
    static ::GorillaTag::Reactions::FireManager* _get_$instance$k__BackingField();
    // Set static field: static private GorillaTag.Reactions.FireManager <instance>k__BackingField
    static void _set_$instance$k__BackingField(::GorillaTag::Reactions::FireManager* value);
    // Get static field: static private System.Boolean <hasInstance>k__BackingField
    static bool _get_$hasInstance$k__BackingField();
    // Set static field: static private System.Boolean <hasInstance>k__BackingField
    static void _set_$hasInstance$k__BackingField(bool value);
    // Get static field: static private readonly System.Collections.Generic.Dictionary`2<System.Int32,GorillaTag.Reactions.FireInstance> _kGObjInstId_to_fire
    static ::System::Collections::Generic::Dictionary_2<int, ::GorillaTag::Reactions::FireInstance*>* _get__kGObjInstId_to_fire();
    // Set static field: static private readonly System.Collections.Generic.Dictionary`2<System.Int32,GorillaTag.Reactions.FireInstance> _kGObjInstId_to_fire
    static void _set__kGObjInstId_to_fire(::System::Collections::Generic::Dictionary_2<int, ::GorillaTag::Reactions::FireInstance*>* value);
    // Get static field: static private readonly System.Collections.Generic.List`1<GorillaTag.Reactions.FireInstance> _kEnabledReactions
    static ::System::Collections::Generic::List_1<::GorillaTag::Reactions::FireInstance*>* _get__kEnabledReactions();
    // Set static field: static private readonly System.Collections.Generic.List`1<GorillaTag.Reactions.FireInstance> _kEnabledReactions
    static void _set__kEnabledReactions(::System::Collections::Generic::List_1<::GorillaTag::Reactions::FireInstance*>* value);
    // Get static field: static private readonly System.Collections.Generic.List`1<GorillaTag.Reactions.FireInstance> _kFiresToDespawn
    static ::System::Collections::Generic::List_1<::GorillaTag::Reactions::FireInstance*>* _get__kFiresToDespawn();
    // Set static field: static private readonly System.Collections.Generic.List`1<GorillaTag.Reactions.FireInstance> _kFiresToDespawn
    static void _set__kFiresToDespawn(::System::Collections::Generic::List_1<::GorillaTag::Reactions::FireInstance*>* value);
    // Get static field: static private readonly System.Collections.Generic.Dictionary`2<UnityEngine.Vector3Int,System.Int32> _fireSpatialGrid
    static ::System::Collections::Generic::Dictionary_2<::UnityEngine::Vector3Int, int>* _get__fireSpatialGrid();
    // Set static field: static private readonly System.Collections.Generic.Dictionary`2<UnityEngine.Vector3Int,System.Int32> _fireSpatialGrid
    static void _set__fireSpatialGrid(::System::Collections::Generic::Dictionary_2<::UnityEngine::Vector3Int, int>* value);
    // static field const value: static private System.Single _kSpatialGridCellSize
    static constexpr const float _kSpatialGridCellSize = 0.2;
    // Get static field: static private System.Single _kSpatialGridCellSize
    static float _get__kSpatialGridCellSize();
    // Set static field: static private System.Single _kSpatialGridCellSize
    static void _set__kSpatialGridCellSize(float value);
    // static field const value: static private System.Int32 _kMaxAudioSources
    static constexpr const int _kMaxAudioSources = 8;
    // Get static field: static private System.Int32 _kMaxAudioSources
    static int _get__kMaxAudioSources();
    // Set static field: static private System.Int32 _kMaxAudioSources
    static void _set__kMaxAudioSources(int value);
    // Get static field: static private System.Int32 _activeAudioSources
    static int _get__activeAudioSources();
    // Set static field: static private System.Int32 _activeAudioSources
    static void _set__activeAudioSources(int value);
    // Get static field: static private readonly System.Int32 shaderProp_EmissionColor
    static int _get_shaderProp_EmissionColor();
    // Set static field: static private readonly System.Int32 shaderProp_EmissionColor
    static void _set_shaderProp_EmissionColor(int value);
    // Get instance field reference: private System.Boolean <ITickSystemPost.PostTickRunning>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$ITickSystemPost_PostTickRunning$k__BackingField();
    // static GorillaTag.Reactions.FireManager get_instance()
    // Offset: 0x28A1A48
    static ::GorillaTag::Reactions::FireManager* get_instance();
    // static private System.Void set_instance(GorillaTag.Reactions.FireManager value)
    // Offset: 0x28A1AA0
    static void set_instance(::GorillaTag::Reactions::FireManager* value);
    // static System.Boolean get_hasInstance()
    // Offset: 0x28A1B08
    static bool get_hasInstance();
    // static private System.Void set_hasInstance(System.Boolean value)
    // Offset: 0x28A1B60
    static void set_hasInstance(bool value);
    // static private System.Void Initialize()
    // Offset: 0x28A1BC0
    static void Initialize();
    // static System.Void Register(GorillaTag.Reactions.FireInstance f)
    // Offset: 0x28A1DBC
    static void Register(::GorillaTag::Reactions::FireInstance* f);
    // static System.Void Unregister(GorillaTag.Reactions.FireInstance reactable)
    // Offset: 0x28A2434
    static void Unregister(::GorillaTag::Reactions::FireInstance* reactable);
    // static private UnityEngine.Vector3Int GetSpatialGridPos(UnityEngine.Vector3 pos)
    // Offset: 0x28A251C
    static ::UnityEngine::Vector3Int GetSpatialGridPos(::UnityEngine::Vector3 pos);
    // static private System.Void ResetFireValues(GorillaTag.Reactions.FireInstance f)
    // Offset: 0x28A2570
    static void ResetFireValues(::GorillaTag::Reactions::FireInstance* f);
    // static System.Void SpawnFire(SinglePool pool, UnityEngine.Vector3 pos, UnityEngine.Vector3 normal, System.Single scale)
    // Offset: 0x28A25B0
    static void SpawnFire(::GlobalNamespace::SinglePool* pool, ::UnityEngine::Vector3 pos, ::UnityEngine::Vector3 normal, float scale);
    // static System.Void OnEnable(GorillaTag.Reactions.FireInstance f)
    // Offset: 0x28A2810
    static void OnEnable(::GorillaTag::Reactions::FireInstance* f);
    // static System.Void OnDisable(GorillaTag.Reactions.FireInstance f)
    // Offset: 0x28A2CE4
    static void OnDisable(::GorillaTag::Reactions::FireInstance* f);
    // static System.Void OnTriggerEnter(GorillaTag.Reactions.FireInstance f, UnityEngine.Collider other)
    // Offset: 0x28A2E20
    static void OnTriggerEnter(::GorillaTag::Reactions::FireInstance* f, ::UnityEngine::Collider* other);
    // static System.Void Extinguish(UnityEngine.GameObject gObj, System.Single extinguishAmount)
    // Offset: 0x28A2F10
    static void Extinguish(::UnityEngine::GameObject* gObj, float extinguishAmount);
    // private System.Boolean ITickSystemPost.get_PostTickRunning()
    // Offset: 0x28A30B8
    bool ITickSystemPost_get_PostTickRunning();
    // private System.Void ITickSystemPost.set_PostTickRunning(System.Boolean value)
    // Offset: 0x28A30C0
    void ITickSystemPost_set_PostTickRunning(bool value);
    // private System.Void ITickSystemPost.PostTick()
    // Offset: 0x28A30CC
    void ITickSystemPost_PostTick();
    // public System.Void .ctor()
    // Offset: 0x28A1DB4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FireManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaTag::Reactions::FireManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FireManager*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x28A3870
    static void _cctor();
  }; // GorillaTag.Reactions.FireManager
  #pragma pack(pop)
  static check_size<sizeof(FireManager), 16 + sizeof(bool)> __GorillaTag_Reactions_FireManagerSizeCheck;
  static_assert(sizeof(FireManager) == 0x11);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaTag::Reactions::FireManager::get_instance
// Il2CppName: get_instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GorillaTag::Reactions::FireManager* (*)()>(&GorillaTag::Reactions::FireManager::get_instance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Reactions::FireManager*), "get_instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Reactions::FireManager::set_instance
// Il2CppName: set_instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GorillaTag::Reactions::FireManager*)>(&GorillaTag::Reactions::FireManager::set_instance)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("GorillaTag.Reactions", "FireManager")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Reactions::FireManager*), "set_instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GorillaTag::Reactions::FireManager::get_hasInstance
// Il2CppName: get_hasInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GorillaTag::Reactions::FireManager::get_hasInstance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Reactions::FireManager*), "get_hasInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Reactions::FireManager::set_hasInstance
// Il2CppName: set_hasInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&GorillaTag::Reactions::FireManager::set_hasInstance)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Reactions::FireManager*), "set_hasInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GorillaTag::Reactions::FireManager::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GorillaTag::Reactions::FireManager::Initialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Reactions::FireManager*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Reactions::FireManager::Register
// Il2CppName: Register
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GorillaTag::Reactions::FireInstance*)>(&GorillaTag::Reactions::FireManager::Register)> {
  static const MethodInfo* get() {
    static auto* f = &::il2cpp_utils::GetClassFromName("GorillaTag.Reactions", "FireInstance")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Reactions::FireManager*), "Register", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{f});
  }
};
// Writing MetadataGetter for method: GorillaTag::Reactions::FireManager::Unregister
// Il2CppName: Unregister
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GorillaTag::Reactions::FireInstance*)>(&GorillaTag::Reactions::FireManager::Unregister)> {
  static const MethodInfo* get() {
    static auto* reactable = &::il2cpp_utils::GetClassFromName("GorillaTag.Reactions", "FireInstance")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Reactions::FireManager*), "Unregister", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reactable});
  }
};
// Writing MetadataGetter for method: GorillaTag::Reactions::FireManager::GetSpatialGridPos
// Il2CppName: GetSpatialGridPos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3Int (*)(::UnityEngine::Vector3)>(&GorillaTag::Reactions::FireManager::GetSpatialGridPos)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Reactions::FireManager*), "GetSpatialGridPos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos});
  }
};
// Writing MetadataGetter for method: GorillaTag::Reactions::FireManager::ResetFireValues
// Il2CppName: ResetFireValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GorillaTag::Reactions::FireInstance*)>(&GorillaTag::Reactions::FireManager::ResetFireValues)> {
  static const MethodInfo* get() {
    static auto* f = &::il2cpp_utils::GetClassFromName("GorillaTag.Reactions", "FireInstance")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Reactions::FireManager*), "ResetFireValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{f});
  }
};
// Writing MetadataGetter for method: GorillaTag::Reactions::FireManager::SpawnFire
// Il2CppName: SpawnFire
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::SinglePool*, ::UnityEngine::Vector3, ::UnityEngine::Vector3, float)>(&GorillaTag::Reactions::FireManager::SpawnFire)> {
  static const MethodInfo* get() {
    static auto* pool = &::il2cpp_utils::GetClassFromName("", "SinglePool")->byval_arg;
    static auto* pos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* normal = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* scale = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Reactions::FireManager*), "SpawnFire", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pool, pos, normal, scale});
  }
};
// Writing MetadataGetter for method: GorillaTag::Reactions::FireManager::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GorillaTag::Reactions::FireInstance*)>(&GorillaTag::Reactions::FireManager::OnEnable)> {
  static const MethodInfo* get() {
    static auto* f = &::il2cpp_utils::GetClassFromName("GorillaTag.Reactions", "FireInstance")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Reactions::FireManager*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{f});
  }
};
// Writing MetadataGetter for method: GorillaTag::Reactions::FireManager::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GorillaTag::Reactions::FireInstance*)>(&GorillaTag::Reactions::FireManager::OnDisable)> {
  static const MethodInfo* get() {
    static auto* f = &::il2cpp_utils::GetClassFromName("GorillaTag.Reactions", "FireInstance")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Reactions::FireManager*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{f});
  }
};
// Writing MetadataGetter for method: GorillaTag::Reactions::FireManager::OnTriggerEnter
// Il2CppName: OnTriggerEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GorillaTag::Reactions::FireInstance*, ::UnityEngine::Collider*)>(&GorillaTag::Reactions::FireManager::OnTriggerEnter)> {
  static const MethodInfo* get() {
    static auto* f = &::il2cpp_utils::GetClassFromName("GorillaTag.Reactions", "FireInstance")->byval_arg;
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Reactions::FireManager*), "OnTriggerEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{f, other});
  }
};
// Writing MetadataGetter for method: GorillaTag::Reactions::FireManager::Extinguish
// Il2CppName: Extinguish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::GameObject*, float)>(&GorillaTag::Reactions::FireManager::Extinguish)> {
  static const MethodInfo* get() {
    static auto* gObj = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* extinguishAmount = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Reactions::FireManager*), "Extinguish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gObj, extinguishAmount});
  }
};
// Writing MetadataGetter for method: GorillaTag::Reactions::FireManager::ITickSystemPost_get_PostTickRunning
// Il2CppName: ITickSystemPost.get_PostTickRunning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaTag::Reactions::FireManager::*)()>(&GorillaTag::Reactions::FireManager::ITickSystemPost_get_PostTickRunning)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Reactions::FireManager*), "ITickSystemPost.get_PostTickRunning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Reactions::FireManager::ITickSystemPost_set_PostTickRunning
// Il2CppName: ITickSystemPost.set_PostTickRunning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Reactions::FireManager::*)(bool)>(&GorillaTag::Reactions::FireManager::ITickSystemPost_set_PostTickRunning)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Reactions::FireManager*), "ITickSystemPost.set_PostTickRunning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GorillaTag::Reactions::FireManager::ITickSystemPost_PostTick
// Il2CppName: ITickSystemPost.PostTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Reactions::FireManager::*)()>(&GorillaTag::Reactions::FireManager::ITickSystemPost_PostTick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Reactions::FireManager*), "ITickSystemPost.PostTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Reactions::FireManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GorillaTag::Reactions::FireManager::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GorillaTag::Reactions::FireManager::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Reactions::FireManager*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
