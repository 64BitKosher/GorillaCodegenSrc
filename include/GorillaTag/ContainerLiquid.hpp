// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: UnityEngine.Bounds
#include "UnityEngine/Bounds.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: MeshRenderer
  class MeshRenderer;
  // Forward declaring type: MeshFilter
  class MeshFilter;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: ParticleSystem
  class ParticleSystem;
  // Forward declaring type: MaterialPropertyBlock
  class MaterialPropertyBlock;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: SoundBankPlayer
  class SoundBankPlayer;
}
// Completed forward declares
// Type namespace: GorillaTag
namespace GorillaTag {
  // Forward declaring type: ContainerLiquid
  class ContainerLiquid;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaTag::ContainerLiquid);
DEFINE_IL2CPP_ARG_TYPE(::GorillaTag::ContainerLiquid*, "GorillaTag", "ContainerLiquid");
// Type namespace: GorillaTag
namespace GorillaTag {
  // Size: 0x178
  #pragma pack(push, 1)
  // Autogenerated type: GorillaTag.ContainerLiquid
  // [TokenAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: FFFFFFFF
  // [ExecuteInEditMode] Offset: FFFFFFFF
  class ContainerLiquid : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.MeshRenderer meshRenderer
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::MeshRenderer* meshRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshRenderer*) == 0x8);
    // public UnityEngine.MeshFilter meshFilter
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::MeshFilter* meshFilter;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshFilter*) == 0x8);
    // public System.Boolean keepMeshHidden
    // Size: 0x1
    // Offset: 0x30
    bool keepMeshHidden;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: keepMeshHidden and: floater
    char __padding2[0x7] = {};
    // public UnityEngine.Transform floater
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Transform* floater;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public System.Boolean useLiquidShader
    // Size: 0x1
    // Offset: 0x40
    bool useLiquidShader;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean useLiquidVolume
    // Size: 0x1
    // Offset: 0x41
    bool useLiquidVolume;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: useLiquidVolume and: liquidVolumeMinMax
    char __padding5[0x2] = {};
    // public UnityEngine.Vector2 liquidVolumeMinMax
    // Size: 0x8
    // Offset: 0x44
    ::UnityEngine::Vector2 liquidVolumeMinMax;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // Padding between fields: liquidVolumeMinMax and: liquidColorShaderPropertyName
    char __padding6[0x4] = {};
    // public System.String liquidColorShaderPropertyName
    // Size: 0x8
    // Offset: 0x50
    ::StringW liquidColorShaderPropertyName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String liquidPlaneNormalShaderPropertyName
    // Size: 0x8
    // Offset: 0x58
    ::StringW liquidPlaneNormalShaderPropertyName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String liquidPlanePositionShaderPropertyName
    // Size: 0x8
    // Offset: 0x60
    ::StringW liquidPlanePositionShaderPropertyName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public UnityEngine.ParticleSystem spillParticleSystem
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::ParticleSystem* spillParticleSystem;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystem*) == 0x8);
    // public SoundBankPlayer emptySoundBankPlayer
    // Size: 0x8
    // Offset: 0x70
    ::GlobalNamespace::SoundBankPlayer* emptySoundBankPlayer;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SoundBankPlayer*) == 0x8);
    // public SoundBankPlayer refillSoundBankPlayer
    // Size: 0x8
    // Offset: 0x78
    ::GlobalNamespace::SoundBankPlayer* refillSoundBankPlayer;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SoundBankPlayer*) == 0x8);
    // public SoundBankPlayer spillSoundBankPlayer
    // Size: 0x8
    // Offset: 0x80
    ::GlobalNamespace::SoundBankPlayer* spillSoundBankPlayer;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SoundBankPlayer*) == 0x8);
    // public UnityEngine.Color liquidColor
    // Size: 0x10
    // Offset: 0x88
    ::UnityEngine::Color liquidColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public System.Single fillAmount
    // Size: 0x4
    // Offset: 0x98
    float fillAmount;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single refillAmount
    // Size: 0x4
    // Offset: 0x9C
    float refillAmount;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single refillDelay
    // Size: 0x4
    // Offset: 0xA0
    float refillDelay;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single refillThreshold
    // Size: 0x4
    // Offset: 0xA4
    float refillThreshold;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single wobbleMax
    // Size: 0x4
    // Offset: 0xA8
    float wobbleMax;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single wobbleFrequency
    // Size: 0x4
    // Offset: 0xAC
    float wobbleFrequency;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single recovery
    // Size: 0x4
    // Offset: 0xB0
    float recovery;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single thickness
    // Size: 0x4
    // Offset: 0xB4
    float thickness;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single maxSpillRate
    // Size: 0x4
    // Offset: 0xB8
    float maxSpillRate;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector3 <cupTopWorldPos>k__BackingField
    // Size: 0xC
    // Offset: 0xBC
    ::UnityEngine::Vector3 cupTopWorldPos;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 <bottomLipWorldPos>k__BackingField
    // Size: 0xC
    // Offset: 0xC8
    ::UnityEngine::Vector3 bottomLipWorldPos;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 <liquidPlaneWorldPos>k__BackingField
    // Size: 0xC
    // Offset: 0xD4
    ::UnityEngine::Vector3 liquidPlaneWorldPos;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 <liquidPlaneWorldNormal>k__BackingField
    // Size: 0xC
    // Offset: 0xE0
    ::UnityEngine::Vector3 liquidPlaneWorldNormal;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Boolean wasEmptyLastFrame
    // Size: 0x1
    // Offset: 0xEC
    bool wasEmptyLastFrame;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: wasEmptyLastFrame and: liquidColorShaderProp
    char __padding28[0x3] = {};
    // private System.Int32 liquidColorShaderProp
    // Size: 0x4
    // Offset: 0xF0
    int liquidColorShaderProp;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 liquidPlaneNormalShaderProp
    // Size: 0x4
    // Offset: 0xF4
    int liquidPlaneNormalShaderProp;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 liquidPlanePositionShaderProp
    // Size: 0x4
    // Offset: 0xF8
    int liquidPlanePositionShaderProp;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single refillTimer
    // Size: 0x4
    // Offset: 0xFC
    float refillTimer;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single lastSineWave
    // Size: 0x4
    // Offset: 0x100
    float lastSineWave;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single lastWobble
    // Size: 0x4
    // Offset: 0x104
    float lastWobble;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector2 temporalWobbleAmp
    // Size: 0x8
    // Offset: 0x108
    ::UnityEngine::Vector2 temporalWobbleAmp;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private UnityEngine.Vector3 lastPos
    // Size: 0xC
    // Offset: 0x110
    ::UnityEngine::Vector3 lastPos;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 lastVelocity
    // Size: 0xC
    // Offset: 0x11C
    ::UnityEngine::Vector3 lastVelocity;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 lastAngularVelocity
    // Size: 0xC
    // Offset: 0x128
    ::UnityEngine::Vector3 lastAngularVelocity;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Quaternion lastRot
    // Size: 0x10
    // Offset: 0x134
    ::UnityEngine::Quaternion lastRot;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // Padding between fields: lastRot and: matPropBlock
    char __padding39[0x4] = {};
    // private UnityEngine.MaterialPropertyBlock matPropBlock
    // Size: 0x8
    // Offset: 0x148
    ::UnityEngine::MaterialPropertyBlock* matPropBlock;
    // Field size check
    static_assert(sizeof(::UnityEngine::MaterialPropertyBlock*) == 0x8);
    // private UnityEngine.Bounds localMeshBounds
    // Size: 0x18
    // Offset: 0x150
    ::UnityEngine::Bounds localMeshBounds;
    // Field size check
    static_assert(sizeof(::UnityEngine::Bounds) == 0x18);
    // private System.Boolean useFloater
    // Size: 0x1
    // Offset: 0x168
    bool useFloater;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: useFloater and: topVerts
    char __padding42[0x7] = {};
    // private UnityEngine.Vector3[] topVerts
    // Size: 0x8
    // Offset: 0x170
    ::ArrayW<::UnityEngine::Vector3> topVerts;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    public:
    // Get instance field reference: public UnityEngine.MeshRenderer meshRenderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& dyn_meshRenderer();
    // Get instance field reference: public UnityEngine.MeshFilter meshFilter
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshFilter*& dyn_meshFilter();
    // Get instance field reference: public System.Boolean keepMeshHidden
    [[deprecated("Use field access instead!")]] bool& dyn_keepMeshHidden();
    // Get instance field reference: public UnityEngine.Transform floater
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_floater();
    // Get instance field reference: public System.Boolean useLiquidShader
    [[deprecated("Use field access instead!")]] bool& dyn_useLiquidShader();
    // Get instance field reference: public System.Boolean useLiquidVolume
    [[deprecated("Use field access instead!")]] bool& dyn_useLiquidVolume();
    // Get instance field reference: public UnityEngine.Vector2 liquidVolumeMinMax
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_liquidVolumeMinMax();
    // Get instance field reference: public System.String liquidColorShaderPropertyName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_liquidColorShaderPropertyName();
    // Get instance field reference: public System.String liquidPlaneNormalShaderPropertyName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_liquidPlaneNormalShaderPropertyName();
    // Get instance field reference: public System.String liquidPlanePositionShaderPropertyName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_liquidPlanePositionShaderPropertyName();
    // Get instance field reference: public UnityEngine.ParticleSystem spillParticleSystem
    [[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& dyn_spillParticleSystem();
    // Get instance field reference: public SoundBankPlayer emptySoundBankPlayer
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SoundBankPlayer*& dyn_emptySoundBankPlayer();
    // Get instance field reference: public SoundBankPlayer refillSoundBankPlayer
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SoundBankPlayer*& dyn_refillSoundBankPlayer();
    // Get instance field reference: public SoundBankPlayer spillSoundBankPlayer
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SoundBankPlayer*& dyn_spillSoundBankPlayer();
    // Get instance field reference: public UnityEngine.Color liquidColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_liquidColor();
    // Get instance field reference: public System.Single fillAmount
    [[deprecated("Use field access instead!")]] float& dyn_fillAmount();
    // Get instance field reference: public System.Single refillAmount
    [[deprecated("Use field access instead!")]] float& dyn_refillAmount();
    // Get instance field reference: public System.Single refillDelay
    [[deprecated("Use field access instead!")]] float& dyn_refillDelay();
    // Get instance field reference: public System.Single refillThreshold
    [[deprecated("Use field access instead!")]] float& dyn_refillThreshold();
    // Get instance field reference: public System.Single wobbleMax
    [[deprecated("Use field access instead!")]] float& dyn_wobbleMax();
    // Get instance field reference: public System.Single wobbleFrequency
    [[deprecated("Use field access instead!")]] float& dyn_wobbleFrequency();
    // Get instance field reference: public System.Single recovery
    [[deprecated("Use field access instead!")]] float& dyn_recovery();
    // Get instance field reference: public System.Single thickness
    [[deprecated("Use field access instead!")]] float& dyn_thickness();
    // Get instance field reference: public System.Single maxSpillRate
    [[deprecated("Use field access instead!")]] float& dyn_maxSpillRate();
    // Get instance field reference: private UnityEngine.Vector3 <cupTopWorldPos>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_$cupTopWorldPos$k__BackingField();
    // Get instance field reference: private UnityEngine.Vector3 <bottomLipWorldPos>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_$bottomLipWorldPos$k__BackingField();
    // Get instance field reference: private UnityEngine.Vector3 <liquidPlaneWorldPos>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_$liquidPlaneWorldPos$k__BackingField();
    // Get instance field reference: private UnityEngine.Vector3 <liquidPlaneWorldNormal>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_$liquidPlaneWorldNormal$k__BackingField();
    // Get instance field reference: private System.Boolean wasEmptyLastFrame
    [[deprecated("Use field access instead!")]] bool& dyn_wasEmptyLastFrame();
    // Get instance field reference: private System.Int32 liquidColorShaderProp
    [[deprecated("Use field access instead!")]] int& dyn_liquidColorShaderProp();
    // Get instance field reference: private System.Int32 liquidPlaneNormalShaderProp
    [[deprecated("Use field access instead!")]] int& dyn_liquidPlaneNormalShaderProp();
    // Get instance field reference: private System.Int32 liquidPlanePositionShaderProp
    [[deprecated("Use field access instead!")]] int& dyn_liquidPlanePositionShaderProp();
    // Get instance field reference: private System.Single refillTimer
    [[deprecated("Use field access instead!")]] float& dyn_refillTimer();
    // Get instance field reference: private System.Single lastSineWave
    [[deprecated("Use field access instead!")]] float& dyn_lastSineWave();
    // Get instance field reference: private System.Single lastWobble
    [[deprecated("Use field access instead!")]] float& dyn_lastWobble();
    // Get instance field reference: private UnityEngine.Vector2 temporalWobbleAmp
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_temporalWobbleAmp();
    // Get instance field reference: private UnityEngine.Vector3 lastPos
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_lastPos();
    // Get instance field reference: private UnityEngine.Vector3 lastVelocity
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_lastVelocity();
    // Get instance field reference: private UnityEngine.Vector3 lastAngularVelocity
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_lastAngularVelocity();
    // Get instance field reference: private UnityEngine.Quaternion lastRot
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_lastRot();
    // Get instance field reference: private UnityEngine.MaterialPropertyBlock matPropBlock
    [[deprecated("Use field access instead!")]] ::UnityEngine::MaterialPropertyBlock*& dyn_matPropBlock();
    // Get instance field reference: private UnityEngine.Bounds localMeshBounds
    [[deprecated("Use field access instead!")]] ::UnityEngine::Bounds& dyn_localMeshBounds();
    // Get instance field reference: private System.Boolean useFloater
    [[deprecated("Use field access instead!")]] bool& dyn_useFloater();
    // Get instance field reference: private UnityEngine.Vector3[] topVerts
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_topVerts();
    // public System.Boolean get_isEmpty()
    // Offset: 0x28777E0
    bool get_isEmpty();
    // public UnityEngine.Vector3 get_cupTopWorldPos()
    // Offset: 0x28777F4
    ::UnityEngine::Vector3 get_cupTopWorldPos();
    // private System.Void set_cupTopWorldPos(UnityEngine.Vector3 value)
    // Offset: 0x2877800
    void set_cupTopWorldPos(::UnityEngine::Vector3 value);
    // public UnityEngine.Vector3 get_bottomLipWorldPos()
    // Offset: 0x287780C
    ::UnityEngine::Vector3 get_bottomLipWorldPos();
    // private System.Void set_bottomLipWorldPos(UnityEngine.Vector3 value)
    // Offset: 0x2877818
    void set_bottomLipWorldPos(::UnityEngine::Vector3 value);
    // public UnityEngine.Vector3 get_liquidPlaneWorldPos()
    // Offset: 0x2877824
    ::UnityEngine::Vector3 get_liquidPlaneWorldPos();
    // private System.Void set_liquidPlaneWorldPos(UnityEngine.Vector3 value)
    // Offset: 0x2877830
    void set_liquidPlaneWorldPos(::UnityEngine::Vector3 value);
    // public UnityEngine.Vector3 get_liquidPlaneWorldNormal()
    // Offset: 0x287783C
    ::UnityEngine::Vector3 get_liquidPlaneWorldNormal();
    // private System.Void set_liquidPlaneWorldNormal(UnityEngine.Vector3 value)
    // Offset: 0x2877848
    void set_liquidPlaneWorldNormal(::UnityEngine::Vector3 value);
    // protected System.Boolean IsValidLiquidSurfaceValues()
    // Offset: 0x2877854
    bool IsValidLiquidSurfaceValues();
    // protected System.Void InitializeLiquidSurface()
    // Offset: 0x2877948
    void InitializeLiquidSurface();
    // protected System.Void InitializeParticleSystem()
    // Offset: 0x28779D8
    void InitializeParticleSystem();
    // protected System.Void Awake()
    // Offset: 0x2877A44
    void Awake();
    // protected System.Void OnEnable()
    // Offset: 0x2877C8C
    void OnEnable();
    // protected System.Void LateUpdate()
    // Offset: 0x2877D70
    void LateUpdate();
    // public System.Void UpdateRefillTimer()
    // Offset: 0x287870C
    void UpdateRefillTimer();
    // private UnityEngine.Vector3[] GetTopVerts()
    // Offset: 0x2877ABC
    ::ArrayW<::UnityEngine::Vector3> GetTopVerts();
    // public System.Void .ctor()
    // Offset: 0x287876C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ContainerLiquid* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaTag::ContainerLiquid::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ContainerLiquid*, creationType>()));
    }
  }; // GorillaTag.ContainerLiquid
  #pragma pack(pop)
  static check_size<sizeof(ContainerLiquid), 368 + sizeof(::ArrayW<::UnityEngine::Vector3>)> __GorillaTag_ContainerLiquidSizeCheck;
  static_assert(sizeof(ContainerLiquid) == 0x178);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaTag::ContainerLiquid::get_isEmpty
// Il2CppName: get_isEmpty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaTag::ContainerLiquid::*)()>(&GorillaTag::ContainerLiquid::get_isEmpty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ContainerLiquid*), "get_isEmpty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::ContainerLiquid::get_cupTopWorldPos
// Il2CppName: get_cupTopWorldPos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GorillaTag::ContainerLiquid::*)()>(&GorillaTag::ContainerLiquid::get_cupTopWorldPos)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ContainerLiquid*), "get_cupTopWorldPos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::ContainerLiquid::set_cupTopWorldPos
// Il2CppName: set_cupTopWorldPos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ContainerLiquid::*)(::UnityEngine::Vector3)>(&GorillaTag::ContainerLiquid::set_cupTopWorldPos)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ContainerLiquid*), "set_cupTopWorldPos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GorillaTag::ContainerLiquid::get_bottomLipWorldPos
// Il2CppName: get_bottomLipWorldPos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GorillaTag::ContainerLiquid::*)()>(&GorillaTag::ContainerLiquid::get_bottomLipWorldPos)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ContainerLiquid*), "get_bottomLipWorldPos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::ContainerLiquid::set_bottomLipWorldPos
// Il2CppName: set_bottomLipWorldPos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ContainerLiquid::*)(::UnityEngine::Vector3)>(&GorillaTag::ContainerLiquid::set_bottomLipWorldPos)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ContainerLiquid*), "set_bottomLipWorldPos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GorillaTag::ContainerLiquid::get_liquidPlaneWorldPos
// Il2CppName: get_liquidPlaneWorldPos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GorillaTag::ContainerLiquid::*)()>(&GorillaTag::ContainerLiquid::get_liquidPlaneWorldPos)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ContainerLiquid*), "get_liquidPlaneWorldPos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::ContainerLiquid::set_liquidPlaneWorldPos
// Il2CppName: set_liquidPlaneWorldPos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ContainerLiquid::*)(::UnityEngine::Vector3)>(&GorillaTag::ContainerLiquid::set_liquidPlaneWorldPos)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ContainerLiquid*), "set_liquidPlaneWorldPos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GorillaTag::ContainerLiquid::get_liquidPlaneWorldNormal
// Il2CppName: get_liquidPlaneWorldNormal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GorillaTag::ContainerLiquid::*)()>(&GorillaTag::ContainerLiquid::get_liquidPlaneWorldNormal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ContainerLiquid*), "get_liquidPlaneWorldNormal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::ContainerLiquid::set_liquidPlaneWorldNormal
// Il2CppName: set_liquidPlaneWorldNormal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ContainerLiquid::*)(::UnityEngine::Vector3)>(&GorillaTag::ContainerLiquid::set_liquidPlaneWorldNormal)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ContainerLiquid*), "set_liquidPlaneWorldNormal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GorillaTag::ContainerLiquid::IsValidLiquidSurfaceValues
// Il2CppName: IsValidLiquidSurfaceValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaTag::ContainerLiquid::*)()>(&GorillaTag::ContainerLiquid::IsValidLiquidSurfaceValues)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ContainerLiquid*), "IsValidLiquidSurfaceValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::ContainerLiquid::InitializeLiquidSurface
// Il2CppName: InitializeLiquidSurface
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ContainerLiquid::*)()>(&GorillaTag::ContainerLiquid::InitializeLiquidSurface)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ContainerLiquid*), "InitializeLiquidSurface", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::ContainerLiquid::InitializeParticleSystem
// Il2CppName: InitializeParticleSystem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ContainerLiquid::*)()>(&GorillaTag::ContainerLiquid::InitializeParticleSystem)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ContainerLiquid*), "InitializeParticleSystem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::ContainerLiquid::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ContainerLiquid::*)()>(&GorillaTag::ContainerLiquid::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ContainerLiquid*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::ContainerLiquid::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ContainerLiquid::*)()>(&GorillaTag::ContainerLiquid::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ContainerLiquid*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::ContainerLiquid::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ContainerLiquid::*)()>(&GorillaTag::ContainerLiquid::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ContainerLiquid*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::ContainerLiquid::UpdateRefillTimer
// Il2CppName: UpdateRefillTimer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ContainerLiquid::*)()>(&GorillaTag::ContainerLiquid::UpdateRefillTimer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ContainerLiquid*), "UpdateRefillTimer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::ContainerLiquid::GetTopVerts
// Il2CppName: GetTopVerts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Vector3> (GorillaTag::ContainerLiquid::*)()>(&GorillaTag::ContainerLiquid::GetTopVerts)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ContainerLiquid*), "GetTopVerts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::ContainerLiquid::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
