// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: TransferrableObject
#include "GlobalNamespace/TransferrableObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GorillaTag
namespace GorillaTag {
  // Forward declaring type: ContainerLiquid
  class ContainerLiquid;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: SoundBankPlayer
  class SoundBankPlayer;
}
// Completed forward declares
// Type namespace: GorillaTag
namespace GorillaTag {
  // Forward declaring type: DrinkableHoldable
  class DrinkableHoldable;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaTag::DrinkableHoldable);
DEFINE_IL2CPP_ARG_TYPE(::GorillaTag::DrinkableHoldable*, "GorillaTag", "DrinkableHoldable");
// Type namespace: GorillaTag
namespace GorillaTag {
  // WARNING Size may be invalid!
  // Autogenerated type: GorillaTag.DrinkableHoldable
  // [TokenAttribute] Offset: FFFFFFFF
  class DrinkableHoldable : public ::GlobalNamespace::TransferrableObject {
    public:
    public:
    // public GorillaTag.ContainerLiquid containerLiquid
    // Size: 0x8
    // Offset: 0x2D0
    ::GorillaTag::ContainerLiquid* containerLiquid;
    // Field size check
    static_assert(sizeof(::GorillaTag::ContainerLiquid*) == 0x8);
    // public SoundBankPlayer sipSoundBankPlayer
    // Size: 0x8
    // Offset: 0x2D8
    ::GlobalNamespace::SoundBankPlayer* sipSoundBankPlayer;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SoundBankPlayer*) == 0x8);
    // public System.Single sipRate
    // Size: 0x4
    // Offset: 0x2E0
    float sipRate;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single sipSoundCooldown
    // Size: 0x4
    // Offset: 0x2E4
    float sipSoundCooldown;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Vector3 headToMouthOffset
    // Size: 0xC
    // Offset: 0x2E8
    ::UnityEngine::Vector3 headToMouthOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.Single sipRadius
    // Size: 0x4
    // Offset: 0x2F4
    float sipRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single lastTimeSipSoundPlayed
    // Size: 0x4
    // Offset: 0x2F8
    float lastTimeSipSoundPlayed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean wasSipping
    // Size: 0x1
    // Offset: 0x2FC
    bool wasSipping;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean coolingDown
    // Size: 0x1
    // Offset: 0x2FD
    bool coolingDown;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean wasCoolingDown
    // Size: 0x1
    // Offset: 0x2FE
    bool wasCoolingDown;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Byte[] myByteArray
    // Size: 0x8
    // Offset: 0x300
    ::ArrayW<uint8_t> myByteArray;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    public:
    // Get instance field reference: public GorillaTag.ContainerLiquid containerLiquid
    [[deprecated("Use field access instead!")]] ::GorillaTag::ContainerLiquid*& dyn_containerLiquid();
    // Get instance field reference: public SoundBankPlayer sipSoundBankPlayer
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SoundBankPlayer*& dyn_sipSoundBankPlayer();
    // Get instance field reference: public System.Single sipRate
    [[deprecated("Use field access instead!")]] float& dyn_sipRate();
    // Get instance field reference: public System.Single sipSoundCooldown
    [[deprecated("Use field access instead!")]] float& dyn_sipSoundCooldown();
    // Get instance field reference: public UnityEngine.Vector3 headToMouthOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_headToMouthOffset();
    // Get instance field reference: public System.Single sipRadius
    [[deprecated("Use field access instead!")]] float& dyn_sipRadius();
    // Get instance field reference: private System.Single lastTimeSipSoundPlayed
    [[deprecated("Use field access instead!")]] float& dyn_lastTimeSipSoundPlayed();
    // Get instance field reference: private System.Boolean wasSipping
    [[deprecated("Use field access instead!")]] bool& dyn_wasSipping();
    // Get instance field reference: private System.Boolean coolingDown
    [[deprecated("Use field access instead!")]] bool& dyn_coolingDown();
    // Get instance field reference: private System.Boolean wasCoolingDown
    [[deprecated("Use field access instead!")]] bool& dyn_wasCoolingDown();
    // Get instance field reference: private System.Byte[] myByteArray
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_myByteArray();
    // static private System.Int32 PackValues(System.Single cooldownStartTime, System.Single fillAmount, System.Boolean coolingDown)
    // Offset: 0x287CF6C
    static int PackValues(float cooldownStartTime, float fillAmount, bool coolingDown);
    // private System.Void UnpackValuesNonstatic(in System.Int32 packed, out System.Single cooldownStartTime, out System.Single fillAmount, out System.Boolean coolingDown)
    // Offset: 0x287D564
    void UnpackValuesNonstatic(ByRef<int> packed, ByRef<float> cooldownStartTime, ByRef<float> fillAmount, ByRef<bool> coolingDown);
    // static public System.Void GetBytes(System.Int32 value, ref System.Byte[] bytes)
    // Offset: 0x287D668
    static void GetBytes(int value, ByRef<::ArrayW<uint8_t>> bytes);
    // static private System.Void UnpackValuesStatic(in System.Int32 packed, out System.Single cooldownStartTime, out System.Single fillAmount, out System.Boolean coolingDown)
    // Offset: 0x287D6C0
    static void UnpackValuesStatic(ByRef<int> packed, ByRef<float> cooldownStartTime, ByRef<float> fillAmount, ByRef<bool> coolingDown);
    // public override System.Void OnEnable()
    // Offset: 0x287CEA0
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::OnEnable()
    void OnEnable();
    // protected override System.Void LateUpdateLocal()
    // Offset: 0x287D060
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::LateUpdateLocal()
    void LateUpdateLocal();
    // protected override System.Void LateUpdateReplicated()
    // Offset: 0x287D518
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::LateUpdateReplicated()
    void LateUpdateReplicated();
    // protected override System.Void LateUpdateShared()
    // Offset: 0x287D614
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::LateUpdateShared()
    void LateUpdateShared();
    // public System.Void .ctor()
    // Offset: 0x287D768
    // Implemented from: TransferrableObject
    // Base method: System.Void TransferrableObject::.ctor()
    // Base method: System.Void HoldableObject::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DrinkableHoldable* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaTag::DrinkableHoldable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DrinkableHoldable*, creationType>()));
    }
  }; // GorillaTag.DrinkableHoldable
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaTag::DrinkableHoldable::PackValues
// Il2CppName: PackValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(float, float, bool)>(&GorillaTag::DrinkableHoldable::PackValues)> {
  static const MethodInfo* get() {
    static auto* cooldownStartTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* fillAmount = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* coolingDown = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::DrinkableHoldable*), "PackValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cooldownStartTime, fillAmount, coolingDown});
  }
};
// Writing MetadataGetter for method: GorillaTag::DrinkableHoldable::UnpackValuesNonstatic
// Il2CppName: UnpackValuesNonstatic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::DrinkableHoldable::*)(ByRef<int>, ByRef<float>, ByRef<float>, ByRef<bool>)>(&GorillaTag::DrinkableHoldable::UnpackValuesNonstatic)> {
  static const MethodInfo* get() {
    static auto* packed = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* cooldownStartTime = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* fillAmount = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* coolingDown = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::DrinkableHoldable*), "UnpackValuesNonstatic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{packed, cooldownStartTime, fillAmount, coolingDown});
  }
};
// Writing MetadataGetter for method: GorillaTag::DrinkableHoldable::GetBytes
// Il2CppName: GetBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, ByRef<::ArrayW<uint8_t>>)>(&GorillaTag::DrinkableHoldable::GetBytes)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bytes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::DrinkableHoldable*), "GetBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, bytes});
  }
};
// Writing MetadataGetter for method: GorillaTag::DrinkableHoldable::UnpackValuesStatic
// Il2CppName: UnpackValuesStatic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<int>, ByRef<float>, ByRef<float>, ByRef<bool>)>(&GorillaTag::DrinkableHoldable::UnpackValuesStatic)> {
  static const MethodInfo* get() {
    static auto* packed = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* cooldownStartTime = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* fillAmount = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* coolingDown = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::DrinkableHoldable*), "UnpackValuesStatic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{packed, cooldownStartTime, fillAmount, coolingDown});
  }
};
// Writing MetadataGetter for method: GorillaTag::DrinkableHoldable::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::DrinkableHoldable::*)()>(&GorillaTag::DrinkableHoldable::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::DrinkableHoldable*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::DrinkableHoldable::LateUpdateLocal
// Il2CppName: LateUpdateLocal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::DrinkableHoldable::*)()>(&GorillaTag::DrinkableHoldable::LateUpdateLocal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::DrinkableHoldable*), "LateUpdateLocal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::DrinkableHoldable::LateUpdateReplicated
// Il2CppName: LateUpdateReplicated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::DrinkableHoldable::*)()>(&GorillaTag::DrinkableHoldable::LateUpdateReplicated)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::DrinkableHoldable*), "LateUpdateReplicated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::DrinkableHoldable::LateUpdateShared
// Il2CppName: LateUpdateShared
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::DrinkableHoldable::*)()>(&GorillaTag::DrinkableHoldable::LateUpdateShared)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::DrinkableHoldable*), "LateUpdateShared", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::DrinkableHoldable::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
