// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Cysharp.Text.Utf16ValueStringBuilder
#include "Cysharp/Text/Utf16ValueStringBuilder.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Object
  class Object;
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Component
  class Component;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Completed forward declares
// Type namespace: GorillaTag
namespace GorillaTag {
  // Forward declaring type: GTLogErrorLimiter
  class GTLogErrorLimiter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaTag::GTLogErrorLimiter);
DEFINE_IL2CPP_ARG_TYPE(::GorillaTag::GTLogErrorLimiter*, "GorillaTag", "GTLogErrorLimiter");
// Type namespace: GorillaTag
namespace GorillaTag {
  // Size: 0x35
  #pragma pack(push, 1)
  // Autogenerated type: GorillaTag.GTLogErrorLimiter
  // [TokenAttribute] Offset: FFFFFFFF
  class GTLogErrorLimiter : public ::Il2CppObject {
    public:
    public:
    // public System.Int32 countdown
    // Size: 0x4
    // Offset: 0x10
    int countdown;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 occurrenceCount
    // Size: 0x4
    // Offset: 0x14
    int occurrenceCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.String occurrencesJoinString
    // Size: 0x8
    // Offset: 0x18
    ::StringW occurrencesJoinString;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String _baseMessage
    // Size: 0x8
    // Offset: 0x20
    ::StringW baseMessage;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public Cysharp.Text.Utf16ValueStringBuilder sb
    // Size: 0xD
    // Offset: 0x28
    ::Cysharp::Text::Utf16ValueStringBuilder sb;
    // Field size check
    static_assert(sizeof(::Cysharp::Text::Utf16ValueStringBuilder) == 0xD);
    public:
    // static field const value: static private System.String __NULL__
    static constexpr const char* __NULL__ = "__NULL__";
    // Get static field: static private System.String __NULL__
    static ::StringW _get___NULL__();
    // Set static field: static private System.String __NULL__
    static void _set___NULL__(::StringW value);
    // static field const value: static private System.String k_lastMsgHeader
    static constexpr const char* k_lastMsgHeader = "!!!! THIS MESSAGE HAS REACHED MAX SPAM COUNT AND WILL NO LONGER BE LOGGED !!!!\u000a";
    // Get static field: static private System.String k_lastMsgHeader
    static ::StringW _get_k_lastMsgHeader();
    // Set static field: static private System.String k_lastMsgHeader
    static void _set_k_lastMsgHeader(::StringW value);
    // Get instance field reference: public System.Int32 countdown
    [[deprecated("Use field access instead!")]] int& dyn_countdown();
    // Get instance field reference: public System.Int32 occurrenceCount
    [[deprecated("Use field access instead!")]] int& dyn_occurrenceCount();
    // Get instance field reference: public System.String occurrencesJoinString
    [[deprecated("Use field access instead!")]] ::StringW& dyn_occurrencesJoinString();
    // Get instance field reference: private System.String _baseMessage
    [[deprecated("Use field access instead!")]] ::StringW& dyn__baseMessage();
    // Get instance field reference: public Cysharp.Text.Utf16ValueStringBuilder sb
    [[deprecated("Use field access instead!")]] ::Cysharp::Text::Utf16ValueStringBuilder& dyn_sb();
    // public System.String get_baseMessage()
    // Offset: 0x287971C
    ::StringW get_baseMessage();
    // public System.Void set_baseMessage(System.String value)
    // Offset: 0x2879724
    void set_baseMessage(::StringW value);
    // public System.Void .ctor(System.String baseMessage, System.Int32 countdown, System.String occurrencesJoinString)
    // Offset: 0x287978C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GTLogErrorLimiter* New_ctor(::StringW baseMessage, int countdown, ::StringW occurrencesJoinString) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaTag::GTLogErrorLimiter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GTLogErrorLimiter*, creationType>(baseMessage, countdown, occurrencesJoinString)));
    }
    // public System.Void Log(System.String subMessage, UnityEngine.Object context, System.String caller, System.String sourceFilePath, System.Int32 line)
    // Offset: 0x2879898
    void Log(::StringW subMessage, ::UnityEngine::Object* context, ::StringW caller, ::StringW sourceFilePath, int line);
    // public System.Void Log(UnityEngine.Object obj, UnityEngine.Object context, System.String caller, System.String sourceFilePath, System.Int32 line)
    // Offset: 0x2879C48
    void Log(::UnityEngine::Object* obj, ::UnityEngine::Object* context, ::StringW caller, ::StringW sourceFilePath, int line);
    // public System.Void AddOccurrence(System.String s)
    // Offset: 0x2879D5C
    void AddOccurrence(::StringW s);
    // public System.Void AddOccurrence(System.Text.StringBuilder stringBuilder)
    // Offset: 0x2879E68
    void AddOccurrence(::System::Text::StringBuilder* stringBuilder);
    // public System.Void AddOccurence(UnityEngine.GameObject gObj)
    // Offset: 0x2879F44
    void AddOccurence(::UnityEngine::GameObject* gObj);
    // public System.Void LogOccurrences(UnityEngine.Component component, UnityEngine.Object obj, System.String caller, System.String sourceFilePath, System.Int32 line)
    // Offset: 0x287A088
    void LogOccurrences(::UnityEngine::Component* component, ::UnityEngine::Object* obj, ::StringW caller, ::StringW sourceFilePath, int line);
    // public System.Void LogOccurrences(Cysharp.Text.Utf16ValueStringBuilder subMessage, UnityEngine.Object obj, System.String caller, System.String sourceFilePath, System.Int32 line)
    // Offset: 0x287A1AC
    void LogOccurrences(::Cysharp::Text::Utf16ValueStringBuilder subMessage, ::UnityEngine::Object* obj, ::StringW caller, ::StringW sourceFilePath, int line);
  }; // GorillaTag.GTLogErrorLimiter
  #pragma pack(pop)
  static check_size<sizeof(GTLogErrorLimiter), 40 + sizeof(::Cysharp::Text::Utf16ValueStringBuilder)> __GorillaTag_GTLogErrorLimiterSizeCheck;
  static_assert(sizeof(GTLogErrorLimiter) == 0x35);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaTag::GTLogErrorLimiter::get_baseMessage
// Il2CppName: get_baseMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GorillaTag::GTLogErrorLimiter::*)()>(&GorillaTag::GTLogErrorLimiter::get_baseMessage)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::GTLogErrorLimiter*), "get_baseMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::GTLogErrorLimiter::set_baseMessage
// Il2CppName: set_baseMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::GTLogErrorLimiter::*)(::StringW)>(&GorillaTag::GTLogErrorLimiter::set_baseMessage)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::GTLogErrorLimiter*), "set_baseMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GorillaTag::GTLogErrorLimiter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GorillaTag::GTLogErrorLimiter::Log
// Il2CppName: Log
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::GTLogErrorLimiter::*)(::StringW, ::UnityEngine::Object*, ::StringW, ::StringW, int)>(&GorillaTag::GTLogErrorLimiter::Log)> {
  static const MethodInfo* get() {
    static auto* subMessage = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine", "Object")->byval_arg;
    static auto* caller = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* sourceFilePath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* line = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::GTLogErrorLimiter*), "Log", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{subMessage, context, caller, sourceFilePath, line});
  }
};
// Writing MetadataGetter for method: GorillaTag::GTLogErrorLimiter::Log
// Il2CppName: Log
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::GTLogErrorLimiter::*)(::UnityEngine::Object*, ::UnityEngine::Object*, ::StringW, ::StringW, int)>(&GorillaTag::GTLogErrorLimiter::Log)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("UnityEngine", "Object")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine", "Object")->byval_arg;
    static auto* caller = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* sourceFilePath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* line = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::GTLogErrorLimiter*), "Log", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj, context, caller, sourceFilePath, line});
  }
};
// Writing MetadataGetter for method: GorillaTag::GTLogErrorLimiter::AddOccurrence
// Il2CppName: AddOccurrence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::GTLogErrorLimiter::*)(::StringW)>(&GorillaTag::GTLogErrorLimiter::AddOccurrence)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::GTLogErrorLimiter*), "AddOccurrence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s});
  }
};
// Writing MetadataGetter for method: GorillaTag::GTLogErrorLimiter::AddOccurrence
// Il2CppName: AddOccurrence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::GTLogErrorLimiter::*)(::System::Text::StringBuilder*)>(&GorillaTag::GTLogErrorLimiter::AddOccurrence)> {
  static const MethodInfo* get() {
    static auto* stringBuilder = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::GTLogErrorLimiter*), "AddOccurrence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stringBuilder});
  }
};
// Writing MetadataGetter for method: GorillaTag::GTLogErrorLimiter::AddOccurence
// Il2CppName: AddOccurence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::GTLogErrorLimiter::*)(::UnityEngine::GameObject*)>(&GorillaTag::GTLogErrorLimiter::AddOccurence)> {
  static const MethodInfo* get() {
    static auto* gObj = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::GTLogErrorLimiter*), "AddOccurence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gObj});
  }
};
// Writing MetadataGetter for method: GorillaTag::GTLogErrorLimiter::LogOccurrences
// Il2CppName: LogOccurrences
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::GTLogErrorLimiter::*)(::UnityEngine::Component*, ::UnityEngine::Object*, ::StringW, ::StringW, int)>(&GorillaTag::GTLogErrorLimiter::LogOccurrences)> {
  static const MethodInfo* get() {
    static auto* component = &::il2cpp_utils::GetClassFromName("UnityEngine", "Component")->byval_arg;
    static auto* obj = &::il2cpp_utils::GetClassFromName("UnityEngine", "Object")->byval_arg;
    static auto* caller = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* sourceFilePath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* line = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::GTLogErrorLimiter*), "LogOccurrences", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{component, obj, caller, sourceFilePath, line});
  }
};
// Writing MetadataGetter for method: GorillaTag::GTLogErrorLimiter::LogOccurrences
// Il2CppName: LogOccurrences
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::GTLogErrorLimiter::*)(::Cysharp::Text::Utf16ValueStringBuilder, ::UnityEngine::Object*, ::StringW, ::StringW, int)>(&GorillaTag::GTLogErrorLimiter::LogOccurrences)> {
  static const MethodInfo* get() {
    static auto* subMessage = &::il2cpp_utils::GetClassFromName("Cysharp.Text", "Utf16ValueStringBuilder")->byval_arg;
    static auto* obj = &::il2cpp_utils::GetClassFromName("UnityEngine", "Object")->byval_arg;
    static auto* caller = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* sourceFilePath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* line = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::GTLogErrorLimiter*), "LogOccurrences", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{subMessage, obj, caller, sourceFilePath, line});
  }
};
