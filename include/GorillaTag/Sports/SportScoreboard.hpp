// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Pun.MonoBehaviourPunCallbacks
#include "Photon/Pun/MonoBehaviourPunCallbacks.hpp"
// Including type: Photon.Pun.IPunObservable
#include "Photon/Pun/IPunObservable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GorillaTag::Sports
namespace GorillaTag::Sports {
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioSource
  class AudioSource;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: SportScoreboardVisuals
  class SportScoreboardVisuals;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: Photon::Pun
namespace Photon::Pun {
  // Forward declaring type: PhotonStream
  class PhotonStream;
  // Forward declaring type: PhotonMessageInfo
  struct PhotonMessageInfo;
}
// Completed forward declares
// Type namespace: GorillaTag.Sports
namespace GorillaTag::Sports {
  // Forward declaring type: SportScoreboard
  class SportScoreboard;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaTag::Sports::SportScoreboard);
DEFINE_IL2CPP_ARG_TYPE(::GorillaTag::Sports::SportScoreboard*, "GorillaTag.Sports", "SportScoreboard");
// Type namespace: GorillaTag.Sports
namespace GorillaTag::Sports {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: GorillaTag.Sports.SportScoreboard
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: FFFFFFFF
  // [RequireComponent] Offset: FFFFFFFF
  class SportScoreboard : public ::Photon::Pun::MonoBehaviourPunCallbacks/*, public ::Photon::Pun::IPunObservable*/ {
    public:
    // Nested type: ::GorillaTag::Sports::SportScoreboard::TeamParameters
    class TeamParameters;
    // Nested type: ::GorillaTag::Sports::SportScoreboard::$MatchEndCoroutine$d__16
    class $MatchEndCoroutine$d__16;
    public:
    // private System.Collections.Generic.List`1<GorillaTag.Sports.SportScoreboard/TeamParameters> teamParameters
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::List_1<::GorillaTag::Sports::SportScoreboard::TeamParameters*>* teamParameters;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GorillaTag::Sports::SportScoreboard::TeamParameters*>*) == 0x8);
    // private System.Int32 matchEndScore
    // Size: 0x4
    // Offset: 0x30
    int matchEndScore;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single matchEndScoreResetDelayTime
    // Size: 0x4
    // Offset: 0x34
    float matchEndScoreResetDelayTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Collections.Generic.List`1<System.Int32> teamScores
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::List_1<int>* teamScores;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<int>*) == 0x8);
    // private System.Collections.Generic.List`1<System.Int32> teamScoresPrev
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::Generic::List_1<int>* teamScoresPrev;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<int>*) == 0x8);
    // private System.Boolean runningMatchEndCoroutine
    // Size: 0x1
    // Offset: 0x48
    bool runningMatchEndCoroutine;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: runningMatchEndCoroutine and: audioSource
    char __padding5[0x7] = {};
    // private UnityEngine.AudioSource audioSource
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::AudioSource* audioSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // private SportScoreboardVisuals[] scoreVisuals
    // Size: 0x8
    // Offset: 0x58
    ::ArrayW<::GlobalNamespace::SportScoreboardVisuals*> scoreVisuals;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::SportScoreboardVisuals*>) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Photon::Pun::IPunObservable
    operator ::Photon::Pun::IPunObservable() noexcept {
      return *reinterpret_cast<::Photon::Pun::IPunObservable*>(this);
    }
    // Get static field: static public GorillaTag.Sports.SportScoreboard Instance
    static ::GorillaTag::Sports::SportScoreboard* _get_Instance();
    // Set static field: static public GorillaTag.Sports.SportScoreboard Instance
    static void _set_Instance(::GorillaTag::Sports::SportScoreboard* value);
    // Get instance field reference: private System.Collections.Generic.List`1<GorillaTag.Sports.SportScoreboard/TeamParameters> teamParameters
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GorillaTag::Sports::SportScoreboard::TeamParameters*>*& dyn_teamParameters();
    // Get instance field reference: private System.Int32 matchEndScore
    [[deprecated("Use field access instead!")]] int& dyn_matchEndScore();
    // Get instance field reference: private System.Single matchEndScoreResetDelayTime
    [[deprecated("Use field access instead!")]] float& dyn_matchEndScoreResetDelayTime();
    // Get instance field reference: private System.Collections.Generic.List`1<System.Int32> teamScores
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& dyn_teamScores();
    // Get instance field reference: private System.Collections.Generic.List`1<System.Int32> teamScoresPrev
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& dyn_teamScoresPrev();
    // Get instance field reference: private System.Boolean runningMatchEndCoroutine
    [[deprecated("Use field access instead!")]] bool& dyn_runningMatchEndCoroutine();
    // Get instance field reference: private UnityEngine.AudioSource audioSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_audioSource();
    // Get instance field reference: private SportScoreboardVisuals[] scoreVisuals
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::SportScoreboardVisuals*>& dyn_scoreVisuals();
    // private System.Void Awake()
    // Offset: 0x28A0C20
    void Awake();
    // public System.Void RegisterTeamVisual(System.Int32 TeamIndex, SportScoreboardVisuals visuals)
    // Offset: 0x28A0DEC
    void RegisterTeamVisual(int TeamIndex, ::GlobalNamespace::SportScoreboardVisuals* visuals);
    // private System.Void UpdateScoreboard()
    // Offset: 0x28A0E68
    void UpdateScoreboard();
    // private System.Void OnScoreUpdated()
    // Offset: 0x28A1088
    void OnScoreUpdated();
    // public System.Void TeamScored(System.Int32 team)
    // Offset: 0x28A0AB8
    void TeamScored(int team);
    // public System.Void ResetScores()
    // Offset: 0x28A1320
    void ResetScores();
    // private System.Collections.IEnumerator MatchEndCoroutine(System.Int32 winningTeam)
    // Offset: 0x28A12A4
    ::System::Collections::IEnumerator* MatchEndCoroutine(int winningTeam);
    // public System.Void OnPhotonSerializeView(Photon.Pun.PhotonStream stream, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x28A13FC
    void OnPhotonSerializeView(::Photon::Pun::PhotonStream* stream, ::Photon::Pun::PhotonMessageInfo info);
    // public System.Void .ctor()
    // Offset: 0x28A156C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SportScoreboard* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaTag::Sports::SportScoreboard::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SportScoreboard*, creationType>()));
    }
  }; // GorillaTag.Sports.SportScoreboard
  #pragma pack(pop)
  static check_size<sizeof(SportScoreboard), 88 + sizeof(::ArrayW<::GlobalNamespace::SportScoreboardVisuals*>)> __GorillaTag_Sports_SportScoreboardSizeCheck;
  static_assert(sizeof(SportScoreboard) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaTag::Sports::SportScoreboard::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Sports::SportScoreboard::*)()>(&GorillaTag::Sports::SportScoreboard::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Sports::SportScoreboard*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Sports::SportScoreboard::RegisterTeamVisual
// Il2CppName: RegisterTeamVisual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Sports::SportScoreboard::*)(int, ::GlobalNamespace::SportScoreboardVisuals*)>(&GorillaTag::Sports::SportScoreboard::RegisterTeamVisual)> {
  static const MethodInfo* get() {
    static auto* TeamIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* visuals = &::il2cpp_utils::GetClassFromName("", "SportScoreboardVisuals")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Sports::SportScoreboard*), "RegisterTeamVisual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{TeamIndex, visuals});
  }
};
// Writing MetadataGetter for method: GorillaTag::Sports::SportScoreboard::UpdateScoreboard
// Il2CppName: UpdateScoreboard
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Sports::SportScoreboard::*)()>(&GorillaTag::Sports::SportScoreboard::UpdateScoreboard)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Sports::SportScoreboard*), "UpdateScoreboard", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Sports::SportScoreboard::OnScoreUpdated
// Il2CppName: OnScoreUpdated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Sports::SportScoreboard::*)()>(&GorillaTag::Sports::SportScoreboard::OnScoreUpdated)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Sports::SportScoreboard*), "OnScoreUpdated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Sports::SportScoreboard::TeamScored
// Il2CppName: TeamScored
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Sports::SportScoreboard::*)(int)>(&GorillaTag::Sports::SportScoreboard::TeamScored)> {
  static const MethodInfo* get() {
    static auto* team = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Sports::SportScoreboard*), "TeamScored", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{team});
  }
};
// Writing MetadataGetter for method: GorillaTag::Sports::SportScoreboard::ResetScores
// Il2CppName: ResetScores
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Sports::SportScoreboard::*)()>(&GorillaTag::Sports::SportScoreboard::ResetScores)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Sports::SportScoreboard*), "ResetScores", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Sports::SportScoreboard::MatchEndCoroutine
// Il2CppName: MatchEndCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GorillaTag::Sports::SportScoreboard::*)(int)>(&GorillaTag::Sports::SportScoreboard::MatchEndCoroutine)> {
  static const MethodInfo* get() {
    static auto* winningTeam = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Sports::SportScoreboard*), "MatchEndCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{winningTeam});
  }
};
// Writing MetadataGetter for method: GorillaTag::Sports::SportScoreboard::OnPhotonSerializeView
// Il2CppName: OnPhotonSerializeView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Sports::SportScoreboard::*)(::Photon::Pun::PhotonStream*, ::Photon::Pun::PhotonMessageInfo)>(&GorillaTag::Sports::SportScoreboard::OnPhotonSerializeView)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonStream")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Sports::SportScoreboard*), "OnPhotonSerializeView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, info});
  }
};
// Writing MetadataGetter for method: GorillaTag::Sports::SportScoreboard::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
