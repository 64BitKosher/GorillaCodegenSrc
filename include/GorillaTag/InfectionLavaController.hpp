// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: IGorillaSerializeableScene
#include "GlobalNamespace/IGorillaSerializeableScene.hpp"
// Including type: ITickSystemPost
#include "GlobalNamespace/ITickSystemPost.hpp"
// Including type: GorillaTag.GuidedRefs.IGuidedRefReceiverMono
#include "GorillaTag/GuidedRefs/IGuidedRefReceiverMono.hpp"
// Including type: GorillaTag.GuidedRefs.GuidedRefReceiverFieldInfo
#include "GorillaTag/GuidedRefs/GuidedRefReceiverFieldInfo.hpp"
// Including type: GorillaTag.GuidedRefs.GuidedRefReceiverArrayInfo
#include "GorillaTag/GuidedRefs/GuidedRefReceiverArrayInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GorillaTag
namespace GorillaTag {
  // Skipping declaration: RisingLavaState because it is already included!
  // Forward declaring type: VolcanoEffects
  class VolcanoEffects;
  // Skipping declaration: LavaSyncData because it is already included!
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: GorillaSerializerScene
  class GorillaSerializerScene;
  // Forward declaring type: SlingshotProjectileHitNotifier
  class SlingshotProjectileHitNotifier;
  // Forward declaring type: SlingshotProjectile
  class SlingshotProjectile;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
  // Forward declaring type: Gradient
  class Gradient;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: MeshRenderer
  class MeshRenderer;
  // Forward declaring type: Plane
  struct Plane;
  // Skipping declaration: Vector3 because it is already included!
  // Skipping declaration: Object because it is already included!
  // Forward declaring type: Collider
  class Collider;
  // Forward declaring type: Collision
  class Collision;
}
// Forward declaring namespace: GorillaLocomotion::Swimming
namespace GorillaLocomotion::Swimming {
  // Forward declaring type: WaterVolume
  class WaterVolume;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Forward declaring namespace: Photon::Pun
namespace Photon::Pun {
  // Forward declaring type: PhotonStream
  class PhotonStream;
  // Forward declaring type: PhotonMessageInfo
  struct PhotonMessageInfo;
}
// Forward declaring namespace: Photon::Realtime
namespace Photon::Realtime {
  // Forward declaring type: Player
  class Player;
}
// Forward declaring namespace: GorillaTag::GuidedRefs
namespace GorillaTag::GuidedRefs {
  // Forward declaring type: GuidedRefTryResolveInfo
  struct GuidedRefTryResolveInfo;
}
// Completed forward declares
// Type namespace: GorillaTag
namespace GorillaTag {
  // Forward declaring type: InfectionLavaController
  class InfectionLavaController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaTag::InfectionLavaController);
DEFINE_IL2CPP_ARG_TYPE(::GorillaTag::InfectionLavaController*, "GorillaTag", "InfectionLavaController");
// Type namespace: GorillaTag
namespace GorillaTag {
  // Size: 0x210
  #pragma pack(push, 1)
  // Autogenerated type: GorillaTag.InfectionLavaController
  // [TokenAttribute] Offset: FFFFFFFF
  class InfectionLavaController : public ::UnityEngine::MonoBehaviour/*, public ::GlobalNamespace::IGorillaSerializeableScene, public ::GlobalNamespace::ITickSystemPost, public ::GorillaTag::GuidedRefs::IGuidedRefReceiverMono*/ {
    public:
    // Nested type: ::GorillaTag::InfectionLavaController::RisingLavaState
    struct RisingLavaState;
    // Nested type: ::GorillaTag::InfectionLavaController::LavaSyncData
    struct LavaSyncData;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: GorillaTag.InfectionLavaController/RisingLavaState
    // [TokenAttribute] Offset: FFFFFFFF
    struct RisingLavaState/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: RisingLavaState
      constexpr RisingLavaState(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public GorillaTag.InfectionLavaController/RisingLavaState Drained
      static constexpr const int Drained = 0;
      // Get static field: static public GorillaTag.InfectionLavaController/RisingLavaState Drained
      static ::GorillaTag::InfectionLavaController::RisingLavaState _get_Drained();
      // Set static field: static public GorillaTag.InfectionLavaController/RisingLavaState Drained
      static void _set_Drained(::GorillaTag::InfectionLavaController::RisingLavaState value);
      // static field const value: static public GorillaTag.InfectionLavaController/RisingLavaState Erupting
      static constexpr const int Erupting = 1;
      // Get static field: static public GorillaTag.InfectionLavaController/RisingLavaState Erupting
      static ::GorillaTag::InfectionLavaController::RisingLavaState _get_Erupting();
      // Set static field: static public GorillaTag.InfectionLavaController/RisingLavaState Erupting
      static void _set_Erupting(::GorillaTag::InfectionLavaController::RisingLavaState value);
      // static field const value: static public GorillaTag.InfectionLavaController/RisingLavaState Rising
      static constexpr const int Rising = 2;
      // Get static field: static public GorillaTag.InfectionLavaController/RisingLavaState Rising
      static ::GorillaTag::InfectionLavaController::RisingLavaState _get_Rising();
      // Set static field: static public GorillaTag.InfectionLavaController/RisingLavaState Rising
      static void _set_Rising(::GorillaTag::InfectionLavaController::RisingLavaState value);
      // static field const value: static public GorillaTag.InfectionLavaController/RisingLavaState Full
      static constexpr const int Full = 3;
      // Get static field: static public GorillaTag.InfectionLavaController/RisingLavaState Full
      static ::GorillaTag::InfectionLavaController::RisingLavaState _get_Full();
      // Set static field: static public GorillaTag.InfectionLavaController/RisingLavaState Full
      static void _set_Full(::GorillaTag::InfectionLavaController::RisingLavaState value);
      // static field const value: static public GorillaTag.InfectionLavaController/RisingLavaState Draining
      static constexpr const int Draining = 4;
      // Get static field: static public GorillaTag.InfectionLavaController/RisingLavaState Draining
      static ::GorillaTag::InfectionLavaController::RisingLavaState _get_Draining();
      // Set static field: static public GorillaTag.InfectionLavaController/RisingLavaState Draining
      static void _set_Draining(::GorillaTag::InfectionLavaController::RisingLavaState value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // GorillaTag.InfectionLavaController/RisingLavaState
    #pragma pack(pop)
    static check_size<sizeof(InfectionLavaController::RisingLavaState), 0 + sizeof(int)> __GorillaTag_InfectionLavaController_RisingLavaStateSizeCheck;
    static_assert(sizeof(InfectionLavaController::RisingLavaState) == 0x4);
    // Size: 0x18
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: GorillaTag.InfectionLavaController/LavaSyncData
    // [TokenAttribute] Offset: FFFFFFFF
    struct LavaSyncData/*, public ::System::ValueType*/ {
      public:
      public:
      // public GorillaTag.InfectionLavaController/RisingLavaState state
      // Size: 0x4
      // Offset: 0x0
      ::GorillaTag::InfectionLavaController::RisingLavaState state;
      // Field size check
      static_assert(sizeof(::GorillaTag::InfectionLavaController::RisingLavaState) == 0x4);
      // Padding between fields: state and: stateStartTime
      char __padding0[0x4] = {};
      // public System.Double stateStartTime
      // Size: 0x8
      // Offset: 0x8
      double stateStartTime;
      // Field size check
      static_assert(sizeof(double) == 0x8);
      // public System.Double activationProgress
      // Size: 0x8
      // Offset: 0x10
      double activationProgress;
      // Field size check
      static_assert(sizeof(double) == 0x8);
      public:
      // Creating value type constructor for type: LavaSyncData
      constexpr LavaSyncData(::GorillaTag::InfectionLavaController::RisingLavaState state_ = {}, double stateStartTime_ = {}, double activationProgress_ = {}) noexcept : state{state_}, stateStartTime{stateStartTime_}, activationProgress{activationProgress_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public GorillaTag.InfectionLavaController/RisingLavaState state
      [[deprecated("Use field access instead!")]] ::GorillaTag::InfectionLavaController::RisingLavaState& dyn_state();
      // Get instance field reference: public System.Double stateStartTime
      [[deprecated("Use field access instead!")]] double& dyn_stateStartTime();
      // Get instance field reference: public System.Double activationProgress
      [[deprecated("Use field access instead!")]] double& dyn_activationProgress();
    }; // GorillaTag.InfectionLavaController/LavaSyncData
    #pragma pack(pop)
    static check_size<sizeof(InfectionLavaController::LavaSyncData), 16 + sizeof(double)> __GorillaTag_InfectionLavaController_LavaSyncDataSizeCheck;
    static_assert(sizeof(InfectionLavaController::LavaSyncData) == 0x18);
    public:
    // private System.Single lavaMeshMinScale
    // Size: 0x4
    // Offset: 0x20
    float lavaMeshMinScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single lavaMeshMaxScale
    // Size: 0x4
    // Offset: 0x24
    float lavaMeshMaxScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single eruptTime
    // Size: 0x4
    // Offset: 0x28
    float eruptTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single riseTime
    // Size: 0x4
    // Offset: 0x2C
    float riseTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single fullTime
    // Size: 0x4
    // Offset: 0x30
    float fullTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single drainTime
    // Size: 0x4
    // Offset: 0x34
    float drainTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single lagResolutionLavaProgressPerSecond
    // Size: 0x4
    // Offset: 0x38
    float lagResolutionLavaProgressPerSecond;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: lagResolutionLavaProgressPerSecond and: lavaProgressAnimationCurve
    char __padding6[0x4] = {};
    // private UnityEngine.AnimationCurve lavaProgressAnimationCurve
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::AnimationCurve* lavaProgressAnimationCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // private System.Single activationVotePercentageDefaultQueue
    // Size: 0x4
    // Offset: 0x48
    float activationVotePercentageDefaultQueue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single activationVotePercentageCompetitiveQueue
    // Size: 0x4
    // Offset: 0x4C
    float activationVotePercentageCompetitiveQueue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Gradient lavaActivationGradient
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::Gradient* lavaActivationGradient;
    // Field size check
    static_assert(sizeof(::UnityEngine::Gradient*) == 0x8);
    // private UnityEngine.AnimationCurve lavaActivationRockProgressVsPlayerCount
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::AnimationCurve* lavaActivationRockProgressVsPlayerCount;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // private UnityEngine.AnimationCurve lavaActivationDrainRateVsPlayerCount
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::AnimationCurve* lavaActivationDrainRateVsPlayerCount;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // private System.Single lavaActivationVisualMovementProgressPerSecond
    // Size: 0x4
    // Offset: 0x68
    float lavaActivationVisualMovementProgressPerSecond;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean debugLavaActivationVotes
    // Size: 0x1
    // Offset: 0x6C
    bool debugLavaActivationVotes;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: debugLavaActivationVotes and: lavaMeshTransform
    char __padding14[0x3] = {};
    // private UnityEngine.Transform lavaMeshTransform
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::Transform* lavaMeshTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private GorillaTag.GuidedRefs.GuidedRefReceiverFieldInfo lavaMeshTransform_gRef
    // Size: 0x1C
    // Offset: 0x78
    ::GorillaTag::GuidedRefs::GuidedRefReceiverFieldInfo lavaMeshTransform_gRef;
    // Field size check
    static_assert(sizeof(::GorillaTag::GuidedRefs::GuidedRefReceiverFieldInfo) == 0x1C);
    // Padding between fields: lavaMeshTransform_gRef and: lavaSurfacePlaneTransform
    char __padding16[0x4] = {};
    // private UnityEngine.Transform lavaSurfacePlaneTransform
    // Size: 0x8
    // Offset: 0x98
    ::UnityEngine::Transform* lavaSurfacePlaneTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private GorillaTag.GuidedRefs.GuidedRefReceiverFieldInfo lavaSurfacePlaneTransform_gRef
    // Size: 0x1C
    // Offset: 0xA0
    ::GorillaTag::GuidedRefs::GuidedRefReceiverFieldInfo lavaSurfacePlaneTransform_gRef;
    // Field size check
    static_assert(sizeof(::GorillaTag::GuidedRefs::GuidedRefReceiverFieldInfo) == 0x1C);
    // Padding between fields: lavaSurfacePlaneTransform_gRef and: lavaVolume
    char __padding18[0x4] = {};
    // private GorillaLocomotion.Swimming.WaterVolume lavaVolume
    // Size: 0x8
    // Offset: 0xC0
    ::GorillaLocomotion::Swimming::WaterVolume* lavaVolume;
    // Field size check
    static_assert(sizeof(::GorillaLocomotion::Swimming::WaterVolume*) == 0x8);
    // private GorillaTag.GuidedRefs.GuidedRefReceiverFieldInfo lavaVolume_gRef
    // Size: 0x1C
    // Offset: 0xC8
    ::GorillaTag::GuidedRefs::GuidedRefReceiverFieldInfo lavaVolume_gRef;
    // Field size check
    static_assert(sizeof(::GorillaTag::GuidedRefs::GuidedRefReceiverFieldInfo) == 0x1C);
    // Padding between fields: lavaVolume_gRef and: lavaActivationRenderer
    char __padding20[0x4] = {};
    // private UnityEngine.MeshRenderer lavaActivationRenderer
    // Size: 0x8
    // Offset: 0xE8
    ::UnityEngine::MeshRenderer* lavaActivationRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshRenderer*) == 0x8);
    // private GorillaTag.GuidedRefs.GuidedRefReceiverFieldInfo lavaActivationRenderer_gRef
    // Size: 0x1C
    // Offset: 0xF0
    ::GorillaTag::GuidedRefs::GuidedRefReceiverFieldInfo lavaActivationRenderer_gRef;
    // Field size check
    static_assert(sizeof(::GorillaTag::GuidedRefs::GuidedRefReceiverFieldInfo) == 0x1C);
    // Padding between fields: lavaActivationRenderer_gRef and: lavaActivationStartPos
    char __padding22[0x4] = {};
    // private UnityEngine.Transform lavaActivationStartPos
    // Size: 0x8
    // Offset: 0x110
    ::UnityEngine::Transform* lavaActivationStartPos;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private GorillaTag.GuidedRefs.GuidedRefReceiverFieldInfo lavaActivationStartPos_gRef
    // Size: 0x1C
    // Offset: 0x118
    ::GorillaTag::GuidedRefs::GuidedRefReceiverFieldInfo lavaActivationStartPos_gRef;
    // Field size check
    static_assert(sizeof(::GorillaTag::GuidedRefs::GuidedRefReceiverFieldInfo) == 0x1C);
    // Padding between fields: lavaActivationStartPos_gRef and: lavaActivationEndPos
    char __padding24[0x4] = {};
    // private UnityEngine.Transform lavaActivationEndPos
    // Size: 0x8
    // Offset: 0x138
    ::UnityEngine::Transform* lavaActivationEndPos;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private GorillaTag.GuidedRefs.GuidedRefReceiverFieldInfo lavaActivationEndPos_gRef
    // Size: 0x1C
    // Offset: 0x140
    ::GorillaTag::GuidedRefs::GuidedRefReceiverFieldInfo lavaActivationEndPos_gRef;
    // Field size check
    static_assert(sizeof(::GorillaTag::GuidedRefs::GuidedRefReceiverFieldInfo) == 0x1C);
    // Padding between fields: lavaActivationEndPos_gRef and: lavaActivationProjectileHitNotifier
    char __padding26[0x4] = {};
    // private SlingshotProjectileHitNotifier lavaActivationProjectileHitNotifier
    // Size: 0x8
    // Offset: 0x160
    ::GlobalNamespace::SlingshotProjectileHitNotifier* lavaActivationProjectileHitNotifier;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SlingshotProjectileHitNotifier*) == 0x8);
    // private GorillaTag.GuidedRefs.GuidedRefReceiverFieldInfo lavaActivationProjectileHitNotifier_gRef
    // Size: 0x1C
    // Offset: 0x168
    ::GorillaTag::GuidedRefs::GuidedRefReceiverFieldInfo lavaActivationProjectileHitNotifier_gRef;
    // Field size check
    static_assert(sizeof(::GorillaTag::GuidedRefs::GuidedRefReceiverFieldInfo) == 0x1C);
    // Padding between fields: lavaActivationProjectileHitNotifier_gRef and: volcanoEffects
    char __padding28[0x4] = {};
    // private GorillaTag.VolcanoEffects[] volcanoEffects
    // Size: 0x8
    // Offset: 0x188
    ::ArrayW<::GorillaTag::VolcanoEffects*> volcanoEffects;
    // Field size check
    static_assert(sizeof(::ArrayW<::GorillaTag::VolcanoEffects*>) == 0x8);
    // private GorillaTag.GuidedRefs.GuidedRefReceiverArrayInfo volcanoEffects_gRefs
    // Size: 0x20
    // Offset: 0x190
    ::GorillaTag::GuidedRefs::GuidedRefReceiverArrayInfo volcanoEffects_gRefs;
    // Field size check
    static_assert(sizeof(::GorillaTag::GuidedRefs::GuidedRefReceiverArrayInfo) == 0x20);
    // private GorillaTag.InfectionLavaController/LavaSyncData reliableState
    // Size: 0x18
    // Offset: 0x1B0
    ::GorillaTag::InfectionLavaController::LavaSyncData reliableState;
    // Field size check
    static_assert(sizeof(::GorillaTag::InfectionLavaController::LavaSyncData) == 0x18);
    // private System.Int32[] lavaActivationVotePlayerIds
    // Size: 0x8
    // Offset: 0x1C8
    ::ArrayW<int> lavaActivationVotePlayerIds;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // private System.Int32 lavaActivationVoteCount
    // Size: 0x4
    // Offset: 0x1D0
    int lavaActivationVoteCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single localLagLavaProgressOffset
    // Size: 0x4
    // Offset: 0x1D4
    float localLagLavaProgressOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single lavaProgressLinear
    // Size: 0x4
    // Offset: 0x1D8
    float lavaProgressLinear;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single lavaProgressSmooth
    // Size: 0x4
    // Offset: 0x1DC
    float lavaProgressSmooth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Double lastTagSelfRPCTime
    // Size: 0x8
    // Offset: 0x1E0
    double lastTagSelfRPCTime;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Double currentTime
    // Size: 0x8
    // Offset: 0x1E8
    double currentTime;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Double prevTime
    // Size: 0x8
    // Offset: 0x1F0
    double prevTime;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Single activationProgessSmooth
    // Size: 0x4
    // Offset: 0x1F8
    float activationProgessSmooth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single lavaScale
    // Size: 0x4
    // Offset: 0x1FC
    float lavaScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private GorillaSerializerScene networkObject
    // Size: 0x8
    // Offset: 0x200
    ::GlobalNamespace::GorillaSerializerScene* networkObject;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GorillaSerializerScene*) == 0x8);
    // private System.Boolean <ITickSystemPost.PostTickRunning>k__BackingField
    // Size: 0x1
    // Offset: 0x208
    bool PostTickRunning;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean guidedRefsFullyResolved
    // Size: 0x1
    // Offset: 0x209
    bool guidedRefsFullyResolved;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: guidedRefsFullyResolved and: GuidedRefsWaitingToResolveCount
    char __padding44[0x2] = {};
    // private System.Int32 <GorillaTag.GuidedRefs.IGuidedRefReceiverMono.GuidedRefsWaitingToResolveCount>k__BackingField
    // Size: 0x4
    // Offset: 0x20C
    int GuidedRefsWaitingToResolveCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating interface conversion operator: operator ::GlobalNamespace::IGorillaSerializeableScene
    operator ::GlobalNamespace::IGorillaSerializeableScene() noexcept {
      return *reinterpret_cast<::GlobalNamespace::IGorillaSerializeableScene*>(this);
    }
    // Creating interface conversion operator: operator ::GlobalNamespace::ITickSystemPost
    operator ::GlobalNamespace::ITickSystemPost() noexcept {
      return *reinterpret_cast<::GlobalNamespace::ITickSystemPost*>(this);
    }
    // Creating interface conversion operator: operator ::GorillaTag::GuidedRefs::IGuidedRefReceiverMono
    operator ::GorillaTag::GuidedRefs::IGuidedRefReceiverMono() noexcept {
      return *reinterpret_cast<::GorillaTag::GuidedRefs::IGuidedRefReceiverMono*>(this);
    }
    // Get static field: static private GorillaTag.InfectionLavaController instance
    static ::GorillaTag::InfectionLavaController* _get_instance();
    // Set static field: static private GorillaTag.InfectionLavaController instance
    static void _set_instance(::GorillaTag::InfectionLavaController* value);
    // static field const value: static private System.String lavaRockProjectileTag
    static constexpr const char* lavaRockProjectileTag = "LavaRockProjectile";
    // Get static field: static private System.String lavaRockProjectileTag
    static ::StringW _get_lavaRockProjectileTag();
    // Set static field: static private System.String lavaRockProjectileTag
    static void _set_lavaRockProjectileTag(::StringW value);
    // Get static field: static private readonly System.Int32 shaderProp_BaseColor
    static int _get_shaderProp_BaseColor();
    // Set static field: static private readonly System.Int32 shaderProp_BaseColor
    static void _set_shaderProp_BaseColor(int value);
    // Get instance field reference: private System.Single lavaMeshMinScale
    [[deprecated("Use field access instead!")]] float& dyn_lavaMeshMinScale();
    // Get instance field reference: private System.Single lavaMeshMaxScale
    [[deprecated("Use field access instead!")]] float& dyn_lavaMeshMaxScale();
    // Get instance field reference: private System.Single eruptTime
    [[deprecated("Use field access instead!")]] float& dyn_eruptTime();
    // Get instance field reference: private System.Single riseTime
    [[deprecated("Use field access instead!")]] float& dyn_riseTime();
    // Get instance field reference: private System.Single fullTime
    [[deprecated("Use field access instead!")]] float& dyn_fullTime();
    // Get instance field reference: private System.Single drainTime
    [[deprecated("Use field access instead!")]] float& dyn_drainTime();
    // Get instance field reference: private System.Single lagResolutionLavaProgressPerSecond
    [[deprecated("Use field access instead!")]] float& dyn_lagResolutionLavaProgressPerSecond();
    // Get instance field reference: private UnityEngine.AnimationCurve lavaProgressAnimationCurve
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_lavaProgressAnimationCurve();
    // Get instance field reference: private System.Single activationVotePercentageDefaultQueue
    [[deprecated("Use field access instead!")]] float& dyn_activationVotePercentageDefaultQueue();
    // Get instance field reference: private System.Single activationVotePercentageCompetitiveQueue
    [[deprecated("Use field access instead!")]] float& dyn_activationVotePercentageCompetitiveQueue();
    // Get instance field reference: private UnityEngine.Gradient lavaActivationGradient
    [[deprecated("Use field access instead!")]] ::UnityEngine::Gradient*& dyn_lavaActivationGradient();
    // Get instance field reference: private UnityEngine.AnimationCurve lavaActivationRockProgressVsPlayerCount
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_lavaActivationRockProgressVsPlayerCount();
    // Get instance field reference: private UnityEngine.AnimationCurve lavaActivationDrainRateVsPlayerCount
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_lavaActivationDrainRateVsPlayerCount();
    // Get instance field reference: private System.Single lavaActivationVisualMovementProgressPerSecond
    [[deprecated("Use field access instead!")]] float& dyn_lavaActivationVisualMovementProgressPerSecond();
    // Get instance field reference: private System.Boolean debugLavaActivationVotes
    [[deprecated("Use field access instead!")]] bool& dyn_debugLavaActivationVotes();
    // Get instance field reference: private UnityEngine.Transform lavaMeshTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_lavaMeshTransform();
    // Get instance field reference: private GorillaTag.GuidedRefs.GuidedRefReceiverFieldInfo lavaMeshTransform_gRef
    [[deprecated("Use field access instead!")]] ::GorillaTag::GuidedRefs::GuidedRefReceiverFieldInfo& dyn_lavaMeshTransform_gRef();
    // Get instance field reference: private UnityEngine.Transform lavaSurfacePlaneTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_lavaSurfacePlaneTransform();
    // Get instance field reference: private GorillaTag.GuidedRefs.GuidedRefReceiverFieldInfo lavaSurfacePlaneTransform_gRef
    [[deprecated("Use field access instead!")]] ::GorillaTag::GuidedRefs::GuidedRefReceiverFieldInfo& dyn_lavaSurfacePlaneTransform_gRef();
    // Get instance field reference: private GorillaLocomotion.Swimming.WaterVolume lavaVolume
    [[deprecated("Use field access instead!")]] ::GorillaLocomotion::Swimming::WaterVolume*& dyn_lavaVolume();
    // Get instance field reference: private GorillaTag.GuidedRefs.GuidedRefReceiverFieldInfo lavaVolume_gRef
    [[deprecated("Use field access instead!")]] ::GorillaTag::GuidedRefs::GuidedRefReceiverFieldInfo& dyn_lavaVolume_gRef();
    // Get instance field reference: private UnityEngine.MeshRenderer lavaActivationRenderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& dyn_lavaActivationRenderer();
    // Get instance field reference: private GorillaTag.GuidedRefs.GuidedRefReceiverFieldInfo lavaActivationRenderer_gRef
    [[deprecated("Use field access instead!")]] ::GorillaTag::GuidedRefs::GuidedRefReceiverFieldInfo& dyn_lavaActivationRenderer_gRef();
    // Get instance field reference: private UnityEngine.Transform lavaActivationStartPos
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_lavaActivationStartPos();
    // Get instance field reference: private GorillaTag.GuidedRefs.GuidedRefReceiverFieldInfo lavaActivationStartPos_gRef
    [[deprecated("Use field access instead!")]] ::GorillaTag::GuidedRefs::GuidedRefReceiverFieldInfo& dyn_lavaActivationStartPos_gRef();
    // Get instance field reference: private UnityEngine.Transform lavaActivationEndPos
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_lavaActivationEndPos();
    // Get instance field reference: private GorillaTag.GuidedRefs.GuidedRefReceiverFieldInfo lavaActivationEndPos_gRef
    [[deprecated("Use field access instead!")]] ::GorillaTag::GuidedRefs::GuidedRefReceiverFieldInfo& dyn_lavaActivationEndPos_gRef();
    // Get instance field reference: private SlingshotProjectileHitNotifier lavaActivationProjectileHitNotifier
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SlingshotProjectileHitNotifier*& dyn_lavaActivationProjectileHitNotifier();
    // Get instance field reference: private GorillaTag.GuidedRefs.GuidedRefReceiverFieldInfo lavaActivationProjectileHitNotifier_gRef
    [[deprecated("Use field access instead!")]] ::GorillaTag::GuidedRefs::GuidedRefReceiverFieldInfo& dyn_lavaActivationProjectileHitNotifier_gRef();
    // Get instance field reference: private GorillaTag.VolcanoEffects[] volcanoEffects
    [[deprecated("Use field access instead!")]] ::ArrayW<::GorillaTag::VolcanoEffects*>& dyn_volcanoEffects();
    // Get instance field reference: private GorillaTag.GuidedRefs.GuidedRefReceiverArrayInfo volcanoEffects_gRefs
    [[deprecated("Use field access instead!")]] ::GorillaTag::GuidedRefs::GuidedRefReceiverArrayInfo& dyn_volcanoEffects_gRefs();
    // Get instance field reference: private GorillaTag.InfectionLavaController/LavaSyncData reliableState
    [[deprecated("Use field access instead!")]] ::GorillaTag::InfectionLavaController::LavaSyncData& dyn_reliableState();
    // Get instance field reference: private System.Int32[] lavaActivationVotePlayerIds
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_lavaActivationVotePlayerIds();
    // Get instance field reference: private System.Int32 lavaActivationVoteCount
    [[deprecated("Use field access instead!")]] int& dyn_lavaActivationVoteCount();
    // Get instance field reference: private System.Single localLagLavaProgressOffset
    [[deprecated("Use field access instead!")]] float& dyn_localLagLavaProgressOffset();
    // Get instance field reference: private System.Single lavaProgressLinear
    [[deprecated("Use field access instead!")]] float& dyn_lavaProgressLinear();
    // Get instance field reference: private System.Single lavaProgressSmooth
    [[deprecated("Use field access instead!")]] float& dyn_lavaProgressSmooth();
    // Get instance field reference: private System.Double lastTagSelfRPCTime
    [[deprecated("Use field access instead!")]] double& dyn_lastTagSelfRPCTime();
    // Get instance field reference: private System.Double currentTime
    [[deprecated("Use field access instead!")]] double& dyn_currentTime();
    // Get instance field reference: private System.Double prevTime
    [[deprecated("Use field access instead!")]] double& dyn_prevTime();
    // Get instance field reference: private System.Single activationProgessSmooth
    [[deprecated("Use field access instead!")]] float& dyn_activationProgessSmooth();
    // Get instance field reference: private System.Single lavaScale
    [[deprecated("Use field access instead!")]] float& dyn_lavaScale();
    // Get instance field reference: private GorillaSerializerScene networkObject
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaSerializerScene*& dyn_networkObject();
    // Get instance field reference: private System.Boolean <ITickSystemPost.PostTickRunning>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$ITickSystemPost_PostTickRunning$k__BackingField();
    // Get instance field reference: private System.Boolean guidedRefsFullyResolved
    [[deprecated("Use field access instead!")]] bool& dyn_guidedRefsFullyResolved();
    // Get instance field reference: private System.Int32 <GorillaTag.GuidedRefs.IGuidedRefReceiverMono.GuidedRefsWaitingToResolveCount>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$GorillaTag_GuidedRefs_IGuidedRefReceiverMono_GuidedRefsWaitingToResolveCount$k__BackingField();
    // static public GorillaTag.InfectionLavaController get_Instance()
    // Offset: 0x287D7D8
    static ::GorillaTag::InfectionLavaController* get_Instance();
    // public System.Boolean get_LavaCurrentlyActivated()
    // Offset: 0x287D830
    bool get_LavaCurrentlyActivated();
    // public UnityEngine.Plane get_LavaPlane()
    // Offset: 0x287D840
    ::UnityEngine::Plane get_LavaPlane();
    // public UnityEngine.Vector3 get_SurfaceCenter()
    // Offset: 0x287D964
    ::UnityEngine::Vector3 get_SurfaceCenter();
    // private System.Int32 get_PlayerCount()
    // Offset: 0x287D980
    int get_PlayerCount();
    // private System.Boolean get_InCompetitiveQueue()
    // Offset: 0x287DA0C
    bool get_InCompetitiveQueue();
    // private System.Void Awake()
    // Offset: 0x287DB10
    void Awake();
    // protected System.Void OnEnable()
    // Offset: 0x287DF34
    void OnEnable();
    // private System.Void IGorillaSerializeableScene.OnSceneLinking(GorillaSerializerScene netObj)
    // Offset: 0x287E178
    void IGorillaSerializeableScene_OnSceneLinking(::GlobalNamespace::GorillaSerializerScene* netObj);
    // protected System.Void OnDisable()
    // Offset: 0x287E188
    void OnDisable();
    // private System.Void VerifyReferences()
    // Offset: 0x287DFBC
    void VerifyReferences();
    // private System.Void IfNullThenLogAndDisableSelf(UnityEngine.Object obj, System.String fieldName, System.Int32 index)
    // Offset: 0x287E1F4
    void IfNullThenLogAndDisableSelf(::UnityEngine::Object* obj, ::StringW fieldName, int index);
    // private System.Void OnDestroy()
    // Offset: 0x287E358
    void OnDestroy();
    // private System.Boolean ITickSystemPost.get_PostTickRunning()
    // Offset: 0x287E674
    bool ITickSystemPost_get_PostTickRunning();
    // private System.Void ITickSystemPost.set_PostTickRunning(System.Boolean value)
    // Offset: 0x287E67C
    void ITickSystemPost_set_PostTickRunning(bool value);
    // private System.Void ITickSystemPost.PostTick()
    // Offset: 0x287E688
    void ITickSystemPost_PostTick();
    // private System.Void JumpToState(GorillaTag.InfectionLavaController/RisingLavaState state)
    // Offset: 0x287F380
    void JumpToState(::GorillaTag::InfectionLavaController::RisingLavaState state);
    // private System.Void UpdateReliableState(System.Double currentTime, ref GorillaTag.InfectionLavaController/LavaSyncData syncData)
    // Offset: 0x287E7D0
    void UpdateReliableState(double currentTime, ByRef<::GorillaTag::InfectionLavaController::LavaSyncData> syncData);
    // private System.Void UpdateLocalState(System.Double currentTime, GorillaTag.InfectionLavaController/LavaSyncData syncData)
    // Offset: 0x287ECF0
    void UpdateLocalState(double currentTime, ::GorillaTag::InfectionLavaController::LavaSyncData syncData);
    // private System.Void UpdateLava(System.Single fillProgress)
    // Offset: 0x287E58C
    void UpdateLava(float fillProgress);
    // private System.Void UpdateVolcanoActivationLava(System.Single activationProgress)
    // Offset: 0x287F124
    void UpdateVolcanoActivationLava(float activationProgress);
    // private System.Void CheckLocalPlayerAgainstLava(System.Double currentTime)
    // Offset: 0x287F29C
    void CheckLocalPlayerAgainstLava(double currentTime);
    // private System.Void OnColliderEnteredLava(GorillaLocomotion.Swimming.WaterVolume volume, UnityEngine.Collider collider)
    // Offset: 0x287F97C
    void OnColliderEnteredLava(::GorillaLocomotion::Swimming::WaterVolume* volume, ::UnityEngine::Collider* collider);
    // private System.Void LocalPlayerInLava(System.Double currentTime, System.Boolean enteredLavaThisFrame)
    // Offset: 0x287F844
    void LocalPlayerInLava(double currentTime, bool enteredLavaThisFrame);
    // public System.Void OnActivationLavaProjectileHit(SlingshotProjectile projectile, UnityEngine.Collision collision)
    // Offset: 0x287FA90
    void OnActivationLavaProjectileHit(::GlobalNamespace::SlingshotProjectile* projectile, ::UnityEngine::Collision* collision);
    // private System.Void AddLavaRock(System.Int32 playerId)
    // Offset: 0x287FB18
    void AddLavaRock(int playerId);
    // private System.Void AddVoteForVolcanoActivation(System.Int32 playerId)
    // Offset: 0x287FBD4
    void AddVoteForVolcanoActivation(int playerId);
    // private System.Void RemoveVoteForVolcanoActivation(System.Int32 playerId)
    // Offset: 0x287FD10
    void RemoveVoteForVolcanoActivation(int playerId);
    // private System.Void IGorillaSerializeable.OnSerializeWrite(Photon.Pun.PhotonStream stream, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x287FDB0
    void IGorillaSerializeable_OnSerializeWrite(::Photon::Pun::PhotonStream* stream, ::Photon::Pun::PhotonMessageInfo info);
    // private System.Void IGorillaSerializeable.OnSerializeRead(Photon.Pun.PhotonStream stream, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x28800E0
    void IGorillaSerializeable_OnSerializeRead(::Photon::Pun::PhotonStream* stream, ::Photon::Pun::PhotonMessageInfo info);
    // public System.Void OnPlayerLeftRoom(Photon.Realtime.Player otherPlayer)
    // Offset: 0x28805B8
    void OnPlayerLeftRoom(::Photon::Realtime::Player* otherPlayer);
    // private System.Void OnLeftRoom()
    // Offset: 0x28805D0
    void OnLeftRoom();
    // private System.Void IGorillaSerializeableScene.OnNetworkObjectDisable()
    // Offset: 0x288069C
    void IGorillaSerializeableScene_OnNetworkObjectDisable();
    // private System.Void IGorillaSerializeableScene.OnNetworkObjectEnable()
    // Offset: 0x28806A0
    void IGorillaSerializeableScene_OnNetworkObjectEnable();
    // private System.Int32 GorillaTag.GuidedRefs.IGuidedRefReceiverMono.get_GuidedRefsWaitingToResolveCount()
    // Offset: 0x28806A4
    int GorillaTag_GuidedRefs_IGuidedRefReceiverMono_get_GuidedRefsWaitingToResolveCount();
    // private System.Void GorillaTag.GuidedRefs.IGuidedRefReceiverMono.set_GuidedRefsWaitingToResolveCount(System.Int32 value)
    // Offset: 0x28806AC
    void GorillaTag_GuidedRefs_IGuidedRefReceiverMono_set_GuidedRefsWaitingToResolveCount(int value);
    // private System.Void GorillaTag.GuidedRefs.IGuidedRefReceiverMono.OnAllGuidedRefsResolved()
    // Offset: 0x28806B4
    void GorillaTag_GuidedRefs_IGuidedRefReceiverMono_OnAllGuidedRefsResolved();
    // public System.Void OnGuidedRefTargetDestroyed(System.Int32 fieldId)
    // Offset: 0x2880730
    void OnGuidedRefTargetDestroyed(int fieldId);
    // private System.Void GorillaTag.GuidedRefs.IGuidedRefObject.GuidedRefInitialize()
    // Offset: 0x28807A0
    void GorillaTag_GuidedRefs_IGuidedRefObject_GuidedRefInitialize();
    // private System.Boolean GorillaTag.GuidedRefs.IGuidedRefReceiverMono.GuidedRefTryResolveReference(GorillaTag.GuidedRefs.GuidedRefTryResolveInfo target)
    // Offset: 0x2880998
    bool GorillaTag_GuidedRefs_IGuidedRefReceiverMono_GuidedRefTryResolveReference(::GorillaTag::GuidedRefs::GuidedRefTryResolveInfo target);
    // public System.Void .ctor()
    // Offset: 0x2880C94
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InfectionLavaController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaTag::InfectionLavaController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InfectionLavaController*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x2880F34
    static void _cctor();
    // private UnityEngine.Transform GorillaTag.GuidedRefs.IGuidedRefMonoBehaviour.get_transform()
    // Offset: 0x2880F9C
    ::UnityEngine::Transform* GorillaTag_GuidedRefs_IGuidedRefMonoBehaviour_get_transform();
    // private System.Int32 GorillaTag.GuidedRefs.IGuidedRefObject.GetInstanceID()
    // Offset: 0x2880FA4
    int GorillaTag_GuidedRefs_IGuidedRefObject_GetInstanceID();
  }; // GorillaTag.InfectionLavaController
  #pragma pack(pop)
  static check_size<sizeof(InfectionLavaController), 524 + sizeof(int)> __GorillaTag_InfectionLavaControllerSizeCheck;
  static_assert(sizeof(InfectionLavaController) == 0x210);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GorillaTag::InfectionLavaController::LavaSyncData, "GorillaTag", "InfectionLavaController/LavaSyncData");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GorillaTag::InfectionLavaController::RisingLavaState, "GorillaTag", "InfectionLavaController/RisingLavaState");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaTag::InfectionLavaController::get_Instance
// Il2CppName: get_Instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GorillaTag::InfectionLavaController* (*)()>(&GorillaTag::InfectionLavaController::get_Instance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::InfectionLavaController*), "get_Instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::InfectionLavaController::get_LavaCurrentlyActivated
// Il2CppName: get_LavaCurrentlyActivated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaTag::InfectionLavaController::*)()>(&GorillaTag::InfectionLavaController::get_LavaCurrentlyActivated)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::InfectionLavaController*), "get_LavaCurrentlyActivated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::InfectionLavaController::get_LavaPlane
// Il2CppName: get_LavaPlane
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Plane (GorillaTag::InfectionLavaController::*)()>(&GorillaTag::InfectionLavaController::get_LavaPlane)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::InfectionLavaController*), "get_LavaPlane", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::InfectionLavaController::get_SurfaceCenter
// Il2CppName: get_SurfaceCenter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GorillaTag::InfectionLavaController::*)()>(&GorillaTag::InfectionLavaController::get_SurfaceCenter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::InfectionLavaController*), "get_SurfaceCenter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::InfectionLavaController::get_PlayerCount
// Il2CppName: get_PlayerCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GorillaTag::InfectionLavaController::*)()>(&GorillaTag::InfectionLavaController::get_PlayerCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::InfectionLavaController*), "get_PlayerCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::InfectionLavaController::get_InCompetitiveQueue
// Il2CppName: get_InCompetitiveQueue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaTag::InfectionLavaController::*)()>(&GorillaTag::InfectionLavaController::get_InCompetitiveQueue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::InfectionLavaController*), "get_InCompetitiveQueue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::InfectionLavaController::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::InfectionLavaController::*)()>(&GorillaTag::InfectionLavaController::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::InfectionLavaController*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::InfectionLavaController::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::InfectionLavaController::*)()>(&GorillaTag::InfectionLavaController::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::InfectionLavaController*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::InfectionLavaController::IGorillaSerializeableScene_OnSceneLinking
// Il2CppName: IGorillaSerializeableScene.OnSceneLinking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::InfectionLavaController::*)(::GlobalNamespace::GorillaSerializerScene*)>(&GorillaTag::InfectionLavaController::IGorillaSerializeableScene_OnSceneLinking)> {
  static const MethodInfo* get() {
    static auto* netObj = &::il2cpp_utils::GetClassFromName("", "GorillaSerializerScene")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::InfectionLavaController*), "IGorillaSerializeableScene.OnSceneLinking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{netObj});
  }
};
// Writing MetadataGetter for method: GorillaTag::InfectionLavaController::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::InfectionLavaController::*)()>(&GorillaTag::InfectionLavaController::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::InfectionLavaController*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::InfectionLavaController::VerifyReferences
// Il2CppName: VerifyReferences
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::InfectionLavaController::*)()>(&GorillaTag::InfectionLavaController::VerifyReferences)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::InfectionLavaController*), "VerifyReferences", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::InfectionLavaController::IfNullThenLogAndDisableSelf
// Il2CppName: IfNullThenLogAndDisableSelf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::InfectionLavaController::*)(::UnityEngine::Object*, ::StringW, int)>(&GorillaTag::InfectionLavaController::IfNullThenLogAndDisableSelf)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("UnityEngine", "Object")->byval_arg;
    static auto* fieldName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::InfectionLavaController*), "IfNullThenLogAndDisableSelf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj, fieldName, index});
  }
};
// Writing MetadataGetter for method: GorillaTag::InfectionLavaController::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::InfectionLavaController::*)()>(&GorillaTag::InfectionLavaController::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::InfectionLavaController*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::InfectionLavaController::ITickSystemPost_get_PostTickRunning
// Il2CppName: ITickSystemPost.get_PostTickRunning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaTag::InfectionLavaController::*)()>(&GorillaTag::InfectionLavaController::ITickSystemPost_get_PostTickRunning)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::InfectionLavaController*), "ITickSystemPost.get_PostTickRunning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::InfectionLavaController::ITickSystemPost_set_PostTickRunning
// Il2CppName: ITickSystemPost.set_PostTickRunning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::InfectionLavaController::*)(bool)>(&GorillaTag::InfectionLavaController::ITickSystemPost_set_PostTickRunning)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::InfectionLavaController*), "ITickSystemPost.set_PostTickRunning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GorillaTag::InfectionLavaController::ITickSystemPost_PostTick
// Il2CppName: ITickSystemPost.PostTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::InfectionLavaController::*)()>(&GorillaTag::InfectionLavaController::ITickSystemPost_PostTick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::InfectionLavaController*), "ITickSystemPost.PostTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::InfectionLavaController::JumpToState
// Il2CppName: JumpToState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::InfectionLavaController::*)(::GorillaTag::InfectionLavaController::RisingLavaState)>(&GorillaTag::InfectionLavaController::JumpToState)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("GorillaTag", "InfectionLavaController/RisingLavaState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::InfectionLavaController*), "JumpToState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state});
  }
};
// Writing MetadataGetter for method: GorillaTag::InfectionLavaController::UpdateReliableState
// Il2CppName: UpdateReliableState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::InfectionLavaController::*)(double, ByRef<::GorillaTag::InfectionLavaController::LavaSyncData>)>(&GorillaTag::InfectionLavaController::UpdateReliableState)> {
  static const MethodInfo* get() {
    static auto* currentTime = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* syncData = &::il2cpp_utils::GetClassFromName("GorillaTag", "InfectionLavaController/LavaSyncData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::InfectionLavaController*), "UpdateReliableState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currentTime, syncData});
  }
};
// Writing MetadataGetter for method: GorillaTag::InfectionLavaController::UpdateLocalState
// Il2CppName: UpdateLocalState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::InfectionLavaController::*)(double, ::GorillaTag::InfectionLavaController::LavaSyncData)>(&GorillaTag::InfectionLavaController::UpdateLocalState)> {
  static const MethodInfo* get() {
    static auto* currentTime = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* syncData = &::il2cpp_utils::GetClassFromName("GorillaTag", "InfectionLavaController/LavaSyncData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::InfectionLavaController*), "UpdateLocalState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currentTime, syncData});
  }
};
// Writing MetadataGetter for method: GorillaTag::InfectionLavaController::UpdateLava
// Il2CppName: UpdateLava
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::InfectionLavaController::*)(float)>(&GorillaTag::InfectionLavaController::UpdateLava)> {
  static const MethodInfo* get() {
    static auto* fillProgress = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::InfectionLavaController*), "UpdateLava", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fillProgress});
  }
};
// Writing MetadataGetter for method: GorillaTag::InfectionLavaController::UpdateVolcanoActivationLava
// Il2CppName: UpdateVolcanoActivationLava
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::InfectionLavaController::*)(float)>(&GorillaTag::InfectionLavaController::UpdateVolcanoActivationLava)> {
  static const MethodInfo* get() {
    static auto* activationProgress = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::InfectionLavaController*), "UpdateVolcanoActivationLava", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{activationProgress});
  }
};
// Writing MetadataGetter for method: GorillaTag::InfectionLavaController::CheckLocalPlayerAgainstLava
// Il2CppName: CheckLocalPlayerAgainstLava
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::InfectionLavaController::*)(double)>(&GorillaTag::InfectionLavaController::CheckLocalPlayerAgainstLava)> {
  static const MethodInfo* get() {
    static auto* currentTime = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::InfectionLavaController*), "CheckLocalPlayerAgainstLava", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currentTime});
  }
};
// Writing MetadataGetter for method: GorillaTag::InfectionLavaController::OnColliderEnteredLava
// Il2CppName: OnColliderEnteredLava
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::InfectionLavaController::*)(::GorillaLocomotion::Swimming::WaterVolume*, ::UnityEngine::Collider*)>(&GorillaTag::InfectionLavaController::OnColliderEnteredLava)> {
  static const MethodInfo* get() {
    static auto* volume = &::il2cpp_utils::GetClassFromName("GorillaLocomotion.Swimming", "WaterVolume")->byval_arg;
    static auto* collider = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::InfectionLavaController*), "OnColliderEnteredLava", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{volume, collider});
  }
};
// Writing MetadataGetter for method: GorillaTag::InfectionLavaController::LocalPlayerInLava
// Il2CppName: LocalPlayerInLava
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::InfectionLavaController::*)(double, bool)>(&GorillaTag::InfectionLavaController::LocalPlayerInLava)> {
  static const MethodInfo* get() {
    static auto* currentTime = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* enteredLavaThisFrame = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::InfectionLavaController*), "LocalPlayerInLava", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currentTime, enteredLavaThisFrame});
  }
};
// Writing MetadataGetter for method: GorillaTag::InfectionLavaController::OnActivationLavaProjectileHit
// Il2CppName: OnActivationLavaProjectileHit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::InfectionLavaController::*)(::GlobalNamespace::SlingshotProjectile*, ::UnityEngine::Collision*)>(&GorillaTag::InfectionLavaController::OnActivationLavaProjectileHit)> {
  static const MethodInfo* get() {
    static auto* projectile = &::il2cpp_utils::GetClassFromName("", "SlingshotProjectile")->byval_arg;
    static auto* collision = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collision")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::InfectionLavaController*), "OnActivationLavaProjectileHit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{projectile, collision});
  }
};
// Writing MetadataGetter for method: GorillaTag::InfectionLavaController::AddLavaRock
// Il2CppName: AddLavaRock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::InfectionLavaController::*)(int)>(&GorillaTag::InfectionLavaController::AddLavaRock)> {
  static const MethodInfo* get() {
    static auto* playerId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::InfectionLavaController*), "AddLavaRock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playerId});
  }
};
// Writing MetadataGetter for method: GorillaTag::InfectionLavaController::AddVoteForVolcanoActivation
// Il2CppName: AddVoteForVolcanoActivation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::InfectionLavaController::*)(int)>(&GorillaTag::InfectionLavaController::AddVoteForVolcanoActivation)> {
  static const MethodInfo* get() {
    static auto* playerId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::InfectionLavaController*), "AddVoteForVolcanoActivation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playerId});
  }
};
// Writing MetadataGetter for method: GorillaTag::InfectionLavaController::RemoveVoteForVolcanoActivation
// Il2CppName: RemoveVoteForVolcanoActivation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::InfectionLavaController::*)(int)>(&GorillaTag::InfectionLavaController::RemoveVoteForVolcanoActivation)> {
  static const MethodInfo* get() {
    static auto* playerId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::InfectionLavaController*), "RemoveVoteForVolcanoActivation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playerId});
  }
};
// Writing MetadataGetter for method: GorillaTag::InfectionLavaController::IGorillaSerializeable_OnSerializeWrite
// Il2CppName: IGorillaSerializeable.OnSerializeWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::InfectionLavaController::*)(::Photon::Pun::PhotonStream*, ::Photon::Pun::PhotonMessageInfo)>(&GorillaTag::InfectionLavaController::IGorillaSerializeable_OnSerializeWrite)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonStream")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::InfectionLavaController*), "IGorillaSerializeable.OnSerializeWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, info});
  }
};
// Writing MetadataGetter for method: GorillaTag::InfectionLavaController::IGorillaSerializeable_OnSerializeRead
// Il2CppName: IGorillaSerializeable.OnSerializeRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::InfectionLavaController::*)(::Photon::Pun::PhotonStream*, ::Photon::Pun::PhotonMessageInfo)>(&GorillaTag::InfectionLavaController::IGorillaSerializeable_OnSerializeRead)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonStream")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::InfectionLavaController*), "IGorillaSerializeable.OnSerializeRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, info});
  }
};
// Writing MetadataGetter for method: GorillaTag::InfectionLavaController::OnPlayerLeftRoom
// Il2CppName: OnPlayerLeftRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::InfectionLavaController::*)(::Photon::Realtime::Player*)>(&GorillaTag::InfectionLavaController::OnPlayerLeftRoom)> {
  static const MethodInfo* get() {
    static auto* otherPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::InfectionLavaController*), "OnPlayerLeftRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{otherPlayer});
  }
};
// Writing MetadataGetter for method: GorillaTag::InfectionLavaController::OnLeftRoom
// Il2CppName: OnLeftRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::InfectionLavaController::*)()>(&GorillaTag::InfectionLavaController::OnLeftRoom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::InfectionLavaController*), "OnLeftRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::InfectionLavaController::IGorillaSerializeableScene_OnNetworkObjectDisable
// Il2CppName: IGorillaSerializeableScene.OnNetworkObjectDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::InfectionLavaController::*)()>(&GorillaTag::InfectionLavaController::IGorillaSerializeableScene_OnNetworkObjectDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::InfectionLavaController*), "IGorillaSerializeableScene.OnNetworkObjectDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::InfectionLavaController::IGorillaSerializeableScene_OnNetworkObjectEnable
// Il2CppName: IGorillaSerializeableScene.OnNetworkObjectEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::InfectionLavaController::*)()>(&GorillaTag::InfectionLavaController::IGorillaSerializeableScene_OnNetworkObjectEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::InfectionLavaController*), "IGorillaSerializeableScene.OnNetworkObjectEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::InfectionLavaController::GorillaTag_GuidedRefs_IGuidedRefReceiverMono_get_GuidedRefsWaitingToResolveCount
// Il2CppName: GorillaTag.GuidedRefs.IGuidedRefReceiverMono.get_GuidedRefsWaitingToResolveCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GorillaTag::InfectionLavaController::*)()>(&GorillaTag::InfectionLavaController::GorillaTag_GuidedRefs_IGuidedRefReceiverMono_get_GuidedRefsWaitingToResolveCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::InfectionLavaController*), "GorillaTag.GuidedRefs.IGuidedRefReceiverMono.get_GuidedRefsWaitingToResolveCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::InfectionLavaController::GorillaTag_GuidedRefs_IGuidedRefReceiverMono_set_GuidedRefsWaitingToResolveCount
// Il2CppName: GorillaTag.GuidedRefs.IGuidedRefReceiverMono.set_GuidedRefsWaitingToResolveCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::InfectionLavaController::*)(int)>(&GorillaTag::InfectionLavaController::GorillaTag_GuidedRefs_IGuidedRefReceiverMono_set_GuidedRefsWaitingToResolveCount)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::InfectionLavaController*), "GorillaTag.GuidedRefs.IGuidedRefReceiverMono.set_GuidedRefsWaitingToResolveCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GorillaTag::InfectionLavaController::GorillaTag_GuidedRefs_IGuidedRefReceiverMono_OnAllGuidedRefsResolved
// Il2CppName: GorillaTag.GuidedRefs.IGuidedRefReceiverMono.OnAllGuidedRefsResolved
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::InfectionLavaController::*)()>(&GorillaTag::InfectionLavaController::GorillaTag_GuidedRefs_IGuidedRefReceiverMono_OnAllGuidedRefsResolved)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::InfectionLavaController*), "GorillaTag.GuidedRefs.IGuidedRefReceiverMono.OnAllGuidedRefsResolved", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::InfectionLavaController::OnGuidedRefTargetDestroyed
// Il2CppName: OnGuidedRefTargetDestroyed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::InfectionLavaController::*)(int)>(&GorillaTag::InfectionLavaController::OnGuidedRefTargetDestroyed)> {
  static const MethodInfo* get() {
    static auto* fieldId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::InfectionLavaController*), "OnGuidedRefTargetDestroyed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fieldId});
  }
};
// Writing MetadataGetter for method: GorillaTag::InfectionLavaController::GorillaTag_GuidedRefs_IGuidedRefObject_GuidedRefInitialize
// Il2CppName: GorillaTag.GuidedRefs.IGuidedRefObject.GuidedRefInitialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::InfectionLavaController::*)()>(&GorillaTag::InfectionLavaController::GorillaTag_GuidedRefs_IGuidedRefObject_GuidedRefInitialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::InfectionLavaController*), "GorillaTag.GuidedRefs.IGuidedRefObject.GuidedRefInitialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::InfectionLavaController::GorillaTag_GuidedRefs_IGuidedRefReceiverMono_GuidedRefTryResolveReference
// Il2CppName: GorillaTag.GuidedRefs.IGuidedRefReceiverMono.GuidedRefTryResolveReference
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaTag::InfectionLavaController::*)(::GorillaTag::GuidedRefs::GuidedRefTryResolveInfo)>(&GorillaTag::InfectionLavaController::GorillaTag_GuidedRefs_IGuidedRefReceiverMono_GuidedRefTryResolveReference)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("GorillaTag.GuidedRefs", "GuidedRefTryResolveInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::InfectionLavaController*), "GorillaTag.GuidedRefs.IGuidedRefReceiverMono.GuidedRefTryResolveReference", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target});
  }
};
// Writing MetadataGetter for method: GorillaTag::InfectionLavaController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GorillaTag::InfectionLavaController::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GorillaTag::InfectionLavaController::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::InfectionLavaController*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::InfectionLavaController::GorillaTag_GuidedRefs_IGuidedRefMonoBehaviour_get_transform
// Il2CppName: GorillaTag.GuidedRefs.IGuidedRefMonoBehaviour.get_transform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (GorillaTag::InfectionLavaController::*)()>(&GorillaTag::InfectionLavaController::GorillaTag_GuidedRefs_IGuidedRefMonoBehaviour_get_transform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::InfectionLavaController*), "GorillaTag.GuidedRefs.IGuidedRefMonoBehaviour.get_transform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::InfectionLavaController::GorillaTag_GuidedRefs_IGuidedRefObject_GetInstanceID
// Il2CppName: GorillaTag.GuidedRefs.IGuidedRefObject.GetInstanceID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GorillaTag::InfectionLavaController::*)()>(&GorillaTag::InfectionLavaController::GorillaTag_GuidedRefs_IGuidedRefObject_GetInstanceID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::InfectionLavaController*), "GorillaTag.GuidedRefs.IGuidedRefObject.GetInstanceID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
