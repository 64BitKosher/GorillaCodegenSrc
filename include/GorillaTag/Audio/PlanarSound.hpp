// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: GorillaTag.Audio
namespace GorillaTag::Audio {
  // Forward declaring type: PlanarSound
  class PlanarSound;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaTag::Audio::PlanarSound);
DEFINE_IL2CPP_ARG_TYPE(::GorillaTag::Audio::PlanarSound*, "GorillaTag.Audio", "PlanarSound");
// Type namespace: GorillaTag.Audio
namespace GorillaTag::Audio {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: GorillaTag.Audio.PlanarSound
  // [TokenAttribute] Offset: FFFFFFFF
  class PlanarSound : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.Transform cameraXform
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Transform* cameraXform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private System.Boolean hasCamera
    // Size: 0x1
    // Offset: 0x28
    bool hasCamera;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean limitDistance
    // Size: 0x1
    // Offset: 0x29
    bool limitDistance;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: limitDistance and: maxDistance
    char __padding2[0x2] = {};
    // private System.Single maxDistance
    // Size: 0x4
    // Offset: 0x2C
    float maxDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: private UnityEngine.Transform cameraXform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_cameraXform();
    // Get instance field reference: private System.Boolean hasCamera
    [[deprecated("Use field access instead!")]] bool& dyn_hasCamera();
    // Get instance field reference: private System.Boolean limitDistance
    [[deprecated("Use field access instead!")]] bool& dyn_limitDistance();
    // Get instance field reference: private System.Single maxDistance
    [[deprecated("Use field access instead!")]] float& dyn_maxDistance();
    // protected System.Void OnEnable()
    // Offset: 0x28ADAB0
    void OnEnable();
    // protected System.Void LateUpdate()
    // Offset: 0x28ADB54
    void LateUpdate();
    // public System.Void .ctor()
    // Offset: 0x28ADCD0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PlanarSound* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaTag::Audio::PlanarSound::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PlanarSound*, creationType>()));
    }
  }; // GorillaTag.Audio.PlanarSound
  #pragma pack(pop)
  static check_size<sizeof(PlanarSound), 44 + sizeof(float)> __GorillaTag_Audio_PlanarSoundSizeCheck;
  static_assert(sizeof(PlanarSound) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaTag::Audio::PlanarSound::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Audio::PlanarSound::*)()>(&GorillaTag::Audio::PlanarSound::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Audio::PlanarSound*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Audio::PlanarSound::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Audio::PlanarSound::*)()>(&GorillaTag::Audio::PlanarSound::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Audio::PlanarSound*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Audio::PlanarSound::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
