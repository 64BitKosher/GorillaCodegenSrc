// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Voice.IProcessor`1
#include "Photon/Voice/IProcessor_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GorillaTag::Audio
namespace GorillaTag::Audio {
  // Forward declaring type: VoiceToLoudness
  class VoiceToLoudness;
}
// Completed forward declares
// Type namespace: GorillaTag.Audio
namespace GorillaTag::Audio {
  // Forward declaring type: ProcessVoiceDataToLoudness
  class ProcessVoiceDataToLoudness;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaTag::Audio::ProcessVoiceDataToLoudness);
DEFINE_IL2CPP_ARG_TYPE(::GorillaTag::Audio::ProcessVoiceDataToLoudness*, "GorillaTag.Audio", "ProcessVoiceDataToLoudness");
// Type namespace: GorillaTag.Audio
namespace GorillaTag::Audio {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: GorillaTag.Audio.ProcessVoiceDataToLoudness
  // [TokenAttribute] Offset: FFFFFFFF
  class ProcessVoiceDataToLoudness : public ::Il2CppObject/*, public ::Photon::Voice::IProcessor_1<float>*/ {
    public:
    public:
    // private GorillaTag.Audio.VoiceToLoudness _voiceToLoudness
    // Size: 0x8
    // Offset: 0x10
    ::GorillaTag::Audio::VoiceToLoudness* voiceToLoudness;
    // Field size check
    static_assert(sizeof(::GorillaTag::Audio::VoiceToLoudness*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Photon::Voice::IProcessor_1<float>
    operator ::Photon::Voice::IProcessor_1<float>() noexcept {
      return *reinterpret_cast<::Photon::Voice::IProcessor_1<float>*>(this);
    }
    // Creating conversion operator: operator ::GorillaTag::Audio::VoiceToLoudness*
    constexpr operator ::GorillaTag::Audio::VoiceToLoudness*() const noexcept {
      return voiceToLoudness;
    }
    // Get instance field reference: private GorillaTag.Audio.VoiceToLoudness _voiceToLoudness
    [[deprecated("Use field access instead!")]] ::GorillaTag::Audio::VoiceToLoudness*& dyn__voiceToLoudness();
    // public System.Void .ctor(GorillaTag.Audio.VoiceToLoudness voiceToLoudness)
    // Offset: 0x28ADE90
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ProcessVoiceDataToLoudness* New_ctor(::GorillaTag::Audio::VoiceToLoudness* voiceToLoudness) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaTag::Audio::ProcessVoiceDataToLoudness::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ProcessVoiceDataToLoudness*, creationType>(voiceToLoudness)));
    }
    // public System.Single[] Process(System.Single[] buf)
    // Offset: 0x28ADEC8
    ::ArrayW<float> Process(::ArrayW<float> buf);
    // public System.Void Dispose()
    // Offset: 0x28ADF3C
    void Dispose();
  }; // GorillaTag.Audio.ProcessVoiceDataToLoudness
  #pragma pack(pop)
  static check_size<sizeof(ProcessVoiceDataToLoudness), 16 + sizeof(::GorillaTag::Audio::VoiceToLoudness*)> __GorillaTag_Audio_ProcessVoiceDataToLoudnessSizeCheck;
  static_assert(sizeof(ProcessVoiceDataToLoudness) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaTag::Audio::ProcessVoiceDataToLoudness::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GorillaTag::Audio::ProcessVoiceDataToLoudness::Process
// Il2CppName: Process
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<float> (GorillaTag::Audio::ProcessVoiceDataToLoudness::*)(::ArrayW<float>)>(&GorillaTag::Audio::ProcessVoiceDataToLoudness::Process)> {
  static const MethodInfo* get() {
    static auto* buf = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Audio::ProcessVoiceDataToLoudness*), "Process", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buf});
  }
};
// Writing MetadataGetter for method: GorillaTag::Audio::ProcessVoiceDataToLoudness::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Audio::ProcessVoiceDataToLoudness::*)()>(&GorillaTag::Audio::ProcessVoiceDataToLoudness::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Audio::ProcessVoiceDataToLoudness*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
