// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Voice::Unity
namespace Photon::Voice::Unity {
  // Forward declaring type: Recorder
  class Recorder;
  // Forward declaring type: PhotonVoiceCreatedParams
  class PhotonVoiceCreatedParams;
}
// Completed forward declares
// Type namespace: GorillaTag.Audio
namespace GorillaTag::Audio {
  // Forward declaring type: VoiceToLoudness
  class VoiceToLoudness;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaTag::Audio::VoiceToLoudness);
DEFINE_IL2CPP_ARG_TYPE(::GorillaTag::Audio::VoiceToLoudness*, "GorillaTag.Audio", "VoiceToLoudness");
// Type namespace: GorillaTag.Audio
namespace GorillaTag::Audio {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: GorillaTag.Audio.VoiceToLoudness
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: FFFFFFFF
  class VoiceToLoudness : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.Single loudness
    // Size: 0x4
    // Offset: 0x20
    float loudness;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: loudness and: recorder
    char __padding0[0x4] = {};
    // private Photon.Voice.Unity.Recorder _recorder
    // Size: 0x8
    // Offset: 0x28
    ::Photon::Voice::Unity::Recorder* recorder;
    // Field size check
    static_assert(sizeof(::Photon::Voice::Unity::Recorder*) == 0x8);
    public:
    // Get instance field reference: public System.Single loudness
    [[deprecated("Use field access instead!")]] float& dyn_loudness();
    // Get instance field reference: private Photon.Voice.Unity.Recorder _recorder
    [[deprecated("Use field access instead!")]] ::Photon::Voice::Unity::Recorder*& dyn__recorder();
    // protected System.Void Awake()
    // Offset: 0x28ADCE0
    void Awake();
    // protected System.Void PhotonVoiceCreated(Photon.Voice.Unity.PhotonVoiceCreatedParams photonVoiceCreatedParams)
    // Offset: 0x28ADD38
    void PhotonVoiceCreated(::Photon::Voice::Unity::PhotonVoiceCreatedParams* photonVoiceCreatedParams);
    // public System.Void .ctor()
    // Offset: 0x28ADEC0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VoiceToLoudness* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaTag::Audio::VoiceToLoudness::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VoiceToLoudness*, creationType>()));
    }
  }; // GorillaTag.Audio.VoiceToLoudness
  #pragma pack(pop)
  static check_size<sizeof(VoiceToLoudness), 40 + sizeof(::Photon::Voice::Unity::Recorder*)> __GorillaTag_Audio_VoiceToLoudnessSizeCheck;
  static_assert(sizeof(VoiceToLoudness) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaTag::Audio::VoiceToLoudness::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Audio::VoiceToLoudness::*)()>(&GorillaTag::Audio::VoiceToLoudness::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Audio::VoiceToLoudness*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Audio::VoiceToLoudness::PhotonVoiceCreated
// Il2CppName: PhotonVoiceCreated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Audio::VoiceToLoudness::*)(::Photon::Voice::Unity::PhotonVoiceCreatedParams*)>(&GorillaTag::Audio::VoiceToLoudness::PhotonVoiceCreated)> {
  static const MethodInfo* get() {
    static auto* photonVoiceCreatedParams = &::il2cpp_utils::GetClassFromName("Photon.Voice.Unity", "PhotonVoiceCreatedParams")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Audio::VoiceToLoudness*), "PhotonVoiceCreated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{photonVoiceCreatedParams});
  }
};
// Writing MetadataGetter for method: GorillaTag::Audio::VoiceToLoudness::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
