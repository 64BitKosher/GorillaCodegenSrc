// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: GorillaTag.GuidedRefs.BaseGuidedRefTargetMono
#include "GorillaTag/GuidedRefs/BaseGuidedRefTargetMono.hpp"
// Including type: UnityEngine.ParticleSystem/EmissionModule
#include "UnityEngine/ParticleSystem_EmissionModule.hpp"
// Including type: UnityEngine.ParticleSystem/MainModule
#include "UnityEngine/ParticleSystem_MainModule.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GorillaTag
namespace GorillaTag {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: AudioClip
  class AudioClip;
  // Skipping declaration: ParticleSystem because it is already included!
  // Skipping declaration: Object because it is already included!
}
// Completed forward declares
// Type namespace: GorillaTag
namespace GorillaTag {
  // Forward declaring type: VolcanoEffects
  class VolcanoEffects;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaTag::VolcanoEffects);
DEFINE_IL2CPP_ARG_TYPE(::GorillaTag::VolcanoEffects*, "GorillaTag", "VolcanoEffects");
// Type namespace: GorillaTag
namespace GorillaTag {
  // Size: 0xF6
  #pragma pack(push, 1)
  // Autogenerated type: GorillaTag.VolcanoEffects
  // [TokenAttribute] Offset: FFFFFFFF
  class VolcanoEffects : public ::GorillaTag::GuidedRefs::BaseGuidedRefTargetMono {
    public:
    // Writing base type padding for base size: 0x31 to desired offset: 0x38
    char ___base_padding[0x7] = {};
    // Nested type: ::GorillaTag::VolcanoEffects::LavaStateFX
    class LavaStateFX;
    public:
    // private System.Boolean applyShaderGlobals
    // Size: 0x1
    // Offset: 0x38
    bool applyShaderGlobals;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: applyShaderGlobals and: forestSpeakerAudioSrc
    char __padding0[0x7] = {};
    // private UnityEngine.AudioSource forestSpeakerAudioSrc
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::AudioSource* forestSpeakerAudioSrc;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // private UnityEngine.AudioClip warnVolcanoBellyEmptied
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::AudioClip* warnVolcanoBellyEmptied;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // private UnityEngine.AudioSource volcanoAudioSource
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::AudioSource* volcanoAudioSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // private UnityEngine.AudioClip volcanoAcceptStone
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::AudioClip* volcanoAcceptStone;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // private UnityEngine.AudioClip volcanoAcceptLastStone
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::AudioClip* volcanoAcceptLastStone;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // private UnityEngine.AudioSource[] lavaSurfaceAudioSrcs
    // Size: 0x8
    // Offset: 0x68
    ::ArrayW<::UnityEngine::AudioSource*> lavaSurfaceAudioSrcs;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::AudioSource*>) == 0x8);
    // private UnityEngine.ParticleSystem[] lavaSpewParticleSystems
    // Size: 0x8
    // Offset: 0x70
    ::ArrayW<::UnityEngine::ParticleSystem*> lavaSpewParticleSystems;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::ParticleSystem*>) == 0x8);
    // private UnityEngine.ParticleSystem[] smokeParticleSystems
    // Size: 0x8
    // Offset: 0x78
    ::ArrayW<::UnityEngine::ParticleSystem*> smokeParticleSystems;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::ParticleSystem*>) == 0x8);
    // private GorillaTag.VolcanoEffects/LavaStateFX drainedStateFX
    // Size: 0x8
    // Offset: 0x80
    ::GorillaTag::VolcanoEffects::LavaStateFX* drainedStateFX;
    // Field size check
    static_assert(sizeof(::GorillaTag::VolcanoEffects::LavaStateFX*) == 0x8);
    // private GorillaTag.VolcanoEffects/LavaStateFX eruptingStateFX
    // Size: 0x8
    // Offset: 0x88
    ::GorillaTag::VolcanoEffects::LavaStateFX* eruptingStateFX;
    // Field size check
    static_assert(sizeof(::GorillaTag::VolcanoEffects::LavaStateFX*) == 0x8);
    // private GorillaTag.VolcanoEffects/LavaStateFX risingStateFX
    // Size: 0x8
    // Offset: 0x90
    ::GorillaTag::VolcanoEffects::LavaStateFX* risingStateFX;
    // Field size check
    static_assert(sizeof(::GorillaTag::VolcanoEffects::LavaStateFX*) == 0x8);
    // private GorillaTag.VolcanoEffects/LavaStateFX fullStateFX
    // Size: 0x8
    // Offset: 0x98
    ::GorillaTag::VolcanoEffects::LavaStateFX* fullStateFX;
    // Field size check
    static_assert(sizeof(::GorillaTag::VolcanoEffects::LavaStateFX*) == 0x8);
    // private GorillaTag.VolcanoEffects/LavaStateFX drainingStateFX
    // Size: 0x8
    // Offset: 0xA0
    ::GorillaTag::VolcanoEffects::LavaStateFX* drainingStateFX;
    // Field size check
    static_assert(sizeof(::GorillaTag::VolcanoEffects::LavaStateFX*) == 0x8);
    // private GorillaTag.VolcanoEffects/LavaStateFX currentStateFX
    // Size: 0x8
    // Offset: 0xA8
    ::GorillaTag::VolcanoEffects::LavaStateFX* currentStateFX;
    // Field size check
    static_assert(sizeof(::GorillaTag::VolcanoEffects::LavaStateFX*) == 0x8);
    // private UnityEngine.ParticleSystem/EmissionModule[] lavaSpewEmissionModules
    // Size: 0x8
    // Offset: 0xB0
    ::ArrayW<::UnityEngine::ParticleSystem::EmissionModule> lavaSpewEmissionModules;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::ParticleSystem::EmissionModule>) == 0x8);
    // private System.Single[] lavaSpewEmissionDefaultRateMultipliers
    // Size: 0x8
    // Offset: 0xB8
    ::ArrayW<float> lavaSpewEmissionDefaultRateMultipliers;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // private UnityEngine.ParticleSystem/Burst[][] lavaSpewDefaultEmitBursts
    // Size: 0x8
    // Offset: 0xC0
    ::ArrayW<::ArrayW<::UnityEngine::ParticleSystem::Burst>> lavaSpewDefaultEmitBursts;
    // Field size check
    static_assert(sizeof(::ArrayW<::ArrayW<::UnityEngine::ParticleSystem::Burst>>) == 0x8);
    // private UnityEngine.ParticleSystem/Burst[][] lavaSpewAdjustedEmitBursts
    // Size: 0x8
    // Offset: 0xC8
    ::ArrayW<::ArrayW<::UnityEngine::ParticleSystem::Burst>> lavaSpewAdjustedEmitBursts;
    // Field size check
    static_assert(sizeof(::ArrayW<::ArrayW<::UnityEngine::ParticleSystem::Burst>>) == 0x8);
    // private UnityEngine.ParticleSystem/MainModule[] smokeMainModules
    // Size: 0x8
    // Offset: 0xD0
    ::ArrayW<::UnityEngine::ParticleSystem::MainModule> smokeMainModules;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::ParticleSystem::MainModule>) == 0x8);
    // private UnityEngine.ParticleSystem/EmissionModule[] smokeEmissionModules
    // Size: 0x8
    // Offset: 0xD8
    ::ArrayW<::UnityEngine::ParticleSystem::EmissionModule> smokeEmissionModules;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::ParticleSystem::EmissionModule>) == 0x8);
    // private System.Single[] smokeEmissionDefaultRateMultipliers
    // Size: 0x8
    // Offset: 0xE0
    ::ArrayW<float> smokeEmissionDefaultRateMultipliers;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // private System.Int32 shaderProp_ZoneLiquidLightColor
    // Size: 0x4
    // Offset: 0xE8
    int shaderProp_ZoneLiquidLightColor;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 shaderProp_ZoneLiquidLightDistScale
    // Size: 0x4
    // Offset: 0xEC
    int shaderProp_ZoneLiquidLightDistScale;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single timeVolcanoBellyWasLastEmpty
    // Size: 0x4
    // Offset: 0xF0
    float timeVolcanoBellyWasLastEmpty;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean hasVolcanoAudioSrc
    // Size: 0x1
    // Offset: 0xF4
    bool hasVolcanoAudioSrc;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean hasForestSpeakerAudioSrc
    // Size: 0x1
    // Offset: 0xF5
    bool hasForestSpeakerAudioSrc;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private System.Boolean applyShaderGlobals
    [[deprecated("Use field access instead!")]] bool& dyn_applyShaderGlobals();
    // Get instance field reference: private UnityEngine.AudioSource forestSpeakerAudioSrc
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_forestSpeakerAudioSrc();
    // Get instance field reference: private UnityEngine.AudioClip warnVolcanoBellyEmptied
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_warnVolcanoBellyEmptied();
    // Get instance field reference: private UnityEngine.AudioSource volcanoAudioSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_volcanoAudioSource();
    // Get instance field reference: private UnityEngine.AudioClip volcanoAcceptStone
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_volcanoAcceptStone();
    // Get instance field reference: private UnityEngine.AudioClip volcanoAcceptLastStone
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_volcanoAcceptLastStone();
    // Get instance field reference: private UnityEngine.AudioSource[] lavaSurfaceAudioSrcs
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::AudioSource*>& dyn_lavaSurfaceAudioSrcs();
    // Get instance field reference: private UnityEngine.ParticleSystem[] lavaSpewParticleSystems
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::ParticleSystem*>& dyn_lavaSpewParticleSystems();
    // Get instance field reference: private UnityEngine.ParticleSystem[] smokeParticleSystems
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::ParticleSystem*>& dyn_smokeParticleSystems();
    // Get instance field reference: private GorillaTag.VolcanoEffects/LavaStateFX drainedStateFX
    [[deprecated("Use field access instead!")]] ::GorillaTag::VolcanoEffects::LavaStateFX*& dyn_drainedStateFX();
    // Get instance field reference: private GorillaTag.VolcanoEffects/LavaStateFX eruptingStateFX
    [[deprecated("Use field access instead!")]] ::GorillaTag::VolcanoEffects::LavaStateFX*& dyn_eruptingStateFX();
    // Get instance field reference: private GorillaTag.VolcanoEffects/LavaStateFX risingStateFX
    [[deprecated("Use field access instead!")]] ::GorillaTag::VolcanoEffects::LavaStateFX*& dyn_risingStateFX();
    // Get instance field reference: private GorillaTag.VolcanoEffects/LavaStateFX fullStateFX
    [[deprecated("Use field access instead!")]] ::GorillaTag::VolcanoEffects::LavaStateFX*& dyn_fullStateFX();
    // Get instance field reference: private GorillaTag.VolcanoEffects/LavaStateFX drainingStateFX
    [[deprecated("Use field access instead!")]] ::GorillaTag::VolcanoEffects::LavaStateFX*& dyn_drainingStateFX();
    // Get instance field reference: private GorillaTag.VolcanoEffects/LavaStateFX currentStateFX
    [[deprecated("Use field access instead!")]] ::GorillaTag::VolcanoEffects::LavaStateFX*& dyn_currentStateFX();
    // Get instance field reference: private UnityEngine.ParticleSystem/EmissionModule[] lavaSpewEmissionModules
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::ParticleSystem::EmissionModule>& dyn_lavaSpewEmissionModules();
    // Get instance field reference: private System.Single[] lavaSpewEmissionDefaultRateMultipliers
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_lavaSpewEmissionDefaultRateMultipliers();
    // Get instance field reference: private UnityEngine.ParticleSystem/Burst[][] lavaSpewDefaultEmitBursts
    [[deprecated("Use field access instead!")]] ::ArrayW<::ArrayW<::UnityEngine::ParticleSystem::Burst>>& dyn_lavaSpewDefaultEmitBursts();
    // Get instance field reference: private UnityEngine.ParticleSystem/Burst[][] lavaSpewAdjustedEmitBursts
    [[deprecated("Use field access instead!")]] ::ArrayW<::ArrayW<::UnityEngine::ParticleSystem::Burst>>& dyn_lavaSpewAdjustedEmitBursts();
    // Get instance field reference: private UnityEngine.ParticleSystem/MainModule[] smokeMainModules
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::ParticleSystem::MainModule>& dyn_smokeMainModules();
    // Get instance field reference: private UnityEngine.ParticleSystem/EmissionModule[] smokeEmissionModules
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::ParticleSystem::EmissionModule>& dyn_smokeEmissionModules();
    // Get instance field reference: private System.Single[] smokeEmissionDefaultRateMultipliers
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_smokeEmissionDefaultRateMultipliers();
    // Get instance field reference: private System.Int32 shaderProp_ZoneLiquidLightColor
    [[deprecated("Use field access instead!")]] int& dyn_shaderProp_ZoneLiquidLightColor();
    // Get instance field reference: private System.Int32 shaderProp_ZoneLiquidLightDistScale
    [[deprecated("Use field access instead!")]] int& dyn_shaderProp_ZoneLiquidLightDistScale();
    // Get instance field reference: private System.Single timeVolcanoBellyWasLastEmpty
    [[deprecated("Use field access instead!")]] float& dyn_timeVolcanoBellyWasLastEmpty();
    // Get instance field reference: private System.Boolean hasVolcanoAudioSrc
    [[deprecated("Use field access instead!")]] bool& dyn_hasVolcanoAudioSrc();
    // Get instance field reference: private System.Boolean hasForestSpeakerAudioSrc
    [[deprecated("Use field access instead!")]] bool& dyn_hasForestSpeakerAudioSrc();
    // public System.Void OnVolcanoBellyEmpty()
    // Offset: 0x287F654
    void OnVolcanoBellyEmpty();
    // public System.Void OnStoneAccepted(System.Double activationProgress)
    // Offset: 0x287FC8C
    void OnStoneAccepted(double activationProgress);
    // private System.Void InitState(GorillaTag.VolcanoEffects/LavaStateFX fx)
    // Offset: 0x2889540
    void InitState(::GorillaTag::VolcanoEffects::LavaStateFX* fx);
    // private System.Void SetLavaAudioEnabled(System.Boolean toEnable)
    // Offset: 0x2889670
    void SetLavaAudioEnabled(bool toEnable);
    // private System.Void SetLavaAudioEnabled(System.Boolean toEnable, System.Single volume)
    // Offset: 0x28896E4
    void SetLavaAudioEnabled(bool toEnable, float volume);
    // private System.Void ResetState()
    // Offset: 0x2889780
    void ResetState();
    // private System.Void UpdateState(System.Single time, System.Single timeRemaining, System.Single progress)
    // Offset: 0x2889860
    void UpdateState(float time, float timeRemaining, float progress);
    // public System.Void SetDrainedState()
    // Offset: 0x287F598
    void SetDrainedState();
    // public System.Void UpdateDrainedState(System.Single time)
    // Offset: 0x287F6E4
    void UpdateDrainedState(float time);
    // public System.Void SetEruptingState()
    // Offset: 0x287F5C4
    void SetEruptingState();
    // public System.Void UpdateEruptingState(System.Single time, System.Single timeRemaining, System.Single progress)
    // Offset: 0x287F71C
    void UpdateEruptingState(float time, float timeRemaining, float progress);
    // public System.Void SetRisingState()
    // Offset: 0x287F5F4
    void SetRisingState();
    // public System.Void UpdateRisingState(System.Single time, System.Single timeRemaining, System.Single progress)
    // Offset: 0x287F720
    void UpdateRisingState(float time, float timeRemaining, float progress);
    // public System.Void SetFullState()
    // Offset: 0x287F624
    void SetFullState();
    // public System.Void UpdateFullState(System.Single time, System.Single timeRemaining, System.Single progress)
    // Offset: 0x287F7B4
    void UpdateFullState(float time, float timeRemaining, float progress);
    // public System.Void SetDrainingState()
    // Offset: 0x287F568
    void SetDrainingState();
    // public System.Void UpdateDrainingState(System.Single time, System.Single timeRemaining, System.Single progress)
    // Offset: 0x287F7B8
    void UpdateDrainingState(float time, float timeRemaining, float progress);
    // private System.Void SetParticleEmissionRateAndBurst(System.Single multiplier, UnityEngine.ParticleSystem/EmissionModule[] emissionModules, System.Single[] defaultRateMultipliers, UnityEngine.ParticleSystem/Burst[][] defaultEmitBursts, UnityEngine.ParticleSystem/Burst[][] adjustedEmitBursts)
    // Offset: 0x2889CB4
    void SetParticleEmissionRateAndBurst(float multiplier, ::ArrayW<::UnityEngine::ParticleSystem::EmissionModule> emissionModules, ::ArrayW<float> defaultRateMultipliers, ::ArrayW<::ArrayW<::UnityEngine::ParticleSystem::Burst>> defaultEmitBursts, ::ArrayW<::ArrayW<::UnityEngine::ParticleSystem::Burst>> adjustedEmitBursts);
    // private System.Boolean RemoveNullsFromArray(ref T[] array)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    bool RemoveNullsFromArray(ByRef<::ArrayW<T>> array) {
      static_assert(std::is_convertible_v<T, ::UnityEngine::Object*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaTag::VolcanoEffects::RemoveNullsFromArray");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveNullsFromArray", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___generic__method, byref(array));
    }
    // private System.Void LogNullsFoundInArray(System.String nameOfArray)
    // Offset: 0x288939C
    void LogNullsFoundInArray(::StringW nameOfArray);
    // protected override System.Void Awake()
    // Offset: 0x2888BF4
    // Implemented from: GorillaTag.GuidedRefs.BaseGuidedRefTargetMono
    // Base method: System.Void BaseGuidedRefTargetMono::Awake()
    void Awake();
    // public System.Void .ctor()
    // Offset: 0x2889E80
    // Implemented from: GorillaTag.GuidedRefs.BaseGuidedRefTargetMono
    // Base method: System.Void BaseGuidedRefTargetMono::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VolcanoEffects* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaTag::VolcanoEffects::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VolcanoEffects*, creationType>()));
    }
  }; // GorillaTag.VolcanoEffects
  #pragma pack(pop)
  static check_size<sizeof(VolcanoEffects), 245 + sizeof(bool)> __GorillaTag_VolcanoEffectsSizeCheck;
  static_assert(sizeof(VolcanoEffects) == 0xF6);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaTag::VolcanoEffects::OnVolcanoBellyEmpty
// Il2CppName: OnVolcanoBellyEmpty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::VolcanoEffects::*)()>(&GorillaTag::VolcanoEffects::OnVolcanoBellyEmpty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::VolcanoEffects*), "OnVolcanoBellyEmpty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::VolcanoEffects::OnStoneAccepted
// Il2CppName: OnStoneAccepted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::VolcanoEffects::*)(double)>(&GorillaTag::VolcanoEffects::OnStoneAccepted)> {
  static const MethodInfo* get() {
    static auto* activationProgress = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::VolcanoEffects*), "OnStoneAccepted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{activationProgress});
  }
};
// Writing MetadataGetter for method: GorillaTag::VolcanoEffects::InitState
// Il2CppName: InitState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::VolcanoEffects::*)(::GorillaTag::VolcanoEffects::LavaStateFX*)>(&GorillaTag::VolcanoEffects::InitState)> {
  static const MethodInfo* get() {
    static auto* fx = &::il2cpp_utils::GetClassFromName("GorillaTag", "VolcanoEffects/LavaStateFX")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::VolcanoEffects*), "InitState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fx});
  }
};
// Writing MetadataGetter for method: GorillaTag::VolcanoEffects::SetLavaAudioEnabled
// Il2CppName: SetLavaAudioEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::VolcanoEffects::*)(bool)>(&GorillaTag::VolcanoEffects::SetLavaAudioEnabled)> {
  static const MethodInfo* get() {
    static auto* toEnable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::VolcanoEffects*), "SetLavaAudioEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{toEnable});
  }
};
// Writing MetadataGetter for method: GorillaTag::VolcanoEffects::SetLavaAudioEnabled
// Il2CppName: SetLavaAudioEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::VolcanoEffects::*)(bool, float)>(&GorillaTag::VolcanoEffects::SetLavaAudioEnabled)> {
  static const MethodInfo* get() {
    static auto* toEnable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* volume = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::VolcanoEffects*), "SetLavaAudioEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{toEnable, volume});
  }
};
// Writing MetadataGetter for method: GorillaTag::VolcanoEffects::ResetState
// Il2CppName: ResetState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::VolcanoEffects::*)()>(&GorillaTag::VolcanoEffects::ResetState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::VolcanoEffects*), "ResetState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::VolcanoEffects::UpdateState
// Il2CppName: UpdateState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::VolcanoEffects::*)(float, float, float)>(&GorillaTag::VolcanoEffects::UpdateState)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* timeRemaining = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* progress = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::VolcanoEffects*), "UpdateState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, timeRemaining, progress});
  }
};
// Writing MetadataGetter for method: GorillaTag::VolcanoEffects::SetDrainedState
// Il2CppName: SetDrainedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::VolcanoEffects::*)()>(&GorillaTag::VolcanoEffects::SetDrainedState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::VolcanoEffects*), "SetDrainedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::VolcanoEffects::UpdateDrainedState
// Il2CppName: UpdateDrainedState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::VolcanoEffects::*)(float)>(&GorillaTag::VolcanoEffects::UpdateDrainedState)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::VolcanoEffects*), "UpdateDrainedState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time});
  }
};
// Writing MetadataGetter for method: GorillaTag::VolcanoEffects::SetEruptingState
// Il2CppName: SetEruptingState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::VolcanoEffects::*)()>(&GorillaTag::VolcanoEffects::SetEruptingState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::VolcanoEffects*), "SetEruptingState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::VolcanoEffects::UpdateEruptingState
// Il2CppName: UpdateEruptingState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::VolcanoEffects::*)(float, float, float)>(&GorillaTag::VolcanoEffects::UpdateEruptingState)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* timeRemaining = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* progress = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::VolcanoEffects*), "UpdateEruptingState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, timeRemaining, progress});
  }
};
// Writing MetadataGetter for method: GorillaTag::VolcanoEffects::SetRisingState
// Il2CppName: SetRisingState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::VolcanoEffects::*)()>(&GorillaTag::VolcanoEffects::SetRisingState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::VolcanoEffects*), "SetRisingState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::VolcanoEffects::UpdateRisingState
// Il2CppName: UpdateRisingState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::VolcanoEffects::*)(float, float, float)>(&GorillaTag::VolcanoEffects::UpdateRisingState)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* timeRemaining = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* progress = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::VolcanoEffects*), "UpdateRisingState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, timeRemaining, progress});
  }
};
// Writing MetadataGetter for method: GorillaTag::VolcanoEffects::SetFullState
// Il2CppName: SetFullState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::VolcanoEffects::*)()>(&GorillaTag::VolcanoEffects::SetFullState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::VolcanoEffects*), "SetFullState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::VolcanoEffects::UpdateFullState
// Il2CppName: UpdateFullState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::VolcanoEffects::*)(float, float, float)>(&GorillaTag::VolcanoEffects::UpdateFullState)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* timeRemaining = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* progress = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::VolcanoEffects*), "UpdateFullState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, timeRemaining, progress});
  }
};
// Writing MetadataGetter for method: GorillaTag::VolcanoEffects::SetDrainingState
// Il2CppName: SetDrainingState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::VolcanoEffects::*)()>(&GorillaTag::VolcanoEffects::SetDrainingState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::VolcanoEffects*), "SetDrainingState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::VolcanoEffects::UpdateDrainingState
// Il2CppName: UpdateDrainingState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::VolcanoEffects::*)(float, float, float)>(&GorillaTag::VolcanoEffects::UpdateDrainingState)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* timeRemaining = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* progress = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::VolcanoEffects*), "UpdateDrainingState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, timeRemaining, progress});
  }
};
// Writing MetadataGetter for method: GorillaTag::VolcanoEffects::SetParticleEmissionRateAndBurst
// Il2CppName: SetParticleEmissionRateAndBurst
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::VolcanoEffects::*)(float, ::ArrayW<::UnityEngine::ParticleSystem::EmissionModule>, ::ArrayW<float>, ::ArrayW<::ArrayW<::UnityEngine::ParticleSystem::Burst>>, ::ArrayW<::ArrayW<::UnityEngine::ParticleSystem::Burst>>)>(&GorillaTag::VolcanoEffects::SetParticleEmissionRateAndBurst)> {
  static const MethodInfo* get() {
    static auto* multiplier = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* emissionModules = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem/EmissionModule"), 1)->byval_arg;
    static auto* defaultRateMultipliers = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* defaultEmitBursts = &il2cpp_functions::array_class_get(il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem/Burst"), 1), 1)->byval_arg;
    static auto* adjustedEmitBursts = &il2cpp_functions::array_class_get(il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "ParticleSystem/Burst"), 1), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::VolcanoEffects*), "SetParticleEmissionRateAndBurst", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{multiplier, emissionModules, defaultRateMultipliers, defaultEmitBursts, adjustedEmitBursts});
  }
};
// Writing MetadataGetter for method: GorillaTag::VolcanoEffects::RemoveNullsFromArray
// Il2CppName: RemoveNullsFromArray
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GorillaTag::VolcanoEffects::LogNullsFoundInArray
// Il2CppName: LogNullsFoundInArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::VolcanoEffects::*)(::StringW)>(&GorillaTag::VolcanoEffects::LogNullsFoundInArray)> {
  static const MethodInfo* get() {
    static auto* nameOfArray = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::VolcanoEffects*), "LogNullsFoundInArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nameOfArray});
  }
};
// Writing MetadataGetter for method: GorillaTag::VolcanoEffects::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::VolcanoEffects::*)()>(&GorillaTag::VolcanoEffects::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::VolcanoEffects*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::VolcanoEffects::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
