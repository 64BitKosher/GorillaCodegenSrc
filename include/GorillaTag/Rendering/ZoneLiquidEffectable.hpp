// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Renderer
  class Renderer;
}
// Completed forward declares
// Type namespace: GorillaTag.Rendering
namespace GorillaTag::Rendering {
  // Forward declaring type: ZoneLiquidEffectable
  class ZoneLiquidEffectable;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaTag::Rendering::ZoneLiquidEffectable);
DEFINE_IL2CPP_ARG_TYPE(::GorillaTag::Rendering::ZoneLiquidEffectable*, "GorillaTag.Rendering", "ZoneLiquidEffectable");
// Type namespace: GorillaTag.Rendering
namespace GorillaTag::Rendering {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: GorillaTag.Rendering.ZoneLiquidEffectable
  // [TokenAttribute] Offset: FFFFFFFF
  class ZoneLiquidEffectable : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.Single radius
    // Size: 0x4
    // Offset: 0x20
    float radius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean inLiquidVolume
    // Size: 0x1
    // Offset: 0x24
    bool inLiquidVolume;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean wasInLiquidVolume
    // Size: 0x1
    // Offset: 0x25
    bool wasInLiquidVolume;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: wasInLiquidVolume and: childRenderers
    char __padding2[0x2] = {};
    // public UnityEngine.Renderer[] childRenderers
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::UnityEngine::Renderer*> childRenderers;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Renderer*>) == 0x8);
    public:
    // Get instance field reference: public System.Single radius
    [[deprecated("Use field access instead!")]] float& dyn_radius();
    // Get instance field reference: public System.Boolean inLiquidVolume
    [[deprecated("Use field access instead!")]] bool& dyn_inLiquidVolume();
    // Get instance field reference: public System.Boolean wasInLiquidVolume
    [[deprecated("Use field access instead!")]] bool& dyn_wasInLiquidVolume();
    // Get instance field reference: public UnityEngine.Renderer[] childRenderers
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Renderer*>& dyn_childRenderers();
    // private System.Void Awake()
    // Offset: 0x28AF1E4
    void Awake();
    // private System.Void OnEnable()
    // Offset: 0x28AF240
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0x28AF244
    void OnDisable();
    // public System.Void .ctor()
    // Offset: 0x28AF248
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ZoneLiquidEffectable* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaTag::Rendering::ZoneLiquidEffectable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ZoneLiquidEffectable*, creationType>()));
    }
  }; // GorillaTag.Rendering.ZoneLiquidEffectable
  #pragma pack(pop)
  static check_size<sizeof(ZoneLiquidEffectable), 40 + sizeof(::ArrayW<::UnityEngine::Renderer*>)> __GorillaTag_Rendering_ZoneLiquidEffectableSizeCheck;
  static_assert(sizeof(ZoneLiquidEffectable) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaTag::Rendering::ZoneLiquidEffectable::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Rendering::ZoneLiquidEffectable::*)()>(&GorillaTag::Rendering::ZoneLiquidEffectable::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Rendering::ZoneLiquidEffectable*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Rendering::ZoneLiquidEffectable::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Rendering::ZoneLiquidEffectable::*)()>(&GorillaTag::Rendering::ZoneLiquidEffectable::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Rendering::ZoneLiquidEffectable*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Rendering::ZoneLiquidEffectable::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Rendering::ZoneLiquidEffectable::*)()>(&GorillaTag::Rendering::ZoneLiquidEffectable::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Rendering::ZoneLiquidEffectable*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Rendering::ZoneLiquidEffectable::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
