// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: ITickSystemPost
#include "GlobalNamespace/ITickSystemPost.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Texture2D
  class Texture2D;
  // Skipping declaration: Vector3 because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Forward declaring namespace: GorillaTag::Rendering
namespace GorillaTag::Rendering {
  // Skipping declaration: EZoneLiquidType because it is already included!
  // Skipping declaration: ELiquidShape because it is already included!
  // Skipping declaration: EOverrideMode because it is already included!
}
// Completed forward declares
// Type namespace: GorillaTag.Rendering
namespace GorillaTag::Rendering {
  // Forward declaring type: ZoneShaderSettings
  class ZoneShaderSettings;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaTag::Rendering::ZoneShaderSettings);
DEFINE_IL2CPP_ARG_TYPE(::GorillaTag::Rendering::ZoneShaderSettings*, "GorillaTag.Rendering", "ZoneShaderSettings");
// Type namespace: GorillaTag.Rendering
namespace GorillaTag::Rendering {
  // Size: 0x119
  #pragma pack(push, 1)
  // Autogenerated type: GorillaTag.Rendering.ZoneShaderSettings
  // [TokenAttribute] Offset: FFFFFFFF
  class ZoneShaderSettings : public ::UnityEngine::MonoBehaviour/*, public ::GlobalNamespace::ITickSystemPost*/ {
    public:
    // Nested type: ::GorillaTag::Rendering::ZoneShaderSettings::EOverrideMode
    struct EOverrideMode;
    // Nested type: ::GorillaTag::Rendering::ZoneShaderSettings::EZoneLiquidType
    struct EZoneLiquidType;
    // Nested type: ::GorillaTag::Rendering::ZoneShaderSettings::ELiquidShape
    struct ELiquidShape;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: GorillaTag.Rendering.ZoneShaderSettings/EOverrideMode
    // [TokenAttribute] Offset: FFFFFFFF
    struct EOverrideMode/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: EOverrideMode
      constexpr EOverrideMode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public GorillaTag.Rendering.ZoneShaderSettings/EOverrideMode LeaveUnchanged
      static constexpr const int LeaveUnchanged = 0;
      // Get static field: static public GorillaTag.Rendering.ZoneShaderSettings/EOverrideMode LeaveUnchanged
      static ::GorillaTag::Rendering::ZoneShaderSettings::EOverrideMode _get_LeaveUnchanged();
      // Set static field: static public GorillaTag.Rendering.ZoneShaderSettings/EOverrideMode LeaveUnchanged
      static void _set_LeaveUnchanged(::GorillaTag::Rendering::ZoneShaderSettings::EOverrideMode value);
      // static field const value: static public GorillaTag.Rendering.ZoneShaderSettings/EOverrideMode ApplyNewValue
      static constexpr const int ApplyNewValue = 1;
      // Get static field: static public GorillaTag.Rendering.ZoneShaderSettings/EOverrideMode ApplyNewValue
      static ::GorillaTag::Rendering::ZoneShaderSettings::EOverrideMode _get_ApplyNewValue();
      // Set static field: static public GorillaTag.Rendering.ZoneShaderSettings/EOverrideMode ApplyNewValue
      static void _set_ApplyNewValue(::GorillaTag::Rendering::ZoneShaderSettings::EOverrideMode value);
      // static field const value: static public GorillaTag.Rendering.ZoneShaderSettings/EOverrideMode ApplyDefaultValue
      static constexpr const int ApplyDefaultValue = 2;
      // Get static field: static public GorillaTag.Rendering.ZoneShaderSettings/EOverrideMode ApplyDefaultValue
      static ::GorillaTag::Rendering::ZoneShaderSettings::EOverrideMode _get_ApplyDefaultValue();
      // Set static field: static public GorillaTag.Rendering.ZoneShaderSettings/EOverrideMode ApplyDefaultValue
      static void _set_ApplyDefaultValue(::GorillaTag::Rendering::ZoneShaderSettings::EOverrideMode value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // GorillaTag.Rendering.ZoneShaderSettings/EOverrideMode
    #pragma pack(pop)
    static check_size<sizeof(ZoneShaderSettings::EOverrideMode), 0 + sizeof(int)> __GorillaTag_Rendering_ZoneShaderSettings_EOverrideModeSizeCheck;
    static_assert(sizeof(ZoneShaderSettings::EOverrideMode) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: GorillaTag.Rendering.ZoneShaderSettings/EZoneLiquidType
    // [TokenAttribute] Offset: FFFFFFFF
    struct EZoneLiquidType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: EZoneLiquidType
      constexpr EZoneLiquidType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public GorillaTag.Rendering.ZoneShaderSettings/EZoneLiquidType None
      static constexpr const int None = 0;
      // Get static field: static public GorillaTag.Rendering.ZoneShaderSettings/EZoneLiquidType None
      static ::GorillaTag::Rendering::ZoneShaderSettings::EZoneLiquidType _get_None();
      // Set static field: static public GorillaTag.Rendering.ZoneShaderSettings/EZoneLiquidType None
      static void _set_None(::GorillaTag::Rendering::ZoneShaderSettings::EZoneLiquidType value);
      // static field const value: static public GorillaTag.Rendering.ZoneShaderSettings/EZoneLiquidType Water
      static constexpr const int Water = 1;
      // Get static field: static public GorillaTag.Rendering.ZoneShaderSettings/EZoneLiquidType Water
      static ::GorillaTag::Rendering::ZoneShaderSettings::EZoneLiquidType _get_Water();
      // Set static field: static public GorillaTag.Rendering.ZoneShaderSettings/EZoneLiquidType Water
      static void _set_Water(::GorillaTag::Rendering::ZoneShaderSettings::EZoneLiquidType value);
      // static field const value: static public GorillaTag.Rendering.ZoneShaderSettings/EZoneLiquidType Lava
      static constexpr const int Lava = 2;
      // Get static field: static public GorillaTag.Rendering.ZoneShaderSettings/EZoneLiquidType Lava
      static ::GorillaTag::Rendering::ZoneShaderSettings::EZoneLiquidType _get_Lava();
      // Set static field: static public GorillaTag.Rendering.ZoneShaderSettings/EZoneLiquidType Lava
      static void _set_Lava(::GorillaTag::Rendering::ZoneShaderSettings::EZoneLiquidType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // GorillaTag.Rendering.ZoneShaderSettings/EZoneLiquidType
    #pragma pack(pop)
    static check_size<sizeof(ZoneShaderSettings::EZoneLiquidType), 0 + sizeof(int)> __GorillaTag_Rendering_ZoneShaderSettings_EZoneLiquidTypeSizeCheck;
    static_assert(sizeof(ZoneShaderSettings::EZoneLiquidType) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: GorillaTag.Rendering.ZoneShaderSettings/ELiquidShape
    // [TokenAttribute] Offset: FFFFFFFF
    struct ELiquidShape/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: ELiquidShape
      constexpr ELiquidShape(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public GorillaTag.Rendering.ZoneShaderSettings/ELiquidShape Plane
      static constexpr const int Plane = 0;
      // Get static field: static public GorillaTag.Rendering.ZoneShaderSettings/ELiquidShape Plane
      static ::GorillaTag::Rendering::ZoneShaderSettings::ELiquidShape _get_Plane();
      // Set static field: static public GorillaTag.Rendering.ZoneShaderSettings/ELiquidShape Plane
      static void _set_Plane(::GorillaTag::Rendering::ZoneShaderSettings::ELiquidShape value);
      // static field const value: static public GorillaTag.Rendering.ZoneShaderSettings/ELiquidShape Cylinder
      static constexpr const int Cylinder = 1;
      // Get static field: static public GorillaTag.Rendering.ZoneShaderSettings/ELiquidShape Cylinder
      static ::GorillaTag::Rendering::ZoneShaderSettings::ELiquidShape _get_Cylinder();
      // Set static field: static public GorillaTag.Rendering.ZoneShaderSettings/ELiquidShape Cylinder
      static void _set_Cylinder(::GorillaTag::Rendering::ZoneShaderSettings::ELiquidShape value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // GorillaTag.Rendering.ZoneShaderSettings/ELiquidShape
    #pragma pack(pop)
    static check_size<sizeof(ZoneShaderSettings::ELiquidShape), 0 + sizeof(int)> __GorillaTag_Rendering_ZoneShaderSettings_ELiquidShapeSizeCheck;
    static_assert(sizeof(ZoneShaderSettings::ELiquidShape) == 0x4);
    public:
    // private System.Boolean _activateOnAwake
    // Size: 0x1
    // Offset: 0x20
    bool activateOnAwake;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean isDefaultValues
    // Size: 0x1
    // Offset: 0x21
    bool isDefaultValues;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isDefaultValues and: groundFogColor_overrideMode
    char __padding1[0x2] = {};
    // private GorillaTag.Rendering.ZoneShaderSettings/EOverrideMode groundFogColor_overrideMode
    // Size: 0x4
    // Offset: 0x24
    ::GorillaTag::Rendering::ZoneShaderSettings::EOverrideMode groundFogColor_overrideMode;
    // Field size check
    static_assert(sizeof(::GorillaTag::Rendering::ZoneShaderSettings::EOverrideMode) == 0x4);
    // private UnityEngine.Color groundFogColor
    // Size: 0x10
    // Offset: 0x28
    ::UnityEngine::Color groundFogColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private GorillaTag.Rendering.ZoneShaderSettings/EOverrideMode groundFogDepthFade_overrideMode
    // Size: 0x4
    // Offset: 0x38
    ::GorillaTag::Rendering::ZoneShaderSettings::EOverrideMode groundFogDepthFade_overrideMode;
    // Field size check
    static_assert(sizeof(::GorillaTag::Rendering::ZoneShaderSettings::EOverrideMode) == 0x4);
    // private System.Single _groundFogDepthFadeSize
    // Size: 0x4
    // Offset: 0x3C
    float groundFogDepthFadeSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private GorillaTag.Rendering.ZoneShaderSettings/EOverrideMode groundFogHeight_overrideMode
    // Size: 0x4
    // Offset: 0x40
    ::GorillaTag::Rendering::ZoneShaderSettings::EOverrideMode groundFogHeight_overrideMode;
    // Field size check
    static_assert(sizeof(::GorillaTag::Rendering::ZoneShaderSettings::EOverrideMode) == 0x4);
    // private System.Single groundFogHeight
    // Size: 0x4
    // Offset: 0x44
    float groundFogHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private GorillaTag.Rendering.ZoneShaderSettings/EOverrideMode groundFogHeightFade_overrideMode
    // Size: 0x4
    // Offset: 0x48
    ::GorillaTag::Rendering::ZoneShaderSettings::EOverrideMode groundFogHeightFade_overrideMode;
    // Field size check
    static_assert(sizeof(::GorillaTag::Rendering::ZoneShaderSettings::EOverrideMode) == 0x4);
    // private System.Single _groundFogHeightFadeSize
    // Size: 0x4
    // Offset: 0x4C
    float groundFogHeightFadeSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private GorillaTag.Rendering.ZoneShaderSettings/EOverrideMode zoneLiquidType_overrideMode
    // Size: 0x4
    // Offset: 0x50
    ::GorillaTag::Rendering::ZoneShaderSettings::EOverrideMode zoneLiquidType_overrideMode;
    // Field size check
    static_assert(sizeof(::GorillaTag::Rendering::ZoneShaderSettings::EOverrideMode) == 0x4);
    // private GorillaTag.Rendering.ZoneShaderSettings/EZoneLiquidType zoneLiquidType
    // Size: 0x4
    // Offset: 0x54
    ::GorillaTag::Rendering::ZoneShaderSettings::EZoneLiquidType zoneLiquidType;
    // Field size check
    static_assert(sizeof(::GorillaTag::Rendering::ZoneShaderSettings::EZoneLiquidType) == 0x4);
    // private GorillaTag.Rendering.ZoneShaderSettings/EOverrideMode liquidShape_overrideMode
    // Size: 0x4
    // Offset: 0x58
    ::GorillaTag::Rendering::ZoneShaderSettings::EOverrideMode liquidShape_overrideMode;
    // Field size check
    static_assert(sizeof(::GorillaTag::Rendering::ZoneShaderSettings::EOverrideMode) == 0x4);
    // private GorillaTag.Rendering.ZoneShaderSettings/ELiquidShape liquidShape
    // Size: 0x4
    // Offset: 0x5C
    ::GorillaTag::Rendering::ZoneShaderSettings::ELiquidShape liquidShape;
    // Field size check
    static_assert(sizeof(::GorillaTag::Rendering::ZoneShaderSettings::ELiquidShape) == 0x4);
    // private GorillaTag.Rendering.ZoneShaderSettings/EOverrideMode liquidShapeRadius_overrideMode
    // Size: 0x4
    // Offset: 0x60
    ::GorillaTag::Rendering::ZoneShaderSettings::EOverrideMode liquidShapeRadius_overrideMode;
    // Field size check
    static_assert(sizeof(::GorillaTag::Rendering::ZoneShaderSettings::EOverrideMode) == 0x4);
    // private System.Single liquidShapeRadius
    // Size: 0x4
    // Offset: 0x64
    float liquidShapeRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean hasLiquidBottomTransform
    // Size: 0x1
    // Offset: 0x68
    bool hasLiquidBottomTransform;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: hasLiquidBottomTransform and: liquidBottomTransform_overrideMode
    char __padding16[0x3] = {};
    // private GorillaTag.Rendering.ZoneShaderSettings/EOverrideMode liquidBottomTransform_overrideMode
    // Size: 0x4
    // Offset: 0x6C
    ::GorillaTag::Rendering::ZoneShaderSettings::EOverrideMode liquidBottomTransform_overrideMode;
    // Field size check
    static_assert(sizeof(::GorillaTag::Rendering::ZoneShaderSettings::EOverrideMode) == 0x4);
    // private UnityEngine.Transform liquidBottomTransform
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::Transform* liquidBottomTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private System.Single liquidBottomPosY_previousValue
    // Size: 0x4
    // Offset: 0x78
    float liquidBottomPosY_previousValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private GorillaTag.Rendering.ZoneShaderSettings/EOverrideMode zoneLiquidUVScale_overrideMode
    // Size: 0x4
    // Offset: 0x7C
    ::GorillaTag::Rendering::ZoneShaderSettings::EOverrideMode zoneLiquidUVScale_overrideMode;
    // Field size check
    static_assert(sizeof(::GorillaTag::Rendering::ZoneShaderSettings::EOverrideMode) == 0x4);
    // private System.Single zoneLiquidUVScale
    // Size: 0x4
    // Offset: 0x80
    float zoneLiquidUVScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private GorillaTag.Rendering.ZoneShaderSettings/EOverrideMode underwaterTintColor_overrideMode
    // Size: 0x4
    // Offset: 0x84
    ::GorillaTag::Rendering::ZoneShaderSettings::EOverrideMode underwaterTintColor_overrideMode;
    // Field size check
    static_assert(sizeof(::GorillaTag::Rendering::ZoneShaderSettings::EOverrideMode) == 0x4);
    // private UnityEngine.Color underwaterTintColor
    // Size: 0x10
    // Offset: 0x88
    ::UnityEngine::Color underwaterTintColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private GorillaTag.Rendering.ZoneShaderSettings/EOverrideMode underwaterFogColor_overrideMode
    // Size: 0x4
    // Offset: 0x98
    ::GorillaTag::Rendering::ZoneShaderSettings::EOverrideMode underwaterFogColor_overrideMode;
    // Field size check
    static_assert(sizeof(::GorillaTag::Rendering::ZoneShaderSettings::EOverrideMode) == 0x4);
    // private UnityEngine.Color underwaterFogColor
    // Size: 0x10
    // Offset: 0x9C
    ::UnityEngine::Color underwaterFogColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private GorillaTag.Rendering.ZoneShaderSettings/EOverrideMode underwaterFogParams_overrideMode
    // Size: 0x4
    // Offset: 0xAC
    ::GorillaTag::Rendering::ZoneShaderSettings::EOverrideMode underwaterFogParams_overrideMode;
    // Field size check
    static_assert(sizeof(::GorillaTag::Rendering::ZoneShaderSettings::EOverrideMode) == 0x4);
    // private UnityEngine.Vector4 underwaterFogParams
    // Size: 0x10
    // Offset: 0xB0
    ::UnityEngine::Vector4 underwaterFogParams;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector4) == 0x10);
    // private GorillaTag.Rendering.ZoneShaderSettings/EOverrideMode underwaterCausticsParams_overrideMode
    // Size: 0x4
    // Offset: 0xC0
    ::GorillaTag::Rendering::ZoneShaderSettings::EOverrideMode underwaterCausticsParams_overrideMode;
    // Field size check
    static_assert(sizeof(::GorillaTag::Rendering::ZoneShaderSettings::EOverrideMode) == 0x4);
    // private UnityEngine.Vector4 underwaterCausticsParams
    // Size: 0x10
    // Offset: 0xC4
    ::UnityEngine::Vector4 underwaterCausticsParams;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector4) == 0x10);
    // private GorillaTag.Rendering.ZoneShaderSettings/EOverrideMode underwaterCausticsTexture_overrideMode
    // Size: 0x4
    // Offset: 0xD4
    ::GorillaTag::Rendering::ZoneShaderSettings::EOverrideMode underwaterCausticsTexture_overrideMode;
    // Field size check
    static_assert(sizeof(::GorillaTag::Rendering::ZoneShaderSettings::EOverrideMode) == 0x4);
    // private UnityEngine.Texture2D underwaterCausticsTexture
    // Size: 0x8
    // Offset: 0xD8
    ::UnityEngine::Texture2D* underwaterCausticsTexture;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture2D*) == 0x8);
    // private GorillaTag.Rendering.ZoneShaderSettings/EOverrideMode underwaterEffectsDistanceToSurfaceFade_overrideMode
    // Size: 0x4
    // Offset: 0xE0
    ::GorillaTag::Rendering::ZoneShaderSettings::EOverrideMode underwaterEffectsDistanceToSurfaceFade_overrideMode;
    // Field size check
    static_assert(sizeof(::GorillaTag::Rendering::ZoneShaderSettings::EOverrideMode) == 0x4);
    // private UnityEngine.Vector2 underwaterEffectsDistanceToSurfaceFade
    // Size: 0x8
    // Offset: 0xE4
    ::UnityEngine::Vector2 underwaterEffectsDistanceToSurfaceFade;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private GorillaTag.Rendering.ZoneShaderSettings/EOverrideMode liquidResidueTex_overrideMode
    // Size: 0x4
    // Offset: 0xEC
    ::GorillaTag::Rendering::ZoneShaderSettings::EOverrideMode liquidResidueTex_overrideMode;
    // Field size check
    static_assert(sizeof(::GorillaTag::Rendering::ZoneShaderSettings::EOverrideMode) == 0x4);
    // private UnityEngine.Texture2D liquidResidueTex
    // Size: 0x8
    // Offset: 0xF0
    ::UnityEngine::Texture2D* liquidResidueTex;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture2D*) == 0x8);
    // private readonly System.Int32 shaderParam_GlobalMainWaterSurfacePlane
    // Size: 0x4
    // Offset: 0xF8
    int shaderParam_GlobalMainWaterSurfacePlane;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean hasMainWaterSurfacePlane
    // Size: 0x1
    // Offset: 0xFC
    bool hasMainWaterSurfacePlane;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean hasDynamicWaterSurfacePlane
    // Size: 0x1
    // Offset: 0xFD
    bool hasDynamicWaterSurfacePlane;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: hasDynamicWaterSurfacePlane and: mainWaterSurfacePlane_overrideMode
    char __padding38[0x2] = {};
    // private GorillaTag.Rendering.ZoneShaderSettings/EOverrideMode mainWaterSurfacePlane_overrideMode
    // Size: 0x4
    // Offset: 0x100
    ::GorillaTag::Rendering::ZoneShaderSettings::EOverrideMode mainWaterSurfacePlane_overrideMode;
    // Field size check
    static_assert(sizeof(::GorillaTag::Rendering::ZoneShaderSettings::EOverrideMode) == 0x4);
    // Padding between fields: mainWaterSurfacePlane_overrideMode and: mainWaterSurfacePlane
    char __padding39[0x4] = {};
    // private UnityEngine.Transform mainWaterSurfacePlane
    // Size: 0x8
    // Offset: 0x108
    ::UnityEngine::Transform* mainWaterSurfacePlane;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private GorillaTag.Rendering.ZoneShaderSettings/EOverrideMode zoneWeatherMapDissolveProgress_overrideMode
    // Size: 0x4
    // Offset: 0x110
    ::GorillaTag::Rendering::ZoneShaderSettings::EOverrideMode zoneWeatherMapDissolveProgress_overrideMode;
    // Field size check
    static_assert(sizeof(::GorillaTag::Rendering::ZoneShaderSettings::EOverrideMode) == 0x4);
    // private System.Single zoneWeatherMapDissolveProgress
    // Size: 0x4
    // Offset: 0x114
    float zoneWeatherMapDissolveProgress;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean <ITickSystemPost.PostTickRunning>k__BackingField
    // Size: 0x1
    // Offset: 0x118
    bool PostTickRunning;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::GlobalNamespace::ITickSystemPost
    operator ::GlobalNamespace::ITickSystemPost() noexcept {
      return *reinterpret_cast<::GlobalNamespace::ITickSystemPost*>(this);
    }
    // Get static field: static private System.Boolean isInitialized
    static bool _get_isInitialized();
    // Set static field: static private System.Boolean isInitialized
    static void _set_isInitialized(bool value);
    // Get static field: static private GorillaTag.Rendering.ZoneShaderSettings <defaultsInstance>k__BackingField
    static ::GorillaTag::Rendering::ZoneShaderSettings* _get_$defaultsInstance$k__BackingField();
    // Set static field: static private GorillaTag.Rendering.ZoneShaderSettings <defaultsInstance>k__BackingField
    static void _set_$defaultsInstance$k__BackingField(::GorillaTag::Rendering::ZoneShaderSettings* value);
    // Get static field: static private System.Boolean <hasDefaultsInstance>k__BackingField
    static bool _get_$hasDefaultsInstance$k__BackingField();
    // Set static field: static private System.Boolean <hasDefaultsInstance>k__BackingField
    static void _set_$hasDefaultsInstance$k__BackingField(bool value);
    // Get static field: static private GorillaTag.Rendering.ZoneShaderSettings <activeInstance>k__BackingField
    static ::GorillaTag::Rendering::ZoneShaderSettings* _get_$activeInstance$k__BackingField();
    // Set static field: static private GorillaTag.Rendering.ZoneShaderSettings <activeInstance>k__BackingField
    static void _set_$activeInstance$k__BackingField(::GorillaTag::Rendering::ZoneShaderSettings* value);
    // Get static field: static private System.Boolean <hasActiveInstance>k__BackingField
    static bool _get_$hasActiveInstance$k__BackingField();
    // Set static field: static private System.Boolean <hasActiveInstance>k__BackingField
    static void _set_$hasActiveInstance$k__BackingField(bool value);
    // Get static field: static private readonly System.Int32 groundFogColor_shaderProp
    static int _get_groundFogColor_shaderProp();
    // Set static field: static private readonly System.Int32 groundFogColor_shaderProp
    static void _set_groundFogColor_shaderProp(int value);
    // Get static field: static private readonly System.Int32 groundFogDepthFadeSq_shaderProp
    static int _get_groundFogDepthFadeSq_shaderProp();
    // Set static field: static private readonly System.Int32 groundFogDepthFadeSq_shaderProp
    static void _set_groundFogDepthFadeSq_shaderProp(int value);
    // Get static field: static private readonly System.Int32 groundFogHeight_shaderProp
    static int _get_groundFogHeight_shaderProp();
    // Set static field: static private readonly System.Int32 groundFogHeight_shaderProp
    static void _set_groundFogHeight_shaderProp(int value);
    // Get static field: static private readonly System.Int32 groundFogHeightFade_shaderProp
    static int _get_groundFogHeightFade_shaderProp();
    // Set static field: static private readonly System.Int32 groundFogHeightFade_shaderProp
    static void _set_groundFogHeightFade_shaderProp(int value);
    // Get static field: static private GorillaTag.Rendering.ZoneShaderSettings/EZoneLiquidType liquidType_previousValue
    static ::GorillaTag::Rendering::ZoneShaderSettings::EZoneLiquidType _get_liquidType_previousValue();
    // Set static field: static private GorillaTag.Rendering.ZoneShaderSettings/EZoneLiquidType liquidType_previousValue
    static void _set_liquidType_previousValue(::GorillaTag::Rendering::ZoneShaderSettings::EZoneLiquidType value);
    // Get static field: static private System.Boolean didEverSetLiquidShape
    static bool _get_didEverSetLiquidShape();
    // Set static field: static private System.Boolean didEverSetLiquidShape
    static void _set_didEverSetLiquidShape(bool value);
    // Get static field: static private GorillaTag.Rendering.ZoneShaderSettings/ELiquidShape liquidShape_previousValue
    static ::GorillaTag::Rendering::ZoneShaderSettings::ELiquidShape _get_liquidShape_previousValue();
    // Set static field: static private GorillaTag.Rendering.ZoneShaderSettings/ELiquidShape liquidShape_previousValue
    static void _set_liquidShape_previousValue(::GorillaTag::Rendering::ZoneShaderSettings::ELiquidShape value);
    // Get static field: static private System.Int32 <shaderParam_ZoneLiquidPosRadiusSq>k__BackingField
    static int _get_$shaderParam_ZoneLiquidPosRadiusSq$k__BackingField();
    // Set static field: static private System.Int32 <shaderParam_ZoneLiquidPosRadiusSq>k__BackingField
    static void _set_$shaderParam_ZoneLiquidPosRadiusSq$k__BackingField(int value);
    // Get static field: static private System.Single liquidShapeRadius_previousValue
    static float _get_liquidShapeRadius_previousValue();
    // Set static field: static private System.Single liquidShapeRadius_previousValue
    static void _set_liquidShapeRadius_previousValue(float value);
    // Get static field: static private readonly System.Int32 shaderParam_GlobalZoneLiquidUVScale
    static int _get_shaderParam_GlobalZoneLiquidUVScale();
    // Set static field: static private readonly System.Int32 shaderParam_GlobalZoneLiquidUVScale
    static void _set_shaderParam_GlobalZoneLiquidUVScale(int value);
    // Get static field: static private readonly System.Int32 shaderParam_GlobalWaterTintColor
    static int _get_shaderParam_GlobalWaterTintColor();
    // Set static field: static private readonly System.Int32 shaderParam_GlobalWaterTintColor
    static void _set_shaderParam_GlobalWaterTintColor(int value);
    // Get static field: static private readonly System.Int32 shaderParam_GlobalUnderwaterFogColor
    static int _get_shaderParam_GlobalUnderwaterFogColor();
    // Set static field: static private readonly System.Int32 shaderParam_GlobalUnderwaterFogColor
    static void _set_shaderParam_GlobalUnderwaterFogColor(int value);
    // Get static field: static private readonly System.Int32 shaderParam_GlobalUnderwaterFogParams
    static int _get_shaderParam_GlobalUnderwaterFogParams();
    // Set static field: static private readonly System.Int32 shaderParam_GlobalUnderwaterFogParams
    static void _set_shaderParam_GlobalUnderwaterFogParams(int value);
    // Get static field: static private readonly System.Int32 shaderParam_GlobalUnderwaterCausticsParams
    static int _get_shaderParam_GlobalUnderwaterCausticsParams();
    // Set static field: static private readonly System.Int32 shaderParam_GlobalUnderwaterCausticsParams
    static void _set_shaderParam_GlobalUnderwaterCausticsParams(int value);
    // Get static field: static private readonly System.Int32 shaderParam_GlobalUnderwaterCausticsTex
    static int _get_shaderParam_GlobalUnderwaterCausticsTex();
    // Set static field: static private readonly System.Int32 shaderParam_GlobalUnderwaterCausticsTex
    static void _set_shaderParam_GlobalUnderwaterCausticsTex(int value);
    // Get static field: static private readonly System.Int32 shaderParam_GlobalUnderwaterEffectsDistanceToSurfaceFade
    static int _get_shaderParam_GlobalUnderwaterEffectsDistanceToSurfaceFade();
    // Set static field: static private readonly System.Int32 shaderParam_GlobalUnderwaterEffectsDistanceToSurfaceFade
    static void _set_shaderParam_GlobalUnderwaterEffectsDistanceToSurfaceFade(int value);
    // static field const value: static private System.String kEdTooltip_liquidResidueTex
    static constexpr const char* kEdTooltip_liquidResidueTex = "This is used for things like the charred surface effect when lava burns static geo.";
    // Get static field: static private System.String kEdTooltip_liquidResidueTex
    static ::StringW _get_kEdTooltip_liquidResidueTex();
    // Set static field: static private System.String kEdTooltip_liquidResidueTex
    static void _set_kEdTooltip_liquidResidueTex(::StringW value);
    // Get static field: static private readonly System.Int32 shaderParam_GlobalLiquidResidueTex
    static int _get_shaderParam_GlobalLiquidResidueTex();
    // Set static field: static private readonly System.Int32 shaderParam_GlobalLiquidResidueTex
    static void _set_shaderParam_GlobalLiquidResidueTex(int value);
    // Get static field: static private readonly System.Int32 shaderParam_ZoneWeatherMapDissolveProgress
    static int _get_shaderParam_ZoneWeatherMapDissolveProgress();
    // Set static field: static private readonly System.Int32 shaderParam_ZoneWeatherMapDissolveProgress
    static void _set_shaderParam_ZoneWeatherMapDissolveProgress(int value);
    // Get instance field reference: private System.Boolean _activateOnAwake
    [[deprecated("Use field access instead!")]] bool& dyn__activateOnAwake();
    // Get instance field reference: public System.Boolean isDefaultValues
    [[deprecated("Use field access instead!")]] bool& dyn_isDefaultValues();
    // Get instance field reference: private GorillaTag.Rendering.ZoneShaderSettings/EOverrideMode groundFogColor_overrideMode
    [[deprecated("Use field access instead!")]] ::GorillaTag::Rendering::ZoneShaderSettings::EOverrideMode& dyn_groundFogColor_overrideMode();
    // Get instance field reference: private UnityEngine.Color groundFogColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_groundFogColor();
    // Get instance field reference: private GorillaTag.Rendering.ZoneShaderSettings/EOverrideMode groundFogDepthFade_overrideMode
    [[deprecated("Use field access instead!")]] ::GorillaTag::Rendering::ZoneShaderSettings::EOverrideMode& dyn_groundFogDepthFade_overrideMode();
    // Get instance field reference: private System.Single _groundFogDepthFadeSize
    [[deprecated("Use field access instead!")]] float& dyn__groundFogDepthFadeSize();
    // Get instance field reference: private GorillaTag.Rendering.ZoneShaderSettings/EOverrideMode groundFogHeight_overrideMode
    [[deprecated("Use field access instead!")]] ::GorillaTag::Rendering::ZoneShaderSettings::EOverrideMode& dyn_groundFogHeight_overrideMode();
    // Get instance field reference: private System.Single groundFogHeight
    [[deprecated("Use field access instead!")]] float& dyn_groundFogHeight();
    // Get instance field reference: private GorillaTag.Rendering.ZoneShaderSettings/EOverrideMode groundFogHeightFade_overrideMode
    [[deprecated("Use field access instead!")]] ::GorillaTag::Rendering::ZoneShaderSettings::EOverrideMode& dyn_groundFogHeightFade_overrideMode();
    // Get instance field reference: private System.Single _groundFogHeightFadeSize
    [[deprecated("Use field access instead!")]] float& dyn__groundFogHeightFadeSize();
    // Get instance field reference: private GorillaTag.Rendering.ZoneShaderSettings/EOverrideMode zoneLiquidType_overrideMode
    [[deprecated("Use field access instead!")]] ::GorillaTag::Rendering::ZoneShaderSettings::EOverrideMode& dyn_zoneLiquidType_overrideMode();
    // Get instance field reference: private GorillaTag.Rendering.ZoneShaderSettings/EZoneLiquidType zoneLiquidType
    [[deprecated("Use field access instead!")]] ::GorillaTag::Rendering::ZoneShaderSettings::EZoneLiquidType& dyn_zoneLiquidType();
    // Get instance field reference: private GorillaTag.Rendering.ZoneShaderSettings/EOverrideMode liquidShape_overrideMode
    [[deprecated("Use field access instead!")]] ::GorillaTag::Rendering::ZoneShaderSettings::EOverrideMode& dyn_liquidShape_overrideMode();
    // Get instance field reference: private GorillaTag.Rendering.ZoneShaderSettings/ELiquidShape liquidShape
    [[deprecated("Use field access instead!")]] ::GorillaTag::Rendering::ZoneShaderSettings::ELiquidShape& dyn_liquidShape();
    // Get instance field reference: private GorillaTag.Rendering.ZoneShaderSettings/EOverrideMode liquidShapeRadius_overrideMode
    [[deprecated("Use field access instead!")]] ::GorillaTag::Rendering::ZoneShaderSettings::EOverrideMode& dyn_liquidShapeRadius_overrideMode();
    // Get instance field reference: private System.Single liquidShapeRadius
    [[deprecated("Use field access instead!")]] float& dyn_liquidShapeRadius();
    // Get instance field reference: private System.Boolean hasLiquidBottomTransform
    [[deprecated("Use field access instead!")]] bool& dyn_hasLiquidBottomTransform();
    // Get instance field reference: private GorillaTag.Rendering.ZoneShaderSettings/EOverrideMode liquidBottomTransform_overrideMode
    [[deprecated("Use field access instead!")]] ::GorillaTag::Rendering::ZoneShaderSettings::EOverrideMode& dyn_liquidBottomTransform_overrideMode();
    // Get instance field reference: private UnityEngine.Transform liquidBottomTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_liquidBottomTransform();
    // Get instance field reference: private System.Single liquidBottomPosY_previousValue
    [[deprecated("Use field access instead!")]] float& dyn_liquidBottomPosY_previousValue();
    // Get instance field reference: private GorillaTag.Rendering.ZoneShaderSettings/EOverrideMode zoneLiquidUVScale_overrideMode
    [[deprecated("Use field access instead!")]] ::GorillaTag::Rendering::ZoneShaderSettings::EOverrideMode& dyn_zoneLiquidUVScale_overrideMode();
    // Get instance field reference: private System.Single zoneLiquidUVScale
    [[deprecated("Use field access instead!")]] float& dyn_zoneLiquidUVScale();
    // Get instance field reference: private GorillaTag.Rendering.ZoneShaderSettings/EOverrideMode underwaterTintColor_overrideMode
    [[deprecated("Use field access instead!")]] ::GorillaTag::Rendering::ZoneShaderSettings::EOverrideMode& dyn_underwaterTintColor_overrideMode();
    // Get instance field reference: private UnityEngine.Color underwaterTintColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_underwaterTintColor();
    // Get instance field reference: private GorillaTag.Rendering.ZoneShaderSettings/EOverrideMode underwaterFogColor_overrideMode
    [[deprecated("Use field access instead!")]] ::GorillaTag::Rendering::ZoneShaderSettings::EOverrideMode& dyn_underwaterFogColor_overrideMode();
    // Get instance field reference: private UnityEngine.Color underwaterFogColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_underwaterFogColor();
    // Get instance field reference: private GorillaTag.Rendering.ZoneShaderSettings/EOverrideMode underwaterFogParams_overrideMode
    [[deprecated("Use field access instead!")]] ::GorillaTag::Rendering::ZoneShaderSettings::EOverrideMode& dyn_underwaterFogParams_overrideMode();
    // Get instance field reference: private UnityEngine.Vector4 underwaterFogParams
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector4& dyn_underwaterFogParams();
    // Get instance field reference: private GorillaTag.Rendering.ZoneShaderSettings/EOverrideMode underwaterCausticsParams_overrideMode
    [[deprecated("Use field access instead!")]] ::GorillaTag::Rendering::ZoneShaderSettings::EOverrideMode& dyn_underwaterCausticsParams_overrideMode();
    // Get instance field reference: private UnityEngine.Vector4 underwaterCausticsParams
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector4& dyn_underwaterCausticsParams();
    // Get instance field reference: private GorillaTag.Rendering.ZoneShaderSettings/EOverrideMode underwaterCausticsTexture_overrideMode
    [[deprecated("Use field access instead!")]] ::GorillaTag::Rendering::ZoneShaderSettings::EOverrideMode& dyn_underwaterCausticsTexture_overrideMode();
    // Get instance field reference: private UnityEngine.Texture2D underwaterCausticsTexture
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture2D*& dyn_underwaterCausticsTexture();
    // Get instance field reference: private GorillaTag.Rendering.ZoneShaderSettings/EOverrideMode underwaterEffectsDistanceToSurfaceFade_overrideMode
    [[deprecated("Use field access instead!")]] ::GorillaTag::Rendering::ZoneShaderSettings::EOverrideMode& dyn_underwaterEffectsDistanceToSurfaceFade_overrideMode();
    // Get instance field reference: private UnityEngine.Vector2 underwaterEffectsDistanceToSurfaceFade
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_underwaterEffectsDistanceToSurfaceFade();
    // Get instance field reference: private GorillaTag.Rendering.ZoneShaderSettings/EOverrideMode liquidResidueTex_overrideMode
    [[deprecated("Use field access instead!")]] ::GorillaTag::Rendering::ZoneShaderSettings::EOverrideMode& dyn_liquidResidueTex_overrideMode();
    // Get instance field reference: private UnityEngine.Texture2D liquidResidueTex
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture2D*& dyn_liquidResidueTex();
    // Get instance field reference: private readonly System.Int32 shaderParam_GlobalMainWaterSurfacePlane
    [[deprecated("Use field access instead!")]] int& dyn_shaderParam_GlobalMainWaterSurfacePlane();
    // Get instance field reference: private System.Boolean hasMainWaterSurfacePlane
    [[deprecated("Use field access instead!")]] bool& dyn_hasMainWaterSurfacePlane();
    // Get instance field reference: private System.Boolean hasDynamicWaterSurfacePlane
    [[deprecated("Use field access instead!")]] bool& dyn_hasDynamicWaterSurfacePlane();
    // Get instance field reference: private GorillaTag.Rendering.ZoneShaderSettings/EOverrideMode mainWaterSurfacePlane_overrideMode
    [[deprecated("Use field access instead!")]] ::GorillaTag::Rendering::ZoneShaderSettings::EOverrideMode& dyn_mainWaterSurfacePlane_overrideMode();
    // Get instance field reference: private UnityEngine.Transform mainWaterSurfacePlane
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_mainWaterSurfacePlane();
    // Get instance field reference: private GorillaTag.Rendering.ZoneShaderSettings/EOverrideMode zoneWeatherMapDissolveProgress_overrideMode
    [[deprecated("Use field access instead!")]] ::GorillaTag::Rendering::ZoneShaderSettings::EOverrideMode& dyn_zoneWeatherMapDissolveProgress_overrideMode();
    // Get instance field reference: private System.Single zoneWeatherMapDissolveProgress
    [[deprecated("Use field access instead!")]] float& dyn_zoneWeatherMapDissolveProgress();
    // Get instance field reference: private System.Boolean <ITickSystemPost.PostTickRunning>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$ITickSystemPost_PostTickRunning$k__BackingField();
    // static public GorillaTag.Rendering.ZoneShaderSettings get_defaultsInstance()
    // Offset: 0x28AFF4C
    static ::GorillaTag::Rendering::ZoneShaderSettings* get_defaultsInstance();
    // static private System.Void set_defaultsInstance(GorillaTag.Rendering.ZoneShaderSettings value)
    // Offset: 0x28AFFA4
    static void set_defaultsInstance(::GorillaTag::Rendering::ZoneShaderSettings* value);
    // static public System.Boolean get_hasDefaultsInstance()
    // Offset: 0x28B0004
    static bool get_hasDefaultsInstance();
    // static private System.Void set_hasDefaultsInstance(System.Boolean value)
    // Offset: 0x28B005C
    static void set_hasDefaultsInstance(bool value);
    // static public GorillaTag.Rendering.ZoneShaderSettings get_activeInstance()
    // Offset: 0x28B00BC
    static ::GorillaTag::Rendering::ZoneShaderSettings* get_activeInstance();
    // static private System.Void set_activeInstance(GorillaTag.Rendering.ZoneShaderSettings value)
    // Offset: 0x28B0114
    static void set_activeInstance(::GorillaTag::Rendering::ZoneShaderSettings* value);
    // static public System.Boolean get_hasActiveInstance()
    // Offset: 0x28B0174
    static bool get_hasActiveInstance();
    // static private System.Void set_hasActiveInstance(System.Boolean value)
    // Offset: 0x28B01CC
    static void set_hasActiveInstance(bool value);
    // public System.Boolean get_isActiveInstance()
    // Offset: 0x28B022C
    bool get_isActiveInstance();
    // private System.Single get_GroundFogDepthFadeSq()
    // Offset: 0x28B02EC
    float get_GroundFogDepthFadeSq();
    // private System.Single get_GroundFogHeightFade()
    // Offset: 0x28B030C
    float get_GroundFogHeightFade();
    // public System.Void SetZoneLiquidTypeKeywordEnum(GorillaTag.Rendering.ZoneShaderSettings/EZoneLiquidType liquidType)
    // Offset: 0x28B0328
    void SetZoneLiquidTypeKeywordEnum(::GorillaTag::Rendering::ZoneShaderSettings::EZoneLiquidType liquidType);
    // public System.Void SetZoneLiquidShapeKeywordEnum(GorillaTag.Rendering.ZoneShaderSettings/ELiquidShape shape)
    // Offset: 0x28B03FC
    void SetZoneLiquidShapeKeywordEnum(::GorillaTag::Rendering::ZoneShaderSettings::ELiquidShape shape);
    // static public System.Int32 get_shaderParam_ZoneLiquidPosRadiusSq()
    // Offset: 0x28B0488
    static int get_shaderParam_ZoneLiquidPosRadiusSq();
    // static private System.Void set_shaderParam_ZoneLiquidPosRadiusSq(System.Int32 value)
    // Offset: 0x28B04E0
    static void set_shaderParam_ZoneLiquidPosRadiusSq(int value);
    // static public System.Single GetWaterY()
    // Offset: 0x28B053C
    static float GetWaterY();
    // protected System.Void Awake()
    // Offset: 0x28B05E0
    void Awake();
    // protected System.Void OnEnable()
    // Offset: 0x28B0CA8
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x28B0D28
    void OnDisable();
    // protected System.Void OnDestroy()
    // Offset: 0x28B0D94
    void OnDestroy();
    // private System.Boolean ITickSystemPost.get_PostTickRunning()
    // Offset: 0x28B0F78
    bool ITickSystemPost_get_PostTickRunning();
    // private System.Void ITickSystemPost.set_PostTickRunning(System.Boolean value)
    // Offset: 0x28B0F80
    void ITickSystemPost_set_PostTickRunning(bool value);
    // private System.Void ITickSystemPost.PostTick()
    // Offset: 0x28B0F8C
    void ITickSystemPost_PostTick();
    // private System.Void UpdateMainPlaneShaderProperty()
    // Offset: 0x28B10CC
    void UpdateMainPlaneShaderProperty();
    // private System.Void CheckDefaultsInstance()
    // Offset: 0x28B0708
    void CheckDefaultsInstance();
    // public System.Void BecomeActiveInstance()
    // Offset: 0x28B0B44
    void BecomeActiveInstance();
    // static public System.Void ActivateDefaultSettings()
    // Offset: 0x28B1ECC
    static void ActivateDefaultSettings();
    // private System.Void ApplyValues()
    // Offset: 0x28B1654
    void ApplyValues();
    // private System.Void ApplyColor(System.Int32 shaderProp, GorillaTag.Rendering.ZoneShaderSettings/EOverrideMode overrideMode, UnityEngine.Color value, UnityEngine.Color defaultValue)
    // Offset: 0x28B1FB4
    void ApplyColor(int shaderProp, ::GorillaTag::Rendering::ZoneShaderSettings::EOverrideMode overrideMode, ::UnityEngine::Color value, ::UnityEngine::Color defaultValue);
    // private System.Void ApplyFloat(System.Int32 shaderProp, GorillaTag.Rendering.ZoneShaderSettings/EOverrideMode overrideMode, System.Single value, System.Single defaultValue)
    // Offset: 0x28B2058
    void ApplyFloat(int shaderProp, ::GorillaTag::Rendering::ZoneShaderSettings::EOverrideMode overrideMode, float value, float defaultValue);
    // private System.Void ApplyVector(System.Int32 shaderProp, GorillaTag.Rendering.ZoneShaderSettings/EOverrideMode overrideMode, UnityEngine.Vector2 value, UnityEngine.Vector2 defaultValue)
    // Offset: 0x28B20EC
    void ApplyVector(int shaderProp, ::GorillaTag::Rendering::ZoneShaderSettings::EOverrideMode overrideMode, ::UnityEngine::Vector2 value, ::UnityEngine::Vector2 defaultValue);
    // private System.Void ApplyVector(System.Int32 shaderProp, GorillaTag.Rendering.ZoneShaderSettings/EOverrideMode overrideMode, UnityEngine.Vector3 value, UnityEngine.Vector3 defaultValue)
    // Offset: 0x28B2124
    void ApplyVector(int shaderProp, ::GorillaTag::Rendering::ZoneShaderSettings::EOverrideMode overrideMode, ::UnityEngine::Vector3 value, ::UnityEngine::Vector3 defaultValue);
    // private System.Void ApplyVector(System.Int32 shaderProp, GorillaTag.Rendering.ZoneShaderSettings/EOverrideMode overrideMode, UnityEngine.Vector4 value, UnityEngine.Vector4 defaultValue)
    // Offset: 0x28B2084
    void ApplyVector(int shaderProp, ::GorillaTag::Rendering::ZoneShaderSettings::EOverrideMode overrideMode, ::UnityEngine::Vector4 value, ::UnityEngine::Vector4 defaultValue);
    // private System.Void ApplyTexture(System.Int32 shaderProp, GorillaTag.Rendering.ZoneShaderSettings/EOverrideMode overrideMode, UnityEngine.Texture2D value, UnityEngine.Texture2D defaultValue)
    // Offset: 0x28B20BC
    void ApplyTexture(int shaderProp, ::GorillaTag::Rendering::ZoneShaderSettings::EOverrideMode overrideMode, ::UnityEngine::Texture2D* value, ::UnityEngine::Texture2D* defaultValue);
    // public System.Void .ctor()
    // Offset: 0x28B215C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ZoneShaderSettings* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaTag::Rendering::ZoneShaderSettings::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ZoneShaderSettings*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x28B222C
    static void _cctor();
  }; // GorillaTag.Rendering.ZoneShaderSettings
  #pragma pack(pop)
  static check_size<sizeof(ZoneShaderSettings), 280 + sizeof(bool)> __GorillaTag_Rendering_ZoneShaderSettingsSizeCheck;
  static_assert(sizeof(ZoneShaderSettings) == 0x119);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GorillaTag::Rendering::ZoneShaderSettings::ELiquidShape, "GorillaTag.Rendering", "ZoneShaderSettings/ELiquidShape");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GorillaTag::Rendering::ZoneShaderSettings::EZoneLiquidType, "GorillaTag.Rendering", "ZoneShaderSettings/EZoneLiquidType");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GorillaTag::Rendering::ZoneShaderSettings::EOverrideMode, "GorillaTag.Rendering", "ZoneShaderSettings/EOverrideMode");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaTag::Rendering::ZoneShaderSettings::get_defaultsInstance
// Il2CppName: get_defaultsInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GorillaTag::Rendering::ZoneShaderSettings* (*)()>(&GorillaTag::Rendering::ZoneShaderSettings::get_defaultsInstance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Rendering::ZoneShaderSettings*), "get_defaultsInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Rendering::ZoneShaderSettings::set_defaultsInstance
// Il2CppName: set_defaultsInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GorillaTag::Rendering::ZoneShaderSettings*)>(&GorillaTag::Rendering::ZoneShaderSettings::set_defaultsInstance)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("GorillaTag.Rendering", "ZoneShaderSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Rendering::ZoneShaderSettings*), "set_defaultsInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GorillaTag::Rendering::ZoneShaderSettings::get_hasDefaultsInstance
// Il2CppName: get_hasDefaultsInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GorillaTag::Rendering::ZoneShaderSettings::get_hasDefaultsInstance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Rendering::ZoneShaderSettings*), "get_hasDefaultsInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Rendering::ZoneShaderSettings::set_hasDefaultsInstance
// Il2CppName: set_hasDefaultsInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&GorillaTag::Rendering::ZoneShaderSettings::set_hasDefaultsInstance)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Rendering::ZoneShaderSettings*), "set_hasDefaultsInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GorillaTag::Rendering::ZoneShaderSettings::get_activeInstance
// Il2CppName: get_activeInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GorillaTag::Rendering::ZoneShaderSettings* (*)()>(&GorillaTag::Rendering::ZoneShaderSettings::get_activeInstance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Rendering::ZoneShaderSettings*), "get_activeInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Rendering::ZoneShaderSettings::set_activeInstance
// Il2CppName: set_activeInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GorillaTag::Rendering::ZoneShaderSettings*)>(&GorillaTag::Rendering::ZoneShaderSettings::set_activeInstance)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("GorillaTag.Rendering", "ZoneShaderSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Rendering::ZoneShaderSettings*), "set_activeInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GorillaTag::Rendering::ZoneShaderSettings::get_hasActiveInstance
// Il2CppName: get_hasActiveInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GorillaTag::Rendering::ZoneShaderSettings::get_hasActiveInstance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Rendering::ZoneShaderSettings*), "get_hasActiveInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Rendering::ZoneShaderSettings::set_hasActiveInstance
// Il2CppName: set_hasActiveInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&GorillaTag::Rendering::ZoneShaderSettings::set_hasActiveInstance)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Rendering::ZoneShaderSettings*), "set_hasActiveInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GorillaTag::Rendering::ZoneShaderSettings::get_isActiveInstance
// Il2CppName: get_isActiveInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaTag::Rendering::ZoneShaderSettings::*)()>(&GorillaTag::Rendering::ZoneShaderSettings::get_isActiveInstance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Rendering::ZoneShaderSettings*), "get_isActiveInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Rendering::ZoneShaderSettings::get_GroundFogDepthFadeSq
// Il2CppName: get_GroundFogDepthFadeSq
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GorillaTag::Rendering::ZoneShaderSettings::*)()>(&GorillaTag::Rendering::ZoneShaderSettings::get_GroundFogDepthFadeSq)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Rendering::ZoneShaderSettings*), "get_GroundFogDepthFadeSq", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Rendering::ZoneShaderSettings::get_GroundFogHeightFade
// Il2CppName: get_GroundFogHeightFade
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GorillaTag::Rendering::ZoneShaderSettings::*)()>(&GorillaTag::Rendering::ZoneShaderSettings::get_GroundFogHeightFade)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Rendering::ZoneShaderSettings*), "get_GroundFogHeightFade", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Rendering::ZoneShaderSettings::SetZoneLiquidTypeKeywordEnum
// Il2CppName: SetZoneLiquidTypeKeywordEnum
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Rendering::ZoneShaderSettings::*)(::GorillaTag::Rendering::ZoneShaderSettings::EZoneLiquidType)>(&GorillaTag::Rendering::ZoneShaderSettings::SetZoneLiquidTypeKeywordEnum)> {
  static const MethodInfo* get() {
    static auto* liquidType = &::il2cpp_utils::GetClassFromName("GorillaTag.Rendering", "ZoneShaderSettings/EZoneLiquidType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Rendering::ZoneShaderSettings*), "SetZoneLiquidTypeKeywordEnum", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{liquidType});
  }
};
// Writing MetadataGetter for method: GorillaTag::Rendering::ZoneShaderSettings::SetZoneLiquidShapeKeywordEnum
// Il2CppName: SetZoneLiquidShapeKeywordEnum
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Rendering::ZoneShaderSettings::*)(::GorillaTag::Rendering::ZoneShaderSettings::ELiquidShape)>(&GorillaTag::Rendering::ZoneShaderSettings::SetZoneLiquidShapeKeywordEnum)> {
  static const MethodInfo* get() {
    static auto* shape = &::il2cpp_utils::GetClassFromName("GorillaTag.Rendering", "ZoneShaderSettings/ELiquidShape")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Rendering::ZoneShaderSettings*), "SetZoneLiquidShapeKeywordEnum", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shape});
  }
};
// Writing MetadataGetter for method: GorillaTag::Rendering::ZoneShaderSettings::get_shaderParam_ZoneLiquidPosRadiusSq
// Il2CppName: get_shaderParam_ZoneLiquidPosRadiusSq
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&GorillaTag::Rendering::ZoneShaderSettings::get_shaderParam_ZoneLiquidPosRadiusSq)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Rendering::ZoneShaderSettings*), "get_shaderParam_ZoneLiquidPosRadiusSq", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Rendering::ZoneShaderSettings::set_shaderParam_ZoneLiquidPosRadiusSq
// Il2CppName: set_shaderParam_ZoneLiquidPosRadiusSq
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int)>(&GorillaTag::Rendering::ZoneShaderSettings::set_shaderParam_ZoneLiquidPosRadiusSq)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Rendering::ZoneShaderSettings*), "set_shaderParam_ZoneLiquidPosRadiusSq", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GorillaTag::Rendering::ZoneShaderSettings::GetWaterY
// Il2CppName: GetWaterY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&GorillaTag::Rendering::ZoneShaderSettings::GetWaterY)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Rendering::ZoneShaderSettings*), "GetWaterY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Rendering::ZoneShaderSettings::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Rendering::ZoneShaderSettings::*)()>(&GorillaTag::Rendering::ZoneShaderSettings::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Rendering::ZoneShaderSettings*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Rendering::ZoneShaderSettings::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Rendering::ZoneShaderSettings::*)()>(&GorillaTag::Rendering::ZoneShaderSettings::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Rendering::ZoneShaderSettings*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Rendering::ZoneShaderSettings::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Rendering::ZoneShaderSettings::*)()>(&GorillaTag::Rendering::ZoneShaderSettings::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Rendering::ZoneShaderSettings*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Rendering::ZoneShaderSettings::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Rendering::ZoneShaderSettings::*)()>(&GorillaTag::Rendering::ZoneShaderSettings::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Rendering::ZoneShaderSettings*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Rendering::ZoneShaderSettings::ITickSystemPost_get_PostTickRunning
// Il2CppName: ITickSystemPost.get_PostTickRunning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaTag::Rendering::ZoneShaderSettings::*)()>(&GorillaTag::Rendering::ZoneShaderSettings::ITickSystemPost_get_PostTickRunning)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Rendering::ZoneShaderSettings*), "ITickSystemPost.get_PostTickRunning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Rendering::ZoneShaderSettings::ITickSystemPost_set_PostTickRunning
// Il2CppName: ITickSystemPost.set_PostTickRunning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Rendering::ZoneShaderSettings::*)(bool)>(&GorillaTag::Rendering::ZoneShaderSettings::ITickSystemPost_set_PostTickRunning)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Rendering::ZoneShaderSettings*), "ITickSystemPost.set_PostTickRunning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GorillaTag::Rendering::ZoneShaderSettings::ITickSystemPost_PostTick
// Il2CppName: ITickSystemPost.PostTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Rendering::ZoneShaderSettings::*)()>(&GorillaTag::Rendering::ZoneShaderSettings::ITickSystemPost_PostTick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Rendering::ZoneShaderSettings*), "ITickSystemPost.PostTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Rendering::ZoneShaderSettings::UpdateMainPlaneShaderProperty
// Il2CppName: UpdateMainPlaneShaderProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Rendering::ZoneShaderSettings::*)()>(&GorillaTag::Rendering::ZoneShaderSettings::UpdateMainPlaneShaderProperty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Rendering::ZoneShaderSettings*), "UpdateMainPlaneShaderProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Rendering::ZoneShaderSettings::CheckDefaultsInstance
// Il2CppName: CheckDefaultsInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Rendering::ZoneShaderSettings::*)()>(&GorillaTag::Rendering::ZoneShaderSettings::CheckDefaultsInstance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Rendering::ZoneShaderSettings*), "CheckDefaultsInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Rendering::ZoneShaderSettings::BecomeActiveInstance
// Il2CppName: BecomeActiveInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Rendering::ZoneShaderSettings::*)()>(&GorillaTag::Rendering::ZoneShaderSettings::BecomeActiveInstance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Rendering::ZoneShaderSettings*), "BecomeActiveInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Rendering::ZoneShaderSettings::ActivateDefaultSettings
// Il2CppName: ActivateDefaultSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GorillaTag::Rendering::ZoneShaderSettings::ActivateDefaultSettings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Rendering::ZoneShaderSettings*), "ActivateDefaultSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Rendering::ZoneShaderSettings::ApplyValues
// Il2CppName: ApplyValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Rendering::ZoneShaderSettings::*)()>(&GorillaTag::Rendering::ZoneShaderSettings::ApplyValues)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Rendering::ZoneShaderSettings*), "ApplyValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Rendering::ZoneShaderSettings::ApplyColor
// Il2CppName: ApplyColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Rendering::ZoneShaderSettings::*)(int, ::GorillaTag::Rendering::ZoneShaderSettings::EOverrideMode, ::UnityEngine::Color, ::UnityEngine::Color)>(&GorillaTag::Rendering::ZoneShaderSettings::ApplyColor)> {
  static const MethodInfo* get() {
    static auto* shaderProp = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* overrideMode = &::il2cpp_utils::GetClassFromName("GorillaTag.Rendering", "ZoneShaderSettings/EOverrideMode")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* defaultValue = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Rendering::ZoneShaderSettings*), "ApplyColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shaderProp, overrideMode, value, defaultValue});
  }
};
// Writing MetadataGetter for method: GorillaTag::Rendering::ZoneShaderSettings::ApplyFloat
// Il2CppName: ApplyFloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Rendering::ZoneShaderSettings::*)(int, ::GorillaTag::Rendering::ZoneShaderSettings::EOverrideMode, float, float)>(&GorillaTag::Rendering::ZoneShaderSettings::ApplyFloat)> {
  static const MethodInfo* get() {
    static auto* shaderProp = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* overrideMode = &::il2cpp_utils::GetClassFromName("GorillaTag.Rendering", "ZoneShaderSettings/EOverrideMode")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* defaultValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Rendering::ZoneShaderSettings*), "ApplyFloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shaderProp, overrideMode, value, defaultValue});
  }
};
// Writing MetadataGetter for method: GorillaTag::Rendering::ZoneShaderSettings::ApplyVector
// Il2CppName: ApplyVector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Rendering::ZoneShaderSettings::*)(int, ::GorillaTag::Rendering::ZoneShaderSettings::EOverrideMode, ::UnityEngine::Vector2, ::UnityEngine::Vector2)>(&GorillaTag::Rendering::ZoneShaderSettings::ApplyVector)> {
  static const MethodInfo* get() {
    static auto* shaderProp = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* overrideMode = &::il2cpp_utils::GetClassFromName("GorillaTag.Rendering", "ZoneShaderSettings/EOverrideMode")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* defaultValue = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Rendering::ZoneShaderSettings*), "ApplyVector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shaderProp, overrideMode, value, defaultValue});
  }
};
// Writing MetadataGetter for method: GorillaTag::Rendering::ZoneShaderSettings::ApplyVector
// Il2CppName: ApplyVector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Rendering::ZoneShaderSettings::*)(int, ::GorillaTag::Rendering::ZoneShaderSettings::EOverrideMode, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&GorillaTag::Rendering::ZoneShaderSettings::ApplyVector)> {
  static const MethodInfo* get() {
    static auto* shaderProp = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* overrideMode = &::il2cpp_utils::GetClassFromName("GorillaTag.Rendering", "ZoneShaderSettings/EOverrideMode")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* defaultValue = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Rendering::ZoneShaderSettings*), "ApplyVector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shaderProp, overrideMode, value, defaultValue});
  }
};
// Writing MetadataGetter for method: GorillaTag::Rendering::ZoneShaderSettings::ApplyVector
// Il2CppName: ApplyVector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Rendering::ZoneShaderSettings::*)(int, ::GorillaTag::Rendering::ZoneShaderSettings::EOverrideMode, ::UnityEngine::Vector4, ::UnityEngine::Vector4)>(&GorillaTag::Rendering::ZoneShaderSettings::ApplyVector)> {
  static const MethodInfo* get() {
    static auto* shaderProp = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* overrideMode = &::il2cpp_utils::GetClassFromName("GorillaTag.Rendering", "ZoneShaderSettings/EOverrideMode")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    static auto* defaultValue = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Rendering::ZoneShaderSettings*), "ApplyVector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shaderProp, overrideMode, value, defaultValue});
  }
};
// Writing MetadataGetter for method: GorillaTag::Rendering::ZoneShaderSettings::ApplyTexture
// Il2CppName: ApplyTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Rendering::ZoneShaderSettings::*)(int, ::GorillaTag::Rendering::ZoneShaderSettings::EOverrideMode, ::UnityEngine::Texture2D*, ::UnityEngine::Texture2D*)>(&GorillaTag::Rendering::ZoneShaderSettings::ApplyTexture)> {
  static const MethodInfo* get() {
    static auto* shaderProp = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* overrideMode = &::il2cpp_utils::GetClassFromName("GorillaTag.Rendering", "ZoneShaderSettings/EOverrideMode")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture2D")->byval_arg;
    static auto* defaultValue = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture2D")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Rendering::ZoneShaderSettings*), "ApplyTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shaderProp, overrideMode, value, defaultValue});
  }
};
// Writing MetadataGetter for method: GorillaTag::Rendering::ZoneShaderSettings::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GorillaTag::Rendering::ZoneShaderSettings::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GorillaTag::Rendering::ZoneShaderSettings::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Rendering::ZoneShaderSettings*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
