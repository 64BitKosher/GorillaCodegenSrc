// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.ParticleSystem/EmissionModule
#include "UnityEngine/ParticleSystem_EmissionModule.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: ParticleSystem because it is already included!
}
// Completed forward declares
// Type namespace: GorillaTag.Rendering
namespace GorillaTag::Rendering {
  // Forward declaring type: PFXExtraAnimControls
  class PFXExtraAnimControls;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaTag::Rendering::PFXExtraAnimControls);
DEFINE_IL2CPP_ARG_TYPE(::GorillaTag::Rendering::PFXExtraAnimControls*, "GorillaTag.Rendering", "PFXExtraAnimControls");
// Type namespace: GorillaTag.Rendering
namespace GorillaTag::Rendering {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: GorillaTag.Rendering.PFXExtraAnimControls
  // [TokenAttribute] Offset: FFFFFFFF
  class PFXExtraAnimControls : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.Single emitRateMult
    // Size: 0x4
    // Offset: 0x20
    float emitRateMult;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single emitBurstProbabilityMult
    // Size: 0x4
    // Offset: 0x24
    float emitBurstProbabilityMult;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.ParticleSystem[] particleSystems
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::UnityEngine::ParticleSystem*> particleSystems;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::ParticleSystem*>) == 0x8);
    // private UnityEngine.ParticleSystem/EmissionModule[] emissionModules
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::UnityEngine::ParticleSystem::EmissionModule> emissionModules;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::ParticleSystem::EmissionModule>) == 0x8);
    // private UnityEngine.ParticleSystem/Burst[][] cachedEmitBursts
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<::ArrayW<::UnityEngine::ParticleSystem::Burst>> cachedEmitBursts;
    // Field size check
    static_assert(sizeof(::ArrayW<::ArrayW<::UnityEngine::ParticleSystem::Burst>>) == 0x8);
    // private UnityEngine.ParticleSystem/Burst[][] adjustedEmitBursts
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<::ArrayW<::UnityEngine::ParticleSystem::Burst>> adjustedEmitBursts;
    // Field size check
    static_assert(sizeof(::ArrayW<::ArrayW<::UnityEngine::ParticleSystem::Burst>>) == 0x8);
    public:
    // Get instance field reference: public System.Single emitRateMult
    [[deprecated("Use field access instead!")]] float& dyn_emitRateMult();
    // Get instance field reference: public System.Single emitBurstProbabilityMult
    [[deprecated("Use field access instead!")]] float& dyn_emitBurstProbabilityMult();
    // Get instance field reference: private UnityEngine.ParticleSystem[] particleSystems
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::ParticleSystem*>& dyn_particleSystems();
    // Get instance field reference: private UnityEngine.ParticleSystem/EmissionModule[] emissionModules
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::ParticleSystem::EmissionModule>& dyn_emissionModules();
    // Get instance field reference: private UnityEngine.ParticleSystem/Burst[][] cachedEmitBursts
    [[deprecated("Use field access instead!")]] ::ArrayW<::ArrayW<::UnityEngine::ParticleSystem::Burst>>& dyn_cachedEmitBursts();
    // Get instance field reference: private UnityEngine.ParticleSystem/Burst[][] adjustedEmitBursts
    [[deprecated("Use field access instead!")]] ::ArrayW<::ArrayW<::UnityEngine::ParticleSystem::Burst>>& dyn_adjustedEmitBursts();
    // protected System.Void Awake()
    // Offset: 0x28AECCC
    void Awake();
    // protected System.Void LateUpdate()
    // Offset: 0x28AF03C
    void LateUpdate();
    // public System.Void .ctor()
    // Offset: 0x28AF1D4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PFXExtraAnimControls* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaTag::Rendering::PFXExtraAnimControls::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PFXExtraAnimControls*, creationType>()));
    }
  }; // GorillaTag.Rendering.PFXExtraAnimControls
  #pragma pack(pop)
  static check_size<sizeof(PFXExtraAnimControls), 64 + sizeof(::ArrayW<::ArrayW<::UnityEngine::ParticleSystem::Burst>>)> __GorillaTag_Rendering_PFXExtraAnimControlsSizeCheck;
  static_assert(sizeof(PFXExtraAnimControls) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaTag::Rendering::PFXExtraAnimControls::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Rendering::PFXExtraAnimControls::*)()>(&GorillaTag::Rendering::PFXExtraAnimControls::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Rendering::PFXExtraAnimControls*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Rendering::PFXExtraAnimControls::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Rendering::PFXExtraAnimControls::*)()>(&GorillaTag::Rendering::PFXExtraAnimControls::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Rendering::PFXExtraAnimControls*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Rendering::PFXExtraAnimControls::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
