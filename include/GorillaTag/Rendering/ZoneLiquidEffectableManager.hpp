// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: GorillaTag::Rendering
namespace GorillaTag::Rendering {
  // Forward declaring type: ZoneLiquidEffectable
  class ZoneLiquidEffectable;
}
// Completed forward declares
// Type namespace: GorillaTag.Rendering
namespace GorillaTag::Rendering {
  // Forward declaring type: ZoneLiquidEffectableManager
  class ZoneLiquidEffectableManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaTag::Rendering::ZoneLiquidEffectableManager);
DEFINE_IL2CPP_ARG_TYPE(::GorillaTag::Rendering::ZoneLiquidEffectableManager*, "GorillaTag.Rendering", "ZoneLiquidEffectableManager");
// Type namespace: GorillaTag.Rendering
namespace GorillaTag::Rendering {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: GorillaTag.Rendering.ZoneLiquidEffectableManager
  // [TokenAttribute] Offset: FFFFFFFF
  class ZoneLiquidEffectableManager : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private readonly System.Collections.Generic.List`1<GorillaTag.Rendering.ZoneLiquidEffectable> zoneLiquidEffectables
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::GorillaTag::Rendering::ZoneLiquidEffectable*>* zoneLiquidEffectables;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GorillaTag::Rendering::ZoneLiquidEffectable*>*) == 0x8);
    public:
    // Get static field: static private GorillaTag.Rendering.ZoneLiquidEffectableManager <instance>k__BackingField
    static ::GorillaTag::Rendering::ZoneLiquidEffectableManager* _get_$instance$k__BackingField();
    // Set static field: static private GorillaTag.Rendering.ZoneLiquidEffectableManager <instance>k__BackingField
    static void _set_$instance$k__BackingField(::GorillaTag::Rendering::ZoneLiquidEffectableManager* value);
    // Get static field: static private System.Boolean <hasInstance>k__BackingField
    static bool _get_$hasInstance$k__BackingField();
    // Set static field: static private System.Boolean <hasInstance>k__BackingField
    static void _set_$hasInstance$k__BackingField(bool value);
    // Get instance field reference: private readonly System.Collections.Generic.List`1<GorillaTag.Rendering.ZoneLiquidEffectable> zoneLiquidEffectables
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GorillaTag::Rendering::ZoneLiquidEffectable*>*& dyn_zoneLiquidEffectables();
    // static public GorillaTag.Rendering.ZoneLiquidEffectableManager get_instance()
    // Offset: 0x28AF258
    static ::GorillaTag::Rendering::ZoneLiquidEffectableManager* get_instance();
    // static private System.Void set_instance(GorillaTag.Rendering.ZoneLiquidEffectableManager value)
    // Offset: 0x28AF2A0
    static void set_instance(::GorillaTag::Rendering::ZoneLiquidEffectableManager* value);
    // static public System.Boolean get_hasInstance()
    // Offset: 0x28AF2F8
    static bool get_hasInstance();
    // static private System.Void set_hasInstance(System.Boolean value)
    // Offset: 0x28AF340
    static void set_hasInstance(bool value);
    // protected System.Void Awake()
    // Offset: 0x28AF390
    void Awake();
    // protected System.Void OnDestroy()
    // Offset: 0x28AF5B0
    void OnDestroy();
    // protected System.Void LateUpdate()
    // Offset: 0x28AF6B4
    void LateUpdate();
    // static private System.Void CreateManager()
    // Offset: 0x28AFA74
    static void CreateManager();
    // static private System.Void SetInstance(GorillaTag.Rendering.ZoneLiquidEffectableManager manager)
    // Offset: 0x28AF49C
    static void SetInstance(::GorillaTag::Rendering::ZoneLiquidEffectableManager* manager);
    // static public System.Void Register(GorillaTag.Rendering.ZoneLiquidEffectable effect)
    // Offset: 0x28AFB04
    static void Register(::GorillaTag::Rendering::ZoneLiquidEffectable* effect);
    // static public System.Void Unregister(GorillaTag.Rendering.ZoneLiquidEffectable effect)
    // Offset: 0x28AFE34
    static void Unregister(::GorillaTag::Rendering::ZoneLiquidEffectable* effect);
    // public System.Void .ctor()
    // Offset: 0x28AFEC0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ZoneLiquidEffectableManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaTag::Rendering::ZoneLiquidEffectableManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ZoneLiquidEffectableManager*, creationType>()));
    }
  }; // GorillaTag.Rendering.ZoneLiquidEffectableManager
  #pragma pack(pop)
  static check_size<sizeof(ZoneLiquidEffectableManager), 32 + sizeof(::System::Collections::Generic::List_1<::GorillaTag::Rendering::ZoneLiquidEffectable*>*)> __GorillaTag_Rendering_ZoneLiquidEffectableManagerSizeCheck;
  static_assert(sizeof(ZoneLiquidEffectableManager) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaTag::Rendering::ZoneLiquidEffectableManager::get_instance
// Il2CppName: get_instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GorillaTag::Rendering::ZoneLiquidEffectableManager* (*)()>(&GorillaTag::Rendering::ZoneLiquidEffectableManager::get_instance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Rendering::ZoneLiquidEffectableManager*), "get_instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Rendering::ZoneLiquidEffectableManager::set_instance
// Il2CppName: set_instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GorillaTag::Rendering::ZoneLiquidEffectableManager*)>(&GorillaTag::Rendering::ZoneLiquidEffectableManager::set_instance)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("GorillaTag.Rendering", "ZoneLiquidEffectableManager")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Rendering::ZoneLiquidEffectableManager*), "set_instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GorillaTag::Rendering::ZoneLiquidEffectableManager::get_hasInstance
// Il2CppName: get_hasInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GorillaTag::Rendering::ZoneLiquidEffectableManager::get_hasInstance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Rendering::ZoneLiquidEffectableManager*), "get_hasInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Rendering::ZoneLiquidEffectableManager::set_hasInstance
// Il2CppName: set_hasInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&GorillaTag::Rendering::ZoneLiquidEffectableManager::set_hasInstance)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Rendering::ZoneLiquidEffectableManager*), "set_hasInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GorillaTag::Rendering::ZoneLiquidEffectableManager::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Rendering::ZoneLiquidEffectableManager::*)()>(&GorillaTag::Rendering::ZoneLiquidEffectableManager::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Rendering::ZoneLiquidEffectableManager*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Rendering::ZoneLiquidEffectableManager::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Rendering::ZoneLiquidEffectableManager::*)()>(&GorillaTag::Rendering::ZoneLiquidEffectableManager::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Rendering::ZoneLiquidEffectableManager*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Rendering::ZoneLiquidEffectableManager::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Rendering::ZoneLiquidEffectableManager::*)()>(&GorillaTag::Rendering::ZoneLiquidEffectableManager::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Rendering::ZoneLiquidEffectableManager*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Rendering::ZoneLiquidEffectableManager::CreateManager
// Il2CppName: CreateManager
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GorillaTag::Rendering::ZoneLiquidEffectableManager::CreateManager)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Rendering::ZoneLiquidEffectableManager*), "CreateManager", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Rendering::ZoneLiquidEffectableManager::SetInstance
// Il2CppName: SetInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GorillaTag::Rendering::ZoneLiquidEffectableManager*)>(&GorillaTag::Rendering::ZoneLiquidEffectableManager::SetInstance)> {
  static const MethodInfo* get() {
    static auto* manager = &::il2cpp_utils::GetClassFromName("GorillaTag.Rendering", "ZoneLiquidEffectableManager")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Rendering::ZoneLiquidEffectableManager*), "SetInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{manager});
  }
};
// Writing MetadataGetter for method: GorillaTag::Rendering::ZoneLiquidEffectableManager::Register
// Il2CppName: Register
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GorillaTag::Rendering::ZoneLiquidEffectable*)>(&GorillaTag::Rendering::ZoneLiquidEffectableManager::Register)> {
  static const MethodInfo* get() {
    static auto* effect = &::il2cpp_utils::GetClassFromName("GorillaTag.Rendering", "ZoneLiquidEffectable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Rendering::ZoneLiquidEffectableManager*), "Register", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{effect});
  }
};
// Writing MetadataGetter for method: GorillaTag::Rendering::ZoneLiquidEffectableManager::Unregister
// Il2CppName: Unregister
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GorillaTag::Rendering::ZoneLiquidEffectable*)>(&GorillaTag::Rendering::ZoneLiquidEffectableManager::Unregister)> {
  static const MethodInfo* get() {
    static auto* effect = &::il2cpp_utils::GetClassFromName("GorillaTag.Rendering", "ZoneLiquidEffectable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Rendering::ZoneLiquidEffectableManager*), "Unregister", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{effect});
  }
};
// Writing MetadataGetter for method: GorillaTag::Rendering::ZoneLiquidEffectableManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
