// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.ParticleSystem/TriggerModule
#include "UnityEngine/ParticleSystem_TriggerModule.hpp"
// Including type: UnityEngine.ParticleSystem/EmissionModule
#include "UnityEngine/ParticleSystem_EmissionModule.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: ParticleSystem because it is already included!
  // Forward declaring type: Collider
  class Collider;
}
// Completed forward declares
// Type namespace: GorillaTag.Rendering
namespace GorillaTag::Rendering {
  // Forward declaring type: WaterBubbleParticleVolumeCollector
  class WaterBubbleParticleVolumeCollector;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaTag::Rendering::WaterBubbleParticleVolumeCollector);
DEFINE_IL2CPP_ARG_TYPE(::GorillaTag::Rendering::WaterBubbleParticleVolumeCollector*, "GorillaTag.Rendering", "WaterBubbleParticleVolumeCollector");
// Type namespace: GorillaTag.Rendering
namespace GorillaTag::Rendering {
  // Size: 0x41
  #pragma pack(push, 1)
  // Autogenerated type: GorillaTag.Rendering.WaterBubbleParticleVolumeCollector
  // [TokenAttribute] Offset: FFFFFFFF
  class WaterBubbleParticleVolumeCollector : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.ParticleSystem[] particleSystems
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::UnityEngine::ParticleSystem*> particleSystems;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::ParticleSystem*>) == 0x8);
    // private UnityEngine.ParticleSystem/TriggerModule[] particleTriggerModules
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::UnityEngine::ParticleSystem::TriggerModule> particleTriggerModules;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::ParticleSystem::TriggerModule>) == 0x8);
    // private UnityEngine.ParticleSystem/EmissionModule[] particleEmissionModules
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::UnityEngine::ParticleSystem::EmissionModule> particleEmissionModules;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::ParticleSystem::EmissionModule>) == 0x8);
    // private UnityEngine.Collider[] bubbleableVolumeColliders
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<::UnityEngine::Collider*> bubbleableVolumeColliders;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Collider*>) == 0x8);
    // private System.Boolean emissionEnabled
    // Size: 0x1
    // Offset: 0x40
    bool emissionEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: public UnityEngine.ParticleSystem[] particleSystems
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::ParticleSystem*>& dyn_particleSystems();
    // Get instance field reference: private UnityEngine.ParticleSystem/TriggerModule[] particleTriggerModules
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::ParticleSystem::TriggerModule>& dyn_particleTriggerModules();
    // Get instance field reference: private UnityEngine.ParticleSystem/EmissionModule[] particleEmissionModules
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::ParticleSystem::EmissionModule>& dyn_particleEmissionModules();
    // Get instance field reference: private UnityEngine.Collider[] bubbleableVolumeColliders
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Collider*>& dyn_bubbleableVolumeColliders();
    // Get instance field reference: private System.Boolean emissionEnabled
    [[deprecated("Use field access instead!")]] bool& dyn_emissionEnabled();
    // protected System.Void Awake()
    // Offset: 0x28ADF40
    void Awake();
    // protected System.Void LateUpdate()
    // Offset: 0x28AE620
    void LateUpdate();
    // private System.Void SetEmissionState(System.Boolean setEnabled)
    // Offset: 0x28AE58C
    void SetEmissionState(bool setEnabled);
    // public System.Void .ctor()
    // Offset: 0x28AE6A8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WaterBubbleParticleVolumeCollector* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaTag::Rendering::WaterBubbleParticleVolumeCollector::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WaterBubbleParticleVolumeCollector*, creationType>()));
    }
  }; // GorillaTag.Rendering.WaterBubbleParticleVolumeCollector
  #pragma pack(pop)
  static check_size<sizeof(WaterBubbleParticleVolumeCollector), 64 + sizeof(bool)> __GorillaTag_Rendering_WaterBubbleParticleVolumeCollectorSizeCheck;
  static_assert(sizeof(WaterBubbleParticleVolumeCollector) == 0x41);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaTag::Rendering::WaterBubbleParticleVolumeCollector::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Rendering::WaterBubbleParticleVolumeCollector::*)()>(&GorillaTag::Rendering::WaterBubbleParticleVolumeCollector::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Rendering::WaterBubbleParticleVolumeCollector*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Rendering::WaterBubbleParticleVolumeCollector::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Rendering::WaterBubbleParticleVolumeCollector::*)()>(&GorillaTag::Rendering::WaterBubbleParticleVolumeCollector::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Rendering::WaterBubbleParticleVolumeCollector*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::Rendering::WaterBubbleParticleVolumeCollector::SetEmissionState
// Il2CppName: SetEmissionState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::Rendering::WaterBubbleParticleVolumeCollector::*)(bool)>(&GorillaTag::Rendering::WaterBubbleParticleVolumeCollector::SetEmissionState)> {
  static const MethodInfo* get() {
    static auto* setEnabled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::Rendering::WaterBubbleParticleVolumeCollector*), "SetEmissionState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{setEnabled});
  }
};
// Writing MetadataGetter for method: GorillaTag::Rendering::WaterBubbleParticleVolumeCollector::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
