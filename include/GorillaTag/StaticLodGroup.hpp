// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: GorillaTag
namespace GorillaTag {
  // Forward declaring type: StaticLodGroup
  class StaticLodGroup;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaTag::StaticLodGroup);
DEFINE_IL2CPP_ARG_TYPE(::GorillaTag::StaticLodGroup*, "GorillaTag", "StaticLodGroup");
// Type namespace: GorillaTag
namespace GorillaTag {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: GorillaTag.StaticLodGroup
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultExecutionOrder] Offset: FFFFFFFF
  class StaticLodGroup : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private System.Int32 index
    // Size: 0x4
    // Offset: 0x20
    int index;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single collisionEnableDistance
    // Size: 0x4
    // Offset: 0x24
    float collisionEnableDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single uiFadeDistanceMin
    // Size: 0x4
    // Offset: 0x28
    float uiFadeDistanceMin;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single uiFadeDistanceMax
    // Size: 0x4
    // Offset: 0x2C
    float uiFadeDistanceMax;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: private System.Int32 index
    [[deprecated("Use field access instead!")]] int& dyn_index();
    // Get instance field reference: public System.Single collisionEnableDistance
    [[deprecated("Use field access instead!")]] float& dyn_collisionEnableDistance();
    // Get instance field reference: public System.Single uiFadeDistanceMin
    [[deprecated("Use field access instead!")]] float& dyn_uiFadeDistanceMin();
    // Get instance field reference: public System.Single uiFadeDistanceMax
    [[deprecated("Use field access instead!")]] float& dyn_uiFadeDistanceMax();
    // protected System.Void Awake()
    // Offset: 0x287A360
    void Awake();
    // protected System.Void OnEnable()
    // Offset: 0x287AF58
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x287B13C
    void OnDisable();
    // private System.Void OnDestroy()
    // Offset: 0x287B198
    void OnDestroy();
    // public System.Void .ctor()
    // Offset: 0x287B30C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StaticLodGroup* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaTag::StaticLodGroup::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StaticLodGroup*, creationType>()));
    }
  }; // GorillaTag.StaticLodGroup
  #pragma pack(pop)
  static check_size<sizeof(StaticLodGroup), 44 + sizeof(float)> __GorillaTag_StaticLodGroupSizeCheck;
  static_assert(sizeof(StaticLodGroup) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaTag::StaticLodGroup::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::StaticLodGroup::*)()>(&GorillaTag::StaticLodGroup::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::StaticLodGroup*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::StaticLodGroup::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::StaticLodGroup::*)()>(&GorillaTag::StaticLodGroup::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::StaticLodGroup*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::StaticLodGroup::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::StaticLodGroup::*)()>(&GorillaTag::StaticLodGroup::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::StaticLodGroup*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::StaticLodGroup::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::StaticLodGroup::*)()>(&GorillaTag::StaticLodGroup::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::StaticLodGroup*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::StaticLodGroup::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
