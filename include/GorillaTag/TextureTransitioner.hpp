// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: GorillaTag.IResettableItem
#include "GorillaTag/IResettableItem.hpp"
// Including type: GorillaExtensions.GorillaMath/RemapFloatInfo
#include "GorillaExtensions/GorillaMath_RemapFloatInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Texture
  class Texture;
  // Forward declaring type: Renderer
  class Renderer;
}
// Forward declaring namespace: GorillaTag
namespace GorillaTag {
  // Forward declaring type: IDynamicFloat
  class IDynamicFloat;
}
// Completed forward declares
// Type namespace: GorillaTag
namespace GorillaTag {
  // Forward declaring type: TextureTransitioner
  class TextureTransitioner;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaTag::TextureTransitioner);
DEFINE_IL2CPP_ARG_TYPE(::GorillaTag::TextureTransitioner*, "GorillaTag", "TextureTransitioner");
// Type namespace: GorillaTag
namespace GorillaTag {
  // Size: 0x9C
  #pragma pack(push, 1)
  // Autogenerated type: GorillaTag.TextureTransitioner
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExecuteAlways] Offset: FFFFFFFF
  class TextureTransitioner : public ::UnityEngine::MonoBehaviour/*, public ::GorillaTag::IResettableItem*/ {
    public:
    // Nested type: ::GorillaTag::TextureTransitioner::DirectionRetentionMode
    struct DirectionRetentionMode;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: GorillaTag.TextureTransitioner/DirectionRetentionMode
    // [TokenAttribute] Offset: FFFFFFFF
    struct DirectionRetentionMode/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: DirectionRetentionMode
      constexpr DirectionRetentionMode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public GorillaTag.TextureTransitioner/DirectionRetentionMode None
      static constexpr const int None = 0;
      // Get static field: static public GorillaTag.TextureTransitioner/DirectionRetentionMode None
      static ::GorillaTag::TextureTransitioner::DirectionRetentionMode _get_None();
      // Set static field: static public GorillaTag.TextureTransitioner/DirectionRetentionMode None
      static void _set_None(::GorillaTag::TextureTransitioner::DirectionRetentionMode value);
      // static field const value: static public GorillaTag.TextureTransitioner/DirectionRetentionMode IncreaseOnly
      static constexpr const int IncreaseOnly = 1;
      // Get static field: static public GorillaTag.TextureTransitioner/DirectionRetentionMode IncreaseOnly
      static ::GorillaTag::TextureTransitioner::DirectionRetentionMode _get_IncreaseOnly();
      // Set static field: static public GorillaTag.TextureTransitioner/DirectionRetentionMode IncreaseOnly
      static void _set_IncreaseOnly(::GorillaTag::TextureTransitioner::DirectionRetentionMode value);
      // static field const value: static public GorillaTag.TextureTransitioner/DirectionRetentionMode DecreaseOnly
      static constexpr const int DecreaseOnly = 2;
      // Get static field: static public GorillaTag.TextureTransitioner/DirectionRetentionMode DecreaseOnly
      static ::GorillaTag::TextureTransitioner::DirectionRetentionMode _get_DecreaseOnly();
      // Set static field: static public GorillaTag.TextureTransitioner/DirectionRetentionMode DecreaseOnly
      static void _set_DecreaseOnly(::GorillaTag::TextureTransitioner::DirectionRetentionMode value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // GorillaTag.TextureTransitioner/DirectionRetentionMode
    #pragma pack(pop)
    static check_size<sizeof(TextureTransitioner::DirectionRetentionMode), 0 + sizeof(int)> __GorillaTag_TextureTransitioner_DirectionRetentionModeSizeCheck;
    static_assert(sizeof(TextureTransitioner::DirectionRetentionMode) == 0x4);
    public:
    // public System.Boolean editorPreview
    // Size: 0x1
    // Offset: 0x20
    bool editorPreview;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: editorPreview and: dynamicFloatComponent
    char __padding0[0x7] = {};
    // public UnityEngine.MonoBehaviour dynamicFloatComponent
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::MonoBehaviour* dynamicFloatComponent;
    // Field size check
    static_assert(sizeof(::UnityEngine::MonoBehaviour*) == 0x8);
    // public GorillaExtensions.GorillaMath/RemapFloatInfo remapInfo
    // Size: 0x10
    // Offset: 0x30
    ::GorillaExtensions::GorillaMath::RemapFloatInfo remapInfo;
    // Field size check
    static_assert(sizeof(::GorillaExtensions::GorillaMath::RemapFloatInfo) == 0x10);
    // public GorillaTag.TextureTransitioner/DirectionRetentionMode directionRetentionMode
    // Size: 0x4
    // Offset: 0x40
    ::GorillaTag::TextureTransitioner::DirectionRetentionMode directionRetentionMode;
    // Field size check
    static_assert(sizeof(::GorillaTag::TextureTransitioner::DirectionRetentionMode) == 0x4);
    // Padding between fields: directionRetentionMode and: texTransitionShaderParamName
    char __padding3[0x4] = {};
    // public System.String texTransitionShaderParamName
    // Size: 0x8
    // Offset: 0x48
    ::StringW texTransitionShaderParamName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String tex1ShaderParamName
    // Size: 0x8
    // Offset: 0x50
    ::StringW tex1ShaderParamName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String tex2ShaderParamName
    // Size: 0x8
    // Offset: 0x58
    ::StringW tex2ShaderParamName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public UnityEngine.Texture[] textures
    // Size: 0x8
    // Offset: 0x60
    ::ArrayW<::UnityEngine::Texture*> textures;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Texture*>) == 0x8);
    // public UnityEngine.Renderer[] renderers
    // Size: 0x8
    // Offset: 0x68
    ::ArrayW<::UnityEngine::Renderer*> renderers;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Renderer*>) == 0x8);
    // private System.Boolean wasReset
    // Size: 0x1
    // Offset: 0x70
    bool wasReset;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: wasReset and: iDynamicFloat
    char __padding9[0x7] = {};
    // public GorillaTag.IDynamicFloat iDynamicFloat
    // Size: 0x8
    // Offset: 0x78
    ::GorillaTag::IDynamicFloat* iDynamicFloat;
    // Field size check
    static_assert(sizeof(::GorillaTag::IDynamicFloat*) == 0x8);
    // public System.Int32 texTransitionShaderParam
    // Size: 0x4
    // Offset: 0x80
    int texTransitionShaderParam;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 tex1ShaderParam
    // Size: 0x4
    // Offset: 0x84
    int tex1ShaderParam;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 tex2ShaderParam
    // Size: 0x4
    // Offset: 0x88
    int tex2ShaderParam;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single normalizedValue
    // Size: 0x4
    // Offset: 0x8C
    float normalizedValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 transitionPercent
    // Size: 0x4
    // Offset: 0x90
    int transitionPercent;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 tex1Index
    // Size: 0x4
    // Offset: 0x94
    int tex1Index;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 tex2Index
    // Size: 0x4
    // Offset: 0x98
    int tex2Index;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating interface conversion operator: operator ::GorillaTag::IResettableItem
    operator ::GorillaTag::IResettableItem() noexcept {
      return *reinterpret_cast<::GorillaTag::IResettableItem*>(this);
    }
    // Get instance field reference: public System.Boolean editorPreview
    [[deprecated("Use field access instead!")]] bool& dyn_editorPreview();
    // Get instance field reference: public UnityEngine.MonoBehaviour dynamicFloatComponent
    [[deprecated("Use field access instead!")]] ::UnityEngine::MonoBehaviour*& dyn_dynamicFloatComponent();
    // Get instance field reference: public GorillaExtensions.GorillaMath/RemapFloatInfo remapInfo
    [[deprecated("Use field access instead!")]] ::GorillaExtensions::GorillaMath::RemapFloatInfo& dyn_remapInfo();
    // Get instance field reference: public GorillaTag.TextureTransitioner/DirectionRetentionMode directionRetentionMode
    [[deprecated("Use field access instead!")]] ::GorillaTag::TextureTransitioner::DirectionRetentionMode& dyn_directionRetentionMode();
    // Get instance field reference: public System.String texTransitionShaderParamName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_texTransitionShaderParamName();
    // Get instance field reference: public System.String tex1ShaderParamName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_tex1ShaderParamName();
    // Get instance field reference: public System.String tex2ShaderParamName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_tex2ShaderParamName();
    // Get instance field reference: public UnityEngine.Texture[] textures
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Texture*>& dyn_textures();
    // Get instance field reference: public UnityEngine.Renderer[] renderers
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Renderer*>& dyn_renderers();
    // Get instance field reference: private System.Boolean wasReset
    [[deprecated("Use field access instead!")]] bool& dyn_wasReset();
    // Get instance field reference: public GorillaTag.IDynamicFloat iDynamicFloat
    [[deprecated("Use field access instead!")]] ::GorillaTag::IDynamicFloat*& dyn_iDynamicFloat();
    // Get instance field reference: public System.Int32 texTransitionShaderParam
    [[deprecated("Use field access instead!")]] int& dyn_texTransitionShaderParam();
    // Get instance field reference: public System.Int32 tex1ShaderParam
    [[deprecated("Use field access instead!")]] int& dyn_tex1ShaderParam();
    // Get instance field reference: public System.Int32 tex2ShaderParam
    [[deprecated("Use field access instead!")]] int& dyn_tex2ShaderParam();
    // Get instance field reference: public System.Single normalizedValue
    [[deprecated("Use field access instead!")]] float& dyn_normalizedValue();
    // Get instance field reference: public System.Int32 transitionPercent
    [[deprecated("Use field access instead!")]] int& dyn_transitionPercent();
    // Get instance field reference: public System.Int32 tex1Index
    [[deprecated("Use field access instead!")]] int& dyn_tex1Index();
    // Get instance field reference: public System.Int32 tex2Index
    [[deprecated("Use field access instead!")]] int& dyn_tex2Index();
    // protected System.Void Awake()
    // Offset: 0x287B970
    void Awake();
    // protected System.Void OnEnable()
    // Offset: 0x287BCA8
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x287C134
    void OnDisable();
    // private System.Void RefreshShaderParams()
    // Offset: 0x287BC4C
    void RefreshShaderParams();
    // public System.Void ResetToDefaultState()
    // Offset: 0x287BC94
    void ResetToDefaultState();
    // public System.Void .ctor()
    // Offset: 0x287C208
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TextureTransitioner* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaTag::TextureTransitioner::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TextureTransitioner*, creationType>()));
    }
  }; // GorillaTag.TextureTransitioner
  #pragma pack(pop)
  static check_size<sizeof(TextureTransitioner), 152 + sizeof(int)> __GorillaTag_TextureTransitionerSizeCheck;
  static_assert(sizeof(TextureTransitioner) == 0x9C);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GorillaTag::TextureTransitioner::DirectionRetentionMode, "GorillaTag", "TextureTransitioner/DirectionRetentionMode");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaTag::TextureTransitioner::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::TextureTransitioner::*)()>(&GorillaTag::TextureTransitioner::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::TextureTransitioner*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::TextureTransitioner::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::TextureTransitioner::*)()>(&GorillaTag::TextureTransitioner::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::TextureTransitioner*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::TextureTransitioner::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::TextureTransitioner::*)()>(&GorillaTag::TextureTransitioner::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::TextureTransitioner*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::TextureTransitioner::RefreshShaderParams
// Il2CppName: RefreshShaderParams
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::TextureTransitioner::*)()>(&GorillaTag::TextureTransitioner::RefreshShaderParams)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::TextureTransitioner*), "RefreshShaderParams", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::TextureTransitioner::ResetToDefaultState
// Il2CppName: ResetToDefaultState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::TextureTransitioner::*)()>(&GorillaTag::TextureTransitioner::ResetToDefaultState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::TextureTransitioner*), "ResetToDefaultState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::TextureTransitioner::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
