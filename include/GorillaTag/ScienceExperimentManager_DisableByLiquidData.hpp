// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: GorillaTag.ScienceExperimentManager
#include "GorillaTag/ScienceExperimentManager.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GorillaTag::ScienceExperimentManager::DisableByLiquidData, "GorillaTag", "ScienceExperimentManager/DisableByLiquidData");
// Type namespace: GorillaTag
namespace GorillaTag {
  // Size: 0xC
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: GorillaTag.ScienceExperimentManager/DisableByLiquidData
  // [TokenAttribute] Offset: FFFFFFFF
  struct ScienceExperimentManager::DisableByLiquidData/*, public ::System::ValueType*/ {
    public:
    public:
    // public UnityEngine.Transform target
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::Transform* target;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public System.Single heightOffset
    // Size: 0x4
    // Offset: 0x8
    float heightOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating value type constructor for type: DisableByLiquidData
    constexpr DisableByLiquidData(::UnityEngine::Transform* target_ = {}, float heightOffset_ = {}) noexcept : target{target_}, heightOffset{heightOffset_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public UnityEngine.Transform target
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_target();
    // Get instance field reference: public System.Single heightOffset
    [[deprecated("Use field access instead!")]] float& dyn_heightOffset();
  }; // GorillaTag.ScienceExperimentManager/DisableByLiquidData
  #pragma pack(pop)
  static check_size<sizeof(ScienceExperimentManager::DisableByLiquidData), 8 + sizeof(float)> __GorillaTag_ScienceExperimentManager_DisableByLiquidDataSizeCheck;
  static_assert(sizeof(ScienceExperimentManager::DisableByLiquidData) == 0xC);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
