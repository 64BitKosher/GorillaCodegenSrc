// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GorillaTag::GuidedRefs
namespace GorillaTag::GuidedRefs {
  // Forward declaring type: GuidedRefTargetIdSO
  class GuidedRefTargetIdSO;
  // Forward declaring type: GuidedRefHubIdSO
  class GuidedRefHubIdSO;
}
// Completed forward declares
// Type namespace: GorillaTag.GuidedRefs
namespace GorillaTag::GuidedRefs {
  // Forward declaring type: GuidedRefBasicTargetInfo
  struct GuidedRefBasicTargetInfo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GorillaTag::GuidedRefs::GuidedRefBasicTargetInfo, "GorillaTag.GuidedRefs", "GuidedRefBasicTargetInfo");
// Type namespace: GorillaTag.GuidedRefs
namespace GorillaTag::GuidedRefs {
  // Size: 0x11
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: GorillaTag.GuidedRefs.GuidedRefBasicTargetInfo
  // [TokenAttribute] Offset: FFFFFFFF
  struct GuidedRefBasicTargetInfo/*, public ::System::ValueType*/ {
    public:
    public:
    // public GorillaTag.GuidedRefs.GuidedRefTargetIdSO targetId
    // Size: 0x8
    // Offset: 0x0
    ::GorillaTag::GuidedRefs::GuidedRefTargetIdSO* targetId;
    // Field size check
    static_assert(sizeof(::GorillaTag::GuidedRefs::GuidedRefTargetIdSO*) == 0x8);
    // public GorillaTag.GuidedRefs.GuidedRefHubIdSO[] hubIds
    // Size: 0x8
    // Offset: 0x8
    ::ArrayW<::GorillaTag::GuidedRefs::GuidedRefHubIdSO*> hubIds;
    // Field size check
    static_assert(sizeof(::ArrayW<::GorillaTag::GuidedRefs::GuidedRefHubIdSO*>) == 0x8);
    // public System.Boolean hackIgnoreDuplicateRegistration
    // Size: 0x1
    // Offset: 0x10
    bool hackIgnoreDuplicateRegistration;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating value type constructor for type: GuidedRefBasicTargetInfo
    constexpr GuidedRefBasicTargetInfo(::GorillaTag::GuidedRefs::GuidedRefTargetIdSO* targetId_ = {}, ::ArrayW<::GorillaTag::GuidedRefs::GuidedRefHubIdSO*> hubIds_ = ::ArrayW<::GorillaTag::GuidedRefs::GuidedRefHubIdSO*>(static_cast<void*>(nullptr)), bool hackIgnoreDuplicateRegistration_ = {}) noexcept : targetId{targetId_}, hubIds{hubIds_}, hackIgnoreDuplicateRegistration{hackIgnoreDuplicateRegistration_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public GorillaTag.GuidedRefs.GuidedRefTargetIdSO targetId
    [[deprecated("Use field access instead!")]] ::GorillaTag::GuidedRefs::GuidedRefTargetIdSO*& dyn_targetId();
    // Get instance field reference: public GorillaTag.GuidedRefs.GuidedRefHubIdSO[] hubIds
    [[deprecated("Use field access instead!")]] ::ArrayW<::GorillaTag::GuidedRefs::GuidedRefHubIdSO*>& dyn_hubIds();
    // Get instance field reference: public System.Boolean hackIgnoreDuplicateRegistration
    [[deprecated("Use field access instead!")]] bool& dyn_hackIgnoreDuplicateRegistration();
  }; // GorillaTag.GuidedRefs.GuidedRefBasicTargetInfo
  #pragma pack(pop)
  static check_size<sizeof(GuidedRefBasicTargetInfo), 16 + sizeof(bool)> __GorillaTag_GuidedRefs_GuidedRefBasicTargetInfoSizeCheck;
  static_assert(sizeof(GuidedRefBasicTargetInfo) == 0x11);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
