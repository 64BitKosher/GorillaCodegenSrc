// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GorillaTag::GuidedRefs
namespace GorillaTag::GuidedRefs {
  // Forward declaring type: IGuidedRefTargetMono
  class IGuidedRefTargetMono;
}
// Completed forward declares
// Type namespace: GorillaTag.GuidedRefs
namespace GorillaTag::GuidedRefs {
  // Forward declaring type: GuidedRefTryResolveInfo
  struct GuidedRefTryResolveInfo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GorillaTag::GuidedRefs::GuidedRefTryResolveInfo, "GorillaTag.GuidedRefs", "GuidedRefTryResolveInfo");
// Type namespace: GorillaTag.GuidedRefs
namespace GorillaTag::GuidedRefs {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: GorillaTag.GuidedRefs.GuidedRefTryResolveInfo
  // [TokenAttribute] Offset: FFFFFFFF
  struct GuidedRefTryResolveInfo/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Int32 fieldId
    // Size: 0x4
    // Offset: 0x0
    int fieldId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 index
    // Size: 0x4
    // Offset: 0x4
    int index;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public GorillaTag.GuidedRefs.IGuidedRefTargetMono targetMono
    // Size: 0x8
    // Offset: 0x8
    ::GorillaTag::GuidedRefs::IGuidedRefTargetMono* targetMono;
    // Field size check
    static_assert(sizeof(::GorillaTag::GuidedRefs::IGuidedRefTargetMono*) == 0x8);
    public:
    // Creating value type constructor for type: GuidedRefTryResolveInfo
    constexpr GuidedRefTryResolveInfo(int fieldId_ = {}, int index_ = {}, ::GorillaTag::GuidedRefs::IGuidedRefTargetMono* targetMono_ = {}) noexcept : fieldId{fieldId_}, index{index_}, targetMono{targetMono_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Int32 fieldId
    [[deprecated("Use field access instead!")]] int& dyn_fieldId();
    // Get instance field reference: public System.Int32 index
    [[deprecated("Use field access instead!")]] int& dyn_index();
    // Get instance field reference: public GorillaTag.GuidedRefs.IGuidedRefTargetMono targetMono
    [[deprecated("Use field access instead!")]] ::GorillaTag::GuidedRefs::IGuidedRefTargetMono*& dyn_targetMono();
  }; // GorillaTag.GuidedRefs.GuidedRefTryResolveInfo
  #pragma pack(pop)
  static check_size<sizeof(GuidedRefTryResolveInfo), 8 + sizeof(::GorillaTag::GuidedRefs::IGuidedRefTargetMono*)> __GorillaTag_GuidedRefs_GuidedRefTryResolveInfoSizeCheck;
  static_assert(sizeof(GuidedRefTryResolveInfo) == 0x10);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
