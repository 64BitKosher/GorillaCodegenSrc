// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: ParticleSystem
  class ParticleSystem;
  // Forward declaring type: AudioSource
  class AudioSource;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: VRRig
  class VRRig;
}
// Completed forward declares
// Type namespace: GorillaTag
namespace GorillaTag {
  // Forward declaring type: HeartRingCosmetic
  class HeartRingCosmetic;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaTag::HeartRingCosmetic);
DEFINE_IL2CPP_ARG_TYPE(::GorillaTag::HeartRingCosmetic*, "GorillaTag", "HeartRingCosmetic");
// Type namespace: GorillaTag
namespace GorillaTag {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: GorillaTag.HeartRingCosmetic
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultExecutionOrder] Offset: FFFFFFFF
  class HeartRingCosmetic : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.GameObject effects
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::GameObject* effects;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private System.Boolean isHauntedVoiceChanger
    // Size: 0x1
    // Offset: 0x28
    bool isHauntedVoiceChanger;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isHauntedVoiceChanger and: hauntedVoicePitch
    char __padding1[0x3] = {};
    // private System.Single hauntedVoicePitch
    // Size: 0x4
    // Offset: 0x2C
    float hauntedVoicePitch;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single effectActivationRadius
    // Size: 0x4
    // Offset: 0x30
    float effectActivationRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private readonly UnityEngine.Vector3 headToMouthOffset
    // Size: 0xC
    // Offset: 0x34
    ::UnityEngine::Vector3 headToMouthOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private VRRig ownerRig
    // Size: 0x8
    // Offset: 0x40
    ::GlobalNamespace::VRRig* ownerRig;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::VRRig*) == 0x8);
    // private UnityEngine.Transform ownerHead
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Transform* ownerHead;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.ParticleSystem particleSystem
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::ParticleSystem* particleSystem;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystem*) == 0x8);
    // private UnityEngine.AudioSource audioSource
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::AudioSource* audioSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // private System.Single maxEmissionRate
    // Size: 0x4
    // Offset: 0x60
    float maxEmissionRate;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single maxVolume
    // Size: 0x4
    // Offset: 0x64
    float maxVolume;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // static field const value: static private System.Single emissionFadeTime
    static constexpr const float emissionFadeTime = 0.1;
    // Get static field: static private System.Single emissionFadeTime
    static float _get_emissionFadeTime();
    // Set static field: static private System.Single emissionFadeTime
    static void _set_emissionFadeTime(float value);
    // static field const value: static private System.Single volumeFadeTime
    static constexpr const float volumeFadeTime = 2;
    // Get static field: static private System.Single volumeFadeTime
    static float _get_volumeFadeTime();
    // Set static field: static private System.Single volumeFadeTime
    static void _set_volumeFadeTime(float value);
    // Get instance field reference: public UnityEngine.GameObject effects
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_effects();
    // Get instance field reference: private System.Boolean isHauntedVoiceChanger
    [[deprecated("Use field access instead!")]] bool& dyn_isHauntedVoiceChanger();
    // Get instance field reference: private System.Single hauntedVoicePitch
    [[deprecated("Use field access instead!")]] float& dyn_hauntedVoicePitch();
    // Get instance field reference: public System.Single effectActivationRadius
    [[deprecated("Use field access instead!")]] float& dyn_effectActivationRadius();
    // Get instance field reference: private readonly UnityEngine.Vector3 headToMouthOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_headToMouthOffset();
    // Get instance field reference: private VRRig ownerRig
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig*& dyn_ownerRig();
    // Get instance field reference: private UnityEngine.Transform ownerHead
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_ownerHead();
    // Get instance field reference: private UnityEngine.ParticleSystem particleSystem
    [[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& dyn_particleSystem();
    // Get instance field reference: private UnityEngine.AudioSource audioSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_audioSource();
    // Get instance field reference: private System.Single maxEmissionRate
    [[deprecated("Use field access instead!")]] float& dyn_maxEmissionRate();
    // Get instance field reference: private System.Single maxVolume
    [[deprecated("Use field access instead!")]] float& dyn_maxVolume();
    // protected System.Void Awake()
    // Offset: 0x2877208
    void Awake();
    // protected System.Void OnEnable()
    // Offset: 0x28772AC
    void OnEnable();
    // protected System.Void LateUpdate()
    // Offset: 0x2877578
    void LateUpdate();
    // public System.Void .ctor()
    // Offset: 0x2877764
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HeartRingCosmetic* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaTag::HeartRingCosmetic::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HeartRingCosmetic*, creationType>()));
    }
    // private System.Void <Awake>b__13_0()
    // Offset: 0x2877784
    void $Awake$b__13_0();
  }; // GorillaTag.HeartRingCosmetic
  #pragma pack(pop)
  static check_size<sizeof(HeartRingCosmetic), 100 + sizeof(float)> __GorillaTag_HeartRingCosmeticSizeCheck;
  static_assert(sizeof(HeartRingCosmetic) == 0x68);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaTag::HeartRingCosmetic::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::HeartRingCosmetic::*)()>(&GorillaTag::HeartRingCosmetic::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::HeartRingCosmetic*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::HeartRingCosmetic::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::HeartRingCosmetic::*)()>(&GorillaTag::HeartRingCosmetic::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::HeartRingCosmetic*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::HeartRingCosmetic::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::HeartRingCosmetic::*)()>(&GorillaTag::HeartRingCosmetic::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::HeartRingCosmetic*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::HeartRingCosmetic::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GorillaTag::HeartRingCosmetic::$Awake$b__13_0
// Il2CppName: <Awake>b__13_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::HeartRingCosmetic::*)()>(&GorillaTag::HeartRingCosmetic::$Awake$b__13_0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::HeartRingCosmetic*), "<Awake>b__13_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
