// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Pun.MonoBehaviourPun
#include "Photon/Pun/MonoBehaviourPun.hpp"
// Including type: Photon.Pun.IPunObservable
#include "Photon/Pun/IPunObservable.hpp"
// Including type: Photon.Realtime.IInRoomCallbacks
#include "Photon/Realtime/IInRoomCallbacks.hpp"
// Including type: ITickSystemTick
#include "GlobalNamespace/ITickSystemTick.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.ParticleSystem/EmissionModule
#include "UnityEngine/ParticleSystem_EmissionModule.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GorillaTag
namespace GorillaTag {
  // Skipping declaration: RisingLiquidState because it is already included!
  // Skipping declaration: SyncData because it is already included!
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: Coroutine
  class Coroutine;
  // Forward declaring type: Collider
  class Collider;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: GorillaLocomotion::Swimming
namespace GorillaLocomotion::Swimming {
  // Forward declaring type: WaterVolume
  class WaterVolume;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: CompositeTriggerEvents
  class CompositeTriggerEvents;
  // Forward declaring type: ScienceExperimentSceneElements
  class ScienceExperimentSceneElements;
  // Forward declaring type: SlingshotProjectileHitNotifier
  class SlingshotProjectileHitNotifier;
  // Forward declaring type: ScienceExperimentElementID
  struct ScienceExperimentElementID;
  // Forward declaring type: SlingshotProjectile
  class SlingshotProjectile;
}
// Forward declaring namespace: Photon::Realtime
namespace Photon::Realtime {
  // Forward declaring type: Player
  class Player;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: Photon::Pun
namespace Photon::Pun {
  // Forward declaring type: PhotonStream
  class PhotonStream;
  // Forward declaring type: PhotonMessageInfo
  struct PhotonMessageInfo;
}
// Forward declaring namespace: ExitGames::Client::Photon
namespace ExitGames::Client::Photon {
  // Forward declaring type: Hashtable
  class Hashtable;
}
// Completed forward declares
// Type namespace: GorillaTag
namespace GorillaTag {
  // Forward declaring type: ScienceExperimentManager
  class ScienceExperimentManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GorillaTag::ScienceExperimentManager);
DEFINE_IL2CPP_ARG_TYPE(::GorillaTag::ScienceExperimentManager*, "GorillaTag", "ScienceExperimentManager");
// Type namespace: GorillaTag
namespace GorillaTag {
  // Size: 0x209
  #pragma pack(push, 1)
  // Autogenerated type: GorillaTag.ScienceExperimentManager
  // [TokenAttribute] Offset: FFFFFFFF
  class ScienceExperimentManager : public ::Photon::Pun::MonoBehaviourPun/*, public ::Photon::Pun::IPunObservable, public ::Photon::Realtime::IInRoomCallbacks, public ::GlobalNamespace::ITickSystemTick*/ {
    public:
    // Nested type: ::GorillaTag::ScienceExperimentManager::RisingLiquidState
    struct RisingLiquidState;
    // Nested type: ::GorillaTag::ScienceExperimentManager::RiseSpeed
    struct RiseSpeed;
    // Nested type: ::GorillaTag::ScienceExperimentManager::TagBehavior
    struct TagBehavior;
    // Nested type: ::GorillaTag::ScienceExperimentManager::PlayerGameState
    struct PlayerGameState;
    // Nested type: ::GorillaTag::ScienceExperimentManager::SyncData
    struct SyncData;
    // Nested type: ::GorillaTag::ScienceExperimentManager::RotatingRingState
    struct RotatingRingState;
    // Nested type: ::GorillaTag::ScienceExperimentManager::DisableByLiquidData
    struct DisableByLiquidData;
    // Nested type: ::GorillaTag::ScienceExperimentManager::$RotateRingsCoroutine$d__123
    class $RotateRingsCoroutine$d__123;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: GorillaTag.ScienceExperimentManager/RisingLiquidState
    // [TokenAttribute] Offset: FFFFFFFF
    struct RisingLiquidState/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: RisingLiquidState
      constexpr RisingLiquidState(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public GorillaTag.ScienceExperimentManager/RisingLiquidState Drained
      static constexpr const int Drained = 0;
      // Get static field: static public GorillaTag.ScienceExperimentManager/RisingLiquidState Drained
      static ::GorillaTag::ScienceExperimentManager::RisingLiquidState _get_Drained();
      // Set static field: static public GorillaTag.ScienceExperimentManager/RisingLiquidState Drained
      static void _set_Drained(::GorillaTag::ScienceExperimentManager::RisingLiquidState value);
      // static field const value: static public GorillaTag.ScienceExperimentManager/RisingLiquidState Erupting
      static constexpr const int Erupting = 1;
      // Get static field: static public GorillaTag.ScienceExperimentManager/RisingLiquidState Erupting
      static ::GorillaTag::ScienceExperimentManager::RisingLiquidState _get_Erupting();
      // Set static field: static public GorillaTag.ScienceExperimentManager/RisingLiquidState Erupting
      static void _set_Erupting(::GorillaTag::ScienceExperimentManager::RisingLiquidState value);
      // static field const value: static public GorillaTag.ScienceExperimentManager/RisingLiquidState Rising
      static constexpr const int Rising = 2;
      // Get static field: static public GorillaTag.ScienceExperimentManager/RisingLiquidState Rising
      static ::GorillaTag::ScienceExperimentManager::RisingLiquidState _get_Rising();
      // Set static field: static public GorillaTag.ScienceExperimentManager/RisingLiquidState Rising
      static void _set_Rising(::GorillaTag::ScienceExperimentManager::RisingLiquidState value);
      // static field const value: static public GorillaTag.ScienceExperimentManager/RisingLiquidState Full
      static constexpr const int Full = 3;
      // Get static field: static public GorillaTag.ScienceExperimentManager/RisingLiquidState Full
      static ::GorillaTag::ScienceExperimentManager::RisingLiquidState _get_Full();
      // Set static field: static public GorillaTag.ScienceExperimentManager/RisingLiquidState Full
      static void _set_Full(::GorillaTag::ScienceExperimentManager::RisingLiquidState value);
      // static field const value: static public GorillaTag.ScienceExperimentManager/RisingLiquidState PreDrainDelay
      static constexpr const int PreDrainDelay = 4;
      // Get static field: static public GorillaTag.ScienceExperimentManager/RisingLiquidState PreDrainDelay
      static ::GorillaTag::ScienceExperimentManager::RisingLiquidState _get_PreDrainDelay();
      // Set static field: static public GorillaTag.ScienceExperimentManager/RisingLiquidState PreDrainDelay
      static void _set_PreDrainDelay(::GorillaTag::ScienceExperimentManager::RisingLiquidState value);
      // static field const value: static public GorillaTag.ScienceExperimentManager/RisingLiquidState Draining
      static constexpr const int Draining = 5;
      // Get static field: static public GorillaTag.ScienceExperimentManager/RisingLiquidState Draining
      static ::GorillaTag::ScienceExperimentManager::RisingLiquidState _get_Draining();
      // Set static field: static public GorillaTag.ScienceExperimentManager/RisingLiquidState Draining
      static void _set_Draining(::GorillaTag::ScienceExperimentManager::RisingLiquidState value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // GorillaTag.ScienceExperimentManager/RisingLiquidState
    #pragma pack(pop)
    static check_size<sizeof(ScienceExperimentManager::RisingLiquidState), 0 + sizeof(int)> __GorillaTag_ScienceExperimentManager_RisingLiquidStateSizeCheck;
    static_assert(sizeof(ScienceExperimentManager::RisingLiquidState) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: GorillaTag.ScienceExperimentManager/RiseSpeed
    // [TokenAttribute] Offset: FFFFFFFF
    struct RiseSpeed/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: RiseSpeed
      constexpr RiseSpeed(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public GorillaTag.ScienceExperimentManager/RiseSpeed Fast
      static constexpr const int Fast = 0;
      // Get static field: static public GorillaTag.ScienceExperimentManager/RiseSpeed Fast
      static ::GorillaTag::ScienceExperimentManager::RiseSpeed _get_Fast();
      // Set static field: static public GorillaTag.ScienceExperimentManager/RiseSpeed Fast
      static void _set_Fast(::GorillaTag::ScienceExperimentManager::RiseSpeed value);
      // static field const value: static public GorillaTag.ScienceExperimentManager/RiseSpeed Medium
      static constexpr const int Medium = 1;
      // Get static field: static public GorillaTag.ScienceExperimentManager/RiseSpeed Medium
      static ::GorillaTag::ScienceExperimentManager::RiseSpeed _get_Medium();
      // Set static field: static public GorillaTag.ScienceExperimentManager/RiseSpeed Medium
      static void _set_Medium(::GorillaTag::ScienceExperimentManager::RiseSpeed value);
      // static field const value: static public GorillaTag.ScienceExperimentManager/RiseSpeed Slow
      static constexpr const int Slow = 2;
      // Get static field: static public GorillaTag.ScienceExperimentManager/RiseSpeed Slow
      static ::GorillaTag::ScienceExperimentManager::RiseSpeed _get_Slow();
      // Set static field: static public GorillaTag.ScienceExperimentManager/RiseSpeed Slow
      static void _set_Slow(::GorillaTag::ScienceExperimentManager::RiseSpeed value);
      // static field const value: static public GorillaTag.ScienceExperimentManager/RiseSpeed ExtraSlow
      static constexpr const int ExtraSlow = 3;
      // Get static field: static public GorillaTag.ScienceExperimentManager/RiseSpeed ExtraSlow
      static ::GorillaTag::ScienceExperimentManager::RiseSpeed _get_ExtraSlow();
      // Set static field: static public GorillaTag.ScienceExperimentManager/RiseSpeed ExtraSlow
      static void _set_ExtraSlow(::GorillaTag::ScienceExperimentManager::RiseSpeed value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // GorillaTag.ScienceExperimentManager/RiseSpeed
    #pragma pack(pop)
    static check_size<sizeof(ScienceExperimentManager::RiseSpeed), 0 + sizeof(int)> __GorillaTag_ScienceExperimentManager_RiseSpeedSizeCheck;
    static_assert(sizeof(ScienceExperimentManager::RiseSpeed) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: GorillaTag.ScienceExperimentManager/TagBehavior
    // [TokenAttribute] Offset: FFFFFFFF
    struct TagBehavior/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: TagBehavior
      constexpr TagBehavior(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public GorillaTag.ScienceExperimentManager/TagBehavior None
      static constexpr const int None = 0;
      // Get static field: static public GorillaTag.ScienceExperimentManager/TagBehavior None
      static ::GorillaTag::ScienceExperimentManager::TagBehavior _get_None();
      // Set static field: static public GorillaTag.ScienceExperimentManager/TagBehavior None
      static void _set_None(::GorillaTag::ScienceExperimentManager::TagBehavior value);
      // static field const value: static public GorillaTag.ScienceExperimentManager/TagBehavior Infect
      static constexpr const int Infect = 1;
      // Get static field: static public GorillaTag.ScienceExperimentManager/TagBehavior Infect
      static ::GorillaTag::ScienceExperimentManager::TagBehavior _get_Infect();
      // Set static field: static public GorillaTag.ScienceExperimentManager/TagBehavior Infect
      static void _set_Infect(::GorillaTag::ScienceExperimentManager::TagBehavior value);
      // static field const value: static public GorillaTag.ScienceExperimentManager/TagBehavior Revive
      static constexpr const int Revive = 2;
      // Get static field: static public GorillaTag.ScienceExperimentManager/TagBehavior Revive
      static ::GorillaTag::ScienceExperimentManager::TagBehavior _get_Revive();
      // Set static field: static public GorillaTag.ScienceExperimentManager/TagBehavior Revive
      static void _set_Revive(::GorillaTag::ScienceExperimentManager::TagBehavior value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // GorillaTag.ScienceExperimentManager/TagBehavior
    #pragma pack(pop)
    static check_size<sizeof(ScienceExperimentManager::TagBehavior), 0 + sizeof(int)> __GorillaTag_ScienceExperimentManager_TagBehaviorSizeCheck;
    static_assert(sizeof(ScienceExperimentManager::TagBehavior) == 0x4);
    // Size: 0xC
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: GorillaTag.ScienceExperimentManager/PlayerGameState
    // [TokenAttribute] Offset: FFFFFFFF
    struct PlayerGameState/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Int32 playerId
      // Size: 0x4
      // Offset: 0x0
      int playerId;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Boolean touchedLiquid
      // Size: 0x1
      // Offset: 0x4
      bool touchedLiquid;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // Padding between fields: touchedLiquid and: touchedLiquidAtProgress
      char __padding1[0x3] = {};
      // public System.Single touchedLiquidAtProgress
      // Size: 0x4
      // Offset: 0x8
      float touchedLiquidAtProgress;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      public:
      // Creating value type constructor for type: PlayerGameState
      constexpr PlayerGameState(int playerId_ = {}, bool touchedLiquid_ = {}, float touchedLiquidAtProgress_ = {}) noexcept : playerId{playerId_}, touchedLiquid{touchedLiquid_}, touchedLiquidAtProgress{touchedLiquidAtProgress_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.Int32 playerId
      [[deprecated("Use field access instead!")]] int& dyn_playerId();
      // Get instance field reference: public System.Boolean touchedLiquid
      [[deprecated("Use field access instead!")]] bool& dyn_touchedLiquid();
      // Get instance field reference: public System.Single touchedLiquidAtProgress
      [[deprecated("Use field access instead!")]] float& dyn_touchedLiquidAtProgress();
    }; // GorillaTag.ScienceExperimentManager/PlayerGameState
    #pragma pack(pop)
    static check_size<sizeof(ScienceExperimentManager::PlayerGameState), 8 + sizeof(float)> __GorillaTag_ScienceExperimentManager_PlayerGameStateSizeCheck;
    static_assert(sizeof(ScienceExperimentManager::PlayerGameState) == 0xC);
    // Size: 0x20
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: GorillaTag.ScienceExperimentManager/SyncData
    // [TokenAttribute] Offset: FFFFFFFF
    struct SyncData/*, public ::System::ValueType*/ {
      public:
      public:
      // public GorillaTag.ScienceExperimentManager/RisingLiquidState state
      // Size: 0x4
      // Offset: 0x0
      ::GorillaTag::ScienceExperimentManager::RisingLiquidState state;
      // Field size check
      static_assert(sizeof(::GorillaTag::ScienceExperimentManager::RisingLiquidState) == 0x4);
      // Padding between fields: state and: stateStartTime
      char __padding0[0x4] = {};
      // public System.Double stateStartTime
      // Size: 0x8
      // Offset: 0x8
      double stateStartTime;
      // Field size check
      static_assert(sizeof(double) == 0x8);
      // public System.Single stateStartLiquidProgressLinear
      // Size: 0x4
      // Offset: 0x10
      float stateStartLiquidProgressLinear;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // Padding between fields: stateStartLiquidProgressLinear and: activationProgress
      char __padding2[0x4] = {};
      // public System.Double activationProgress
      // Size: 0x8
      // Offset: 0x18
      double activationProgress;
      // Field size check
      static_assert(sizeof(double) == 0x8);
      public:
      // Creating value type constructor for type: SyncData
      constexpr SyncData(::GorillaTag::ScienceExperimentManager::RisingLiquidState state_ = {}, double stateStartTime_ = {}, float stateStartLiquidProgressLinear_ = {}, double activationProgress_ = {}) noexcept : state{state_}, stateStartTime{stateStartTime_}, stateStartLiquidProgressLinear{stateStartLiquidProgressLinear_}, activationProgress{activationProgress_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public GorillaTag.ScienceExperimentManager/RisingLiquidState state
      [[deprecated("Use field access instead!")]] ::GorillaTag::ScienceExperimentManager::RisingLiquidState& dyn_state();
      // Get instance field reference: public System.Double stateStartTime
      [[deprecated("Use field access instead!")]] double& dyn_stateStartTime();
      // Get instance field reference: public System.Single stateStartLiquidProgressLinear
      [[deprecated("Use field access instead!")]] float& dyn_stateStartLiquidProgressLinear();
      // Get instance field reference: public System.Double activationProgress
      [[deprecated("Use field access instead!")]] double& dyn_activationProgress();
    }; // GorillaTag.ScienceExperimentManager/SyncData
    #pragma pack(pop)
    static check_size<sizeof(ScienceExperimentManager::SyncData), 24 + sizeof(double)> __GorillaTag_ScienceExperimentManager_SyncDataSizeCheck;
    static_assert(sizeof(ScienceExperimentManager::SyncData) == 0x20);
    // Size: 0x10
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: GorillaTag.ScienceExperimentManager/RotatingRingState
    // [TokenAttribute] Offset: FFFFFFFF
    struct RotatingRingState/*, public ::System::ValueType*/ {
      public:
      public:
      // public UnityEngine.Transform ringTransform
      // Size: 0x8
      // Offset: 0x0
      ::UnityEngine::Transform* ringTransform;
      // Field size check
      static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
      // public System.Single initialAngle
      // Size: 0x4
      // Offset: 0x8
      float initialAngle;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single resultingAngle
      // Size: 0x4
      // Offset: 0xC
      float resultingAngle;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      public:
      // Creating value type constructor for type: RotatingRingState
      constexpr RotatingRingState(::UnityEngine::Transform* ringTransform_ = {}, float initialAngle_ = {}, float resultingAngle_ = {}) noexcept : ringTransform{ringTransform_}, initialAngle{initialAngle_}, resultingAngle{resultingAngle_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public UnityEngine.Transform ringTransform
      [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_ringTransform();
      // Get instance field reference: public System.Single initialAngle
      [[deprecated("Use field access instead!")]] float& dyn_initialAngle();
      // Get instance field reference: public System.Single resultingAngle
      [[deprecated("Use field access instead!")]] float& dyn_resultingAngle();
    }; // GorillaTag.ScienceExperimentManager/RotatingRingState
    #pragma pack(pop)
    static check_size<sizeof(ScienceExperimentManager::RotatingRingState), 12 + sizeof(float)> __GorillaTag_ScienceExperimentManager_RotatingRingStateSizeCheck;
    static_assert(sizeof(ScienceExperimentManager::RotatingRingState) == 0x10);
    public:
    // private GorillaTag.ScienceExperimentManager/TagBehavior tagBehavior
    // Size: 0x4
    // Offset: 0x28
    ::GorillaTag::ScienceExperimentManager::TagBehavior tagBehavior;
    // Field size check
    static_assert(sizeof(::GorillaTag::ScienceExperimentManager::TagBehavior) == 0x4);
    // private System.Single minScale
    // Size: 0x4
    // Offset: 0x2C
    float minScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single maxScale
    // Size: 0x4
    // Offset: 0x30
    float maxScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single riseTimeFast
    // Size: 0x4
    // Offset: 0x34
    float riseTimeFast;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single riseTimeMedium
    // Size: 0x4
    // Offset: 0x38
    float riseTimeMedium;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single riseTimeSlow
    // Size: 0x4
    // Offset: 0x3C
    float riseTimeSlow;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single riseTimeExtraSlow
    // Size: 0x4
    // Offset: 0x40
    float riseTimeExtraSlow;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single preDrainWaitTime
    // Size: 0x4
    // Offset: 0x44
    float preDrainWaitTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single maxFullTime
    // Size: 0x4
    // Offset: 0x48
    float maxFullTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single drainTime
    // Size: 0x4
    // Offset: 0x4C
    float drainTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single fullyDrainedWaitTime
    // Size: 0x4
    // Offset: 0x50
    float fullyDrainedWaitTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single lagResolutionLavaProgressPerSecond
    // Size: 0x4
    // Offset: 0x54
    float lagResolutionLavaProgressPerSecond;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.AnimationCurve animationCurve
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::AnimationCurve* animationCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // private System.Single lavaProgressToDisableRefreshWater
    // Size: 0x4
    // Offset: 0x60
    float lavaProgressToDisableRefreshWater;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single lavaProgressToEnableRefreshWater
    // Size: 0x4
    // Offset: 0x64
    float lavaProgressToEnableRefreshWater;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single entryLiquidMaxScale
    // Size: 0x4
    // Offset: 0x68
    float entryLiquidMaxScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector2 entryLiquidScaleSyncOpeningTop
    // Size: 0x8
    // Offset: 0x6C
    ::UnityEngine::Vector2 entryLiquidScaleSyncOpeningTop;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private UnityEngine.Vector2 entryLiquidScaleSyncOpeningBottom
    // Size: 0x8
    // Offset: 0x74
    ::UnityEngine::Vector2 entryLiquidScaleSyncOpeningBottom;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private System.Single entryBridgeQuadMaxScaleY
    // Size: 0x4
    // Offset: 0x7C
    float entryBridgeQuadMaxScaleY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector2 entryBridgeQuadMinMaxZHeight
    // Size: 0x8
    // Offset: 0x80
    ::UnityEngine::Vector2 entryBridgeQuadMinMaxZHeight;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private UnityEngine.AnimationCurve lavaActivationRockProgressVsPlayerCount
    // Size: 0x8
    // Offset: 0x88
    ::UnityEngine::AnimationCurve* lavaActivationRockProgressVsPlayerCount;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // private UnityEngine.AnimationCurve lavaActivationDrainRateVsPlayerCount
    // Size: 0x8
    // Offset: 0x90
    ::UnityEngine::AnimationCurve* lavaActivationDrainRateVsPlayerCount;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // public UnityEngine.GameObject waterBalloonPrefab
    // Size: 0x8
    // Offset: 0x98
    ::UnityEngine::GameObject* waterBalloonPrefab;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.Vector2 rotatingRingRandomAngleRange
    // Size: 0x8
    // Offset: 0xA0
    ::UnityEngine::Vector2 rotatingRingRandomAngleRange;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private System.Boolean rotatingRingQuantizeAngles
    // Size: 0x1
    // Offset: 0xA8
    bool rotatingRingQuantizeAngles;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: rotatingRingQuantizeAngles and: rotatingRingAngleSnapDegrees
    char __padding24[0x3] = {};
    // private System.Single rotatingRingAngleSnapDegrees
    // Size: 0x4
    // Offset: 0xAC
    float rotatingRingAngleSnapDegrees;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single drainBlockerSlideTime
    // Size: 0x4
    // Offset: 0xB0
    float drainBlockerSlideTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector2 sodaFizzParticleEmissionMinMax
    // Size: 0x8
    // Offset: 0xB4
    ::UnityEngine::Vector2 sodaFizzParticleEmissionMinMax;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private System.Single infrequentUpdatePeriod
    // Size: 0x4
    // Offset: 0xBC
    float infrequentUpdatePeriod;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean optPlayersOutOfRoomGameMode
    // Size: 0x1
    // Offset: 0xC0
    bool optPlayersOutOfRoomGameMode;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean debugDrawPlayerGameState
    // Size: 0x1
    // Offset: 0xC1
    bool debugDrawPlayerGameState;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: debugDrawPlayerGameState and: elements
    char __padding30[0x6] = {};
    // private ScienceExperimentSceneElements elements
    // Size: 0x8
    // Offset: 0xC8
    ::GlobalNamespace::ScienceExperimentSceneElements* elements;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ScienceExperimentSceneElements*) == 0x8);
    // private Photon.Realtime.Player[] allPlayersInRoom
    // Size: 0x8
    // Offset: 0xD0
    ::ArrayW<::Photon::Realtime::Player*> allPlayersInRoom;
    // Field size check
    static_assert(sizeof(::ArrayW<::Photon::Realtime::Player*>) == 0x8);
    // private GorillaTag.ScienceExperimentManager/RotatingRingState[] rotatingRings
    // Size: 0x8
    // Offset: 0xD8
    ::ArrayW<::GorillaTag::ScienceExperimentManager::RotatingRingState> rotatingRings;
    // Field size check
    static_assert(sizeof(::ArrayW<::GorillaTag::ScienceExperimentManager::RotatingRingState>) == 0x8);
    // private GorillaTag.ScienceExperimentManager/PlayerGameState[] inGamePlayerStates
    // Size: 0x8
    // Offset: 0xE0
    ::ArrayW<::GorillaTag::ScienceExperimentManager::PlayerGameState> inGamePlayerStates;
    // Field size check
    static_assert(sizeof(::ArrayW<::GorillaTag::ScienceExperimentManager::PlayerGameState>) == 0x8);
    // private System.Int32 inGamePlayerCount
    // Size: 0x4
    // Offset: 0xE8
    int inGamePlayerCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 lastWinnerId
    // Size: 0x4
    // Offset: 0xEC
    int lastWinnerId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.String lastWinnerName
    // Size: 0x8
    // Offset: 0xF0
    ::StringW lastWinnerName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Collections.Generic.List`1<GorillaTag.ScienceExperimentManager/PlayerGameState> sortedPlayerStates
    // Size: 0x8
    // Offset: 0xF8
    ::System::Collections::Generic::List_1<::GorillaTag::ScienceExperimentManager::PlayerGameState>* sortedPlayerStates;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GorillaTag::ScienceExperimentManager::PlayerGameState>*) == 0x8);
    // private GorillaTag.ScienceExperimentManager/SyncData reliableState
    // Size: 0x20
    // Offset: 0x100
    ::GorillaTag::ScienceExperimentManager::SyncData reliableState;
    // Field size check
    static_assert(sizeof(::GorillaTag::ScienceExperimentManager::SyncData) == 0x20);
    // private GorillaTag.ScienceExperimentManager/RiseSpeed nextRoundRiseSpeed
    // Size: 0x4
    // Offset: 0x120
    ::GorillaTag::ScienceExperimentManager::RiseSpeed nextRoundRiseSpeed;
    // Field size check
    static_assert(sizeof(::GorillaTag::ScienceExperimentManager::RiseSpeed) == 0x4);
    // private System.Single riseTime
    // Size: 0x4
    // Offset: 0x124
    float riseTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single riseProgress
    // Size: 0x4
    // Offset: 0x128
    float riseProgress;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single riseProgressLinear
    // Size: 0x4
    // Offset: 0x12C
    float riseProgressLinear;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single localLagRiseProgressOffset
    // Size: 0x4
    // Offset: 0x130
    float localLagRiseProgressOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: localLagRiseProgressOffset and: lastInfrequentUpdateTime
    char __padding44[0x4] = {};
    // private System.Double lastInfrequentUpdateTime
    // Size: 0x8
    // Offset: 0x138
    double lastInfrequentUpdateTime;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.String mentoProjectileTag
    // Size: 0x8
    // Offset: 0x140
    ::StringW mentoProjectileTag;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Double currentTime
    // Size: 0x8
    // Offset: 0x148
    double currentTime;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Double prevTime
    // Size: 0x8
    // Offset: 0x150
    double prevTime;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Single ringRotationProgress
    // Size: 0x4
    // Offset: 0x158
    float ringRotationProgress;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single drainBlockerSlideSpeed
    // Size: 0x4
    // Offset: 0x15C
    float drainBlockerSlideSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single[] riseTimeLookup
    // Size: 0x8
    // Offset: 0x160
    ::ArrayW<float> riseTimeLookup;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // public UnityEngine.Transform ringParent
    // Size: 0x8
    // Offset: 0x168
    ::UnityEngine::Transform* ringParent;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform liquidMeshTransform
    // Size: 0x8
    // Offset: 0x170
    ::UnityEngine::Transform* liquidMeshTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform liquidSurfacePlane
    // Size: 0x8
    // Offset: 0x178
    ::UnityEngine::Transform* liquidSurfacePlane;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform entryWayLiquidMeshTransform
    // Size: 0x8
    // Offset: 0x180
    ::UnityEngine::Transform* entryWayLiquidMeshTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform entryWayBridgeQuadTransform
    // Size: 0x8
    // Offset: 0x188
    ::UnityEngine::Transform* entryWayBridgeQuadTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform drainBlocker
    // Size: 0x8
    // Offset: 0x190
    ::UnityEngine::Transform* drainBlocker;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform drainBlockerClosedPosition
    // Size: 0x8
    // Offset: 0x198
    ::UnityEngine::Transform* drainBlockerClosedPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform drainBlockerOpenPosition
    // Size: 0x8
    // Offset: 0x1A0
    ::UnityEngine::Transform* drainBlockerOpenPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public GorillaLocomotion.Swimming.WaterVolume liquidVolume
    // Size: 0x8
    // Offset: 0x1A8
    ::GorillaLocomotion::Swimming::WaterVolume* liquidVolume;
    // Field size check
    static_assert(sizeof(::GorillaLocomotion::Swimming::WaterVolume*) == 0x8);
    // public GorillaLocomotion.Swimming.WaterVolume entryLiquidVolume
    // Size: 0x8
    // Offset: 0x1B0
    ::GorillaLocomotion::Swimming::WaterVolume* entryLiquidVolume;
    // Field size check
    static_assert(sizeof(::GorillaLocomotion::Swimming::WaterVolume*) == 0x8);
    // public GorillaLocomotion.Swimming.WaterVolume bottleLiquidVolume
    // Size: 0x8
    // Offset: 0x1B8
    ::GorillaLocomotion::Swimming::WaterVolume* bottleLiquidVolume;
    // Field size check
    static_assert(sizeof(::GorillaLocomotion::Swimming::WaterVolume*) == 0x8);
    // public GorillaLocomotion.Swimming.WaterVolume refreshWaterVolume
    // Size: 0x8
    // Offset: 0x1C0
    ::GorillaLocomotion::Swimming::WaterVolume* refreshWaterVolume;
    // Field size check
    static_assert(sizeof(::GorillaLocomotion::Swimming::WaterVolume*) == 0x8);
    // public CompositeTriggerEvents gameAreaTriggerNotifier
    // Size: 0x8
    // Offset: 0x1C8
    ::GlobalNamespace::CompositeTriggerEvents* gameAreaTriggerNotifier;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::CompositeTriggerEvents*) == 0x8);
    // public SlingshotProjectileHitNotifier sodaWaterProjectileTriggerNotifier
    // Size: 0x8
    // Offset: 0x1D0
    ::GlobalNamespace::SlingshotProjectileHitNotifier* sodaWaterProjectileTriggerNotifier;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SlingshotProjectileHitNotifier*) == 0x8);
    // public UnityEngine.AudioSource eruptionAudioSource
    // Size: 0x8
    // Offset: 0x1D8
    ::UnityEngine::AudioSource* eruptionAudioSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // public UnityEngine.AudioSource drainAudioSource
    // Size: 0x8
    // Offset: 0x1E0
    ::UnityEngine::AudioSource* drainAudioSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // public UnityEngine.AudioSource rotatingRingsAudioSource
    // Size: 0x8
    // Offset: 0x1E8
    ::UnityEngine::AudioSource* rotatingRingsAudioSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // private UnityEngine.ParticleSystem/EmissionModule fizzParticleEmission
    // Size: 0x8
    // Offset: 0x1F0
    ::UnityEngine::ParticleSystem::EmissionModule fizzParticleEmission;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystem::EmissionModule) == 0x8);
    // private System.Boolean hasPlayedEruptionEffects
    // Size: 0x1
    // Offset: 0x1F8
    bool hasPlayedEruptionEffects;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean hasPlayedDrainEffects
    // Size: 0x1
    // Offset: 0x1F9
    bool hasPlayedDrainEffects;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <ITickSystemTick.TickRunning>k__BackingField
    // Size: 0x1
    // Offset: 0x1FA
    bool TickRunning;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: TickRunning and: debugRotateRingsTime
    char __padding72[0x1] = {};
    // private System.Single debugRotateRingsTime
    // Size: 0x4
    // Offset: 0x1FC
    float debugRotateRingsTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Coroutine rotateRingsCoroutine
    // Size: 0x8
    // Offset: 0x200
    ::UnityEngine::Coroutine* rotateRingsCoroutine;
    // Field size check
    static_assert(sizeof(::UnityEngine::Coroutine*) == 0x8);
    // private System.Boolean debugRandomizingRings
    // Size: 0x1
    // Offset: 0x208
    bool debugRandomizingRings;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::Photon::Pun::IPunObservable
    operator ::Photon::Pun::IPunObservable() noexcept {
      return *reinterpret_cast<::Photon::Pun::IPunObservable*>(this);
    }
    // Creating interface conversion operator: operator ::Photon::Realtime::IInRoomCallbacks
    operator ::Photon::Realtime::IInRoomCallbacks() noexcept {
      return *reinterpret_cast<::Photon::Realtime::IInRoomCallbacks*>(this);
    }
    // Creating interface conversion operator: operator ::GlobalNamespace::ITickSystemTick
    operator ::GlobalNamespace::ITickSystemTick() noexcept {
      return *reinterpret_cast<::GlobalNamespace::ITickSystemTick*>(this);
    }
    // Get static field: static public GorillaTag.ScienceExperimentManager instance
    static ::GorillaTag::ScienceExperimentManager* _get_instance();
    // Set static field: static public GorillaTag.ScienceExperimentManager instance
    static void _set_instance(::GorillaTag::ScienceExperimentManager* value);
    // static field const value: static private System.Int32 maxPlayerCount
    static constexpr const int maxPlayerCount = 10;
    // Get static field: static private System.Int32 maxPlayerCount
    static int _get_maxPlayerCount();
    // Set static field: static private System.Int32 maxPlayerCount
    static void _set_maxPlayerCount(int value);
    // Get instance field reference: private GorillaTag.ScienceExperimentManager/TagBehavior tagBehavior
    [[deprecated("Use field access instead!")]] ::GorillaTag::ScienceExperimentManager::TagBehavior& dyn_tagBehavior();
    // Get instance field reference: private System.Single minScale
    [[deprecated("Use field access instead!")]] float& dyn_minScale();
    // Get instance field reference: private System.Single maxScale
    [[deprecated("Use field access instead!")]] float& dyn_maxScale();
    // Get instance field reference: private System.Single riseTimeFast
    [[deprecated("Use field access instead!")]] float& dyn_riseTimeFast();
    // Get instance field reference: private System.Single riseTimeMedium
    [[deprecated("Use field access instead!")]] float& dyn_riseTimeMedium();
    // Get instance field reference: private System.Single riseTimeSlow
    [[deprecated("Use field access instead!")]] float& dyn_riseTimeSlow();
    // Get instance field reference: private System.Single riseTimeExtraSlow
    [[deprecated("Use field access instead!")]] float& dyn_riseTimeExtraSlow();
    // Get instance field reference: private System.Single preDrainWaitTime
    [[deprecated("Use field access instead!")]] float& dyn_preDrainWaitTime();
    // Get instance field reference: private System.Single maxFullTime
    [[deprecated("Use field access instead!")]] float& dyn_maxFullTime();
    // Get instance field reference: private System.Single drainTime
    [[deprecated("Use field access instead!")]] float& dyn_drainTime();
    // Get instance field reference: private System.Single fullyDrainedWaitTime
    [[deprecated("Use field access instead!")]] float& dyn_fullyDrainedWaitTime();
    // Get instance field reference: private System.Single lagResolutionLavaProgressPerSecond
    [[deprecated("Use field access instead!")]] float& dyn_lagResolutionLavaProgressPerSecond();
    // Get instance field reference: private UnityEngine.AnimationCurve animationCurve
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_animationCurve();
    // Get instance field reference: private System.Single lavaProgressToDisableRefreshWater
    [[deprecated("Use field access instead!")]] float& dyn_lavaProgressToDisableRefreshWater();
    // Get instance field reference: private System.Single lavaProgressToEnableRefreshWater
    [[deprecated("Use field access instead!")]] float& dyn_lavaProgressToEnableRefreshWater();
    // Get instance field reference: private System.Single entryLiquidMaxScale
    [[deprecated("Use field access instead!")]] float& dyn_entryLiquidMaxScale();
    // Get instance field reference: private UnityEngine.Vector2 entryLiquidScaleSyncOpeningTop
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_entryLiquidScaleSyncOpeningTop();
    // Get instance field reference: private UnityEngine.Vector2 entryLiquidScaleSyncOpeningBottom
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_entryLiquidScaleSyncOpeningBottom();
    // Get instance field reference: private System.Single entryBridgeQuadMaxScaleY
    [[deprecated("Use field access instead!")]] float& dyn_entryBridgeQuadMaxScaleY();
    // Get instance field reference: private UnityEngine.Vector2 entryBridgeQuadMinMaxZHeight
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_entryBridgeQuadMinMaxZHeight();
    // Get instance field reference: private UnityEngine.AnimationCurve lavaActivationRockProgressVsPlayerCount
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_lavaActivationRockProgressVsPlayerCount();
    // Get instance field reference: private UnityEngine.AnimationCurve lavaActivationDrainRateVsPlayerCount
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_lavaActivationDrainRateVsPlayerCount();
    // Get instance field reference: public UnityEngine.GameObject waterBalloonPrefab
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_waterBalloonPrefab();
    // Get instance field reference: private UnityEngine.Vector2 rotatingRingRandomAngleRange
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_rotatingRingRandomAngleRange();
    // Get instance field reference: private System.Boolean rotatingRingQuantizeAngles
    [[deprecated("Use field access instead!")]] bool& dyn_rotatingRingQuantizeAngles();
    // Get instance field reference: private System.Single rotatingRingAngleSnapDegrees
    [[deprecated("Use field access instead!")]] float& dyn_rotatingRingAngleSnapDegrees();
    // Get instance field reference: private System.Single drainBlockerSlideTime
    [[deprecated("Use field access instead!")]] float& dyn_drainBlockerSlideTime();
    // Get instance field reference: private UnityEngine.Vector2 sodaFizzParticleEmissionMinMax
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_sodaFizzParticleEmissionMinMax();
    // Get instance field reference: private System.Single infrequentUpdatePeriod
    [[deprecated("Use field access instead!")]] float& dyn_infrequentUpdatePeriod();
    // Get instance field reference: private System.Boolean optPlayersOutOfRoomGameMode
    [[deprecated("Use field access instead!")]] bool& dyn_optPlayersOutOfRoomGameMode();
    // Get instance field reference: private System.Boolean debugDrawPlayerGameState
    [[deprecated("Use field access instead!")]] bool& dyn_debugDrawPlayerGameState();
    // Get instance field reference: private ScienceExperimentSceneElements elements
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ScienceExperimentSceneElements*& dyn_elements();
    // Get instance field reference: private Photon.Realtime.Player[] allPlayersInRoom
    [[deprecated("Use field access instead!")]] ::ArrayW<::Photon::Realtime::Player*>& dyn_allPlayersInRoom();
    // Get instance field reference: private GorillaTag.ScienceExperimentManager/RotatingRingState[] rotatingRings
    [[deprecated("Use field access instead!")]] ::ArrayW<::GorillaTag::ScienceExperimentManager::RotatingRingState>& dyn_rotatingRings();
    // Get instance field reference: private GorillaTag.ScienceExperimentManager/PlayerGameState[] inGamePlayerStates
    [[deprecated("Use field access instead!")]] ::ArrayW<::GorillaTag::ScienceExperimentManager::PlayerGameState>& dyn_inGamePlayerStates();
    // Get instance field reference: private System.Int32 inGamePlayerCount
    [[deprecated("Use field access instead!")]] int& dyn_inGamePlayerCount();
    // Get instance field reference: private System.Int32 lastWinnerId
    [[deprecated("Use field access instead!")]] int& dyn_lastWinnerId();
    // Get instance field reference: private System.String lastWinnerName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_lastWinnerName();
    // Get instance field reference: private System.Collections.Generic.List`1<GorillaTag.ScienceExperimentManager/PlayerGameState> sortedPlayerStates
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GorillaTag::ScienceExperimentManager::PlayerGameState>*& dyn_sortedPlayerStates();
    // Get instance field reference: private GorillaTag.ScienceExperimentManager/SyncData reliableState
    [[deprecated("Use field access instead!")]] ::GorillaTag::ScienceExperimentManager::SyncData& dyn_reliableState();
    // Get instance field reference: private GorillaTag.ScienceExperimentManager/RiseSpeed nextRoundRiseSpeed
    [[deprecated("Use field access instead!")]] ::GorillaTag::ScienceExperimentManager::RiseSpeed& dyn_nextRoundRiseSpeed();
    // Get instance field reference: private System.Single riseTime
    [[deprecated("Use field access instead!")]] float& dyn_riseTime();
    // Get instance field reference: private System.Single riseProgress
    [[deprecated("Use field access instead!")]] float& dyn_riseProgress();
    // Get instance field reference: private System.Single riseProgressLinear
    [[deprecated("Use field access instead!")]] float& dyn_riseProgressLinear();
    // Get instance field reference: private System.Single localLagRiseProgressOffset
    [[deprecated("Use field access instead!")]] float& dyn_localLagRiseProgressOffset();
    // Get instance field reference: private System.Double lastInfrequentUpdateTime
    [[deprecated("Use field access instead!")]] double& dyn_lastInfrequentUpdateTime();
    // Get instance field reference: private System.String mentoProjectileTag
    [[deprecated("Use field access instead!")]] ::StringW& dyn_mentoProjectileTag();
    // Get instance field reference: private System.Double currentTime
    [[deprecated("Use field access instead!")]] double& dyn_currentTime();
    // Get instance field reference: private System.Double prevTime
    [[deprecated("Use field access instead!")]] double& dyn_prevTime();
    // Get instance field reference: private System.Single ringRotationProgress
    [[deprecated("Use field access instead!")]] float& dyn_ringRotationProgress();
    // Get instance field reference: private System.Single drainBlockerSlideSpeed
    [[deprecated("Use field access instead!")]] float& dyn_drainBlockerSlideSpeed();
    // Get instance field reference: private System.Single[] riseTimeLookup
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_riseTimeLookup();
    // Get instance field reference: public UnityEngine.Transform ringParent
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_ringParent();
    // Get instance field reference: public UnityEngine.Transform liquidMeshTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_liquidMeshTransform();
    // Get instance field reference: public UnityEngine.Transform liquidSurfacePlane
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_liquidSurfacePlane();
    // Get instance field reference: public UnityEngine.Transform entryWayLiquidMeshTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_entryWayLiquidMeshTransform();
    // Get instance field reference: public UnityEngine.Transform entryWayBridgeQuadTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_entryWayBridgeQuadTransform();
    // Get instance field reference: public UnityEngine.Transform drainBlocker
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_drainBlocker();
    // Get instance field reference: public UnityEngine.Transform drainBlockerClosedPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_drainBlockerClosedPosition();
    // Get instance field reference: public UnityEngine.Transform drainBlockerOpenPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_drainBlockerOpenPosition();
    // Get instance field reference: public GorillaLocomotion.Swimming.WaterVolume liquidVolume
    [[deprecated("Use field access instead!")]] ::GorillaLocomotion::Swimming::WaterVolume*& dyn_liquidVolume();
    // Get instance field reference: public GorillaLocomotion.Swimming.WaterVolume entryLiquidVolume
    [[deprecated("Use field access instead!")]] ::GorillaLocomotion::Swimming::WaterVolume*& dyn_entryLiquidVolume();
    // Get instance field reference: public GorillaLocomotion.Swimming.WaterVolume bottleLiquidVolume
    [[deprecated("Use field access instead!")]] ::GorillaLocomotion::Swimming::WaterVolume*& dyn_bottleLiquidVolume();
    // Get instance field reference: public GorillaLocomotion.Swimming.WaterVolume refreshWaterVolume
    [[deprecated("Use field access instead!")]] ::GorillaLocomotion::Swimming::WaterVolume*& dyn_refreshWaterVolume();
    // Get instance field reference: public CompositeTriggerEvents gameAreaTriggerNotifier
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::CompositeTriggerEvents*& dyn_gameAreaTriggerNotifier();
    // Get instance field reference: public SlingshotProjectileHitNotifier sodaWaterProjectileTriggerNotifier
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SlingshotProjectileHitNotifier*& dyn_sodaWaterProjectileTriggerNotifier();
    // Get instance field reference: public UnityEngine.AudioSource eruptionAudioSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_eruptionAudioSource();
    // Get instance field reference: public UnityEngine.AudioSource drainAudioSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_drainAudioSource();
    // Get instance field reference: public UnityEngine.AudioSource rotatingRingsAudioSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_rotatingRingsAudioSource();
    // Get instance field reference: private UnityEngine.ParticleSystem/EmissionModule fizzParticleEmission
    [[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem::EmissionModule& dyn_fizzParticleEmission();
    // Get instance field reference: private System.Boolean hasPlayedEruptionEffects
    [[deprecated("Use field access instead!")]] bool& dyn_hasPlayedEruptionEffects();
    // Get instance field reference: private System.Boolean hasPlayedDrainEffects
    [[deprecated("Use field access instead!")]] bool& dyn_hasPlayedDrainEffects();
    // Get instance field reference: private System.Boolean <ITickSystemTick.TickRunning>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$ITickSystemTick_TickRunning$k__BackingField();
    // Get instance field reference: private System.Single debugRotateRingsTime
    [[deprecated("Use field access instead!")]] float& dyn_debugRotateRingsTime();
    // Get instance field reference: private UnityEngine.Coroutine rotateRingsCoroutine
    [[deprecated("Use field access instead!")]] ::UnityEngine::Coroutine*& dyn_rotateRingsCoroutine();
    // Get instance field reference: private System.Boolean debugRandomizingRings
    [[deprecated("Use field access instead!")]] bool& dyn_debugRandomizingRings();
    // private System.Boolean get_RefreshWaterAvailable()
    // Offset: 0x2880FAC
    bool get_RefreshWaterAvailable();
    // public GorillaTag.ScienceExperimentManager/RisingLiquidState get_GameState()
    // Offset: 0x2880FFC
    ::GorillaTag::ScienceExperimentManager::RisingLiquidState get_GameState();
    // public System.Single get_RiseProgress()
    // Offset: 0x2881004
    float get_RiseProgress();
    // public System.Single get_RiseProgressLinear()
    // Offset: 0x288100C
    float get_RiseProgressLinear();
    // private System.Int32 get_PlayerCount()
    // Offset: 0x2881014
    int get_PlayerCount();
    // private System.Void Awake()
    // Offset: 0x28810A0
    void Awake();
    // private System.Void OnEnable()
    // Offset: 0x2881880
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0x28818EC
    void OnDisable();
    // private System.Void OnDestroy()
    // Offset: 0x2881958
    void OnDestroy();
    // public System.Void InitElements(ScienceExperimentSceneElements elements)
    // Offset: 0x2881E2C
    void InitElements(::GlobalNamespace::ScienceExperimentSceneElements* elements);
    // public System.Void DeInitElements()
    // Offset: 0x2881FAC
    void DeInitElements();
    // public UnityEngine.Transform GetElement(ScienceExperimentElementID elementID)
    // Offset: 0x2881FB8
    ::UnityEngine::Transform* GetElement(::GlobalNamespace::ScienceExperimentElementID elementID);
    // private System.Boolean ITickSystemTick.get_TickRunning()
    // Offset: 0x288214C
    bool ITickSystemTick_get_TickRunning();
    // private System.Void ITickSystemTick.set_TickRunning(System.Boolean value)
    // Offset: 0x2882154
    void ITickSystemTick_set_TickRunning(bool value);
    // private System.Void ITickSystemTick.Tick()
    // Offset: 0x2882160
    void ITickSystemTick_Tick();
    // private System.Void InfrequentUpdate()
    // Offset: 0x2882630
    void InfrequentUpdate();
    // private System.Boolean PlayerInGame(Photon.Realtime.Player player)
    // Offset: 0x2883BB4
    bool PlayerInGame(::Photon::Realtime::Player* player);
    // private System.Void UpdateReliableState(System.Double currentTime, ref GorillaTag.ScienceExperimentManager/SyncData syncData)
    // Offset: 0x2882894
    void UpdateReliableState(double currentTime, ByRef<::GorillaTag::ScienceExperimentManager::SyncData> syncData);
    // private System.Void UpdateLocalState(System.Double currentTime, GorillaTag.ScienceExperimentManager/SyncData syncData)
    // Offset: 0x2882BE4
    void UpdateLocalState(double currentTime, ::GorillaTag::ScienceExperimentManager::SyncData syncData);
    // private System.Void UpdateLiquid(System.Single fillProgress)
    // Offset: 0x2882D40
    void UpdateLiquid(float fillProgress);
    // private System.Void UpdateRotatingRings(System.Single rotationProgress)
    // Offset: 0x2882FE4
    void UpdateRotatingRings(float rotationProgress);
    // private System.Void UpdateDrainBlocker(System.Double currentTime)
    // Offset: 0x28831D8
    void UpdateDrainBlocker(double currentTime);
    // private System.Void UpdateEffects()
    // Offset: 0x28837B4
    void UpdateEffects();
    // private System.Void DisableObjectsInContactWithLava(System.Single lavaScale)
    // Offset: 0x28833B4
    void DisableObjectsInContactWithLava(float lavaScale);
    // private System.Void UpdateWinner()
    // Offset: 0x2883C80
    void UpdateWinner();
    // private System.Void RefreshWinnerName()
    // Offset: 0x2883CFC
    void RefreshWinnerName();
    // private Photon.Realtime.Player GetPlayerFromId(System.Int32 id)
    // Offset: 0x2883D5C
    ::Photon::Realtime::Player* GetPlayerFromId(int id);
    // private System.Void UpdateRefreshWater()
    // Offset: 0x28830D0
    void UpdateRefreshWater();
    // private System.Void ResetGame()
    // Offset: 0x2883E34
    void ResetGame();
    // public System.Void RestartGame()
    // Offset: 0x2883E9C
    void RestartGame();
    // public System.Void DebugErupt()
    // Offset: 0x2883F90
    void DebugErupt();
    // public System.Void RandomizeRings()
    // Offset: 0x2884074
    void RandomizeRings();
    // private System.Collections.IEnumerator RotateRingsCoroutine()
    // Offset: 0x2884260
    ::System::Collections::IEnumerator* RotateRingsCoroutine();
    // public System.Boolean GetMaterialIfPlayerInGame(System.Int32 playerActorNumber, out System.Int32 materialIndex)
    // Offset: 0x28842F4
    bool GetMaterialIfPlayerInGame(int playerActorNumber, ByRef<int> materialIndex);
    // private System.Void OnPlayerTagged(Photon.Realtime.Player taggedPlayer, Photon.Realtime.Player taggingPlayer)
    // Offset: 0x2884370
    void OnPlayerTagged(::Photon::Realtime::Player* taggedPlayer, ::Photon::Realtime::Player* taggingPlayer);
    // private System.Void OnColliderEnteredVolume(UnityEngine.Collider collider)
    // Offset: 0x2884504
    void OnColliderEnteredVolume(::UnityEngine::Collider* collider);
    // private System.Void OnColliderExitedVolume(UnityEngine.Collider collider)
    // Offset: 0x28846E8
    void OnColliderExitedVolume(::UnityEngine::Collider* collider);
    // private System.Void OnColliderEnteredSoda(GorillaLocomotion.Swimming.WaterVolume volume, UnityEngine.Collider collider)
    // Offset: 0x28848C0
    void OnColliderEnteredSoda(::GorillaLocomotion::Swimming::WaterVolume* volume, ::UnityEngine::Collider* collider);
    // private System.Void OnColliderExitedSoda(GorillaLocomotion.Swimming.WaterVolume volume, UnityEngine.Collider collider)
    // Offset: 0x2884B0C
    void OnColliderExitedSoda(::GorillaLocomotion::Swimming::WaterVolume* volume, ::UnityEngine::Collider* collider);
    // private System.Void OnColliderEnteredRefreshWater(GorillaLocomotion.Swimming.WaterVolume volume, UnityEngine.Collider collider)
    // Offset: 0x2884B10
    void OnColliderEnteredRefreshWater(::GorillaLocomotion::Swimming::WaterVolume* volume, ::UnityEngine::Collider* collider);
    // private System.Void OnColliderExitedRefreshWater(GorillaLocomotion.Swimming.WaterVolume volume, UnityEngine.Collider collider)
    // Offset: 0x2884D5C
    void OnColliderExitedRefreshWater(::GorillaLocomotion::Swimming::WaterVolume* volume, ::UnityEngine::Collider* collider);
    // private System.Void OnProjectileEnteredSodaWater(SlingshotProjectile projectile, UnityEngine.Collider collider)
    // Offset: 0x2884D60
    void OnProjectileEnteredSodaWater(::GlobalNamespace::SlingshotProjectile* projectile, ::UnityEngine::Collider* collider);
    // private System.Void AddLavaRock(System.Int32 playerId)
    // Offset: 0x2884DBC
    void AddLavaRock(int playerId);
    // public System.Void OnWaterBalloonHitPlayer(Photon.Realtime.Player hitPlayer)
    // Offset: 0x2884E6C
    void OnWaterBalloonHitPlayer(::Photon::Realtime::Player* hitPlayer);
    // public System.Void OnPhotonSerializeView(Photon.Pun.PhotonStream stream, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x2885220
    void OnPhotonSerializeView(::Photon::Pun::PhotonStream* stream, ::Photon::Pun::PhotonMessageInfo info);
    // private System.Void PlayerEnteredGameArea(System.Int32 pId)
    // Offset: 0x28845D4
    void PlayerEnteredGameArea(int pId);
    // private System.Void PlayerExitedGameArea(System.Int32 playerId)
    // Offset: 0x28847B8
    void PlayerExitedGameArea(int playerId);
    // public System.Void PlayerTouchedLavaRPC(Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x2885A78
    void PlayerTouchedLavaRPC(::Photon::Pun::PhotonMessageInfo info);
    // private System.Void PlayerTouchedLava(System.Int32 playerId)
    // Offset: 0x2884A6C
    void PlayerTouchedLava(int playerId);
    // private System.Void PlayerTouchedRefreshWaterRPC(Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x2885B38
    void PlayerTouchedRefreshWaterRPC(::Photon::Pun::PhotonMessageInfo info);
    // private System.Void PlayerTouchedRefreshWater(System.Int32 playerId)
    // Offset: 0x2884CBC
    void PlayerTouchedRefreshWater(int playerId);
    // private System.Void ValidateLocalPlayerWaterBalloonHitRPC(System.Int32 playerId, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x2885BF8
    void ValidateLocalPlayerWaterBalloonHitRPC(int playerId, ::Photon::Pun::PhotonMessageInfo info);
    // private System.Void ValidateLocalPlayerWaterBalloonHit(System.Int32 playerId)
    // Offset: 0x2885020
    void ValidateLocalPlayerWaterBalloonHit(int playerId);
    // private System.Void PlayerHitByWaterBalloonRPC(System.Int32 playerId, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x2885D84
    void PlayerHitByWaterBalloonRPC(int playerId, ::Photon::Pun::PhotonMessageInfo info);
    // private System.Void PlayerHitByWaterBalloon(System.Int32 playerId)
    // Offset: 0x2885CF0
    void PlayerHitByWaterBalloon(int playerId);
    // public System.Void OnPlayerLeftRoom(Photon.Realtime.Player otherPlayer)
    // Offset: 0x2885E3C
    void OnPlayerLeftRoom(::Photon::Realtime::Player* otherPlayer);
    // public System.Void OnLeftRoom()
    // Offset: 0x2885E54
    void OnLeftRoom();
    // public System.Void OnMasterClientSwitched(Photon.Realtime.Player newMasterClient)
    // Offset: 0x2885E90
    void OnMasterClientSwitched(::Photon::Realtime::Player* newMasterClient);
    // public System.Void OnPlayerEnteredRoom(Photon.Realtime.Player newPlayer)
    // Offset: 0x2885FD8
    void OnPlayerEnteredRoom(::Photon::Realtime::Player* newPlayer);
    // public System.Void OnRoomPropertiesUpdate(ExitGames.Client.Photon.Hashtable propertiesThatChanged)
    // Offset: 0x2885FDC
    void OnRoomPropertiesUpdate(::ExitGames::Client::Photon::Hashtable* propertiesThatChanged);
    // public System.Void OnPlayerPropertiesUpdate(Photon.Realtime.Player targetPlayer, ExitGames.Client.Photon.Hashtable changedProps)
    // Offset: 0x2885FE0
    void OnPlayerPropertiesUpdate(::Photon::Realtime::Player* targetPlayer, ::ExitGames::Client::Photon::Hashtable* changedProps);
    // public System.Void .ctor()
    // Offset: 0x2885FE4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ScienceExperimentManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GorillaTag::ScienceExperimentManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ScienceExperimentManager*, creationType>()));
    }
    // private System.Int32 <UpdateReliableState>g__GetAlivePlayerCount|105_0()
    // Offset: 0x2883C20
    int $UpdateReliableState$g__GetAlivePlayerCount_105_0();
  }; // GorillaTag.ScienceExperimentManager
  #pragma pack(pop)
  static check_size<sizeof(ScienceExperimentManager), 520 + sizeof(bool)> __GorillaTag_ScienceExperimentManagerSizeCheck;
  static_assert(sizeof(ScienceExperimentManager) == 0x209);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GorillaTag::ScienceExperimentManager::RotatingRingState, "GorillaTag", "ScienceExperimentManager/RotatingRingState");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GorillaTag::ScienceExperimentManager::SyncData, "GorillaTag", "ScienceExperimentManager/SyncData");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GorillaTag::ScienceExperimentManager::PlayerGameState, "GorillaTag", "ScienceExperimentManager/PlayerGameState");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GorillaTag::ScienceExperimentManager::TagBehavior, "GorillaTag", "ScienceExperimentManager/TagBehavior");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GorillaTag::ScienceExperimentManager::RiseSpeed, "GorillaTag", "ScienceExperimentManager/RiseSpeed");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GorillaTag::ScienceExperimentManager::RisingLiquidState, "GorillaTag", "ScienceExperimentManager/RisingLiquidState");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentManager::get_RefreshWaterAvailable
// Il2CppName: get_RefreshWaterAvailable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaTag::ScienceExperimentManager::*)()>(&GorillaTag::ScienceExperimentManager::get_RefreshWaterAvailable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentManager*), "get_RefreshWaterAvailable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentManager::get_GameState
// Il2CppName: get_GameState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GorillaTag::ScienceExperimentManager::RisingLiquidState (GorillaTag::ScienceExperimentManager::*)()>(&GorillaTag::ScienceExperimentManager::get_GameState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentManager*), "get_GameState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentManager::get_RiseProgress
// Il2CppName: get_RiseProgress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GorillaTag::ScienceExperimentManager::*)()>(&GorillaTag::ScienceExperimentManager::get_RiseProgress)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentManager*), "get_RiseProgress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentManager::get_RiseProgressLinear
// Il2CppName: get_RiseProgressLinear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GorillaTag::ScienceExperimentManager::*)()>(&GorillaTag::ScienceExperimentManager::get_RiseProgressLinear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentManager*), "get_RiseProgressLinear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentManager::get_PlayerCount
// Il2CppName: get_PlayerCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GorillaTag::ScienceExperimentManager::*)()>(&GorillaTag::ScienceExperimentManager::get_PlayerCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentManager*), "get_PlayerCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentManager::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ScienceExperimentManager::*)()>(&GorillaTag::ScienceExperimentManager::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentManager*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentManager::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ScienceExperimentManager::*)()>(&GorillaTag::ScienceExperimentManager::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentManager*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentManager::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ScienceExperimentManager::*)()>(&GorillaTag::ScienceExperimentManager::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentManager*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentManager::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ScienceExperimentManager::*)()>(&GorillaTag::ScienceExperimentManager::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentManager*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentManager::InitElements
// Il2CppName: InitElements
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ScienceExperimentManager::*)(::GlobalNamespace::ScienceExperimentSceneElements*)>(&GorillaTag::ScienceExperimentManager::InitElements)> {
  static const MethodInfo* get() {
    static auto* elements = &::il2cpp_utils::GetClassFromName("", "ScienceExperimentSceneElements")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentManager*), "InitElements", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{elements});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentManager::DeInitElements
// Il2CppName: DeInitElements
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ScienceExperimentManager::*)()>(&GorillaTag::ScienceExperimentManager::DeInitElements)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentManager*), "DeInitElements", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentManager::GetElement
// Il2CppName: GetElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (GorillaTag::ScienceExperimentManager::*)(::GlobalNamespace::ScienceExperimentElementID)>(&GorillaTag::ScienceExperimentManager::GetElement)> {
  static const MethodInfo* get() {
    static auto* elementID = &::il2cpp_utils::GetClassFromName("", "ScienceExperimentElementID")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentManager*), "GetElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{elementID});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentManager::ITickSystemTick_get_TickRunning
// Il2CppName: ITickSystemTick.get_TickRunning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaTag::ScienceExperimentManager::*)()>(&GorillaTag::ScienceExperimentManager::ITickSystemTick_get_TickRunning)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentManager*), "ITickSystemTick.get_TickRunning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentManager::ITickSystemTick_set_TickRunning
// Il2CppName: ITickSystemTick.set_TickRunning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ScienceExperimentManager::*)(bool)>(&GorillaTag::ScienceExperimentManager::ITickSystemTick_set_TickRunning)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentManager*), "ITickSystemTick.set_TickRunning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentManager::ITickSystemTick_Tick
// Il2CppName: ITickSystemTick.Tick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ScienceExperimentManager::*)()>(&GorillaTag::ScienceExperimentManager::ITickSystemTick_Tick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentManager*), "ITickSystemTick.Tick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentManager::InfrequentUpdate
// Il2CppName: InfrequentUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ScienceExperimentManager::*)()>(&GorillaTag::ScienceExperimentManager::InfrequentUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentManager*), "InfrequentUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentManager::PlayerInGame
// Il2CppName: PlayerInGame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaTag::ScienceExperimentManager::*)(::Photon::Realtime::Player*)>(&GorillaTag::ScienceExperimentManager::PlayerInGame)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentManager*), "PlayerInGame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentManager::UpdateReliableState
// Il2CppName: UpdateReliableState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ScienceExperimentManager::*)(double, ByRef<::GorillaTag::ScienceExperimentManager::SyncData>)>(&GorillaTag::ScienceExperimentManager::UpdateReliableState)> {
  static const MethodInfo* get() {
    static auto* currentTime = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* syncData = &::il2cpp_utils::GetClassFromName("GorillaTag", "ScienceExperimentManager/SyncData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentManager*), "UpdateReliableState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currentTime, syncData});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentManager::UpdateLocalState
// Il2CppName: UpdateLocalState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ScienceExperimentManager::*)(double, ::GorillaTag::ScienceExperimentManager::SyncData)>(&GorillaTag::ScienceExperimentManager::UpdateLocalState)> {
  static const MethodInfo* get() {
    static auto* currentTime = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* syncData = &::il2cpp_utils::GetClassFromName("GorillaTag", "ScienceExperimentManager/SyncData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentManager*), "UpdateLocalState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currentTime, syncData});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentManager::UpdateLiquid
// Il2CppName: UpdateLiquid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ScienceExperimentManager::*)(float)>(&GorillaTag::ScienceExperimentManager::UpdateLiquid)> {
  static const MethodInfo* get() {
    static auto* fillProgress = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentManager*), "UpdateLiquid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fillProgress});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentManager::UpdateRotatingRings
// Il2CppName: UpdateRotatingRings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ScienceExperimentManager::*)(float)>(&GorillaTag::ScienceExperimentManager::UpdateRotatingRings)> {
  static const MethodInfo* get() {
    static auto* rotationProgress = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentManager*), "UpdateRotatingRings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rotationProgress});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentManager::UpdateDrainBlocker
// Il2CppName: UpdateDrainBlocker
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ScienceExperimentManager::*)(double)>(&GorillaTag::ScienceExperimentManager::UpdateDrainBlocker)> {
  static const MethodInfo* get() {
    static auto* currentTime = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentManager*), "UpdateDrainBlocker", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currentTime});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentManager::UpdateEffects
// Il2CppName: UpdateEffects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ScienceExperimentManager::*)()>(&GorillaTag::ScienceExperimentManager::UpdateEffects)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentManager*), "UpdateEffects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentManager::DisableObjectsInContactWithLava
// Il2CppName: DisableObjectsInContactWithLava
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ScienceExperimentManager::*)(float)>(&GorillaTag::ScienceExperimentManager::DisableObjectsInContactWithLava)> {
  static const MethodInfo* get() {
    static auto* lavaScale = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentManager*), "DisableObjectsInContactWithLava", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lavaScale});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentManager::UpdateWinner
// Il2CppName: UpdateWinner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ScienceExperimentManager::*)()>(&GorillaTag::ScienceExperimentManager::UpdateWinner)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentManager*), "UpdateWinner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentManager::RefreshWinnerName
// Il2CppName: RefreshWinnerName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ScienceExperimentManager::*)()>(&GorillaTag::ScienceExperimentManager::RefreshWinnerName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentManager*), "RefreshWinnerName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentManager::GetPlayerFromId
// Il2CppName: GetPlayerFromId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Realtime::Player* (GorillaTag::ScienceExperimentManager::*)(int)>(&GorillaTag::ScienceExperimentManager::GetPlayerFromId)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentManager*), "GetPlayerFromId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentManager::UpdateRefreshWater
// Il2CppName: UpdateRefreshWater
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ScienceExperimentManager::*)()>(&GorillaTag::ScienceExperimentManager::UpdateRefreshWater)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentManager*), "UpdateRefreshWater", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentManager::ResetGame
// Il2CppName: ResetGame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ScienceExperimentManager::*)()>(&GorillaTag::ScienceExperimentManager::ResetGame)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentManager*), "ResetGame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentManager::RestartGame
// Il2CppName: RestartGame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ScienceExperimentManager::*)()>(&GorillaTag::ScienceExperimentManager::RestartGame)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentManager*), "RestartGame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentManager::DebugErupt
// Il2CppName: DebugErupt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ScienceExperimentManager::*)()>(&GorillaTag::ScienceExperimentManager::DebugErupt)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentManager*), "DebugErupt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentManager::RandomizeRings
// Il2CppName: RandomizeRings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ScienceExperimentManager::*)()>(&GorillaTag::ScienceExperimentManager::RandomizeRings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentManager*), "RandomizeRings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentManager::RotateRingsCoroutine
// Il2CppName: RotateRingsCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GorillaTag::ScienceExperimentManager::*)()>(&GorillaTag::ScienceExperimentManager::RotateRingsCoroutine)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentManager*), "RotateRingsCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentManager::GetMaterialIfPlayerInGame
// Il2CppName: GetMaterialIfPlayerInGame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GorillaTag::ScienceExperimentManager::*)(int, ByRef<int>)>(&GorillaTag::ScienceExperimentManager::GetMaterialIfPlayerInGame)> {
  static const MethodInfo* get() {
    static auto* playerActorNumber = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* materialIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentManager*), "GetMaterialIfPlayerInGame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playerActorNumber, materialIndex});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentManager::OnPlayerTagged
// Il2CppName: OnPlayerTagged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ScienceExperimentManager::*)(::Photon::Realtime::Player*, ::Photon::Realtime::Player*)>(&GorillaTag::ScienceExperimentManager::OnPlayerTagged)> {
  static const MethodInfo* get() {
    static auto* taggedPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    static auto* taggingPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentManager*), "OnPlayerTagged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{taggedPlayer, taggingPlayer});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentManager::OnColliderEnteredVolume
// Il2CppName: OnColliderEnteredVolume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ScienceExperimentManager::*)(::UnityEngine::Collider*)>(&GorillaTag::ScienceExperimentManager::OnColliderEnteredVolume)> {
  static const MethodInfo* get() {
    static auto* collider = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentManager*), "OnColliderEnteredVolume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{collider});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentManager::OnColliderExitedVolume
// Il2CppName: OnColliderExitedVolume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ScienceExperimentManager::*)(::UnityEngine::Collider*)>(&GorillaTag::ScienceExperimentManager::OnColliderExitedVolume)> {
  static const MethodInfo* get() {
    static auto* collider = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentManager*), "OnColliderExitedVolume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{collider});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentManager::OnColliderEnteredSoda
// Il2CppName: OnColliderEnteredSoda
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ScienceExperimentManager::*)(::GorillaLocomotion::Swimming::WaterVolume*, ::UnityEngine::Collider*)>(&GorillaTag::ScienceExperimentManager::OnColliderEnteredSoda)> {
  static const MethodInfo* get() {
    static auto* volume = &::il2cpp_utils::GetClassFromName("GorillaLocomotion.Swimming", "WaterVolume")->byval_arg;
    static auto* collider = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentManager*), "OnColliderEnteredSoda", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{volume, collider});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentManager::OnColliderExitedSoda
// Il2CppName: OnColliderExitedSoda
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ScienceExperimentManager::*)(::GorillaLocomotion::Swimming::WaterVolume*, ::UnityEngine::Collider*)>(&GorillaTag::ScienceExperimentManager::OnColliderExitedSoda)> {
  static const MethodInfo* get() {
    static auto* volume = &::il2cpp_utils::GetClassFromName("GorillaLocomotion.Swimming", "WaterVolume")->byval_arg;
    static auto* collider = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentManager*), "OnColliderExitedSoda", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{volume, collider});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentManager::OnColliderEnteredRefreshWater
// Il2CppName: OnColliderEnteredRefreshWater
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ScienceExperimentManager::*)(::GorillaLocomotion::Swimming::WaterVolume*, ::UnityEngine::Collider*)>(&GorillaTag::ScienceExperimentManager::OnColliderEnteredRefreshWater)> {
  static const MethodInfo* get() {
    static auto* volume = &::il2cpp_utils::GetClassFromName("GorillaLocomotion.Swimming", "WaterVolume")->byval_arg;
    static auto* collider = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentManager*), "OnColliderEnteredRefreshWater", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{volume, collider});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentManager::OnColliderExitedRefreshWater
// Il2CppName: OnColliderExitedRefreshWater
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ScienceExperimentManager::*)(::GorillaLocomotion::Swimming::WaterVolume*, ::UnityEngine::Collider*)>(&GorillaTag::ScienceExperimentManager::OnColliderExitedRefreshWater)> {
  static const MethodInfo* get() {
    static auto* volume = &::il2cpp_utils::GetClassFromName("GorillaLocomotion.Swimming", "WaterVolume")->byval_arg;
    static auto* collider = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentManager*), "OnColliderExitedRefreshWater", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{volume, collider});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentManager::OnProjectileEnteredSodaWater
// Il2CppName: OnProjectileEnteredSodaWater
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ScienceExperimentManager::*)(::GlobalNamespace::SlingshotProjectile*, ::UnityEngine::Collider*)>(&GorillaTag::ScienceExperimentManager::OnProjectileEnteredSodaWater)> {
  static const MethodInfo* get() {
    static auto* projectile = &::il2cpp_utils::GetClassFromName("", "SlingshotProjectile")->byval_arg;
    static auto* collider = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentManager*), "OnProjectileEnteredSodaWater", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{projectile, collider});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentManager::AddLavaRock
// Il2CppName: AddLavaRock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ScienceExperimentManager::*)(int)>(&GorillaTag::ScienceExperimentManager::AddLavaRock)> {
  static const MethodInfo* get() {
    static auto* playerId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentManager*), "AddLavaRock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playerId});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentManager::OnWaterBalloonHitPlayer
// Il2CppName: OnWaterBalloonHitPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ScienceExperimentManager::*)(::Photon::Realtime::Player*)>(&GorillaTag::ScienceExperimentManager::OnWaterBalloonHitPlayer)> {
  static const MethodInfo* get() {
    static auto* hitPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentManager*), "OnWaterBalloonHitPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hitPlayer});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentManager::OnPhotonSerializeView
// Il2CppName: OnPhotonSerializeView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ScienceExperimentManager::*)(::Photon::Pun::PhotonStream*, ::Photon::Pun::PhotonMessageInfo)>(&GorillaTag::ScienceExperimentManager::OnPhotonSerializeView)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonStream")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentManager*), "OnPhotonSerializeView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, info});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentManager::PlayerEnteredGameArea
// Il2CppName: PlayerEnteredGameArea
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ScienceExperimentManager::*)(int)>(&GorillaTag::ScienceExperimentManager::PlayerEnteredGameArea)> {
  static const MethodInfo* get() {
    static auto* pId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentManager*), "PlayerEnteredGameArea", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pId});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentManager::PlayerExitedGameArea
// Il2CppName: PlayerExitedGameArea
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ScienceExperimentManager::*)(int)>(&GorillaTag::ScienceExperimentManager::PlayerExitedGameArea)> {
  static const MethodInfo* get() {
    static auto* playerId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentManager*), "PlayerExitedGameArea", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playerId});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentManager::PlayerTouchedLavaRPC
// Il2CppName: PlayerTouchedLavaRPC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ScienceExperimentManager::*)(::Photon::Pun::PhotonMessageInfo)>(&GorillaTag::ScienceExperimentManager::PlayerTouchedLavaRPC)> {
  static const MethodInfo* get() {
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentManager*), "PlayerTouchedLavaRPC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{info});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentManager::PlayerTouchedLava
// Il2CppName: PlayerTouchedLava
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ScienceExperimentManager::*)(int)>(&GorillaTag::ScienceExperimentManager::PlayerTouchedLava)> {
  static const MethodInfo* get() {
    static auto* playerId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentManager*), "PlayerTouchedLava", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playerId});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentManager::PlayerTouchedRefreshWaterRPC
// Il2CppName: PlayerTouchedRefreshWaterRPC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ScienceExperimentManager::*)(::Photon::Pun::PhotonMessageInfo)>(&GorillaTag::ScienceExperimentManager::PlayerTouchedRefreshWaterRPC)> {
  static const MethodInfo* get() {
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentManager*), "PlayerTouchedRefreshWaterRPC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{info});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentManager::PlayerTouchedRefreshWater
// Il2CppName: PlayerTouchedRefreshWater
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ScienceExperimentManager::*)(int)>(&GorillaTag::ScienceExperimentManager::PlayerTouchedRefreshWater)> {
  static const MethodInfo* get() {
    static auto* playerId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentManager*), "PlayerTouchedRefreshWater", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playerId});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentManager::ValidateLocalPlayerWaterBalloonHitRPC
// Il2CppName: ValidateLocalPlayerWaterBalloonHitRPC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ScienceExperimentManager::*)(int, ::Photon::Pun::PhotonMessageInfo)>(&GorillaTag::ScienceExperimentManager::ValidateLocalPlayerWaterBalloonHitRPC)> {
  static const MethodInfo* get() {
    static auto* playerId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentManager*), "ValidateLocalPlayerWaterBalloonHitRPC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playerId, info});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentManager::ValidateLocalPlayerWaterBalloonHit
// Il2CppName: ValidateLocalPlayerWaterBalloonHit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ScienceExperimentManager::*)(int)>(&GorillaTag::ScienceExperimentManager::ValidateLocalPlayerWaterBalloonHit)> {
  static const MethodInfo* get() {
    static auto* playerId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentManager*), "ValidateLocalPlayerWaterBalloonHit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playerId});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentManager::PlayerHitByWaterBalloonRPC
// Il2CppName: PlayerHitByWaterBalloonRPC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ScienceExperimentManager::*)(int, ::Photon::Pun::PhotonMessageInfo)>(&GorillaTag::ScienceExperimentManager::PlayerHitByWaterBalloonRPC)> {
  static const MethodInfo* get() {
    static auto* playerId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentManager*), "PlayerHitByWaterBalloonRPC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playerId, info});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentManager::PlayerHitByWaterBalloon
// Il2CppName: PlayerHitByWaterBalloon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ScienceExperimentManager::*)(int)>(&GorillaTag::ScienceExperimentManager::PlayerHitByWaterBalloon)> {
  static const MethodInfo* get() {
    static auto* playerId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentManager*), "PlayerHitByWaterBalloon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playerId});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentManager::OnPlayerLeftRoom
// Il2CppName: OnPlayerLeftRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ScienceExperimentManager::*)(::Photon::Realtime::Player*)>(&GorillaTag::ScienceExperimentManager::OnPlayerLeftRoom)> {
  static const MethodInfo* get() {
    static auto* otherPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentManager*), "OnPlayerLeftRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{otherPlayer});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentManager::OnLeftRoom
// Il2CppName: OnLeftRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ScienceExperimentManager::*)()>(&GorillaTag::ScienceExperimentManager::OnLeftRoom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentManager*), "OnLeftRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentManager::OnMasterClientSwitched
// Il2CppName: OnMasterClientSwitched
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ScienceExperimentManager::*)(::Photon::Realtime::Player*)>(&GorillaTag::ScienceExperimentManager::OnMasterClientSwitched)> {
  static const MethodInfo* get() {
    static auto* newMasterClient = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentManager*), "OnMasterClientSwitched", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newMasterClient});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentManager::OnPlayerEnteredRoom
// Il2CppName: OnPlayerEnteredRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ScienceExperimentManager::*)(::Photon::Realtime::Player*)>(&GorillaTag::ScienceExperimentManager::OnPlayerEnteredRoom)> {
  static const MethodInfo* get() {
    static auto* newPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentManager*), "OnPlayerEnteredRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newPlayer});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentManager::OnRoomPropertiesUpdate
// Il2CppName: OnRoomPropertiesUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ScienceExperimentManager::*)(::ExitGames::Client::Photon::Hashtable*)>(&GorillaTag::ScienceExperimentManager::OnRoomPropertiesUpdate)> {
  static const MethodInfo* get() {
    static auto* propertiesThatChanged = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "Hashtable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentManager*), "OnRoomPropertiesUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{propertiesThatChanged});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentManager::OnPlayerPropertiesUpdate
// Il2CppName: OnPlayerPropertiesUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GorillaTag::ScienceExperimentManager::*)(::Photon::Realtime::Player*, ::ExitGames::Client::Photon::Hashtable*)>(&GorillaTag::ScienceExperimentManager::OnPlayerPropertiesUpdate)> {
  static const MethodInfo* get() {
    static auto* targetPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    static auto* changedProps = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "Hashtable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentManager*), "OnPlayerPropertiesUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetPlayer, changedProps});
  }
};
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GorillaTag::ScienceExperimentManager::$UpdateReliableState$g__GetAlivePlayerCount_105_0
// Il2CppName: <UpdateReliableState>g__GetAlivePlayerCount|105_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GorillaTag::ScienceExperimentManager::*)()>(&GorillaTag::ScienceExperimentManager::$UpdateReliableState$g__GetAlivePlayerCount_105_0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GorillaTag::ScienceExperimentManager*), "<UpdateReliableState>g__GetAlivePlayerCount|105_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
