// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: GorillaTag.CosmeticSystem.CosmeticAttachInfo
#include "GorillaTag/CosmeticSystem/CosmeticAttachInfo.hpp"
// Including type: ECosmeticPartType
#include "GlobalNamespace/ECosmeticPartType.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GorillaTag
namespace GorillaTag {
  // Forward declaring type: GTAssetRef`1<TObject>
  template<typename TObject>
  class GTAssetRef_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: GorillaTag.CosmeticSystem
namespace GorillaTag::CosmeticSystem {
  // Forward declaring type: CosmeticPart
  struct CosmeticPart;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GorillaTag::CosmeticSystem::CosmeticPart, "GorillaTag.CosmeticSystem", "CosmeticPart");
// Type namespace: GorillaTag.CosmeticSystem
namespace GorillaTag::CosmeticSystem {
  // Size: 0x14
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: GorillaTag.CosmeticSystem.CosmeticPart
  // [TokenAttribute] Offset: FFFFFFFF
  struct CosmeticPart/*, public ::System::ValueType*/ {
    public:
    public:
    // public GorillaTag.GTAssetRef`1<UnityEngine.GameObject> prefabAssetRef
    // Size: 0x8
    // Offset: 0x0
    ::GorillaTag::GTAssetRef_1<::UnityEngine::GameObject*>* prefabAssetRef;
    // Field size check
    static_assert(sizeof(::GorillaTag::GTAssetRef_1<::UnityEngine::GameObject*>*) == 0x8);
    // public GorillaTag.CosmeticSystem.CosmeticAttachInfo[] attachAnchors
    // Size: 0x8
    // Offset: 0x8
    ::ArrayW<::GorillaTag::CosmeticSystem::CosmeticAttachInfo> attachAnchors;
    // Field size check
    static_assert(sizeof(::ArrayW<::GorillaTag::CosmeticSystem::CosmeticAttachInfo>) == 0x8);
    // public ECosmeticPartType partType
    // Size: 0x4
    // Offset: 0x10
    ::GlobalNamespace::ECosmeticPartType partType;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ECosmeticPartType) == 0x4);
    public:
    // Creating value type constructor for type: CosmeticPart
    constexpr CosmeticPart(::GorillaTag::GTAssetRef_1<::UnityEngine::GameObject*>* prefabAssetRef_ = {}, ::ArrayW<::GorillaTag::CosmeticSystem::CosmeticAttachInfo> attachAnchors_ = ::ArrayW<::GorillaTag::CosmeticSystem::CosmeticAttachInfo>(static_cast<void*>(nullptr)), ::GlobalNamespace::ECosmeticPartType partType_ = {}) noexcept : prefabAssetRef{prefabAssetRef_}, attachAnchors{attachAnchors_}, partType{partType_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public GorillaTag.GTAssetRef`1<UnityEngine.GameObject> prefabAssetRef
    [[deprecated("Use field access instead!")]] ::GorillaTag::GTAssetRef_1<::UnityEngine::GameObject*>*& dyn_prefabAssetRef();
    // Get instance field reference: public GorillaTag.CosmeticSystem.CosmeticAttachInfo[] attachAnchors
    [[deprecated("Use field access instead!")]] ::ArrayW<::GorillaTag::CosmeticSystem::CosmeticAttachInfo>& dyn_attachAnchors();
    // Get instance field reference: public ECosmeticPartType partType
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ECosmeticPartType& dyn_partType();
  }; // GorillaTag.CosmeticSystem.CosmeticPart
  #pragma pack(pop)
  static check_size<sizeof(CosmeticPart), 16 + sizeof(::GlobalNamespace::ECosmeticPartType)> __GorillaTag_CosmeticSystem_CosmeticPartSizeCheck;
  static_assert(sizeof(CosmeticPart) == 0x14);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
