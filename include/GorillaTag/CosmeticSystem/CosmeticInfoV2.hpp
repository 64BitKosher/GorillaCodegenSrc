// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: StringEnum`1
#include "GlobalNamespace/StringEnum_1.hpp"
// Including type: GorillaNetworking.CosmeticsController/CosmeticCategory
#include "GorillaNetworking/CosmeticsController.hpp"
// Including type: GorillaTag.CosmeticSystem.CosmeticPart
#include "GorillaTag/CosmeticSystem/CosmeticPart.hpp"
// Including type: GorillaTag.CosmeticSystem.CosmeticAnchorAntiIntersectOffsets
#include "GorillaTag/CosmeticSystem/CosmeticAnchorAntiIntersectOffsets.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GorillaTag::CosmeticSystem
namespace GorillaTag::CosmeticSystem {
  // Forward declaring type: SeasonSO
  class SeasonSO;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Sprite
  class Sprite;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Completed forward declares
// Type namespace: GorillaTag.CosmeticSystem
namespace GorillaTag::CosmeticSystem {
  // Forward declaring type: CosmeticInfoV2
  struct CosmeticInfoV2;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GorillaTag::CosmeticSystem::CosmeticInfoV2, "GorillaTag.CosmeticSystem", "CosmeticInfoV2");
// Type namespace: GorillaTag.CosmeticSystem
namespace GorillaTag::CosmeticSystem {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: GorillaTag.CosmeticSystem.CosmeticInfoV2
  // [TokenAttribute] Offset: FFFFFFFF
  struct CosmeticInfoV2/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Boolean enabled
    // Size: 0x1
    // Offset: 0x0
    bool enabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public GorillaTag.CosmeticSystem.SeasonSO season
    // Size: 0x8
    // Offset: 0x8
    ::GorillaTag::CosmeticSystem::SeasonSO* season;
    // Field size check
    static_assert(sizeof(::GorillaTag::CosmeticSystem::SeasonSO*) == 0x8);
    // public System.String displayName
    // Size: 0x8
    // Offset: 0x10
    ::StringW displayName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String playFabID
    // Size: 0x8
    // Offset: 0x18
    ::StringW playFabID;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public UnityEngine.Sprite icon
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Sprite* icon;
    // Field size check
    static_assert(sizeof(::UnityEngine::Sprite*) == 0x8);
    // public StringEnum`1<GorillaNetworking.CosmeticsController/CosmeticCategory> category
    // Size: 0xFFFFFFFF
    // Offset: 0x28
    ::GlobalNamespace::StringEnum_1<::GorillaNetworking::CosmeticsController::CosmeticCategory> category;
    // public System.Boolean isHoldable
    // Size: 0x1
    // Offset: 0x2C
    bool isHoldable;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean isThrowable
    // Size: 0x1
    // Offset: 0x2D
    bool isThrowable;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean usesBothHandSlots
    // Size: 0x1
    // Offset: 0x2E
    bool usesBothHandSlots;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean hideWardrobeMannequin
    // Size: 0x1
    // Offset: 0x2F
    bool hideWardrobeMannequin;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public GorillaTag.CosmeticSystem.CosmeticPart[] functionalParts
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::GorillaTag::CosmeticSystem::CosmeticPart> functionalParts;
    // Field size check
    static_assert(sizeof(::ArrayW<::GorillaTag::CosmeticSystem::CosmeticPart>) == 0x8);
    // public GorillaTag.CosmeticSystem.CosmeticPart[] wardrobeParts
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<::GorillaTag::CosmeticSystem::CosmeticPart> wardrobeParts;
    // Field size check
    static_assert(sizeof(::ArrayW<::GorillaTag::CosmeticSystem::CosmeticPart>) == 0x8);
    // public GorillaTag.CosmeticSystem.CosmeticPart[] firstPersonViewParts
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<::GorillaTag::CosmeticSystem::CosmeticPart> firstPersonViewParts;
    // Field size check
    static_assert(sizeof(::ArrayW<::GorillaTag::CosmeticSystem::CosmeticPart>) == 0x8);
    // public GorillaTag.CosmeticSystem.CosmeticAnchorAntiIntersectOffsets anchorAntiIntersectOffsets
    // Size: 0xDC
    // Offset: 0x48
    ::GorillaTag::CosmeticSystem::CosmeticAnchorAntiIntersectOffsets anchorAntiIntersectOffsets;
    // Field size check
    static_assert(sizeof(::GorillaTag::CosmeticSystem::CosmeticAnchorAntiIntersectOffsets) == 0xDC);
    // public System.String debugCosmeticSOName
    // Size: 0x8
    // Offset: 0x128
    ::StringW debugCosmeticSOName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Creating value type constructor for type: CosmeticInfoV2
    constexpr CosmeticInfoV2(bool enabled_ = {}, ::GorillaTag::CosmeticSystem::SeasonSO* season_ = {}, ::StringW displayName_ = {}, ::StringW playFabID_ = {}, ::UnityEngine::Sprite* icon_ = {}, ::GlobalNamespace::StringEnum_1<::GorillaNetworking::CosmeticsController::CosmeticCategory> category_ = {}, bool isHoldable_ = {}, bool isThrowable_ = {}, bool usesBothHandSlots_ = {}, bool hideWardrobeMannequin_ = {}, ::ArrayW<::GorillaTag::CosmeticSystem::CosmeticPart> functionalParts_ = ::ArrayW<::GorillaTag::CosmeticSystem::CosmeticPart>(static_cast<void*>(nullptr)), ::ArrayW<::GorillaTag::CosmeticSystem::CosmeticPart> wardrobeParts_ = ::ArrayW<::GorillaTag::CosmeticSystem::CosmeticPart>(static_cast<void*>(nullptr)), ::ArrayW<::GorillaTag::CosmeticSystem::CosmeticPart> firstPersonViewParts_ = ::ArrayW<::GorillaTag::CosmeticSystem::CosmeticPart>(static_cast<void*>(nullptr)), ::GorillaTag::CosmeticSystem::CosmeticAnchorAntiIntersectOffsets anchorAntiIntersectOffsets_ = {}, ::StringW debugCosmeticSOName_ = {}) noexcept : enabled{enabled_}, season{season_}, displayName{displayName_}, playFabID{playFabID_}, icon{icon_}, category{category_}, isHoldable{isHoldable_}, isThrowable{isThrowable_}, usesBothHandSlots{usesBothHandSlots_}, hideWardrobeMannequin{hideWardrobeMannequin_}, functionalParts{functionalParts_}, wardrobeParts{wardrobeParts_}, firstPersonViewParts{firstPersonViewParts_}, anchorAntiIntersectOffsets{anchorAntiIntersectOffsets_}, debugCosmeticSOName{debugCosmeticSOName_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // static field const value: static public System.String functionalParts_tooltip
    static constexpr const char* functionalParts_tooltip = "These individual parts which also handle the core functionality of the cosmetic. In most cases there will only be one part, there can be multiple parts for cases like rings which might be on both left and right hands.\u000a\u000aThese parts will be parented to the bones of  \"Gorilla Player Networked.prefab\" instances which includes the VRRig component.\u000a\u000aSince the implementation of the 1st cosmetics system version, any cosmetics attached to the head are hidden from local camera view. That includes\u000a";
    // Get static field: static public System.String functionalParts_tooltip
    static ::StringW _get_functionalParts_tooltip();
    // Set static field: static public System.String functionalParts_tooltip
    static void _set_functionalParts_tooltip(::StringW value);
    // Get instance field reference: public System.Boolean enabled
    [[deprecated("Use field access instead!")]] bool& dyn_enabled();
    // Get instance field reference: public GorillaTag.CosmeticSystem.SeasonSO season
    [[deprecated("Use field access instead!")]] ::GorillaTag::CosmeticSystem::SeasonSO*& dyn_season();
    // Get instance field reference: public System.String displayName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_displayName();
    // Get instance field reference: public System.String playFabID
    [[deprecated("Use field access instead!")]] ::StringW& dyn_playFabID();
    // Get instance field reference: public UnityEngine.Sprite icon
    [[deprecated("Use field access instead!")]] ::UnityEngine::Sprite*& dyn_icon();
    // Get instance field reference: public StringEnum`1<GorillaNetworking.CosmeticsController/CosmeticCategory> category
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::StringEnum_1<::GorillaNetworking::CosmeticsController::CosmeticCategory>& dyn_category();
    // Get instance field reference: public System.Boolean isHoldable
    [[deprecated("Use field access instead!")]] bool& dyn_isHoldable();
    // Get instance field reference: public System.Boolean isThrowable
    [[deprecated("Use field access instead!")]] bool& dyn_isThrowable();
    // Get instance field reference: public System.Boolean usesBothHandSlots
    [[deprecated("Use field access instead!")]] bool& dyn_usesBothHandSlots();
    // Get instance field reference: public System.Boolean hideWardrobeMannequin
    [[deprecated("Use field access instead!")]] bool& dyn_hideWardrobeMannequin();
    // Get instance field reference: public GorillaTag.CosmeticSystem.CosmeticPart[] functionalParts
    [[deprecated("Use field access instead!")]] ::ArrayW<::GorillaTag::CosmeticSystem::CosmeticPart>& dyn_functionalParts();
    // Get instance field reference: public GorillaTag.CosmeticSystem.CosmeticPart[] wardrobeParts
    [[deprecated("Use field access instead!")]] ::ArrayW<::GorillaTag::CosmeticSystem::CosmeticPart>& dyn_wardrobeParts();
    // Get instance field reference: public GorillaTag.CosmeticSystem.CosmeticPart[] firstPersonViewParts
    [[deprecated("Use field access instead!")]] ::ArrayW<::GorillaTag::CosmeticSystem::CosmeticPart>& dyn_firstPersonViewParts();
    // Get instance field reference: public GorillaTag.CosmeticSystem.CosmeticAnchorAntiIntersectOffsets anchorAntiIntersectOffsets
    [[deprecated("Use field access instead!")]] ::GorillaTag::CosmeticSystem::CosmeticAnchorAntiIntersectOffsets& dyn_anchorAntiIntersectOffsets();
    // Get instance field reference: public System.String debugCosmeticSOName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_debugCosmeticSOName();
    // public System.Void .ctor(System.String displayName)
    // Offset: 0x28AA3E8
    CosmeticInfoV2(::StringW displayName);
  }; // GorillaTag.CosmeticSystem.CosmeticInfoV2
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GorillaTag::CosmeticSystem::CosmeticInfoV2::CosmeticInfoV2
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
