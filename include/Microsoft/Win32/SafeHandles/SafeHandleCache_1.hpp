// Autogenerated from CppHeaderCreator
// Custom Codegen for GORILLA TAG by chcoal
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Runtime::InteropServices
namespace System::Runtime::InteropServices {
  // Forward declaring type: SafeHandle
  class SafeHandle;
}
// Completed forward declares
// Type namespace: Microsoft.Win32.SafeHandles
namespace Microsoft::Win32::SafeHandles {
  // Forward declaring type: SafeHandleCache`1<T>
  template<typename T>
  class SafeHandleCache_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::Microsoft::Win32::SafeHandles::SafeHandleCache_1, "Microsoft.Win32.SafeHandles", "SafeHandleCache`1");
// Type namespace: Microsoft.Win32.SafeHandles
namespace Microsoft::Win32::SafeHandles {
  // WARNING Size may be invalid!
  // Autogenerated type: Microsoft.Win32.SafeHandles.SafeHandleCache`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class SafeHandleCache_1 : public ::Il2CppObject {
    public:
    // Autogenerated static field getter
    // Get static field: static private T s_invalidHandle
    static T _get_s_invalidHandle() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Microsoft::Win32::SafeHandles::SafeHandleCache_1::_get_s_invalidHandle");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<T>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<SafeHandleCache_1<T>*>::get(), "s_invalidHandle"));
    }
    // Autogenerated static field setter
    // Set static field: static private T s_invalidHandle
    static void _set_s_invalidHandle(T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Microsoft::Win32::SafeHandles::SafeHandleCache_1::_set_s_invalidHandle");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<SafeHandleCache_1<T>*>::get(), "s_invalidHandle", value));
    }
    // static System.Boolean IsCachedInvalidHandle(System.Runtime.InteropServices.SafeHandle handle)
    // Offset: 0xFFFFFFFFFFFFFFFF
    static bool IsCachedInvalidHandle(::System::Runtime::InteropServices::SafeHandle* handle) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Microsoft::Win32::SafeHandles::SafeHandleCache_1::IsCachedInvalidHandle");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<SafeHandleCache_1<T>*>::get(), "IsCachedInvalidHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handle)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, handle);
    }
  }; // Microsoft.Win32.SafeHandles.SafeHandleCache`1
  // Could not write size check! Type: Microsoft.Win32.SafeHandles.SafeHandleCache`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
